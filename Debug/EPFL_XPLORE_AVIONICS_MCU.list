
EPFL_XPLORE_AVIONICS_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014428  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  080146c8  080146c8  000246c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014cfc  08014cfc  00024cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d04  08014d04  00024d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d08  08014d08  00024d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  08014d0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054ec  240001e4  08014ef0  000301e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240056d0  08014ef0  000356d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038d71  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ac4  00000000  00000000  00068f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b78  00000000  00000000  0006ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002950  00000000  00000000  000715c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b9a9  00000000  00000000  00073f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034252  00000000  00000000  0007f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001b4aca  00000000  00000000  000b3b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002685d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000cd7c  00000000  00000000  00268628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080146b0 	.word	0x080146b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	080146b0 	.word	0x080146b0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <ADC1115_test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC1115_test(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	b0a4      	sub	sp, #144	; 0x90
 8000698:	af02      	add	r7, sp, #8
	ads1113_t i2c;
	char MSG[100];
	// Declare the structure where we using GND as address.
	// Look at the top of the header file for addresses.
	bool success = ADS1113_init(&i2c, &hi2c4, ADS_ADDR_GND); // Or ADS1015(&i2c, &hi2c1, ADS_ADDR_GND);
 800069a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069e:	2248      	movs	r2, #72	; 0x48
 80006a0:	491c      	ldr	r1, [pc, #112]	; (8000714 <ADC1115_test+0x80>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ff16 	bl	80034d4 <ADS1113_init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	ADSsetGain(&i2c, GAIN_ONE);
 80006ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 ff8e 	bl	80035d8 <ADSsetGain>
	int16_t adc_diff;
	float adc_voltage;

	while(1){
	   // Get ADC values
	   adc_diff = ADSreadADC_Differential_0_1(&i2c);
 80006bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ffdb 	bl	800367c <ADSreadADC_Differential_0_1>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	   adc_voltage = ADSreadADC_Voltage(&i2c);
 80006cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f813 	bl	80036fc <ADSreadADC_Voltage>
 80006d6:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
	//
	   sprintf(MSG, "ADC diff reading \t = %d \t Voltage \t = %.2f \r\n", adc_diff, adc_voltage);
 80006da:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80006de:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80006e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	ed8d 7b00 	vstr	d7, [sp]
 80006ec:	490a      	ldr	r1, [pc, #40]	; (8000718 <ADC1115_test+0x84>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f011 ff8e 	bl	8012610 <siprintf>
	//       sprintf(MSG, "ADC diff reading \t = %d \n", adc_diff);
//	   sprintf(MSG, "ADC diff reading \t = %.2f \r\n", adc_voltage);
	   HAL_UART_Transmit(&huart2, MSG, strlen((char*) MSG), 100);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fdf2 	bl	80002e0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	1d39      	adds	r1, r7, #4
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <ADC1115_test+0x88>)
 8000706:	f00c fbe7 	bl	800ced8 <HAL_UART_Transmit>
	   HAL_Delay(100);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f003 f87c 	bl	8003808 <HAL_Delay>
	   adc_diff = ADSreadADC_Differential_0_1(&i2c);
 8000710:	e7d4      	b.n	80006bc <ADC1115_test+0x28>
 8000712:	bf00      	nop
 8000714:	24000518 	.word	0x24000518
 8000718:	080146d0 	.word	0x080146d0
 800071c:	24000774 	.word	0x24000774

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b0ac      	sub	sp, #176	; 0xb0
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f003 f813 	bl	8003750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f873 	bl	8000814 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072e:	f000 f8f7 	bl	8000920 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f001 f997 	bl	8001a64 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000736:	f000 faa3 	bl	8000c80 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800073a:	f000 fb05 	bl	8000d48 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800073e:	f000 fb67 	bl	8000e10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000742:	f000 fba5 	bl	8000e90 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000746:	f000 fbe3 	bl	8000f10 <MX_I2C4_Init>
  MX_USART1_Init();
 800074a:	f000 fd07 	bl	800115c <MX_USART1_Init>
  MX_USART2_UART_Init();
 800074e:	f000 fd51 	bl	80011f4 <MX_USART2_UART_Init>
  MX_USART3_Init();
 8000752:	f000 fd9b 	bl	800128c <MX_USART3_Init>
  MX_ADC1_Init();
 8000756:	f000 f911 	bl	800097c <MX_ADC1_Init>
  MX_ADC2_Init();
 800075a:	f000 f989 	bl	8000a70 <MX_ADC2_Init>
  MX_ADC3_Init();
 800075e:	f000 f9ed 	bl	8000b3c <MX_ADC3_Init>
  MX_QUADSPI_Init();
 8000762:	f000 fe2b 	bl	80013bc <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000766:	f000 fe55 	bl	8001414 <MX_SPI1_Init>
  MX_SPI2_Init();
 800076a:	f000 fea9 	bl	80014c0 <MX_SPI2_Init>
  MX_SPI4_Init();
 800076e:	f000 fefd 	bl	800156c <MX_SPI4_Init>
  MX_USART6_Init();
 8000772:	f000 fdd7 	bl	8001324 <MX_USART6_Init>
  MX_DAC1_Init();
 8000776:	f000 fa47 	bl	8000c08 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 800077a:	f000 fc09 	bl	8000f90 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800077e:	f000 fc55 	bl	800102c <MX_UART4_Init>
  MX_UART8_Init();
 8000782:	f000 fc9f 	bl	80010c4 <MX_UART8_Init>
  MX_TIM1_Init();
 8000786:	f000 ff47 	bl	8001618 <MX_TIM1_Init>
  MX_TIM5_Init();
 800078a:	f001 f84d 	bl	8001828 <MX_TIM5_Init>
  MX_TIM15_Init();
 800078e:	f001 f8a5 	bl	80018dc <MX_TIM15_Init>
  MX_DMA_Init();
 8000792:	f001 f947 	bl	8001a24 <MX_DMA_Init>
  MX_TIM4_Init();
 8000796:	f000 ffcf 	bl	8001738 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800079a:	f00e fb33 	bl	800ee04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GetAcc */
  GetAccHandle = osThreadNew(GetAcceleration, NULL, &GetAcc_attributes);
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <main+0xdc>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <main+0xe0>)
 80007a4:	f00e fb78 	bl	800ee98 <osThreadNew>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <main+0xe4>)
 80007ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ae:	f00e fb4d 	bl	800ee4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char text[100];

	uint8_t Buffer[25] = {0};
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <main+0xe8>)
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <main+0xec>)
 80007ce:	f107 040c 	add.w	r4, r7, #12
 80007d2:	461d      	mov	r5, r3
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007dc:	c403      	stmia	r4!, {r0, r1}
 80007de:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <main+0xf0>)
 80007e2:	463b      	mov	r3, r7
 80007e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e6:	c303      	stmia	r3!, {r0, r1}
 80007e8:	801a      	strh	r2, [r3, #0]
 80007ea:	3302      	adds	r3, #2
 80007ec:	0c12      	lsrs	r2, r2, #16
 80007ee:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0, ret;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	//  stemma_test();
	//  bno_test();
	//  VL53l1_test();
	//  hx711_test();
		ADC1115_test();
 80007f6:	f7ff ff4d 	bl	8000694 <ADC1115_test>
	while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0xda>
 80007fc:	080148b0 	.word	0x080148b0
 8000800:	08001c81 	.word	0x08001c81
 8000804:	24000c50 	.word	0x24000c50
 8000808:	00202d20 	.word	0x00202d20
 800080c:	08014824 	.word	0x08014824
 8000810:	08014840 	.word	0x08014840

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f011 f99b 	bl	8011b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f011 f995 	bl	8011b5e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000834:	2002      	movs	r0, #2
 8000836:	f007 fdf3 	bl	8008420 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <SystemClock_Config+0x100>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <SystemClock_Config+0x100>)
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <SystemClock_Config+0x100>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <SystemClock_Config+0x104>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <SystemClock_Config+0x104>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <SystemClock_Config+0x104>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000870:	bf00      	nop
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <SystemClock_Config+0x104>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087e:	d1f8      	bne.n	8000872 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <SystemClock_Config+0x108>)
 8000882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <SystemClock_Config+0x108>)
 8000886:	f023 0303 	bic.w	r3, r3, #3
 800088a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000890:	2301      	movs	r3, #1
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008a4:	2309      	movs	r3, #9
 80008a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b4:	230c      	movs	r3, #12
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008b8:	2302      	movs	r3, #2
 80008ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80008bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 fe9e 	bl	8008608 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d2:	f001 f9ef 	bl	8001cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	233f      	movs	r3, #63	; 0x3f
 80008d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 fa91 	bl	8008e24 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000908:	f001 f9d4 	bl	8001cb4 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3770      	adds	r7, #112	; 0x70
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800
 800091c:	58024400 	.word	0x58024400

08000920 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0b0      	sub	sp, #192	; 0xc0
 8000924:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	22bc      	movs	r2, #188	; 0xbc
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f011 f916 	bl	8011b5e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000932:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000936:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800093c:	2309      	movs	r3, #9
 800093e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800094c:	23c0      	movs	r3, #192	; 0xc0
 800094e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000950:	2320      	movs	r3, #32
 8000952:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f008 fe2c 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800096e:	f001 f9a1 	bl	8001cb4 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	37c0      	adds	r7, #192	; 0xc0
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <MX_ADC1_Init+0xe8>)
 80009a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_ADC1_Init+0xe4>)
 80009fe:	f003 f8bf 	bl	8003b80 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a08:	f001 f954 	bl	8001cb4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_ADC1_Init+0xe4>)
 8000a18:	f003 fed4 	bl	80047c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a22:	f001 f947 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_ADC1_Init+0xec>)
 8000a28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_ADC1_Init+0xf0>)
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a36:	2304      	movs	r3, #4
 8000a38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_ADC1_Init+0xe4>)
 8000a48:	f003 fa3c 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a52:	f001 f92f 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000200 	.word	0x24000200
 8000a64:	40022000 	.word	0x40022000
 8000a68:	10c00010 	.word	0x10c00010
 8000a6c:	47ff0000 	.word	0x47ff0000

08000a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000a8a:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <MX_ADC2_Init+0xc0>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000ae6:	f003 f84b 	bl	8003b80 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000af0:	f001 f8e0 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_ADC2_Init+0xc4>)
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2306      	movs	r3, #6
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_ADC2_Init+0xc8>)
 8000b02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2304      	movs	r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000b16:	f003 f9d5 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000b20:	f001 f8c8 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000264 	.word	0x24000264
 8000b30:	40022100 	.word	0x40022100
 8000b34:	10c00010 	.word	0x10c00010
 8000b38:	47ff0000 	.word	0x47ff0000

08000b3c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b56:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <MX_ADC3_Init+0xc0>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000bb2:	f002 ffe5 	bl	8003b80 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f001 f87a 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC3_Init+0xc4>)
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_ADC3_Init+0xc8>)
 8000bce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC3_Init+0xbc>)
 8000be2:	f003 f96f 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f001 f862 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240002c8 	.word	0x240002c8
 8000bfc:	58026000 	.word	0x58026000
 8000c00:	2a000400 	.word	0x2a000400
 8000c04:	47ff0000 	.word	0x47ff0000

08000c08 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2224      	movs	r2, #36	; 0x24
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f010 ffa2 	bl	8011b5e <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_DAC1_Init+0x70>)
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_DAC1_Init+0x74>)
 8000c1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c20:	4815      	ldr	r0, [pc, #84]	; (8000c78 <MX_DAC1_Init+0x70>)
 8000c22:	f003 ff8d 	bl	8004b40 <HAL_DAC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c2c:	f001 f842 	bl	8001cb4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_DAC1_Init+0x70>)
 8000c4c:	f003 fffe 	bl	8004c4c <HAL_DAC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c56:	f001 f82d 	bl	8001cb4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_DAC1_Init+0x70>)
 8000c62:	f003 fff3 	bl	8004c4c <HAL_DAC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c6c:	f001 f822 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2400032c 	.word	0x2400032c
 8000c7c:	40007400 	.word	0x40007400

08000c80 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <MX_FDCAN1_Init+0xc4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_FDCAN1_Init+0xc0>)
 8000d2e:	f005 fd89 	bl	8006844 <HAL_FDCAN_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d38:	f000 ffbc 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24000340 	.word	0x24000340
 8000d44:	4000a000 	.word	0x4000a000

08000d48 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <MX_FDCAN2_Init+0xc4>)
 8000d50:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000df0:	2204      	movs	r2, #4
 8000df2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_FDCAN2_Init+0xc0>)
 8000df6:	f005 fd25 	bl	8006844 <HAL_FDCAN_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e00:	f000 ff58 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240003e0 	.word	0x240003e0
 8000e0c:	4000a400 	.word	0x4000a400

08000e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_I2C1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x7c>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e4c:	f006 fb32 	bl	80074b4 <HAL_I2C_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e56:	f000 ff2d 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e5e:	f007 fa23 	bl	80082a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e68:	f000 ff24 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_I2C1_Init+0x74>)
 8000e70:	f007 fa65 	bl	800833e <HAL_I2CEx_ConfigDigitalFilter>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 ff1b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000480 	.word	0x24000480
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	00707cbb 	.word	0x00707cbb

08000e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_I2C2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_I2C2_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ecc:	f006 faf2 	bl	80074b4 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 feed 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ede:	f007 f9e3 	bl	80082a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 fee4 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_I2C2_Init+0x74>)
 8000ef0:	f007 fa25 	bl	800833e <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 fedb 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240004cc 	.word	0x240004cc
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	00707cbb 	.word	0x00707cbb

08000f10 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_I2C4_Init+0x78>)
 8000f18:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <MX_I2C4_Init+0x7c>)
 8000f1e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f4c:	f006 fab2 	bl	80074b4 <HAL_I2C_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f56:	f000 fead 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f5e:	f007 f9a3 	bl	80082a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f68:	f000 fea4 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_I2C4_Init+0x74>)
 8000f70:	f007 f9e5 	bl	800833e <HAL_I2CEx_ConfigDigitalFilter>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f7a:	f000 fe9b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000518 	.word	0x24000518
 8000f88:	58001c00 	.word	0x58001c00
 8000f8c:	00707cbb 	.word	0x00707cbb

08000f90 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <MX_LPUART1_UART_Init+0x94>)
 8000f98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <MX_LPUART1_UART_Init+0x98>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fd8:	f00b ff2e 	bl	800ce38 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f000 fe67 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000fea:	f00c ff1b 	bl	800de24 <HAL_UARTEx_SetTxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ff4:	f000 fe5e 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 8000ffc:	f00c ff50 	bl	800dea0 <HAL_UARTEx_SetRxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 fe55 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_LPUART1_UART_Init+0x90>)
 800100c:	f00c fed1 	bl	800ddb2 <HAL_UARTEx_DisableFifoMode>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001016:	f000 fe4d 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24000564 	.word	0x24000564
 8001024:	58000c00 	.word	0x58000c00
 8001028:	00033324 	.word	0x00033324

0800102c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_UART4_Init+0x90>)
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <MX_UART4_Init+0x94>)
 8001034:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_UART4_Init+0x90>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_UART4_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_UART4_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_UART4_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_UART4_Init+0x90>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_UART4_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_UART4_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_UART4_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_UART4_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_UART4_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <MX_UART4_Init+0x90>)
 8001076:	f00b fedf 	bl	800ce38 <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001080:	f000 fe18 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_UART4_Init+0x90>)
 8001088:	f00c fecc 	bl	800de24 <HAL_UARTEx_SetTxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001092:	f000 fe0f 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <MX_UART4_Init+0x90>)
 800109a:	f00c ff01 	bl	800dea0 <HAL_UARTEx_SetRxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f000 fe06 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_UART4_Init+0x90>)
 80010aa:	f00c fe82 	bl	800ddb2 <HAL_UARTEx_DisableFifoMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f000 fdfe 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	240005f4 	.word	0x240005f4
 80010c0:	40004c00 	.word	0x40004c00

080010c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_UART8_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_UART8_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_UART8_Init+0x90>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_UART8_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_UART8_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_UART8_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_UART8_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_UART8_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_UART8_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_UART8_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_UART8_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_UART8_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_UART8_Init+0x90>)
 800110e:	f00b fe93 	bl	800ce38 <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001118:	f000 fdcc 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_UART8_Init+0x90>)
 8001120:	f00c fe80 	bl	800de24 <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800112a:	f000 fdc3 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_UART8_Init+0x90>)
 8001132:	f00c feb5 	bl	800dea0 <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800113c:	f000 fdba 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_UART8_Init+0x90>)
 8001142:	f00c fe36 	bl	800ddb2 <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800114c:	f000 fdb2 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000684 	.word	0x24000684
 8001158:	40007c00 	.word	0x40007c00

0800115c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_USART1_Init+0x90>)
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <MX_USART1_Init+0x94>)
 8001164:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_USART1_Init+0x90>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_USART1_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_USART1_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_USART1_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_USART1_Init+0x90>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_USART1_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_USART1_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_USART1_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_USART1_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_USART1_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_USART1_Init+0x90>)
 80011a6:	f00c ff07 	bl	800dfb8 <HAL_USART_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80011b0:	f000 fd80 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_USART1_Init+0x90>)
 80011b8:	f00d fd1a 	bl	800ebf0 <HAL_USARTEx_SetTxFifoThreshold>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80011c2:	f000 fd77 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <MX_USART1_Init+0x90>)
 80011ca:	f00d fd4f 	bl	800ec6c <HAL_USARTEx_SetRxFifoThreshold>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f000 fd6e 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_USART1_Init+0x90>)
 80011da:	f00d fcd0 	bl	800eb7e <HAL_USARTEx_DisableFifoMode>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f000 fd66 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	24000714 	.word	0x24000714
 80011f0:	40011000 	.word	0x40011000

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_USART2_UART_Init+0x90>)
 80011fa:	4a23      	ldr	r2, [pc, #140]	; (8001288 <MX_USART2_UART_Init+0x94>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_USART2_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_USART2_UART_Init+0x90>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_USART2_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x90>)
 800123e:	f00b fdfb 	bl	800ce38 <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 fd34 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001250:	f00c fde8 	bl	800de24 <HAL_UARTEx_SetTxFifoThreshold>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800125a:	f000 fd2b 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125e:	2100      	movs	r1, #0
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001262:	f00c fe1d 	bl	800dea0 <HAL_UARTEx_SetRxFifoThreshold>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800126c:	f000 fd22 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_USART2_UART_Init+0x90>)
 8001272:	f00c fd9e 	bl	800ddb2 <HAL_UARTEx_DisableFifoMode>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 fd1a 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24000774 	.word	0x24000774
 8001288:	40004400 	.word	0x40004400

0800128c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_USART3_Init+0x90>)
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_USART3_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_USART3_Init+0x90>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_USART3_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_USART3_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_USART3_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_USART3_Init+0x90>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_USART3_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_USART3_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_USART3_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USART3_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_USART3_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_USART3_Init+0x90>)
 80012d6:	f00c fe6f 	bl	800dfb8 <HAL_USART_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80012e0:	f000 fce8 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_USART3_Init+0x90>)
 80012e8:	f00d fc82 	bl	800ebf0 <HAL_USARTEx_SetTxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80012f2:	f000 fcdf 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_USART3_Init+0x90>)
 80012fa:	f00d fcb7 	bl	800ec6c <HAL_USARTEx_SetRxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001304:	f000 fcd6 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_USART3_Init+0x90>)
 800130a:	f00d fc38 	bl	800eb7e <HAL_USARTEx_DisableFifoMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 8001314:	f000 fcce 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	24000804 	.word	0x24000804
 8001320:	40004800 	.word	0x40004800

08001324 <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_USART6_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_USART6_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_USART6_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_USART6_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_USART6_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_USART6_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_USART6_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_USART6_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART6_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART6_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART6_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART6_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_USART6_Init+0x90>)
 800136e:	f00c fe23 	bl	800dfb8 <HAL_USART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART6_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 fc9c 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_USART6_Init+0x90>)
 8001380:	f00d fc36 	bl	800ebf0 <HAL_USARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 fc93 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_USART6_Init+0x90>)
 8001392:	f00d fc6b 	bl	800ec6c <HAL_USARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 fc8a 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_USART6_Init+0x90>)
 80013a2:	f00d fbec 	bl	800eb7e <HAL_USARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 fc82 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	24000864 	.word	0x24000864
 80013b8:	40011400 	.word	0x40011400

080013bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_QUADSPI_Init+0x54>)
 80013c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013da:	2201      	movs	r2, #1
 80013dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_QUADSPI_Init+0x50>)
 80013f8:	f007 f84c 	bl	8008494 <HAL_QSPI_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001402:	f000 fc57 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2400093c 	.word	0x2400093c
 8001410:	52005000 	.word	0x52005000

08001414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800141a:	4a28      	ldr	r2, [pc, #160]	; (80014bc <MX_SPI1_Init+0xa8>)
 800141c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001420:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800142e:	2203      	movs	r2, #3
 8001430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001440:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI1_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_SPI1_Init+0xa4>)
 80014a4:	f00a fa18 	bl	800b8d8 <HAL_SPI_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80014ae:	f000 fc01 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	24000988 	.word	0x24000988
 80014bc:	40013000 	.word	0x40013000

080014c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <MX_SPI2_Init+0xa8>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014da:	2203      	movs	r2, #3
 80014dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_SPI2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_SPI2_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_SPI2_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_SPI2_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_SPI2_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_SPI2_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_SPI2_Init+0xa4>)
 8001550:	f00a f9c2 	bl	800b8d8 <HAL_SPI_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800155a:	f000 fbab 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	24000a10 	.word	0x24000a10
 8001568:	40003800 	.word	0x40003800

0800156c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <MX_SPI4_Init+0xa8>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001578:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800157c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001586:	2203      	movs	r2, #3
 8001588:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_SPI4_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_SPI4_Init+0xa4>)
 8001598:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800159c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_SPI4_Init+0xa4>)
 80015fc:	f00a f96c 	bl	800b8d8 <HAL_SPI_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001606:	f000 fb55 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000a98 	.word	0x24000a98
 8001614:	40013400 	.word	0x40013400

08001618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b096      	sub	sp, #88	; 0x58
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	222c      	movs	r2, #44	; 0x2c
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f010 fa8a 	bl	8011b5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <MX_TIM1_Init+0x118>)
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <MX_TIM1_Init+0x11c>)
 800164e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <MX_TIM1_Init+0x118>)
 8001652:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <MX_TIM1_Init+0x118>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <MX_TIM1_Init+0x118>)
 8001660:	2213      	movs	r2, #19
 8001662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <MX_TIM1_Init+0x118>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <MX_TIM1_Init+0x118>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <MX_TIM1_Init+0x118>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001676:	482e      	ldr	r0, [pc, #184]	; (8001730 <MX_TIM1_Init+0x118>)
 8001678:	f00a fb12 	bl	800bca0 <HAL_TIM_PWM_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001682:	f000 fb17 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001692:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001696:	4619      	mov	r1, r3
 8001698:	4825      	ldr	r0, [pc, #148]	; (8001730 <MX_TIM1_Init+0x118>)
 800169a:	f00b faa9 	bl	800cbf0 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016a4:	f000 fb06 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a8:	2360      	movs	r3, #96	; 0x60
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 80016ac:	230f      	movs	r3, #15
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c8:	2204      	movs	r2, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM1_Init+0x118>)
 80016ce:	f00a fc5d 	bl	800bf8c <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016d8:	f000 faec 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM1_Init+0x118>)
 8001712:	f00b faf5 	bl	800cd00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800171c:	f000 faca 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM1_Init+0x118>)
 8001722:	f001 fb7b 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3758      	adds	r7, #88	; 0x58
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000b20 	.word	0x24000b20
 8001734:	40010000 	.word	0x40010000

08001738 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <MX_TIM4_Init+0xe8>)
 800176c:	4a2d      	ldr	r2, [pc, #180]	; (8001824 <MX_TIM4_Init+0xec>)
 800176e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <MX_TIM4_Init+0xe8>)
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <MX_TIM4_Init+0xe8>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001790:	4823      	ldr	r0, [pc, #140]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001792:	f00a f9be 	bl	800bb12 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800179c:	f000 fa8a 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017aa:	4619      	mov	r1, r3
 80017ac:	481c      	ldr	r0, [pc, #112]	; (8001820 <MX_TIM4_Init+0xe8>)
 80017ae:	f00a fcfd 	bl	800c1ac <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017b8:	f000 fa7c 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_TIM4_Init+0xe8>)
 80017be:	f00a fa6f 	bl	800bca0 <HAL_TIM_PWM_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017c8:	f000 fa74 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4811      	ldr	r0, [pc, #68]	; (8001820 <MX_TIM4_Init+0xe8>)
 80017dc:	f00b fa08 	bl	800cbf0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017e6:	f000 fa65 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ea:	2360      	movs	r3, #96	; 0x60
 80017ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	220c      	movs	r2, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001802:	f00a fbc3 	bl	800bf8c <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800180c:	f000 fa52 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM4_Init+0xe8>)
 8001812:	f001 fb03 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001816:	bf00      	nop
 8001818:	3738      	adds	r7, #56	; 0x38
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000b6c 	.word	0x24000b6c
 8001824:	40000800 	.word	0x40000800

08001828 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_TIM5_Init+0xac>)
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <MX_TIM5_Init+0xb0>)
 8001850:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_TIM5_Init+0xac>)
 8001854:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001858:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_TIM5_Init+0xac>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM5_Init+0xac>)
 8001862:	22c7      	movs	r2, #199	; 0xc7
 8001864:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_TIM5_Init+0xac>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM5_Init+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001872:	4818      	ldr	r0, [pc, #96]	; (80018d4 <MX_TIM5_Init+0xac>)
 8001874:	f00a fa14 	bl	800bca0 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800187e:	f000 fa19 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4810      	ldr	r0, [pc, #64]	; (80018d4 <MX_TIM5_Init+0xac>)
 8001892:	f00b f9ad 	bl	800cbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800189c:	f000 fa0a 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 80018a4:	2363      	movs	r3, #99	; 0x63
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	2204      	movs	r2, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM5_Init+0xac>)
 80018b8:	f00a fb68 	bl	800bf8c <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80018c2:	f000 f9f7 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM5_Init+0xac>)
 80018c8:	f001 faa8 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	24000bb8 	.word	0x24000bb8
 80018d8:	40000c00 	.word	0x40000c00

080018dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b09a      	sub	sp, #104	; 0x68
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	222c      	movs	r2, #44	; 0x2c
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f010 f921 	bl	8011b5e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <MX_TIM15_Init+0x140>)
 800191e:	4a40      	ldr	r2, [pc, #256]	; (8001a20 <MX_TIM15_Init+0x144>)
 8001920:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001924:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001928:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <MX_TIM15_Init+0x140>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001932:	22c7      	movs	r2, #199	; 0xc7
 8001934:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_TIM15_Init+0x140>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001948:	4834      	ldr	r0, [pc, #208]	; (8001a1c <MX_TIM15_Init+0x140>)
 800194a:	f00a f8e2 	bl	800bb12 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001954:	f000 f9ae 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800195e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001962:	4619      	mov	r1, r3
 8001964:	482d      	ldr	r0, [pc, #180]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001966:	f00a fc21 	bl	800c1ac <HAL_TIM_ConfigClockSource>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001970:	f000 f9a0 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001974:	4829      	ldr	r0, [pc, #164]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001976:	f00a f993 	bl	800bca0 <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001980:	f000 f998 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800198c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001990:	4619      	mov	r1, r3
 8001992:	4822      	ldr	r0, [pc, #136]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001994:	f00b f92c 	bl	800cbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800199e:	f000 f989 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	; 0x60
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 80019a6:	2363      	movs	r3, #99	; 0x63
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4815      	ldr	r0, [pc, #84]	; (8001a1c <MX_TIM15_Init+0x140>)
 80019c8:	f00a fae0 	bl	800bf8c <HAL_TIM_PWM_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80019d2:	f000 f96f 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM15_Init+0x140>)
 80019fe:	f00b f97f 	bl	800cd00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a08:	f000 f954 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM15_Init+0x140>)
 8001a0e:	f001 fa05 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001a12:	bf00      	nop
 8001a14:	3768      	adds	r7, #104	; 0x68
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	24000c04 	.word	0x24000c04
 8001a20:	40014000 	.word	0x40014000

08001a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <MX_DMA_Init+0x3c>)
 8001a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <MX_DMA_Init+0x3c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_DMA_Init+0x3c>)
 8001a3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2105      	movs	r1, #5
 8001a4c:	200b      	movs	r0, #11
 8001a4e:	f003 f84f 	bl	8004af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a52:	200b      	movs	r0, #11
 8001a54:	f003 f866 	bl	8004b24 <HAL_NVIC_EnableIRQ>

}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58024400 	.word	0x58024400

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	4a79      	ldr	r2, [pc, #484]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a72      	ldr	r2, [pc, #456]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <MX_GPIO_Init+0x204>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001b34:	484d      	ldr	r0, [pc, #308]	; (8001c6c <MX_GPIO_Init+0x208>)
 8001b36:	f005 fca3 	bl	8007480 <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f647 0190 	movw	r1, #30864	; 0x7890
 8001b40:	484b      	ldr	r0, [pc, #300]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b42:	f005 fc9d 	bl	8007480 <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4c:	4849      	ldr	r0, [pc, #292]	; (8001c74 <MX_GPIO_Init+0x210>)
 8001b4e:	f005 fc97 	bl	8007480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS2_Pin SPI4_CS1_Pin SPI1_CS_Pin SPI2_CS0_Pin
                           SPI2_CS1_Pin SPI2_CS2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001b52:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001b56:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4840      	ldr	r0, [pc, #256]	; (8001c6c <MX_GPIO_Init+0x208>)
 8001b6c:	f005 f9ce 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	483a      	ldr	r0, [pc, #232]	; (8001c74 <MX_GPIO_Init+0x210>)
 8001b8c:	f005 f9be 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_AUX_4_Pin GPIO_AUX_3_Pin GPIO_AUX_2_Pin GPIO_AUX_1_Pin
                           SPI3_CS0_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8001b90:	f647 0390 	movw	r3, #30864	; 0x7890
 8001b94:	61fb      	str	r3, [r7, #28]
                          |SPI3_CS0_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4831      	ldr	r0, [pc, #196]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001baa:	f005 f9af 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	482d      	ldr	r0, [pc, #180]	; (8001c78 <MX_GPIO_Init+0x214>)
 8001bc4:	f005 f9a2 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8001bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	4824      	ldr	r0, [pc, #144]	; (8001c74 <MX_GPIO_Init+0x210>)
 8001be2:	f005 f993 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <MX_GPIO_Init+0x214>)
 8001c04:	f005 f982 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4815      	ldr	r0, [pc, #84]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001c1c:	f005 f976 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c20:	2310      	movs	r3, #16
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c30:	2306      	movs	r3, #6
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4810      	ldr	r0, [pc, #64]	; (8001c7c <MX_GPIO_Init+0x218>)
 8001c3c:	f005 f966 	bl	8006f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c40:	2320      	movs	r3, #32
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c50:	2307      	movs	r3, #7
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <MX_GPIO_Init+0x218>)
 8001c5c:	f005 f956 	bl	8006f0c <HAL_GPIO_Init>

}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	58021000 	.word	0x58021000
 8001c70:	58020c00 	.word	0x58020c00
 8001c74:	58020000 	.word	0x58020000
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020400 	.word	0x58020400

08001c80 <GetAcceleration>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_GetAcceleration */
void GetAcceleration(void *argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f00d f997 	bl	800efbc <osDelay>
 8001c8e:	e7fb      	b.n	8001c88 <GetAcceleration+0x8>

08001c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ca2:	f001 fd91 	bl	80037c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40001000 	.word	0x40001000

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_MspInit+0x38>)
 8001cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_MspInit+0x38>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_MspInit+0x38>)
 8001cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f06f 0001 	mvn.w	r0, #1
 8001cec:	f002 ff00 	bl	8004af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58024400 	.word	0x58024400

08001cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <HAL_ADC_MspInit+0x204>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d14e      	bne.n	8001dbc <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a77      	ldr	r2, [pc, #476]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001d26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d28:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10e      	bne.n	8001d4e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d30:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d36:	4a74      	ldr	r2, [pc, #464]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d38:	f043 0320 	orr.w	r3, r3, #32
 8001d3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d40:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	4a6c      	ldr	r2, [pc, #432]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7c:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d8a:	2333      	movs	r3, #51	; 0x33
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	485b      	ldr	r0, [pc, #364]	; (8001f0c <HAL_ADC_MspInit+0x210>)
 8001d9e:	f005 f8b5 	bl	8006f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da2:	2303      	movs	r3, #3
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4856      	ldr	r0, [pc, #344]	; (8001f10 <HAL_ADC_MspInit+0x214>)
 8001db6:	f005 f8a9 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dba:	e09d      	b.n	8001ef8 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_ADC_MspInit+0x218>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d169      	bne.n	8001e9a <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001dce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_ADC_MspInit+0x208>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10e      	bne.n	8001df6 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dde:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	4a42      	ldr	r2, [pc, #264]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e06:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e50:	2333      	movs	r3, #51	; 0x33
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e54:	2303      	movs	r3, #3
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e60:	4619      	mov	r1, r3
 8001e62:	482a      	ldr	r0, [pc, #168]	; (8001f0c <HAL_ADC_MspInit+0x210>)
 8001e64:	f005 f852 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4827      	ldr	r0, [pc, #156]	; (8001f18 <HAL_ADC_MspInit+0x21c>)
 8001e7c:	f005 f846 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e90:	4619      	mov	r1, r3
 8001e92:	481f      	ldr	r0, [pc, #124]	; (8001f10 <HAL_ADC_MspInit+0x214>)
 8001e94:	f005 f83a 	bl	8006f0c <HAL_GPIO_Init>
}
 8001e98:	e02e      	b.n	8001ef8 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_ADC_MspInit+0x220>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d129      	bne.n	8001ef8 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_ADC_MspInit+0x20c>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <HAL_ADC_MspInit+0x210>)
 8001ef4:	f005 f80a 	bl	8006f0c <HAL_GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	3740      	adds	r7, #64	; 0x40
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40022000 	.word	0x40022000
 8001f04:	24000c54 	.word	0x24000c54
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58020800 	.word	0x58020800
 8001f10:	58020400 	.word	0x58020400
 8001f14:	40022100 	.word	0x40022100
 8001f18:	58020000 	.word	0x58020000
 8001f1c:	58026000 	.word	0x58026000

08001f20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_DAC_MspInit+0x90>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d131      	bne.n	8001fa6 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_DAC_MspInit+0x94>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f7e:	2330      	movs	r3, #48	; 0x30
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f82:	2303      	movs	r3, #3
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <HAL_DAC_MspInit+0x98>)
 8001f92:	f004 ffbb 	bl	8006f0c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	210f      	movs	r1, #15
 8001f9a:	2036      	movs	r0, #54	; 0x36
 8001f9c:	f002 fda8 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa0:	2036      	movs	r0, #54	; 0x36
 8001fa2:	f002 fdbf 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40007400 	.word	0x40007400
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020000 	.word	0x58020000

08001fbc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ba      	sub	sp, #232	; 0xe8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	22bc      	movs	r2, #188	; 0xbc
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00f fdbe 	bl	8011b5e <memset>
  if(hfdcan->Instance==FDCAN1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a54      	ldr	r2, [pc, #336]	; (8002138 <HAL_FDCAN_MspInit+0x17c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d14e      	bne.n	800208a <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f007 fade 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800200a:	f7ff fe53 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 8002016:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10e      	bne.n	800203e <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002022:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002026:	4a46      	ldr	r2, [pc, #280]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002032:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	4a3e      	ldr	r2, [pc, #248]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800205c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002076:	2309      	movs	r3, #9
 8002078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002080:	4619      	mov	r1, r3
 8002082:	4830      	ldr	r0, [pc, #192]	; (8002144 <HAL_FDCAN_MspInit+0x188>)
 8002084:	f004 ff42 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002088:	e052      	b.n	8002130 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_FDCAN_MspInit+0x18c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d14d      	bne.n	8002130 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002098:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800209a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800209e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 fa8a 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 80020b2:	f7ff fdff 	bl	8001cb4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 80020be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_FDCAN_MspInit+0x180>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10e      	bne.n	80020e6 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_FDCAN_MspInit+0x184>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002104:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800211e:	2309      	movs	r3, #9
 8002120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002128:	4619      	mov	r1, r3
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <HAL_FDCAN_MspInit+0x190>)
 800212c:	f004 feee 	bl	8006f0c <HAL_GPIO_Init>
}
 8002130:	bf00      	nop
 8002132:	37e8      	adds	r7, #232	; 0xe8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	4000a000 	.word	0x4000a000
 800213c:	24000c58 	.word	0x24000c58
 8002140:	58024400 	.word	0x58024400
 8002144:	58020000 	.word	0x58020000
 8002148:	4000a400 	.word	0x4000a400
 800214c:	58020400 	.word	0x58020400

08002150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0bc      	sub	sp, #240	; 0xf0
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	22bc      	movs	r2, #188	; 0xbc
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f00f fcf4 	bl	8011b5e <memset>
  if(hi2c->Instance==I2C1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6d      	ldr	r2, [pc, #436]	; (8002330 <HAL_I2C_MspInit+0x1e0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d142      	bne.n	8002206 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002180:	2308      	movs	r3, #8
 8002182:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	4618      	mov	r0, r3
 8002190:	f007 fa16 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800219a:	f7ff fd8b 	bl	8001cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b65      	ldr	r3, [pc, #404]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c2:	2312      	movs	r3, #18
 80021c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021d4:	2304      	movs	r3, #4
 80021d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021de:	4619      	mov	r1, r3
 80021e0:	4855      	ldr	r0, [pc, #340]	; (8002338 <HAL_I2C_MspInit+0x1e8>)
 80021e2:	f004 fe93 	bl	8006f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80021f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002204:	e090      	b.n	8002328 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_I2C_MspInit+0x1ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d143      	bne.n	8002298 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002210:	2308      	movs	r3, #8
 8002212:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	4618      	mov	r0, r3
 8002220:	f007 f9ce 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_MspInit+0xde>
      Error_Handler();
 800222a:	f7ff fd43 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800224c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002254:	2312      	movs	r3, #18
 8002256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002266:	2304      	movs	r3, #4
 8002268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002270:	4619      	mov	r1, r3
 8002272:	4831      	ldr	r0, [pc, #196]	; (8002338 <HAL_I2C_MspInit+0x1e8>)
 8002274:	f004 fe4a 	bl	8006f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 800227a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 8002280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002284:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 800228a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
}
 8002296:	e047      	b.n	8002328 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_I2C_MspInit+0x1f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d142      	bne.n	8002328 <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022a2:	2310      	movs	r3, #16
 80022a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ac:	f107 0320 	add.w	r3, r7, #32
 80022b0:	4618      	mov	r0, r3
 80022b2:	f007 f985 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 80022bc:	f7ff fcfa 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e6:	2312      	movs	r3, #18
 80022e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80022f8:	2306      	movs	r3, #6
 80022fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <HAL_I2C_MspInit+0x1e8>)
 8002306:	f004 fe01 	bl	8006f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_I2C_MspInit+0x1e4>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
}
 8002328:	bf00      	nop
 800232a:	37f0      	adds	r7, #240	; 0xf0
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40005400 	.word	0x40005400
 8002334:	58024400 	.word	0x58024400
 8002338:	58020400 	.word	0x58020400
 800233c:	40005800 	.word	0x40005800
 8002340:	58001c00 	.word	0x58001c00

08002344 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <HAL_I2C_MspDeInit+0x9c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d110      	bne.n	8002378 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 8002358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235c:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 800235e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002362:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002366:	2140      	movs	r1, #64	; 0x40
 8002368:	481f      	ldr	r0, [pc, #124]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 800236a:	f004 ff7f 	bl	800726c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	481d      	ldr	r0, [pc, #116]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 8002372:	f004 ff7b 	bl	800726c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002376:	e02e      	b.n	80023d6 <HAL_I2C_MspDeInit+0x92>
  else if(hi2c->Instance==I2C2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_I2C_MspDeInit+0xa8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d112      	bne.n	80023a8 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 800238a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002396:	4814      	ldr	r0, [pc, #80]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 8002398:	f004 ff68 	bl	800726c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800239c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a0:	4811      	ldr	r0, [pc, #68]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 80023a2:	f004 ff63 	bl	800726c <HAL_GPIO_DeInit>
}
 80023a6:	e016      	b.n	80023d6 <HAL_I2C_MspDeInit+0x92>
  else if(hi2c->Instance==I2C4)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_I2C_MspDeInit+0xac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_I2C_MspDeInit+0x92>
    __HAL_RCC_I2C4_CLK_DISABLE();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 80023b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_I2C_MspDeInit+0xa0>)
 80023ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80023c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 80023c8:	f004 ff50 	bl	800726c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80023cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_I2C_MspDeInit+0xa4>)
 80023d2:	f004 ff4b 	bl	800726c <HAL_GPIO_DeInit>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40005400 	.word	0x40005400
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58020400 	.word	0x58020400
 80023ec:	40005800 	.word	0x40005800
 80023f0:	58001c00 	.word	0x58001c00

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0be      	sub	sp, #248	; 0xf8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002410:	22bc      	movs	r2, #188	; 0xbc
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f00f fba2 	bl	8011b5e <memset>
  if(huart->Instance==LPUART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a91      	ldr	r2, [pc, #580]	; (8002664 <HAL_UART_MspInit+0x270>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d143      	bne.n	80024ac <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002424:	2304      	movs	r3, #4
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002432:	4618      	mov	r0, r3
 8002434:	f007 f8c4 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800243e:	f7ff fc39 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002442:	4b89      	ldr	r3, [pc, #548]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002448:	4a87      	ldr	r2, [pc, #540]	; (8002668 <HAL_UART_MspInit+0x274>)
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002466:	4a80      	ldr	r2, [pc, #512]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002470:	4b7d      	ldr	r3, [pc, #500]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800247e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002498:	2303      	movs	r3, #3
 800249a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4871      	ldr	r0, [pc, #452]	; (800266c <HAL_UART_MspInit+0x278>)
 80024a6:	f004 fd31 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024aa:	e0d6      	b.n	800265a <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6f      	ldr	r2, [pc, #444]	; (8002670 <HAL_UART_MspInit+0x27c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d142      	bne.n	800253c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024b6:	2302      	movs	r3, #2
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c4:	4618      	mov	r0, r3
 80024c6:	f007 f87b 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80024d0:	f7ff fbf0 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80024d4:	4b64      	ldr	r3, [pc, #400]	; (8002668 <HAL_UART_MspInit+0x274>)
 80024d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024da:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_UART_MspInit+0x274>)
 80024dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e4:	4b60      	ldr	r3, [pc, #384]	; (8002668 <HAL_UART_MspInit+0x274>)
 80024e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_UART_MspInit+0x274>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	4a5b      	ldr	r2, [pc, #364]	; (8002668 <HAL_UART_MspInit+0x274>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002502:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002510:	2303      	movs	r3, #3
 8002512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002528:	2308      	movs	r3, #8
 800252a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002532:	4619      	mov	r1, r3
 8002534:	484f      	ldr	r0, [pc, #316]	; (8002674 <HAL_UART_MspInit+0x280>)
 8002536:	f004 fce9 	bl	8006f0c <HAL_GPIO_Init>
}
 800253a:	e08e      	b.n	800265a <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART8)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_UART_MspInit+0x284>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d142      	bne.n	80025cc <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002546:	2302      	movs	r3, #2
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002554:	4618      	mov	r0, r3
 8002556:	f007 f833 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002560:	f7ff fba8 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_UART_MspInit+0x274>)
 800256c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002570:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002574:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002588:	4a37      	ldr	r2, [pc, #220]	; (8002668 <HAL_UART_MspInit+0x274>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025b8:	2308      	movs	r3, #8
 80025ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025c2:	4619      	mov	r1, r3
 80025c4:	482d      	ldr	r0, [pc, #180]	; (800267c <HAL_UART_MspInit+0x288>)
 80025c6:	f004 fca1 	bl	8006f0c <HAL_GPIO_Init>
}
 80025ca:	e046      	b.n	800265a <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_UART_MspInit+0x28c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d141      	bne.n	800265a <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 ffeb 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80025f0:	f7ff fb60 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_UART_MspInit+0x274>)
 80025f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <HAL_UART_MspInit+0x274>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_UART_MspInit+0x274>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_UART_MspInit+0x274>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002630:	2360      	movs	r3, #96	; 0x60
 8002632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002648:	2307      	movs	r3, #7
 800264a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <HAL_UART_MspInit+0x280>)
 8002656:	f004 fc59 	bl	8006f0c <HAL_GPIO_Init>
}
 800265a:	bf00      	nop
 800265c:	37f8      	adds	r7, #248	; 0xf8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	58000c00 	.word	0x58000c00
 8002668:	58024400 	.word	0x58024400
 800266c:	58020000 	.word	0x58020000
 8002670:	40004c00 	.word	0x40004c00
 8002674:	58020c00 	.word	0x58020c00
 8002678:	40007c00 	.word	0x40007c00
 800267c:	58021000 	.word	0x58021000
 8002680:	40004400 	.word	0x40004400

08002684 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0be      	sub	sp, #248	; 0xf8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800269c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a0:	22bc      	movs	r2, #188	; 0xbc
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f00f fa5a 	bl	8011b5e <memset>
  if(husart->Instance==USART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a97      	ldr	r2, [pc, #604]	; (800290c <HAL_USART_MspInit+0x288>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d168      	bne.n	8002786 <HAL_USART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c2:	4618      	mov	r0, r3
 80026c4:	f006 ff7c 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 80026ce:	f7ff faf1 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d2:	4b8f      	ldr	r3, [pc, #572]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80026d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d8:	4a8d      	ldr	r2, [pc, #564]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80026e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b87      	ldr	r3, [pc, #540]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	4a86      	ldr	r2, [pc, #536]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002700:	4b83      	ldr	r3, [pc, #524]	; (8002910 <HAL_USART_MspInit+0x28c>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	4b80      	ldr	r3, [pc, #512]	; (8002910 <HAL_USART_MspInit+0x28c>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002714:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_USART_MspInit+0x28c>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_USART_MspInit+0x28c>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800272c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002746:	2304      	movs	r3, #4
 8002748:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002750:	4619      	mov	r1, r3
 8002752:	4870      	ldr	r0, [pc, #448]	; (8002914 <HAL_USART_MspInit+0x290>)
 8002754:	f004 fbda 	bl	8006f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002772:	2307      	movs	r3, #7
 8002774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800277c:	4619      	mov	r1, r3
 800277e:	4866      	ldr	r0, [pc, #408]	; (8002918 <HAL_USART_MspInit+0x294>)
 8002780:	f004 fbc4 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002784:	e0bd      	b.n	8002902 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a64      	ldr	r2, [pc, #400]	; (800291c <HAL_USART_MspInit+0x298>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d170      	bne.n	8002872 <HAL_USART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 ff0e 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_USART_MspInit+0x12a>
      Error_Handler();
 80027aa:	f7ff fa83 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ae:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d2:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80027ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80027ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002804:	2307      	movs	r3, #7
 8002806:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800280e:	4619      	mov	r1, r3
 8002810:	4843      	ldr	r0, [pc, #268]	; (8002920 <HAL_USART_MspInit+0x29c>)
 8002812:	f004 fb7b 	bl	8006f0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002818:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_USART_MspInit+0x2a4>)
 800281a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 800281e:	222d      	movs	r2, #45	; 0x2d
 8002820:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002834:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284e:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002854:	4833      	ldr	r0, [pc, #204]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002856:	f002 fb33 	bl	8004ec0 <HAL_DMA_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_USART_MspInit+0x1e0>
      Error_Handler();
 8002860:	f7ff fa28 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(husart,hdmarx,hdma_usart3_rx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
 800286a:	4a2e      	ldr	r2, [pc, #184]	; (8002924 <HAL_USART_MspInit+0x2a0>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002870:	e047      	b.n	8002902 <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART6)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_USART_MspInit+0x2a8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d142      	bne.n	8002902 <HAL_USART_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800287c:	2301      	movs	r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288a:	4618      	mov	r0, r3
 800288c:	f006 fe98 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_USART_MspInit+0x216>
      Error_Handler();
 8002896:	f7ff fa0d 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_USART_MspInit+0x28c>)
 800289c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80028ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028be:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_USART_MspInit+0x28c>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80028d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80028da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80028f0:	2307      	movs	r3, #7
 80028f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028fa:	4619      	mov	r1, r3
 80028fc:	480c      	ldr	r0, [pc, #48]	; (8002930 <HAL_USART_MspInit+0x2ac>)
 80028fe:	f004 fb05 	bl	8006f0c <HAL_GPIO_Init>
}
 8002902:	bf00      	nop
 8002904:	37f8      	adds	r7, #248	; 0xf8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40011000 	.word	0x40011000
 8002910:	58024400 	.word	0x58024400
 8002914:	58020400 	.word	0x58020400
 8002918:	58020000 	.word	0x58020000
 800291c:	40004800 	.word	0x40004800
 8002920:	58020c00 	.word	0x58020c00
 8002924:	240008c4 	.word	0x240008c4
 8002928:	40020010 	.word	0x40020010
 800292c:	40011400 	.word	0x40011400
 8002930:	58020800 	.word	0x58020800

08002934 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0ba      	sub	sp, #232	; 0xe8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	22bc      	movs	r2, #188	; 0xbc
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f00f f902 	bl	8011b5e <memset>
  if(hqspi->Instance==QUADSPI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_QSPI_MspInit+0x154>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 808c 	bne.w	8002a7e <HAL_QSPI_MspInit+0x14a>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800296c:	2300      	movs	r3, #0
 800296e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	4618      	mov	r0, r3
 8002976:	f006 fe23 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002980:	f7ff f998 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 8002986:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 8002996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_QSPI_MspInit+0x158>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029fc:	2304      	movs	r3, #4
 80029fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a14:	2309      	movs	r3, #9
 8002a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	481b      	ldr	r0, [pc, #108]	; (8002a90 <HAL_QSPI_MspInit+0x15c>)
 8002a22:	f004 fa73 	bl	8006f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a26:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a40:	230a      	movs	r3, #10
 8002a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4811      	ldr	r0, [pc, #68]	; (8002a94 <HAL_QSPI_MspInit+0x160>)
 8002a4e:	f004 fa5d 	bl	8006f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a6c:	2309      	movs	r3, #9
 8002a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <HAL_QSPI_MspInit+0x164>)
 8002a7a:	f004 fa47 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	37e8      	adds	r7, #232	; 0xe8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	52005000 	.word	0x52005000
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	58020400 	.word	0x58020400
 8002a94:	58021000 	.word	0x58021000
 8002a98:	58020800 	.word	0x58020800

08002a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0be      	sub	sp, #248	; 0xf8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab8:	22bc      	movs	r2, #188	; 0xbc
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00f f84e 	bl	8011b5e <memset>
  if(hspi->Instance==SPI1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a92      	ldr	r2, [pc, #584]	; (8002d10 <HAL_SPI_MspInit+0x274>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d167      	bne.n	8002b9c <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 fd6f 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002ae8:	f7ff f8e4 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aec:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002af2:	4a88      	ldr	r2, [pc, #544]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002afc:	4b85      	ldr	r3, [pc, #532]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1a:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2e:	4a79      	ldr	r2, [pc, #484]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b46:	23c0      	movs	r3, #192	; 0xc0
 8002b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b5e:	2305      	movs	r3, #5
 8002b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	486b      	ldr	r0, [pc, #428]	; (8002d18 <HAL_SPI_MspInit+0x27c>)
 8002b6c:	f004 f9ce 	bl	8006f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b70:	2308      	movs	r3, #8
 8002b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b88:	2305      	movs	r3, #5
 8002b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4861      	ldr	r0, [pc, #388]	; (8002d1c <HAL_SPI_MspInit+0x280>)
 8002b96:	f004 f9b9 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002b9a:	e0b4      	b.n	8002d06 <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5f      	ldr	r2, [pc, #380]	; (8002d20 <HAL_SPI_MspInit+0x284>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d167      	bne.n	8002c76 <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 fd02 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 8002bc2:	f7ff f877 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bc6:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bd6:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be4:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bea:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf4:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c12:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c20:	230c      	movs	r3, #12
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4837      	ldr	r0, [pc, #220]	; (8002d24 <HAL_SPI_MspInit+0x288>)
 8002c46:	f004 f961 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c62:	2305      	movs	r3, #5
 8002c64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	482e      	ldr	r0, [pc, #184]	; (8002d28 <HAL_SPI_MspInit+0x28c>)
 8002c70:	f004 f94c 	bl	8006f0c <HAL_GPIO_Init>
}
 8002c74:	e047      	b.n	8002d06 <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2c      	ldr	r2, [pc, #176]	; (8002d2c <HAL_SPI_MspInit+0x290>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d142      	bne.n	8002d06 <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c90:	4618      	mov	r0, r3
 8002c92:	f006 fc95 	bl	80095c0 <HAL_RCCEx_PeriphCLKConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002c9c:	f7ff f80a 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_SPI_MspInit+0x278>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002cdc:	2364      	movs	r3, #100	; 0x64
 8002cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cfa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480b      	ldr	r0, [pc, #44]	; (8002d30 <HAL_SPI_MspInit+0x294>)
 8002d02:	f004 f903 	bl	8006f0c <HAL_GPIO_Init>
}
 8002d06:	bf00      	nop
 8002d08:	37f8      	adds	r7, #248	; 0xf8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40013000 	.word	0x40013000
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58020000 	.word	0x58020000
 8002d1c:	58020400 	.word	0x58020400
 8002d20:	40003800 	.word	0x40003800
 8002d24:	58020800 	.word	0x58020800
 8002d28:	58020c00 	.word	0x58020c00
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	58021000 	.word	0x58021000

08002d34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIM_PWM_MspInit+0x68>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10f      	bne.n	8002d66 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d64:	e013      	b.n	8002d8e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM5)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_TIM_PWM_MspInit+0x70>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10e      	bne.n	8002d8e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	58024400 	.word	0x58024400
 8002da4:	40000c00 	.word	0x40000c00

08002da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_TIM_Base_MspInit+0x68>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10f      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_TIM_Base_MspInit+0x70>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10e      	bne.n	8002e02 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_TIM_Base_MspInit+0x6c>)
 8002df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40000800 	.word	0x40000800
 8002e14:	58024400 	.word	0x58024400
 8002e18:	40014000 	.word	0x40014000

08002e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_TIM_MspPostInit+0x14c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d120      	bne.n	8002e80 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e46:	f043 0310 	orr.w	r3, r3, #16
 8002e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	483d      	ldr	r0, [pc, #244]	; (8002f70 <HAL_TIM_MspPostInit+0x154>)
 8002e7a:	f004 f847 	bl	8006f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002e7e:	e06e      	b.n	8002f5e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_TIM_MspPostInit+0x158>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d120      	bne.n	8002ecc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	482c      	ldr	r0, [pc, #176]	; (8002f78 <HAL_TIM_MspPostInit+0x15c>)
 8002ec6:	f004 f821 	bl	8006f0c <HAL_GPIO_Init>
}
 8002eca:	e048      	b.n	8002f5e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_TIM_MspPostInit+0x160>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d11f      	bne.n	8002f16 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f04:	2302      	movs	r3, #2
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481c      	ldr	r0, [pc, #112]	; (8002f80 <HAL_TIM_MspPostInit+0x164>)
 8002f10:	f003 fffc 	bl	8006f0c <HAL_GPIO_Init>
}
 8002f14:	e023      	b.n	8002f5e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_TIM_MspPostInit+0x168>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d11e      	bne.n	8002f5e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f3e:	2308      	movs	r3, #8
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	4619      	mov	r1, r3
 8002f58:	4809      	ldr	r0, [pc, #36]	; (8002f80 <HAL_TIM_MspPostInit+0x164>)
 8002f5a:	f003 ffd7 	bl	8006f0c <HAL_GPIO_Init>
}
 8002f5e:	bf00      	nop
 8002f60:	3730      	adds	r7, #48	; 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58021000 	.word	0x58021000
 8002f74:	40000800 	.word	0x40000800
 8002f78:	58020c00 	.word	0x58020c00
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	58020000 	.word	0x58020000
 8002f84:	40014000 	.word	0x40014000

08002f88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b090      	sub	sp, #64	; 0x40
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d827      	bhi.n	8002fe6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002f96:	2200      	movs	r2, #0
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	2036      	movs	r0, #54	; 0x36
 8002f9c:	f001 fda8 	bl	8004af0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fa0:	2036      	movs	r0, #54	; 0x36
 8002fa2:	f001 fdbf 	bl	8004b24 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002fa6:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_InitTick+0xc4>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_InitTick+0xc8>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb2:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_InitTick+0xc8>)
 8002fb4:	f043 0310 	orr.w	r3, r3, #16
 8002fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_InitTick+0xc8>)
 8002fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fca:	f107 0210 	add.w	r2, r7, #16
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f006 fab1 	bl	800953c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_InitTick+0x6a>
 8002fe4:	e001      	b.n	8002fea <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e02b      	b.n	8003042 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fea:	f006 fa7b 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 8002fee:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002ff0:	e004      	b.n	8002ffc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ff2:	f006 fa77 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <HAL_InitTick+0xcc>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	0c9b      	lsrs	r3, r3, #18
 8003006:	3b01      	subs	r3, #1
 8003008:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_InitTick+0xd0>)
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_InitTick+0xd4>)
 800300e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_InitTick+0xd0>)
 8003012:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003016:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_InitTick+0xd0>)
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_InitTick+0xd0>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_InitTick+0xd0>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_InitTick+0xd0>)
 800302c:	f008 fd71 	bl	800bb12 <HAL_TIM_Base_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003036:	4808      	ldr	r0, [pc, #32]	; (8003058 <HAL_InitTick+0xd0>)
 8003038:	f008 fdc2 	bl	800bbc0 <HAL_TIM_Base_Start_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	e000      	b.n	8003042 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	3740      	adds	r7, #64	; 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	24000008 	.word	0x24000008
 8003050:	58024400 	.word	0x58024400
 8003054:	431bde83 	.word	0x431bde83
 8003058:	24000c5c 	.word	0x24000c5c
 800305c:	40001000 	.word	0x40001000

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <NMI_Handler+0x4>

08003066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <HardFault_Handler+0x4>

0800306c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <MemManage_Handler+0x4>

08003072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003076:	e7fe      	b.n	8003076 <BusFault_Handler+0x4>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	e7fe      	b.n	800307c <UsageFault_Handler+0x4>

0800307e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <DMA1_Stream0_IRQHandler+0x10>)
 8003092:	f002 fa71 	bl	8005578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	240008c4 	.word	0x240008c4

080030a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <TIM6_DAC_IRQHandler+0x20>)
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <TIM6_DAC_IRQHandler+0x20>)
 80030b0:	f001 fd68 	bl	8004b84 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <TIM6_DAC_IRQHandler+0x24>)
 80030b6:	f008 fe4a 	bl	800bd4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2400032c 	.word	0x2400032c
 80030c4:	24000c5c 	.word	0x24000c5c

080030c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	return 1;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_kill>:

int _kill(int pid, int sig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030e2:	f00e fc0b 	bl	80118fc <__errno>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2216      	movs	r2, #22
 80030ea:	601a      	str	r2, [r3, #0]
	return -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_exit>:

void _exit (int status)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffe7 	bl	80030d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800310a:	e7fe      	b.n	800310a <_exit+0x12>

0800310c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e00a      	b.n	8003134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800311e:	f3af 8000 	nop.w
 8003122:	4601      	mov	r1, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	60ba      	str	r2, [r7, #8]
 800312a:	b2ca      	uxtb	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	dbf0      	blt.n	800311e <_read+0x12>
	}

return len;
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e009      	b.n	800316c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	60ba      	str	r2, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbf1      	blt.n	8003158 <_write+0x12>
	}
	return len;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_close>:

int _close(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a6:	605a      	str	r2, [r3, #4]
	return 0;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_isatty>:

int _isatty(int file)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
	return 1;
 80031be:	2301      	movs	r3, #1
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <_sbrk+0x5c>)
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <_sbrk+0x60>)
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <_sbrk+0x64>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <_sbrk+0x64>)
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <_sbrk+0x68>)
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <_sbrk+0x64>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d207      	bcs.n	8003228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003218:	f00e fb70 	bl	80118fc <__errno>
 800321c:	4603      	mov	r3, r0
 800321e:	220c      	movs	r2, #12
 8003220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003226:	e009      	b.n	800323c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <_sbrk+0x64>)
 8003238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	24080000 	.word	0x24080000
 8003248:	00000400 	.word	0x00000400
 800324c:	24000ca8 	.word	0x24000ca8
 8003250:	240056d0 	.word	0x240056d0

08003254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <SystemInit+0xec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <SystemInit+0xec>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003268:	4b36      	ldr	r3, [pc, #216]	; (8003344 <SystemInit+0xf0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2b06      	cmp	r3, #6
 8003272:	d807      	bhi.n	8003284 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <SystemInit+0xf0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	4a31      	ldr	r2, [pc, #196]	; (8003344 <SystemInit+0xf0>)
 800327e:	f043 0307 	orr.w	r3, r3, #7
 8003282:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <SystemInit+0xf4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <SystemInit+0xf4>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <SystemInit+0xf4>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <SystemInit+0xf4>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	492b      	ldr	r1, [pc, #172]	; (8003348 <SystemInit+0xf4>)
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <SystemInit+0xf8>)
 800329e:	4013      	ands	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <SystemInit+0xf0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <SystemInit+0xf0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 030f 	bic.w	r3, r3, #15
 80032b6:	4a23      	ldr	r2, [pc, #140]	; (8003344 <SystemInit+0xf0>)
 80032b8:	f043 0307 	orr.w	r3, r3, #7
 80032bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <SystemInit+0xf4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <SystemInit+0xf4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <SystemInit+0xf4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <SystemInit+0xf4>)
 80032d2:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <SystemInit+0xfc>)
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <SystemInit+0xf4>)
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <SystemInit+0x100>)
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <SystemInit+0xf4>)
 80032de:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <SystemInit+0x104>)
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <SystemInit+0xf4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <SystemInit+0xf4>)
 80032ea:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <SystemInit+0x104>)
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <SystemInit+0xf4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <SystemInit+0xf4>)
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <SystemInit+0x104>)
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <SystemInit+0xf4>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <SystemInit+0xf4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <SystemInit+0xf4>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <SystemInit+0xf4>)
 800330e:	2200      	movs	r2, #0
 8003310:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <SystemInit+0x108>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <SystemInit+0x10c>)
 8003318:	4013      	ands	r3, r2
 800331a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331e:	d202      	bcs.n	8003326 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003320:	4b10      	ldr	r3, [pc, #64]	; (8003364 <SystemInit+0x110>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <SystemInit+0x114>)
 8003328:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800332c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SystemInit+0xec>)
 8003330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003334:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	52002000 	.word	0x52002000
 8003348:	58024400 	.word	0x58024400
 800334c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003350:	02020200 	.word	0x02020200
 8003354:	01ff0000 	.word	0x01ff0000
 8003358:	01010280 	.word	0x01010280
 800335c:	5c001000 	.word	0x5c001000
 8003360:	ffff0000 	.word	0xffff0000
 8003364:	51008108 	.word	0x51008108
 8003368:	52004000 	.word	0x52004000

0800336c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800336c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003370:	f7ff ff70 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003376:	490d      	ldr	r1, [pc, #52]	; (80033ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800337c:	e002      	b.n	8003384 <LoopCopyDataInit>

0800337e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003382:	3304      	adds	r3, #4

08003384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003388:	d3f9      	bcc.n	800337e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800338c:	4c0a      	ldr	r4, [pc, #40]	; (80033b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003390:	e001      	b.n	8003396 <LoopFillZerobss>

08003392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003394:	3204      	adds	r2, #4

08003396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003398:	d3fb      	bcc.n	8003392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800339a:	f00e fbab 	bl	8011af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800339e:	f7fd f9bf 	bl	8000720 <main>
  bx  lr
 80033a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033ac:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80033b0:	08014d0c 	.word	0x08014d0c
  ldr r2, =_sbss
 80033b4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80033b8:	240056d0 	.word	0x240056d0

080033bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033bc:	e7fe      	b.n	80033bc <ADC3_IRQHandler>

080033be <ads_delay>:

/*============================================================================*/
/* Redefine local functions													  */
/*============================================================================*/

void ads_delay(int time){
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fa1d 	bl	8003808 <HAL_Delay>
#endif
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <writeRegister>:
/*============================================================================*/
/* Local functions														      */
/*============================================================================*/

// Write the register
static bool writeRegister(ads1113_t *i2c, uint8_t reg, uint16_t value) {
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b088      	sub	sp, #32
 80033da:	af04      	add	r7, sp, #16
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]
 80033e2:	4613      	mov	r3, r2
 80033e4:	803b      	strh	r3, [r7, #0]
//	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
//	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
	uint8_t pData[2];
	pData[0] = (value >> 8);
 80033e6:	883b      	ldrh	r3, [r7, #0]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	733b      	strb	r3, [r7, #12]
	pData[1] = value & 0xff;
 80033f0:	883b      	ldrh	r3, [r7, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6958      	ldr	r0, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8819      	ldrh	r1, [r3, #0]
 80033fe:	230a      	movs	r3, #10
 8003400:	220a      	movs	r2, #10
 8003402:	f004 fc15 	bl	8007c30 <HAL_I2C_IsDeviceReady>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <writeRegister+0x3a>
		return false;
 800340c:	2300      	movs	r3, #0
 800340e:	e015      	b.n	800343c <writeRegister+0x66>
	}

	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6958      	ldr	r0, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8819      	ldrh	r1, [r3, #0]
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b29a      	uxth	r2, r3
 800341c:	230a      	movs	r3, #10
 800341e:	9302      	str	r3, [sp, #8]
 8003420:	2302      	movs	r3, #2
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	f004 faec 	bl	8007a08 <HAL_I2C_Mem_Write>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <readRegister>:

// Read the register
static uint16_t readRegister(ads1113_t *i2c, uint8_t reg) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6958      	ldr	r0, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8819      	ldrh	r1, [r3, #0]
 8003458:	1cfa      	adds	r2, r7, #3
 800345a:	230a      	movs	r3, #10
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2301      	movs	r3, #1
 8003460:	f004 f8e8 	bl	8007634 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 8003464:	2300      	movs	r3, #0
 8003466:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6958      	ldr	r0, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8819      	ldrh	r1, [r3, #0]
 8003470:	f107 020c 	add.w	r2, r7, #12
 8003474:	230a      	movs	r3, #10
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2302      	movs	r3, #2
 800347a:	f004 f9cf 	bl	800781c <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 800347e:	7b3b      	ldrb	r3, [r7, #12]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	b21a      	sxth	r2, r3
 8003484:	7b7b      	ldrb	r3, [r7, #13]
 8003486:	b21b      	sxth	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b21b      	sxth	r3, r3
 800348c:	b29b      	uxth	r3, r3
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <ADSbegin>:

// Check if we have correct connection.
static bool ADSbegin(ads1113_t *i2c) {
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
//	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
	if (HAL_I2C_Init(i2c->hi2c) == HAL_OK){
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 f806 	bl	80074b4 <HAL_I2C_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <ADSbegin+0x32>
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6958      	ldr	r0, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8819      	ldrh	r1, [r3, #0]
 80034b6:	2364      	movs	r3, #100	; 0x64
 80034b8:	220a      	movs	r2, #10
 80034ba:	f004 fbb9 	bl	8007c30 <HAL_I2C_IsDeviceReady>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <ADSbegin+0x32>
			return true;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <ADSbegin+0x34>
	}
	return false;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <ADS1113_init>:

// Declare an ADS1115 structure
bool ADS1113_init(ads1113_t *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	71fb      	strb	r3, [r7, #7]
//	i2c->m_bitShift = 0;
//	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
//	i2c->full_scale = 4.096f;
//	ADSbegin(i2c);

	i2c->hi2c = hi2c;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	615a      	str	r2, [r3, #20]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2208      	movs	r2, #8
 80034f8:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003506:	821a      	strh	r2, [r3, #16]
	i2c->full_scale = 4.096f;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a30      	ldr	r2, [pc, #192]	; (80035cc <ADS1113_init+0xf8>)
 800350c:	60da      	str	r2, [r3, #12]

	//Deinit the port
	if (HAL_I2C_DeInit(i2c->hi2c) != HAL_OK){
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 f85e 	bl	80075d4 <HAL_I2C_DeInit>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <ADS1113_init+0x4e>
		return false;
 800351e:	2300      	movs	r3, #0
 8003520:	e04f      	b.n	80035c2 <ADS1113_init+0xee>
	}
	//Configure I2C port
	i2c->hi2c->Instance = I2C1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <ADS1113_init+0xfc>)
 8003528:	601a      	str	r2, [r3, #0]
	i2c->hi2c->Init.Timing = 0x00401242;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <ADS1113_init+0x100>)
 8003530:	605a      	str	r2, [r3, #4]
	i2c->hi2c->Init.OwnAddress1 = 0;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
	i2c->hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2201      	movs	r2, #1
 8003540:	60da      	str	r2, [r3, #12]
	i2c->hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]
	i2c->hi2c->Init.OwnAddress2 = 0;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	615a      	str	r2, [r3, #20]
	i2c->hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
	i2c->hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
	i2c->hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c->hi2c) != HAL_OK)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 ffa0 	bl	80074b4 <HAL_I2C_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <ADS1113_init+0xaa>
	{
		return false;
 800357a:	2300      	movs	r3, #0
 800357c:	e021      	b.n	80035c2 <ADS1113_init+0xee>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(i2c->hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f004 fe8f 	bl	80082a8 <HAL_I2CEx_ConfigAnalogFilter>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <ADS1113_init+0xc0>
	{
		return false;
 8003590:	2300      	movs	r3, #0
 8003592:	e016      	b.n	80035c2 <ADS1113_init+0xee>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(i2c->hi2c, 0x0F) != HAL_OK)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	210f      	movs	r1, #15
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fecf 	bl	800833e <HAL_I2CEx_ConfigDigitalFilter>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <ADS1113_init+0xd6>
	{
		return false;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e00b      	b.n	80035c2 <ADS1113_init+0xee>
	}
	/** I2C Enable Fast Mode Plus
	*/
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f004 ff14 	bl	80083d8 <HAL_I2CEx_EnableFastModePlus>

	if (ADSbegin(i2c) != HAL_OK)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ff70 	bl	8003496 <ADSbegin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <ADS1113_init+0xec>
	{
		return false;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <ADS1113_init+0xee>
	}

	return true;
 80035c0:	2301      	movs	r3, #1

}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	4083126f 	.word	0x4083126f
 80035d0:	40005400 	.word	0x40005400
 80035d4:	00401242 	.word	0x00401242

080035d8 <ADSsetGain>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ads1113_t *i2c, adsGain_t gain) {
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	821a      	strh	r2, [r3, #16]
	switch(gain) {
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035f0:	d02e      	beq.n	8003650 <ADSsetGain+0x78>
 80035f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035f6:	dc2f      	bgt.n	8003658 <ADSsetGain+0x80>
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fc:	d024      	beq.n	8003648 <ADSsetGain+0x70>
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	dc29      	bgt.n	8003658 <ADSsetGain+0x80>
 8003604:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003608:	d01a      	beq.n	8003640 <ADSsetGain+0x68>
 800360a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800360e:	dc23      	bgt.n	8003658 <ADSsetGain+0x80>
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d010      	beq.n	8003638 <ADSsetGain+0x60>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	dc1d      	bgt.n	8003658 <ADSsetGain+0x80>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <ADSsetGain+0x50>
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d004      	beq.n	8003630 <ADSsetGain+0x58>
		break;
	case GAIN_SIXTEEN:
		i2c->full_scale = 0.256;
		break;
	}
}
 8003626:	e017      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 6.6144;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <ADSsetGain+0x8c>)
 800362c:	60da      	str	r2, [r3, #12]
		break;
 800362e:	e013      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 4.096;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <ADSsetGain+0x90>)
 8003634:	60da      	str	r2, [r3, #12]
		break;
 8003636:	e00f      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 2.048;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a0c      	ldr	r2, [pc, #48]	; (800366c <ADSsetGain+0x94>)
 800363c:	60da      	str	r2, [r3, #12]
		break;
 800363e:	e00b      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 1.024;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <ADSsetGain+0x98>)
 8003644:	60da      	str	r2, [r3, #12]
		break;
 8003646:	e007      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 0.512;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <ADSsetGain+0x9c>)
 800364c:	60da      	str	r2, [r3, #12]
		break;
 800364e:	e003      	b.n	8003658 <ADSsetGain+0x80>
		i2c->full_scale = 0.256;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <ADSsetGain+0xa0>)
 8003654:	60da      	str	r2, [r3, #12]
		break;
 8003656:	bf00      	nop
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40d3a92a 	.word	0x40d3a92a
 8003668:	4083126f 	.word	0x4083126f
 800366c:	4003126f 	.word	0x4003126f
 8003670:	3f83126f 	.word	0x3f83126f
 8003674:	3f03126f 	.word	0x3f03126f
 8003678:	3e83126f 	.word	0x3e83126f

0800367c <ADSreadADC_Differential_0_1>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ads1113_t *i2c) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	// Start with default values
	uint16_t config =
 8003684:	f240 1383 	movw	r3, #387	; 0x183
 8003688:	81bb      	strh	r3, [r7, #12]
	ADS1015_REG_CONFIG_CMODE_TRAD 	| 	// Traditional comparator (default val)
	ADS1015_REG_CONFIG_DR_1600SPS 	| 	// 1600 samples per second (default)
	ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)

	// Set PGA/voltage range
	config |= i2c->m_gain;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8a1a      	ldrh	r2, [r3, #16]
 800368e:	89bb      	ldrh	r3, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	81bb      	strh	r3, [r7, #12]

	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8003694:	89bb      	ldrh	r3, [r7, #12]
 8003696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369e:	81bb      	strh	r3, [r7, #12]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 80036a0:	89bb      	ldrh	r3, [r7, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	2101      	movs	r1, #1
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe95 	bl	80033d6 <writeRegister>

	// Wait for the conversion to complete
	ads_delay(i2c->m_conversionDelay);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe84 	bl	80033be <ads_delay>

	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 80036b6:	2100      	movs	r1, #0
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fec3 	bl	8003444 <readRegister>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7a1b      	ldrb	r3, [r3, #8]
 80036c6:	fa42 f303 	asr.w	r3, r2, r3
 80036ca:	81fb      	strh	r3, [r7, #14]
	if (i2c->m_bitShift == 0) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7a1b      	ldrb	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <ADSreadADC_Differential_0_1+0x5e>
		return (int16_t) res;
 80036d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d8:	e00b      	b.n	80036f2 <ADSreadADC_Differential_0_1+0x76>
	} else {
		// Shift 12-bit results right 4 bits for the ADS1015,
		// making sure we keep the sign bit intact
		if (res > 0x07FF) {
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d305      	bcc.n	80036ee <ADSreadADC_Differential_0_1+0x72>
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
 80036e2:	89fb      	ldrh	r3, [r7, #14]
 80036e4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80036e8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80036ec:	81fb      	strh	r3, [r7, #14]
		}
		return (int16_t) res;
 80036ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <ADSreadADC_Voltage>:


float ADSreadADC_Voltage(ads1113_t *i2c) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
//	float coeff = i2c->full_scale/(ADS_MAX_VALUE*ADS_VOLTAGE_DIVIDER_RATIO);
//	return ADSreadADC_Differential_0_1(i2c) * coeff;
	float coeff = i2c->full_scale*ADS_VOLTAGE_DIVIDER_RATIO/ADS_MAX_VALUE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	edd3 7a03 	vldr	s15, [r3, #12]
 800370a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003748 <ADSreadADC_Voltage+0x4c>
 800370e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003712:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800374c <ADSreadADC_Voltage+0x50>
 8003716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800371a:	edc7 7a03 	vstr	s15, [r7, #12]
	return ADSreadADC_Differential_0_1(i2c) * coeff - ADS_VOLTAGE_DIVIDER_OFFSET;
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffac 	bl	800367c <ADSreadADC_Differential_0_1>
 8003724:	4603      	mov	r3, r0
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800373a:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800373e:	eeb0 0a67 	vmov.f32	s0, s15
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	41913e50 	.word	0x41913e50
 800374c:	47000000 	.word	0x47000000

08003750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003756:	2003      	movs	r0, #3
 8003758:	f001 f9bf 	bl	8004ada <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800375c:	f005 fd18 	bl	8009190 <HAL_RCC_GetSysClockFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_Init+0x68>)
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	4913      	ldr	r1, [pc, #76]	; (80037bc <HAL_Init+0x6c>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_Init+0x68>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_Init+0x6c>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_Init+0x70>)
 8003792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <HAL_Init+0x74>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800379a:	200f      	movs	r0, #15
 800379c:	f7ff fbf4 	bl	8002f88 <HAL_InitTick>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e002      	b.n	80037b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037aa:	f7fe fa89 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	58024400 	.word	0x58024400
 80037bc:	080148d4 	.word	0x080148d4
 80037c0:	24000004 	.word	0x24000004
 80037c4:	24000000 	.word	0x24000000

080037c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_IncTick+0x20>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_IncTick+0x24>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <HAL_IncTick+0x24>)
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	2400000c 	.word	0x2400000c
 80037ec:	24000cac 	.word	0x24000cac

080037f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return uwTick;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_GetTick+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	24000cac 	.word	0x24000cac

08003808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff ffee 	bl	80037f0 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003820:	d005      	beq.n	800382e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_Delay+0x44>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800382e:	bf00      	nop
 8003830:	f7ff ffde 	bl	80037f0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	429a      	cmp	r2, r3
 800383e:	d8f7      	bhi.n	8003830 <HAL_Delay+0x28>
  {
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2400000c 	.word	0x2400000c

08003850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_GetREVID+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0c1b      	lsrs	r3, r3, #16
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	5c001000 	.word	0x5c001000

08003868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3360      	adds	r3, #96	; 0x60
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	431a      	orrs	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	611a      	str	r2, [r3, #16]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003942:	b480      	push	{r7}
 8003944:	b087      	sub	sp, #28
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	431a      	orrs	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	601a      	str	r2, [r3, #0]
  }
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3330      	adds	r3, #48	; 0x30
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	4413      	add	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	211f      	movs	r1, #31
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 011f 	and.w	r1, r3, #31
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	431a      	orrs	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3314      	adds	r3, #20
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0e5b      	lsrs	r3, r3, #25
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	4413      	add	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	0d1b      	lsrs	r3, r3, #20
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2107      	movs	r1, #7
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	401a      	ands	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	0d1b      	lsrs	r3, r3, #20
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	431a      	orrs	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0318 	and.w	r3, r3, #24
 8003a4a:	4908      	ldr	r1, [pc, #32]	; (8003a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a4c:	40d9      	lsrs	r1, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	400b      	ands	r3, r1
 8003a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	000fffff 	.word	0x000fffff

08003a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6093      	str	r3, [r2, #8]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	5fffffc0 	.word	0x5fffffc0

08003a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa8:	d101      	bne.n	8003aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	6fffffc0 	.word	0x6fffffc0

08003ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af8:	d101      	bne.n	8003afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <LL_ADC_IsEnabled+0x18>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <LL_ADC_IsEnabled+0x1a>
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e18f      	b.n	8003eba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fe f8a7 	bl	8001cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff67 	bl	8003a94 <LL_ADC_IsDeepPowerDownEnabled>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff4d 	bl	8003a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff82 	bl	8003ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d114      	bne.n	8003c10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff66 	bl	8003abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf0:	4b87      	ldr	r3, [pc, #540]	; (8003e10 <HAL_ADC_Init+0x290>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	4a87      	ldr	r2, [pc, #540]	; (8003e14 <HAL_ADC_Init+0x294>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c02:	e002      	b.n	8003c0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f9      	bne.n	8003c04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff65 	bl	8003ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff76 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003c46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 8129 	bne.w	8003ea8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 8125 	bne.w	8003ea8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ff4a 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d136      	bne.n	8003cec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a65      	ldr	r2, [pc, #404]	; (8003e18 <HAL_ADC_Init+0x298>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_ADC_Init+0x112>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a63      	ldr	r2, [pc, #396]	; (8003e1c <HAL_ADC_Init+0x29c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10e      	bne.n	8003cb0 <HAL_ADC_Init+0x130>
 8003c92:	4861      	ldr	r0, [pc, #388]	; (8003e18 <HAL_ADC_Init+0x298>)
 8003c94:	f7ff ff3a 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	4860      	ldr	r0, [pc, #384]	; (8003e1c <HAL_ADC_Init+0x29c>)
 8003c9c:	f7ff ff36 	bl	8003b0c <LL_ADC_IsEnabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4323      	orrs	r3, r4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e008      	b.n	8003cc2 <HAL_ADC_Init+0x142>
 8003cb0:	485b      	ldr	r0, [pc, #364]	; (8003e20 <HAL_ADC_Init+0x2a0>)
 8003cb2:	f7ff ff2b 	bl	8003b0c <LL_ADC_IsEnabled>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a53      	ldr	r2, [pc, #332]	; (8003e18 <HAL_ADC_Init+0x298>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_ADC_Init+0x15a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_ADC_Init+0x29c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_Init+0x15e>
 8003cda:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_ADC_Init+0x2a4>)
 8003cdc:	e000      	b.n	8003ce0 <HAL_ADC_Init+0x160>
 8003cde:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_ADC_Init+0x2a8>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7ff fdbe 	bl	8003868 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003cec:	f7ff fdb0 	bl	8003850 <HAL_GetREVID>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d914      	bls.n	8003d24 <HAL_ADC_Init+0x1a4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d110      	bne.n	8003d24 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7d5b      	ldrb	r3, [r3, #21]
 8003d06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7f1b      	ldrb	r3, [r3, #28]
 8003d18:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d1a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d1c:	f043 030c 	orr.w	r3, r3, #12
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e00d      	b.n	8003d40 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7d5b      	ldrb	r3, [r3, #21]
 8003d28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7f1b      	ldrb	r3, [r3, #28]
 8003d3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7f1b      	ldrb	r3, [r3, #28]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	045b      	lsls	r3, r3, #17
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <HAL_ADC_Init+0x2ac>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fed1 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003d90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fede 	bl	8003b58 <LL_ADC_INJ_IsConversionOngoing>
 8003d9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d15f      	bne.n	8003e64 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d15c      	bne.n	8003e64 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7d1b      	ldrb	r3, [r3, #20]
 8003dae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <HAL_ADC_Init+0x2b0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d130      	bne.n	8003e38 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_ADC_Init+0x2b4>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0411      	lsls	r1, r2, #16
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	611a      	str	r2, [r3, #16]
 8003e0c:	e01c      	b.n	8003e48 <HAL_ADC_Init+0x2c8>
 8003e0e:	bf00      	nop
 8003e10:	24000000 	.word	0x24000000
 8003e14:	053e2d63 	.word	0x053e2d63
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40022100 	.word	0x40022100
 8003e20:	58026000 	.word	0x58026000
 8003e24:	40022300 	.word	0x40022300
 8003e28:	58026300 	.word	0x58026300
 8003e2c:	fff0c003 	.word	0xfff0c003
 8003e30:	ffffbffc 	.word	0xffffbffc
 8003e34:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb80 	bl	8004564 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10c      	bne.n	8003e86 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f023 010f 	bic.w	r1, r3, #15
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	e007      	b.n	8003e96 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 020f 	bic.w	r2, r2, #15
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ea6:	e007      	b.n	8003eb8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f043 0210 	orr.w	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	bf00      	nop

08003ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b0a1      	sub	sp, #132	; 0x84
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a9d      	ldr	r2, [pc, #628]	; (8004154 <HAL_ADC_ConfigChannel+0x290>)
 8003ede:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x2a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e321      	b.n	8004532 <HAL_ADC_ConfigChannel+0x66e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fe19 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 8306 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d108      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x62>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2201      	movs	r2, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	e016      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x90>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	e003      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2201      	movs	r2, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	69d1      	ldr	r1, [r2, #28]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7ff fd02 	bl	8003978 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fdda 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003f7e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fde7 	bl	8003b58 <LL_ADC_INJ_IsConversionOngoing>
 8003f8a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80b3 	bne.w	80040fa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80af 	bne.w	80040fa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f7ff fd11 	bl	80039d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fae:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_ADC_ConfigChannel+0x294>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x110>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	e01d      	b.n	8004010 <HAL_ADC_ConfigChannel+0x14c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x136>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	e00a      	b.n	8004010 <HAL_ADC_ConfigChannel+0x14c>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d027      	beq.n	800406a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6919      	ldr	r1, [r3, #16]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004028:	f7ff fc52 	bl	80038d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6919      	ldr	r1, [r3, #16]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7e5b      	ldrb	r3, [r3, #25]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x17e>
 800403c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004040:	e000      	b.n	8004044 <HAL_ADC_ConfigChannel+0x180>
 8004042:	2300      	movs	r3, #0
 8004044:	461a      	mov	r2, r3
 8004046:	f7ff fc7c 	bl	8003942 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	7e1b      	ldrb	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x19c>
 800405a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800405e:	e000      	b.n	8004062 <HAL_ADC_ConfigChannel+0x19e>
 8004060:	2300      	movs	r3, #0
 8004062:	461a      	mov	r2, r3
 8004064:	f7ff fc54 	bl	8003910 <LL_ADC_SetDataRightShift>
 8004068:	e047      	b.n	80040fa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	069b      	lsls	r3, r3, #26
 800407a:	429a      	cmp	r2, r3
 800407c:	d107      	bne.n	800408e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800408c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	069b      	lsls	r3, r3, #26
 800409e:	429a      	cmp	r2, r3
 80040a0:	d107      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	069b      	lsls	r3, r3, #26
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d107      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040d4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	069b      	lsls	r3, r3, #26
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d107      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fd04 	bl	8003b0c <LL_ADC_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 820d 	bne.w	8004526 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	461a      	mov	r2, r3
 800411a:	f7ff fc85 	bl	8003a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <HAL_ADC_ConfigChannel+0x290>)
 8004124:	4293      	cmp	r3, r2
 8004126:	f040 8133 	bne.w	8004390 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004136:	2b00      	cmp	r3, #0
 8004138:	d110      	bne.n	800415c <HAL_ADC_ConfigChannel+0x298>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0e9b      	lsrs	r3, r3, #26
 8004140:	3301      	adds	r3, #1
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2b09      	cmp	r3, #9
 8004148:	bf94      	ite	ls
 800414a:	2301      	movls	r3, #1
 800414c:	2300      	movhi	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e01e      	b.n	8004190 <HAL_ADC_ConfigChannel+0x2cc>
 8004152:	bf00      	nop
 8004154:	47ff0000 	.word	0x47ff0000
 8004158:	5c001000 	.word	0x5c001000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800416a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800416e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	2b09      	cmp	r3, #9
 8004188:	bf94      	ite	ls
 800418a:	2301      	movls	r3, #1
 800418c:	2300      	movhi	r3, #0
 800418e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004190:	2b00      	cmp	r3, #0
 8004192:	d079      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x2ec>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	3301      	adds	r3, #1
 80041a8:	069b      	lsls	r3, r3, #26
 80041aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ae:	e015      	b.n	80041dc <HAL_ADC_ConfigChannel+0x318>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80041c8:	2320      	movs	r3, #32
 80041ca:	e003      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	069b      	lsls	r3, r3, #26
 80041d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x338>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	3301      	adds	r3, #1
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	e017      	b.n	800422c <HAL_ADC_ConfigChannel+0x368>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800420e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004214:	2320      	movs	r3, #32
 8004216:	e003      	b.n	8004220 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	ea42 0103 	orr.w	r1, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x38e>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	051b      	lsls	r3, r3, #20
 8004250:	e018      	b.n	8004284 <HAL_ADC_ConfigChannel+0x3c0>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e003      	b.n	8004276 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	fab3 f383 	clz	r3, r3
 8004274:	b2db      	uxtb	r3, r3
 8004276:	3301      	adds	r3, #1
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004284:	430b      	orrs	r3, r1
 8004286:	e07e      	b.n	8004386 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x3e0>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	069b      	lsls	r3, r3, #26
 800429e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042a2:	e015      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x40c>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80042bc:	2320      	movs	r3, #32
 80042be:	e003      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x42c>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	e017      	b.n	8004320 <HAL_ADC_ConfigChannel+0x45c>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	61bb      	str	r3, [r7, #24]
  return result;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004308:	2320      	movs	r3, #32
 800430a:	e003      	b.n	8004314 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	ea42 0103 	orr.w	r1, r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_ADC_ConfigChannel+0x488>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	3301      	adds	r3, #1
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	3b1e      	subs	r3, #30
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800434a:	e01b      	b.n	8004384 <HAL_ADC_ConfigChannel+0x4c0>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	60fb      	str	r3, [r7, #12]
  return result;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e003      	b.n	8004370 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f003 021f 	and.w	r2, r3, #31
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	3b1e      	subs	r3, #30
 800437e:	051b      	lsls	r3, r3, #20
 8004380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004384:	430b      	orrs	r3, r1
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	4619      	mov	r1, r3
 800438c:	f7ff fb20 	bl	80039d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f280 80c6 	bge.w	8004526 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a67      	ldr	r2, [pc, #412]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_ADC_ConfigChannel+0x4ea>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x4ee>
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_ADC_ConfigChannel+0x680>)
 80043b0:	e000      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x4f0>
 80043b2:	4b65      	ldr	r3, [pc, #404]	; (8004548 <HAL_ADC_ConfigChannel+0x684>)
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fa7d 	bl	80038b4 <LL_ADC_GetCommonPathInternalCh>
 80043ba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5e      	ldr	r2, [pc, #376]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_ADC_ConfigChannel+0x50c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10e      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x52a>
 80043d0:	485a      	ldr	r0, [pc, #360]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 80043d2:	f7ff fb9b 	bl	8003b0c <LL_ADC_IsEnabled>
 80043d6:	4604      	mov	r4, r0
 80043d8:	4859      	ldr	r0, [pc, #356]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 80043da:	f7ff fb97 	bl	8003b0c <LL_ADC_IsEnabled>
 80043de:	4603      	mov	r3, r0
 80043e0:	4323      	orrs	r3, r4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e008      	b.n	8004400 <HAL_ADC_ConfigChannel+0x53c>
 80043ee:	4857      	ldr	r0, [pc, #348]	; (800454c <HAL_ADC_ConfigChannel+0x688>)
 80043f0:	f7ff fb8c 	bl	8003b0c <LL_ADC_IsEnabled>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d07d      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a51      	ldr	r2, [pc, #324]	; (8004550 <HAL_ADC_ConfigChannel+0x68c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d130      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x5ac>
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d12b      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_ADC_ConfigChannel+0x688>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f040 8081 	bne.w	8004526 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a44      	ldr	r2, [pc, #272]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x574>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x578>
 8004438:	4a42      	ldr	r2, [pc, #264]	; (8004544 <HAL_ADC_ConfigChannel+0x680>)
 800443a:	e000      	b.n	800443e <HAL_ADC_ConfigChannel+0x57a>
 800443c:	4a42      	ldr	r2, [pc, #264]	; (8004548 <HAL_ADC_ConfigChannel+0x684>)
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7ff fa21 	bl	800388e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800444c:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_ADC_ConfigChannel+0x690>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	4a41      	ldr	r2, [pc, #260]	; (8004558 <HAL_ADC_ConfigChannel+0x694>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	3301      	adds	r3, #1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004460:	e002      	b.n	8004468 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3b01      	subs	r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f9      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800446e:	e05a      	b.n	8004526 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a39      	ldr	r2, [pc, #228]	; (800455c <HAL_ADC_ConfigChannel+0x698>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d11e      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x5f4>
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d119      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a30      	ldr	r2, [pc, #192]	; (800454c <HAL_ADC_ConfigChannel+0x688>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d14b      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x5de>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x5e2>
 80044a2:	4a28      	ldr	r2, [pc, #160]	; (8004544 <HAL_ADC_ConfigChannel+0x680>)
 80044a4:	e000      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x5e4>
 80044a6:	4a28      	ldr	r2, [pc, #160]	; (8004548 <HAL_ADC_ConfigChannel+0x684>)
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7ff f9ec 	bl	800388e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b6:	e036      	b.n	8004526 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <HAL_ADC_ConfigChannel+0x69c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d131      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x662>
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d12c      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1e      	ldr	r2, [pc, #120]	; (800454c <HAL_ADC_ConfigChannel+0x688>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d127      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_ADC_ConfigChannel+0x678>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_ADC_ConfigChannel+0x626>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a16      	ldr	r2, [pc, #88]	; (8004540 <HAL_ADC_ConfigChannel+0x67c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x62a>
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <HAL_ADC_ConfigChannel+0x680>)
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x62c>
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_ADC_ConfigChannel+0x684>)
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f7ff f9c8 	bl	800388e <LL_ADC_SetCommonPathInternalCh>
 80044fe:	e012      	b.n	8004526 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004512:	e008      	b.n	8004526 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800452e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004532:	4618      	mov	r0, r3
 8004534:	3784      	adds	r7, #132	; 0x84
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000
 8004540:	40022100 	.word	0x40022100
 8004544:	40022300 	.word	0x40022300
 8004548:	58026300 	.word	0x58026300
 800454c:	58026000 	.word	0x58026000
 8004550:	cb840000 	.word	0xcb840000
 8004554:	24000000 	.word	0x24000000
 8004558:	053e2d63 	.word	0x053e2d63
 800455c:	c7520000 	.word	0xc7520000
 8004560:	cfb80000 	.word	0xcfb80000

08004564 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a79      	ldr	r2, [pc, #484]	; (8004758 <ADC_ConfigureBoostMode+0x1f4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <ADC_ConfigureBoostMode+0x1c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a78      	ldr	r2, [pc, #480]	; (800475c <ADC_ConfigureBoostMode+0x1f8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d109      	bne.n	8004594 <ADC_ConfigureBoostMode+0x30>
 8004580:	4b77      	ldr	r3, [pc, #476]	; (8004760 <ADC_ConfigureBoostMode+0x1fc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e008      	b.n	80045a6 <ADC_ConfigureBoostMode+0x42>
 8004594:	4b73      	ldr	r3, [pc, #460]	; (8004764 <ADC_ConfigureBoostMode+0x200>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01c      	beq.n	80045e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045aa:	f004 ff6b 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80045ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045b8:	d010      	beq.n	80045dc <ADC_ConfigureBoostMode+0x78>
 80045ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045be:	d871      	bhi.n	80046a4 <ADC_ConfigureBoostMode+0x140>
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d002      	beq.n	80045cc <ADC_ConfigureBoostMode+0x68>
 80045c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ca:	d16b      	bne.n	80046a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	60fb      	str	r3, [r7, #12]
        break;
 80045da:	e066      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	60fb      	str	r3, [r7, #12]
        break;
 80045e2:	e062      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80045e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80045e8:	f005 ff30 	bl	800a44c <HAL_RCCEx_GetPeriphCLKFreq>
 80045ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80045f6:	d051      	beq.n	800469c <ADC_ConfigureBoostMode+0x138>
 80045f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80045fc:	d854      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 80045fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004602:	d047      	beq.n	8004694 <ADC_ConfigureBoostMode+0x130>
 8004604:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004608:	d84e      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 800460a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800460e:	d03d      	beq.n	800468c <ADC_ConfigureBoostMode+0x128>
 8004610:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004614:	d848      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 8004616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800461a:	d033      	beq.n	8004684 <ADC_ConfigureBoostMode+0x120>
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004620:	d842      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 8004622:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004626:	d029      	beq.n	800467c <ADC_ConfigureBoostMode+0x118>
 8004628:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800462c:	d83c      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 800462e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004632:	d01a      	beq.n	800466a <ADC_ConfigureBoostMode+0x106>
 8004634:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004638:	d836      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 800463a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800463e:	d014      	beq.n	800466a <ADC_ConfigureBoostMode+0x106>
 8004640:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004644:	d830      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464a:	d00e      	beq.n	800466a <ADC_ConfigureBoostMode+0x106>
 800464c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004650:	d82a      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 8004652:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004656:	d008      	beq.n	800466a <ADC_ConfigureBoostMode+0x106>
 8004658:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800465c:	d824      	bhi.n	80046a8 <ADC_ConfigureBoostMode+0x144>
 800465e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004662:	d002      	beq.n	800466a <ADC_ConfigureBoostMode+0x106>
 8004664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004668:	d11e      	bne.n	80046a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	0c9b      	lsrs	r3, r3, #18
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	60fb      	str	r3, [r7, #12]
        break;
 800467a:	e016      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
        break;
 8004682:	e012      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	60fb      	str	r3, [r7, #12]
        break;
 800468a:	e00e      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	60fb      	str	r3, [r7, #12]
        break;
 8004692:	e00a      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	09db      	lsrs	r3, r3, #7
 8004698:	60fb      	str	r3, [r7, #12]
        break;
 800469a:	e006      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	60fb      	str	r3, [r7, #12]
        break;
 80046a2:	e002      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
        break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80046a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046aa:	f7ff f8d1 	bl	8003850 <HAL_GetREVID>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d815      	bhi.n	80046e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <ADC_ConfigureBoostMode+0x204>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d908      	bls.n	80046d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80046d0:	e03e      	b.n	8004750 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	e035      	b.n	8004750 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <ADC_ConfigureBoostMode+0x208>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d808      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004700:	609a      	str	r2, [r3, #8]
}
 8004702:	e025      	b.n	8004750 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <ADC_ConfigureBoostMode+0x20c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d80a      	bhi.n	8004722 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	e016      	b.n	8004750 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a13      	ldr	r2, [pc, #76]	; (8004774 <ADC_ConfigureBoostMode+0x210>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d80a      	bhi.n	8004740 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473c:	609a      	str	r2, [r3, #8]
}
 800473e:	e007      	b.n	8004750 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40022000 	.word	0x40022000
 800475c:	40022100 	.word	0x40022100
 8004760:	40022300 	.word	0x40022300
 8004764:	58026300 	.word	0x58026300
 8004768:	01312d00 	.word	0x01312d00
 800476c:	005f5e10 	.word	0x005f5e10
 8004770:	00bebc20 	.word	0x00bebc20
 8004774:	017d7840 	.word	0x017d7840

08004778 <LL_ADC_IsEnabled>:
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <LL_ADC_IsEnabled+0x18>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <LL_ADC_IsEnabled+0x1a>
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_ADC_REG_IsConversionOngoing>:
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d101      	bne.n	80047b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b09f      	sub	sp, #124	; 0x7c
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047de:	2302      	movs	r3, #2
 80047e0:	e0be      	b.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5c      	ldr	r2, [pc, #368]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d102      	bne.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	e001      	b.n	8004806 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e09d      	b.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ffb9 	bl	800479e <LL_ADC_REG_IsConversionOngoing>
 800482c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ffb3 	bl	800479e <LL_ADC_REG_IsConversionOngoing>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d17f      	bne.n	800493e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800483e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004840:	2b00      	cmp	r3, #0
 8004842:	d17c      	bne.n	800493e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a47      	ldr	r2, [pc, #284]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a46      	ldr	r2, [pc, #280]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800485a:	e000      	b.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800485e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d039      	beq.n	80048dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	431a      	orrs	r2, r3
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a3a      	ldr	r2, [pc, #232]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a38      	ldr	r2, [pc, #224]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10e      	bne.n	80048ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800488e:	4836      	ldr	r0, [pc, #216]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004890:	f7ff ff72 	bl	8004778 <LL_ADC_IsEnabled>
 8004894:	4604      	mov	r4, r0
 8004896:	4835      	ldr	r0, [pc, #212]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004898:	f7ff ff6e 	bl	8004778 <LL_ADC_IsEnabled>
 800489c:	4603      	mov	r3, r0
 800489e:	4323      	orrs	r3, r4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e008      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80048ac:	4832      	ldr	r0, [pc, #200]	; (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048ae:	f7ff ff63 	bl	8004778 <LL_ADC_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d047      	beq.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	6811      	ldr	r1, [r2, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048da:	e03a      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10e      	bne.n	800491a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80048fc:	481a      	ldr	r0, [pc, #104]	; (8004968 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048fe:	f7ff ff3b 	bl	8004778 <LL_ADC_IsEnabled>
 8004902:	4604      	mov	r4, r0
 8004904:	4819      	ldr	r0, [pc, #100]	; (800496c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004906:	f7ff ff37 	bl	8004778 <LL_ADC_IsEnabled>
 800490a:	4603      	mov	r3, r0
 800490c:	4323      	orrs	r3, r4
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e008      	b.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800491a:	4817      	ldr	r0, [pc, #92]	; (8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800491c:	f7ff ff2c 	bl	8004778 <LL_ADC_IsEnabled>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004936:	4013      	ands	r3, r2
 8004938:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800493a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800493c:	e009      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004950:	e000      	b.n	8004954 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004952:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800495c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004960:	4618      	mov	r0, r3
 8004962:	377c      	adds	r7, #124	; 0x7c
 8004964:	46bd      	mov	sp, r7
 8004966:	bd90      	pop	{r4, r7, pc}
 8004968:	40022000 	.word	0x40022000
 800496c:	40022100 	.word	0x40022100
 8004970:	40022300 	.word	0x40022300
 8004974:	58026300 	.word	0x58026300
 8004978:	58026000 	.word	0x58026000
 800497c:	fffff0e0 	.word	0xfffff0e0

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <__NVIC_SetPriorityGrouping+0x40>)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	60d3      	str	r3, [r2, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000ed00 	.word	0xe000ed00
 80049c4:	05fa0000 	.word	0x05fa0000

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db0a      	blt.n	8004a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	490c      	ldr	r1, [pc, #48]	; (8004a6c <__NVIC_SetPriority+0x4c>)
 8004a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a48:	e00a      	b.n	8004a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4908      	ldr	r1, [pc, #32]	; (8004a70 <__NVIC_SetPriority+0x50>)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3b04      	subs	r3, #4
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	761a      	strb	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e100 	.word	0xe000e100
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf28      	it	cs
 8004a92:	2304      	movcs	r3, #4
 8004a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d902      	bls.n	8004aa4 <NVIC_EncodePriority+0x30>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3b03      	subs	r3, #3
 8004aa2:	e000      	b.n	8004aa6 <NVIC_EncodePriority+0x32>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	4313      	orrs	r3, r2
         );
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ff4c 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004afe:	f7ff ff63 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f7ff ffb3 	bl	8004a74 <NVIC_EncodePriority>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff82 	bl	8004a20 <__NVIC_SetPriority>
}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff56 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e014      	b.n	8004b7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	791b      	ldrb	r3, [r3, #4]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd f9dc 	bl	8001f20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9a:	d120      	bne.n	8004bde <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	d118      	bne.n	8004bde <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f82d 	bl	8004c38 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bec:	d120      	bne.n	8004c30 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d118      	bne.n	8004c30 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2204      	movs	r2, #4
 8004c02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f043 0202 	orr.w	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f93e 	bl	8004eac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	795b      	ldrb	r3, [r3, #5]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_DAC_ConfigChannel+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e11d      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d174      	bne.n	8004d62 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c78:	f7fe fdba 	bl	80037f0 <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d134      	bne.n	8004cee <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c84:	e011      	b.n	8004caa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c86:	f7fe fdb3 	bl	80037f0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d90a      	bls.n	8004caa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f043 0208 	orr.w	r2, r3, #8
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0fa      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb0:	4b7d      	ldr	r3, [pc, #500]	; (8004ea8 <HAL_DAC_ConfigChannel+0x25c>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f7fe fda5 	bl	8003808 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	6992      	ldr	r2, [r2, #24]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc8:	e01e      	b.n	8004d08 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cca:	f7fe fd91 	bl	80037f0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d90a      	bls.n	8004cee <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f043 0208 	orr.w	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0d8      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dbe8      	blt.n	8004cca <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f7fe fd85 	bl	8003808 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	6992      	ldr	r2, [r2, #24]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	ea02 0103 	and.w	r1, r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	21ff      	movs	r1, #255	; 0xff
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	ea02 0103 	and.w	r1, r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11d      	bne.n	8004da6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	221f      	movs	r2, #31
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4013      	ands	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2207      	movs	r2, #7
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e00f      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d102      	bne.n	8004dde <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e008      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e001      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	22c0      	movs	r2, #192	; 0xc0
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20008000 	.word	0x20008000

08004eac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ec8:	f7fe fc92 	bl	80037f0 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e316      	b.n	8005506 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a66      	ldr	r2, [pc, #408]	; (8005078 <HAL_DMA_Init+0x1b8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a65      	ldr	r2, [pc, #404]	; (800507c <HAL_DMA_Init+0x1bc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a63      	ldr	r2, [pc, #396]	; (8005080 <HAL_DMA_Init+0x1c0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a62      	ldr	r2, [pc, #392]	; (8005084 <HAL_DMA_Init+0x1c4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a60      	ldr	r2, [pc, #384]	; (8005088 <HAL_DMA_Init+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a5f      	ldr	r2, [pc, #380]	; (800508c <HAL_DMA_Init+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <HAL_DMA_Init+0x1d0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5c      	ldr	r2, [pc, #368]	; (8005094 <HAL_DMA_Init+0x1d4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5a      	ldr	r2, [pc, #360]	; (8005098 <HAL_DMA_Init+0x1d8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a59      	ldr	r2, [pc, #356]	; (800509c <HAL_DMA_Init+0x1dc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a57      	ldr	r2, [pc, #348]	; (80050a0 <HAL_DMA_Init+0x1e0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a56      	ldr	r2, [pc, #344]	; (80050a4 <HAL_DMA_Init+0x1e4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a54      	ldr	r2, [pc, #336]	; (80050a8 <HAL_DMA_Init+0x1e8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a53      	ldr	r2, [pc, #332]	; (80050ac <HAL_DMA_Init+0x1ec>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a51      	ldr	r2, [pc, #324]	; (80050b0 <HAL_DMA_Init+0x1f0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_Init+0xb8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a50      	ldr	r2, [pc, #320]	; (80050b4 <HAL_DMA_Init+0x1f4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_DMA_Init+0xbc>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_DMA_Init+0xbe>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 813b 	beq.w	80051fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a37      	ldr	r2, [pc, #220]	; (8005078 <HAL_DMA_Init+0x1b8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d04a      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a36      	ldr	r2, [pc, #216]	; (800507c <HAL_DMA_Init+0x1bc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d045      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a34      	ldr	r2, [pc, #208]	; (8005080 <HAL_DMA_Init+0x1c0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d040      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a33      	ldr	r2, [pc, #204]	; (8005084 <HAL_DMA_Init+0x1c4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d03b      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a31      	ldr	r2, [pc, #196]	; (8005088 <HAL_DMA_Init+0x1c8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d036      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a30      	ldr	r2, [pc, #192]	; (800508c <HAL_DMA_Init+0x1cc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d031      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <HAL_DMA_Init+0x1d0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d02c      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <HAL_DMA_Init+0x1d4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d027      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_DMA_Init+0x1d8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2a      	ldr	r2, [pc, #168]	; (800509c <HAL_DMA_Init+0x1dc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d01d      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <HAL_DMA_Init+0x1e0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_DMA_Init+0x1e4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <HAL_DMA_Init+0x174>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_DMA_Init+0x1e8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a24      	ldr	r2, [pc, #144]	; (80050ac <HAL_DMA_Init+0x1ec>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_DMA_Init+0x174>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_DMA_Init+0x1f0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_DMA_Init+0x174>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_DMA_Init+0x1f4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <HAL_DMA_Init+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e007      	b.n	8005056 <HAL_DMA_Init+0x196>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005056:	e02f      	b.n	80050b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005058:	f7fe fbca 	bl	80037f0 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b05      	cmp	r3, #5
 8005064:	d928      	bls.n	80050b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2203      	movs	r2, #3
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e246      	b.n	8005506 <HAL_DMA_Init+0x646>
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1c8      	bne.n	8005058 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4b83      	ldr	r3, [pc, #524]	; (80052e0 <HAL_DMA_Init+0x420>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b04      	cmp	r3, #4
 800510a:	d107      	bne.n	800511c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	4313      	orrs	r3, r2
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800511c:	4b71      	ldr	r3, [pc, #452]	; (80052e4 <HAL_DMA_Init+0x424>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b71      	ldr	r3, [pc, #452]	; (80052e8 <HAL_DMA_Init+0x428>)
 8005122:	4013      	ands	r3, r2
 8005124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005128:	d328      	bcc.n	800517c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b28      	cmp	r3, #40	; 0x28
 8005130:	d903      	bls.n	800513a <HAL_DMA_Init+0x27a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b2e      	cmp	r3, #46	; 0x2e
 8005138:	d917      	bls.n	800516a <HAL_DMA_Init+0x2aa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b3e      	cmp	r3, #62	; 0x3e
 8005140:	d903      	bls.n	800514a <HAL_DMA_Init+0x28a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b42      	cmp	r3, #66	; 0x42
 8005148:	d90f      	bls.n	800516a <HAL_DMA_Init+0x2aa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b46      	cmp	r3, #70	; 0x46
 8005150:	d903      	bls.n	800515a <HAL_DMA_Init+0x29a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b48      	cmp	r3, #72	; 0x48
 8005158:	d907      	bls.n	800516a <HAL_DMA_Init+0x2aa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b4e      	cmp	r3, #78	; 0x4e
 8005160:	d905      	bls.n	800516e <HAL_DMA_Init+0x2ae>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b52      	cmp	r3, #82	; 0x52
 8005168:	d801      	bhi.n	800516e <HAL_DMA_Init+0x2ae>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_DMA_Init+0x2b0>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800517a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d117      	bne.n	80051d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f9b9 	bl	8006530 <DMA_CheckFifoParam>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e197      	b.n	8005506 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 f8f4 	bl	80063cc <DMA_CalcBaseAndBitshift>
 80051e4:	4603      	mov	r3, r0
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	223f      	movs	r2, #63	; 0x3f
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	e0cd      	b.n	8005396 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3b      	ldr	r2, [pc, #236]	; (80052ec <HAL_DMA_Init+0x42c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_DMA_Init+0x38a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a39      	ldr	r2, [pc, #228]	; (80052f0 <HAL_DMA_Init+0x430>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01d      	beq.n	800524a <HAL_DMA_Init+0x38a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <HAL_DMA_Init+0x434>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_DMA_Init+0x38a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a36      	ldr	r2, [pc, #216]	; (80052f8 <HAL_DMA_Init+0x438>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_DMA_Init+0x38a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a35      	ldr	r2, [pc, #212]	; (80052fc <HAL_DMA_Init+0x43c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_DMA_Init+0x38a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a33      	ldr	r2, [pc, #204]	; (8005300 <HAL_DMA_Init+0x440>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_DMA_Init+0x38a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a32      	ldr	r2, [pc, #200]	; (8005304 <HAL_DMA_Init+0x444>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_DMA_Init+0x38a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a30      	ldr	r2, [pc, #192]	; (8005308 <HAL_DMA_Init+0x448>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_DMA_Init+0x38e>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_DMA_Init+0x390>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8097 	beq.w	8005384 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_DMA_Init+0x42c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d021      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_DMA_Init+0x430>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01c      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_DMA_Init+0x434>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d017      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <HAL_DMA_Init+0x438>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d012      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_DMA_Init+0x43c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00d      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <HAL_DMA_Init+0x440>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d008      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_DMA_Init+0x444>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <HAL_DMA_Init+0x3e4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <HAL_DMA_Init+0x448>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_DMA_Init+0x44c>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d020      	beq.n	8005310 <HAL_DMA_Init+0x450>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d102      	bne.n	80052dc <HAL_DMA_Init+0x41c>
 80052d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052da:	e01a      	b.n	8005312 <HAL_DMA_Init+0x452>
 80052dc:	2300      	movs	r3, #0
 80052de:	e018      	b.n	8005312 <HAL_DMA_Init+0x452>
 80052e0:	fe10803f 	.word	0xfe10803f
 80052e4:	5c001000 	.word	0x5c001000
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494
 800530c:	fffe000f 	.word	0xfffe000f
 8005310:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68d2      	ldr	r2, [r2, #12]
 8005316:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005340:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b6e      	ldr	r3, [pc, #440]	; (8005510 <HAL_DMA_Init+0x650>)
 8005358:	4413      	add	r3, r2
 800535a:	4a6e      	ldr	r2, [pc, #440]	; (8005514 <HAL_DMA_Init+0x654>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 f82f 	bl	80063cc <DMA_CalcBaseAndBitshift>
 800536e:	4603      	mov	r3, r0
 8005370:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	e008      	b.n	8005396 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2203      	movs	r2, #3
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0b7      	b.n	8005506 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5f      	ldr	r2, [pc, #380]	; (8005518 <HAL_DMA_Init+0x658>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d072      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5d      	ldr	r2, [pc, #372]	; (800551c <HAL_DMA_Init+0x65c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d06d      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <HAL_DMA_Init+0x660>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d068      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5a      	ldr	r2, [pc, #360]	; (8005524 <HAL_DMA_Init+0x664>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d063      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a59      	ldr	r2, [pc, #356]	; (8005528 <HAL_DMA_Init+0x668>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d05e      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a57      	ldr	r2, [pc, #348]	; (800552c <HAL_DMA_Init+0x66c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d059      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_DMA_Init+0x670>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d054      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a54      	ldr	r2, [pc, #336]	; (8005534 <HAL_DMA_Init+0x674>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d04f      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a53      	ldr	r2, [pc, #332]	; (8005538 <HAL_DMA_Init+0x678>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d04a      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a51      	ldr	r2, [pc, #324]	; (800553c <HAL_DMA_Init+0x67c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d045      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a50      	ldr	r2, [pc, #320]	; (8005540 <HAL_DMA_Init+0x680>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d040      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <HAL_DMA_Init+0x684>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d03b      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4d      	ldr	r2, [pc, #308]	; (8005548 <HAL_DMA_Init+0x688>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d036      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4b      	ldr	r2, [pc, #300]	; (800554c <HAL_DMA_Init+0x68c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d031      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <HAL_DMA_Init+0x690>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d02c      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a48      	ldr	r2, [pc, #288]	; (8005554 <HAL_DMA_Init+0x694>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d027      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a47      	ldr	r2, [pc, #284]	; (8005558 <HAL_DMA_Init+0x698>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a45      	ldr	r2, [pc, #276]	; (800555c <HAL_DMA_Init+0x69c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01d      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a44      	ldr	r2, [pc, #272]	; (8005560 <HAL_DMA_Init+0x6a0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_DMA_Init+0x6a4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a41      	ldr	r2, [pc, #260]	; (8005568 <HAL_DMA_Init+0x6a8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3f      	ldr	r2, [pc, #252]	; (800556c <HAL_DMA_Init+0x6ac>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3e      	ldr	r2, [pc, #248]	; (8005570 <HAL_DMA_Init+0x6b0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_DMA_Init+0x5c6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3c      	ldr	r2, [pc, #240]	; (8005574 <HAL_DMA_Init+0x6b4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d101      	bne.n	800548a <HAL_DMA_Init+0x5ca>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_DMA_Init+0x5cc>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d032      	beq.n	80054f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 f8c9 	bl	8006628 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d102      	bne.n	80054a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_DMA_Init+0x624>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d80c      	bhi.n	80054e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f946 	bl	800675c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	e008      	b.n	80054f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	a7fdabf8 	.word	0xa7fdabf8
 8005514:	cccccccd 	.word	0xcccccccd
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	58025408 	.word	0x58025408
 800555c:	5802541c 	.word	0x5802541c
 8005560:	58025430 	.word	0x58025430
 8005564:	58025444 	.word	0x58025444
 8005568:	58025458 	.word	0x58025458
 800556c:	5802546c 	.word	0x5802546c
 8005570:	58025480 	.word	0x58025480
 8005574:	58025494 	.word	0x58025494

08005578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005584:	4b67      	ldr	r3, [pc, #412]	; (8005724 <HAL_DMA_IRQHandler+0x1ac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a67      	ldr	r2, [pc, #412]	; (8005728 <HAL_DMA_IRQHandler+0x1b0>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	0a9b      	lsrs	r3, r3, #10
 8005590:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5f      	ldr	r2, [pc, #380]	; (800572c <HAL_DMA_IRQHandler+0x1b4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5d      	ldr	r2, [pc, #372]	; (8005730 <HAL_DMA_IRQHandler+0x1b8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_DMA_IRQHandler+0x1bc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5a      	ldr	r2, [pc, #360]	; (8005738 <HAL_DMA_IRQHandler+0x1c0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a59      	ldr	r2, [pc, #356]	; (800573c <HAL_DMA_IRQHandler+0x1c4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a57      	ldr	r2, [pc, #348]	; (8005740 <HAL_DMA_IRQHandler+0x1c8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a56      	ldr	r2, [pc, #344]	; (8005744 <HAL_DMA_IRQHandler+0x1cc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a54      	ldr	r2, [pc, #336]	; (8005748 <HAL_DMA_IRQHandler+0x1d0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a53      	ldr	r2, [pc, #332]	; (800574c <HAL_DMA_IRQHandler+0x1d4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a51      	ldr	r2, [pc, #324]	; (8005750 <HAL_DMA_IRQHandler+0x1d8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a50      	ldr	r2, [pc, #320]	; (8005754 <HAL_DMA_IRQHandler+0x1dc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <HAL_DMA_IRQHandler+0x1e0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4d      	ldr	r2, [pc, #308]	; (800575c <HAL_DMA_IRQHandler+0x1e4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a4b      	ldr	r2, [pc, #300]	; (8005760 <HAL_DMA_IRQHandler+0x1e8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4a      	ldr	r2, [pc, #296]	; (8005764 <HAL_DMA_IRQHandler+0x1ec>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_IRQHandler+0xd2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a48      	ldr	r2, [pc, #288]	; (8005768 <HAL_DMA_IRQHandler+0x1f0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_DMA_IRQHandler+0xd6>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_DMA_IRQHandler+0xd8>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 842b 	beq.w	8005eac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2208      	movs	r2, #8
 8005660:	409a      	lsls	r2, r3
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80a2 	beq.w	80057b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2e      	ldr	r2, [pc, #184]	; (800572c <HAL_DMA_IRQHandler+0x1b4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d04a      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_DMA_IRQHandler+0x1b8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d045      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <HAL_DMA_IRQHandler+0x1bc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d040      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <HAL_DMA_IRQHandler+0x1c0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d03b      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <HAL_DMA_IRQHandler+0x1c4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d036      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a27      	ldr	r2, [pc, #156]	; (8005740 <HAL_DMA_IRQHandler+0x1c8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d031      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <HAL_DMA_IRQHandler+0x1cc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d02c      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a24      	ldr	r2, [pc, #144]	; (8005748 <HAL_DMA_IRQHandler+0x1d0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d027      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a22      	ldr	r2, [pc, #136]	; (800574c <HAL_DMA_IRQHandler+0x1d4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <HAL_DMA_IRQHandler+0x1d8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01d      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <HAL_DMA_IRQHandler+0x1dc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_DMA_IRQHandler+0x1e0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_DMA_IRQHandler+0x1e4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_DMA_IRQHandler+0x1e8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <HAL_DMA_IRQHandler+0x1ec>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_DMA_IRQHandler+0x194>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <HAL_DMA_IRQHandler+0x1f0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d12f      	bne.n	800576c <HAL_DMA_IRQHandler+0x1f4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf14      	ite	ne
 800571a:	2301      	movne	r3, #1
 800571c:	2300      	moveq	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e02e      	b.n	8005780 <HAL_DMA_IRQHandler+0x208>
 8005722:	bf00      	nop
 8005724:	24000000 	.word	0x24000000
 8005728:	1b4e81b5 	.word	0x1b4e81b5
 800572c:	40020010 	.word	0x40020010
 8005730:	40020028 	.word	0x40020028
 8005734:	40020040 	.word	0x40020040
 8005738:	40020058 	.word	0x40020058
 800573c:	40020070 	.word	0x40020070
 8005740:	40020088 	.word	0x40020088
 8005744:	400200a0 	.word	0x400200a0
 8005748:	400200b8 	.word	0x400200b8
 800574c:	40020410 	.word	0x40020410
 8005750:	40020428 	.word	0x40020428
 8005754:	40020440 	.word	0x40020440
 8005758:	40020458 	.word	0x40020458
 800575c:	40020470 	.word	0x40020470
 8005760:	40020488 	.word	0x40020488
 8005764:	400204a0 	.word	0x400204a0
 8005768:	400204b8 	.word	0x400204b8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2208      	movs	r2, #8
 800579e:	409a      	lsls	r2, r3
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d06e      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a69      	ldr	r2, [pc, #420]	; (8005970 <HAL_DMA_IRQHandler+0x3f8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d04a      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a67      	ldr	r2, [pc, #412]	; (8005974 <HAL_DMA_IRQHandler+0x3fc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d045      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a66      	ldr	r2, [pc, #408]	; (8005978 <HAL_DMA_IRQHandler+0x400>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d040      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a64      	ldr	r2, [pc, #400]	; (800597c <HAL_DMA_IRQHandler+0x404>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d03b      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a63      	ldr	r2, [pc, #396]	; (8005980 <HAL_DMA_IRQHandler+0x408>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d036      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a61      	ldr	r2, [pc, #388]	; (8005984 <HAL_DMA_IRQHandler+0x40c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d031      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a60      	ldr	r2, [pc, #384]	; (8005988 <HAL_DMA_IRQHandler+0x410>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d02c      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5e      	ldr	r2, [pc, #376]	; (800598c <HAL_DMA_IRQHandler+0x414>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d027      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <HAL_DMA_IRQHandler+0x418>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <HAL_DMA_IRQHandler+0x41c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01d      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a5a      	ldr	r2, [pc, #360]	; (8005998 <HAL_DMA_IRQHandler+0x420>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a58      	ldr	r2, [pc, #352]	; (800599c <HAL_DMA_IRQHandler+0x424>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a57      	ldr	r2, [pc, #348]	; (80059a0 <HAL_DMA_IRQHandler+0x428>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a55      	ldr	r2, [pc, #340]	; (80059a4 <HAL_DMA_IRQHandler+0x42c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a54      	ldr	r2, [pc, #336]	; (80059a8 <HAL_DMA_IRQHandler+0x430>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2ee>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a52      	ldr	r2, [pc, #328]	; (80059ac <HAL_DMA_IRQHandler+0x434>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10a      	bne.n	800587c <HAL_DMA_IRQHandler+0x304>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e003      	b.n	8005884 <HAL_DMA_IRQHandler+0x30c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2300      	movs	r3, #0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2201      	movs	r2, #1
 8005892:	409a      	lsls	r2, r3
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0202 	orr.w	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2204      	movs	r2, #4
 80058ae:	409a      	lsls	r2, r3
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 808f 	beq.w	80059d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <HAL_DMA_IRQHandler+0x3f8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d04a      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <HAL_DMA_IRQHandler+0x3fc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d045      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a29      	ldr	r2, [pc, #164]	; (8005978 <HAL_DMA_IRQHandler+0x400>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d040      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_DMA_IRQHandler+0x404>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d03b      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a26      	ldr	r2, [pc, #152]	; (8005980 <HAL_DMA_IRQHandler+0x408>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d036      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_DMA_IRQHandler+0x40c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d031      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a23      	ldr	r2, [pc, #140]	; (8005988 <HAL_DMA_IRQHandler+0x410>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d02c      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_DMA_IRQHandler+0x414>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d027      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a20      	ldr	r2, [pc, #128]	; (8005990 <HAL_DMA_IRQHandler+0x418>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d022      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <HAL_DMA_IRQHandler+0x41c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01d      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <HAL_DMA_IRQHandler+0x420>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d018      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_DMA_IRQHandler+0x424>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <HAL_DMA_IRQHandler+0x428>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_DMA_IRQHandler+0x42c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <HAL_DMA_IRQHandler+0x430>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_DMA_IRQHandler+0x3e2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a15      	ldr	r2, [pc, #84]	; (80059ac <HAL_DMA_IRQHandler+0x434>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d12a      	bne.n	80059b0 <HAL_DMA_IRQHandler+0x438>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e023      	b.n	80059b8 <HAL_DMA_IRQHandler+0x440>
 8005970:	40020010 	.word	0x40020010
 8005974:	40020028 	.word	0x40020028
 8005978:	40020040 	.word	0x40020040
 800597c:	40020058 	.word	0x40020058
 8005980:	40020070 	.word	0x40020070
 8005984:	40020088 	.word	0x40020088
 8005988:	400200a0 	.word	0x400200a0
 800598c:	400200b8 	.word	0x400200b8
 8005990:	40020410 	.word	0x40020410
 8005994:	40020428 	.word	0x40020428
 8005998:	40020440 	.word	0x40020440
 800599c:	40020458 	.word	0x40020458
 80059a0:	40020470 	.word	0x40020470
 80059a4:	40020488 	.word	0x40020488
 80059a8:	400204a0 	.word	0x400204a0
 80059ac:	400204b8 	.word	0x400204b8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2204      	movs	r2, #4
 80059c6:	409a      	lsls	r2, r3
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0204 	orr.w	r2, r3, #4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2210      	movs	r2, #16
 80059e2:	409a      	lsls	r2, r3
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a6 	beq.w	8005b3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a85      	ldr	r2, [pc, #532]	; (8005c08 <HAL_DMA_IRQHandler+0x690>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d04a      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a83      	ldr	r2, [pc, #524]	; (8005c0c <HAL_DMA_IRQHandler+0x694>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d045      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a82      	ldr	r2, [pc, #520]	; (8005c10 <HAL_DMA_IRQHandler+0x698>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d040      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a80      	ldr	r2, [pc, #512]	; (8005c14 <HAL_DMA_IRQHandler+0x69c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d03b      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a7f      	ldr	r2, [pc, #508]	; (8005c18 <HAL_DMA_IRQHandler+0x6a0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d036      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7d      	ldr	r2, [pc, #500]	; (8005c1c <HAL_DMA_IRQHandler+0x6a4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d031      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a7c      	ldr	r2, [pc, #496]	; (8005c20 <HAL_DMA_IRQHandler+0x6a8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d02c      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a7a      	ldr	r2, [pc, #488]	; (8005c24 <HAL_DMA_IRQHandler+0x6ac>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d027      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a79      	ldr	r2, [pc, #484]	; (8005c28 <HAL_DMA_IRQHandler+0x6b0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d022      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a77      	ldr	r2, [pc, #476]	; (8005c2c <HAL_DMA_IRQHandler+0x6b4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01d      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a76      	ldr	r2, [pc, #472]	; (8005c30 <HAL_DMA_IRQHandler+0x6b8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d018      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a74      	ldr	r2, [pc, #464]	; (8005c34 <HAL_DMA_IRQHandler+0x6bc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a73      	ldr	r2, [pc, #460]	; (8005c38 <HAL_DMA_IRQHandler+0x6c0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00e      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a71      	ldr	r2, [pc, #452]	; (8005c3c <HAL_DMA_IRQHandler+0x6c4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d009      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a70      	ldr	r2, [pc, #448]	; (8005c40 <HAL_DMA_IRQHandler+0x6c8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d004      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x516>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a6e      	ldr	r2, [pc, #440]	; (8005c44 <HAL_DMA_IRQHandler+0x6cc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x52c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e009      	b.n	8005ab8 <HAL_DMA_IRQHandler+0x540>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03e      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d024      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
 8005af8:	e01f      	b.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01b      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	e016      	b.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0208 	bic.w	r2, r2, #8
 8005b28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2220      	movs	r2, #32
 8005b44:	409a      	lsls	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8110 	beq.w	8005d70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <HAL_DMA_IRQHandler+0x690>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d04a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <HAL_DMA_IRQHandler+0x694>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d045      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <HAL_DMA_IRQHandler+0x698>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d040      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <HAL_DMA_IRQHandler+0x69c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d03b      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <HAL_DMA_IRQHandler+0x6a0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d036      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <HAL_DMA_IRQHandler+0x6a4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d031      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <HAL_DMA_IRQHandler+0x6a8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02c      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <HAL_DMA_IRQHandler+0x6ac>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d027      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <HAL_DMA_IRQHandler+0x6b0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d022      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <HAL_DMA_IRQHandler+0x6b4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <HAL_DMA_IRQHandler+0x6b8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d018      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <HAL_DMA_IRQHandler+0x6bc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1a      	ldr	r2, [pc, #104]	; (8005c38 <HAL_DMA_IRQHandler+0x6c0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <HAL_DMA_IRQHandler+0x6c4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a17      	ldr	r2, [pc, #92]	; (8005c40 <HAL_DMA_IRQHandler+0x6c8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x678>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_DMA_IRQHandler+0x6cc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d12b      	bne.n	8005c48 <HAL_DMA_IRQHandler+0x6d0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf14      	ite	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	2300      	moveq	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	e02a      	b.n	8005c5c <HAL_DMA_IRQHandler+0x6e4>
 8005c06:	bf00      	nop
 8005c08:	40020010 	.word	0x40020010
 8005c0c:	40020028 	.word	0x40020028
 8005c10:	40020040 	.word	0x40020040
 8005c14:	40020058 	.word	0x40020058
 8005c18:	40020070 	.word	0x40020070
 8005c1c:	40020088 	.word	0x40020088
 8005c20:	400200a0 	.word	0x400200a0
 8005c24:	400200b8 	.word	0x400200b8
 8005c28:	40020410 	.word	0x40020410
 8005c2c:	40020428 	.word	0x40020428
 8005c30:	40020440 	.word	0x40020440
 8005c34:	40020458 	.word	0x40020458
 8005c38:	40020470 	.word	0x40020470
 8005c3c:	40020488 	.word	0x40020488
 8005c40:	400204a0 	.word	0x400204a0
 8005c44:	400204b8 	.word	0x400204b8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8087 	beq.w	8005d70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d139      	bne.n	8005cf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0216 	bic.w	r2, r2, #22
 8005c8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <HAL_DMA_IRQHandler+0x736>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0208 	bic.w	r2, r2, #8
 8005cbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	223f      	movs	r2, #63	; 0x3f
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 834a 	beq.w	800637c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
          }
          return;
 8005cf0:	e344      	b.n	800637c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	e027      	b.n	8005d70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d023      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e01e      	b.n	8005d70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10f      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0210 	bic.w	r2, r2, #16
 8005d4e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8306 	beq.w	8006386 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8088 	beq.w	8005e98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7a      	ldr	r2, [pc, #488]	; (8005f80 <HAL_DMA_IRQHandler+0xa08>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d04a      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a79      	ldr	r2, [pc, #484]	; (8005f84 <HAL_DMA_IRQHandler+0xa0c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d045      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a77      	ldr	r2, [pc, #476]	; (8005f88 <HAL_DMA_IRQHandler+0xa10>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d040      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a76      	ldr	r2, [pc, #472]	; (8005f8c <HAL_DMA_IRQHandler+0xa14>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d03b      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a74      	ldr	r2, [pc, #464]	; (8005f90 <HAL_DMA_IRQHandler+0xa18>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d036      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a73      	ldr	r2, [pc, #460]	; (8005f94 <HAL_DMA_IRQHandler+0xa1c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d031      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a71      	ldr	r2, [pc, #452]	; (8005f98 <HAL_DMA_IRQHandler+0xa20>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d02c      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a70      	ldr	r2, [pc, #448]	; (8005f9c <HAL_DMA_IRQHandler+0xa24>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d027      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6e      	ldr	r2, [pc, #440]	; (8005fa0 <HAL_DMA_IRQHandler+0xa28>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d022      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6d      	ldr	r2, [pc, #436]	; (8005fa4 <HAL_DMA_IRQHandler+0xa2c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d01d      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6b      	ldr	r2, [pc, #428]	; (8005fa8 <HAL_DMA_IRQHandler+0xa30>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6a      	ldr	r2, [pc, #424]	; (8005fac <HAL_DMA_IRQHandler+0xa34>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	; (8005fb0 <HAL_DMA_IRQHandler+0xa38>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a67      	ldr	r2, [pc, #412]	; (8005fb4 <HAL_DMA_IRQHandler+0xa3c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a65      	ldr	r2, [pc, #404]	; (8005fb8 <HAL_DMA_IRQHandler+0xa40>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x8b8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a64      	ldr	r2, [pc, #400]	; (8005fbc <HAL_DMA_IRQHandler+0xa44>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <HAL_DMA_IRQHandler+0x8ca>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e007      	b.n	8005e52 <HAL_DMA_IRQHandler+0x8da>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d307      	bcc.n	8005e6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f2      	bne.n	8005e52 <HAL_DMA_IRQHandler+0x8da>
 8005e6c:	e000      	b.n	8005e70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e6e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e8e:	e003      	b.n	8005e98 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8272 	beq.w	8006386 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	e26c      	b.n	8006386 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a43      	ldr	r2, [pc, #268]	; (8005fc0 <HAL_DMA_IRQHandler+0xa48>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d022      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a42      	ldr	r2, [pc, #264]	; (8005fc4 <HAL_DMA_IRQHandler+0xa4c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d01d      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a40      	ldr	r2, [pc, #256]	; (8005fc8 <HAL_DMA_IRQHandler+0xa50>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d018      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3f      	ldr	r2, [pc, #252]	; (8005fcc <HAL_DMA_IRQHandler+0xa54>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3d      	ldr	r2, [pc, #244]	; (8005fd0 <HAL_DMA_IRQHandler+0xa58>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00e      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3c      	ldr	r2, [pc, #240]	; (8005fd4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a3a      	ldr	r2, [pc, #232]	; (8005fd8 <HAL_DMA_IRQHandler+0xa60>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_DMA_IRQHandler+0x984>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a39      	ldr	r2, [pc, #228]	; (8005fdc <HAL_DMA_IRQHandler+0xa64>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d101      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x988>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_DMA_IRQHandler+0x98a>
 8005f00:	2300      	movs	r3, #0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 823f 	beq.w	8006386 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2204      	movs	r2, #4
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80cd 	beq.w	80060c0 <HAL_DMA_IRQHandler+0xb48>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80c7 	beq.w	80060c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d049      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 8210 	beq.w	8006380 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	e20a      	b.n	8006380 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8206 	beq.w	8006380 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f7c:	e200      	b.n	8006380 <HAL_DMA_IRQHandler+0xe08>
 8005f7e:	bf00      	nop
 8005f80:	40020010 	.word	0x40020010
 8005f84:	40020028 	.word	0x40020028
 8005f88:	40020040 	.word	0x40020040
 8005f8c:	40020058 	.word	0x40020058
 8005f90:	40020070 	.word	0x40020070
 8005f94:	40020088 	.word	0x40020088
 8005f98:	400200a0 	.word	0x400200a0
 8005f9c:	400200b8 	.word	0x400200b8
 8005fa0:	40020410 	.word	0x40020410
 8005fa4:	40020428 	.word	0x40020428
 8005fa8:	40020440 	.word	0x40020440
 8005fac:	40020458 	.word	0x40020458
 8005fb0:	40020470 	.word	0x40020470
 8005fb4:	40020488 	.word	0x40020488
 8005fb8:	400204a0 	.word	0x400204a0
 8005fbc:	400204b8 	.word	0x400204b8
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d160      	bne.n	80060ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7f      	ldr	r2, [pc, #508]	; (80061ec <HAL_DMA_IRQHandler+0xc74>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d04a      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7d      	ldr	r2, [pc, #500]	; (80061f0 <HAL_DMA_IRQHandler+0xc78>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d045      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a7c      	ldr	r2, [pc, #496]	; (80061f4 <HAL_DMA_IRQHandler+0xc7c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d040      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a7a      	ldr	r2, [pc, #488]	; (80061f8 <HAL_DMA_IRQHandler+0xc80>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d03b      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a79      	ldr	r2, [pc, #484]	; (80061fc <HAL_DMA_IRQHandler+0xc84>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d036      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a77      	ldr	r2, [pc, #476]	; (8006200 <HAL_DMA_IRQHandler+0xc88>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d031      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a76      	ldr	r2, [pc, #472]	; (8006204 <HAL_DMA_IRQHandler+0xc8c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d02c      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a74      	ldr	r2, [pc, #464]	; (8006208 <HAL_DMA_IRQHandler+0xc90>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d027      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a73      	ldr	r2, [pc, #460]	; (800620c <HAL_DMA_IRQHandler+0xc94>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d022      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a71      	ldr	r2, [pc, #452]	; (8006210 <HAL_DMA_IRQHandler+0xc98>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01d      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a70      	ldr	r2, [pc, #448]	; (8006214 <HAL_DMA_IRQHandler+0xc9c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d018      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6e      	ldr	r2, [pc, #440]	; (8006218 <HAL_DMA_IRQHandler+0xca0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6d      	ldr	r2, [pc, #436]	; (800621c <HAL_DMA_IRQHandler+0xca4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a6b      	ldr	r2, [pc, #428]	; (8006220 <HAL_DMA_IRQHandler+0xca8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6a      	ldr	r2, [pc, #424]	; (8006224 <HAL_DMA_IRQHandler+0xcac>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_DMA_IRQHandler+0xb12>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a68      	ldr	r2, [pc, #416]	; (8006228 <HAL_DMA_IRQHandler+0xcb0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <HAL_DMA_IRQHandler+0xb24>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0208 	bic.w	r2, r2, #8
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e007      	b.n	80060ac <HAL_DMA_IRQHandler+0xb34>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0204 	bic.w	r2, r2, #4
 80060aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8165 	beq.w	8006380 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060be:	e15f      	b.n	8006380 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2202      	movs	r2, #2
 80060ca:	409a      	lsls	r2, r3
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80c5 	beq.w	8006260 <HAL_DMA_IRQHandler+0xce8>
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80bf 	beq.w	8006260 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2202      	movs	r2, #2
 80060ec:	409a      	lsls	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 813a 	beq.w	8006384 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006118:	e134      	b.n	8006384 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8130 	beq.w	8006384 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800612c:	e12a      	b.n	8006384 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8089 	bne.w	800624c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <HAL_DMA_IRQHandler+0xc74>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <HAL_DMA_IRQHandler+0xc78>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <HAL_DMA_IRQHandler+0xc7c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a26      	ldr	r2, [pc, #152]	; (80061f8 <HAL_DMA_IRQHandler+0xc80>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a25      	ldr	r2, [pc, #148]	; (80061fc <HAL_DMA_IRQHandler+0xc84>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a23      	ldr	r2, [pc, #140]	; (8006200 <HAL_DMA_IRQHandler+0xc88>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_DMA_IRQHandler+0xc8c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a20      	ldr	r2, [pc, #128]	; (8006208 <HAL_DMA_IRQHandler+0xc90>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_DMA_IRQHandler+0xc94>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <HAL_DMA_IRQHandler+0xc98>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <HAL_DMA_IRQHandler+0xc9c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	; (8006218 <HAL_DMA_IRQHandler+0xca0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_DMA_IRQHandler+0xca4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <HAL_DMA_IRQHandler+0xca8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a16      	ldr	r2, [pc, #88]	; (8006224 <HAL_DMA_IRQHandler+0xcac>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_IRQHandler+0xc62>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <HAL_DMA_IRQHandler+0xcb0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d128      	bne.n	800622c <HAL_DMA_IRQHandler+0xcb4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0214 	bic.w	r2, r2, #20
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e027      	b.n	800623c <HAL_DMA_IRQHandler+0xcc4>
 80061ec:	40020010 	.word	0x40020010
 80061f0:	40020028 	.word	0x40020028
 80061f4:	40020040 	.word	0x40020040
 80061f8:	40020058 	.word	0x40020058
 80061fc:	40020070 	.word	0x40020070
 8006200:	40020088 	.word	0x40020088
 8006204:	400200a0 	.word	0x400200a0
 8006208:	400200b8 	.word	0x400200b8
 800620c:	40020410 	.word	0x40020410
 8006210:	40020428 	.word	0x40020428
 8006214:	40020440 	.word	0x40020440
 8006218:	40020458 	.word	0x40020458
 800621c:	40020470 	.word	0x40020470
 8006220:	40020488 	.word	0x40020488
 8006224:	400204a0 	.word	0x400204a0
 8006228:	400204b8 	.word	0x400204b8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 020a 	bic.w	r2, r2, #10
 800623a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8097 	beq.w	8006384 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800625e:	e091      	b.n	8006384 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	2208      	movs	r2, #8
 800626a:	409a      	lsls	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4013      	ands	r3, r2
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8088 	beq.w	8006386 <HAL_DMA_IRQHandler+0xe0e>
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8082 	beq.w	8006386 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a41      	ldr	r2, [pc, #260]	; (800638c <HAL_DMA_IRQHandler+0xe14>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d04a      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a3f      	ldr	r2, [pc, #252]	; (8006390 <HAL_DMA_IRQHandler+0xe18>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d045      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3e      	ldr	r2, [pc, #248]	; (8006394 <HAL_DMA_IRQHandler+0xe1c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d040      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <HAL_DMA_IRQHandler+0xe20>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d03b      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <HAL_DMA_IRQHandler+0xe24>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d036      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <HAL_DMA_IRQHandler+0xe28>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a38      	ldr	r2, [pc, #224]	; (80063a4 <HAL_DMA_IRQHandler+0xe2c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02c      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a36      	ldr	r2, [pc, #216]	; (80063a8 <HAL_DMA_IRQHandler+0xe30>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d027      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a35      	ldr	r2, [pc, #212]	; (80063ac <HAL_DMA_IRQHandler+0xe34>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a33      	ldr	r2, [pc, #204]	; (80063b0 <HAL_DMA_IRQHandler+0xe38>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01d      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a32      	ldr	r2, [pc, #200]	; (80063b4 <HAL_DMA_IRQHandler+0xe3c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <HAL_DMA_IRQHandler+0xe40>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2f      	ldr	r2, [pc, #188]	; (80063bc <HAL_DMA_IRQHandler+0xe44>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	; (80063c0 <HAL_DMA_IRQHandler+0xe48>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <HAL_DMA_IRQHandler+0xe4c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_DMA_IRQHandler+0xdaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <HAL_DMA_IRQHandler+0xe50>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <HAL_DMA_IRQHandler+0xdbc>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 021c 	bic.w	r2, r2, #28
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e007      	b.n	8006344 <HAL_DMA_IRQHandler+0xdcc>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020e 	bic.w	r2, r2, #14
 8006342:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2201      	movs	r2, #1
 800634e:	409a      	lsls	r2, r3
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	e004      	b.n	8006386 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006384:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40020010 	.word	0x40020010
 8006390:	40020028 	.word	0x40020028
 8006394:	40020040 	.word	0x40020040
 8006398:	40020058 	.word	0x40020058
 800639c:	40020070 	.word	0x40020070
 80063a0:	40020088 	.word	0x40020088
 80063a4:	400200a0 	.word	0x400200a0
 80063a8:	400200b8 	.word	0x400200b8
 80063ac:	40020410 	.word	0x40020410
 80063b0:	40020428 	.word	0x40020428
 80063b4:	40020440 	.word	0x40020440
 80063b8:	40020458 	.word	0x40020458
 80063bc:	40020470 	.word	0x40020470
 80063c0:	40020488 	.word	0x40020488
 80063c4:	400204a0 	.word	0x400204a0
 80063c8:	400204b8 	.word	0x400204b8

080063cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a42      	ldr	r2, [pc, #264]	; (80064e4 <DMA_CalcBaseAndBitshift+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d04a      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a41      	ldr	r2, [pc, #260]	; (80064e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d045      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3f      	ldr	r2, [pc, #252]	; (80064ec <DMA_CalcBaseAndBitshift+0x120>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d040      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a3e      	ldr	r2, [pc, #248]	; (80064f0 <DMA_CalcBaseAndBitshift+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d03b      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3c      	ldr	r2, [pc, #240]	; (80064f4 <DMA_CalcBaseAndBitshift+0x128>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d036      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3b      	ldr	r2, [pc, #236]	; (80064f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d031      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a39      	ldr	r2, [pc, #228]	; (80064fc <DMA_CalcBaseAndBitshift+0x130>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02c      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a38      	ldr	r2, [pc, #224]	; (8006500 <DMA_CalcBaseAndBitshift+0x134>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d027      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a36      	ldr	r2, [pc, #216]	; (8006504 <DMA_CalcBaseAndBitshift+0x138>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a35      	ldr	r2, [pc, #212]	; (8006508 <DMA_CalcBaseAndBitshift+0x13c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01d      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a33      	ldr	r2, [pc, #204]	; (800650c <DMA_CalcBaseAndBitshift+0x140>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a32      	ldr	r2, [pc, #200]	; (8006510 <DMA_CalcBaseAndBitshift+0x144>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a30      	ldr	r2, [pc, #192]	; (8006514 <DMA_CalcBaseAndBitshift+0x148>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2f      	ldr	r2, [pc, #188]	; (8006518 <DMA_CalcBaseAndBitshift+0x14c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2d      	ldr	r2, [pc, #180]	; (800651c <DMA_CalcBaseAndBitshift+0x150>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <DMA_CalcBaseAndBitshift+0x154>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d101      	bne.n	8006478 <DMA_CalcBaseAndBitshift+0xac>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <DMA_CalcBaseAndBitshift+0xae>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d024      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	3b10      	subs	r3, #16
 8006486:	4a27      	ldr	r2, [pc, #156]	; (8006524 <DMA_CalcBaseAndBitshift+0x158>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	4a24      	ldr	r2, [pc, #144]	; (8006528 <DMA_CalcBaseAndBitshift+0x15c>)
 8006498:	5cd3      	ldrb	r3, [r2, r3]
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d908      	bls.n	80064b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b1f      	ldr	r3, [pc, #124]	; (800652c <DMA_CalcBaseAndBitshift+0x160>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	659a      	str	r2, [r3, #88]	; 0x58
 80064b6:	e00d      	b.n	80064d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	4b1b      	ldr	r3, [pc, #108]	; (800652c <DMA_CalcBaseAndBitshift+0x160>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6593      	str	r3, [r2, #88]	; 0x58
 80064c6:	e005      	b.n	80064d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40020010 	.word	0x40020010
 80064e8:	40020028 	.word	0x40020028
 80064ec:	40020040 	.word	0x40020040
 80064f0:	40020058 	.word	0x40020058
 80064f4:	40020070 	.word	0x40020070
 80064f8:	40020088 	.word	0x40020088
 80064fc:	400200a0 	.word	0x400200a0
 8006500:	400200b8 	.word	0x400200b8
 8006504:	40020410 	.word	0x40020410
 8006508:	40020428 	.word	0x40020428
 800650c:	40020440 	.word	0x40020440
 8006510:	40020458 	.word	0x40020458
 8006514:	40020470 	.word	0x40020470
 8006518:	40020488 	.word	0x40020488
 800651c:	400204a0 	.word	0x400204a0
 8006520:	400204b8 	.word	0x400204b8
 8006524:	aaaaaaab 	.word	0xaaaaaaab
 8006528:	080148e4 	.word	0x080148e4
 800652c:	fffffc00 	.word	0xfffffc00

08006530 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d120      	bne.n	8006586 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	2b03      	cmp	r3, #3
 800654a:	d858      	bhi.n	80065fe <DMA_CheckFifoParam+0xce>
 800654c:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <DMA_CheckFifoParam+0x24>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	08006565 	.word	0x08006565
 8006558:	08006577 	.word	0x08006577
 800655c:	08006565 	.word	0x08006565
 8006560:	080065ff 	.word	0x080065ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d048      	beq.n	8006602 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006574:	e045      	b.n	8006602 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800657e:	d142      	bne.n	8006606 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006584:	e03f      	b.n	8006606 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658e:	d123      	bne.n	80065d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	2b03      	cmp	r3, #3
 8006596:	d838      	bhi.n	800660a <DMA_CheckFifoParam+0xda>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <DMA_CheckFifoParam+0x70>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065b7 	.word	0x080065b7
 80065a8:	080065b1 	.word	0x080065b1
 80065ac:	080065c9 	.word	0x080065c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
        break;
 80065b4:	e030      	b.n	8006618 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d025      	beq.n	800660e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065c6:	e022      	b.n	800660e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065d0:	d11f      	bne.n	8006612 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065d6:	e01c      	b.n	8006612 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d902      	bls.n	80065e6 <DMA_CheckFifoParam+0xb6>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d003      	beq.n	80065ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065e4:	e018      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
        break;
 80065ea:	e015      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
    break;
 80065fc:	e00b      	b.n	8006616 <DMA_CheckFifoParam+0xe6>
        break;
 80065fe:	bf00      	nop
 8006600:	e00a      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006602:	bf00      	nop
 8006604:	e008      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006606:	bf00      	nop
 8006608:	e006      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 800660a:	bf00      	nop
 800660c:	e004      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
    break;
 8006616:	bf00      	nop
    }
  }

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a38      	ldr	r2, [pc, #224]	; (800671c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a36      	ldr	r2, [pc, #216]	; (8006720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a35      	ldr	r2, [pc, #212]	; (8006724 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a33      	ldr	r2, [pc, #204]	; (8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a32      	ldr	r2, [pc, #200]	; (800672c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a30      	ldr	r2, [pc, #192]	; (8006730 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2f      	ldr	r2, [pc, #188]	; (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2d      	ldr	r2, [pc, #180]	; (8006738 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	3b08      	subs	r3, #8
 8006698:	4a28      	ldr	r2, [pc, #160]	; (800673c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4b26      	ldr	r3, [pc, #152]	; (8006740 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a24      	ldr	r2, [pc, #144]	; (8006744 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80066b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2201      	movs	r2, #1
 80066be:	409a      	lsls	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80066c4:	e024      	b.n	8006710 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	3b10      	subs	r3, #16
 80066ce:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a1c      	ldr	r2, [pc, #112]	; (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d806      	bhi.n	80066ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d902      	bls.n	80066ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3308      	adds	r3, #8
 80066ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4b18      	ldr	r3, [pc, #96]	; (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a16      	ldr	r2, [pc, #88]	; (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006700:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	58025408 	.word	0x58025408
 8006720:	5802541c 	.word	0x5802541c
 8006724:	58025430 	.word	0x58025430
 8006728:	58025444 	.word	0x58025444
 800672c:	58025458 	.word	0x58025458
 8006730:	5802546c 	.word	0x5802546c
 8006734:	58025480 	.word	0x58025480
 8006738:	58025494 	.word	0x58025494
 800673c:	cccccccd 	.word	0xcccccccd
 8006740:	16009600 	.word	0x16009600
 8006744:	58025880 	.word	0x58025880
 8006748:	aaaaaaab 	.word	0xaaaaaaab
 800674c:	400204b8 	.word	0x400204b8
 8006750:	4002040f 	.word	0x4002040f
 8006754:	10008200 	.word	0x10008200
 8006758:	40020880 	.word	0x40020880

0800675c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d04a      	beq.n	8006808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d847      	bhi.n	8006808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a24      	ldr	r2, [pc, #144]	; (8006818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01d      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	; (800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a21      	ldr	r2, [pc, #132]	; (8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d101      	bne.n	80067cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067e4:	671a      	str	r2, [r3, #112]	; 0x70
 80067e6:	e009      	b.n	80067fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a11      	ldr	r2, [pc, #68]	; (8006840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80067fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494
 8006834:	1600963f 	.word	0x1600963f
 8006838:	58025940 	.word	0x58025940
 800683c:	1000823f 	.word	0x1000823f
 8006840:	40020940 	.word	0x40020940

08006844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b098      	sub	sp, #96	; 0x60
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800684c:	4a84      	ldr	r2, [pc, #528]	; (8006a60 <HAL_FDCAN_Init+0x21c>)
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	4611      	mov	r1, r2
 8006854:	224c      	movs	r2, #76	; 0x4c
 8006856:	4618      	mov	r0, r3
 8006858:	f00b f973 	bl	8011b42 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e1c6      	b.n	8006bf4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a7e      	ldr	r2, [pc, #504]	; (8006a64 <HAL_FDCAN_Init+0x220>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d106      	bne.n	800687e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb fb92 	bl	8001fbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0210 	bic.w	r2, r2, #16
 80068a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068a8:	f7fc ffa2 	bl	80037f0 <HAL_GetTick>
 80068ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80068ae:	e014      	b.n	80068da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80068b0:	f7fc ff9e 	bl	80037f0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b0a      	cmp	r3, #10
 80068bc:	d90d      	bls.n	80068da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c4:	f043 0201 	orr.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2203      	movs	r2, #3
 80068d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e18c      	b.n	8006bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d0e3      	beq.n	80068b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068f8:	f7fc ff7a 	bl	80037f0 <HAL_GetTick>
 80068fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068fe:	e014      	b.n	800692a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006900:	f7fc ff76 	bl	80037f0 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b0a      	cmp	r3, #10
 800690c:	d90d      	bls.n	800692a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006914:	f043 0201 	orr.w	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2203      	movs	r2, #3
 8006922:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e164      	b.n	8006bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0e3      	beq.n	8006900 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0202 	orr.w	r2, r2, #2
 8006946:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7c1b      	ldrb	r3, [r3, #16]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d108      	bne.n	8006962 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695e:	619a      	str	r2, [r3, #24]
 8006960:	e007      	b.n	8006972 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006970:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7c5b      	ldrb	r3, [r3, #17]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d108      	bne.n	800698c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006988:	619a      	str	r2, [r3, #24]
 800698a:	e007      	b.n	800699c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800699a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	7c9b      	ldrb	r3, [r3, #18]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d108      	bne.n	80069b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069b2:	619a      	str	r2, [r3, #24]
 80069b4:	e007      	b.n	80069c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80069ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0210 	bic.w	r2, r2, #16
 80069fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d108      	bne.n	8006a16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0204 	orr.w	r2, r2, #4
 8006a12:	619a      	str	r2, [r3, #24]
 8006a14:	e030      	b.n	8006a78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d02c      	beq.n	8006a78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d020      	beq.n	8006a68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0210 	orr.w	r2, r2, #16
 8006a44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d114      	bne.n	8006a78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0220 	orr.w	r2, r2, #32
 8006a5c:	619a      	str	r2, [r3, #24]
 8006a5e:	e00b      	b.n	8006a78 <HAL_FDCAN_Init+0x234>
 8006a60:	0801484c 	.word	0x0801484c
 8006a64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0220 	orr.w	r2, r2, #32
 8006a76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006aa0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006aa2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aac:	d115      	bne.n	8006ada <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006abc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ac6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006ad6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006ad8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b00:	4413      	add	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d011      	beq.n	8006b2a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006b0e:	f023 0107 	bic.w	r1, r3, #7
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	3360      	adds	r3, #96	; 0x60
 8006b1a:	443b      	add	r3, r7
 8006b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006b3a:	f023 0107 	bic.w	r1, r3, #7
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	3360      	adds	r3, #96	; 0x60
 8006b46:	443b      	add	r3, r7
 8006b48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d012      	beq.n	8006b84 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006b66:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3360      	adds	r3, #96	; 0x60
 8006b72:	443b      	add	r3, r7
 8006b74:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006b78:	011a      	lsls	r2, r3, #4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d012      	beq.n	8006bb2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006b94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	3360      	adds	r3, #96	; 0x60
 8006ba0:	443b      	add	r3, r7
 8006ba2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ba6:	021a      	lsls	r2, r3, #8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <HAL_FDCAN_Init+0x3b8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d107      	bne.n	8006bcc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f022 0203 	bic.w	r2, r2, #3
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f80b 	bl	8006c00 <FDCAN_CalcultateRamBlockAddresses>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3760      	adds	r7, #96	; 0x60
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	4000a000 	.word	0x4000a000

08006c00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006c16:	4ba7      	ldr	r3, [pc, #668]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	0091      	lsls	r1, r2, #2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	430b      	orrs	r3, r1
 8006c24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c30:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	041a      	lsls	r2, r3, #16
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c56:	4b97      	ldr	r3, [pc, #604]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0091      	lsls	r1, r2, #2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	430b      	orrs	r3, r1
 8006c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	041a      	lsls	r2, r3, #16
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006c98:	4b86      	ldr	r3, [pc, #536]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	0091      	lsls	r1, r2, #2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cb2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	041a      	lsls	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ce0:	4b74      	ldr	r3, [pc, #464]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	0091      	lsls	r1, r2, #2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	430b      	orrs	r3, r1
 8006cee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cfa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	041a      	lsls	r2, r3, #16
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006d28:	4b62      	ldr	r3, [pc, #392]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	0091      	lsls	r1, r2, #2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	430b      	orrs	r3, r1
 8006d36:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	4413      	add	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006d54:	4b57      	ldr	r3, [pc, #348]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	0091      	lsls	r1, r2, #2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d6e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	041a      	lsls	r2, r3, #16
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006d96:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0091      	lsls	r1, r2, #2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	430b      	orrs	r3, r1
 8006da4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006db0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db8:	041a      	lsls	r2, r3, #16
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006dcc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	061a      	lsls	r2, r3, #24
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de4:	4b34      	ldr	r3, [pc, #208]	; (8006eb8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006de6:	4413      	add	r3, r2
 8006de8:	009a      	lsls	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	441a      	add	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d915      	bls.n	8006edc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006eb0:	e006      	b.n	8006ec0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006eb2:	bf00      	nop
 8006eb4:	ffff0003 	.word	0xffff0003
 8006eb8:	10002b00 	.word	0x10002b00
 8006ebc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ec6:	f043 0220 	orr.w	r2, r3, #32
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e010      	b.n	8006efe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e005      	b.n	8006ef0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3f3      	bcc.n	8006ee4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop

08006f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f1a:	4b89      	ldr	r3, [pc, #548]	; (8007140 <HAL_GPIO_Init+0x234>)
 8006f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f1e:	e194      	b.n	800724a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	2101      	movs	r1, #1
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8186 	beq.w	8007244 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d00b      	beq.n	8006f58 <HAL_GPIO_Init+0x4c>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d007      	beq.n	8006f58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f4c:	2b11      	cmp	r3, #17
 8006f4e:	d003      	beq.n	8006f58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b12      	cmp	r3, #18
 8006f56:	d130      	bne.n	8006fba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	2203      	movs	r2, #3
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	43db      	mvns	r3, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f8e:	2201      	movs	r2, #1
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 0201 	and.w	r2, r3, #1
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d003      	beq.n	8006ffa <HAL_GPIO_Init+0xee>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b12      	cmp	r3, #18
 8006ff8:	d123      	bne.n	8007042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	08da      	lsrs	r2, r3, #3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3208      	adds	r2, #8
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	220f      	movs	r2, #15
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	43db      	mvns	r3, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4013      	ands	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4313      	orrs	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	08da      	lsrs	r2, r3, #3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3208      	adds	r2, #8
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	2203      	movs	r2, #3
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4013      	ands	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f003 0203 	and.w	r2, r3, #3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4313      	orrs	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80e0 	beq.w	8007244 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007084:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <HAL_GPIO_Init+0x238>)
 8007086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708a:	4a2e      	ldr	r2, [pc, #184]	; (8007144 <HAL_GPIO_Init+0x238>)
 800708c:	f043 0302 	orr.w	r3, r3, #2
 8007090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007094:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <HAL_GPIO_Init+0x238>)
 8007096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070a2:	4a29      	ldr	r2, [pc, #164]	; (8007148 <HAL_GPIO_Init+0x23c>)
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	089b      	lsrs	r3, r3, #2
 80070a8:	3302      	adds	r3, #2
 80070aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	220f      	movs	r2, #15
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43db      	mvns	r3, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4013      	ands	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a20      	ldr	r2, [pc, #128]	; (800714c <HAL_GPIO_Init+0x240>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d052      	beq.n	8007174 <HAL_GPIO_Init+0x268>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <HAL_GPIO_Init+0x244>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d031      	beq.n	800713a <HAL_GPIO_Init+0x22e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <HAL_GPIO_Init+0x248>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02b      	beq.n	8007136 <HAL_GPIO_Init+0x22a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <HAL_GPIO_Init+0x24c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d025      	beq.n	8007132 <HAL_GPIO_Init+0x226>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_GPIO_Init+0x250>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01f      	beq.n	800712e <HAL_GPIO_Init+0x222>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_GPIO_Init+0x254>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d019      	beq.n	800712a <HAL_GPIO_Init+0x21e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <HAL_GPIO_Init+0x258>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <HAL_GPIO_Init+0x21a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a19      	ldr	r2, [pc, #100]	; (8007168 <HAL_GPIO_Init+0x25c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00d      	beq.n	8007122 <HAL_GPIO_Init+0x216>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a18      	ldr	r2, [pc, #96]	; (800716c <HAL_GPIO_Init+0x260>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <HAL_GPIO_Init+0x212>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <HAL_GPIO_Init+0x264>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d101      	bne.n	800711a <HAL_GPIO_Init+0x20e>
 8007116:	2309      	movs	r3, #9
 8007118:	e02d      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800711a:	230a      	movs	r3, #10
 800711c:	e02b      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800711e:	2308      	movs	r3, #8
 8007120:	e029      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 8007122:	2307      	movs	r3, #7
 8007124:	e027      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 8007126:	2306      	movs	r3, #6
 8007128:	e025      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800712a:	2305      	movs	r3, #5
 800712c:	e023      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800712e:	2304      	movs	r3, #4
 8007130:	e021      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 8007132:	2303      	movs	r3, #3
 8007134:	e01f      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 8007136:	2302      	movs	r3, #2
 8007138:	e01d      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800713a:	2301      	movs	r3, #1
 800713c:	e01b      	b.n	8007176 <HAL_GPIO_Init+0x26a>
 800713e:	bf00      	nop
 8007140:	58000080 	.word	0x58000080
 8007144:	58024400 	.word	0x58024400
 8007148:	58000400 	.word	0x58000400
 800714c:	58020000 	.word	0x58020000
 8007150:	58020400 	.word	0x58020400
 8007154:	58020800 	.word	0x58020800
 8007158:	58020c00 	.word	0x58020c00
 800715c:	58021000 	.word	0x58021000
 8007160:	58021400 	.word	0x58021400
 8007164:	58021800 	.word	0x58021800
 8007168:	58021c00 	.word	0x58021c00
 800716c:	58022000 	.word	0x58022000
 8007170:	58022400 	.word	0x58022400
 8007174:	2300      	movs	r3, #0
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	f002 0203 	and.w	r2, r2, #3
 800717c:	0092      	lsls	r2, r2, #2
 800717e:	4093      	lsls	r3, r2
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	4313      	orrs	r3, r2
 8007184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007186:	4938      	ldr	r1, [pc, #224]	; (8007268 <HAL_GPIO_Init+0x35c>)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	3302      	adds	r3, #2
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	43db      	mvns	r3, r3
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	4013      	ands	r3, r2
 80071a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	43db      	mvns	r3, r3
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	4013      	ands	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800720e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	43db      	mvns	r3, r3
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4013      	ands	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800723c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f ae63 	bne.w	8006f20 <HAL_GPIO_Init+0x14>
  }
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	3724      	adds	r7, #36	; 0x24
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	58000400 	.word	0x58000400

0800726c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800727a:	4b75      	ldr	r3, [pc, #468]	; (8007450 <HAL_GPIO_DeInit+0x1e4>)
 800727c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800727e:	e0d9      	b.n	8007434 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007280:	2201      	movs	r2, #1
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4013      	ands	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80cc 	beq.w	800742e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007296:	4a6f      	ldr	r2, [pc, #444]	; (8007454 <HAL_GPIO_DeInit+0x1e8>)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	089b      	lsrs	r3, r3, #2
 800729c:	3302      	adds	r3, #2
 800729e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	220f      	movs	r2, #15
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a67      	ldr	r2, [pc, #412]	; (8007458 <HAL_GPIO_DeInit+0x1ec>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d037      	beq.n	8007330 <HAL_GPIO_DeInit+0xc4>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a66      	ldr	r2, [pc, #408]	; (800745c <HAL_GPIO_DeInit+0x1f0>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d031      	beq.n	800732c <HAL_GPIO_DeInit+0xc0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a65      	ldr	r2, [pc, #404]	; (8007460 <HAL_GPIO_DeInit+0x1f4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02b      	beq.n	8007328 <HAL_GPIO_DeInit+0xbc>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a64      	ldr	r2, [pc, #400]	; (8007464 <HAL_GPIO_DeInit+0x1f8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d025      	beq.n	8007324 <HAL_GPIO_DeInit+0xb8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a63      	ldr	r2, [pc, #396]	; (8007468 <HAL_GPIO_DeInit+0x1fc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d01f      	beq.n	8007320 <HAL_GPIO_DeInit+0xb4>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a62      	ldr	r2, [pc, #392]	; (800746c <HAL_GPIO_DeInit+0x200>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d019      	beq.n	800731c <HAL_GPIO_DeInit+0xb0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a61      	ldr	r2, [pc, #388]	; (8007470 <HAL_GPIO_DeInit+0x204>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d013      	beq.n	8007318 <HAL_GPIO_DeInit+0xac>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a60      	ldr	r2, [pc, #384]	; (8007474 <HAL_GPIO_DeInit+0x208>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00d      	beq.n	8007314 <HAL_GPIO_DeInit+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a5f      	ldr	r2, [pc, #380]	; (8007478 <HAL_GPIO_DeInit+0x20c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <HAL_GPIO_DeInit+0xa4>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a5e      	ldr	r2, [pc, #376]	; (800747c <HAL_GPIO_DeInit+0x210>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d101      	bne.n	800730c <HAL_GPIO_DeInit+0xa0>
 8007308:	2309      	movs	r3, #9
 800730a:	e012      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 800730c:	230a      	movs	r3, #10
 800730e:	e010      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007310:	2308      	movs	r3, #8
 8007312:	e00e      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007314:	2307      	movs	r3, #7
 8007316:	e00c      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007318:	2306      	movs	r3, #6
 800731a:	e00a      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 800731c:	2305      	movs	r3, #5
 800731e:	e008      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007320:	2304      	movs	r3, #4
 8007322:	e006      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007324:	2303      	movs	r3, #3
 8007326:	e004      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007328:	2302      	movs	r3, #2
 800732a:	e002      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <HAL_GPIO_DeInit+0xc6>
 8007330:	2300      	movs	r3, #0
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	f002 0203 	and.w	r2, r2, #3
 8007338:	0092      	lsls	r2, r2, #2
 800733a:	4093      	lsls	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d136      	bne.n	80073b0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	43db      	mvns	r3, r3
 8007358:	401a      	ands	r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800735e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	43db      	mvns	r3, r3
 8007368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800736c:	4013      	ands	r3, r2
 800736e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	43db      	mvns	r3, r3
 800737a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800737e:	4013      	ands	r3, r2
 8007380:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	220f      	movs	r2, #15
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007392:	4a30      	ldr	r2, [pc, #192]	; (8007454 <HAL_GPIO_DeInit+0x1e8>)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	089b      	lsrs	r3, r3, #2
 8007398:	3302      	adds	r3, #2
 800739a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	43da      	mvns	r2, r3
 80073a2:	482c      	ldr	r0, [pc, #176]	; (8007454 <HAL_GPIO_DeInit+0x1e8>)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	089b      	lsrs	r3, r3, #2
 80073a8:	400a      	ands	r2, r1
 80073aa:	3302      	adds	r3, #2
 80073ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	2103      	movs	r1, #3
 80073ba:	fa01 f303 	lsl.w	r3, r1, r3
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	08da      	lsrs	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3208      	adds	r2, #8
 80073cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	220f      	movs	r2, #15
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	08d2      	lsrs	r2, r2, #3
 80073e4:	4019      	ands	r1, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3208      	adds	r2, #8
 80073ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	2103      	movs	r1, #3
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	401a      	ands	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	2101      	movs	r1, #1
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	fa01 f303 	lsl.w	r3, r1, r3
 8007410:	43db      	mvns	r3, r3
 8007412:	401a      	ands	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	2103      	movs	r1, #3
 8007422:	fa01 f303 	lsl.w	r3, r1, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	401a      	ands	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3301      	adds	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	fa22 f303 	lsr.w	r3, r2, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f af1f 	bne.w	8007280 <HAL_GPIO_DeInit+0x14>
  }
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	58000080 	.word	0x58000080
 8007454:	58000400 	.word	0x58000400
 8007458:	58020000 	.word	0x58020000
 800745c:	58020400 	.word	0x58020400
 8007460:	58020800 	.word	0x58020800
 8007464:	58020c00 	.word	0x58020c00
 8007468:	58021000 	.word	0x58021000
 800746c:	58021400 	.word	0x58021400
 8007470:	58021800 	.word	0x58021800
 8007474:	58021c00 	.word	0x58021c00
 8007478:	58022000 	.word	0x58022000
 800747c:	58022400 	.word	0x58022400

08007480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	807b      	strh	r3, [r7, #2]
 800748c:	4613      	mov	r3, r2
 800748e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007490:	787b      	ldrb	r3, [r7, #1]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007496:	887a      	ldrh	r2, [r7, #2]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800749c:	e003      	b.n	80074a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800749e:	887b      	ldrh	r3, [r7, #2]
 80074a0:	041a      	lsls	r2, r3, #16
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	619a      	str	r2, [r3, #24]
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e07f      	b.n	80075c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fa fe38 	bl	8002150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	; 0x24
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d107      	bne.n	800752e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	e006      	b.n	800753c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800753a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d104      	bne.n	800754e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800754c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6859      	ldr	r1, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <HAL_I2C_Init+0x11c>)
 800755a:	430b      	orrs	r3, r1
 800755c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800756c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	ea42 0103 	orr.w	r1, r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	021a      	lsls	r2, r3, #8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69d9      	ldr	r1, [r3, #28]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1a      	ldr	r2, [r3, #32]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	02008000 	.word	0x02008000

080075d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e021      	b.n	800762a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2224      	movs	r2, #36	; 0x24
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fa fea0 	bl	8002344 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	817b      	strh	r3, [r7, #10]
 8007644:	4613      	mov	r3, r2
 8007646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b20      	cmp	r3, #32
 8007652:	f040 80da 	bne.w	800780a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_I2C_Master_Transmit+0x30>
 8007660:	2302      	movs	r3, #2
 8007662:	e0d3      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800766c:	f7fc f8c0 	bl	80037f0 <HAL_GetTick>
 8007670:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	2319      	movs	r3, #25
 8007678:	2201      	movs	r2, #1
 800767a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fc56 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0be      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2210      	movs	r2, #16
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	893a      	ldrh	r2, [r7, #8]
 80076ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2bff      	cmp	r3, #255	; 0xff
 80076be:	d90e      	bls.n	80076de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	22ff      	movs	r2, #255	; 0xff
 80076c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	8979      	ldrh	r1, [r7, #10]
 80076ce:	4b51      	ldr	r3, [pc, #324]	; (8007814 <HAL_I2C_Master_Transmit+0x1e0>)
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fdb8 	bl	800824c <I2C_TransferConfig>
 80076dc:	e06c      	b.n	80077b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	8979      	ldrh	r1, [r7, #10]
 80076f0:	4b48      	ldr	r3, [pc, #288]	; (8007814 <HAL_I2C_Master_Transmit+0x1e0>)
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fda7 	bl	800824c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80076fe:	e05b      	b.n	80077b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	6a39      	ldr	r1, [r7, #32]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fc53 	bl	8007fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e07b      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d034      	beq.n	80077b8 <HAL_I2C_Master_Transmit+0x184>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d130      	bne.n	80077b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	2200      	movs	r2, #0
 800775e:	2180      	movs	r1, #128	; 0x80
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fbe5 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e04d      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007774:	b29b      	uxth	r3, r3
 8007776:	2bff      	cmp	r3, #255	; 0xff
 8007778:	d90e      	bls.n	8007798 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	22ff      	movs	r2, #255	; 0xff
 800777e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007784:	b2da      	uxtb	r2, r3
 8007786:	8979      	ldrh	r1, [r7, #10]
 8007788:	2300      	movs	r3, #0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fd5b 	bl	800824c <I2C_TransferConfig>
 8007796:	e00f      	b.n	80077b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	8979      	ldrh	r1, [r7, #10]
 80077aa:	2300      	movs	r3, #0
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fd4a 	bl	800824c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d19e      	bne.n	8007700 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	6a39      	ldr	r1, [r7, #32]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fc32 	bl	8008030 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e01a      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2220      	movs	r2, #32
 80077dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6859      	ldr	r1, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <HAL_I2C_Master_Transmit+0x1e4>)
 80077ea:	400b      	ands	r3, r1
 80077ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	80002000 	.word	0x80002000
 8007818:	fe00e800 	.word	0xfe00e800

0800781c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	461a      	mov	r2, r3
 8007828:	460b      	mov	r3, r1
 800782a:	817b      	strh	r3, [r7, #10]
 800782c:	4613      	mov	r3, r2
 800782e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	f040 80db 	bne.w	80079f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_I2C_Master_Receive+0x30>
 8007848:	2302      	movs	r3, #2
 800784a:	e0d4      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007854:	f7fb ffcc 	bl	80037f0 <HAL_GetTick>
 8007858:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2319      	movs	r3, #25
 8007860:	2201      	movs	r2, #1
 8007862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fb62 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e0bf      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2222      	movs	r2, #34	; 0x22
 800787a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2210      	movs	r2, #16
 8007882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	893a      	ldrh	r2, [r7, #8]
 8007896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2bff      	cmp	r3, #255	; 0xff
 80078a6:	d90e      	bls.n	80078c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22ff      	movs	r2, #255	; 0xff
 80078ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	8979      	ldrh	r1, [r7, #10]
 80078b6:	4b52      	ldr	r3, [pc, #328]	; (8007a00 <HAL_I2C_Master_Receive+0x1e4>)
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fcc4 	bl	800824c <I2C_TransferConfig>
 80078c4:	e06d      	b.n	80079a2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	8979      	ldrh	r1, [r7, #10]
 80078d8:	4b49      	ldr	r3, [pc, #292]	; (8007a00 <HAL_I2C_Master_Receive+0x1e4>)
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fcb3 	bl	800824c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80078e6:	e05c      	b.n	80079a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	6a39      	ldr	r1, [r7, #32]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fbdb 	bl	80080a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e07c      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d034      	beq.n	80079a2 <HAL_I2C_Master_Receive+0x186>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	d130      	bne.n	80079a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	2200      	movs	r2, #0
 8007948:	2180      	movs	r1, #128	; 0x80
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 faf0 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e04d      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d90e      	bls.n	8007982 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796e:	b2da      	uxtb	r2, r3
 8007970:	8979      	ldrh	r1, [r7, #10]
 8007972:	2300      	movs	r3, #0
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fc66 	bl	800824c <I2C_TransferConfig>
 8007980:	e00f      	b.n	80079a2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	b2da      	uxtb	r2, r3
 8007992:	8979      	ldrh	r1, [r7, #10]
 8007994:	2300      	movs	r3, #0
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fc55 	bl	800824c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d19d      	bne.n	80078e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	6a39      	ldr	r1, [r7, #32]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 fb3d 	bl	8008030 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e01a      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2220      	movs	r2, #32
 80079c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <HAL_I2C_Master_Receive+0x1e8>)
 80079d4:	400b      	ands	r3, r1
 80079d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	80002400 	.word	0x80002400
 8007a04:	fe00e800 	.word	0xfe00e800

08007a08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	4608      	mov	r0, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	817b      	strh	r3, [r7, #10]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	813b      	strh	r3, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	f040 80f9 	bne.w	8007c22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_I2C_Mem_Write+0x34>
 8007a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d105      	bne.n	8007a48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0ed      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_I2C_Mem_Write+0x4e>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e0e6      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fb fec7 	bl	80037f0 <HAL_GetTick>
 8007a62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2319      	movs	r3, #25
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fa5d 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0d1      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2221      	movs	r2, #33	; 0x21
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2240      	movs	r2, #64	; 0x40
 8007a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a3a      	ldr	r2, [r7, #32]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007aa8:	88f8      	ldrh	r0, [r7, #6]
 8007aaa:	893a      	ldrh	r2, [r7, #8]
 8007aac:	8979      	ldrh	r1, [r7, #10]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f9c1 	bl	8007e40 <I2C_RequestMemoryWrite>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0a9      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2bff      	cmp	r3, #255	; 0xff
 8007ad8:	d90e      	bls.n	8007af8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	22ff      	movs	r2, #255	; 0xff
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	8979      	ldrh	r1, [r7, #10]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fbab 	bl	800824c <I2C_TransferConfig>
 8007af6:	e00f      	b.n	8007b18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	8979      	ldrh	r1, [r7, #10]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fb9a 	bl	800824c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fa47 	bl	8007fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e07b      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d034      	beq.n	8007bd0 <HAL_I2C_Mem_Write+0x1c8>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d130      	bne.n	8007bd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2200      	movs	r2, #0
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f9d9 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e04d      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2bff      	cmp	r3, #255	; 0xff
 8007b90:	d90e      	bls.n	8007bb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fb4f 	bl	800824c <I2C_TransferConfig>
 8007bae:	e00f      	b.n	8007bd0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	8979      	ldrh	r1, [r7, #10]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fb3e 	bl	800824c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d19e      	bne.n	8007b18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fa26 	bl	8008030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e01a      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6859      	ldr	r1, [r3, #4]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <HAL_I2C_Mem_Write+0x224>)
 8007c02:	400b      	ands	r3, r1
 8007c04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e000      	b.n	8007c24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	fe00e800 	.word	0xfe00e800

08007c30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	; 0x28
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	f040 80ef 	bne.w	8007e30 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c60:	d101      	bne.n	8007c66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
 8007c64:	e0e5      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_I2C_IsDeviceReady+0x44>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0de      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2224      	movs	r2, #36	; 0x24
 8007c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d105      	bne.n	8007c9e <HAL_I2C_IsDeviceReady+0x6e>
 8007c92:	897b      	ldrh	r3, [r7, #10]
 8007c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c98:	4b68      	ldr	r3, [pc, #416]	; (8007e3c <HAL_I2C_IsDeviceReady+0x20c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	e004      	b.n	8007ca8 <HAL_I2C_IsDeviceReady+0x78>
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007cae:	f7fb fd9f 	bl	80037f0 <HAL_GetTick>
 8007cb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	bf0c      	ite	eq
 8007cd8:	2301      	moveq	r3, #1
 8007cda:	2300      	movne	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007ce0:	e034      	b.n	8007d4c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce8:	d01a      	beq.n	8007d20 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fb fd81 	bl	80037f0 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <HAL_I2C_IsDeviceReady+0xd0>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10f      	bne.n	8007d20 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0c:	f043 0220 	orr.w	r2, r3, #32
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e088      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	bf0c      	ite	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	2300      	movne	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	bf0c      	ite	eq
 8007d44:	2301      	moveq	r3, #1
 8007d46:	2300      	movne	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d4c:	7ffb      	ldrb	r3, [r7, #31]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <HAL_I2C_IsDeviceReady+0x128>
 8007d52:	7fbb      	ldrb	r3, [r7, #30]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0c4      	beq.n	8007ce2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d01a      	beq.n	8007d9c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2120      	movs	r1, #32
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f8dd 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e058      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2220      	movs	r2, #32
 8007d86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e04a      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	2120      	movs	r1, #32
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f8c2 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e03d      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2210      	movs	r2, #16
 8007dbc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d118      	bne.n	8007e00 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ddc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2120      	movs	r1, #32
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f8a1 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e01c      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3301      	adds	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	f63f af3d 	bhi.w	8007c8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	02002000 	.word	0x02002000

08007e40 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	4608      	mov	r0, r1
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	817b      	strh	r3, [r7, #10]
 8007e52:	460b      	mov	r3, r1
 8007e54:	813b      	strh	r3, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	8979      	ldrh	r1, [r7, #10]
 8007e60:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <I2C_RequestMemoryWrite+0xa4>)
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f9ef 	bl	800824c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f89c 	bl	8007fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e02c      	b.n	8007edc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d105      	bne.n	8007e94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	629a      	str	r2, [r3, #40]	; 0x28
 8007e92:	e015      	b.n	8007ec0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e94:	893b      	ldrh	r3, [r7, #8]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f882 	bl	8007fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e012      	b.n	8007edc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2180      	movs	r1, #128	; 0x80
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f830 	bl	8007f30 <I2C_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	80002000 	.word	0x80002000

08007ee8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d103      	bne.n	8007f06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d007      	beq.n	8007f24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	619a      	str	r2, [r3, #24]
  }
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f40:	e022      	b.n	8007f88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f48:	d01e      	beq.n	8007f88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4a:	f7fb fc51 	bl	80037f0 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d302      	bcc.n	8007f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d113      	bne.n	8007f88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e00f      	b.n	8007fa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4013      	ands	r3, r2
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	bf0c      	ite	eq
 8007f98:	2301      	moveq	r3, #1
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d0cd      	beq.n	8007f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fbc:	e02c      	b.n	8008018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f8dc 	bl	8008180 <I2C_IsAcknowledgeFailed>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e02a      	b.n	8008028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd8:	d01e      	beq.n	8008018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fda:	f7fb fc09 	bl	80037f0 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d113      	bne.n	8008018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	f043 0220 	orr.w	r2, r3, #32
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e007      	b.n	8008028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d1cb      	bne.n	8007fbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800803c:	e028      	b.n	8008090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f89c 	bl	8008180 <I2C_IsAcknowledgeFailed>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e026      	b.n	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008052:	f7fb fbcd 	bl	80037f0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d113      	bne.n	8008090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	f043 0220 	orr.w	r2, r3, #32
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e007      	b.n	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b20      	cmp	r3, #32
 800809c:	d1cf      	bne.n	800803e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080b4:	e055      	b.n	8008162 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f860 	bl	8008180 <I2C_IsAcknowledgeFailed>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e053      	b.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d129      	bne.n	800812c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d105      	bne.n	80080f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e03f      	b.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2220      	movs	r2, #32
 80080f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6859      	ldr	r1, [r3, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4b1d      	ldr	r3, [pc, #116]	; (800817c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008106:	400b      	ands	r3, r1
 8008108:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e022      	b.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812c:	f7fb fb60 	bl	80037f0 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	429a      	cmp	r2, r3
 800813a:	d302      	bcc.n	8008142 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10f      	bne.n	8008162 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e007      	b.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b04      	cmp	r3, #4
 800816e:	d1a2      	bne.n	80080b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	fe00e800 	.word	0xfe00e800

08008180 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b10      	cmp	r3, #16
 8008198:	d151      	bne.n	800823e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800819a:	e022      	b.n	80081e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a2:	d01e      	beq.n	80081e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a4:	f7fb fb24 	bl	80037f0 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <I2C_IsAcknowledgeFailed+0x3a>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d113      	bne.n	80081e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081be:	f043 0220 	orr.w	r2, r3, #32
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e02e      	b.n	8008240 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d1d5      	bne.n	800819c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2210      	movs	r2, #16
 80081f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2220      	movs	r2, #32
 80081fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fe71 	bl	8007ee8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6859      	ldr	r1, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <I2C_IsAcknowledgeFailed+0xc8>)
 8008212:	400b      	ands	r3, r1
 8008214:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821a:	f043 0204 	orr.w	r2, r3, #4
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	fe00e800 	.word	0xfe00e800

0800824c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	817b      	strh	r3, [r7, #10]
 800825a:	4613      	mov	r3, r2
 800825c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	0d5b      	lsrs	r3, r3, #21
 8008268:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <I2C_TransferConfig+0x58>)
 800826e:	430b      	orrs	r3, r1
 8008270:	43db      	mvns	r3, r3
 8008272:	ea02 0103 	and.w	r1, r2, r3
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800827c:	7a7b      	ldrb	r3, [r7, #9]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	431a      	orrs	r2, r3
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	431a      	orrs	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	03ff63ff 	.word	0x03ff63ff

080082a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d138      	bne.n	8008330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e032      	b.n	8008332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2224      	movs	r2, #36	; 0x24
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0201 	bic.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6819      	ldr	r1, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e000      	b.n	8008332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008330:	2302      	movs	r3, #2
  }
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b20      	cmp	r3, #32
 8008352:	d139      	bne.n	80083c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800835e:	2302      	movs	r3, #2
 8008360:	e033      	b.n	80083ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2224      	movs	r2, #36	; 0x24
 800836e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e000      	b.n	80083ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
  }
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e0:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80083e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083e6:	4a0c      	ldr	r2, [pc, #48]	; (8008418 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80083e8:	f043 0302 	orr.w	r3, r3, #2
 80083ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80083f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	4906      	ldr	r1, [pc, #24]	; (800841c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4313      	orrs	r3, r2
 8008408:	604b      	str	r3, [r1, #4]
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
 800841c:	58000400 	.word	0x58000400

08008420 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <HAL_PWREx_ConfigSupply+0x70>)
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b04      	cmp	r3, #4
 8008432:	d00a      	beq.n	800844a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008434:	4b16      	ldr	r3, [pc, #88]	; (8008490 <HAL_PWREx_ConfigSupply+0x70>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d001      	beq.n	8008446 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e01f      	b.n	8008486 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e01d      	b.n	8008486 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <HAL_PWREx_ConfigSupply+0x70>)
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f023 0207 	bic.w	r2, r3, #7
 8008452:	490f      	ldr	r1, [pc, #60]	; (8008490 <HAL_PWREx_ConfigSupply+0x70>)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4313      	orrs	r3, r2
 8008458:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800845a:	f7fb f9c9 	bl	80037f0 <HAL_GetTick>
 800845e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008460:	e009      	b.n	8008476 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008462:	f7fb f9c5 	bl	80037f0 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008470:	d901      	bls.n	8008476 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e007      	b.n	8008486 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_PWREx_ConfigSupply+0x70>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008482:	d1ee      	bne.n	8008462 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	58024800 	.word	0x58024800

08008494 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800849c:	f7fb f9a8 	bl	80037f0 <HAL_GetTick>
 80084a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e05f      	b.n	800856c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fa fa3b 	bl	8002934 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80084be:	f241 3188 	movw	r1, #5000	; 0x1388
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f85a 	bl	800857c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	021a      	lsls	r2, r3, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	2120      	movs	r1, #32
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f852 	bl	8008598 <QSPI_WaitFlagStateUntilTimeout>
 80084f4:	4603      	mov	r3, r0
 80084f6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d135      	bne.n	800856a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_QSPI_Init+0xe0>)
 8008506:	4013      	ands	r3, r2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6852      	ldr	r2, [r2, #4]
 800850c:	0611      	lsls	r1, r2, #24
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68d2      	ldr	r2, [r2, #12]
 8008512:	4311      	orrs	r1, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	69d2      	ldr	r2, [r2, #28]
 8008518:	4311      	orrs	r1, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6a12      	ldr	r2, [r2, #32]
 800851e:	4311      	orrs	r1, r2
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	430b      	orrs	r3, r1
 8008526:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <HAL_QSPI_Init+0xe4>)
 8008530:	4013      	ands	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6912      	ldr	r2, [r2, #16]
 8008536:	0411      	lsls	r1, r2, #16
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6952      	ldr	r2, [r2, #20]
 800853c:	4311      	orrs	r1, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6992      	ldr	r2, [r2, #24]
 8008542:	4311      	orrs	r1, r2
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	430b      	orrs	r3, r1
 800854a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800856a:	7afb      	ldrb	r3, [r7, #11]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	00ffff2f 	.word	0x00ffff2f
 8008578:	ffe0f8fe 	.word	0xffe0f8fe

0800857c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80085a8:	e01a      	b.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b0:	d016      	beq.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b2:	f7fb f91d 	bl	80037f0 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d302      	bcc.n	80085c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2204      	movs	r2, #4
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	f043 0201 	orr.w	r2, r3, #1
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e00e      	b.n	80085fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d1d6      	bne.n	80085aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e3fd      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8087 	beq.w	8008736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008628:	4b99      	ldr	r3, [pc, #612]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008632:	4b97      	ldr	r3, [pc, #604]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	2b10      	cmp	r3, #16
 800863c:	d007      	beq.n	800864e <HAL_RCC_OscConfig+0x46>
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	2b18      	cmp	r3, #24
 8008642:	d110      	bne.n	8008666 <HAL_RCC_OscConfig+0x5e>
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d10b      	bne.n	8008666 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800864e:	4b90      	ldr	r3, [pc, #576]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d06c      	beq.n	8008734 <HAL_RCC_OscConfig+0x12c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d168      	bne.n	8008734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e3d7      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866e:	d106      	bne.n	800867e <HAL_RCC_OscConfig+0x76>
 8008670:	4b87      	ldr	r3, [pc, #540]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a86      	ldr	r2, [pc, #536]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e02e      	b.n	80086dc <HAL_RCC_OscConfig+0xd4>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10c      	bne.n	80086a0 <HAL_RCC_OscConfig+0x98>
 8008686:	4b82      	ldr	r3, [pc, #520]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a81      	ldr	r2, [pc, #516]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800868c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	4b7f      	ldr	r3, [pc, #508]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a7e      	ldr	r2, [pc, #504]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e01d      	b.n	80086dc <HAL_RCC_OscConfig+0xd4>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a8:	d10c      	bne.n	80086c4 <HAL_RCC_OscConfig+0xbc>
 80086aa:	4b79      	ldr	r3, [pc, #484]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a78      	ldr	r2, [pc, #480]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	4b76      	ldr	r3, [pc, #472]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a75      	ldr	r2, [pc, #468]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	e00b      	b.n	80086dc <HAL_RCC_OscConfig+0xd4>
 80086c4:	4b72      	ldr	r3, [pc, #456]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a71      	ldr	r2, [pc, #452]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	4b6f      	ldr	r3, [pc, #444]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a6e      	ldr	r2, [pc, #440]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80086d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d013      	beq.n	800870c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fb f884 	bl	80037f0 <HAL_GetTick>
 80086e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fb f880 	bl	80037f0 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	; 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e38b      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086fe:	4b64      	ldr	r3, [pc, #400]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCC_OscConfig+0xe4>
 800870a:	e014      	b.n	8008736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fb f870 	bl	80037f0 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008714:	f7fb f86c 	bl	80037f0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b64      	cmp	r3, #100	; 0x64
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e377      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008726:	4b5a      	ldr	r3, [pc, #360]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x10c>
 8008732:	e000      	b.n	8008736 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80ae 	beq.w	80088a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008744:	4b52      	ldr	r3, [pc, #328]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800874e:	4b50      	ldr	r3, [pc, #320]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_RCC_OscConfig+0x162>
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	2b18      	cmp	r3, #24
 800875e:	d13a      	bne.n	80087d6 <HAL_RCC_OscConfig+0x1ce>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d135      	bne.n	80087d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800876a:	4b49      	ldr	r3, [pc, #292]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <HAL_RCC_OscConfig+0x17a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e349      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008782:	f7fb f865 	bl	8003850 <HAL_GetREVID>
 8008786:	4603      	mov	r3, r0
 8008788:	f241 0203 	movw	r2, #4099	; 0x1003
 800878c:	4293      	cmp	r3, r2
 800878e:	d817      	bhi.n	80087c0 <HAL_RCC_OscConfig+0x1b8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	d108      	bne.n	80087aa <HAL_RCC_OscConfig+0x1a2>
 8008798:	4b3d      	ldr	r3, [pc, #244]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087a0:	4a3b      	ldr	r2, [pc, #236]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087a8:	e07a      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087aa:	4b39      	ldr	r3, [pc, #228]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	031b      	lsls	r3, r3, #12
 80087b8:	4935      	ldr	r1, [pc, #212]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087be:	e06f      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c0:	4b33      	ldr	r3, [pc, #204]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	4930      	ldr	r1, [pc, #192]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087d4:	e064      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d045      	beq.n	800886a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087de:	4b2c      	ldr	r3, [pc, #176]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f023 0219 	bic.w	r2, r3, #25
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	4929      	ldr	r1, [pc, #164]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fa fffe 	bl	80037f0 <HAL_GetTick>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087f8:	f7fa fffa 	bl	80037f0 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e305      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800880a:	4b21      	ldr	r3, [pc, #132]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008816:	f7fb f81b 	bl	8003850 <HAL_GetREVID>
 800881a:	4603      	mov	r3, r0
 800881c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008820:	4293      	cmp	r3, r2
 8008822:	d817      	bhi.n	8008854 <HAL_RCC_OscConfig+0x24c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d108      	bne.n	800883e <HAL_RCC_OscConfig+0x236>
 800882c:	4b18      	ldr	r3, [pc, #96]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008834:	4a16      	ldr	r2, [pc, #88]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883a:	6053      	str	r3, [r2, #4]
 800883c:	e030      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	031b      	lsls	r3, r3, #12
 800884c:	4910      	ldr	r1, [pc, #64]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800884e:	4313      	orrs	r3, r2
 8008850:	604b      	str	r3, [r1, #4]
 8008852:	e025      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	061b      	lsls	r3, r3, #24
 8008862:	490b      	ldr	r1, [pc, #44]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008864:	4313      	orrs	r3, r2
 8008866:	604b      	str	r3, [r1, #4]
 8008868:	e01a      	b.n	80088a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a08      	ldr	r2, [pc, #32]	; (8008890 <HAL_RCC_OscConfig+0x288>)
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008876:	f7fa ffbb 	bl	80037f0 <HAL_GetTick>
 800887a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800887c:	e00a      	b.n	8008894 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800887e:	f7fa ffb7 	bl	80037f0 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d903      	bls.n	8008894 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e2c2      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
 8008890:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008894:	4b94      	ldr	r3, [pc, #592]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1ee      	bne.n	800887e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80a9 	beq.w	8008a00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ae:	4b8e      	ldr	r3, [pc, #568]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088b8:	4b8b      	ldr	r3, [pc, #556]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d007      	beq.n	80088d4 <HAL_RCC_OscConfig+0x2cc>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b18      	cmp	r3, #24
 80088c8:	d13a      	bne.n	8008940 <HAL_RCC_OscConfig+0x338>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d135      	bne.n	8008940 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088d4:	4b84      	ldr	r3, [pc, #528]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCC_OscConfig+0x2e4>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	d001      	beq.n	80088ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e294      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088ec:	f7fa ffb0 	bl	8003850 <HAL_GetREVID>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d817      	bhi.n	800892a <HAL_RCC_OscConfig+0x322>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d108      	bne.n	8008914 <HAL_RCC_OscConfig+0x30c>
 8008902:	4b79      	ldr	r3, [pc, #484]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800890a:	4a77      	ldr	r2, [pc, #476]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800890c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008910:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008912:	e075      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008914:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	069b      	lsls	r3, r3, #26
 8008922:	4971      	ldr	r1, [pc, #452]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008924:	4313      	orrs	r3, r2
 8008926:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008928:	e06a      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800892a:	4b6f      	ldr	r3, [pc, #444]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	061b      	lsls	r3, r3, #24
 8008938:	496b      	ldr	r1, [pc, #428]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800893a:	4313      	orrs	r3, r2
 800893c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800893e:	e05f      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d042      	beq.n	80089ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008948:	4b67      	ldr	r3, [pc, #412]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a66      	ldr	r2, [pc, #408]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008954:	f7fa ff4c 	bl	80037f0 <HAL_GetTick>
 8008958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800895c:	f7fa ff48 	bl	80037f0 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e253      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800896e:	4b5e      	ldr	r3, [pc, #376]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f0      	beq.n	800895c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800897a:	f7fa ff69 	bl	8003850 <HAL_GetREVID>
 800897e:	4603      	mov	r3, r0
 8008980:	f241 0203 	movw	r2, #4099	; 0x1003
 8008984:	4293      	cmp	r3, r2
 8008986:	d817      	bhi.n	80089b8 <HAL_RCC_OscConfig+0x3b0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2b20      	cmp	r3, #32
 800898e:	d108      	bne.n	80089a2 <HAL_RCC_OscConfig+0x39a>
 8008990:	4b55      	ldr	r3, [pc, #340]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008998:	4a53      	ldr	r2, [pc, #332]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 800899a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899e:	6053      	str	r3, [r2, #4]
 80089a0:	e02e      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
 80089a2:	4b51      	ldr	r3, [pc, #324]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	069b      	lsls	r3, r3, #26
 80089b0:	494d      	ldr	r1, [pc, #308]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	604b      	str	r3, [r1, #4]
 80089b6:	e023      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
 80089b8:	4b4b      	ldr	r3, [pc, #300]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	4948      	ldr	r1, [pc, #288]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60cb      	str	r3, [r1, #12]
 80089cc:	e018      	b.n	8008a00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089ce:	4b46      	ldr	r3, [pc, #280]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a45      	ldr	r2, [pc, #276]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089da:	f7fa ff09 	bl	80037f0 <HAL_GetTick>
 80089de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089e0:	e008      	b.n	80089f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089e2:	f7fa ff05 	bl	80037f0 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e210      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089f4:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f0      	bne.n	80089e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d036      	beq.n	8008a7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d019      	beq.n	8008a48 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a14:	4b34      	ldr	r3, [pc, #208]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a18:	4a33      	ldr	r2, [pc, #204]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a20:	f7fa fee6 	bl	80037f0 <HAL_GetTick>
 8008a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a28:	f7fa fee2 	bl	80037f0 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e1ed      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a3a:	4b2b      	ldr	r3, [pc, #172]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0x420>
 8008a46:	e018      	b.n	8008a7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4c:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a54:	f7fa fecc 	bl	80037f0 <HAL_GetTick>
 8008a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a5c:	f7fa fec8 	bl	80037f0 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e1d3      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1f0      	bne.n	8008a5c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d038      	beq.n	8008af8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d019      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a8e:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a9a:	f7fa fea9 	bl	80037f0 <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008aa2:	f7fa fea5 	bl	80037f0 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e1b0      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f0      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x49a>
 8008ac0:	e01a      	b.n	8008af8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <HAL_RCC_OscConfig+0x4e0>)
 8008ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008acc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ace:	f7fa fe8f 	bl	80037f0 <HAL_GetTick>
 8008ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ad4:	e00a      	b.n	8008aec <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ad6:	f7fa fe8b 	bl	80037f0 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d903      	bls.n	8008aec <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e196      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
 8008ae8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aec:	4b99      	ldr	r3, [pc, #612]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1ee      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8081 	beq.w	8008c08 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b06:	4b94      	ldr	r3, [pc, #592]	; (8008d58 <HAL_RCC_OscConfig+0x750>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a93      	ldr	r2, [pc, #588]	; (8008d58 <HAL_RCC_OscConfig+0x750>)
 8008b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b12:	f7fa fe6d 	bl	80037f0 <HAL_GetTick>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b18:	e008      	b.n	8008b2c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b1a:	f7fa fe69 	bl	80037f0 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b64      	cmp	r3, #100	; 0x64
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e174      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b2c:	4b8a      	ldr	r3, [pc, #552]	; (8008d58 <HAL_RCC_OscConfig+0x750>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f0      	beq.n	8008b1a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d106      	bne.n	8008b4e <HAL_RCC_OscConfig+0x546>
 8008b40:	4b84      	ldr	r3, [pc, #528]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b44:	4a83      	ldr	r2, [pc, #524]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b4c:	e02d      	b.n	8008baa <HAL_RCC_OscConfig+0x5a2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <HAL_RCC_OscConfig+0x568>
 8008b56:	4b7f      	ldr	r3, [pc, #508]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	4a7e      	ldr	r2, [pc, #504]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	6713      	str	r3, [r2, #112]	; 0x70
 8008b62:	4b7c      	ldr	r3, [pc, #496]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b66:	4a7b      	ldr	r2, [pc, #492]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b68:	f023 0304 	bic.w	r3, r3, #4
 8008b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b6e:	e01c      	b.n	8008baa <HAL_RCC_OscConfig+0x5a2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b05      	cmp	r3, #5
 8008b76:	d10c      	bne.n	8008b92 <HAL_RCC_OscConfig+0x58a>
 8008b78:	4b76      	ldr	r3, [pc, #472]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7c:	4a75      	ldr	r2, [pc, #468]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b7e:	f043 0304 	orr.w	r3, r3, #4
 8008b82:	6713      	str	r3, [r2, #112]	; 0x70
 8008b84:	4b73      	ldr	r3, [pc, #460]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	4a72      	ldr	r2, [pc, #456]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b90:	e00b      	b.n	8008baa <HAL_RCC_OscConfig+0x5a2>
 8008b92:	4b70      	ldr	r3, [pc, #448]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	4a6f      	ldr	r2, [pc, #444]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b9e:	4b6d      	ldr	r3, [pc, #436]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	4a6c      	ldr	r2, [pc, #432]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008ba4:	f023 0304 	bic.w	r3, r3, #4
 8008ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d015      	beq.n	8008bde <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb2:	f7fa fe1d 	bl	80037f0 <HAL_GetTick>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bb8:	e00a      	b.n	8008bd0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bba:	f7fa fe19 	bl	80037f0 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e122      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bd0:	4b60      	ldr	r3, [pc, #384]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0ee      	beq.n	8008bba <HAL_RCC_OscConfig+0x5b2>
 8008bdc:	e014      	b.n	8008c08 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bde:	f7fa fe07 	bl	80037f0 <HAL_GetTick>
 8008be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008be4:	e00a      	b.n	8008bfc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008be6:	f7fa fe03 	bl	80037f0 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e10c      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bfc:	4b55      	ldr	r3, [pc, #340]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1ee      	bne.n	8008be6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8101 	beq.w	8008e14 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c12:	4b50      	ldr	r3, [pc, #320]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1a:	2b18      	cmp	r3, #24
 8008c1c:	f000 80bc 	beq.w	8008d98 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	f040 809d 	bne.w	8008d64 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a49      	ldr	r2, [pc, #292]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c36:	f7fa fddb 	bl	80037f0 <HAL_GetTick>
 8008c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c3c:	e008      	b.n	8008c50 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c3e:	f7fa fdd7 	bl	80037f0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e0e2      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c50:	4b40      	ldr	r3, [pc, #256]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f0      	bne.n	8008c3e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c5c:	4b3d      	ldr	r3, [pc, #244]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <HAL_RCC_OscConfig+0x754>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c6c:	0112      	lsls	r2, r2, #4
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	4938      	ldr	r1, [pc, #224]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	628b      	str	r3, [r1, #40]	; 0x28
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c84:	3b01      	subs	r3, #1
 8008c86:	025b      	lsls	r3, r3, #9
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	3b01      	subs	r3, #1
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	061b      	lsls	r3, r3, #24
 8008ca2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ca6:	492b      	ldr	r1, [pc, #172]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008cac:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4a28      	ldr	r2, [pc, #160]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cb2:	f023 0301 	bic.w	r3, r3, #1
 8008cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cb8:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <HAL_RCC_OscConfig+0x758>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cc4:	00d2      	lsls	r2, r2, #3
 8008cc6:	4923      	ldr	r1, [pc, #140]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ccc:	4b21      	ldr	r3, [pc, #132]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	f023 020c 	bic.w	r2, r3, #12
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	491e      	ldr	r1, [pc, #120]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cde:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	f023 0202 	bic.w	r2, r3, #2
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cea:	491a      	ldr	r1, [pc, #104]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cf0:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a14      	ldr	r2, [pc, #80]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a11      	ldr	r2, [pc, #68]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a0e      	ldr	r2, [pc, #56]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a0b      	ldr	r2, [pc, #44]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2c:	f7fa fd60 	bl	80037f0 <HAL_GetTick>
 8008d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d32:	e008      	b.n	8008d46 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d34:	f7fa fd5c 	bl	80037f0 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e067      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <HAL_RCC_OscConfig+0x74c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0f0      	beq.n	8008d34 <HAL_RCC_OscConfig+0x72c>
 8008d52:	e05f      	b.n	8008e14 <HAL_RCC_OscConfig+0x80c>
 8008d54:	58024400 	.word	0x58024400
 8008d58:	58024800 	.word	0x58024800
 8008d5c:	fffffc0c 	.word	0xfffffc0c
 8008d60:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d64:	4b2e      	ldr	r3, [pc, #184]	; (8008e20 <HAL_RCC_OscConfig+0x818>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a2d      	ldr	r2, [pc, #180]	; (8008e20 <HAL_RCC_OscConfig+0x818>)
 8008d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fa fd3e 	bl	80037f0 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d78:	f7fa fd3a 	bl	80037f0 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e045      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d8a:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <HAL_RCC_OscConfig+0x818>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x770>
 8008d96:	e03d      	b.n	8008e14 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d98:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <HAL_RCC_OscConfig+0x818>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d9e:	4b20      	ldr	r3, [pc, #128]	; (8008e20 <HAL_RCC_OscConfig+0x818>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d031      	beq.n	8008e10 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f003 0203 	and.w	r2, r3, #3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d12a      	bne.n	8008e10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	091b      	lsrs	r3, r3, #4
 8008dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d122      	bne.n	8008e10 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d11a      	bne.n	8008e10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0a5b      	lsrs	r3, r3, #9
 8008dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d111      	bne.n	8008e10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	0c1b      	lsrs	r3, r3, #16
 8008df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d108      	bne.n	8008e10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	0e1b      	lsrs	r3, r3, #24
 8008e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d001      	beq.n	8008e14 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3730      	adds	r7, #48	; 0x30
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	58024400 	.word	0x58024400

08008e24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e19c      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e38:	4b8a      	ldr	r3, [pc, #552]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d910      	bls.n	8008e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e46:	4b87      	ldr	r3, [pc, #540]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f023 020f 	bic.w	r2, r3, #15
 8008e4e:	4985      	ldr	r1, [pc, #532]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e56:	4b83      	ldr	r3, [pc, #524]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d001      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e184      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691a      	ldr	r2, [r3, #16]
 8008e78:	4b7b      	ldr	r3, [pc, #492]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d908      	bls.n	8008e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e84:	4b78      	ldr	r3, [pc, #480]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	4975      	ldr	r1, [pc, #468]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d010      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695a      	ldr	r2, [r3, #20]
 8008ea6:	4b70      	ldr	r3, [pc, #448]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d908      	bls.n	8008ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eb2:	4b6d      	ldr	r3, [pc, #436]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	496a      	ldr	r1, [pc, #424]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d010      	beq.n	8008ef2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	4b64      	ldr	r3, [pc, #400]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d908      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ee0:	4b61      	ldr	r3, [pc, #388]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	495e      	ldr	r1, [pc, #376]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d010      	beq.n	8008f20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69da      	ldr	r2, [r3, #28]
 8008f02:	4b59      	ldr	r3, [pc, #356]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d908      	bls.n	8008f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f0e:	4b56      	ldr	r3, [pc, #344]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	4953      	ldr	r1, [pc, #332]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d010      	beq.n	8008f4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	4b4d      	ldr	r3, [pc, #308]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d908      	bls.n	8008f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f3c:	4b4a      	ldr	r3, [pc, #296]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f023 020f 	bic.w	r2, r3, #15
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	4947      	ldr	r1, [pc, #284]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d055      	beq.n	8009006 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f5a:	4b43      	ldr	r3, [pc, #268]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4940      	ldr	r1, [pc, #256]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d107      	bne.n	8008f84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f74:	4b3c      	ldr	r3, [pc, #240]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d121      	bne.n	8008fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0f6      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d107      	bne.n	8008f9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f8c:	4b36      	ldr	r3, [pc, #216]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d115      	bne.n	8008fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e0ea      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d107      	bne.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fa4:	4b30      	ldr	r3, [pc, #192]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0de      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb4:	4b2c      	ldr	r3, [pc, #176]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0d6      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fc4:	4b28      	ldr	r3, [pc, #160]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f023 0207 	bic.w	r2, r3, #7
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4925      	ldr	r1, [pc, #148]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd6:	f7fa fc0b 	bl	80037f0 <HAL_GetTick>
 8008fda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fdc:	e00a      	b.n	8008ff4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fde:	f7fa fc07 	bl	80037f0 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e0be      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ff4:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	429a      	cmp	r2, r3
 8009004:	d1eb      	bne.n	8008fde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	429a      	cmp	r2, r3
 8009020:	d208      	bcs.n	8009034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f023 020f 	bic.w	r2, r3, #15
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	490e      	ldr	r1, [pc, #56]	; (8009068 <HAL_RCC_ClockConfig+0x244>)
 8009030:	4313      	orrs	r3, r2
 8009032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009034:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d214      	bcs.n	800906c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009042:	4b08      	ldr	r3, [pc, #32]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f023 020f 	bic.w	r2, r3, #15
 800904a:	4906      	ldr	r1, [pc, #24]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	4313      	orrs	r3, r2
 8009050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <HAL_RCC_ClockConfig+0x240>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 030f 	and.w	r3, r3, #15
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d005      	beq.n	800906c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e086      	b.n	8009172 <HAL_RCC_ClockConfig+0x34e>
 8009064:	52002000 	.word	0x52002000
 8009068:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d010      	beq.n	800909a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	4b3f      	ldr	r3, [pc, #252]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009084:	429a      	cmp	r2, r3
 8009086:	d208      	bcs.n	800909a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009088:	4b3c      	ldr	r3, [pc, #240]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4939      	ldr	r1, [pc, #228]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 8009096:	4313      	orrs	r3, r2
 8009098:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	4b34      	ldr	r3, [pc, #208]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d208      	bcs.n	80090c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090b6:	4b31      	ldr	r3, [pc, #196]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	492e      	ldr	r1, [pc, #184]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d010      	beq.n	80090f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	4b28      	ldr	r3, [pc, #160]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d208      	bcs.n	80090f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090e4:	4b25      	ldr	r3, [pc, #148]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	4922      	ldr	r1, [pc, #136]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d010      	beq.n	8009124 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	69da      	ldr	r2, [r3, #28]
 8009106:	4b1d      	ldr	r3, [pc, #116]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800910e:	429a      	cmp	r2, r3
 8009110:	d208      	bcs.n	8009124 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4917      	ldr	r1, [pc, #92]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 8009120:	4313      	orrs	r3, r2
 8009122:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009124:	f000 f834 	bl	8009190 <HAL_RCC_GetSysClockFreq>
 8009128:	4602      	mov	r2, r0
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	0a1b      	lsrs	r3, r3, #8
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	4912      	ldr	r1, [pc, #72]	; (8009180 <HAL_RCC_ClockConfig+0x35c>)
 8009136:	5ccb      	ldrb	r3, [r1, r3]
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
 8009140:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009142:	4b0e      	ldr	r3, [pc, #56]	; (800917c <HAL_RCC_ClockConfig+0x358>)
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	4a0d      	ldr	r2, [pc, #52]	; (8009180 <HAL_RCC_ClockConfig+0x35c>)
 800914c:	5cd3      	ldrb	r3, [r2, r3]
 800914e:	f003 031f 	and.w	r3, r3, #31
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	fa22 f303 	lsr.w	r3, r2, r3
 8009158:	4a0a      	ldr	r2, [pc, #40]	; (8009184 <HAL_RCC_ClockConfig+0x360>)
 800915a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800915c:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <HAL_RCC_ClockConfig+0x364>)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <HAL_RCC_ClockConfig+0x368>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f9 ff0e 	bl	8002f88 <HAL_InitTick>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	58024400 	.word	0x58024400
 8009180:	080148d4 	.word	0x080148d4
 8009184:	24000004 	.word	0x24000004
 8009188:	24000000 	.word	0x24000000
 800918c:	24000008 	.word	0x24000008

08009190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	; 0x24
 8009194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009196:	4bb3      	ldr	r3, [pc, #716]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800919e:	2b18      	cmp	r3, #24
 80091a0:	f200 8155 	bhi.w	800944e <HAL_RCC_GetSysClockFreq+0x2be>
 80091a4:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	08009211 	.word	0x08009211
 80091b0:	0800944f 	.word	0x0800944f
 80091b4:	0800944f 	.word	0x0800944f
 80091b8:	0800944f 	.word	0x0800944f
 80091bc:	0800944f 	.word	0x0800944f
 80091c0:	0800944f 	.word	0x0800944f
 80091c4:	0800944f 	.word	0x0800944f
 80091c8:	0800944f 	.word	0x0800944f
 80091cc:	08009237 	.word	0x08009237
 80091d0:	0800944f 	.word	0x0800944f
 80091d4:	0800944f 	.word	0x0800944f
 80091d8:	0800944f 	.word	0x0800944f
 80091dc:	0800944f 	.word	0x0800944f
 80091e0:	0800944f 	.word	0x0800944f
 80091e4:	0800944f 	.word	0x0800944f
 80091e8:	0800944f 	.word	0x0800944f
 80091ec:	0800923d 	.word	0x0800923d
 80091f0:	0800944f 	.word	0x0800944f
 80091f4:	0800944f 	.word	0x0800944f
 80091f8:	0800944f 	.word	0x0800944f
 80091fc:	0800944f 	.word	0x0800944f
 8009200:	0800944f 	.word	0x0800944f
 8009204:	0800944f 	.word	0x0800944f
 8009208:	0800944f 	.word	0x0800944f
 800920c:	08009243 	.word	0x08009243
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009210:	4b94      	ldr	r3, [pc, #592]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d009      	beq.n	8009230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800921c:	4b91      	ldr	r3, [pc, #580]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	08db      	lsrs	r3, r3, #3
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	4a90      	ldr	r2, [pc, #576]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800922e:	e111      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009230:	4b8d      	ldr	r3, [pc, #564]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009232:	61bb      	str	r3, [r7, #24]
    break;
 8009234:	e10e      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009236:	4b8d      	ldr	r3, [pc, #564]	; (800946c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009238:	61bb      	str	r3, [r7, #24]
    break;
 800923a:	e10b      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800923c:	4b8c      	ldr	r3, [pc, #560]	; (8009470 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800923e:	61bb      	str	r3, [r7, #24]
    break;
 8009240:	e108      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009242:	4b88      	ldr	r3, [pc, #544]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800924c:	4b85      	ldr	r3, [pc, #532]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	091b      	lsrs	r3, r3, #4
 8009252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009256:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009258:	4b82      	ldr	r3, [pc, #520]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009262:	4b80      	ldr	r3, [pc, #512]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	08db      	lsrs	r3, r3, #3
 8009268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80e1 	beq.w	8009448 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b02      	cmp	r3, #2
 800928a:	f000 8083 	beq.w	8009394 <HAL_RCC_GetSysClockFreq+0x204>
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b02      	cmp	r3, #2
 8009292:	f200 80a1 	bhi.w	80093d8 <HAL_RCC_GetSysClockFreq+0x248>
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_RCC_GetSysClockFreq+0x114>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d056      	beq.n	8009350 <HAL_RCC_GetSysClockFreq+0x1c0>
 80092a2:	e099      	b.n	80093d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a4:	4b6f      	ldr	r3, [pc, #444]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d02d      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092b0:	4b6c      	ldr	r3, [pc, #432]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	4a6b      	ldr	r2, [pc, #428]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092da:	4b62      	ldr	r3, [pc, #392]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009306:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800930a:	e087      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e8>
 800931a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931e:	4b51      	ldr	r3, [pc, #324]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009332:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934e:	e065      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800947c <HAL_RCC_GetSysClockFreq+0x2ec>
 800935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009362:	4b40      	ldr	r3, [pc, #256]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009372:	ed97 6a02 	vldr	s12, [r7, #8]
 8009376:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2e4>
 800937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009392:	e043      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009480 <HAL_RCC_GetSysClockFreq+0x2f0>
 80093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a6:	4b2f      	ldr	r3, [pc, #188]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d6:	e021      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800947c <HAL_RCC_GetSysClockFreq+0x2ec>
 80093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ea:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80093fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800941c:	4b11      	ldr	r3, [pc, #68]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	0a5b      	lsrs	r3, r3, #9
 8009422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009426:	3301      	adds	r3, #1
 8009428:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009434:	edd7 6a07 	vldr	s13, [r7, #28]
 8009438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800943c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009440:	ee17 3a90 	vmov	r3, s15
 8009444:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009446:	e005      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	61bb      	str	r3, [r7, #24]
    break;
 800944c:	e002      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009450:	61bb      	str	r3, [r7, #24]
    break;
 8009452:	bf00      	nop
  }

  return sysclockfreq;
 8009454:	69bb      	ldr	r3, [r7, #24]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3724      	adds	r7, #36	; 0x24
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	58024400 	.word	0x58024400
 8009468:	03d09000 	.word	0x03d09000
 800946c:	003d0900 	.word	0x003d0900
 8009470:	02dc6c00 	.word	0x02dc6c00
 8009474:	46000000 	.word	0x46000000
 8009478:	4c742400 	.word	0x4c742400
 800947c:	4a742400 	.word	0x4a742400
 8009480:	4c371b00 	.word	0x4c371b00

08009484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800948a:	f7ff fe81 	bl	8009190 <HAL_RCC_GetSysClockFreq>
 800948e:	4602      	mov	r2, r0
 8009490:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	0a1b      	lsrs	r3, r3, #8
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	490f      	ldr	r1, [pc, #60]	; (80094d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800949c:	5ccb      	ldrb	r3, [r1, r3]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	fa22 f303 	lsr.w	r3, r2, r3
 80094a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094a8:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	4a09      	ldr	r2, [pc, #36]	; (80094d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80094b2:	5cd3      	ldrb	r3, [r2, r3]
 80094b4:	f003 031f 	and.w	r3, r3, #31
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	fa22 f303 	lsr.w	r3, r2, r3
 80094be:	4a07      	ldr	r2, [pc, #28]	; (80094dc <HAL_RCC_GetHCLKFreq+0x58>)
 80094c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094c2:	4a07      	ldr	r2, [pc, #28]	; (80094e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <HAL_RCC_GetHCLKFreq+0x58>)
 80094ca:	681b      	ldr	r3, [r3, #0]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58024400 	.word	0x58024400
 80094d8:	080148d4 	.word	0x080148d4
 80094dc:	24000004 	.word	0x24000004
 80094e0:	24000000 	.word	0x24000000

080094e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094e8:	f7ff ffcc 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b06      	ldr	r3, [pc, #24]	; (8009508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	091b      	lsrs	r3, r3, #4
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4904      	ldr	r1, [pc, #16]	; (800950c <HAL_RCC_GetPCLK1Freq+0x28>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009504:	4618      	mov	r0, r3
 8009506:	bd80      	pop	{r7, pc}
 8009508:	58024400 	.word	0x58024400
 800950c:	080148d4 	.word	0x080148d4

08009510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009514:	f7ff ffb6 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 8009518:	4602      	mov	r2, r0
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	4904      	ldr	r1, [pc, #16]	; (8009538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009526:	5ccb      	ldrb	r3, [r1, r3]
 8009528:	f003 031f 	and.w	r3, r3, #31
 800952c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009530:	4618      	mov	r0, r3
 8009532:	bd80      	pop	{r7, pc}
 8009534:	58024400 	.word	0x58024400
 8009538:	080148d4 	.word	0x080148d4

0800953c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	223f      	movs	r2, #63	; 0x3f
 800954a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	f003 0207 	and.w	r2, r3, #7
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009564:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009570:	4b11      	ldr	r3, [pc, #68]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800957c:	4b0e      	ldr	r3, [pc, #56]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009588:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009594:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <HAL_RCC_GetClockConfig+0x80>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 020f 	and.w	r2, r3, #15
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	58024400 	.word	0x58024400
 80095bc:	52002000 	.word	0x52002000

080095c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095c8:	2300      	movs	r3, #0
 80095ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095cc:	2300      	movs	r3, #0
 80095ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d03f      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095e4:	d02a      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80095e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095ea:	d824      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80095ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095f0:	d018      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095f6:	d81e      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80095fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009600:	d007      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009602:	e018      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009604:	4ba3      	ldr	r3, [pc, #652]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4aa2      	ldr	r2, [pc, #648]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800960a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009610:	e015      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	2102      	movs	r1, #2
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fff9 	bl	800b610 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009622:	e00c      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3324      	adds	r3, #36	; 0x24
 8009628:	2102      	movs	r1, #2
 800962a:	4618      	mov	r0, r3
 800962c:	f002 f8a2 	bl	800b774 <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009634:	e003      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
      break;
 800963a:	e000      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800963c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d109      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009644:	4b93      	ldr	r3, [pc, #588]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009650:	4990      	ldr	r1, [pc, #576]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009652:	4313      	orrs	r3, r2
 8009654:	650b      	str	r3, [r1, #80]	; 0x50
 8009656:	e001      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009664:	2b00      	cmp	r3, #0
 8009666:	d03d      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966c:	2b04      	cmp	r3, #4
 800966e:	d826      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009670:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	0800968d 	.word	0x0800968d
 800967c:	0800969b 	.word	0x0800969b
 8009680:	080096ad 	.word	0x080096ad
 8009684:	080096c5 	.word	0x080096c5
 8009688:	080096c5 	.word	0x080096c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968c:	4b81      	ldr	r3, [pc, #516]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	4a80      	ldr	r2, [pc, #512]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009698:	e015      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3304      	adds	r3, #4
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 ffb5 	bl	800b610 <RCCEx_PLL2_Config>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096aa:	e00c      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 f85e 	bl	800b774 <RCCEx_PLL3_Config>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096bc:	e003      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
      break;
 80096c2:	e000      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80096c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096cc:	4b71      	ldr	r3, [pc, #452]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d0:	f023 0207 	bic.w	r2, r3, #7
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d8:	496e      	ldr	r1, [pc, #440]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	650b      	str	r3, [r1, #80]	; 0x50
 80096de:	e001      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d042      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f8:	d02b      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80096fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fe:	d825      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009700:	2bc0      	cmp	r3, #192	; 0xc0
 8009702:	d028      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009704:	2bc0      	cmp	r3, #192	; 0xc0
 8009706:	d821      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d016      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800970c:	2b80      	cmp	r3, #128	; 0x80
 800970e:	d81d      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009714:	2b40      	cmp	r3, #64	; 0x40
 8009716:	d007      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009718:	e018      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971a:	4b5e      	ldr	r3, [pc, #376]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	4a5d      	ldr	r2, [pc, #372]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009726:	e017      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f001 ff6e 	bl	800b610 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009738:	e00e      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3324      	adds	r3, #36	; 0x24
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f002 f817 	bl	800b774 <RCCEx_PLL3_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800974a:	e005      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800975e:	4b4d      	ldr	r3, [pc, #308]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009762:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976a:	494a      	ldr	r1, [pc, #296]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800976c:	4313      	orrs	r3, r2
 800976e:	650b      	str	r3, [r1, #80]	; 0x50
 8009770:	e001      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800977e:	2b00      	cmp	r3, #0
 8009780:	d049      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800978c:	d030      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800978e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009792:	d82a      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009798:	d02c      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800979a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800979e:	d824      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a4:	d018      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80097a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097aa:	d81e      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80097b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097b4:	d007      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097b6:	e018      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b8:	4b36      	ldr	r3, [pc, #216]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a35      	ldr	r2, [pc, #212]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097c4:	e017      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3304      	adds	r3, #4
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 ff1f 	bl	800b610 <RCCEx_PLL2_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097d6:	e00e      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	3324      	adds	r3, #36	; 0x24
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f001 ffc8 	bl	800b774 <RCCEx_PLL3_Config>
 80097e4:	4603      	mov	r3, r0
 80097e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097e8:	e005      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	75fb      	strb	r3, [r7, #23]
      break;
 80097ee:	e002      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80097f0:	bf00      	nop
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80097f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097fc:	4b25      	ldr	r3, [pc, #148]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800980a:	4922      	ldr	r1, [pc, #136]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800980c:	4313      	orrs	r3, r2
 800980e:	658b      	str	r3, [r1, #88]	; 0x58
 8009810:	e001      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800981e:	2b00      	cmp	r3, #0
 8009820:	d04b      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800982c:	d030      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800982e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009832:	d82a      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009838:	d02e      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800983a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800983e:	d824      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009844:	d018      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800984a:	d81e      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009854:	d007      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009856:	e018      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009858:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a0d      	ldr	r2, [pc, #52]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800985e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009864:	e019      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fecf 	bl	800b610 <RCCEx_PLL2_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009876:	e010      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3324      	adds	r3, #36	; 0x24
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 ff78 	bl	800b774 <RCCEx_PLL3_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009888:	e007      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	e004      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009894:	58024400 	.word	0x58024400
      break;
 8009898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098a0:	4b99      	ldr	r3, [pc, #612]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098ae:	4996      	ldr	r1, [pc, #600]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	658b      	str	r3, [r1, #88]	; 0x58
 80098b4:	e001      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d032      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ca:	2b30      	cmp	r3, #48	; 0x30
 80098cc:	d01c      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80098ce:	2b30      	cmp	r3, #48	; 0x30
 80098d0:	d817      	bhi.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d00c      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d813      	bhi.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d016      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80098de:	2b10      	cmp	r3, #16
 80098e0:	d10f      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e2:	4b89      	ldr	r3, [pc, #548]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	4a88      	ldr	r2, [pc, #544]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80098ee:	e00e      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	2102      	movs	r1, #2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f001 fe8a 	bl	800b610 <RCCEx_PLL2_Config>
 80098fc:	4603      	mov	r3, r0
 80098fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009900:	e005      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
      break;
 8009906:	e002      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800990c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d109      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009914:	4b7c      	ldr	r3, [pc, #496]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009920:	4979      	ldr	r1, [pc, #484]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009922:	4313      	orrs	r3, r2
 8009924:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009926:	e001      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d047      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800993c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009940:	d030      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009946:	d82a      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800994c:	d02c      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800994e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009952:	d824      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009958:	d018      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800995a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800995e:	d81e      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009968:	d007      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800996a:	e018      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996c:	4b66      	ldr	r3, [pc, #408]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009978:	e017      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fe45 	bl	800b610 <RCCEx_PLL2_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800998a:	e00e      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f001 feee 	bl	800b774 <RCCEx_PLL3_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800999c:	e005      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
      break;
 80099a2:	e002      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80099a4:	bf00      	nop
 80099a6:	e000      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80099a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099b0:	4b55      	ldr	r3, [pc, #340]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099bc:	4952      	ldr	r1, [pc, #328]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	650b      	str	r3, [r1, #80]	; 0x50
 80099c2:	e001      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d049      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099dc:	d02e      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80099de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099e2:	d828      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099e8:	d02a      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80099ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099ee:	d822      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099f4:	d026      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80099f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099fa:	d81c      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a00:	d010      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a06:	d816      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d01d      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a10:	d111      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3304      	adds	r3, #4
 8009a16:	2101      	movs	r1, #1
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 fdf9 	bl	800b610 <RCCEx_PLL2_Config>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a22:	e012      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3324      	adds	r3, #36	; 0x24
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fea2 	bl	800b774 <RCCEx_PLL3_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a34:	e009      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	75fb      	strb	r3, [r7, #23]
      break;
 8009a3a:	e006      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a3c:	bf00      	nop
 8009a3e:	e004      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a40:	bf00      	nop
 8009a42:	e002      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d109      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a50:	4b2d      	ldr	r3, [pc, #180]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5c:	492a      	ldr	r1, [pc, #168]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	650b      	str	r3, [r1, #80]	; 0x50
 8009a62:	e001      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d04d      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a7e:	d02e      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a84:	d828      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8a:	d02a      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a90:	d822      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a96:	d026      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a9c:	d81c      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa2:	d010      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa8:	d816      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01d      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ab2:	d111      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fda8 	bl	800b610 <RCCEx_PLL2_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ac4:	e012      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3324      	adds	r3, #36	; 0x24
 8009aca:	2101      	movs	r1, #1
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 fe51 	bl	800b774 <RCCEx_PLL3_Config>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ad6:	e009      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
      break;
 8009adc:	e006      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009ade:	bf00      	nop
 8009ae0:	e004      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009ae2:	bf00      	nop
 8009ae4:	e002      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009ae6:	bf00      	nop
 8009ae8:	e000      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b00:	4901      	ldr	r1, [pc, #4]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	658b      	str	r3, [r1, #88]	; 0x58
 8009b06:	e003      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02f      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b24:	d00e      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b2a:	d814      	bhi.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d015      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b34:	d10f      	bne.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b36:	4baf      	ldr	r3, [pc, #700]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	4aae      	ldr	r2, [pc, #696]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b42:	e00c      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3304      	adds	r3, #4
 8009b48:	2101      	movs	r1, #1
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 fd60 	bl	800b610 <RCCEx_PLL2_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b54:	e003      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5a:	e000      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d109      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b64:	4ba3      	ldr	r3, [pc, #652]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b70:	49a0      	ldr	r1, [pc, #640]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	650b      	str	r3, [r1, #80]	; 0x50
 8009b76:	e001      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d032      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d81b      	bhi.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bcf 	.word	0x08009bcf
 8009b9c:	08009ba9 	.word	0x08009ba9
 8009ba0:	08009bb7 	.word	0x08009bb7
 8009ba4:	08009bcf 	.word	0x08009bcf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba8:	4b92      	ldr	r3, [pc, #584]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	4a91      	ldr	r2, [pc, #580]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009bb4:	e00c      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	2102      	movs	r1, #2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 fd27 	bl	800b610 <RCCEx_PLL2_Config>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009bc6:	e003      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
      break;
 8009bcc:	e000      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bd6:	4b87      	ldr	r3, [pc, #540]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bda:	f023 0203 	bic.w	r2, r3, #3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be2:	4984      	ldr	r1, [pc, #528]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009be8:	e001      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8086 	beq.w	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bfc:	4b7e      	ldr	r3, [pc, #504]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a7d      	ldr	r2, [pc, #500]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c08:	f7f9 fdf2 	bl	80037f0 <HAL_GetTick>
 8009c0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c0e:	e009      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c10:	f7f9 fdee 	bl	80037f0 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b64      	cmp	r3, #100	; 0x64
 8009c1c:	d902      	bls.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	75fb      	strb	r3, [r7, #23]
        break;
 8009c22:	e005      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c24:	4b74      	ldr	r3, [pc, #464]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0ef      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d166      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c36:	4b6f      	ldr	r3, [pc, #444]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c40:	4053      	eors	r3, r2
 8009c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d013      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c4a:	4b6a      	ldr	r3, [pc, #424]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c54:	4b67      	ldr	r3, [pc, #412]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	4a66      	ldr	r2, [pc, #408]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c60:	4b64      	ldr	r3, [pc, #400]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	4a63      	ldr	r2, [pc, #396]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c6c:	4a61      	ldr	r2, [pc, #388]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7c:	d115      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7e:	f7f9 fdb7 	bl	80037f0 <HAL_GetTick>
 8009c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c84:	e00b      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c86:	f7f9 fdb3 	bl	80037f0 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d902      	bls.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	75fb      	strb	r3, [r7, #23]
            break;
 8009c9c:	e005      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9e:	4b55      	ldr	r3, [pc, #340]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0ed      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d126      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cbe:	d10d      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009cc0:	4b4c      	ldr	r3, [pc, #304]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cce:	0919      	lsrs	r1, r3, #4
 8009cd0:	4b4a      	ldr	r3, [pc, #296]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009cd2:	400b      	ands	r3, r1
 8009cd4:	4947      	ldr	r1, [pc, #284]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	610b      	str	r3, [r1, #16]
 8009cda:	e005      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009cdc:	4b45      	ldr	r3, [pc, #276]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	4a44      	ldr	r2, [pc, #272]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ce2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ce6:	6113      	str	r3, [r2, #16]
 8009ce8:	4b42      	ldr	r3, [pc, #264]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cf6:	493f      	ldr	r1, [pc, #252]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	670b      	str	r3, [r1, #112]	; 0x70
 8009cfc:	e004      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	75bb      	strb	r3, [r7, #22]
 8009d02:	e001      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8085 	beq.w	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d1a:	2b28      	cmp	r3, #40	; 0x28
 8009d1c:	d866      	bhi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009e01 	.word	0x08009e01
 8009d28:	08009ded 	.word	0x08009ded
 8009d2c:	08009ded 	.word	0x08009ded
 8009d30:	08009ded 	.word	0x08009ded
 8009d34:	08009ded 	.word	0x08009ded
 8009d38:	08009ded 	.word	0x08009ded
 8009d3c:	08009ded 	.word	0x08009ded
 8009d40:	08009ded 	.word	0x08009ded
 8009d44:	08009dc9 	.word	0x08009dc9
 8009d48:	08009ded 	.word	0x08009ded
 8009d4c:	08009ded 	.word	0x08009ded
 8009d50:	08009ded 	.word	0x08009ded
 8009d54:	08009ded 	.word	0x08009ded
 8009d58:	08009ded 	.word	0x08009ded
 8009d5c:	08009ded 	.word	0x08009ded
 8009d60:	08009ded 	.word	0x08009ded
 8009d64:	08009ddb 	.word	0x08009ddb
 8009d68:	08009ded 	.word	0x08009ded
 8009d6c:	08009ded 	.word	0x08009ded
 8009d70:	08009ded 	.word	0x08009ded
 8009d74:	08009ded 	.word	0x08009ded
 8009d78:	08009ded 	.word	0x08009ded
 8009d7c:	08009ded 	.word	0x08009ded
 8009d80:	08009ded 	.word	0x08009ded
 8009d84:	08009e01 	.word	0x08009e01
 8009d88:	08009ded 	.word	0x08009ded
 8009d8c:	08009ded 	.word	0x08009ded
 8009d90:	08009ded 	.word	0x08009ded
 8009d94:	08009ded 	.word	0x08009ded
 8009d98:	08009ded 	.word	0x08009ded
 8009d9c:	08009ded 	.word	0x08009ded
 8009da0:	08009ded 	.word	0x08009ded
 8009da4:	08009e01 	.word	0x08009e01
 8009da8:	08009ded 	.word	0x08009ded
 8009dac:	08009ded 	.word	0x08009ded
 8009db0:	08009ded 	.word	0x08009ded
 8009db4:	08009ded 	.word	0x08009ded
 8009db8:	08009ded 	.word	0x08009ded
 8009dbc:	08009ded 	.word	0x08009ded
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	08009e01 	.word	0x08009e01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 fc1e 	bl	800b610 <RCCEx_PLL2_Config>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009dd8:	e013      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3324      	adds	r3, #36	; 0x24
 8009dde:	2101      	movs	r1, #1
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 fcc7 	bl	800b774 <RCCEx_PLL3_Config>
 8009de6:	4603      	mov	r3, r0
 8009de8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009dea:	e00a      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
      break;
 8009df0:	e007      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009df2:	bf00      	nop
 8009df4:	58024400 	.word	0x58024400
 8009df8:	58024800 	.word	0x58024800
 8009dfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8009e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d109      	bne.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e08:	4b96      	ldr	r3, [pc, #600]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e14:	4993      	ldr	r1, [pc, #588]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	654b      	str	r3, [r1, #84]	; 0x54
 8009e1a:	e001      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d038      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	d821      	bhi.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009e34:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009e7f 	.word	0x08009e7f
 8009e40:	08009e55 	.word	0x08009e55
 8009e44:	08009e67 	.word	0x08009e67
 8009e48:	08009e7f 	.word	0x08009e7f
 8009e4c:	08009e7f 	.word	0x08009e7f
 8009e50:	08009e7f 	.word	0x08009e7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3304      	adds	r3, #4
 8009e58:	2101      	movs	r1, #1
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 fbd8 	bl	800b610 <RCCEx_PLL2_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e64:	e00c      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3324      	adds	r3, #36	; 0x24
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 fc81 	bl	800b774 <RCCEx_PLL3_Config>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e76:	e003      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7c:	e000      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e86:	4b77      	ldr	r3, [pc, #476]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f023 0207 	bic.w	r2, r3, #7
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e92:	4974      	ldr	r1, [pc, #464]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	654b      	str	r3, [r1, #84]	; 0x54
 8009e98:	e001      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d03a      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb0:	2b05      	cmp	r3, #5
 8009eb2:	d821      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009eb4:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009eff 	.word	0x08009eff
 8009ec0:	08009ed5 	.word	0x08009ed5
 8009ec4:	08009ee7 	.word	0x08009ee7
 8009ec8:	08009eff 	.word	0x08009eff
 8009ecc:	08009eff 	.word	0x08009eff
 8009ed0:	08009eff 	.word	0x08009eff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	2101      	movs	r1, #1
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 fb98 	bl	800b610 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ee4:	e00c      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3324      	adds	r3, #36	; 0x24
 8009eea:	2101      	movs	r1, #1
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fc41 	bl	800b774 <RCCEx_PLL3_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ef6:	e003      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
      break;
 8009efc:	e000      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10a      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f06:	4b57      	ldr	r3, [pc, #348]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0a:	f023 0207 	bic.w	r2, r3, #7
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f14:	4953      	ldr	r1, [pc, #332]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	658b      	str	r3, [r1, #88]	; 0x58
 8009f1a:	e001      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d04b      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f36:	d02e      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f3c:	d828      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f42:	d02a      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f48:	d822      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f4e:	d026      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f54:	d81c      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f5a:	d010      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f60:	d816      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d01d      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f6a:	d111      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fb4c 	bl	800b610 <RCCEx_PLL2_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f7c:	e012      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3324      	adds	r3, #36	; 0x24
 8009f82:	2102      	movs	r1, #2
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 fbf5 	bl	800b774 <RCCEx_PLL3_Config>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f8e:	e009      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	75fb      	strb	r3, [r7, #23]
      break;
 8009f94:	e006      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f96:	bf00      	nop
 8009f98:	e004      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f9a:	bf00      	nop
 8009f9c:	e002      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f9e:	bf00      	nop
 8009fa0:	e000      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009faa:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb8:	492a      	ldr	r1, [pc, #168]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	654b      	str	r3, [r1, #84]	; 0x54
 8009fbe:	e001      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d04d      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fda:	d02e      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009fdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fe0:	d828      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fe6:	d02a      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fec:	d822      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ff2:	d026      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ff8:	d81c      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ffe:	d010      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a004:	d816      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01d      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a00e:	d111      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	2100      	movs	r1, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f001 fafa 	bl	800b610 <RCCEx_PLL2_Config>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a020:	e012      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3324      	adds	r3, #36	; 0x24
 800a026:	2102      	movs	r1, #2
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 fba3 	bl	800b774 <RCCEx_PLL3_Config>
 800a02e:	4603      	mov	r3, r0
 800a030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a032:	e009      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	75fb      	strb	r3, [r7, #23]
      break;
 800a038:	e006      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a03a:	bf00      	nop
 800a03c:	e004      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a03e:	bf00      	nop
 800a040:	e002      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a042:	bf00      	nop
 800a044:	e000      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a046:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10c      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a052:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a05c:	4901      	ldr	r1, [pc, #4]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	658b      	str	r3, [r1, #88]	; 0x58
 800a062:	e003      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d04b      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a07e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a082:	d02e      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a084:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a088:	d828      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a08e:	d02a      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a094:	d822      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a09a:	d026      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a09c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0a0:	d81c      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a6:	d010      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a0a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ac:	d816      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01d      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a0b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b6:	d111      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 faa6 	bl	800b610 <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0c8:	e012      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3324      	adds	r3, #36	; 0x24
 800a0ce:	2102      	movs	r1, #2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fb4f 	bl	800b774 <RCCEx_PLL3_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0da:	e009      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e004      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0f6:	4b9d      	ldr	r3, [pc, #628]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a104:	4999      	ldr	r1, [pc, #612]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a106:	4313      	orrs	r3, r2
 800a108:	658b      	str	r3, [r1, #88]	; 0x58
 800a10a:	e001      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01a      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	d10a      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3324      	adds	r3, #36	; 0x24
 800a12c:	2102      	movs	r1, #2
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fb20 	bl	800b774 <RCCEx_PLL3_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a13e:	4b8b      	ldr	r3, [pc, #556]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a142:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a14c:	4987      	ldr	r1, [pc, #540]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01a      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a168:	d10a      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3324      	adds	r3, #36	; 0x24
 800a16e:	2102      	movs	r1, #2
 800a170:	4618      	mov	r0, r3
 800a172:	f001 faff 	bl	800b774 <RCCEx_PLL3_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a180:	4b7a      	ldr	r3, [pc, #488]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a18e:	4977      	ldr	r1, [pc, #476]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a190:	4313      	orrs	r3, r2
 800a192:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d034      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1aa:	d01d      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a1ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1b0:	d817      	bhi.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ba:	d009      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a1bc:	e011      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 fa23 	bl	800b610 <RCCEx_PLL2_Config>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1ce:	e00c      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	2102      	movs	r1, #2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 facc 	bl	800b774 <RCCEx_PLL3_Config>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1e0:	e003      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e6:	e000      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a1e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1f0:	4b5e      	ldr	r3, [pc, #376]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1fe:	495b      	ldr	r1, [pc, #364]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a200:	4313      	orrs	r3, r2
 800a202:	658b      	str	r3, [r1, #88]	; 0x58
 800a204:	e001      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d033      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a220:	d01c      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a226:	d816      	bhi.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a22c:	d003      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a22e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a232:	d007      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a234:	e00f      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a236:	4b4d      	ldr	r3, [pc, #308]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	4a4c      	ldr	r2, [pc, #304]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a242:	e00c      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3324      	adds	r3, #36	; 0x24
 800a248:	2101      	movs	r1, #1
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 fa92 	bl	800b774 <RCCEx_PLL3_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a254:	e003      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	75fb      	strb	r3, [r7, #23]
      break;
 800a25a:	e000      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a25c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a264:	4b41      	ldr	r3, [pc, #260]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a272:	493e      	ldr	r1, [pc, #248]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a274:	4313      	orrs	r3, r2
 800a276:	654b      	str	r3, [r1, #84]	; 0x54
 800a278:	e001      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d029      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a296:	d007      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a298:	e00f      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a29a:	4b34      	ldr	r3, [pc, #208]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29e:	4a33      	ldr	r2, [pc, #204]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2a6:	e00b      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 f9ae 	bl	800b610 <RCCEx_PLL2_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d109      	bne.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2c6:	4b29      	ldr	r3, [pc, #164]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d2:	4926      	ldr	r1, [pc, #152]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2d8:	e001      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3324      	adds	r3, #36	; 0x24
 800a2ee:	2102      	movs	r1, #2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 fa3f 	bl	800b774 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d033      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a314:	d017      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a31a:	d811      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a31c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a320:	d013      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a326:	d80b      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d010      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a330:	d106      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a332:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a33c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a33e:	e007      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	e004      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a346:	bf00      	nop
 800a348:	e002      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a34a:	bf00      	nop
 800a34c:	e000      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a34e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10c      	bne.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a362:	4902      	ldr	r1, [pc, #8]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a364:	4313      	orrs	r3, r2
 800a366:	654b      	str	r3, [r1, #84]	; 0x54
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a36a:	bf00      	nop
 800a36c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d008      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a380:	4b31      	ldr	r3, [pc, #196]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38c:	492e      	ldr	r1, [pc, #184]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d009      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a39e:	4b2a      	ldr	r3, [pc, #168]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3ac:	4926      	ldr	r1, [pc, #152]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d008      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3be:	4b22      	ldr	r3, [pc, #136]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ca:	491f      	ldr	r1, [pc, #124]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00d      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3dc:	4b1a      	ldr	r3, [pc, #104]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	4a19      	ldr	r2, [pc, #100]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3e6:	6113      	str	r3, [r2, #16]
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a3f2:	4915      	ldr	r1, [pc, #84]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da08      	bge.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a400:	4b11      	ldr	r3, [pc, #68]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a40c:	490e      	ldr	r1, [pc, #56]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a41e:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42c:	4906      	ldr	r1, [pc, #24]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a432:	7dbb      	ldrb	r3, [r7, #22]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	58024400 	.word	0x58024400

0800a44c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b090      	sub	sp, #64	; 0x40
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a45a:	f040 8095 	bne.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a45e:	4b97      	ldr	r3, [pc, #604]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	f200 8088 	bhi.w	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a48d 	.word	0x0800a48d
 800a47c:	0800a4b5 	.word	0x0800a4b5
 800a480:	0800a4dd 	.word	0x0800a4dd
 800a484:	0800a579 	.word	0x0800a579
 800a488:	0800a505 	.word	0x0800a505
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a48c:	4b8b      	ldr	r3, [pc, #556]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a498:	d108      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 ff64 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4a8:	f000 bc94 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b0:	f000 bc90 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4b4:	4b81      	ldr	r3, [pc, #516]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4c2:	f107 0318 	add.w	r3, r7, #24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fca8 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4d0:	f000 bc80 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	f000 bc7c 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4dc:	4b77      	ldr	r3, [pc, #476]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e8:	d108      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ea:	f107 030c 	add.w	r3, r7, #12
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fde8 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4f8:	f000 bc6c 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a500:	f000 bc68 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a504:	4b6d      	ldr	r3, [pc, #436]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a50c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a50e:	4b6b      	ldr	r3, [pc, #428]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b04      	cmp	r3, #4
 800a518:	d10c      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d109      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a520:	4b66      	ldr	r3, [pc, #408]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	08db      	lsrs	r3, r3, #3
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	4a65      	ldr	r2, [pc, #404]	; (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a52c:	fa22 f303 	lsr.w	r3, r2, r3
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a532:	e01f      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a534:	4b61      	ldr	r3, [pc, #388]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a540:	d106      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a548:	d102      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a54a:	4b5e      	ldr	r3, [pc, #376]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a54e:	e011      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a550:	4b5a      	ldr	r3, [pc, #360]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a55c:	d106      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a564:	d102      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a566:	4b58      	ldr	r3, [pc, #352]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a56a:	e003      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a570:	f000 bc30 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a574:	f000 bc2e 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a578:	4b54      	ldr	r3, [pc, #336]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a57c:	f000 bc2a 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a584:	f000 bc26 	b.w	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58e:	f040 809f 	bne.w	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a592:	4b4a      	ldr	r3, [pc, #296]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a596:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a2:	d04d      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5aa:	f200 8084 	bhi.w	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	2bc0      	cmp	r3, #192	; 0xc0
 800a5b2:	d07d      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5b8:	d87d      	bhi.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	2b80      	cmp	r3, #128	; 0x80
 800a5be:	d02d      	beq.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b80      	cmp	r3, #128	; 0x80
 800a5c4:	d877      	bhi.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d012      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a5d2:	e070      	b.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5d4:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e0:	d107      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fec0 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5f0:	e3f0      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f6:	e3ed      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5f8:	4b30      	ldr	r3, [pc, #192]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a604:	d107      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a606:	f107 0318 	add.w	r3, r7, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fc06 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a614:	e3de      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61a:	e3db      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a61c:	4b27      	ldr	r3, [pc, #156]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a628:	d107      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fd48 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a638:	e3cc      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63e:	e3c9      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a640:	4b1e      	ldr	r3, [pc, #120]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a648:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a64a:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b04      	cmp	r3, #4
 800a654:	d10c      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d109      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a65c:	4b17      	ldr	r3, [pc, #92]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	08db      	lsrs	r3, r3, #3
 800a662:	f003 0303 	and.w	r3, r3, #3
 800a666:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a668:	fa22 f303 	lsr.w	r3, r2, r3
 800a66c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a66e:	e01e      	b.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a670:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67c:	d106      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a684:	d102      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a68a:	e010      	b.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a698:	d106      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6a0:	d102      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6a2:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6a6:	e002      	b.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6ac:	e392      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6ae:	e391      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6b4:	e38e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ba:	e38b      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	03d09000 	.word	0x03d09000
 800a6c4:	003d0900 	.word	0x003d0900
 800a6c8:	02dc6c00 	.word	0x02dc6c00
 800a6cc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6d6:	f040 809c 	bne.w	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a6da:	4b9d      	ldr	r3, [pc, #628]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a6e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6ea:	d054      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6f2:	f200 808b 	bhi.w	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6fc:	f000 8083 	beq.w	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a706:	f200 8081 	bhi.w	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a710:	d02f      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a718:	d878      	bhi.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a726:	d012      	beq.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a728:	e070      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a72a:	4b89      	ldr	r3, [pc, #548]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a736:	d107      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fe15 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a746:	e345      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74c:	e342      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a74e:	4b80      	ldr	r3, [pc, #512]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a75a:	d107      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a75c:	f107 0318 	add.w	r3, r7, #24
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fb5b 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a76a:	e333      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a770:	e330      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a772:	4b77      	ldr	r3, [pc, #476]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77e:	d107      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a780:	f107 030c 	add.w	r3, r7, #12
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fc9d 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a78e:	e321      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a794:	e31e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a796:	4b6e      	ldr	r3, [pc, #440]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7a0:	4b6b      	ldr	r3, [pc, #428]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d10c      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7b2:	4b67      	ldr	r3, [pc, #412]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	08db      	lsrs	r3, r3, #3
 800a7b8:	f003 0303 	and.w	r3, r3, #3
 800a7bc:	4a65      	ldr	r2, [pc, #404]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a7be:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c4:	e01e      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7c6:	4b62      	ldr	r3, [pc, #392]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d2:	d106      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7da:	d102      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7dc:	4b5e      	ldr	r3, [pc, #376]	; (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e0:	e010      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7e2:	4b5b      	ldr	r3, [pc, #364]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7ee:	d106      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f6:	d102      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7f8:	4b58      	ldr	r3, [pc, #352]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7fc:	e002      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a802:	e2e7      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a804:	e2e6      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a806:	4b56      	ldr	r3, [pc, #344]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a80a:	e2e3      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a810:	e2e0      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a818:	f040 80a7 	bne.w	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a81c:	4b4c      	ldr	r3, [pc, #304]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a820:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a824:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a82c:	d055      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a834:	f200 8096 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a83e:	f000 8084 	beq.w	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a848:	f200 808c 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a852:	d030      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a85a:	f200 8083 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a86a:	d012      	beq.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a86c:	e07a      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a86e:	4b38      	ldr	r3, [pc, #224]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a87a:	d107      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a87c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fd73 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a88a:	e2a3      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a890:	e2a0      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a892:	4b2f      	ldr	r3, [pc, #188]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a89a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a89e:	d107      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a0:	f107 0318 	add.w	r3, r7, #24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fab9 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a8ae:	e291      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b4:	e28e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8b6:	4b26      	ldr	r3, [pc, #152]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c2:	d107      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c4:	f107 030c 	add.w	r3, r7, #12
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fbfb 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8d2:	e27f      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d8:	e27c      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8da:	4b1d      	ldr	r3, [pc, #116]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d10c      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d109      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8f6:	4b16      	ldr	r3, [pc, #88]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	08db      	lsrs	r3, r3, #3
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	4a14      	ldr	r2, [pc, #80]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a902:	fa22 f303 	lsr.w	r3, r2, r3
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a908:	e01e      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a90a:	4b11      	ldr	r3, [pc, #68]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a916:	d106      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a91e:	d102      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a920:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a924:	e010      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a926:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a932:	d106      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93a:	d102      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a940:	e002      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a946:	e245      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a948:	e244      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a94e:	e241      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a950:	58024400 	.word	0x58024400
 800a954:	03d09000 	.word	0x03d09000
 800a958:	003d0900 	.word	0x003d0900
 800a95c:	02dc6c00 	.word	0x02dc6c00
 800a960:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a968:	e234      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a970:	f040 809c 	bne.w	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a974:	4b9b      	ldr	r3, [pc, #620]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a978:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a97c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a984:	d054      	beq.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a98c:	f200 808b 	bhi.w	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a996:	f000 8083 	beq.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9a0:	f200 8081 	bhi.w	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9aa:	d02f      	beq.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9b2:	d878      	bhi.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c0:	d012      	beq.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a9c2:	e070      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9c4:	4b87      	ldr	r3, [pc, #540]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9d0:	d107      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fcc8 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9e0:	e1f8      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e6:	e1f5      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9e8:	4b7e      	ldr	r3, [pc, #504]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9f4:	d107      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9f6:	f107 0318 	add.w	r3, r7, #24
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fa0e 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa04:	e1e6      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa0a:	e1e3      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa0c:	4b75      	ldr	r3, [pc, #468]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa18:	d107      	bne.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fb50 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa28:	e1d4      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2e:	e1d1      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa30:	4b6c      	ldr	r3, [pc, #432]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa3a:	4b6a      	ldr	r3, [pc, #424]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0304 	and.w	r3, r3, #4
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	d10c      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d109      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa4c:	4b65      	ldr	r3, [pc, #404]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	08db      	lsrs	r3, r3, #3
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	4a64      	ldr	r2, [pc, #400]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa5e:	e01e      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa60:	4b60      	ldr	r3, [pc, #384]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6c:	d106      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa74:	d102      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa76:	4b5d      	ldr	r3, [pc, #372]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aa78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa7a:	e010      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa7c:	4b59      	ldr	r3, [pc, #356]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa88:	d106      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa90:	d102      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa92:	4b57      	ldr	r3, [pc, #348]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aa94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa96:	e002      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa9c:	e19a      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa9e:	e199      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aaa0:	4b54      	ldr	r3, [pc, #336]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa4:	e196      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaaa:	e193      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aab2:	d173      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aab4:	4b4b      	ldr	r3, [pc, #300]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aabc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac4:	d02f      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aacc:	d863      	bhi.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aada:	d012      	beq.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800aadc:	e05b      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aade:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaea:	d107      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaec:	f107 0318 	add.w	r3, r7, #24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f993 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aafa:	e16b      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab00:	e168      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab02:	4b38      	ldr	r3, [pc, #224]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab0e:	d107      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fad5 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab1e:	e159      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab24:	e156      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab26:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab30:	4b2c      	ldr	r3, [pc, #176]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d10c      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d109      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab42:	4b28      	ldr	r3, [pc, #160]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab54:	e01e      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab56:	4b23      	ldr	r3, [pc, #140]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab62:	d106      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab6a:	d102      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab6c:	4b1f      	ldr	r3, [pc, #124]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab70:	e010      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab72:	4b1c      	ldr	r3, [pc, #112]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab7e:	d106      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ab80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab86:	d102      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab88:	4b19      	ldr	r3, [pc, #100]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8c:	e002      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab92:	e11f      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab94:	e11e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab9a:	e11b      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba2:	d13e      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aba4:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abba:	d01d      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800abbc:	e02e      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abca:	d107      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fbcb 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800abda:	e0fb      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abe0:	e0f8      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
 800abe8:	03d09000 	.word	0x03d09000
 800abec:	003d0900 	.word	0x003d0900
 800abf0:	02dc6c00 	.word	0x02dc6c00
 800abf4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abf8:	4b79      	ldr	r3, [pc, #484]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac04:	d107      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f906 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac14:	e0de      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac1a:	e0db      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac20:	e0d8      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac28:	f040 8085 	bne.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ac2c:	4b6c      	ldr	r3, [pc, #432]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac30:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ac34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac3c:	d06b      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac44:	d874      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac4c:	d056      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac54:	d86c      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac5c:	d03b      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac64:	d864      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac6c:	d021      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac74:	d85c      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ac84:	e054      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac86:	f000 f8b3 	bl	800adf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac8a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ac8c:	e0a2      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac8e:	4b54      	ldr	r3, [pc, #336]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9c:	f107 0318 	add.w	r3, r7, #24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 f8bb 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acaa:	e093      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb0:	e090      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb2:	4b4b      	ldr	r3, [pc, #300]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f9fd 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acce:	e081      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd4:	e07e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acd6:	4b42      	ldr	r3, [pc, #264]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d109      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ace2:	4b3f      	ldr	r3, [pc, #252]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a3d      	ldr	r2, [pc, #244]	; (800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acf4:	e06e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acfa:	e06b      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acfc:	4b38      	ldr	r3, [pc, #224]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad08:	d102      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ad0a:	4b37      	ldr	r3, [pc, #220]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad0e:	e061      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad14:	e05e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad16:	4b32      	ldr	r3, [pc, #200]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad22:	d102      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ad24:	4b31      	ldr	r3, [pc, #196]	; (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad28:	e054      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad2e:	e051      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad34:	e04e      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad3c:	d148      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ad3e:	4b28      	ldr	r3, [pc, #160]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4e:	d02a      	beq.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad56:	d838      	bhi.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d004      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad64:	d00d      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ad66:	e030      	b.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad74:	d102      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad7a:	e02b      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad80:	e028      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad82:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fae9 	bl	800b36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad9e:	e019      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada4:	e016      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ada6:	4b0e      	ldr	r3, [pc, #56]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adb2:	d107      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb4:	f107 0318 	add.w	r3, r7, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f82f 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adc2:	e007      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc8:	e004      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adce:	e001      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800add4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800add6:	4618      	mov	r0, r3
 800add8:	3740      	adds	r7, #64	; 0x40
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	58024400 	.word	0x58024400
 800ade4:	03d09000 	.word	0x03d09000
 800ade8:	003d0900 	.word	0x003d0900
 800adec:	02dc6c00 	.word	0x02dc6c00

0800adf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adf4:	f7fe fb46 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 800adf8:	4602      	mov	r2, r0
 800adfa:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	091b      	lsrs	r3, r3, #4
 800ae00:	f003 0307 	and.w	r3, r3, #7
 800ae04:	4904      	ldr	r1, [pc, #16]	; (800ae18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae06:	5ccb      	ldrb	r3, [r1, r3]
 800ae08:	f003 031f 	and.w	r3, r3, #31
 800ae0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	58024400 	.word	0x58024400
 800ae18:	080148d4 	.word	0x080148d4

0800ae1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b089      	sub	sp, #36	; 0x24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae24:	4ba1      	ldr	r3, [pc, #644]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae28:	f003 0303 	and.w	r3, r3, #3
 800ae2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ae2e:	4b9f      	ldr	r3, [pc, #636]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae32:	0b1b      	lsrs	r3, r3, #12
 800ae34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae3a:	4b9c      	ldr	r3, [pc, #624]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3e:	091b      	lsrs	r3, r3, #4
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ae46:	4b99      	ldr	r3, [pc, #612]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4a:	08db      	lsrs	r3, r3, #3
 800ae4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	fb02 f303 	mul.w	r3, r2, r3
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8111 	beq.w	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	f000 8083 	beq.w	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	f200 80a1 	bhi.w	800afbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d056      	beq.n	800af34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae86:	e099      	b.n	800afbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae88:	4b88      	ldr	r3, [pc, #544]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0320 	and.w	r3, r3, #32
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d02d      	beq.n	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae94:	4b85      	ldr	r3, [pc, #532]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	08db      	lsrs	r3, r3, #3
 800ae9a:	f003 0303 	and.w	r3, r3, #3
 800ae9e:	4a84      	ldr	r2, [pc, #528]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
 800aea4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	ee07 3a90 	vmov	s15, r3
 800aeac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebe:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aece:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aeee:	e087      	b.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af02:	4b6a      	ldr	r3, [pc, #424]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af12:	ed97 6a03 	vldr	s12, [r7, #12]
 800af16:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af32:	e065      	b.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af46:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af56:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af76:	e043      	b.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8a:	4b48      	ldr	r3, [pc, #288]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afba:	e021      	b.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	4b37      	ldr	r3, [pc, #220]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afde:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800affe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	0a5b      	lsrs	r3, r3, #9
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b026:	ee17 2a90 	vmov	r2, s15
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b02e:	4b1f      	ldr	r3, [pc, #124]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	0c1b      	lsrs	r3, r3, #16
 800b034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b038:	ee07 3a90 	vmov	s15, r3
 800b03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b044:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b048:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b054:	ee17 2a90 	vmov	r2, s15
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b05c:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	0e1b      	lsrs	r3, r3, #24
 800b062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b072:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b076:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b07e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b082:	ee17 2a90 	vmov	r2, s15
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b08a:	e008      	b.n	800b09e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	609a      	str	r2, [r3, #8]
}
 800b09e:	bf00      	nop
 800b0a0:	3724      	adds	r7, #36	; 0x24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	58024400 	.word	0x58024400
 800b0b0:	03d09000 	.word	0x03d09000
 800b0b4:	46000000 	.word	0x46000000
 800b0b8:	4c742400 	.word	0x4c742400
 800b0bc:	4a742400 	.word	0x4a742400
 800b0c0:	4c371b00 	.word	0x4c371b00

0800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b089      	sub	sp, #36	; 0x24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0cc:	4ba1      	ldr	r3, [pc, #644]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b0d6:	4b9f      	ldr	r3, [pc, #636]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0da:	0d1b      	lsrs	r3, r3, #20
 800b0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0e2:	4b9c      	ldr	r3, [pc, #624]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b0ee:	4b99      	ldr	r3, [pc, #612]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	08db      	lsrs	r3, r3, #3
 800b0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	fb02 f303 	mul.w	r3, r2, r3
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8111 	beq.w	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b02      	cmp	r3, #2
 800b116:	f000 8083 	beq.w	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	f200 80a1 	bhi.w	800b264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d056      	beq.n	800b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b12e:	e099      	b.n	800b264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b130:	4b88      	ldr	r3, [pc, #544]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0320 	and.w	r3, r3, #32
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d02d      	beq.n	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b13c:	4b85      	ldr	r3, [pc, #532]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	08db      	lsrs	r3, r3, #3
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	4a84      	ldr	r2, [pc, #528]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b148:	fa22 f303 	lsr.w	r3, r2, r3
 800b14c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b7b      	ldr	r3, [pc, #492]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b196:	e087      	b.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b6a      	ldr	r3, [pc, #424]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1da:	e065      	b.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ee:	4b59      	ldr	r3, [pc, #356]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b21e:	e043      	b.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b232:	4b48      	ldr	r3, [pc, #288]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b242:	ed97 6a03 	vldr	s12, [r7, #12]
 800b246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b262:	e021      	b.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	ee07 3a90 	vmov	s15, r3
 800b26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b37      	ldr	r3, [pc, #220]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b2a8:	4b2a      	ldr	r3, [pc, #168]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	0a5b      	lsrs	r3, r3, #9
 800b2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ce:	ee17 2a90 	vmov	r2, s15
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b2d6:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	0c1b      	lsrs	r3, r3, #16
 800b2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e0:	ee07 3a90 	vmov	s15, r3
 800b2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fc:	ee17 2a90 	vmov	r2, s15
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b308:	0e1b      	lsrs	r3, r3, #24
 800b30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b32a:	ee17 2a90 	vmov	r2, s15
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b332:	e008      	b.n	800b346 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	609a      	str	r2, [r3, #8]
}
 800b346:	bf00      	nop
 800b348:	3724      	adds	r7, #36	; 0x24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	58024400 	.word	0x58024400
 800b358:	03d09000 	.word	0x03d09000
 800b35c:	46000000 	.word	0x46000000
 800b360:	4c742400 	.word	0x4c742400
 800b364:	4a742400 	.word	0x4a742400
 800b368:	4c371b00 	.word	0x4c371b00

0800b36c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b089      	sub	sp, #36	; 0x24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b374:	4ba0      	ldr	r3, [pc, #640]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b378:	f003 0303 	and.w	r3, r3, #3
 800b37c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b37e:	4b9e      	ldr	r3, [pc, #632]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b382:	091b      	lsrs	r3, r3, #4
 800b384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b388:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b38a:	4b9b      	ldr	r3, [pc, #620]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b394:	4b98      	ldr	r3, [pc, #608]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	fb02 f303 	mul.w	r3, r2, r3
 800b3a4:	ee07 3a90 	vmov	s15, r3
 800b3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 8111 	beq.w	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	f000 8083 	beq.w	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	f200 80a1 	bhi.w	800b50a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d056      	beq.n	800b482 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3d4:	e099      	b.n	800b50a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3d6:	4b88      	ldr	r3, [pc, #544]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d02d      	beq.n	800b43e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3e2:	4b85      	ldr	r3, [pc, #532]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	08db      	lsrs	r3, r3, #3
 800b3e8:	f003 0303 	and.w	r3, r3, #3
 800b3ec:	4a83      	ldr	r2, [pc, #524]	; (800b5fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	ee07 3a90 	vmov	s15, r3
 800b404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40c:	4b7a      	ldr	r3, [pc, #488]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b420:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b438:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b43c:	e087      	b.n	800b54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	ee07 3a90 	vmov	s15, r3
 800b444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b448:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b450:	4b69      	ldr	r3, [pc, #420]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b460:	ed97 6a03 	vldr	s12, [r7, #12]
 800b464:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b480:	e065      	b.n	800b54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b608 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b494:	4b58      	ldr	r3, [pc, #352]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49c:	ee07 3a90 	vmov	s15, r3
 800b4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4c4:	e043      	b.n	800b54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b60c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d8:	4b47      	ldr	r3, [pc, #284]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b508:	e021      	b.n	800b54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b514:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51c:	4b36      	ldr	r3, [pc, #216]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b524:	ee07 3a90 	vmov	s15, r3
 800b528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b530:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b54c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b54e:	4b2a      	ldr	r3, [pc, #168]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b552:	0a5b      	lsrs	r3, r3, #9
 800b554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b564:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b568:	edd7 6a07 	vldr	s13, [r7, #28]
 800b56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b574:	ee17 2a90 	vmov	r2, s15
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b57c:	4b1e      	ldr	r3, [pc, #120]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b580:	0c1b      	lsrs	r3, r3, #16
 800b582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b592:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b596:	edd7 6a07 	vldr	s13, [r7, #28]
 800b59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a2:	ee17 2a90 	vmov	r2, s15
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	0e1b      	lsrs	r3, r3, #24
 800b5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5d0:	ee17 2a90 	vmov	r2, s15
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5d8:	e008      	b.n	800b5ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	609a      	str	r2, [r3, #8]
}
 800b5ec:	bf00      	nop
 800b5ee:	3724      	adds	r7, #36	; 0x24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	03d09000 	.word	0x03d09000
 800b600:	46000000 	.word	0x46000000
 800b604:	4c742400 	.word	0x4c742400
 800b608:	4a742400 	.word	0x4a742400
 800b60c:	4c371b00 	.word	0x4c371b00

0800b610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b61e:	4b53      	ldr	r3, [pc, #332]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	2b03      	cmp	r3, #3
 800b628:	d101      	bne.n	800b62e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e099      	b.n	800b762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b62e:	4b4f      	ldr	r3, [pc, #316]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a4e      	ldr	r2, [pc, #312]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b63a:	f7f8 f8d9 	bl	80037f0 <HAL_GetTick>
 800b63e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b640:	e008      	b.n	800b654 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b642:	f7f8 f8d5 	bl	80037f0 <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d901      	bls.n	800b654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e086      	b.n	800b762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b654:	4b45      	ldr	r3, [pc, #276]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f0      	bne.n	800b642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b660:	4b42      	ldr	r3, [pc, #264]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	031b      	lsls	r3, r3, #12
 800b66e:	493f      	ldr	r1, [pc, #252]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b670:	4313      	orrs	r3, r2
 800b672:	628b      	str	r3, [r1, #40]	; 0x28
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	3b01      	subs	r3, #1
 800b67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	3b01      	subs	r3, #1
 800b684:	025b      	lsls	r3, r3, #9
 800b686:	b29b      	uxth	r3, r3
 800b688:	431a      	orrs	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	3b01      	subs	r3, #1
 800b690:	041b      	lsls	r3, r3, #16
 800b692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b696:	431a      	orrs	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	061b      	lsls	r3, r3, #24
 800b6a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6a4:	4931      	ldr	r1, [pc, #196]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b6aa:	4b30      	ldr	r3, [pc, #192]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	492d      	ldr	r1, [pc, #180]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	f023 0220 	bic.w	r2, r3, #32
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	4928      	ldr	r1, [pc, #160]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6ce:	4b27      	ldr	r3, [pc, #156]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	4a26      	ldr	r2, [pc, #152]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	f023 0310 	bic.w	r3, r3, #16
 800b6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6da:	4b24      	ldr	r3, [pc, #144]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6de:	4b24      	ldr	r3, [pc, #144]	; (800b770 <RCCEx_PLL2_Config+0x160>)
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	69d2      	ldr	r2, [r2, #28]
 800b6e6:	00d2      	lsls	r2, r2, #3
 800b6e8:	4920      	ldr	r1, [pc, #128]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6ee:	4b1f      	ldr	r3, [pc, #124]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f2:	4a1e      	ldr	r2, [pc, #120]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b6f4:	f043 0310 	orr.w	r3, r3, #16
 800b6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d106      	bne.n	800b70e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b700:	4b1a      	ldr	r3, [pc, #104]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	4a19      	ldr	r2, [pc, #100]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b70a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b70c:	e00f      	b.n	800b72e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d106      	bne.n	800b722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b714:	4b15      	ldr	r3, [pc, #84]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	4a14      	ldr	r2, [pc, #80]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b71a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b71e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b720:	e005      	b.n	800b72e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b722:	4b12      	ldr	r3, [pc, #72]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	4a11      	ldr	r2, [pc, #68]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b72c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b72e:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a0e      	ldr	r2, [pc, #56]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b73a:	f7f8 f859 	bl	80037f0 <HAL_GetTick>
 800b73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b740:	e008      	b.n	800b754 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b742:	f7f8 f855 	bl	80037f0 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d901      	bls.n	800b754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e006      	b.n	800b762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <RCCEx_PLL2_Config+0x15c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0f0      	beq.n	800b742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	58024400 	.word	0x58024400
 800b770:	ffff0007 	.word	0xffff0007

0800b774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b782:	4b53      	ldr	r3, [pc, #332]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d101      	bne.n	800b792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e099      	b.n	800b8c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b792:	4b4f      	ldr	r3, [pc, #316]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a4e      	ldr	r2, [pc, #312]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b79e:	f7f8 f827 	bl	80037f0 <HAL_GetTick>
 800b7a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7a4:	e008      	b.n	800b7b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7a6:	f7f8 f823 	bl	80037f0 <HAL_GetTick>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d901      	bls.n	800b7b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e086      	b.n	800b8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7b8:	4b45      	ldr	r3, [pc, #276]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1f0      	bne.n	800b7a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7c4:	4b42      	ldr	r3, [pc, #264]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	051b      	lsls	r3, r3, #20
 800b7d2:	493f      	ldr	r1, [pc, #252]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	025b      	lsls	r3, r3, #9
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	041b      	lsls	r3, r3, #16
 800b7f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	3b01      	subs	r3, #1
 800b802:	061b      	lsls	r3, r3, #24
 800b804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b808:	4931      	ldr	r1, [pc, #196]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b80a:	4313      	orrs	r3, r2
 800b80c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b80e:	4b30      	ldr	r3, [pc, #192]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	492d      	ldr	r1, [pc, #180]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b820:	4b2b      	ldr	r3, [pc, #172]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	4928      	ldr	r1, [pc, #160]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b832:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b836:	4a26      	ldr	r2, [pc, #152]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b83c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b83e:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b842:	4b24      	ldr	r3, [pc, #144]	; (800b8d4 <RCCEx_PLL3_Config+0x160>)
 800b844:	4013      	ands	r3, r2
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	69d2      	ldr	r2, [r2, #28]
 800b84a:	00d2      	lsls	r2, r2, #3
 800b84c:	4920      	ldr	r1, [pc, #128]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b852:	4b1f      	ldr	r3, [pc, #124]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	4a1e      	ldr	r2, [pc, #120]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b85c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d106      	bne.n	800b872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b864:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	4a19      	ldr	r2, [pc, #100]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b86a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b86e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b870:	e00f      	b.n	800b892 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d106      	bne.n	800b886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b878:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	4a14      	ldr	r2, [pc, #80]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b87e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b882:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b884:	e005      	b.n	800b892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b886:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	4a11      	ldr	r2, [pc, #68]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b88c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a0e      	ldr	r2, [pc, #56]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b89e:	f7f7 ffa7 	bl	80037f0 <HAL_GetTick>
 800b8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8a4:	e008      	b.n	800b8b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8a6:	f7f7 ffa3 	bl	80037f0 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d901      	bls.n	800b8b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e006      	b.n	800b8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <RCCEx_PLL3_Config+0x15c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0f0      	beq.n	800b8a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	58024400 	.word	0x58024400
 800b8d4:	ffff0007 	.word	0xffff0007

0800b8d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e0eb      	b.n	800bac6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a75      	ldr	r2, [pc, #468]	; (800bad0 <HAL_SPI_Init+0x1f8>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00f      	beq.n	800b91e <HAL_SPI_Init+0x46>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a74      	ldr	r2, [pc, #464]	; (800bad4 <HAL_SPI_Init+0x1fc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d00a      	beq.n	800b91e <HAL_SPI_Init+0x46>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a72      	ldr	r2, [pc, #456]	; (800bad8 <HAL_SPI_Init+0x200>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d005      	beq.n	800b91e <HAL_SPI_Init+0x46>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d901      	bls.n	800b91e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e0d3      	b.n	800bac6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f8dc 	bl	800badc <SPI_GetPacketSize>
 800b924:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a69      	ldr	r2, [pc, #420]	; (800bad0 <HAL_SPI_Init+0x1f8>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00c      	beq.n	800b94a <HAL_SPI_Init+0x72>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a67      	ldr	r2, [pc, #412]	; (800bad4 <HAL_SPI_Init+0x1fc>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d007      	beq.n	800b94a <HAL_SPI_Init+0x72>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a66      	ldr	r2, [pc, #408]	; (800bad8 <HAL_SPI_Init+0x200>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d002      	beq.n	800b94a <HAL_SPI_Init+0x72>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b08      	cmp	r3, #8
 800b948:	d811      	bhi.n	800b96e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b94e:	4a60      	ldr	r2, [pc, #384]	; (800bad0 <HAL_SPI_Init+0x1f8>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d009      	beq.n	800b968 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a5e      	ldr	r2, [pc, #376]	; (800bad4 <HAL_SPI_Init+0x1fc>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d004      	beq.n	800b968 <HAL_SPI_Init+0x90>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a5d      	ldr	r2, [pc, #372]	; (800bad8 <HAL_SPI_Init+0x200>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d104      	bne.n	800b972 <HAL_SPI_Init+0x9a>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b10      	cmp	r3, #16
 800b96c:	d901      	bls.n	800b972 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e0a9      	b.n	800bac6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7f7 f888 	bl	8002a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0201 	bic.w	r2, r2, #1
 800b9a2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9ac:	d119      	bne.n	800b9e2 <HAL_SPI_Init+0x10a>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b6:	d103      	bne.n	800b9c0 <HAL_SPI_Init+0xe8>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d008      	beq.n	800b9d2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10c      	bne.n	800b9e2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9d0:	d107      	bne.n	800b9e2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69da      	ldr	r2, [r3, #28]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f4:	ea42 0103 	orr.w	r1, r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	431a      	orrs	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	431a      	orrs	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	431a      	orrs	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba36:	431a      	orrs	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba42:	ea42 0103 	orr.w	r1, r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d113      	bne.n	800ba82 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0201 	bic.w	r2, r2, #1
 800ba90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	40013000 	.word	0x40013000
 800bad4:	40003800 	.word	0x40003800
 800bad8:	40003c00 	.word	0x40003c00

0800badc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae8:	095b      	lsrs	r3, r3, #5
 800baea:	3301      	adds	r3, #1
 800baec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	3301      	adds	r3, #1
 800baf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3307      	adds	r3, #7
 800bafa:	08db      	lsrs	r3, r3, #3
 800bafc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e049      	b.n	800bbb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d106      	bne.n	800bb3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7f7 f935 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2202      	movs	r2, #2
 800bb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	4619      	mov	r1, r3
 800bb50:	4610      	mov	r0, r2
 800bb52:	f000 fc47 	bl	800c3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d001      	beq.n	800bbd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e04f      	b.n	800bc78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0201 	orr.w	r2, r2, #1
 800bbee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a23      	ldr	r2, [pc, #140]	; (800bc84 <HAL_TIM_Base_Start_IT+0xc4>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d01d      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc02:	d018      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <HAL_TIM_Base_Start_IT+0xc8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d013      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a1e      	ldr	r2, [pc, #120]	; (800bc8c <HAL_TIM_Base_Start_IT+0xcc>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d00e      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a1c      	ldr	r2, [pc, #112]	; (800bc90 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d009      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a1b      	ldr	r2, [pc, #108]	; (800bc94 <HAL_TIM_Base_Start_IT+0xd4>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d004      	beq.n	800bc36 <HAL_TIM_Base_Start_IT+0x76>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a19      	ldr	r2, [pc, #100]	; (800bc98 <HAL_TIM_Base_Start_IT+0xd8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d115      	bne.n	800bc62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	4b17      	ldr	r3, [pc, #92]	; (800bc9c <HAL_TIM_Base_Start_IT+0xdc>)
 800bc3e:	4013      	ands	r3, r2
 800bc40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2b06      	cmp	r3, #6
 800bc46:	d015      	beq.n	800bc74 <HAL_TIM_Base_Start_IT+0xb4>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4e:	d011      	beq.n	800bc74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f042 0201 	orr.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc60:	e008      	b.n	800bc74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f042 0201 	orr.w	r2, r2, #1
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	e000      	b.n	800bc76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	40010000 	.word	0x40010000
 800bc88:	40000400 	.word	0x40000400
 800bc8c:	40000800 	.word	0x40000800
 800bc90:	40000c00 	.word	0x40000c00
 800bc94:	40010400 	.word	0x40010400
 800bc98:	40001800 	.word	0x40001800
 800bc9c:	00010007 	.word	0x00010007

0800bca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e049      	b.n	800bd46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7f7 f834 	bl	8002d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f000 fb80 	bl	800c3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d122      	bne.n	800bdaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d11b      	bne.n	800bdaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f06f 0202 	mvn.w	r2, #2
 800bd7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f003 0303 	and.w	r3, r3, #3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fb09 	bl	800c3a8 <HAL_TIM_IC_CaptureCallback>
 800bd96:	e005      	b.n	800bda4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fafb 	bl	800c394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fb0c 	bl	800c3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	f003 0304 	and.w	r3, r3, #4
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d122      	bne.n	800bdfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d11b      	bne.n	800bdfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f06f 0204 	mvn.w	r2, #4
 800bdce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fadf 	bl	800c3a8 <HAL_TIM_IC_CaptureCallback>
 800bdea:	e005      	b.n	800bdf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fad1 	bl	800c394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fae2 	bl	800c3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	f003 0308 	and.w	r3, r3, #8
 800be08:	2b08      	cmp	r3, #8
 800be0a:	d122      	bne.n	800be52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f003 0308 	and.w	r3, r3, #8
 800be16:	2b08      	cmp	r3, #8
 800be18:	d11b      	bne.n	800be52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f06f 0208 	mvn.w	r2, #8
 800be22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2204      	movs	r2, #4
 800be28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	f003 0303 	and.w	r3, r3, #3
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fab5 	bl	800c3a8 <HAL_TIM_IC_CaptureCallback>
 800be3e:	e005      	b.n	800be4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 faa7 	bl	800c394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fab8 	bl	800c3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f003 0310 	and.w	r3, r3, #16
 800be5c:	2b10      	cmp	r3, #16
 800be5e:	d122      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f003 0310 	and.w	r3, r3, #16
 800be6a:	2b10      	cmp	r3, #16
 800be6c:	d11b      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f06f 0210 	mvn.w	r2, #16
 800be76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2208      	movs	r2, #8
 800be7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa8b 	bl	800c3a8 <HAL_TIM_IC_CaptureCallback>
 800be92:	e005      	b.n	800bea0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fa7d 	bl	800c394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fa8e 	bl	800c3bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d10e      	bne.n	800bed2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d107      	bne.n	800bed2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f06f 0201 	mvn.w	r2, #1
 800beca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7f5 fedf 	bl	8001c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bedc:	2b80      	cmp	r3, #128	; 0x80
 800bede:	d10e      	bne.n	800befe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beea:	2b80      	cmp	r3, #128	; 0x80
 800beec:	d107      	bne.n	800befe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 ff89 	bl	800ce10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0c:	d10e      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf18:	2b80      	cmp	r3, #128	; 0x80
 800bf1a:	d107      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 ff7c 	bl	800ce24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf36:	2b40      	cmp	r3, #64	; 0x40
 800bf38:	d10e      	bne.n	800bf58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf44:	2b40      	cmp	r3, #64	; 0x40
 800bf46:	d107      	bne.n	800bf58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa3c 	bl	800c3d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d10e      	bne.n	800bf84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	f003 0320 	and.w	r3, r3, #32
 800bf70:	2b20      	cmp	r3, #32
 800bf72:	d107      	bne.n	800bf84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f06f 0220 	mvn.w	r2, #32
 800bf7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 ff3c 	bl	800cdfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf84:	bf00      	nop
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	e0fd      	b.n	800c1a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b14      	cmp	r3, #20
 800bfb2:	f200 80f0 	bhi.w	800c196 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800c011 	.word	0x0800c011
 800bfc0:	0800c197 	.word	0x0800c197
 800bfc4:	0800c197 	.word	0x0800c197
 800bfc8:	0800c197 	.word	0x0800c197
 800bfcc:	0800c051 	.word	0x0800c051
 800bfd0:	0800c197 	.word	0x0800c197
 800bfd4:	0800c197 	.word	0x0800c197
 800bfd8:	0800c197 	.word	0x0800c197
 800bfdc:	0800c093 	.word	0x0800c093
 800bfe0:	0800c197 	.word	0x0800c197
 800bfe4:	0800c197 	.word	0x0800c197
 800bfe8:	0800c197 	.word	0x0800c197
 800bfec:	0800c0d3 	.word	0x0800c0d3
 800bff0:	0800c197 	.word	0x0800c197
 800bff4:	0800c197 	.word	0x0800c197
 800bff8:	0800c197 	.word	0x0800c197
 800bffc:	0800c115 	.word	0x0800c115
 800c000:	0800c197 	.word	0x0800c197
 800c004:	0800c197 	.word	0x0800c197
 800c008:	0800c197 	.word	0x0800c197
 800c00c:	0800c155 	.word	0x0800c155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fa7e 	bl	800c518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0208 	orr.w	r2, r2, #8
 800c02a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f022 0204 	bic.w	r2, r2, #4
 800c03a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6999      	ldr	r1, [r3, #24]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	691a      	ldr	r2, [r3, #16]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	430a      	orrs	r2, r1
 800c04c:	619a      	str	r2, [r3, #24]
      break;
 800c04e:	e0a3      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	4618      	mov	r0, r3
 800c058:	f000 faee 	bl	800c638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	699a      	ldr	r2, [r3, #24]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c06a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c07a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6999      	ldr	r1, [r3, #24]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	021a      	lsls	r2, r3, #8
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	430a      	orrs	r2, r1
 800c08e:	619a      	str	r2, [r3, #24]
      break;
 800c090:	e082      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68b9      	ldr	r1, [r7, #8]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fb57 	bl	800c74c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	69da      	ldr	r2, [r3, #28]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0208 	orr.w	r2, r2, #8
 800c0ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69da      	ldr	r2, [r3, #28]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f022 0204 	bic.w	r2, r2, #4
 800c0bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69d9      	ldr	r1, [r3, #28]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	691a      	ldr	r2, [r3, #16]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	61da      	str	r2, [r3, #28]
      break;
 800c0d0:	e062      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fbbd 	bl	800c858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	69da      	ldr	r2, [r3, #28]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69da      	ldr	r2, [r3, #28]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69d9      	ldr	r1, [r3, #28]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	021a      	lsls	r2, r3, #8
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	61da      	str	r2, [r3, #28]
      break;
 800c112:	e041      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fc04 	bl	800c928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f042 0208 	orr.w	r2, r2, #8
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0204 	bic.w	r2, r2, #4
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c152:	e021      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 fc46 	bl	800c9ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c17e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	021a      	lsls	r2, r3, #8
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c194:	e000      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop

0800c1ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d101      	bne.n	800c1c4 <HAL_TIM_ConfigClockSource+0x18>
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	e0db      	b.n	800c37c <HAL_TIM_ConfigClockSource+0x1d0>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	4b69      	ldr	r3, [pc, #420]	; (800c384 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a63      	ldr	r2, [pc, #396]	; (800c388 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	f000 80a9 	beq.w	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c200:	4a61      	ldr	r2, [pc, #388]	; (800c388 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c202:	4293      	cmp	r3, r2
 800c204:	f200 80ae 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c208:	4a60      	ldr	r2, [pc, #384]	; (800c38c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	f000 80a1 	beq.w	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c210:	4a5e      	ldr	r2, [pc, #376]	; (800c38c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c212:	4293      	cmp	r3, r2
 800c214:	f200 80a6 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c218:	4a5d      	ldr	r2, [pc, #372]	; (800c390 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	f000 8099 	beq.w	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c220:	4a5b      	ldr	r2, [pc, #364]	; (800c390 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c222:	4293      	cmp	r3, r2
 800c224:	f200 809e 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c228:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c22c:	f000 8091 	beq.w	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c230:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c234:	f200 8096 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c23c:	f000 8089 	beq.w	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c244:	f200 808e 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c24c:	d03e      	beq.n	800c2cc <HAL_TIM_ConfigClockSource+0x120>
 800c24e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c252:	f200 8087 	bhi.w	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c25a:	f000 8085 	beq.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c25e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c262:	d87f      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c264:	2b70      	cmp	r3, #112	; 0x70
 800c266:	d01a      	beq.n	800c29e <HAL_TIM_ConfigClockSource+0xf2>
 800c268:	2b70      	cmp	r3, #112	; 0x70
 800c26a:	d87b      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c26c:	2b60      	cmp	r3, #96	; 0x60
 800c26e:	d050      	beq.n	800c312 <HAL_TIM_ConfigClockSource+0x166>
 800c270:	2b60      	cmp	r3, #96	; 0x60
 800c272:	d877      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c274:	2b50      	cmp	r3, #80	; 0x50
 800c276:	d03c      	beq.n	800c2f2 <HAL_TIM_ConfigClockSource+0x146>
 800c278:	2b50      	cmp	r3, #80	; 0x50
 800c27a:	d873      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c27c:	2b40      	cmp	r3, #64	; 0x40
 800c27e:	d058      	beq.n	800c332 <HAL_TIM_ConfigClockSource+0x186>
 800c280:	2b40      	cmp	r3, #64	; 0x40
 800c282:	d86f      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c284:	2b30      	cmp	r3, #48	; 0x30
 800c286:	d064      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c288:	2b30      	cmp	r3, #48	; 0x30
 800c28a:	d86b      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	d060      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c290:	2b20      	cmp	r3, #32
 800c292:	d867      	bhi.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
 800c294:	2b00      	cmp	r3, #0
 800c296:	d05c      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
 800c298:	2b10      	cmp	r3, #16
 800c29a:	d05a      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c29c:	e062      	b.n	800c364 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	6899      	ldr	r1, [r3, #8]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f000 fc7f 	bl	800cbb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	609a      	str	r2, [r3, #8]
      break;
 800c2ca:	e04e      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	6899      	ldr	r1, [r3, #8]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f000 fc68 	bl	800cbb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2ee:	609a      	str	r2, [r3, #8]
      break;
 800c2f0:	e03b      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6818      	ldr	r0, [r3, #0]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	6859      	ldr	r1, [r3, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f000 fbd8 	bl	800cab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2150      	movs	r1, #80	; 0x50
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fc32 	bl	800cb74 <TIM_ITRx_SetConfig>
      break;
 800c310:	e02b      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	6859      	ldr	r1, [r3, #4]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	461a      	mov	r2, r3
 800c320:	f000 fbf7 	bl	800cb12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2160      	movs	r1, #96	; 0x60
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fc22 	bl	800cb74 <TIM_ITRx_SetConfig>
      break;
 800c330:	e01b      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	6859      	ldr	r1, [r3, #4]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	461a      	mov	r2, r3
 800c340:	f000 fbb8 	bl	800cab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2140      	movs	r1, #64	; 0x40
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fc12 	bl	800cb74 <TIM_ITRx_SetConfig>
      break;
 800c350:	e00b      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f000 fc09 	bl	800cb74 <TIM_ITRx_SetConfig>
        break;
 800c362:	e002      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	ffceff88 	.word	0xffceff88
 800c388:	00100040 	.word	0x00100040
 800c38c:	00100030 	.word	0x00100030
 800c390:	00100020 	.word	0x00100020

0800c394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a40      	ldr	r2, [pc, #256]	; (800c4f8 <TIM_Base_SetConfig+0x114>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d013      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c402:	d00f      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a3d      	ldr	r2, [pc, #244]	; (800c4fc <TIM_Base_SetConfig+0x118>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00b      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a3c      	ldr	r2, [pc, #240]	; (800c500 <TIM_Base_SetConfig+0x11c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d007      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a3b      	ldr	r2, [pc, #236]	; (800c504 <TIM_Base_SetConfig+0x120>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d003      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a3a      	ldr	r2, [pc, #232]	; (800c508 <TIM_Base_SetConfig+0x124>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d108      	bne.n	800c436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a2f      	ldr	r2, [pc, #188]	; (800c4f8 <TIM_Base_SetConfig+0x114>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d01f      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c444:	d01b      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a2c      	ldr	r2, [pc, #176]	; (800c4fc <TIM_Base_SetConfig+0x118>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d017      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a2b      	ldr	r2, [pc, #172]	; (800c500 <TIM_Base_SetConfig+0x11c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d013      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a2a      	ldr	r2, [pc, #168]	; (800c504 <TIM_Base_SetConfig+0x120>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d00f      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a29      	ldr	r2, [pc, #164]	; (800c508 <TIM_Base_SetConfig+0x124>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d00b      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a28      	ldr	r2, [pc, #160]	; (800c50c <TIM_Base_SetConfig+0x128>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d007      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a27      	ldr	r2, [pc, #156]	; (800c510 <TIM_Base_SetConfig+0x12c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d003      	beq.n	800c47e <TIM_Base_SetConfig+0x9a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a26      	ldr	r2, [pc, #152]	; (800c514 <TIM_Base_SetConfig+0x130>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d108      	bne.n	800c490 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <TIM_Base_SetConfig+0x114>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d00f      	beq.n	800c4dc <TIM_Base_SetConfig+0xf8>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a12      	ldr	r2, [pc, #72]	; (800c508 <TIM_Base_SetConfig+0x124>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d00b      	beq.n	800c4dc <TIM_Base_SetConfig+0xf8>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a11      	ldr	r2, [pc, #68]	; (800c50c <TIM_Base_SetConfig+0x128>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d007      	beq.n	800c4dc <TIM_Base_SetConfig+0xf8>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a10      	ldr	r2, [pc, #64]	; (800c510 <TIM_Base_SetConfig+0x12c>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d003      	beq.n	800c4dc <TIM_Base_SetConfig+0xf8>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a0f      	ldr	r2, [pc, #60]	; (800c514 <TIM_Base_SetConfig+0x130>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d103      	bne.n	800c4e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	691a      	ldr	r2, [r3, #16]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	615a      	str	r2, [r3, #20]
}
 800c4ea:	bf00      	nop
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	40010000 	.word	0x40010000
 800c4fc:	40000400 	.word	0x40000400
 800c500:	40000800 	.word	0x40000800
 800c504:	40000c00 	.word	0x40000c00
 800c508:	40010400 	.word	0x40010400
 800c50c:	40014000 	.word	0x40014000
 800c510:	40014400 	.word	0x40014400
 800c514:	40014800 	.word	0x40014800

0800c518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	f023 0201 	bic.w	r2, r3, #1
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4b37      	ldr	r3, [pc, #220]	; (800c620 <TIM_OC1_SetConfig+0x108>)
 800c544:	4013      	ands	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 0303 	bic.w	r3, r3, #3
 800c54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f023 0302 	bic.w	r3, r3, #2
 800c560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	4313      	orrs	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a2d      	ldr	r2, [pc, #180]	; (800c624 <TIM_OC1_SetConfig+0x10c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00f      	beq.n	800c594 <TIM_OC1_SetConfig+0x7c>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a2c      	ldr	r2, [pc, #176]	; (800c628 <TIM_OC1_SetConfig+0x110>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00b      	beq.n	800c594 <TIM_OC1_SetConfig+0x7c>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a2b      	ldr	r2, [pc, #172]	; (800c62c <TIM_OC1_SetConfig+0x114>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d007      	beq.n	800c594 <TIM_OC1_SetConfig+0x7c>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a2a      	ldr	r2, [pc, #168]	; (800c630 <TIM_OC1_SetConfig+0x118>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_OC1_SetConfig+0x7c>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a29      	ldr	r2, [pc, #164]	; (800c634 <TIM_OC1_SetConfig+0x11c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d10c      	bne.n	800c5ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0308 	bic.w	r3, r3, #8
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f023 0304 	bic.w	r3, r3, #4
 800c5ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a1c      	ldr	r2, [pc, #112]	; (800c624 <TIM_OC1_SetConfig+0x10c>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d00f      	beq.n	800c5d6 <TIM_OC1_SetConfig+0xbe>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a1b      	ldr	r2, [pc, #108]	; (800c628 <TIM_OC1_SetConfig+0x110>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d00b      	beq.n	800c5d6 <TIM_OC1_SetConfig+0xbe>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a1a      	ldr	r2, [pc, #104]	; (800c62c <TIM_OC1_SetConfig+0x114>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d007      	beq.n	800c5d6 <TIM_OC1_SetConfig+0xbe>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a19      	ldr	r2, [pc, #100]	; (800c630 <TIM_OC1_SetConfig+0x118>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d003      	beq.n	800c5d6 <TIM_OC1_SetConfig+0xbe>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a18      	ldr	r2, [pc, #96]	; (800c634 <TIM_OC1_SetConfig+0x11c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d111      	bne.n	800c5fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	699b      	ldr	r3, [r3, #24]
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	621a      	str	r2, [r3, #32]
}
 800c614:	bf00      	nop
 800c616:	371c      	adds	r7, #28
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	fffeff8f 	.word	0xfffeff8f
 800c624:	40010000 	.word	0x40010000
 800c628:	40010400 	.word	0x40010400
 800c62c:	40014000 	.word	0x40014000
 800c630:	40014400 	.word	0x40014400
 800c634:	40014800 	.word	0x40014800

0800c638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c638:	b480      	push	{r7}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	f023 0210 	bic.w	r2, r3, #16
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4b34      	ldr	r3, [pc, #208]	; (800c734 <TIM_OC2_SetConfig+0xfc>)
 800c664:	4013      	ands	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	f023 0320 	bic.w	r3, r3, #32
 800c682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	011b      	lsls	r3, r3, #4
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a29      	ldr	r2, [pc, #164]	; (800c738 <TIM_OC2_SetConfig+0x100>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d003      	beq.n	800c6a0 <TIM_OC2_SetConfig+0x68>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a28      	ldr	r2, [pc, #160]	; (800c73c <TIM_OC2_SetConfig+0x104>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d10d      	bne.n	800c6bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a1e      	ldr	r2, [pc, #120]	; (800c738 <TIM_OC2_SetConfig+0x100>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d00f      	beq.n	800c6e4 <TIM_OC2_SetConfig+0xac>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a1d      	ldr	r2, [pc, #116]	; (800c73c <TIM_OC2_SetConfig+0x104>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d00b      	beq.n	800c6e4 <TIM_OC2_SetConfig+0xac>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a1c      	ldr	r2, [pc, #112]	; (800c740 <TIM_OC2_SetConfig+0x108>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d007      	beq.n	800c6e4 <TIM_OC2_SetConfig+0xac>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a1b      	ldr	r2, [pc, #108]	; (800c744 <TIM_OC2_SetConfig+0x10c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d003      	beq.n	800c6e4 <TIM_OC2_SetConfig+0xac>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a1a      	ldr	r2, [pc, #104]	; (800c748 <TIM_OC2_SetConfig+0x110>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d113      	bne.n	800c70c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	4313      	orrs	r3, r2
 800c70a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	621a      	str	r2, [r3, #32]
}
 800c726:	bf00      	nop
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	feff8fff 	.word	0xfeff8fff
 800c738:	40010000 	.word	0x40010000
 800c73c:	40010400 	.word	0x40010400
 800c740:	40014000 	.word	0x40014000
 800c744:	40014400 	.word	0x40014400
 800c748:	40014800 	.word	0x40014800

0800c74c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b087      	sub	sp, #28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0303 	bic.w	r3, r3, #3
 800c782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	021b      	lsls	r3, r3, #8
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a27      	ldr	r2, [pc, #156]	; (800c844 <TIM_OC3_SetConfig+0xf8>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d003      	beq.n	800c7b2 <TIM_OC3_SetConfig+0x66>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a26      	ldr	r2, [pc, #152]	; (800c848 <TIM_OC3_SetConfig+0xfc>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d10d      	bne.n	800c7ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a1c      	ldr	r2, [pc, #112]	; (800c844 <TIM_OC3_SetConfig+0xf8>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d00f      	beq.n	800c7f6 <TIM_OC3_SetConfig+0xaa>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a1b      	ldr	r2, [pc, #108]	; (800c848 <TIM_OC3_SetConfig+0xfc>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d00b      	beq.n	800c7f6 <TIM_OC3_SetConfig+0xaa>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a1a      	ldr	r2, [pc, #104]	; (800c84c <TIM_OC3_SetConfig+0x100>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d007      	beq.n	800c7f6 <TIM_OC3_SetConfig+0xaa>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a19      	ldr	r2, [pc, #100]	; (800c850 <TIM_OC3_SetConfig+0x104>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d003      	beq.n	800c7f6 <TIM_OC3_SetConfig+0xaa>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a18      	ldr	r2, [pc, #96]	; (800c854 <TIM_OC3_SetConfig+0x108>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d113      	bne.n	800c81e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	011b      	lsls	r3, r3, #4
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	4313      	orrs	r3, r2
 800c810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	011b      	lsls	r3, r3, #4
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	621a      	str	r2, [r3, #32]
}
 800c838:	bf00      	nop
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	40010000 	.word	0x40010000
 800c848:	40010400 	.word	0x40010400
 800c84c:	40014000 	.word	0x40014000
 800c850:	40014400 	.word	0x40014400
 800c854:	40014800 	.word	0x40014800

0800c858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c88e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	031b      	lsls	r3, r3, #12
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a18      	ldr	r2, [pc, #96]	; (800c914 <TIM_OC4_SetConfig+0xbc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00f      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a17      	ldr	r2, [pc, #92]	; (800c918 <TIM_OC4_SetConfig+0xc0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00b      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a16      	ldr	r2, [pc, #88]	; (800c91c <TIM_OC4_SetConfig+0xc4>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d007      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a15      	ldr	r2, [pc, #84]	; (800c920 <TIM_OC4_SetConfig+0xc8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a14      	ldr	r2, [pc, #80]	; (800c924 <TIM_OC4_SetConfig+0xcc>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d109      	bne.n	800c8ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	019b      	lsls	r3, r3, #6
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	40010000 	.word	0x40010000
 800c918:	40010400 	.word	0x40010400
 800c91c:	40014000 	.word	0x40014000
 800c920:	40014400 	.word	0x40014400
 800c924:	40014800 	.word	0x40014800

0800c928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4313      	orrs	r3, r2
 800c960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c968:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	041b      	lsls	r3, r3, #16
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	4313      	orrs	r3, r2
 800c974:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <TIM_OC5_SetConfig+0xb0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00f      	beq.n	800c99e <TIM_OC5_SetConfig+0x76>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a16      	ldr	r2, [pc, #88]	; (800c9dc <TIM_OC5_SetConfig+0xb4>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00b      	beq.n	800c99e <TIM_OC5_SetConfig+0x76>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a15      	ldr	r2, [pc, #84]	; (800c9e0 <TIM_OC5_SetConfig+0xb8>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d007      	beq.n	800c99e <TIM_OC5_SetConfig+0x76>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a14      	ldr	r2, [pc, #80]	; (800c9e4 <TIM_OC5_SetConfig+0xbc>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d003      	beq.n	800c99e <TIM_OC5_SetConfig+0x76>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a13      	ldr	r2, [pc, #76]	; (800c9e8 <TIM_OC5_SetConfig+0xc0>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d109      	bne.n	800c9b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	021b      	lsls	r3, r3, #8
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	621a      	str	r2, [r3, #32]
}
 800c9cc:	bf00      	nop
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	40010000 	.word	0x40010000
 800c9dc:	40010400 	.word	0x40010400
 800c9e0:	40014000 	.word	0x40014000
 800c9e4:	40014400 	.word	0x40014400
 800c9e8:	40014800 	.word	0x40014800

0800c9ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	051b      	lsls	r3, r3, #20
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a18      	ldr	r2, [pc, #96]	; (800caa0 <TIM_OC6_SetConfig+0xb4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d00f      	beq.n	800ca64 <TIM_OC6_SetConfig+0x78>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a17      	ldr	r2, [pc, #92]	; (800caa4 <TIM_OC6_SetConfig+0xb8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d00b      	beq.n	800ca64 <TIM_OC6_SetConfig+0x78>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a16      	ldr	r2, [pc, #88]	; (800caa8 <TIM_OC6_SetConfig+0xbc>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d007      	beq.n	800ca64 <TIM_OC6_SetConfig+0x78>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a15      	ldr	r2, [pc, #84]	; (800caac <TIM_OC6_SetConfig+0xc0>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d003      	beq.n	800ca64 <TIM_OC6_SetConfig+0x78>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a14      	ldr	r2, [pc, #80]	; (800cab0 <TIM_OC6_SetConfig+0xc4>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d109      	bne.n	800ca78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	029b      	lsls	r3, r3, #10
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	621a      	str	r2, [r3, #32]
}
 800ca92:	bf00      	nop
 800ca94:	371c      	adds	r7, #28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	40010000 	.word	0x40010000
 800caa4:	40010400 	.word	0x40010400
 800caa8:	40014000 	.word	0x40014000
 800caac:	40014400 	.word	0x40014400
 800cab0:	40014800 	.word	0x40014800

0800cab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b087      	sub	sp, #28
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6a1b      	ldr	r3, [r3, #32]
 800cac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	f023 0201 	bic.w	r2, r3, #1
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	011b      	lsls	r3, r3, #4
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f023 030a 	bic.w	r3, r3, #10
 800caf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	621a      	str	r2, [r3, #32]
}
 800cb06:	bf00      	nop
 800cb08:	371c      	adds	r7, #28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr

0800cb12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b087      	sub	sp, #28
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	f023 0210 	bic.w	r2, r3, #16
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	031b      	lsls	r3, r3, #12
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	621a      	str	r2, [r3, #32]
}
 800cb66:	bf00      	nop
 800cb68:	371c      	adds	r7, #28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
	...

0800cb74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <TIM_ITRx_SetConfig+0x38>)
 800cb88:	4013      	ands	r3, r2
 800cb8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	f043 0307 	orr.w	r3, r3, #7
 800cb96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	609a      	str	r2, [r3, #8]
}
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	ffcfff8f 	.word	0xffcfff8f

0800cbb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	021a      	lsls	r2, r3, #8
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	609a      	str	r2, [r3, #8]
}
 800cbe4:	bf00      	nop
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d101      	bne.n	800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc04:	2302      	movs	r3, #2
 800cc06:	e068      	b.n	800ccda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2202      	movs	r2, #2
 800cc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a2e      	ldr	r2, [pc, #184]	; (800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d004      	beq.n	800cc3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a2d      	ldr	r2, [pc, #180]	; (800ccec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d108      	bne.n	800cc4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a1e      	ldr	r2, [pc, #120]	; (800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d01d      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc7a:	d018      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a1b      	ldr	r2, [pc, #108]	; (800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d013      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a1a      	ldr	r2, [pc, #104]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00e      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a18      	ldr	r2, [pc, #96]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d009      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a13      	ldr	r2, [pc, #76]	; (800ccec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d004      	beq.n	800ccae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a14      	ldr	r2, [pc, #80]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d10c      	bne.n	800ccc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40000400 	.word	0x40000400
 800ccf4:	40000800 	.word	0x40000800
 800ccf8:	40000c00 	.word	0x40000c00
 800ccfc:	40001800 	.word	0x40001800

0800cd00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d101      	bne.n	800cd1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e065      	b.n	800cde8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	041b      	lsls	r3, r3, #16
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a16      	ldr	r2, [pc, #88]	; (800cdf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d004      	beq.n	800cdaa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a14      	ldr	r2, [pc, #80]	; (800cdf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d115      	bne.n	800cdd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb4:	051b      	lsls	r3, r3, #20
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	40010000 	.word	0x40010000
 800cdf8:	40010400 	.word	0x40010400

0800cdfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce2c:	bf00      	nop
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e042      	b.n	800ced0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d106      	bne.n	800ce62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7f5 fac9 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2224      	movs	r2, #36	; 0x24
 800ce66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f022 0201 	bic.w	r2, r2, #1
 800ce78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f8c2 	bl	800d004 <UART_SetConfig>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d101      	bne.n	800ce8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e022      	b.n	800ced0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fe20 	bl	800dad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689a      	ldr	r2, [r3, #8]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ceb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f042 0201 	orr.w	r2, r2, #1
 800cec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fea7 	bl	800dc1c <UART_CheckIdleState>
 800cece:	4603      	mov	r3, r0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08a      	sub	sp, #40	; 0x28
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	4613      	mov	r3, r2
 800cee6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceee:	2b20      	cmp	r3, #32
 800cef0:	f040 8083 	bne.w	800cffa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d002      	beq.n	800cf00 <HAL_UART_Transmit+0x28>
 800cefa:	88fb      	ldrh	r3, [r7, #6]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d101      	bne.n	800cf04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e07b      	b.n	800cffc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d101      	bne.n	800cf12 <HAL_UART_Transmit+0x3a>
 800cf0e:	2302      	movs	r3, #2
 800cf10:	e074      	b.n	800cffc <HAL_UART_Transmit+0x124>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2221      	movs	r2, #33	; 0x21
 800cf26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf2a:	f7f6 fc61 	bl	80037f0 <HAL_GetTick>
 800cf2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	88fa      	ldrh	r2, [r7, #6]
 800cf34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	88fa      	ldrh	r2, [r7, #6]
 800cf3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf48:	d108      	bne.n	800cf5c <HAL_UART_Transmit+0x84>
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d104      	bne.n	800cf5c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	e003      	b.n	800cf64 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cf6c:	e02c      	b.n	800cfc8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2200      	movs	r2, #0
 800cf76:	2180      	movs	r1, #128	; 0x80
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f000 fe9a 	bl	800dcb2 <UART_WaitOnFlagUntilTimeout>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cf84:	2303      	movs	r3, #3
 800cf86:	e039      	b.n	800cffc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	61bb      	str	r3, [r7, #24]
 800cfa4:	e007      	b.n	800cfb6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	781a      	ldrb	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1cc      	bne.n	800cf6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2140      	movs	r1, #64	; 0x40
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 fe67 	bl	800dcb2 <UART_WaitOnFlagUntilTimeout>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e006      	b.n	800cffc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	e000      	b.n	800cffc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cffa:	2302      	movs	r3, #2
  }
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d008:	b092      	sub	sp, #72	; 0x48
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	689a      	ldr	r2, [r3, #8]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	431a      	orrs	r2, r3
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	431a      	orrs	r2, r3
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	4313      	orrs	r3, r2
 800d02a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4bbe      	ldr	r3, [pc, #760]	; (800d32c <UART_SetConfig+0x328>)
 800d034:	4013      	ands	r3, r2
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	6812      	ldr	r2, [r2, #0]
 800d03a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d03c:	430b      	orrs	r3, r1
 800d03e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	68da      	ldr	r2, [r3, #12]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4ab3      	ldr	r2, [pc, #716]	; (800d330 <UART_SetConfig+0x32c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d004      	beq.n	800d070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d06c:	4313      	orrs	r3, r2
 800d06e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689a      	ldr	r2, [r3, #8]
 800d076:	4baf      	ldr	r3, [pc, #700]	; (800d334 <UART_SetConfig+0x330>)
 800d078:	4013      	ands	r3, r2
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	6812      	ldr	r2, [r2, #0]
 800d07e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d080:	430b      	orrs	r3, r1
 800d082:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	f023 010f 	bic.w	r1, r3, #15
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	430a      	orrs	r2, r1
 800d098:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4aa6      	ldr	r2, [pc, #664]	; (800d338 <UART_SetConfig+0x334>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d177      	bne.n	800d194 <UART_SetConfig+0x190>
 800d0a4:	4ba5      	ldr	r3, [pc, #660]	; (800d33c <UART_SetConfig+0x338>)
 800d0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0ac:	2b28      	cmp	r3, #40	; 0x28
 800d0ae:	d86d      	bhi.n	800d18c <UART_SetConfig+0x188>
 800d0b0:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <UART_SetConfig+0xb4>)
 800d0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b6:	bf00      	nop
 800d0b8:	0800d15d 	.word	0x0800d15d
 800d0bc:	0800d18d 	.word	0x0800d18d
 800d0c0:	0800d18d 	.word	0x0800d18d
 800d0c4:	0800d18d 	.word	0x0800d18d
 800d0c8:	0800d18d 	.word	0x0800d18d
 800d0cc:	0800d18d 	.word	0x0800d18d
 800d0d0:	0800d18d 	.word	0x0800d18d
 800d0d4:	0800d18d 	.word	0x0800d18d
 800d0d8:	0800d165 	.word	0x0800d165
 800d0dc:	0800d18d 	.word	0x0800d18d
 800d0e0:	0800d18d 	.word	0x0800d18d
 800d0e4:	0800d18d 	.word	0x0800d18d
 800d0e8:	0800d18d 	.word	0x0800d18d
 800d0ec:	0800d18d 	.word	0x0800d18d
 800d0f0:	0800d18d 	.word	0x0800d18d
 800d0f4:	0800d18d 	.word	0x0800d18d
 800d0f8:	0800d16d 	.word	0x0800d16d
 800d0fc:	0800d18d 	.word	0x0800d18d
 800d100:	0800d18d 	.word	0x0800d18d
 800d104:	0800d18d 	.word	0x0800d18d
 800d108:	0800d18d 	.word	0x0800d18d
 800d10c:	0800d18d 	.word	0x0800d18d
 800d110:	0800d18d 	.word	0x0800d18d
 800d114:	0800d18d 	.word	0x0800d18d
 800d118:	0800d175 	.word	0x0800d175
 800d11c:	0800d18d 	.word	0x0800d18d
 800d120:	0800d18d 	.word	0x0800d18d
 800d124:	0800d18d 	.word	0x0800d18d
 800d128:	0800d18d 	.word	0x0800d18d
 800d12c:	0800d18d 	.word	0x0800d18d
 800d130:	0800d18d 	.word	0x0800d18d
 800d134:	0800d18d 	.word	0x0800d18d
 800d138:	0800d17d 	.word	0x0800d17d
 800d13c:	0800d18d 	.word	0x0800d18d
 800d140:	0800d18d 	.word	0x0800d18d
 800d144:	0800d18d 	.word	0x0800d18d
 800d148:	0800d18d 	.word	0x0800d18d
 800d14c:	0800d18d 	.word	0x0800d18d
 800d150:	0800d18d 	.word	0x0800d18d
 800d154:	0800d18d 	.word	0x0800d18d
 800d158:	0800d185 	.word	0x0800d185
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d162:	e222      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d164:	2304      	movs	r3, #4
 800d166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16a:	e21e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d16c:	2308      	movs	r3, #8
 800d16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d172:	e21a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d174:	2310      	movs	r3, #16
 800d176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17a:	e216      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d17c:	2320      	movs	r3, #32
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d182:	e212      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d184:	2340      	movs	r3, #64	; 0x40
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18a:	e20e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d18c:	2380      	movs	r3, #128	; 0x80
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d192:	e20a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a69      	ldr	r2, [pc, #420]	; (800d340 <UART_SetConfig+0x33c>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d130      	bne.n	800d200 <UART_SetConfig+0x1fc>
 800d19e:	4b67      	ldr	r3, [pc, #412]	; (800d33c <UART_SetConfig+0x338>)
 800d1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a2:	f003 0307 	and.w	r3, r3, #7
 800d1a6:	2b05      	cmp	r3, #5
 800d1a8:	d826      	bhi.n	800d1f8 <UART_SetConfig+0x1f4>
 800d1aa:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <UART_SetConfig+0x1ac>)
 800d1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b0:	0800d1c9 	.word	0x0800d1c9
 800d1b4:	0800d1d1 	.word	0x0800d1d1
 800d1b8:	0800d1d9 	.word	0x0800d1d9
 800d1bc:	0800d1e1 	.word	0x0800d1e1
 800d1c0:	0800d1e9 	.word	0x0800d1e9
 800d1c4:	0800d1f1 	.word	0x0800d1f1
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ce:	e1ec      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d6:	e1e8      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1d8:	2308      	movs	r3, #8
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1de:	e1e4      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1e0:	2310      	movs	r3, #16
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e6:	e1e0      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1e8:	2320      	movs	r3, #32
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ee:	e1dc      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1f0:	2340      	movs	r3, #64	; 0x40
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f6:	e1d8      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d1f8:	2380      	movs	r3, #128	; 0x80
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fe:	e1d4      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a4f      	ldr	r2, [pc, #316]	; (800d344 <UART_SetConfig+0x340>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d130      	bne.n	800d26c <UART_SetConfig+0x268>
 800d20a:	4b4c      	ldr	r3, [pc, #304]	; (800d33c <UART_SetConfig+0x338>)
 800d20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	2b05      	cmp	r3, #5
 800d214:	d826      	bhi.n	800d264 <UART_SetConfig+0x260>
 800d216:	a201      	add	r2, pc, #4	; (adr r2, 800d21c <UART_SetConfig+0x218>)
 800d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21c:	0800d235 	.word	0x0800d235
 800d220:	0800d23d 	.word	0x0800d23d
 800d224:	0800d245 	.word	0x0800d245
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d255 	.word	0x0800d255
 800d230:	0800d25d 	.word	0x0800d25d
 800d234:	2300      	movs	r3, #0
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e1b6      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d23c:	2304      	movs	r3, #4
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e1b2      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d244:	2308      	movs	r3, #8
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e1ae      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d24c:	2310      	movs	r3, #16
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e1aa      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d254:	2320      	movs	r3, #32
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e1a6      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e1a2      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e19e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a35      	ldr	r2, [pc, #212]	; (800d348 <UART_SetConfig+0x344>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d130      	bne.n	800d2d8 <UART_SetConfig+0x2d4>
 800d276:	4b31      	ldr	r3, [pc, #196]	; (800d33c <UART_SetConfig+0x338>)
 800d278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d826      	bhi.n	800d2d0 <UART_SetConfig+0x2cc>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <UART_SetConfig+0x284>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d2a1 	.word	0x0800d2a1
 800d28c:	0800d2a9 	.word	0x0800d2a9
 800d290:	0800d2b1 	.word	0x0800d2b1
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2c1 	.word	0x0800d2c1
 800d29c:	0800d2c9 	.word	0x0800d2c9
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e180      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2a8:	2304      	movs	r3, #4
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e17c      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e178      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2b8:	2310      	movs	r3, #16
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e174      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e170      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e16c      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2d0:	2380      	movs	r3, #128	; 0x80
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e168      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a1b      	ldr	r2, [pc, #108]	; (800d34c <UART_SetConfig+0x348>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d142      	bne.n	800d368 <UART_SetConfig+0x364>
 800d2e2:	4b16      	ldr	r3, [pc, #88]	; (800d33c <UART_SetConfig+0x338>)
 800d2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	2b05      	cmp	r3, #5
 800d2ec:	d838      	bhi.n	800d360 <UART_SetConfig+0x35c>
 800d2ee:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <UART_SetConfig+0x2f0>)
 800d2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f4:	0800d30d 	.word	0x0800d30d
 800d2f8:	0800d315 	.word	0x0800d315
 800d2fc:	0800d31d 	.word	0x0800d31d
 800d300:	0800d325 	.word	0x0800d325
 800d304:	0800d351 	.word	0x0800d351
 800d308:	0800d359 	.word	0x0800d359
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e14a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d314:	2304      	movs	r3, #4
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e146      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d31c:	2308      	movs	r3, #8
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e142      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d324:	2310      	movs	r3, #16
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e13e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d32c:	cfff69f3 	.word	0xcfff69f3
 800d330:	58000c00 	.word	0x58000c00
 800d334:	11fff4ff 	.word	0x11fff4ff
 800d338:	40011000 	.word	0x40011000
 800d33c:	58024400 	.word	0x58024400
 800d340:	40004400 	.word	0x40004400
 800d344:	40004800 	.word	0x40004800
 800d348:	40004c00 	.word	0x40004c00
 800d34c:	40005000 	.word	0x40005000
 800d350:	2320      	movs	r3, #32
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d356:	e128      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d358:	2340      	movs	r3, #64	; 0x40
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35e:	e124      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d360:	2380      	movs	r3, #128	; 0x80
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d366:	e120      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4acb      	ldr	r2, [pc, #812]	; (800d69c <UART_SetConfig+0x698>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d176      	bne.n	800d460 <UART_SetConfig+0x45c>
 800d372:	4bcb      	ldr	r3, [pc, #812]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d37a:	2b28      	cmp	r3, #40	; 0x28
 800d37c:	d86c      	bhi.n	800d458 <UART_SetConfig+0x454>
 800d37e:	a201      	add	r2, pc, #4	; (adr r2, 800d384 <UART_SetConfig+0x380>)
 800d380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d384:	0800d429 	.word	0x0800d429
 800d388:	0800d459 	.word	0x0800d459
 800d38c:	0800d459 	.word	0x0800d459
 800d390:	0800d459 	.word	0x0800d459
 800d394:	0800d459 	.word	0x0800d459
 800d398:	0800d459 	.word	0x0800d459
 800d39c:	0800d459 	.word	0x0800d459
 800d3a0:	0800d459 	.word	0x0800d459
 800d3a4:	0800d431 	.word	0x0800d431
 800d3a8:	0800d459 	.word	0x0800d459
 800d3ac:	0800d459 	.word	0x0800d459
 800d3b0:	0800d459 	.word	0x0800d459
 800d3b4:	0800d459 	.word	0x0800d459
 800d3b8:	0800d459 	.word	0x0800d459
 800d3bc:	0800d459 	.word	0x0800d459
 800d3c0:	0800d459 	.word	0x0800d459
 800d3c4:	0800d439 	.word	0x0800d439
 800d3c8:	0800d459 	.word	0x0800d459
 800d3cc:	0800d459 	.word	0x0800d459
 800d3d0:	0800d459 	.word	0x0800d459
 800d3d4:	0800d459 	.word	0x0800d459
 800d3d8:	0800d459 	.word	0x0800d459
 800d3dc:	0800d459 	.word	0x0800d459
 800d3e0:	0800d459 	.word	0x0800d459
 800d3e4:	0800d441 	.word	0x0800d441
 800d3e8:	0800d459 	.word	0x0800d459
 800d3ec:	0800d459 	.word	0x0800d459
 800d3f0:	0800d459 	.word	0x0800d459
 800d3f4:	0800d459 	.word	0x0800d459
 800d3f8:	0800d459 	.word	0x0800d459
 800d3fc:	0800d459 	.word	0x0800d459
 800d400:	0800d459 	.word	0x0800d459
 800d404:	0800d449 	.word	0x0800d449
 800d408:	0800d459 	.word	0x0800d459
 800d40c:	0800d459 	.word	0x0800d459
 800d410:	0800d459 	.word	0x0800d459
 800d414:	0800d459 	.word	0x0800d459
 800d418:	0800d459 	.word	0x0800d459
 800d41c:	0800d459 	.word	0x0800d459
 800d420:	0800d459 	.word	0x0800d459
 800d424:	0800d451 	.word	0x0800d451
 800d428:	2301      	movs	r3, #1
 800d42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42e:	e0bc      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d430:	2304      	movs	r3, #4
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e0b8      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d438:	2308      	movs	r3, #8
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e0b4      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d440:	2310      	movs	r3, #16
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e0b0      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d448:	2320      	movs	r3, #32
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e0ac      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d450:	2340      	movs	r3, #64	; 0x40
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e0a8      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d458:	2380      	movs	r3, #128	; 0x80
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e0a4      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a8f      	ldr	r2, [pc, #572]	; (800d6a4 <UART_SetConfig+0x6a0>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d130      	bne.n	800d4cc <UART_SetConfig+0x4c8>
 800d46a:	4b8d      	ldr	r3, [pc, #564]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d46e:	f003 0307 	and.w	r3, r3, #7
 800d472:	2b05      	cmp	r3, #5
 800d474:	d826      	bhi.n	800d4c4 <UART_SetConfig+0x4c0>
 800d476:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <UART_SetConfig+0x478>)
 800d478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47c:	0800d495 	.word	0x0800d495
 800d480:	0800d49d 	.word	0x0800d49d
 800d484:	0800d4a5 	.word	0x0800d4a5
 800d488:	0800d4ad 	.word	0x0800d4ad
 800d48c:	0800d4b5 	.word	0x0800d4b5
 800d490:	0800d4bd 	.word	0x0800d4bd
 800d494:	2300      	movs	r3, #0
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49a:	e086      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d49c:	2304      	movs	r3, #4
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a2:	e082      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e07e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e07a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4b4:	2320      	movs	r3, #32
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e076      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4bc:	2340      	movs	r3, #64	; 0x40
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e072      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4c4:	2380      	movs	r3, #128	; 0x80
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e06e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a75      	ldr	r2, [pc, #468]	; (800d6a8 <UART_SetConfig+0x6a4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d130      	bne.n	800d538 <UART_SetConfig+0x534>
 800d4d6:	4b72      	ldr	r3, [pc, #456]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4da:	f003 0307 	and.w	r3, r3, #7
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d826      	bhi.n	800d530 <UART_SetConfig+0x52c>
 800d4e2:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <UART_SetConfig+0x4e4>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d501 	.word	0x0800d501
 800d4ec:	0800d509 	.word	0x0800d509
 800d4f0:	0800d511 	.word	0x0800d511
 800d4f4:	0800d519 	.word	0x0800d519
 800d4f8:	0800d521 	.word	0x0800d521
 800d4fc:	0800d529 	.word	0x0800d529
 800d500:	2300      	movs	r3, #0
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d506:	e050      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d508:	2304      	movs	r3, #4
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e04c      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d510:	2308      	movs	r3, #8
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e048      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d518:	2310      	movs	r3, #16
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e044      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d520:	2320      	movs	r3, #32
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e040      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d528:	2340      	movs	r3, #64	; 0x40
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e03c      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d530:	2380      	movs	r3, #128	; 0x80
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e038      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a5b      	ldr	r2, [pc, #364]	; (800d6ac <UART_SetConfig+0x6a8>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d130      	bne.n	800d5a4 <UART_SetConfig+0x5a0>
 800d542:	4b57      	ldr	r3, [pc, #348]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b05      	cmp	r3, #5
 800d54c:	d826      	bhi.n	800d59c <UART_SetConfig+0x598>
 800d54e:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <UART_SetConfig+0x550>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d575 	.word	0x0800d575
 800d55c:	0800d57d 	.word	0x0800d57d
 800d560:	0800d585 	.word	0x0800d585
 800d564:	0800d58d 	.word	0x0800d58d
 800d568:	0800d595 	.word	0x0800d595
 800d56c:	2302      	movs	r3, #2
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d572:	e01a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d574:	2304      	movs	r3, #4
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e016      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d57c:	2308      	movs	r3, #8
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e012      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d584:	2310      	movs	r3, #16
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e00e      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d58c:	2320      	movs	r3, #32
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e00a      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e006      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d59c:	2380      	movs	r3, #128	; 0x80
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e002      	b.n	800d5aa <UART_SetConfig+0x5a6>
 800d5a4:	2380      	movs	r3, #128	; 0x80
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a3f      	ldr	r2, [pc, #252]	; (800d6ac <UART_SetConfig+0x6a8>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	f040 80f8 	bne.w	800d7a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d5b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d5ba:	2b20      	cmp	r3, #32
 800d5bc:	dc46      	bgt.n	800d64c <UART_SetConfig+0x648>
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	f2c0 8082 	blt.w	800d6c8 <UART_SetConfig+0x6c4>
 800d5c4:	3b02      	subs	r3, #2
 800d5c6:	2b1e      	cmp	r3, #30
 800d5c8:	d87e      	bhi.n	800d6c8 <UART_SetConfig+0x6c4>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <UART_SetConfig+0x5cc>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d653 	.word	0x0800d653
 800d5d4:	0800d6c9 	.word	0x0800d6c9
 800d5d8:	0800d65b 	.word	0x0800d65b
 800d5dc:	0800d6c9 	.word	0x0800d6c9
 800d5e0:	0800d6c9 	.word	0x0800d6c9
 800d5e4:	0800d6c9 	.word	0x0800d6c9
 800d5e8:	0800d66b 	.word	0x0800d66b
 800d5ec:	0800d6c9 	.word	0x0800d6c9
 800d5f0:	0800d6c9 	.word	0x0800d6c9
 800d5f4:	0800d6c9 	.word	0x0800d6c9
 800d5f8:	0800d6c9 	.word	0x0800d6c9
 800d5fc:	0800d6c9 	.word	0x0800d6c9
 800d600:	0800d6c9 	.word	0x0800d6c9
 800d604:	0800d6c9 	.word	0x0800d6c9
 800d608:	0800d67b 	.word	0x0800d67b
 800d60c:	0800d6c9 	.word	0x0800d6c9
 800d610:	0800d6c9 	.word	0x0800d6c9
 800d614:	0800d6c9 	.word	0x0800d6c9
 800d618:	0800d6c9 	.word	0x0800d6c9
 800d61c:	0800d6c9 	.word	0x0800d6c9
 800d620:	0800d6c9 	.word	0x0800d6c9
 800d624:	0800d6c9 	.word	0x0800d6c9
 800d628:	0800d6c9 	.word	0x0800d6c9
 800d62c:	0800d6c9 	.word	0x0800d6c9
 800d630:	0800d6c9 	.word	0x0800d6c9
 800d634:	0800d6c9 	.word	0x0800d6c9
 800d638:	0800d6c9 	.word	0x0800d6c9
 800d63c:	0800d6c9 	.word	0x0800d6c9
 800d640:	0800d6c9 	.word	0x0800d6c9
 800d644:	0800d6c9 	.word	0x0800d6c9
 800d648:	0800d6bb 	.word	0x0800d6bb
 800d64c:	2b40      	cmp	r3, #64	; 0x40
 800d64e:	d037      	beq.n	800d6c0 <UART_SetConfig+0x6bc>
 800d650:	e03a      	b.n	800d6c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d652:	f7fd fbcd 	bl	800adf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d658:	e03c      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fd fbdc 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d668:	e034      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d66a:	f107 0318 	add.w	r3, r7, #24
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fd fd28 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d678:	e02c      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d67a:	4b09      	ldr	r3, [pc, #36]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0320 	and.w	r3, r3, #32
 800d682:	2b00      	cmp	r3, #0
 800d684:	d016      	beq.n	800d6b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d686:	4b06      	ldr	r3, [pc, #24]	; (800d6a0 <UART_SetConfig+0x69c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	08db      	lsrs	r3, r3, #3
 800d68c:	f003 0303 	and.w	r3, r3, #3
 800d690:	4a07      	ldr	r2, [pc, #28]	; (800d6b0 <UART_SetConfig+0x6ac>)
 800d692:	fa22 f303 	lsr.w	r3, r2, r3
 800d696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d698:	e01c      	b.n	800d6d4 <UART_SetConfig+0x6d0>
 800d69a:	bf00      	nop
 800d69c:	40011400 	.word	0x40011400
 800d6a0:	58024400 	.word	0x58024400
 800d6a4:	40007800 	.word	0x40007800
 800d6a8:	40007c00 	.word	0x40007c00
 800d6ac:	58000c00 	.word	0x58000c00
 800d6b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d6b4:	4b9e      	ldr	r3, [pc, #632]	; (800d930 <UART_SetConfig+0x92c>)
 800d6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6b8:	e00c      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6ba:	4b9e      	ldr	r3, [pc, #632]	; (800d934 <UART_SetConfig+0x930>)
 800d6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6be:	e009      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6c6:	e005      	b.n	800d6d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d6d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 81e0 	beq.w	800da9c <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	4a95      	ldr	r2, [pc, #596]	; (800d938 <UART_SetConfig+0x934>)
 800d6e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4413      	add	r3, r2
 800d6fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d305      	bcc.n	800d70c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d708:	429a      	cmp	r2, r3
 800d70a:	d903      	bls.n	800d714 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d712:	e1c3      	b.n	800da9c <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d716:	2200      	movs	r2, #0
 800d718:	60bb      	str	r3, [r7, #8]
 800d71a:	60fa      	str	r2, [r7, #12]
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d720:	4a85      	ldr	r2, [pc, #532]	; (800d938 <UART_SetConfig+0x934>)
 800d722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d726:	b29b      	uxth	r3, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	603b      	str	r3, [r7, #0]
 800d72c:	607a      	str	r2, [r7, #4]
 800d72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d736:	f7f2 fe2b 	bl	8000390 <__aeabi_uldivmod>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4610      	mov	r0, r2
 800d740:	4619      	mov	r1, r3
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	f04f 0300 	mov.w	r3, #0
 800d74a:	020b      	lsls	r3, r1, #8
 800d74c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d750:	0202      	lsls	r2, r0, #8
 800d752:	6979      	ldr	r1, [r7, #20]
 800d754:	6849      	ldr	r1, [r1, #4]
 800d756:	0849      	lsrs	r1, r1, #1
 800d758:	2000      	movs	r0, #0
 800d75a:	460c      	mov	r4, r1
 800d75c:	4605      	mov	r5, r0
 800d75e:	eb12 0804 	adds.w	r8, r2, r4
 800d762:	eb43 0905 	adc.w	r9, r3, r5
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	469a      	mov	sl, r3
 800d76e:	4693      	mov	fp, r2
 800d770:	4652      	mov	r2, sl
 800d772:	465b      	mov	r3, fp
 800d774:	4640      	mov	r0, r8
 800d776:	4649      	mov	r1, r9
 800d778:	f7f2 fe0a 	bl	8000390 <__aeabi_uldivmod>
 800d77c:	4602      	mov	r2, r0
 800d77e:	460b      	mov	r3, r1
 800d780:	4613      	mov	r3, r2
 800d782:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d78a:	d308      	bcc.n	800d79e <UART_SetConfig+0x79a>
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d792:	d204      	bcs.n	800d79e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d79a:	60da      	str	r2, [r3, #12]
 800d79c:	e17e      	b.n	800da9c <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d7a4:	e17a      	b.n	800da9c <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ae:	f040 80c7 	bne.w	800d940 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800d7b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7b6:	2b20      	cmp	r3, #32
 800d7b8:	dc48      	bgt.n	800d84c <UART_SetConfig+0x848>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	db7b      	blt.n	800d8b6 <UART_SetConfig+0x8b2>
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d879      	bhi.n	800d8b6 <UART_SetConfig+0x8b2>
 800d7c2:	a201      	add	r2, pc, #4	; (adr r2, 800d7c8 <UART_SetConfig+0x7c4>)
 800d7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c8:	0800d853 	.word	0x0800d853
 800d7cc:	0800d85b 	.word	0x0800d85b
 800d7d0:	0800d8b7 	.word	0x0800d8b7
 800d7d4:	0800d8b7 	.word	0x0800d8b7
 800d7d8:	0800d863 	.word	0x0800d863
 800d7dc:	0800d8b7 	.word	0x0800d8b7
 800d7e0:	0800d8b7 	.word	0x0800d8b7
 800d7e4:	0800d8b7 	.word	0x0800d8b7
 800d7e8:	0800d873 	.word	0x0800d873
 800d7ec:	0800d8b7 	.word	0x0800d8b7
 800d7f0:	0800d8b7 	.word	0x0800d8b7
 800d7f4:	0800d8b7 	.word	0x0800d8b7
 800d7f8:	0800d8b7 	.word	0x0800d8b7
 800d7fc:	0800d8b7 	.word	0x0800d8b7
 800d800:	0800d8b7 	.word	0x0800d8b7
 800d804:	0800d8b7 	.word	0x0800d8b7
 800d808:	0800d883 	.word	0x0800d883
 800d80c:	0800d8b7 	.word	0x0800d8b7
 800d810:	0800d8b7 	.word	0x0800d8b7
 800d814:	0800d8b7 	.word	0x0800d8b7
 800d818:	0800d8b7 	.word	0x0800d8b7
 800d81c:	0800d8b7 	.word	0x0800d8b7
 800d820:	0800d8b7 	.word	0x0800d8b7
 800d824:	0800d8b7 	.word	0x0800d8b7
 800d828:	0800d8b7 	.word	0x0800d8b7
 800d82c:	0800d8b7 	.word	0x0800d8b7
 800d830:	0800d8b7 	.word	0x0800d8b7
 800d834:	0800d8b7 	.word	0x0800d8b7
 800d838:	0800d8b7 	.word	0x0800d8b7
 800d83c:	0800d8b7 	.word	0x0800d8b7
 800d840:	0800d8b7 	.word	0x0800d8b7
 800d844:	0800d8b7 	.word	0x0800d8b7
 800d848:	0800d8a9 	.word	0x0800d8a9
 800d84c:	2b40      	cmp	r3, #64	; 0x40
 800d84e:	d02e      	beq.n	800d8ae <UART_SetConfig+0x8aa>
 800d850:	e031      	b.n	800d8b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d852:	f7fb fe47 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800d856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d858:	e033      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d85a:	f7fb fe59 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800d85e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d860:	e02f      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d866:	4618      	mov	r0, r3
 800d868:	f7fd fad8 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d870:	e027      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d872:	f107 0318 	add.w	r3, r7, #24
 800d876:	4618      	mov	r0, r3
 800d878:	f7fd fc24 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d880:	e01f      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d882:	4b2e      	ldr	r3, [pc, #184]	; (800d93c <UART_SetConfig+0x938>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0320 	and.w	r3, r3, #32
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d009      	beq.n	800d8a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d88e:	4b2b      	ldr	r3, [pc, #172]	; (800d93c <UART_SetConfig+0x938>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	08db      	lsrs	r3, r3, #3
 800d894:	f003 0303 	and.w	r3, r3, #3
 800d898:	4a25      	ldr	r2, [pc, #148]	; (800d930 <UART_SetConfig+0x92c>)
 800d89a:	fa22 f303 	lsr.w	r3, r2, r3
 800d89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8a0:	e00f      	b.n	800d8c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d8a2:	4b23      	ldr	r3, [pc, #140]	; (800d930 <UART_SetConfig+0x92c>)
 800d8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8a6:	e00c      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8a8:	4b22      	ldr	r3, [pc, #136]	; (800d934 <UART_SetConfig+0x930>)
 800d8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8ac:	e009      	b.n	800d8c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8b4:	e005      	b.n	800d8c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80e9 	beq.w	800da9c <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ce:	4a1a      	ldr	r2, [pc, #104]	; (800d938 <UART_SetConfig+0x934>)
 800d8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8dc:	005a      	lsls	r2, r3, #1
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	085b      	lsrs	r3, r3, #1
 800d8e4:	441a      	add	r2, r3
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f4:	2b0f      	cmp	r3, #15
 800d8f6:	d916      	bls.n	800d926 <UART_SetConfig+0x922>
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8fe:	d212      	bcs.n	800d926 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	b29b      	uxth	r3, r3
 800d904:	f023 030f 	bic.w	r3, r3, #15
 800d908:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90c:	085b      	lsrs	r3, r3, #1
 800d90e:	b29b      	uxth	r3, r3
 800d910:	f003 0307 	and.w	r3, r3, #7
 800d914:	b29a      	uxth	r2, r3
 800d916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d918:	4313      	orrs	r3, r2
 800d91a:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d922:	60da      	str	r2, [r3, #12]
 800d924:	e0ba      	b.n	800da9c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d92c:	e0b6      	b.n	800da9c <UART_SetConfig+0xa98>
 800d92e:	bf00      	nop
 800d930:	03d09000 	.word	0x03d09000
 800d934:	003d0900 	.word	0x003d0900
 800d938:	080148ec 	.word	0x080148ec
 800d93c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d940:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d944:	2b20      	cmp	r3, #32
 800d946:	dc49      	bgt.n	800d9dc <UART_SetConfig+0x9d8>
 800d948:	2b00      	cmp	r3, #0
 800d94a:	db7c      	blt.n	800da46 <UART_SetConfig+0xa42>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d87a      	bhi.n	800da46 <UART_SetConfig+0xa42>
 800d950:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <UART_SetConfig+0x954>)
 800d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d956:	bf00      	nop
 800d958:	0800d9e3 	.word	0x0800d9e3
 800d95c:	0800d9eb 	.word	0x0800d9eb
 800d960:	0800da47 	.word	0x0800da47
 800d964:	0800da47 	.word	0x0800da47
 800d968:	0800d9f3 	.word	0x0800d9f3
 800d96c:	0800da47 	.word	0x0800da47
 800d970:	0800da47 	.word	0x0800da47
 800d974:	0800da47 	.word	0x0800da47
 800d978:	0800da03 	.word	0x0800da03
 800d97c:	0800da47 	.word	0x0800da47
 800d980:	0800da47 	.word	0x0800da47
 800d984:	0800da47 	.word	0x0800da47
 800d988:	0800da47 	.word	0x0800da47
 800d98c:	0800da47 	.word	0x0800da47
 800d990:	0800da47 	.word	0x0800da47
 800d994:	0800da47 	.word	0x0800da47
 800d998:	0800da13 	.word	0x0800da13
 800d99c:	0800da47 	.word	0x0800da47
 800d9a0:	0800da47 	.word	0x0800da47
 800d9a4:	0800da47 	.word	0x0800da47
 800d9a8:	0800da47 	.word	0x0800da47
 800d9ac:	0800da47 	.word	0x0800da47
 800d9b0:	0800da47 	.word	0x0800da47
 800d9b4:	0800da47 	.word	0x0800da47
 800d9b8:	0800da47 	.word	0x0800da47
 800d9bc:	0800da47 	.word	0x0800da47
 800d9c0:	0800da47 	.word	0x0800da47
 800d9c4:	0800da47 	.word	0x0800da47
 800d9c8:	0800da47 	.word	0x0800da47
 800d9cc:	0800da47 	.word	0x0800da47
 800d9d0:	0800da47 	.word	0x0800da47
 800d9d4:	0800da47 	.word	0x0800da47
 800d9d8:	0800da39 	.word	0x0800da39
 800d9dc:	2b40      	cmp	r3, #64	; 0x40
 800d9de:	d02e      	beq.n	800da3e <UART_SetConfig+0xa3a>
 800d9e0:	e031      	b.n	800da46 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9e2:	f7fb fd7f 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800d9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9e8:	e033      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9ea:	f7fb fd91 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800d9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9f0:	e02f      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fd fa10 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da00:	e027      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da02:	f107 0318 	add.w	r3, r7, #24
 800da06:	4618      	mov	r0, r3
 800da08:	f7fd fb5c 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da10:	e01f      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da12:	4b2d      	ldr	r3, [pc, #180]	; (800dac8 <UART_SetConfig+0xac4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 0320 	and.w	r3, r3, #32
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d009      	beq.n	800da32 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da1e:	4b2a      	ldr	r3, [pc, #168]	; (800dac8 <UART_SetConfig+0xac4>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	08db      	lsrs	r3, r3, #3
 800da24:	f003 0303 	and.w	r3, r3, #3
 800da28:	4a28      	ldr	r2, [pc, #160]	; (800dacc <UART_SetConfig+0xac8>)
 800da2a:	fa22 f303 	lsr.w	r3, r2, r3
 800da2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da30:	e00f      	b.n	800da52 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800da32:	4b26      	ldr	r3, [pc, #152]	; (800dacc <UART_SetConfig+0xac8>)
 800da34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da36:	e00c      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da38:	4b25      	ldr	r3, [pc, #148]	; (800dad0 <UART_SetConfig+0xacc>)
 800da3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da3c:	e009      	b.n	800da52 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da44:	e005      	b.n	800da52 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800da46:	2300      	movs	r3, #0
 800da48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da50:	bf00      	nop
    }

    if (pclk != 0U)
 800da52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d021      	beq.n	800da9c <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	4a1d      	ldr	r2, [pc, #116]	; (800dad4 <UART_SetConfig+0xad0>)
 800da5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da62:	461a      	mov	r2, r3
 800da64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da66:	fbb3 f2f2 	udiv	r2, r3, r2
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	085b      	lsrs	r3, r3, #1
 800da70:	441a      	add	r2, r3
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	fbb2 f3f3 	udiv	r3, r2, r3
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	2b0f      	cmp	r3, #15
 800da82:	d908      	bls.n	800da96 <UART_SetConfig+0xa92>
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da8a:	d204      	bcs.n	800da96 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da92:	60da      	str	r2, [r3, #12]
 800da94:	e002      	b.n	800da9c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	2200      	movs	r2, #0
 800dab0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2200      	movs	r2, #0
 800dab6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dab8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3748      	adds	r7, #72	; 0x48
 800dac0:	46bd      	mov	sp, r7
 800dac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dac6:	bf00      	nop
 800dac8:	58024400 	.word	0x58024400
 800dacc:	03d09000 	.word	0x03d09000
 800dad0:	003d0900 	.word	0x003d0900
 800dad4:	080148ec 	.word	0x080148ec

0800dad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae4:	f003 0301 	and.w	r3, r3, #1
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00a      	beq.n	800db02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db06:	f003 0302 	and.w	r3, r3, #2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00a      	beq.n	800db24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	430a      	orrs	r2, r1
 800db22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db28:	f003 0304 	and.w	r3, r3, #4
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00a      	beq.n	800db46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	430a      	orrs	r2, r1
 800db44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4a:	f003 0308 	and.w	r3, r3, #8
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00a      	beq.n	800db68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	430a      	orrs	r2, r1
 800db66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6c:	f003 0310 	and.w	r3, r3, #16
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00a      	beq.n	800db8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	430a      	orrs	r2, r1
 800db88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00a      	beq.n	800dbac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	430a      	orrs	r2, r1
 800dbaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d01a      	beq.n	800dbee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbd6:	d10a      	bne.n	800dbee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	605a      	str	r2, [r3, #4]
  }
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc2c:	f7f5 fde0 	bl	80037f0 <HAL_GetTick>
 800dc30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 0308 	and.w	r3, r3, #8
 800dc3c:	2b08      	cmp	r3, #8
 800dc3e:	d10e      	bne.n	800dc5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f82f 	bl	800dcb2 <UART_WaitOnFlagUntilTimeout>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e025      	b.n	800dcaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0304 	and.w	r3, r3, #4
 800dc68:	2b04      	cmp	r3, #4
 800dc6a:	d10e      	bne.n	800dc8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f819 	bl	800dcb2 <UART_WaitOnFlagUntilTimeout>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e00f      	b.n	800dcaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2220      	movs	r2, #32
 800dc96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	60b9      	str	r1, [r7, #8]
 800dcbc:	603b      	str	r3, [r7, #0]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcc2:	e062      	b.n	800dd8a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcca:	d05e      	beq.n	800dd8a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dccc:	f7f5 fd90 	bl	80037f0 <HAL_GetTick>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d302      	bcc.n	800dce2 <UART_WaitOnFlagUntilTimeout+0x30>
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d11d      	bne.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dcf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	689a      	ldr	r2, [r3, #8]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f022 0201 	bic.w	r2, r2, #1
 800dd00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2220      	movs	r2, #32
 800dd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	e045      	b.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0304 	and.w	r3, r3, #4
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d02e      	beq.n	800dd8a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd3a:	d126      	bne.n	800dd8a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dd54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	689a      	ldr	r2, [r3, #8]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f022 0201 	bic.w	r2, r2, #1
 800dd64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd86:	2303      	movs	r3, #3
 800dd88:	e00f      	b.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	69da      	ldr	r2, [r3, #28]
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4013      	ands	r3, r2
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	bf0c      	ite	eq
 800dd9a:	2301      	moveq	r3, #1
 800dd9c:	2300      	movne	r3, #0
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	461a      	mov	r2, r3
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d08d      	beq.n	800dcc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b085      	sub	sp, #20
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d101      	bne.n	800ddc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e027      	b.n	800de18 <HAL_UARTEx_DisableFifoMode+0x66>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2224      	movs	r2, #36	; 0x24
 800ddd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f022 0201 	bic.w	r2, r2, #1
 800ddee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ddf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2220      	movs	r2, #32
 800de0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de34:	2b01      	cmp	r3, #1
 800de36:	d101      	bne.n	800de3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de38:	2302      	movs	r3, #2
 800de3a:	e02d      	b.n	800de98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2224      	movs	r2, #36	; 0x24
 800de48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f022 0201 	bic.w	r2, r2, #1
 800de62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	430a      	orrs	r2, r1
 800de76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 f84f 	bl	800df1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d101      	bne.n	800deb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800deb4:	2302      	movs	r3, #2
 800deb6:	e02d      	b.n	800df14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2224      	movs	r2, #36	; 0x24
 800dec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f022 0201 	bic.w	r2, r2, #1
 800dede:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	430a      	orrs	r2, r1
 800def2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f811 	bl	800df1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2220      	movs	r2, #32
 800df06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d108      	bne.n	800df3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df3c:	e031      	b.n	800dfa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df3e:	2310      	movs	r3, #16
 800df40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df42:	2310      	movs	r3, #16
 800df44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	0e5b      	lsrs	r3, r3, #25
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f003 0307 	and.w	r3, r3, #7
 800df54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	0f5b      	lsrs	r3, r3, #29
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	f003 0307 	and.w	r3, r3, #7
 800df64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	7b3a      	ldrb	r2, [r7, #12]
 800df6a:	4911      	ldr	r1, [pc, #68]	; (800dfb0 <UARTEx_SetNbDataToProcess+0x94>)
 800df6c:	5c8a      	ldrb	r2, [r1, r2]
 800df6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df72:	7b3a      	ldrb	r2, [r7, #12]
 800df74:	490f      	ldr	r1, [pc, #60]	; (800dfb4 <UARTEx_SetNbDataToProcess+0x98>)
 800df76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df78:	fb93 f3f2 	sdiv	r3, r3, r2
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df84:	7bfb      	ldrb	r3, [r7, #15]
 800df86:	7b7a      	ldrb	r2, [r7, #13]
 800df88:	4909      	ldr	r1, [pc, #36]	; (800dfb0 <UARTEx_SetNbDataToProcess+0x94>)
 800df8a:	5c8a      	ldrb	r2, [r1, r2]
 800df8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df90:	7b7a      	ldrb	r2, [r7, #13]
 800df92:	4908      	ldr	r1, [pc, #32]	; (800dfb4 <UARTEx_SetNbDataToProcess+0x98>)
 800df94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df96:	fb93 f3f2 	sdiv	r3, r3, r2
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dfa2:	bf00      	nop
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	08014904 	.word	0x08014904
 800dfb4:	0801490c 	.word	0x0801490c

0800dfb8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e03c      	b.n	800e044 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7f4 fb50 	bl	8002684 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2202      	movs	r2, #2
 800dfe8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f022 0201 	bic.w	r2, r2, #1
 800dffa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f85b 	bl	800e0b8 <USART_SetConfig>
 800e002:	4603      	mov	r3, r0
 800e004:	2b01      	cmp	r3, #1
 800e006:	d101      	bne.n	800e00c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e01b      	b.n	800e044 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	685a      	ldr	r2, [r3, #4]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e01a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689a      	ldr	r2, [r3, #8]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e02a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f042 0201 	orr.w	r2, r2, #1
 800e03a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fd5b 	bl	800eaf8 <USART_CheckIdleState>
 800e042:	4603      	mov	r3, r0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	4613      	mov	r3, r2
 800e05a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800e05c:	e018      	b.n	800e090 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e064:	d014      	beq.n	800e090 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e066:	f7f5 fbc3 	bl	80037f0 <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	69ba      	ldr	r2, [r7, #24]
 800e072:	429a      	cmp	r2, r3
 800e074:	d302      	bcc.n	800e07c <USART_WaitOnFlagUntilTimeout+0x30>
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d109      	bne.n	800e090 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	e00f      	b.n	800e0b0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	69da      	ldr	r2, [r3, #28]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	4013      	ands	r3, r2
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	bf0c      	ite	eq
 800e0a0:	2301      	moveq	r3, #1
 800e0a2:	2300      	movne	r3, #0
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d0d7      	beq.n	800e05e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08e      	sub	sp, #56	; 0x38
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	689a      	ldr	r2, [r3, #8]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4bc9      	ldr	r3, [pc, #804]	; (800e40c <USART_SetConfig+0x354>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	6812      	ldr	r2, [r2, #0]
 800e0ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0f0:	430b      	orrs	r3, r1
 800e0f2:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800e0f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e100:	4313      	orrs	r3, r2
 800e102:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	699a      	ldr	r2, [r3, #24]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e110:	4313      	orrs	r3, r2
 800e112:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e11a:	4313      	orrs	r3, r2
 800e11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	4bba      	ldr	r3, [pc, #744]	; (800e410 <USART_SetConfig+0x358>)
 800e126:	4013      	ands	r3, r2
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	6812      	ldr	r2, [r2, #0]
 800e12c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e12e:	430b      	orrs	r3, r1
 800e130:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e138:	f023 010f 	bic.w	r1, r3, #15
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	430a      	orrs	r2, r1
 800e146:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4ab1      	ldr	r2, [pc, #708]	; (800e414 <USART_SetConfig+0x35c>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d176      	bne.n	800e240 <USART_SetConfig+0x188>
 800e152:	4bb1      	ldr	r3, [pc, #708]	; (800e418 <USART_SetConfig+0x360>)
 800e154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e15a:	2b28      	cmp	r3, #40	; 0x28
 800e15c:	d86c      	bhi.n	800e238 <USART_SetConfig+0x180>
 800e15e:	a201      	add	r2, pc, #4	; (adr r2, 800e164 <USART_SetConfig+0xac>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e209 	.word	0x0800e209
 800e168:	0800e239 	.word	0x0800e239
 800e16c:	0800e239 	.word	0x0800e239
 800e170:	0800e239 	.word	0x0800e239
 800e174:	0800e239 	.word	0x0800e239
 800e178:	0800e239 	.word	0x0800e239
 800e17c:	0800e239 	.word	0x0800e239
 800e180:	0800e239 	.word	0x0800e239
 800e184:	0800e211 	.word	0x0800e211
 800e188:	0800e239 	.word	0x0800e239
 800e18c:	0800e239 	.word	0x0800e239
 800e190:	0800e239 	.word	0x0800e239
 800e194:	0800e239 	.word	0x0800e239
 800e198:	0800e239 	.word	0x0800e239
 800e19c:	0800e239 	.word	0x0800e239
 800e1a0:	0800e239 	.word	0x0800e239
 800e1a4:	0800e219 	.word	0x0800e219
 800e1a8:	0800e239 	.word	0x0800e239
 800e1ac:	0800e239 	.word	0x0800e239
 800e1b0:	0800e239 	.word	0x0800e239
 800e1b4:	0800e239 	.word	0x0800e239
 800e1b8:	0800e239 	.word	0x0800e239
 800e1bc:	0800e239 	.word	0x0800e239
 800e1c0:	0800e239 	.word	0x0800e239
 800e1c4:	0800e221 	.word	0x0800e221
 800e1c8:	0800e239 	.word	0x0800e239
 800e1cc:	0800e239 	.word	0x0800e239
 800e1d0:	0800e239 	.word	0x0800e239
 800e1d4:	0800e239 	.word	0x0800e239
 800e1d8:	0800e239 	.word	0x0800e239
 800e1dc:	0800e239 	.word	0x0800e239
 800e1e0:	0800e239 	.word	0x0800e239
 800e1e4:	0800e229 	.word	0x0800e229
 800e1e8:	0800e239 	.word	0x0800e239
 800e1ec:	0800e239 	.word	0x0800e239
 800e1f0:	0800e239 	.word	0x0800e239
 800e1f4:	0800e239 	.word	0x0800e239
 800e1f8:	0800e239 	.word	0x0800e239
 800e1fc:	0800e239 	.word	0x0800e239
 800e200:	0800e239 	.word	0x0800e239
 800e204:	0800e231 	.word	0x0800e231
 800e208:	2301      	movs	r3, #1
 800e20a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e20e:	e112      	b.n	800e436 <USART_SetConfig+0x37e>
 800e210:	2302      	movs	r3, #2
 800e212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e216:	e10e      	b.n	800e436 <USART_SetConfig+0x37e>
 800e218:	2304      	movs	r3, #4
 800e21a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e21e:	e10a      	b.n	800e436 <USART_SetConfig+0x37e>
 800e220:	2308      	movs	r3, #8
 800e222:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e226:	e106      	b.n	800e436 <USART_SetConfig+0x37e>
 800e228:	2310      	movs	r3, #16
 800e22a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e22e:	e102      	b.n	800e436 <USART_SetConfig+0x37e>
 800e230:	2320      	movs	r3, #32
 800e232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e236:	e0fe      	b.n	800e436 <USART_SetConfig+0x37e>
 800e238:	2340      	movs	r3, #64	; 0x40
 800e23a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e23e:	e0fa      	b.n	800e436 <USART_SetConfig+0x37e>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a75      	ldr	r2, [pc, #468]	; (800e41c <USART_SetConfig+0x364>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d130      	bne.n	800e2ac <USART_SetConfig+0x1f4>
 800e24a:	4b73      	ldr	r3, [pc, #460]	; (800e418 <USART_SetConfig+0x360>)
 800e24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24e:	f003 0307 	and.w	r3, r3, #7
 800e252:	2b05      	cmp	r3, #5
 800e254:	d826      	bhi.n	800e2a4 <USART_SetConfig+0x1ec>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <USART_SetConfig+0x1a4>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e275 	.word	0x0800e275
 800e260:	0800e27d 	.word	0x0800e27d
 800e264:	0800e285 	.word	0x0800e285
 800e268:	0800e28d 	.word	0x0800e28d
 800e26c:	0800e295 	.word	0x0800e295
 800e270:	0800e29d 	.word	0x0800e29d
 800e274:	2300      	movs	r3, #0
 800e276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e27a:	e0dc      	b.n	800e436 <USART_SetConfig+0x37e>
 800e27c:	2302      	movs	r3, #2
 800e27e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e282:	e0d8      	b.n	800e436 <USART_SetConfig+0x37e>
 800e284:	2304      	movs	r3, #4
 800e286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e28a:	e0d4      	b.n	800e436 <USART_SetConfig+0x37e>
 800e28c:	2308      	movs	r3, #8
 800e28e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e292:	e0d0      	b.n	800e436 <USART_SetConfig+0x37e>
 800e294:	2310      	movs	r3, #16
 800e296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e29a:	e0cc      	b.n	800e436 <USART_SetConfig+0x37e>
 800e29c:	2320      	movs	r3, #32
 800e29e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2a2:	e0c8      	b.n	800e436 <USART_SetConfig+0x37e>
 800e2a4:	2340      	movs	r3, #64	; 0x40
 800e2a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2aa:	e0c4      	b.n	800e436 <USART_SetConfig+0x37e>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a5b      	ldr	r2, [pc, #364]	; (800e420 <USART_SetConfig+0x368>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d130      	bne.n	800e318 <USART_SetConfig+0x260>
 800e2b6:	4b58      	ldr	r3, [pc, #352]	; (800e418 <USART_SetConfig+0x360>)
 800e2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ba:	f003 0307 	and.w	r3, r3, #7
 800e2be:	2b05      	cmp	r3, #5
 800e2c0:	d826      	bhi.n	800e310 <USART_SetConfig+0x258>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <USART_SetConfig+0x210>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e2e1 	.word	0x0800e2e1
 800e2cc:	0800e2e9 	.word	0x0800e2e9
 800e2d0:	0800e2f1 	.word	0x0800e2f1
 800e2d4:	0800e2f9 	.word	0x0800e2f9
 800e2d8:	0800e301 	.word	0x0800e301
 800e2dc:	0800e309 	.word	0x0800e309
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2e6:	e0a6      	b.n	800e436 <USART_SetConfig+0x37e>
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2ee:	e0a2      	b.n	800e436 <USART_SetConfig+0x37e>
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2f6:	e09e      	b.n	800e436 <USART_SetConfig+0x37e>
 800e2f8:	2308      	movs	r3, #8
 800e2fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2fe:	e09a      	b.n	800e436 <USART_SetConfig+0x37e>
 800e300:	2310      	movs	r3, #16
 800e302:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e306:	e096      	b.n	800e436 <USART_SetConfig+0x37e>
 800e308:	2320      	movs	r3, #32
 800e30a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e30e:	e092      	b.n	800e436 <USART_SetConfig+0x37e>
 800e310:	2340      	movs	r3, #64	; 0x40
 800e312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e316:	e08e      	b.n	800e436 <USART_SetConfig+0x37e>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a41      	ldr	r2, [pc, #260]	; (800e424 <USART_SetConfig+0x36c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	f040 8086 	bne.w	800e430 <USART_SetConfig+0x378>
 800e324:	4b3c      	ldr	r3, [pc, #240]	; (800e418 <USART_SetConfig+0x360>)
 800e326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e32c:	2b28      	cmp	r3, #40	; 0x28
 800e32e:	d87b      	bhi.n	800e428 <USART_SetConfig+0x370>
 800e330:	a201      	add	r2, pc, #4	; (adr r2, 800e338 <USART_SetConfig+0x280>)
 800e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e336:	bf00      	nop
 800e338:	0800e3dd 	.word	0x0800e3dd
 800e33c:	0800e429 	.word	0x0800e429
 800e340:	0800e429 	.word	0x0800e429
 800e344:	0800e429 	.word	0x0800e429
 800e348:	0800e429 	.word	0x0800e429
 800e34c:	0800e429 	.word	0x0800e429
 800e350:	0800e429 	.word	0x0800e429
 800e354:	0800e429 	.word	0x0800e429
 800e358:	0800e3e5 	.word	0x0800e3e5
 800e35c:	0800e429 	.word	0x0800e429
 800e360:	0800e429 	.word	0x0800e429
 800e364:	0800e429 	.word	0x0800e429
 800e368:	0800e429 	.word	0x0800e429
 800e36c:	0800e429 	.word	0x0800e429
 800e370:	0800e429 	.word	0x0800e429
 800e374:	0800e429 	.word	0x0800e429
 800e378:	0800e3ed 	.word	0x0800e3ed
 800e37c:	0800e429 	.word	0x0800e429
 800e380:	0800e429 	.word	0x0800e429
 800e384:	0800e429 	.word	0x0800e429
 800e388:	0800e429 	.word	0x0800e429
 800e38c:	0800e429 	.word	0x0800e429
 800e390:	0800e429 	.word	0x0800e429
 800e394:	0800e429 	.word	0x0800e429
 800e398:	0800e3f5 	.word	0x0800e3f5
 800e39c:	0800e429 	.word	0x0800e429
 800e3a0:	0800e429 	.word	0x0800e429
 800e3a4:	0800e429 	.word	0x0800e429
 800e3a8:	0800e429 	.word	0x0800e429
 800e3ac:	0800e429 	.word	0x0800e429
 800e3b0:	0800e429 	.word	0x0800e429
 800e3b4:	0800e429 	.word	0x0800e429
 800e3b8:	0800e3fd 	.word	0x0800e3fd
 800e3bc:	0800e429 	.word	0x0800e429
 800e3c0:	0800e429 	.word	0x0800e429
 800e3c4:	0800e429 	.word	0x0800e429
 800e3c8:	0800e429 	.word	0x0800e429
 800e3cc:	0800e429 	.word	0x0800e429
 800e3d0:	0800e429 	.word	0x0800e429
 800e3d4:	0800e429 	.word	0x0800e429
 800e3d8:	0800e405 	.word	0x0800e405
 800e3dc:	2301      	movs	r3, #1
 800e3de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3e2:	e028      	b.n	800e436 <USART_SetConfig+0x37e>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3ea:	e024      	b.n	800e436 <USART_SetConfig+0x37e>
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3f2:	e020      	b.n	800e436 <USART_SetConfig+0x37e>
 800e3f4:	2308      	movs	r3, #8
 800e3f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3fa:	e01c      	b.n	800e436 <USART_SetConfig+0x37e>
 800e3fc:	2310      	movs	r3, #16
 800e3fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e402:	e018      	b.n	800e436 <USART_SetConfig+0x37e>
 800e404:	2320      	movs	r3, #32
 800e406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e40a:	e014      	b.n	800e436 <USART_SetConfig+0x37e>
 800e40c:	cfff69f3 	.word	0xcfff69f3
 800e410:	ffffc0f6 	.word	0xffffc0f6
 800e414:	40011000 	.word	0x40011000
 800e418:	58024400 	.word	0x58024400
 800e41c:	40004400 	.word	0x40004400
 800e420:	40004800 	.word	0x40004800
 800e424:	40011400 	.word	0x40011400
 800e428:	2340      	movs	r3, #64	; 0x40
 800e42a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e42e:	e002      	b.n	800e436 <USART_SetConfig+0x37e>
 800e430:	2340      	movs	r3, #64	; 0x40
 800e432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800e436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	f200 8329 	bhi.w	800ea92 <USART_SetConfig+0x9da>
 800e440:	a201      	add	r2, pc, #4	; (adr r2, 800e448 <USART_SetConfig+0x390>)
 800e442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e446:	bf00      	nop
 800e448:	0800e4cd 	.word	0x0800e4cd
 800e44c:	0800e583 	.word	0x0800e583
 800e450:	0800e639 	.word	0x0800e639
 800e454:	0800ea93 	.word	0x0800ea93
 800e458:	0800e6f3 	.word	0x0800e6f3
 800e45c:	0800ea93 	.word	0x0800ea93
 800e460:	0800ea93 	.word	0x0800ea93
 800e464:	0800ea93 	.word	0x0800ea93
 800e468:	0800e7ad 	.word	0x0800e7ad
 800e46c:	0800ea93 	.word	0x0800ea93
 800e470:	0800ea93 	.word	0x0800ea93
 800e474:	0800ea93 	.word	0x0800ea93
 800e478:	0800ea93 	.word	0x0800ea93
 800e47c:	0800ea93 	.word	0x0800ea93
 800e480:	0800ea93 	.word	0x0800ea93
 800e484:	0800ea93 	.word	0x0800ea93
 800e488:	0800e925 	.word	0x0800e925
 800e48c:	0800ea93 	.word	0x0800ea93
 800e490:	0800ea93 	.word	0x0800ea93
 800e494:	0800ea93 	.word	0x0800ea93
 800e498:	0800ea93 	.word	0x0800ea93
 800e49c:	0800ea93 	.word	0x0800ea93
 800e4a0:	0800ea93 	.word	0x0800ea93
 800e4a4:	0800ea93 	.word	0x0800ea93
 800e4a8:	0800ea93 	.word	0x0800ea93
 800e4ac:	0800ea93 	.word	0x0800ea93
 800e4b0:	0800ea93 	.word	0x0800ea93
 800e4b4:	0800ea93 	.word	0x0800ea93
 800e4b8:	0800ea93 	.word	0x0800ea93
 800e4bc:	0800ea93 	.word	0x0800ea93
 800e4c0:	0800ea93 	.word	0x0800ea93
 800e4c4:	0800ea93 	.word	0x0800ea93
 800e4c8:	0800e9e1 	.word	0x0800e9e1
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800e4cc:	f7fb f80a 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800e4d0:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d044      	beq.n	800e564 <USART_SetConfig+0x4ac>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d03e      	beq.n	800e560 <USART_SetConfig+0x4a8>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d038      	beq.n	800e55c <USART_SetConfig+0x4a4>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ee:	2b03      	cmp	r3, #3
 800e4f0:	d032      	beq.n	800e558 <USART_SetConfig+0x4a0>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f6:	2b04      	cmp	r3, #4
 800e4f8:	d02c      	beq.n	800e554 <USART_SetConfig+0x49c>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fe:	2b05      	cmp	r3, #5
 800e500:	d026      	beq.n	800e550 <USART_SetConfig+0x498>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e506:	2b06      	cmp	r3, #6
 800e508:	d020      	beq.n	800e54c <USART_SetConfig+0x494>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50e:	2b07      	cmp	r3, #7
 800e510:	d01a      	beq.n	800e548 <USART_SetConfig+0x490>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e516:	2b08      	cmp	r3, #8
 800e518:	d014      	beq.n	800e544 <USART_SetConfig+0x48c>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51e:	2b09      	cmp	r3, #9
 800e520:	d00e      	beq.n	800e540 <USART_SetConfig+0x488>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e526:	2b0a      	cmp	r3, #10
 800e528:	d008      	beq.n	800e53c <USART_SetConfig+0x484>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52e:	2b0b      	cmp	r3, #11
 800e530:	d102      	bne.n	800e538 <USART_SetConfig+0x480>
 800e532:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e536:	e016      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e538:	2301      	movs	r3, #1
 800e53a:	e014      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e53c:	2380      	movs	r3, #128	; 0x80
 800e53e:	e012      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e540:	2340      	movs	r3, #64	; 0x40
 800e542:	e010      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e544:	2320      	movs	r3, #32
 800e546:	e00e      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e548:	2310      	movs	r3, #16
 800e54a:	e00c      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e54c:	230c      	movs	r3, #12
 800e54e:	e00a      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e550:	230a      	movs	r3, #10
 800e552:	e008      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e554:	2308      	movs	r3, #8
 800e556:	e006      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e558:	2306      	movs	r3, #6
 800e55a:	e004      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e55c:	2304      	movs	r3, #4
 800e55e:	e002      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e560:	2302      	movs	r3, #2
 800e562:	e000      	b.n	800e566 <USART_SetConfig+0x4ae>
 800e564:	2301      	movs	r3, #1
 800e566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e568:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56c:	005a      	lsls	r2, r3, #1
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	085b      	lsrs	r3, r3, #1
 800e574:	441a      	add	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e580:	e28b      	b.n	800ea9a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800e582:	f7fa ffc5 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800e586:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d044      	beq.n	800e61a <USART_SetConfig+0x562>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e594:	2b01      	cmp	r3, #1
 800e596:	d03e      	beq.n	800e616 <USART_SetConfig+0x55e>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d038      	beq.n	800e612 <USART_SetConfig+0x55a>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d032      	beq.n	800e60e <USART_SetConfig+0x556>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	d02c      	beq.n	800e60a <USART_SetConfig+0x552>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b4:	2b05      	cmp	r3, #5
 800e5b6:	d026      	beq.n	800e606 <USART_SetConfig+0x54e>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5bc:	2b06      	cmp	r3, #6
 800e5be:	d020      	beq.n	800e602 <USART_SetConfig+0x54a>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c4:	2b07      	cmp	r3, #7
 800e5c6:	d01a      	beq.n	800e5fe <USART_SetConfig+0x546>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5cc:	2b08      	cmp	r3, #8
 800e5ce:	d014      	beq.n	800e5fa <USART_SetConfig+0x542>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	2b09      	cmp	r3, #9
 800e5d6:	d00e      	beq.n	800e5f6 <USART_SetConfig+0x53e>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5dc:	2b0a      	cmp	r3, #10
 800e5de:	d008      	beq.n	800e5f2 <USART_SetConfig+0x53a>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e4:	2b0b      	cmp	r3, #11
 800e5e6:	d102      	bne.n	800e5ee <USART_SetConfig+0x536>
 800e5e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5ec:	e016      	b.n	800e61c <USART_SetConfig+0x564>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e014      	b.n	800e61c <USART_SetConfig+0x564>
 800e5f2:	2380      	movs	r3, #128	; 0x80
 800e5f4:	e012      	b.n	800e61c <USART_SetConfig+0x564>
 800e5f6:	2340      	movs	r3, #64	; 0x40
 800e5f8:	e010      	b.n	800e61c <USART_SetConfig+0x564>
 800e5fa:	2320      	movs	r3, #32
 800e5fc:	e00e      	b.n	800e61c <USART_SetConfig+0x564>
 800e5fe:	2310      	movs	r3, #16
 800e600:	e00c      	b.n	800e61c <USART_SetConfig+0x564>
 800e602:	230c      	movs	r3, #12
 800e604:	e00a      	b.n	800e61c <USART_SetConfig+0x564>
 800e606:	230a      	movs	r3, #10
 800e608:	e008      	b.n	800e61c <USART_SetConfig+0x564>
 800e60a:	2308      	movs	r3, #8
 800e60c:	e006      	b.n	800e61c <USART_SetConfig+0x564>
 800e60e:	2306      	movs	r3, #6
 800e610:	e004      	b.n	800e61c <USART_SetConfig+0x564>
 800e612:	2304      	movs	r3, #4
 800e614:	e002      	b.n	800e61c <USART_SetConfig+0x564>
 800e616:	2302      	movs	r3, #2
 800e618:	e000      	b.n	800e61c <USART_SetConfig+0x564>
 800e61a:	2301      	movs	r3, #1
 800e61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e622:	005a      	lsls	r2, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	085b      	lsrs	r3, r3, #1
 800e62a:	441a      	add	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	fbb2 f3f3 	udiv	r3, r2, r3
 800e634:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e636:	e230      	b.n	800ea9a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e638:	f107 0318 	add.w	r3, r7, #24
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fc fbed 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800e642:	69fa      	ldr	r2, [r7, #28]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d044      	beq.n	800e6d6 <USART_SetConfig+0x61e>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e650:	2b01      	cmp	r3, #1
 800e652:	d03e      	beq.n	800e6d2 <USART_SetConfig+0x61a>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d038      	beq.n	800e6ce <USART_SetConfig+0x616>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e660:	2b03      	cmp	r3, #3
 800e662:	d032      	beq.n	800e6ca <USART_SetConfig+0x612>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d02c      	beq.n	800e6c6 <USART_SetConfig+0x60e>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e670:	2b05      	cmp	r3, #5
 800e672:	d026      	beq.n	800e6c2 <USART_SetConfig+0x60a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e678:	2b06      	cmp	r3, #6
 800e67a:	d020      	beq.n	800e6be <USART_SetConfig+0x606>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e680:	2b07      	cmp	r3, #7
 800e682:	d01a      	beq.n	800e6ba <USART_SetConfig+0x602>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d014      	beq.n	800e6b6 <USART_SetConfig+0x5fe>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e690:	2b09      	cmp	r3, #9
 800e692:	d00e      	beq.n	800e6b2 <USART_SetConfig+0x5fa>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e698:	2b0a      	cmp	r3, #10
 800e69a:	d008      	beq.n	800e6ae <USART_SetConfig+0x5f6>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a0:	2b0b      	cmp	r3, #11
 800e6a2:	d102      	bne.n	800e6aa <USART_SetConfig+0x5f2>
 800e6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6a8:	e016      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e014      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6ae:	2380      	movs	r3, #128	; 0x80
 800e6b0:	e012      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6b2:	2340      	movs	r3, #64	; 0x40
 800e6b4:	e010      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6b6:	2320      	movs	r3, #32
 800e6b8:	e00e      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6ba:	2310      	movs	r3, #16
 800e6bc:	e00c      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6be:	230c      	movs	r3, #12
 800e6c0:	e00a      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6c2:	230a      	movs	r3, #10
 800e6c4:	e008      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6c6:	2308      	movs	r3, #8
 800e6c8:	e006      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6ca:	2306      	movs	r3, #6
 800e6cc:	e004      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6ce:	2304      	movs	r3, #4
 800e6d0:	e002      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6d2:	2302      	movs	r3, #2
 800e6d4:	e000      	b.n	800e6d8 <USART_SetConfig+0x620>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6dc:	005a      	lsls	r2, r3, #1
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	085b      	lsrs	r3, r3, #1
 800e6e4:	441a      	add	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ee:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e6f0:	e1d3      	b.n	800ea9a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6f2:	f107 030c 	add.w	r3, r7, #12
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fc fce4 	bl	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e702:	2b00      	cmp	r3, #0
 800e704:	d044      	beq.n	800e790 <USART_SetConfig+0x6d8>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d03e      	beq.n	800e78c <USART_SetConfig+0x6d4>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e712:	2b02      	cmp	r3, #2
 800e714:	d038      	beq.n	800e788 <USART_SetConfig+0x6d0>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71a:	2b03      	cmp	r3, #3
 800e71c:	d032      	beq.n	800e784 <USART_SetConfig+0x6cc>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e722:	2b04      	cmp	r3, #4
 800e724:	d02c      	beq.n	800e780 <USART_SetConfig+0x6c8>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72a:	2b05      	cmp	r3, #5
 800e72c:	d026      	beq.n	800e77c <USART_SetConfig+0x6c4>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e732:	2b06      	cmp	r3, #6
 800e734:	d020      	beq.n	800e778 <USART_SetConfig+0x6c0>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73a:	2b07      	cmp	r3, #7
 800e73c:	d01a      	beq.n	800e774 <USART_SetConfig+0x6bc>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e742:	2b08      	cmp	r3, #8
 800e744:	d014      	beq.n	800e770 <USART_SetConfig+0x6b8>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74a:	2b09      	cmp	r3, #9
 800e74c:	d00e      	beq.n	800e76c <USART_SetConfig+0x6b4>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e752:	2b0a      	cmp	r3, #10
 800e754:	d008      	beq.n	800e768 <USART_SetConfig+0x6b0>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75a:	2b0b      	cmp	r3, #11
 800e75c:	d102      	bne.n	800e764 <USART_SetConfig+0x6ac>
 800e75e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e762:	e016      	b.n	800e792 <USART_SetConfig+0x6da>
 800e764:	2301      	movs	r3, #1
 800e766:	e014      	b.n	800e792 <USART_SetConfig+0x6da>
 800e768:	2380      	movs	r3, #128	; 0x80
 800e76a:	e012      	b.n	800e792 <USART_SetConfig+0x6da>
 800e76c:	2340      	movs	r3, #64	; 0x40
 800e76e:	e010      	b.n	800e792 <USART_SetConfig+0x6da>
 800e770:	2320      	movs	r3, #32
 800e772:	e00e      	b.n	800e792 <USART_SetConfig+0x6da>
 800e774:	2310      	movs	r3, #16
 800e776:	e00c      	b.n	800e792 <USART_SetConfig+0x6da>
 800e778:	230c      	movs	r3, #12
 800e77a:	e00a      	b.n	800e792 <USART_SetConfig+0x6da>
 800e77c:	230a      	movs	r3, #10
 800e77e:	e008      	b.n	800e792 <USART_SetConfig+0x6da>
 800e780:	2308      	movs	r3, #8
 800e782:	e006      	b.n	800e792 <USART_SetConfig+0x6da>
 800e784:	2306      	movs	r3, #6
 800e786:	e004      	b.n	800e792 <USART_SetConfig+0x6da>
 800e788:	2304      	movs	r3, #4
 800e78a:	e002      	b.n	800e792 <USART_SetConfig+0x6da>
 800e78c:	2302      	movs	r3, #2
 800e78e:	e000      	b.n	800e792 <USART_SetConfig+0x6da>
 800e790:	2301      	movs	r3, #1
 800e792:	fbb2 f3f3 	udiv	r3, r2, r3
 800e796:	005a      	lsls	r2, r3, #1
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	085b      	lsrs	r3, r3, #1
 800e79e:	441a      	add	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7a8:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e7aa:	e176      	b.n	800ea9a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7ac:	4b89      	ldr	r3, [pc, #548]	; (800e9d4 <USART_SetConfig+0x91c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f003 0320 	and.w	r3, r3, #32
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d05d      	beq.n	800e874 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e7b8:	4b86      	ldr	r3, [pc, #536]	; (800e9d4 <USART_SetConfig+0x91c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	08db      	lsrs	r3, r3, #3
 800e7be:	f003 0303 	and.w	r3, r3, #3
 800e7c2:	4a85      	ldr	r2, [pc, #532]	; (800e9d8 <USART_SetConfig+0x920>)
 800e7c4:	40da      	lsrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d044      	beq.n	800e858 <USART_SetConfig+0x7a0>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d03e      	beq.n	800e854 <USART_SetConfig+0x79c>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d038      	beq.n	800e850 <USART_SetConfig+0x798>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d032      	beq.n	800e84c <USART_SetConfig+0x794>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d02c      	beq.n	800e848 <USART_SetConfig+0x790>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f2:	2b05      	cmp	r3, #5
 800e7f4:	d026      	beq.n	800e844 <USART_SetConfig+0x78c>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fa:	2b06      	cmp	r3, #6
 800e7fc:	d020      	beq.n	800e840 <USART_SetConfig+0x788>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e802:	2b07      	cmp	r3, #7
 800e804:	d01a      	beq.n	800e83c <USART_SetConfig+0x784>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	2b08      	cmp	r3, #8
 800e80c:	d014      	beq.n	800e838 <USART_SetConfig+0x780>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e812:	2b09      	cmp	r3, #9
 800e814:	d00e      	beq.n	800e834 <USART_SetConfig+0x77c>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81a:	2b0a      	cmp	r3, #10
 800e81c:	d008      	beq.n	800e830 <USART_SetConfig+0x778>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e822:	2b0b      	cmp	r3, #11
 800e824:	d102      	bne.n	800e82c <USART_SetConfig+0x774>
 800e826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e82a:	e016      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e014      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e830:	2380      	movs	r3, #128	; 0x80
 800e832:	e012      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e834:	2340      	movs	r3, #64	; 0x40
 800e836:	e010      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e838:	2320      	movs	r3, #32
 800e83a:	e00e      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e83c:	2310      	movs	r3, #16
 800e83e:	e00c      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e840:	230c      	movs	r3, #12
 800e842:	e00a      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e844:	230a      	movs	r3, #10
 800e846:	e008      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e848:	2308      	movs	r3, #8
 800e84a:	e006      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e84c:	2306      	movs	r3, #6
 800e84e:	e004      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e850:	2304      	movs	r3, #4
 800e852:	e002      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e854:	2302      	movs	r3, #2
 800e856:	e000      	b.n	800e85a <USART_SetConfig+0x7a2>
 800e858:	2301      	movs	r3, #1
 800e85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e85e:	005a      	lsls	r2, r3, #1
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	085b      	lsrs	r3, r3, #1
 800e866:	441a      	add	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e870:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e872:	e112      	b.n	800ea9a <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d044      	beq.n	800e906 <USART_SetConfig+0x84e>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e880:	2b01      	cmp	r3, #1
 800e882:	d03e      	beq.n	800e902 <USART_SetConfig+0x84a>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d038      	beq.n	800e8fe <USART_SetConfig+0x846>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	2b03      	cmp	r3, #3
 800e892:	d032      	beq.n	800e8fa <USART_SetConfig+0x842>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	2b04      	cmp	r3, #4
 800e89a:	d02c      	beq.n	800e8f6 <USART_SetConfig+0x83e>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	d026      	beq.n	800e8f2 <USART_SetConfig+0x83a>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a8:	2b06      	cmp	r3, #6
 800e8aa:	d020      	beq.n	800e8ee <USART_SetConfig+0x836>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d01a      	beq.n	800e8ea <USART_SetConfig+0x832>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	2b08      	cmp	r3, #8
 800e8ba:	d014      	beq.n	800e8e6 <USART_SetConfig+0x82e>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	d00e      	beq.n	800e8e2 <USART_SetConfig+0x82a>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c8:	2b0a      	cmp	r3, #10
 800e8ca:	d008      	beq.n	800e8de <USART_SetConfig+0x826>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d0:	2b0b      	cmp	r3, #11
 800e8d2:	d102      	bne.n	800e8da <USART_SetConfig+0x822>
 800e8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8d8:	e016      	b.n	800e908 <USART_SetConfig+0x850>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e014      	b.n	800e908 <USART_SetConfig+0x850>
 800e8de:	2380      	movs	r3, #128	; 0x80
 800e8e0:	e012      	b.n	800e908 <USART_SetConfig+0x850>
 800e8e2:	2340      	movs	r3, #64	; 0x40
 800e8e4:	e010      	b.n	800e908 <USART_SetConfig+0x850>
 800e8e6:	2320      	movs	r3, #32
 800e8e8:	e00e      	b.n	800e908 <USART_SetConfig+0x850>
 800e8ea:	2310      	movs	r3, #16
 800e8ec:	e00c      	b.n	800e908 <USART_SetConfig+0x850>
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	e00a      	b.n	800e908 <USART_SetConfig+0x850>
 800e8f2:	230a      	movs	r3, #10
 800e8f4:	e008      	b.n	800e908 <USART_SetConfig+0x850>
 800e8f6:	2308      	movs	r3, #8
 800e8f8:	e006      	b.n	800e908 <USART_SetConfig+0x850>
 800e8fa:	2306      	movs	r3, #6
 800e8fc:	e004      	b.n	800e908 <USART_SetConfig+0x850>
 800e8fe:	2304      	movs	r3, #4
 800e900:	e002      	b.n	800e908 <USART_SetConfig+0x850>
 800e902:	2302      	movs	r3, #2
 800e904:	e000      	b.n	800e908 <USART_SetConfig+0x850>
 800e906:	2301      	movs	r3, #1
 800e908:	4a33      	ldr	r2, [pc, #204]	; (800e9d8 <USART_SetConfig+0x920>)
 800e90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90e:	005a      	lsls	r2, r3, #1
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	085b      	lsrs	r3, r3, #1
 800e916:	441a      	add	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e920:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e922:	e0ba      	b.n	800ea9a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d044      	beq.n	800e9b6 <USART_SetConfig+0x8fe>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	2b01      	cmp	r3, #1
 800e932:	d03e      	beq.n	800e9b2 <USART_SetConfig+0x8fa>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d038      	beq.n	800e9ae <USART_SetConfig+0x8f6>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	2b03      	cmp	r3, #3
 800e942:	d032      	beq.n	800e9aa <USART_SetConfig+0x8f2>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d02c      	beq.n	800e9a6 <USART_SetConfig+0x8ee>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	2b05      	cmp	r3, #5
 800e952:	d026      	beq.n	800e9a2 <USART_SetConfig+0x8ea>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e958:	2b06      	cmp	r3, #6
 800e95a:	d020      	beq.n	800e99e <USART_SetConfig+0x8e6>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e960:	2b07      	cmp	r3, #7
 800e962:	d01a      	beq.n	800e99a <USART_SetConfig+0x8e2>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e968:	2b08      	cmp	r3, #8
 800e96a:	d014      	beq.n	800e996 <USART_SetConfig+0x8de>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e970:	2b09      	cmp	r3, #9
 800e972:	d00e      	beq.n	800e992 <USART_SetConfig+0x8da>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e978:	2b0a      	cmp	r3, #10
 800e97a:	d008      	beq.n	800e98e <USART_SetConfig+0x8d6>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e980:	2b0b      	cmp	r3, #11
 800e982:	d102      	bne.n	800e98a <USART_SetConfig+0x8d2>
 800e984:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e988:	e016      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e014      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e98e:	2380      	movs	r3, #128	; 0x80
 800e990:	e012      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e992:	2340      	movs	r3, #64	; 0x40
 800e994:	e010      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e996:	2320      	movs	r3, #32
 800e998:	e00e      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e99a:	2310      	movs	r3, #16
 800e99c:	e00c      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e99e:	230c      	movs	r3, #12
 800e9a0:	e00a      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9a2:	230a      	movs	r3, #10
 800e9a4:	e008      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9a6:	2308      	movs	r3, #8
 800e9a8:	e006      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9aa:	2306      	movs	r3, #6
 800e9ac:	e004      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9ae:	2304      	movs	r3, #4
 800e9b0:	e002      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	e000      	b.n	800e9b8 <USART_SetConfig+0x900>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4a08      	ldr	r2, [pc, #32]	; (800e9dc <USART_SetConfig+0x924>)
 800e9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9be:	005a      	lsls	r2, r3, #1
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	085b      	lsrs	r3, r3, #1
 800e9c6:	441a      	add	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e9d2:	e062      	b.n	800ea9a <USART_SetConfig+0x9e2>
 800e9d4:	58024400 	.word	0x58024400
 800e9d8:	03d09000 	.word	0x03d09000
 800e9dc:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d044      	beq.n	800ea72 <USART_SetConfig+0x9ba>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d03e      	beq.n	800ea6e <USART_SetConfig+0x9b6>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d038      	beq.n	800ea6a <USART_SetConfig+0x9b2>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d032      	beq.n	800ea66 <USART_SetConfig+0x9ae>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea04:	2b04      	cmp	r3, #4
 800ea06:	d02c      	beq.n	800ea62 <USART_SetConfig+0x9aa>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0c:	2b05      	cmp	r3, #5
 800ea0e:	d026      	beq.n	800ea5e <USART_SetConfig+0x9a6>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea14:	2b06      	cmp	r3, #6
 800ea16:	d020      	beq.n	800ea5a <USART_SetConfig+0x9a2>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1c:	2b07      	cmp	r3, #7
 800ea1e:	d01a      	beq.n	800ea56 <USART_SetConfig+0x99e>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea24:	2b08      	cmp	r3, #8
 800ea26:	d014      	beq.n	800ea52 <USART_SetConfig+0x99a>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2c:	2b09      	cmp	r3, #9
 800ea2e:	d00e      	beq.n	800ea4e <USART_SetConfig+0x996>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	2b0a      	cmp	r3, #10
 800ea36:	d008      	beq.n	800ea4a <USART_SetConfig+0x992>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3c:	2b0b      	cmp	r3, #11
 800ea3e:	d102      	bne.n	800ea46 <USART_SetConfig+0x98e>
 800ea40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea44:	e016      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea46:	2301      	movs	r3, #1
 800ea48:	e014      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea4a:	2380      	movs	r3, #128	; 0x80
 800ea4c:	e012      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea4e:	2340      	movs	r3, #64	; 0x40
 800ea50:	e010      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea52:	2320      	movs	r3, #32
 800ea54:	e00e      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea56:	2310      	movs	r3, #16
 800ea58:	e00c      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea5a:	230c      	movs	r3, #12
 800ea5c:	e00a      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea5e:	230a      	movs	r3, #10
 800ea60:	e008      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea62:	2308      	movs	r3, #8
 800ea64:	e006      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea66:	2306      	movs	r3, #6
 800ea68:	e004      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea6a:	2304      	movs	r3, #4
 800ea6c:	e002      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea6e:	2302      	movs	r3, #2
 800ea70:	e000      	b.n	800ea74 <USART_SetConfig+0x9bc>
 800ea72:	2301      	movs	r3, #1
 800ea74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ea78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea7c:	005a      	lsls	r2, r3, #1
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	085b      	lsrs	r3, r3, #1
 800ea84:	441a      	add	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ea90:	e003      	b.n	800ea9a <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800ea98:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	2b0f      	cmp	r3, #15
 800ea9e:	d916      	bls.n	800eace <USART_SetConfig+0xa16>
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa6:	d212      	bcs.n	800eace <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	f023 030f 	bic.w	r3, r3, #15
 800eab0:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	085b      	lsrs	r3, r3, #1
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	f003 0307 	and.w	r3, r3, #7
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eac0:	4313      	orrs	r3, r2
 800eac2:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eaca:	60da      	str	r2, [r3, #12]
 800eacc:	e002      	b.n	800ead4 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2201      	movs	r2, #1
 800eade:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800eaec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3738      	adds	r7, #56	; 0x38
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af02      	add	r7, sp, #8
 800eafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb06:	f7f4 fe73 	bl	80037f0 <HAL_GetTick>
 800eb0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 0308 	and.w	r3, r3, #8
 800eb16:	2b08      	cmp	r3, #8
 800eb18:	d10e      	bne.n	800eb38 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800eb1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff fa8f 	bl	800e04c <USART_WaitOnFlagUntilTimeout>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb34:	2303      	movs	r3, #3
 800eb36:	e01e      	b.n	800eb76 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f003 0304 	and.w	r3, r3, #4
 800eb42:	2b04      	cmp	r3, #4
 800eb44:	d10e      	bne.n	800eb64 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800eb46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff fa79 	bl	800e04c <USART_WaitOnFlagUntilTimeout>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d001      	beq.n	800eb64 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb60:	2303      	movs	r3, #3
 800eb62:	e008      	b.n	800eb76 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b085      	sub	sp, #20
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d101      	bne.n	800eb94 <HAL_USARTEx_DisableFifoMode+0x16>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e027      	b.n	800ebe4 <HAL_USARTEx_DisableFifoMode+0x66>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 0201 	bic.w	r2, r2, #1
 800ebba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ebc2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d101      	bne.n	800ec08 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800ec04:	2302      	movs	r3, #2
 800ec06:	e02d      	b.n	800ec64 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f022 0201 	bic.w	r2, r2, #1
 800ec2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f84f 	bl	800ece8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800ec80:	2302      	movs	r3, #2
 800ec82:	e02d      	b.n	800ece0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2202      	movs	r2, #2
 800ec90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f022 0201 	bic.w	r2, r2, #1
 800ecaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	430a      	orrs	r2, r1
 800ecbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f811 	bl	800ece8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed04:	e02f      	b.n	800ed66 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed06:	2310      	movs	r3, #16
 800ed08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed0a:	2310      	movs	r3, #16
 800ed0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ed14:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	f003 0307 	and.w	r3, r3, #7
 800ed1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800ed24:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	f003 0307 	and.w	r3, r3, #7
 800ed2c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
 800ed30:	7b3a      	ldrb	r2, [r7, #12]
 800ed32:	4910      	ldr	r1, [pc, #64]	; (800ed74 <USARTEx_SetNbDataToProcess+0x8c>)
 800ed34:	5c8a      	ldrb	r2, [r1, r2]
 800ed36:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800ed3a:	7b3a      	ldrb	r2, [r7, #12]
 800ed3c:	490e      	ldr	r1, [pc, #56]	; (800ed78 <USARTEx_SetNbDataToProcess+0x90>)
 800ed3e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	7b7a      	ldrb	r2, [r7, #13]
 800ed4e:	4909      	ldr	r1, [pc, #36]	; (800ed74 <USARTEx_SetNbDataToProcess+0x8c>)
 800ed50:	5c8a      	ldrb	r2, [r1, r2]
 800ed52:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800ed56:	7b7a      	ldrb	r2, [r7, #13]
 800ed58:	4907      	ldr	r1, [pc, #28]	; (800ed78 <USARTEx_SetNbDataToProcess+0x90>)
 800ed5a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800ed66:	bf00      	nop
 800ed68:	3714      	adds	r7, #20
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	08014914 	.word	0x08014914
 800ed78:	0801491c 	.word	0x0801491c

0800ed7c <__NVIC_SetPriority>:
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	6039      	str	r1, [r7, #0]
 800ed86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ed88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	db0a      	blt.n	800eda6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	490c      	ldr	r1, [pc, #48]	; (800edc8 <__NVIC_SetPriority+0x4c>)
 800ed96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed9a:	0112      	lsls	r2, r2, #4
 800ed9c:	b2d2      	uxtb	r2, r2
 800ed9e:	440b      	add	r3, r1
 800eda0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800eda4:	e00a      	b.n	800edbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	4908      	ldr	r1, [pc, #32]	; (800edcc <__NVIC_SetPriority+0x50>)
 800edac:	88fb      	ldrh	r3, [r7, #6]
 800edae:	f003 030f 	and.w	r3, r3, #15
 800edb2:	3b04      	subs	r3, #4
 800edb4:	0112      	lsls	r2, r2, #4
 800edb6:	b2d2      	uxtb	r2, r2
 800edb8:	440b      	add	r3, r1
 800edba:	761a      	strb	r2, [r3, #24]
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	e000e100 	.word	0xe000e100
 800edcc:	e000ed00 	.word	0xe000ed00

0800edd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800edd4:	4b05      	ldr	r3, [pc, #20]	; (800edec <SysTick_Handler+0x1c>)
 800edd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800edd8:	f001 fd28 	bl	801082c <xTaskGetSchedulerState>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d001      	beq.n	800ede6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ede2:	f002 fb11 	bl	8011408 <xPortSysTickHandler>
  }
}
 800ede6:	bf00      	nop
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	e000e010 	.word	0xe000e010

0800edf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800edf0:	b580      	push	{r7, lr}
 800edf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800edf4:	2100      	movs	r1, #0
 800edf6:	f06f 0004 	mvn.w	r0, #4
 800edfa:	f7ff ffbf 	bl	800ed7c <__NVIC_SetPriority>
#endif
}
 800edfe:	bf00      	nop
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee0a:	f3ef 8305 	mrs	r3, IPSR
 800ee0e:	603b      	str	r3, [r7, #0]
  return(result);
 800ee10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ee16:	f06f 0305 	mvn.w	r3, #5
 800ee1a:	607b      	str	r3, [r7, #4]
 800ee1c:	e00c      	b.n	800ee38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ee1e:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <osKernelInitialize+0x44>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d105      	bne.n	800ee32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ee26:	4b08      	ldr	r3, [pc, #32]	; (800ee48 <osKernelInitialize+0x44>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	607b      	str	r3, [r7, #4]
 800ee30:	e002      	b.n	800ee38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee38:	687b      	ldr	r3, [r7, #4]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	370c      	adds	r7, #12
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	24000cb0 	.word	0x24000cb0

0800ee4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee52:	f3ef 8305 	mrs	r3, IPSR
 800ee56:	603b      	str	r3, [r7, #0]
  return(result);
 800ee58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ee5e:	f06f 0305 	mvn.w	r3, #5
 800ee62:	607b      	str	r3, [r7, #4]
 800ee64:	e010      	b.n	800ee88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ee66:	4b0b      	ldr	r3, [pc, #44]	; (800ee94 <osKernelStart+0x48>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d109      	bne.n	800ee82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ee6e:	f7ff ffbf 	bl	800edf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ee72:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <osKernelStart+0x48>)
 800ee74:	2202      	movs	r2, #2
 800ee76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee78:	f001 f87c 	bl	800ff74 <vTaskStartScheduler>
      stat = osOK;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	607b      	str	r3, [r7, #4]
 800ee80:	e002      	b.n	800ee88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ee82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee88:	687b      	ldr	r3, [r7, #4]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	24000cb0 	.word	0x24000cb0

0800ee98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08e      	sub	sp, #56	; 0x38
 800ee9c:	af04      	add	r7, sp, #16
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eea4:	2300      	movs	r3, #0
 800eea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eea8:	f3ef 8305 	mrs	r3, IPSR
 800eeac:	617b      	str	r3, [r7, #20]
  return(result);
 800eeae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d17e      	bne.n	800efb2 <osThreadNew+0x11a>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d07b      	beq.n	800efb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eeba:	2380      	movs	r3, #128	; 0x80
 800eebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eebe:	2318      	movs	r3, #24
 800eec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eec2:	2300      	movs	r3, #0
 800eec4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d045      	beq.n	800ef5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d002      	beq.n	800eee0 <osThreadNew+0x48>
        name = attr->name;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	699b      	ldr	r3, [r3, #24]
 800eeec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d008      	beq.n	800ef06 <osThreadNew+0x6e>
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	2b38      	cmp	r3, #56	; 0x38
 800eef8:	d805      	bhi.n	800ef06 <osThreadNew+0x6e>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f003 0301 	and.w	r3, r3, #1
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <osThreadNew+0x72>
        return (NULL);
 800ef06:	2300      	movs	r3, #0
 800ef08:	e054      	b.n	800efb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	089b      	lsrs	r3, r3, #2
 800ef18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00e      	beq.n	800ef40 <osThreadNew+0xa8>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	2bbb      	cmp	r3, #187	; 0xbb
 800ef28:	d90a      	bls.n	800ef40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	695b      	ldr	r3, [r3, #20]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d002      	beq.n	800ef40 <osThreadNew+0xa8>
        mem = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	61bb      	str	r3, [r7, #24]
 800ef3e:	e010      	b.n	800ef62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10c      	bne.n	800ef62 <osThreadNew+0xca>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d108      	bne.n	800ef62 <osThreadNew+0xca>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d104      	bne.n	800ef62 <osThreadNew+0xca>
          mem = 0;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	61bb      	str	r3, [r7, #24]
 800ef5c:	e001      	b.n	800ef62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d110      	bne.n	800ef8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef70:	9202      	str	r2, [sp, #8]
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	6a3a      	ldr	r2, [r7, #32]
 800ef7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f000 fe0c 	bl	800fb9c <xTaskCreateStatic>
 800ef84:	4603      	mov	r3, r0
 800ef86:	613b      	str	r3, [r7, #16]
 800ef88:	e013      	b.n	800efb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d110      	bne.n	800efb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef90:	6a3b      	ldr	r3, [r7, #32]
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	f107 0310 	add.w	r3, r7, #16
 800ef98:	9301      	str	r3, [sp, #4]
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f000 fe57 	bl	800fc56 <xTaskCreate>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d001      	beq.n	800efb2 <osThreadNew+0x11a>
            hTask = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800efb2:	693b      	ldr	r3, [r7, #16]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3728      	adds	r7, #40	; 0x28
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efc4:	f3ef 8305 	mrs	r3, IPSR
 800efc8:	60bb      	str	r3, [r7, #8]
  return(result);
 800efca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d003      	beq.n	800efd8 <osDelay+0x1c>
    stat = osErrorISR;
 800efd0:	f06f 0305 	mvn.w	r3, #5
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	e007      	b.n	800efe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d002      	beq.n	800efe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 ff92 	bl	800ff0c <vTaskDelay>
    }
  }

  return (stat);
 800efe8:	68fb      	ldr	r3, [r7, #12]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
	...

0800eff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	4a07      	ldr	r2, [pc, #28]	; (800f020 <vApplicationGetIdleTaskMemory+0x2c>)
 800f004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	4a06      	ldr	r2, [pc, #24]	; (800f024 <vApplicationGetIdleTaskMemory+0x30>)
 800f00a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2280      	movs	r2, #128	; 0x80
 800f010:	601a      	str	r2, [r3, #0]
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	24000cb4 	.word	0x24000cb4
 800f024:	24000d70 	.word	0x24000d70

0800f028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a07      	ldr	r2, [pc, #28]	; (800f054 <vApplicationGetTimerTaskMemory+0x2c>)
 800f038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	4a06      	ldr	r2, [pc, #24]	; (800f058 <vApplicationGetTimerTaskMemory+0x30>)
 800f03e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f046:	601a      	str	r2, [r3, #0]
}
 800f048:	bf00      	nop
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	24000f70 	.word	0x24000f70
 800f058:	2400102c 	.word	0x2400102c

0800f05c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f103 0208 	add.w	r2, r3, #8
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f103 0208 	add.w	r2, r3, #8
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f103 0208 	add.w	r2, r3, #8
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f0aa:	bf00      	nop
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	b085      	sub	sp, #20
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	689a      	ldr	r2, [r3, #8]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	683a      	ldr	r2, [r7, #0]
 800f0da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
}
 800f0f2:	bf00      	nop
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0fe:	b480      	push	{r7}
 800f100:	b085      	sub	sp, #20
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f114:	d103      	bne.n	800f11e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	e00c      	b.n	800f138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	3308      	adds	r3, #8
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	e002      	b.n	800f12c <vListInsert+0x2e>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	429a      	cmp	r2, r3
 800f136:	d2f6      	bcs.n	800f126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	6892      	ldr	r2, [r2, #8]
 800f186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	6852      	ldr	r2, [r2, #4]
 800f190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d103      	bne.n	800f1a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	689a      	ldr	r2, [r3, #8]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	1e5a      	subs	r2, r3, #1
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f1ee:	f002 f879 	bl	80112e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fa:	68f9      	ldr	r1, [r7, #12]
 800f1fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1fe:	fb01 f303 	mul.w	r3, r1, r3
 800f202:	441a      	add	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2200      	movs	r2, #0
 800f20c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21e:	3b01      	subs	r3, #1
 800f220:	68f9      	ldr	r1, [r7, #12]
 800f222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f224:	fb01 f303 	mul.w	r3, r1, r3
 800f228:	441a      	add	r2, r3
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	22ff      	movs	r2, #255	; 0xff
 800f232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	22ff      	movs	r2, #255	; 0xff
 800f23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d114      	bne.n	800f26e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d01a      	beq.n	800f282 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	3310      	adds	r3, #16
 800f250:	4618      	mov	r0, r3
 800f252:	f001 f929 	bl	80104a8 <xTaskRemoveFromEventList>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d012      	beq.n	800f282 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f25c:	4b0c      	ldr	r3, [pc, #48]	; (800f290 <xQueueGenericReset+0xcc>)
 800f25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	e009      	b.n	800f282 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3310      	adds	r3, #16
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff fef2 	bl	800f05c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	3324      	adds	r3, #36	; 0x24
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7ff feed 	bl	800f05c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f282:	f002 f85f 	bl	8011344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f286:	2301      	movs	r3, #1
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	e000ed04 	.word	0xe000ed04

0800f294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08e      	sub	sp, #56	; 0x38
 800f298:	af02      	add	r7, sp, #8
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10a      	bne.n	800f2da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2d6:	bf00      	nop
 800f2d8:	e7fe      	b.n	800f2d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <xQueueGenericCreateStatic+0x52>
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <xQueueGenericCreateStatic+0x56>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e000      	b.n	800f2ec <xQueueGenericCreateStatic+0x58>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10a      	bne.n	800f306 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	623b      	str	r3, [r7, #32]
}
 800f302:	bf00      	nop
 800f304:	e7fe      	b.n	800f304 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <xQueueGenericCreateStatic+0x7e>
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <xQueueGenericCreateStatic+0x82>
 800f312:	2301      	movs	r3, #1
 800f314:	e000      	b.n	800f318 <xQueueGenericCreateStatic+0x84>
 800f316:	2300      	movs	r3, #0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10a      	bne.n	800f332 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f320:	f383 8811 	msr	BASEPRI, r3
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	61fb      	str	r3, [r7, #28]
}
 800f32e:	bf00      	nop
 800f330:	e7fe      	b.n	800f330 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f332:	2350      	movs	r3, #80	; 0x50
 800f334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	2b50      	cmp	r3, #80	; 0x50
 800f33a:	d00a      	beq.n	800f352 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f340:	f383 8811 	msr	BASEPRI, r3
 800f344:	f3bf 8f6f 	isb	sy
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	61bb      	str	r3, [r7, #24]
}
 800f34e:	bf00      	nop
 800f350:	e7fe      	b.n	800f350 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f352:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00d      	beq.n	800f37a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f366:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	4613      	mov	r3, r2
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 f805 	bl	800f384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3730      	adds	r7, #48	; 0x30
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d103      	bne.n	800f3a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	69ba      	ldr	r2, [r7, #24]
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	e002      	b.n	800f3a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	69b8      	ldr	r0, [r7, #24]
 800f3b6:	f7ff ff05 	bl	800f1c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	78fa      	ldrb	r2, [r7, #3]
 800f3be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
	...

0800f3cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08e      	sub	sp, #56	; 0x38
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
 800f3d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10a      	bne.n	800f3fe <xQueueGenericSend+0x32>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d103      	bne.n	800f40c <xQueueGenericSend+0x40>
 800f404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <xQueueGenericSend+0x44>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <xQueueGenericSend+0x46>
 800f410:	2300      	movs	r3, #0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d10a      	bne.n	800f42c <xQueueGenericSend+0x60>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f428:	bf00      	nop
 800f42a:	e7fe      	b.n	800f42a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d103      	bne.n	800f43a <xQueueGenericSend+0x6e>
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f436:	2b01      	cmp	r3, #1
 800f438:	d101      	bne.n	800f43e <xQueueGenericSend+0x72>
 800f43a:	2301      	movs	r3, #1
 800f43c:	e000      	b.n	800f440 <xQueueGenericSend+0x74>
 800f43e:	2300      	movs	r3, #0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <xQueueGenericSend+0x8e>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	623b      	str	r3, [r7, #32]
}
 800f456:	bf00      	nop
 800f458:	e7fe      	b.n	800f458 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f45a:	f001 f9e7 	bl	801082c <xTaskGetSchedulerState>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <xQueueGenericSend+0x9e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <xQueueGenericSend+0xa2>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e000      	b.n	800f470 <xQueueGenericSend+0xa4>
 800f46e:	2300      	movs	r3, #0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10a      	bne.n	800f48a <xQueueGenericSend+0xbe>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	61fb      	str	r3, [r7, #28]
}
 800f486:	bf00      	nop
 800f488:	e7fe      	b.n	800f488 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f48a:	f001 ff2b 	bl	80112e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f496:	429a      	cmp	r2, r3
 800f498:	d302      	bcc.n	800f4a0 <xQueueGenericSend+0xd4>
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d129      	bne.n	800f4f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	68b9      	ldr	r1, [r7, #8]
 800f4a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4a6:	f000 fa0b 	bl	800f8c0 <prvCopyDataToQueue>
 800f4aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d010      	beq.n	800f4d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	3324      	adds	r3, #36	; 0x24
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f000 fff5 	bl	80104a8 <xTaskRemoveFromEventList>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d013      	beq.n	800f4ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f4c4:	4b3f      	ldr	r3, [pc, #252]	; (800f5c4 <xQueueGenericSend+0x1f8>)
 800f4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	e00a      	b.n	800f4ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d007      	beq.n	800f4ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f4dc:	4b39      	ldr	r3, [pc, #228]	; (800f5c4 <xQueueGenericSend+0x1f8>)
 800f4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f4ec:	f001 ff2a 	bl	8011344 <vPortExitCritical>
				return pdPASS;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e063      	b.n	800f5bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d103      	bne.n	800f502 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f4fa:	f001 ff23 	bl	8011344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f4fe:	2300      	movs	r3, #0
 800f500:	e05c      	b.n	800f5bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f504:	2b00      	cmp	r3, #0
 800f506:	d106      	bne.n	800f516 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f508:	f107 0314 	add.w	r3, r7, #20
 800f50c:	4618      	mov	r0, r3
 800f50e:	f001 f82f 	bl	8010570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f512:	2301      	movs	r3, #1
 800f514:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f516:	f001 ff15 	bl	8011344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f51a:	f000 fd9b 	bl	8010054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f51e:	f001 fee1 	bl	80112e4 <vPortEnterCritical>
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f528:	b25b      	sxtb	r3, r3
 800f52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f52e:	d103      	bne.n	800f538 <xQueueGenericSend+0x16c>
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	2200      	movs	r2, #0
 800f534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f53e:	b25b      	sxtb	r3, r3
 800f540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f544:	d103      	bne.n	800f54e <xQueueGenericSend+0x182>
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f54e:	f001 fef9 	bl	8011344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f552:	1d3a      	adds	r2, r7, #4
 800f554:	f107 0314 	add.w	r3, r7, #20
 800f558:	4611      	mov	r1, r2
 800f55a:	4618      	mov	r0, r3
 800f55c:	f001 f81e 	bl	801059c <xTaskCheckForTimeOut>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d124      	bne.n	800f5b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f568:	f000 faa2 	bl	800fab0 <prvIsQueueFull>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d018      	beq.n	800f5a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	3310      	adds	r3, #16
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	4611      	mov	r1, r2
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 ff44 	bl	8010408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f582:	f000 fa2d 	bl	800f9e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f586:	f000 fd73 	bl	8010070 <xTaskResumeAll>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f47f af7c 	bne.w	800f48a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f592:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <xQueueGenericSend+0x1f8>)
 800f594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	e772      	b.n	800f48a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5a6:	f000 fa1b 	bl	800f9e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5aa:	f000 fd61 	bl	8010070 <xTaskResumeAll>
 800f5ae:	e76c      	b.n	800f48a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5b2:	f000 fa15 	bl	800f9e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5b6:	f000 fd5b 	bl	8010070 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f5ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3738      	adds	r7, #56	; 0x38
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	e000ed04 	.word	0xe000ed04

0800f5c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b090      	sub	sp, #64	; 0x40
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10a      	bne.n	800f5f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e4:	f383 8811 	msr	BASEPRI, r3
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f5f2:	bf00      	nop
 800f5f4:	e7fe      	b.n	800f5f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d103      	bne.n	800f604 <xQueueGenericSendFromISR+0x3c>
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f600:	2b00      	cmp	r3, #0
 800f602:	d101      	bne.n	800f608 <xQueueGenericSendFromISR+0x40>
 800f604:	2301      	movs	r3, #1
 800f606:	e000      	b.n	800f60a <xQueueGenericSendFromISR+0x42>
 800f608:	2300      	movs	r3, #0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10a      	bne.n	800f624 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f620:	bf00      	nop
 800f622:	e7fe      	b.n	800f622 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d103      	bne.n	800f632 <xQueueGenericSendFromISR+0x6a>
 800f62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d101      	bne.n	800f636 <xQueueGenericSendFromISR+0x6e>
 800f632:	2301      	movs	r3, #1
 800f634:	e000      	b.n	800f638 <xQueueGenericSendFromISR+0x70>
 800f636:	2300      	movs	r3, #0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10a      	bne.n	800f652 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	623b      	str	r3, [r7, #32]
}
 800f64e:	bf00      	nop
 800f650:	e7fe      	b.n	800f650 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f652:	f001 ff29 	bl	80114a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f656:	f3ef 8211 	mrs	r2, BASEPRI
 800f65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	61fa      	str	r2, [r7, #28]
 800f66c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f66e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f670:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d302      	bcc.n	800f684 <xQueueGenericSendFromISR+0xbc>
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	2b02      	cmp	r3, #2
 800f682:	d12f      	bne.n	800f6e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f692:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f69a:	f000 f911 	bl	800f8c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f69e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6a6:	d112      	bne.n	800f6ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d016      	beq.n	800f6de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	3324      	adds	r3, #36	; 0x24
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 fef7 	bl	80104a8 <xTaskRemoveFromEventList>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00e      	beq.n	800f6de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00b      	beq.n	800f6de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	e007      	b.n	800f6de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f6ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	b25a      	sxtb	r2, r3
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f6e2:	e001      	b.n	800f6e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f6f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3740      	adds	r7, #64	; 0x40
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
	...

0800f700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08c      	sub	sp, #48	; 0x30
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f70c:	2300      	movs	r3, #0
 800f70e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10a      	bne.n	800f730 <xQueueReceive+0x30>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	623b      	str	r3, [r7, #32]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d103      	bne.n	800f73e <xQueueReceive+0x3e>
 800f736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <xQueueReceive+0x42>
 800f73e:	2301      	movs	r3, #1
 800f740:	e000      	b.n	800f744 <xQueueReceive+0x44>
 800f742:	2300      	movs	r3, #0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d10a      	bne.n	800f75e <xQueueReceive+0x5e>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	61fb      	str	r3, [r7, #28]
}
 800f75a:	bf00      	nop
 800f75c:	e7fe      	b.n	800f75c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f75e:	f001 f865 	bl	801082c <xTaskGetSchedulerState>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	d102      	bne.n	800f76e <xQueueReceive+0x6e>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <xQueueReceive+0x72>
 800f76e:	2301      	movs	r3, #1
 800f770:	e000      	b.n	800f774 <xQueueReceive+0x74>
 800f772:	2300      	movs	r3, #0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10a      	bne.n	800f78e <xQueueReceive+0x8e>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	61bb      	str	r3, [r7, #24]
}
 800f78a:	bf00      	nop
 800f78c:	e7fe      	b.n	800f78c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f78e:	f001 fda9 	bl	80112e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d01f      	beq.n	800f7de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f79e:	68b9      	ldr	r1, [r7, #8]
 800f7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7a2:	f000 f8f7 	bl	800f994 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	1e5a      	subs	r2, r3, #1
 800f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00f      	beq.n	800f7d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	3310      	adds	r3, #16
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fe74 	bl	80104a8 <xTaskRemoveFromEventList>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d007      	beq.n	800f7d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f7c6:	4b3d      	ldr	r3, [pc, #244]	; (800f8bc <xQueueReceive+0x1bc>)
 800f7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7cc:	601a      	str	r2, [r3, #0]
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f7d6:	f001 fdb5 	bl	8011344 <vPortExitCritical>
				return pdPASS;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e069      	b.n	800f8b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d103      	bne.n	800f7ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f7e4:	f001 fdae 	bl	8011344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e062      	b.n	800f8b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7f2:	f107 0310 	add.w	r3, r7, #16
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 feba 	bl	8010570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f800:	f001 fda0 	bl	8011344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f804:	f000 fc26 	bl	8010054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f808:	f001 fd6c 	bl	80112e4 <vPortEnterCritical>
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f812:	b25b      	sxtb	r3, r3
 800f814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f818:	d103      	bne.n	800f822 <xQueueReceive+0x122>
 800f81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f828:	b25b      	sxtb	r3, r3
 800f82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f82e:	d103      	bne.n	800f838 <xQueueReceive+0x138>
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	2200      	movs	r2, #0
 800f834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f838:	f001 fd84 	bl	8011344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f83c:	1d3a      	adds	r2, r7, #4
 800f83e:	f107 0310 	add.w	r3, r7, #16
 800f842:	4611      	mov	r1, r2
 800f844:	4618      	mov	r0, r3
 800f846:	f000 fea9 	bl	801059c <xTaskCheckForTimeOut>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d123      	bne.n	800f898 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f852:	f000 f917 	bl	800fa84 <prvIsQueueEmpty>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d017      	beq.n	800f88c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	3324      	adds	r3, #36	; 0x24
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	4611      	mov	r1, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f000 fdcf 	bl	8010408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f86c:	f000 f8b8 	bl	800f9e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f870:	f000 fbfe 	bl	8010070 <xTaskResumeAll>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d189      	bne.n	800f78e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f87a:	4b10      	ldr	r3, [pc, #64]	; (800f8bc <xQueueReceive+0x1bc>)
 800f87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	e780      	b.n	800f78e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f88e:	f000 f8a7 	bl	800f9e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f892:	f000 fbed 	bl	8010070 <xTaskResumeAll>
 800f896:	e77a      	b.n	800f78e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f89a:	f000 f8a1 	bl	800f9e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f89e:	f000 fbe7 	bl	8010070 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a4:	f000 f8ee 	bl	800fa84 <prvIsQueueEmpty>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f43f af6f 	beq.w	800f78e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f8b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3730      	adds	r7, #48	; 0x30
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	e000ed04 	.word	0xe000ed04

0800f8c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10d      	bne.n	800f8fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d14d      	bne.n	800f982 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 ffbc 	bl	8010868 <xTaskPriorityDisinherit>
 800f8f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	609a      	str	r2, [r3, #8]
 800f8f8:	e043      	b.n	800f982 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d119      	bne.n	800f934 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6858      	ldr	r0, [r3, #4]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f908:	461a      	mov	r2, r3
 800f90a:	68b9      	ldr	r1, [r7, #8]
 800f90c:	f002 f919 	bl	8011b42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f918:	441a      	add	r2, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	429a      	cmp	r2, r3
 800f928:	d32b      	bcc.n	800f982 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	605a      	str	r2, [r3, #4]
 800f932:	e026      	b.n	800f982 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	68d8      	ldr	r0, [r3, #12]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93c:	461a      	mov	r2, r3
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	f002 f8ff 	bl	8011b42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94c:	425b      	negs	r3, r3
 800f94e:	441a      	add	r2, r3
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	68da      	ldr	r2, [r3, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d207      	bcs.n	800f970 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	689a      	ldr	r2, [r3, #8]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f968:	425b      	negs	r3, r3
 800f96a:	441a      	add	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b02      	cmp	r3, #2
 800f974:	d105      	bne.n	800f982 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	3b01      	subs	r3, #1
 800f980:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f98a:	697b      	ldr	r3, [r7, #20]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d018      	beq.n	800f9d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68da      	ldr	r2, [r3, #12]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ae:	441a      	add	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68da      	ldr	r2, [r3, #12]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d303      	bcc.n	800f9c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	68d9      	ldr	r1, [r3, #12]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	6838      	ldr	r0, [r7, #0]
 800f9d4:	f002 f8b5 	bl	8011b42 <memcpy>
	}
}
 800f9d8:	bf00      	nop
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f9e8:	f001 fc7c 	bl	80112e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9f4:	e011      	b.n	800fa1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d012      	beq.n	800fa24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3324      	adds	r3, #36	; 0x24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fd50 	bl	80104a8 <xTaskRemoveFromEventList>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fa0e:	f000 fe27 	bl	8010660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	dce9      	bgt.n	800f9f6 <prvUnlockQueue+0x16>
 800fa22:	e000      	b.n	800fa26 <prvUnlockQueue+0x46>
					break;
 800fa24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	22ff      	movs	r2, #255	; 0xff
 800fa2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fa2e:	f001 fc89 	bl	8011344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fa32:	f001 fc57 	bl	80112e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa3e:	e011      	b.n	800fa64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d012      	beq.n	800fa6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3310      	adds	r3, #16
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f000 fd2b 	bl	80104a8 <xTaskRemoveFromEventList>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fa58:	f000 fe02 	bl	8010660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fa5c:	7bbb      	ldrb	r3, [r7, #14]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	dce9      	bgt.n	800fa40 <prvUnlockQueue+0x60>
 800fa6c:	e000      	b.n	800fa70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	22ff      	movs	r2, #255	; 0xff
 800fa74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa78:	f001 fc64 	bl	8011344 <vPortExitCritical>
}
 800fa7c:	bf00      	nop
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa8c:	f001 fc2a 	bl	80112e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d102      	bne.n	800fa9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	60fb      	str	r3, [r7, #12]
 800fa9c:	e001      	b.n	800faa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800faa2:	f001 fc4f 	bl	8011344 <vPortExitCritical>

	return xReturn;
 800faa6:	68fb      	ldr	r3, [r7, #12]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fab8:	f001 fc14 	bl	80112e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d102      	bne.n	800face <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fac8:	2301      	movs	r3, #1
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	e001      	b.n	800fad2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800face:	2300      	movs	r3, #0
 800fad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fad2:	f001 fc37 	bl	8011344 <vPortExitCritical>

	return xReturn;
 800fad6:	68fb      	ldr	r3, [r7, #12]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800faea:	2300      	movs	r3, #0
 800faec:	60fb      	str	r3, [r7, #12]
 800faee:	e014      	b.n	800fb1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800faf0:	4a0f      	ldr	r2, [pc, #60]	; (800fb30 <vQueueAddToRegistry+0x50>)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d10b      	bne.n	800fb14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fafc:	490c      	ldr	r1, [pc, #48]	; (800fb30 <vQueueAddToRegistry+0x50>)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fb06:	4a0a      	ldr	r2, [pc, #40]	; (800fb30 <vQueueAddToRegistry+0x50>)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	4413      	add	r3, r2
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fb12:	e006      	b.n	800fb22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	3301      	adds	r3, #1
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2b07      	cmp	r3, #7
 800fb1e:	d9e7      	bls.n	800faf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fb20:	bf00      	nop
 800fb22:	bf00      	nop
 800fb24:	3714      	adds	r7, #20
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	2400142c 	.word	0x2400142c

0800fb34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fb44:	f001 fbce 	bl	80112e4 <vPortEnterCritical>
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb4e:	b25b      	sxtb	r3, r3
 800fb50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb54:	d103      	bne.n	800fb5e <vQueueWaitForMessageRestricted+0x2a>
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb64:	b25b      	sxtb	r3, r3
 800fb66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb6a:	d103      	bne.n	800fb74 <vQueueWaitForMessageRestricted+0x40>
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb74:	f001 fbe6 	bl	8011344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d106      	bne.n	800fb8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	3324      	adds	r3, #36	; 0x24
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f000 fc61 	bl	8010450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb8e:	6978      	ldr	r0, [r7, #20]
 800fb90:	f7ff ff26 	bl	800f9e0 <prvUnlockQueue>
	}
 800fb94:	bf00      	nop
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b08e      	sub	sp, #56	; 0x38
 800fba0:	af04      	add	r7, sp, #16
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d10a      	bne.n	800fbc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	623b      	str	r3, [r7, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	e7fe      	b.n	800fbc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10a      	bne.n	800fbe2 <xTaskCreateStatic+0x46>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	61fb      	str	r3, [r7, #28]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fbe2:	23bc      	movs	r3, #188	; 0xbc
 800fbe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2bbc      	cmp	r3, #188	; 0xbc
 800fbea:	d00a      	beq.n	800fc02 <xTaskCreateStatic+0x66>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	61bb      	str	r3, [r7, #24]
}
 800fbfe:	bf00      	nop
 800fc00:	e7fe      	b.n	800fc00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fc02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01e      	beq.n	800fc48 <xTaskCreateStatic+0xac>
 800fc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d01b      	beq.n	800fc48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	2202      	movs	r2, #2
 800fc1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fc22:	2300      	movs	r3, #0
 800fc24:	9303      	str	r3, [sp, #12]
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	9302      	str	r3, [sp, #8]
 800fc2a:	f107 0314 	add.w	r3, r7, #20
 800fc2e:	9301      	str	r3, [sp, #4]
 800fc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	68b9      	ldr	r1, [r7, #8]
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f000 f850 	bl	800fce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc42:	f000 f8f3 	bl	800fe2c <prvAddNewTaskToReadyList>
 800fc46:	e001      	b.n	800fc4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fc4c:	697b      	ldr	r3, [r7, #20]
	}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3728      	adds	r7, #40	; 0x28
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b08c      	sub	sp, #48	; 0x30
 800fc5a:	af04      	add	r7, sp, #16
 800fc5c:	60f8      	str	r0, [r7, #12]
 800fc5e:	60b9      	str	r1, [r7, #8]
 800fc60:	603b      	str	r3, [r7, #0]
 800fc62:	4613      	mov	r3, r2
 800fc64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc66:	88fb      	ldrh	r3, [r7, #6]
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 fc5c 	bl	8011528 <pvPortMalloc>
 800fc70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00e      	beq.n	800fc96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc78:	20bc      	movs	r0, #188	; 0xbc
 800fc7a:	f001 fc55 	bl	8011528 <pvPortMalloc>
 800fc7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	631a      	str	r2, [r3, #48]	; 0x30
 800fc8c:	e005      	b.n	800fc9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc8e:	6978      	ldr	r0, [r7, #20]
 800fc90:	f001 fd16 	bl	80116c0 <vPortFree>
 800fc94:	e001      	b.n	800fc9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d017      	beq.n	800fcd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fca8:	88fa      	ldrh	r2, [r7, #6]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	9303      	str	r3, [sp, #12]
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	9302      	str	r3, [sp, #8]
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	9300      	str	r3, [sp, #0]
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68b9      	ldr	r1, [r7, #8]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f000 f80e 	bl	800fce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fcc4:	69f8      	ldr	r0, [r7, #28]
 800fcc6:	f000 f8b1 	bl	800fe2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fcca:	2301      	movs	r3, #1
 800fccc:	61bb      	str	r3, [r7, #24]
 800fcce:	e002      	b.n	800fcd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fcd6:	69bb      	ldr	r3, [r7, #24]
	}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3720      	adds	r7, #32
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b088      	sub	sp, #32
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
 800fcec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	21a5      	movs	r1, #165	; 0xa5
 800fcfa:	f001 ff30 	bl	8011b5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd02:	6879      	ldr	r1, [r7, #4]
 800fd04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fd08:	440b      	add	r3, r1
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	4413      	add	r3, r2
 800fd0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	f023 0307 	bic.w	r3, r3, #7
 800fd16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	f003 0307 	and.w	r3, r3, #7
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00a      	beq.n	800fd38 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd26:	f383 8811 	msr	BASEPRI, r3
 800fd2a:	f3bf 8f6f 	isb	sy
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	617b      	str	r3, [r7, #20]
}
 800fd34:	bf00      	nop
 800fd36:	e7fe      	b.n	800fd36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d01f      	beq.n	800fd7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd3e:	2300      	movs	r3, #0
 800fd40:	61fb      	str	r3, [r7, #28]
 800fd42:	e012      	b.n	800fd6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd44:	68ba      	ldr	r2, [r7, #8]
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	4413      	add	r3, r2
 800fd4a:	7819      	ldrb	r1, [r3, #0]
 800fd4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	4413      	add	r3, r2
 800fd52:	3334      	adds	r3, #52	; 0x34
 800fd54:	460a      	mov	r2, r1
 800fd56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d006      	beq.n	800fd72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	3301      	adds	r3, #1
 800fd68:	61fb      	str	r3, [r7, #28]
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	2b0f      	cmp	r3, #15
 800fd6e:	d9e9      	bls.n	800fd44 <prvInitialiseNewTask+0x64>
 800fd70:	e000      	b.n	800fd74 <prvInitialiseNewTask+0x94>
			{
				break;
 800fd72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd7c:	e003      	b.n	800fd86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	2200      	movs	r2, #0
 800fd82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd88:	2b37      	cmp	r3, #55	; 0x37
 800fd8a:	d901      	bls.n	800fd90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd8c:	2337      	movs	r3, #55	; 0x37
 800fd8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	2200      	movs	r2, #0
 800fda0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	3304      	adds	r3, #4
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff f978 	bl	800f09c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdae:	3318      	adds	r3, #24
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff f973 	bl	800f09c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdde:	3354      	adds	r3, #84	; 0x54
 800fde0:	2260      	movs	r2, #96	; 0x60
 800fde2:	2100      	movs	r1, #0
 800fde4:	4618      	mov	r0, r3
 800fde6:	f001 feba 	bl	8011b5e <memset>
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	4a0c      	ldr	r2, [pc, #48]	; (800fe20 <prvInitialiseNewTask+0x140>)
 800fdee:	659a      	str	r2, [r3, #88]	; 0x58
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf2:	4a0c      	ldr	r2, [pc, #48]	; (800fe24 <prvInitialiseNewTask+0x144>)
 800fdf4:	65da      	str	r2, [r3, #92]	; 0x5c
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	4a0b      	ldr	r2, [pc, #44]	; (800fe28 <prvInitialiseNewTask+0x148>)
 800fdfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fdfc:	683a      	ldr	r2, [r7, #0]
 800fdfe:	68f9      	ldr	r1, [r7, #12]
 800fe00:	69b8      	ldr	r0, [r7, #24]
 800fe02:	f001 f941 	bl	8011088 <pxPortInitialiseStack>
 800fe06:	4602      	mov	r2, r0
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe18:	bf00      	nop
 800fe1a:	3720      	adds	r7, #32
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	08014944 	.word	0x08014944
 800fe24:	08014964 	.word	0x08014964
 800fe28:	08014924 	.word	0x08014924

0800fe2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe34:	f001 fa56 	bl	80112e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe38:	4b2d      	ldr	r3, [pc, #180]	; (800fef0 <prvAddNewTaskToReadyList+0xc4>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	4a2c      	ldr	r2, [pc, #176]	; (800fef0 <prvAddNewTaskToReadyList+0xc4>)
 800fe40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe42:	4b2c      	ldr	r3, [pc, #176]	; (800fef4 <prvAddNewTaskToReadyList+0xc8>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe4a:	4a2a      	ldr	r2, [pc, #168]	; (800fef4 <prvAddNewTaskToReadyList+0xc8>)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe50:	4b27      	ldr	r3, [pc, #156]	; (800fef0 <prvAddNewTaskToReadyList+0xc4>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d110      	bne.n	800fe7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe58:	f000 fc26 	bl	80106a8 <prvInitialiseTaskLists>
 800fe5c:	e00d      	b.n	800fe7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe5e:	4b26      	ldr	r3, [pc, #152]	; (800fef8 <prvAddNewTaskToReadyList+0xcc>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d109      	bne.n	800fe7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe66:	4b23      	ldr	r3, [pc, #140]	; (800fef4 <prvAddNewTaskToReadyList+0xc8>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d802      	bhi.n	800fe7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe74:	4a1f      	ldr	r2, [pc, #124]	; (800fef4 <prvAddNewTaskToReadyList+0xc8>)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe7a:	4b20      	ldr	r3, [pc, #128]	; (800fefc <prvAddNewTaskToReadyList+0xd0>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	4a1e      	ldr	r2, [pc, #120]	; (800fefc <prvAddNewTaskToReadyList+0xd0>)
 800fe82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fe84:	4b1d      	ldr	r3, [pc, #116]	; (800fefc <prvAddNewTaskToReadyList+0xd0>)
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <prvAddNewTaskToReadyList+0xd4>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d903      	bls.n	800fea0 <prvAddNewTaskToReadyList+0x74>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9c:	4a18      	ldr	r2, [pc, #96]	; (800ff00 <prvAddNewTaskToReadyList+0xd4>)
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea4:	4613      	mov	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4a15      	ldr	r2, [pc, #84]	; (800ff04 <prvAddNewTaskToReadyList+0xd8>)
 800feae:	441a      	add	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3304      	adds	r3, #4
 800feb4:	4619      	mov	r1, r3
 800feb6:	4610      	mov	r0, r2
 800feb8:	f7ff f8fd 	bl	800f0b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800febc:	f001 fa42 	bl	8011344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fec0:	4b0d      	ldr	r3, [pc, #52]	; (800fef8 <prvAddNewTaskToReadyList+0xcc>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00e      	beq.n	800fee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fec8:	4b0a      	ldr	r3, [pc, #40]	; (800fef4 <prvAddNewTaskToReadyList+0xc8>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d207      	bcs.n	800fee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <prvAddNewTaskToReadyList+0xdc>)
 800fed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	f3bf 8f4f 	dsb	sy
 800fee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fee6:	bf00      	nop
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	24001940 	.word	0x24001940
 800fef4:	2400146c 	.word	0x2400146c
 800fef8:	2400194c 	.word	0x2400194c
 800fefc:	2400195c 	.word	0x2400195c
 800ff00:	24001948 	.word	0x24001948
 800ff04:	24001470 	.word	0x24001470
 800ff08:	e000ed04 	.word	0xe000ed04

0800ff0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ff14:	2300      	movs	r3, #0
 800ff16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d017      	beq.n	800ff4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ff1e:	4b13      	ldr	r3, [pc, #76]	; (800ff6c <vTaskDelay+0x60>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00a      	beq.n	800ff3c <vTaskDelay+0x30>
	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	60bb      	str	r3, [r7, #8]
}
 800ff38:	bf00      	nop
 800ff3a:	e7fe      	b.n	800ff3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ff3c:	f000 f88a 	bl	8010054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ff40:	2100      	movs	r1, #0
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fcfe 	bl	8010944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ff48:	f000 f892 	bl	8010070 <xTaskResumeAll>
 800ff4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d107      	bne.n	800ff64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ff54:	4b06      	ldr	r3, [pc, #24]	; (800ff70 <vTaskDelay+0x64>)
 800ff56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	f3bf 8f4f 	dsb	sy
 800ff60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff64:	bf00      	nop
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	24001968 	.word	0x24001968
 800ff70:	e000ed04 	.word	0xe000ed04

0800ff74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08a      	sub	sp, #40	; 0x28
 800ff78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff82:	463a      	mov	r2, r7
 800ff84:	1d39      	adds	r1, r7, #4
 800ff86:	f107 0308 	add.w	r3, r7, #8
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff f832 	bl	800eff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68ba      	ldr	r2, [r7, #8]
 800ff96:	9202      	str	r2, [sp, #8]
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9300      	str	r3, [sp, #0]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	460a      	mov	r2, r1
 800ffa2:	4924      	ldr	r1, [pc, #144]	; (8010034 <vTaskStartScheduler+0xc0>)
 800ffa4:	4824      	ldr	r0, [pc, #144]	; (8010038 <vTaskStartScheduler+0xc4>)
 800ffa6:	f7ff fdf9 	bl	800fb9c <xTaskCreateStatic>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	4a23      	ldr	r2, [pc, #140]	; (801003c <vTaskStartScheduler+0xc8>)
 800ffae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ffb0:	4b22      	ldr	r3, [pc, #136]	; (801003c <vTaskStartScheduler+0xc8>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d002      	beq.n	800ffbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	617b      	str	r3, [r7, #20]
 800ffbc:	e001      	b.n	800ffc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d102      	bne.n	800ffce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ffc8:	f000 fd10 	bl	80109ec <xTimerCreateTimerTask>
 800ffcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d11b      	bne.n	801000c <vTaskStartScheduler+0x98>
	__asm volatile
 800ffd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	613b      	str	r3, [r7, #16]
}
 800ffe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ffe8:	4b15      	ldr	r3, [pc, #84]	; (8010040 <vTaskStartScheduler+0xcc>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3354      	adds	r3, #84	; 0x54
 800ffee:	4a15      	ldr	r2, [pc, #84]	; (8010044 <vTaskStartScheduler+0xd0>)
 800fff0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fff2:	4b15      	ldr	r3, [pc, #84]	; (8010048 <vTaskStartScheduler+0xd4>)
 800fff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fffa:	4b14      	ldr	r3, [pc, #80]	; (801004c <vTaskStartScheduler+0xd8>)
 800fffc:	2201      	movs	r2, #1
 800fffe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010000:	4b13      	ldr	r3, [pc, #76]	; (8010050 <vTaskStartScheduler+0xdc>)
 8010002:	2200      	movs	r2, #0
 8010004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010006:	f001 f8cb 	bl	80111a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801000a:	e00e      	b.n	801002a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010012:	d10a      	bne.n	801002a <vTaskStartScheduler+0xb6>
	__asm volatile
 8010014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010018:	f383 8811 	msr	BASEPRI, r3
 801001c:	f3bf 8f6f 	isb	sy
 8010020:	f3bf 8f4f 	dsb	sy
 8010024:	60fb      	str	r3, [r7, #12]
}
 8010026:	bf00      	nop
 8010028:	e7fe      	b.n	8010028 <vTaskStartScheduler+0xb4>
}
 801002a:	bf00      	nop
 801002c:	3718      	adds	r7, #24
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	08014898 	.word	0x08014898
 8010038:	08010679 	.word	0x08010679
 801003c:	24001964 	.word	0x24001964
 8010040:	2400146c 	.word	0x2400146c
 8010044:	24000014 	.word	0x24000014
 8010048:	24001960 	.word	0x24001960
 801004c:	2400194c 	.word	0x2400194c
 8010050:	24001944 	.word	0x24001944

08010054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010058:	4b04      	ldr	r3, [pc, #16]	; (801006c <vTaskSuspendAll+0x18>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	3301      	adds	r3, #1
 801005e:	4a03      	ldr	r2, [pc, #12]	; (801006c <vTaskSuspendAll+0x18>)
 8010060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010062:	bf00      	nop
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	24001968 	.word	0x24001968

08010070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801007a:	2300      	movs	r3, #0
 801007c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801007e:	4b42      	ldr	r3, [pc, #264]	; (8010188 <xTaskResumeAll+0x118>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10a      	bne.n	801009c <xTaskResumeAll+0x2c>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	603b      	str	r3, [r7, #0]
}
 8010098:	bf00      	nop
 801009a:	e7fe      	b.n	801009a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801009c:	f001 f922 	bl	80112e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80100a0:	4b39      	ldr	r3, [pc, #228]	; (8010188 <xTaskResumeAll+0x118>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3b01      	subs	r3, #1
 80100a6:	4a38      	ldr	r2, [pc, #224]	; (8010188 <xTaskResumeAll+0x118>)
 80100a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100aa:	4b37      	ldr	r3, [pc, #220]	; (8010188 <xTaskResumeAll+0x118>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d162      	bne.n	8010178 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80100b2:	4b36      	ldr	r3, [pc, #216]	; (801018c <xTaskResumeAll+0x11c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d05e      	beq.n	8010178 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100ba:	e02f      	b.n	801011c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100bc:	4b34      	ldr	r3, [pc, #208]	; (8010190 <xTaskResumeAll+0x120>)
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	3318      	adds	r3, #24
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7ff f851 	bl	800f170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	3304      	adds	r3, #4
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff f84c 	bl	800f170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100dc:	4b2d      	ldr	r3, [pc, #180]	; (8010194 <xTaskResumeAll+0x124>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d903      	bls.n	80100ec <xTaskResumeAll+0x7c>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e8:	4a2a      	ldr	r2, [pc, #168]	; (8010194 <xTaskResumeAll+0x124>)
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100f0:	4613      	mov	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4413      	add	r3, r2
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	4a27      	ldr	r2, [pc, #156]	; (8010198 <xTaskResumeAll+0x128>)
 80100fa:	441a      	add	r2, r3
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3304      	adds	r3, #4
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f7fe ffd7 	bl	800f0b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801010c:	4b23      	ldr	r3, [pc, #140]	; (801019c <xTaskResumeAll+0x12c>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010112:	429a      	cmp	r2, r3
 8010114:	d302      	bcc.n	801011c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010116:	4b22      	ldr	r3, [pc, #136]	; (80101a0 <xTaskResumeAll+0x130>)
 8010118:	2201      	movs	r2, #1
 801011a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801011c:	4b1c      	ldr	r3, [pc, #112]	; (8010190 <xTaskResumeAll+0x120>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1cb      	bne.n	80100bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801012a:	f000 fb5f 	bl	80107ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801012e:	4b1d      	ldr	r3, [pc, #116]	; (80101a4 <xTaskResumeAll+0x134>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d010      	beq.n	801015c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801013a:	f000 f847 	bl	80101cc <xTaskIncrementTick>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010144:	4b16      	ldr	r3, [pc, #88]	; (80101a0 <xTaskResumeAll+0x130>)
 8010146:	2201      	movs	r2, #1
 8010148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	3b01      	subs	r3, #1
 801014e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f1      	bne.n	801013a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010156:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <xTaskResumeAll+0x134>)
 8010158:	2200      	movs	r2, #0
 801015a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801015c:	4b10      	ldr	r3, [pc, #64]	; (80101a0 <xTaskResumeAll+0x130>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d009      	beq.n	8010178 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010164:	2301      	movs	r3, #1
 8010166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010168:	4b0f      	ldr	r3, [pc, #60]	; (80101a8 <xTaskResumeAll+0x138>)
 801016a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010178:	f001 f8e4 	bl	8011344 <vPortExitCritical>

	return xAlreadyYielded;
 801017c:	68bb      	ldr	r3, [r7, #8]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	24001968 	.word	0x24001968
 801018c:	24001940 	.word	0x24001940
 8010190:	24001900 	.word	0x24001900
 8010194:	24001948 	.word	0x24001948
 8010198:	24001470 	.word	0x24001470
 801019c:	2400146c 	.word	0x2400146c
 80101a0:	24001954 	.word	0x24001954
 80101a4:	24001950 	.word	0x24001950
 80101a8:	e000ed04 	.word	0xe000ed04

080101ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <xTaskGetTickCount+0x1c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80101b8:	687b      	ldr	r3, [r7, #4]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop
 80101c8:	24001944 	.word	0x24001944

080101cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80101d2:	2300      	movs	r3, #0
 80101d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101d6:	4b4f      	ldr	r3, [pc, #316]	; (8010314 <xTaskIncrementTick+0x148>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f040 808f 	bne.w	80102fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80101e0:	4b4d      	ldr	r3, [pc, #308]	; (8010318 <xTaskIncrementTick+0x14c>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3301      	adds	r3, #1
 80101e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80101e8:	4a4b      	ldr	r2, [pc, #300]	; (8010318 <xTaskIncrementTick+0x14c>)
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d120      	bne.n	8010236 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80101f4:	4b49      	ldr	r3, [pc, #292]	; (801031c <xTaskIncrementTick+0x150>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00a      	beq.n	8010214 <xTaskIncrementTick+0x48>
	__asm volatile
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	603b      	str	r3, [r7, #0]
}
 8010210:	bf00      	nop
 8010212:	e7fe      	b.n	8010212 <xTaskIncrementTick+0x46>
 8010214:	4b41      	ldr	r3, [pc, #260]	; (801031c <xTaskIncrementTick+0x150>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	60fb      	str	r3, [r7, #12]
 801021a:	4b41      	ldr	r3, [pc, #260]	; (8010320 <xTaskIncrementTick+0x154>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4a3f      	ldr	r2, [pc, #252]	; (801031c <xTaskIncrementTick+0x150>)
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	4a3f      	ldr	r2, [pc, #252]	; (8010320 <xTaskIncrementTick+0x154>)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	4b3e      	ldr	r3, [pc, #248]	; (8010324 <xTaskIncrementTick+0x158>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	3301      	adds	r3, #1
 801022e:	4a3d      	ldr	r2, [pc, #244]	; (8010324 <xTaskIncrementTick+0x158>)
 8010230:	6013      	str	r3, [r2, #0]
 8010232:	f000 fadb 	bl	80107ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010236:	4b3c      	ldr	r3, [pc, #240]	; (8010328 <xTaskIncrementTick+0x15c>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	693a      	ldr	r2, [r7, #16]
 801023c:	429a      	cmp	r2, r3
 801023e:	d349      	bcc.n	80102d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010240:	4b36      	ldr	r3, [pc, #216]	; (801031c <xTaskIncrementTick+0x150>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d104      	bne.n	8010254 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801024a:	4b37      	ldr	r3, [pc, #220]	; (8010328 <xTaskIncrementTick+0x15c>)
 801024c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010250:	601a      	str	r2, [r3, #0]
					break;
 8010252:	e03f      	b.n	80102d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010254:	4b31      	ldr	r3, [pc, #196]	; (801031c <xTaskIncrementTick+0x150>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010264:	693a      	ldr	r2, [r7, #16]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	429a      	cmp	r2, r3
 801026a:	d203      	bcs.n	8010274 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801026c:	4a2e      	ldr	r2, [pc, #184]	; (8010328 <xTaskIncrementTick+0x15c>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010272:	e02f      	b.n	80102d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	3304      	adds	r3, #4
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe ff79 	bl	800f170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010282:	2b00      	cmp	r3, #0
 8010284:	d004      	beq.n	8010290 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	3318      	adds	r3, #24
 801028a:	4618      	mov	r0, r3
 801028c:	f7fe ff70 	bl	800f170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010294:	4b25      	ldr	r3, [pc, #148]	; (801032c <xTaskIncrementTick+0x160>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	429a      	cmp	r2, r3
 801029a:	d903      	bls.n	80102a4 <xTaskIncrementTick+0xd8>
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a0:	4a22      	ldr	r2, [pc, #136]	; (801032c <xTaskIncrementTick+0x160>)
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a8:	4613      	mov	r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	4413      	add	r3, r2
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	4a1f      	ldr	r2, [pc, #124]	; (8010330 <xTaskIncrementTick+0x164>)
 80102b2:	441a      	add	r2, r3
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	3304      	adds	r3, #4
 80102b8:	4619      	mov	r1, r3
 80102ba:	4610      	mov	r0, r2
 80102bc:	f7fe fefb 	bl	800f0b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c4:	4b1b      	ldr	r3, [pc, #108]	; (8010334 <xTaskIncrementTick+0x168>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d3b8      	bcc.n	8010240 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80102ce:	2301      	movs	r3, #1
 80102d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102d2:	e7b5      	b.n	8010240 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80102d4:	4b17      	ldr	r3, [pc, #92]	; (8010334 <xTaskIncrementTick+0x168>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102da:	4915      	ldr	r1, [pc, #84]	; (8010330 <xTaskIncrementTick+0x164>)
 80102dc:	4613      	mov	r3, r2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	440b      	add	r3, r1
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d901      	bls.n	80102f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80102ec:	2301      	movs	r3, #1
 80102ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80102f0:	4b11      	ldr	r3, [pc, #68]	; (8010338 <xTaskIncrementTick+0x16c>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d007      	beq.n	8010308 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80102f8:	2301      	movs	r3, #1
 80102fa:	617b      	str	r3, [r7, #20]
 80102fc:	e004      	b.n	8010308 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80102fe:	4b0f      	ldr	r3, [pc, #60]	; (801033c <xTaskIncrementTick+0x170>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3301      	adds	r3, #1
 8010304:	4a0d      	ldr	r2, [pc, #52]	; (801033c <xTaskIncrementTick+0x170>)
 8010306:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010308:	697b      	ldr	r3, [r7, #20]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3718      	adds	r7, #24
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	24001968 	.word	0x24001968
 8010318:	24001944 	.word	0x24001944
 801031c:	240018f8 	.word	0x240018f8
 8010320:	240018fc 	.word	0x240018fc
 8010324:	24001958 	.word	0x24001958
 8010328:	24001960 	.word	0x24001960
 801032c:	24001948 	.word	0x24001948
 8010330:	24001470 	.word	0x24001470
 8010334:	2400146c 	.word	0x2400146c
 8010338:	24001954 	.word	0x24001954
 801033c:	24001950 	.word	0x24001950

08010340 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010340:	b480      	push	{r7}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010346:	4b2a      	ldr	r3, [pc, #168]	; (80103f0 <vTaskSwitchContext+0xb0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801034e:	4b29      	ldr	r3, [pc, #164]	; (80103f4 <vTaskSwitchContext+0xb4>)
 8010350:	2201      	movs	r2, #1
 8010352:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010354:	e046      	b.n	80103e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010356:	4b27      	ldr	r3, [pc, #156]	; (80103f4 <vTaskSwitchContext+0xb4>)
 8010358:	2200      	movs	r2, #0
 801035a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801035c:	4b26      	ldr	r3, [pc, #152]	; (80103f8 <vTaskSwitchContext+0xb8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	e010      	b.n	8010386 <vTaskSwitchContext+0x46>
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d10a      	bne.n	8010380 <vTaskSwitchContext+0x40>
	__asm volatile
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	607b      	str	r3, [r7, #4]
}
 801037c:	bf00      	nop
 801037e:	e7fe      	b.n	801037e <vTaskSwitchContext+0x3e>
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	3b01      	subs	r3, #1
 8010384:	60fb      	str	r3, [r7, #12]
 8010386:	491d      	ldr	r1, [pc, #116]	; (80103fc <vTaskSwitchContext+0xbc>)
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	440b      	add	r3, r1
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d0e4      	beq.n	8010364 <vTaskSwitchContext+0x24>
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4a15      	ldr	r2, [pc, #84]	; (80103fc <vTaskSwitchContext+0xbc>)
 80103a6:	4413      	add	r3, r2
 80103a8:	60bb      	str	r3, [r7, #8]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	685a      	ldr	r2, [r3, #4]
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	605a      	str	r2, [r3, #4]
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	685a      	ldr	r2, [r3, #4]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	3308      	adds	r3, #8
 80103bc:	429a      	cmp	r2, r3
 80103be:	d104      	bne.n	80103ca <vTaskSwitchContext+0x8a>
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	685a      	ldr	r2, [r3, #4]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	605a      	str	r2, [r3, #4]
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	4a0b      	ldr	r2, [pc, #44]	; (8010400 <vTaskSwitchContext+0xc0>)
 80103d2:	6013      	str	r3, [r2, #0]
 80103d4:	4a08      	ldr	r2, [pc, #32]	; (80103f8 <vTaskSwitchContext+0xb8>)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80103da:	4b09      	ldr	r3, [pc, #36]	; (8010400 <vTaskSwitchContext+0xc0>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	3354      	adds	r3, #84	; 0x54
 80103e0:	4a08      	ldr	r2, [pc, #32]	; (8010404 <vTaskSwitchContext+0xc4>)
 80103e2:	6013      	str	r3, [r2, #0]
}
 80103e4:	bf00      	nop
 80103e6:	3714      	adds	r7, #20
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr
 80103f0:	24001968 	.word	0x24001968
 80103f4:	24001954 	.word	0x24001954
 80103f8:	24001948 	.word	0x24001948
 80103fc:	24001470 	.word	0x24001470
 8010400:	2400146c 	.word	0x2400146c
 8010404:	24000014 	.word	0x24000014

08010408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d10a      	bne.n	801042e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041c:	f383 8811 	msr	BASEPRI, r3
 8010420:	f3bf 8f6f 	isb	sy
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	60fb      	str	r3, [r7, #12]
}
 801042a:	bf00      	nop
 801042c:	e7fe      	b.n	801042c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801042e:	4b07      	ldr	r3, [pc, #28]	; (801044c <vTaskPlaceOnEventList+0x44>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3318      	adds	r3, #24
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7fe fe61 	bl	800f0fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801043c:	2101      	movs	r1, #1
 801043e:	6838      	ldr	r0, [r7, #0]
 8010440:	f000 fa80 	bl	8010944 <prvAddCurrentTaskToDelayedList>
}
 8010444:	bf00      	nop
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	2400146c 	.word	0x2400146c

08010450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010450:	b580      	push	{r7, lr}
 8010452:	b086      	sub	sp, #24
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10a      	bne.n	8010478 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	617b      	str	r3, [r7, #20]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010478:	4b0a      	ldr	r3, [pc, #40]	; (80104a4 <vTaskPlaceOnEventListRestricted+0x54>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	3318      	adds	r3, #24
 801047e:	4619      	mov	r1, r3
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f7fe fe18 	bl	800f0b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d002      	beq.n	8010492 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801048c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	68b8      	ldr	r0, [r7, #8]
 8010496:	f000 fa55 	bl	8010944 <prvAddCurrentTaskToDelayedList>
	}
 801049a:	bf00      	nop
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	2400146c 	.word	0x2400146c

080104a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10a      	bne.n	80104d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	60fb      	str	r3, [r7, #12]
}
 80104d0:	bf00      	nop
 80104d2:	e7fe      	b.n	80104d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	3318      	adds	r3, #24
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fe49 	bl	800f170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104de:	4b1e      	ldr	r3, [pc, #120]	; (8010558 <xTaskRemoveFromEventList+0xb0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d11d      	bne.n	8010522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	3304      	adds	r3, #4
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe fe40 	bl	800f170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f4:	4b19      	ldr	r3, [pc, #100]	; (801055c <xTaskRemoveFromEventList+0xb4>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d903      	bls.n	8010504 <xTaskRemoveFromEventList+0x5c>
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010500:	4a16      	ldr	r2, [pc, #88]	; (801055c <xTaskRemoveFromEventList+0xb4>)
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010508:	4613      	mov	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4413      	add	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4a13      	ldr	r2, [pc, #76]	; (8010560 <xTaskRemoveFromEventList+0xb8>)
 8010512:	441a      	add	r2, r3
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	3304      	adds	r3, #4
 8010518:	4619      	mov	r1, r3
 801051a:	4610      	mov	r0, r2
 801051c:	f7fe fdcb 	bl	800f0b6 <vListInsertEnd>
 8010520:	e005      	b.n	801052e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	3318      	adds	r3, #24
 8010526:	4619      	mov	r1, r3
 8010528:	480e      	ldr	r0, [pc, #56]	; (8010564 <xTaskRemoveFromEventList+0xbc>)
 801052a:	f7fe fdc4 	bl	800f0b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010532:	4b0d      	ldr	r3, [pc, #52]	; (8010568 <xTaskRemoveFromEventList+0xc0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010538:	429a      	cmp	r2, r3
 801053a:	d905      	bls.n	8010548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801053c:	2301      	movs	r3, #1
 801053e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010540:	4b0a      	ldr	r3, [pc, #40]	; (801056c <xTaskRemoveFromEventList+0xc4>)
 8010542:	2201      	movs	r2, #1
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	e001      	b.n	801054c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010548:	2300      	movs	r3, #0
 801054a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801054c:	697b      	ldr	r3, [r7, #20]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	24001968 	.word	0x24001968
 801055c:	24001948 	.word	0x24001948
 8010560:	24001470 	.word	0x24001470
 8010564:	24001900 	.word	0x24001900
 8010568:	2400146c 	.word	0x2400146c
 801056c:	24001954 	.word	0x24001954

08010570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010578:	4b06      	ldr	r3, [pc, #24]	; (8010594 <vTaskInternalSetTimeOutState+0x24>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010580:	4b05      	ldr	r3, [pc, #20]	; (8010598 <vTaskInternalSetTimeOutState+0x28>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	605a      	str	r2, [r3, #4]
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	24001958 	.word	0x24001958
 8010598:	24001944 	.word	0x24001944

0801059c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d10a      	bne.n	80105c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80105ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b0:	f383 8811 	msr	BASEPRI, r3
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	613b      	str	r3, [r7, #16]
}
 80105be:	bf00      	nop
 80105c0:	e7fe      	b.n	80105c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10a      	bne.n	80105de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	60fb      	str	r3, [r7, #12]
}
 80105da:	bf00      	nop
 80105dc:	e7fe      	b.n	80105dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80105de:	f000 fe81 	bl	80112e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80105e2:	4b1d      	ldr	r3, [pc, #116]	; (8010658 <xTaskCheckForTimeOut+0xbc>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105fa:	d102      	bne.n	8010602 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80105fc:	2300      	movs	r3, #0
 80105fe:	61fb      	str	r3, [r7, #28]
 8010600:	e023      	b.n	801064a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	4b15      	ldr	r3, [pc, #84]	; (801065c <xTaskCheckForTimeOut+0xc0>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d007      	beq.n	801061e <xTaskCheckForTimeOut+0x82>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	69ba      	ldr	r2, [r7, #24]
 8010614:	429a      	cmp	r2, r3
 8010616:	d302      	bcc.n	801061e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010618:	2301      	movs	r3, #1
 801061a:	61fb      	str	r3, [r7, #28]
 801061c:	e015      	b.n	801064a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	697a      	ldr	r2, [r7, #20]
 8010624:	429a      	cmp	r2, r3
 8010626:	d20b      	bcs.n	8010640 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	1ad2      	subs	r2, r2, r3
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff ff9b 	bl	8010570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801063a:	2300      	movs	r3, #0
 801063c:	61fb      	str	r3, [r7, #28]
 801063e:	e004      	b.n	801064a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010646:	2301      	movs	r3, #1
 8010648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801064a:	f000 fe7b 	bl	8011344 <vPortExitCritical>

	return xReturn;
 801064e:	69fb      	ldr	r3, [r7, #28]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	24001944 	.word	0x24001944
 801065c:	24001958 	.word	0x24001958

08010660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010660:	b480      	push	{r7}
 8010662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010664:	4b03      	ldr	r3, [pc, #12]	; (8010674 <vTaskMissedYield+0x14>)
 8010666:	2201      	movs	r2, #1
 8010668:	601a      	str	r2, [r3, #0]
}
 801066a:	bf00      	nop
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	24001954 	.word	0x24001954

08010678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010680:	f000 f852 	bl	8010728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010684:	4b06      	ldr	r3, [pc, #24]	; (80106a0 <prvIdleTask+0x28>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d9f9      	bls.n	8010680 <prvIdleTask+0x8>
			{
				taskYIELD();
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <prvIdleTask+0x2c>)
 801068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	f3bf 8f4f 	dsb	sy
 8010698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801069c:	e7f0      	b.n	8010680 <prvIdleTask+0x8>
 801069e:	bf00      	nop
 80106a0:	24001470 	.word	0x24001470
 80106a4:	e000ed04 	.word	0xe000ed04

080106a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106ae:	2300      	movs	r3, #0
 80106b0:	607b      	str	r3, [r7, #4]
 80106b2:	e00c      	b.n	80106ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	4613      	mov	r3, r2
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4413      	add	r3, r2
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	4a12      	ldr	r2, [pc, #72]	; (8010708 <prvInitialiseTaskLists+0x60>)
 80106c0:	4413      	add	r3, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fe fcca 	bl	800f05c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3301      	adds	r3, #1
 80106cc:	607b      	str	r3, [r7, #4]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2b37      	cmp	r3, #55	; 0x37
 80106d2:	d9ef      	bls.n	80106b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80106d4:	480d      	ldr	r0, [pc, #52]	; (801070c <prvInitialiseTaskLists+0x64>)
 80106d6:	f7fe fcc1 	bl	800f05c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80106da:	480d      	ldr	r0, [pc, #52]	; (8010710 <prvInitialiseTaskLists+0x68>)
 80106dc:	f7fe fcbe 	bl	800f05c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80106e0:	480c      	ldr	r0, [pc, #48]	; (8010714 <prvInitialiseTaskLists+0x6c>)
 80106e2:	f7fe fcbb 	bl	800f05c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80106e6:	480c      	ldr	r0, [pc, #48]	; (8010718 <prvInitialiseTaskLists+0x70>)
 80106e8:	f7fe fcb8 	bl	800f05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80106ec:	480b      	ldr	r0, [pc, #44]	; (801071c <prvInitialiseTaskLists+0x74>)
 80106ee:	f7fe fcb5 	bl	800f05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80106f2:	4b0b      	ldr	r3, [pc, #44]	; (8010720 <prvInitialiseTaskLists+0x78>)
 80106f4:	4a05      	ldr	r2, [pc, #20]	; (801070c <prvInitialiseTaskLists+0x64>)
 80106f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80106f8:	4b0a      	ldr	r3, [pc, #40]	; (8010724 <prvInitialiseTaskLists+0x7c>)
 80106fa:	4a05      	ldr	r2, [pc, #20]	; (8010710 <prvInitialiseTaskLists+0x68>)
 80106fc:	601a      	str	r2, [r3, #0]
}
 80106fe:	bf00      	nop
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	24001470 	.word	0x24001470
 801070c:	240018d0 	.word	0x240018d0
 8010710:	240018e4 	.word	0x240018e4
 8010714:	24001900 	.word	0x24001900
 8010718:	24001914 	.word	0x24001914
 801071c:	2400192c 	.word	0x2400192c
 8010720:	240018f8 	.word	0x240018f8
 8010724:	240018fc 	.word	0x240018fc

08010728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801072e:	e019      	b.n	8010764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010730:	f000 fdd8 	bl	80112e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010734:	4b10      	ldr	r3, [pc, #64]	; (8010778 <prvCheckTasksWaitingTermination+0x50>)
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3304      	adds	r3, #4
 8010740:	4618      	mov	r0, r3
 8010742:	f7fe fd15 	bl	800f170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010746:	4b0d      	ldr	r3, [pc, #52]	; (801077c <prvCheckTasksWaitingTermination+0x54>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3b01      	subs	r3, #1
 801074c:	4a0b      	ldr	r2, [pc, #44]	; (801077c <prvCheckTasksWaitingTermination+0x54>)
 801074e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010750:	4b0b      	ldr	r3, [pc, #44]	; (8010780 <prvCheckTasksWaitingTermination+0x58>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	3b01      	subs	r3, #1
 8010756:	4a0a      	ldr	r2, [pc, #40]	; (8010780 <prvCheckTasksWaitingTermination+0x58>)
 8010758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801075a:	f000 fdf3 	bl	8011344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f810 	bl	8010784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010764:	4b06      	ldr	r3, [pc, #24]	; (8010780 <prvCheckTasksWaitingTermination+0x58>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1e1      	bne.n	8010730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	24001914 	.word	0x24001914
 801077c:	24001940 	.word	0x24001940
 8010780:	24001928 	.word	0x24001928

08010784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3354      	adds	r3, #84	; 0x54
 8010790:	4618      	mov	r0, r3
 8010792:	f001 fed1 	bl	8012538 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801079c:	2b00      	cmp	r3, #0
 801079e:	d108      	bne.n	80107b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a4:	4618      	mov	r0, r3
 80107a6:	f000 ff8b 	bl	80116c0 <vPortFree>
				vPortFree( pxTCB );
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 ff88 	bl	80116c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80107b0:	e018      	b.n	80107e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d103      	bne.n	80107c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 ff7f 	bl	80116c0 <vPortFree>
	}
 80107c2:	e00f      	b.n	80107e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	d00a      	beq.n	80107e4 <prvDeleteTCB+0x60>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	60fb      	str	r3, [r7, #12]
}
 80107e0:	bf00      	nop
 80107e2:	e7fe      	b.n	80107e2 <prvDeleteTCB+0x5e>
	}
 80107e4:	bf00      	nop
 80107e6:	3710      	adds	r7, #16
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107f2:	4b0c      	ldr	r3, [pc, #48]	; (8010824 <prvResetNextTaskUnblockTime+0x38>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d104      	bne.n	8010806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80107fc:	4b0a      	ldr	r3, [pc, #40]	; (8010828 <prvResetNextTaskUnblockTime+0x3c>)
 80107fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010804:	e008      	b.n	8010818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010806:	4b07      	ldr	r3, [pc, #28]	; (8010824 <prvResetNextTaskUnblockTime+0x38>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	4a04      	ldr	r2, [pc, #16]	; (8010828 <prvResetNextTaskUnblockTime+0x3c>)
 8010816:	6013      	str	r3, [r2, #0]
}
 8010818:	bf00      	nop
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr
 8010824:	240018f8 	.word	0x240018f8
 8010828:	24001960 	.word	0x24001960

0801082c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010832:	4b0b      	ldr	r3, [pc, #44]	; (8010860 <xTaskGetSchedulerState+0x34>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d102      	bne.n	8010840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801083a:	2301      	movs	r3, #1
 801083c:	607b      	str	r3, [r7, #4]
 801083e:	e008      	b.n	8010852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010840:	4b08      	ldr	r3, [pc, #32]	; (8010864 <xTaskGetSchedulerState+0x38>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d102      	bne.n	801084e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010848:	2302      	movs	r3, #2
 801084a:	607b      	str	r3, [r7, #4]
 801084c:	e001      	b.n	8010852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801084e:	2300      	movs	r3, #0
 8010850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010852:	687b      	ldr	r3, [r7, #4]
	}
 8010854:	4618      	mov	r0, r3
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr
 8010860:	2400194c 	.word	0x2400194c
 8010864:	24001968 	.word	0x24001968

08010868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010874:	2300      	movs	r3, #0
 8010876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d056      	beq.n	801092c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801087e:	4b2e      	ldr	r3, [pc, #184]	; (8010938 <xTaskPriorityDisinherit+0xd0>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	429a      	cmp	r2, r3
 8010886:	d00a      	beq.n	801089e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088c:	f383 8811 	msr	BASEPRI, r3
 8010890:	f3bf 8f6f 	isb	sy
 8010894:	f3bf 8f4f 	dsb	sy
 8010898:	60fb      	str	r3, [r7, #12]
}
 801089a:	bf00      	nop
 801089c:	e7fe      	b.n	801089c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10a      	bne.n	80108bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	60bb      	str	r3, [r7, #8]
}
 80108b8:	bf00      	nop
 80108ba:	e7fe      	b.n	80108ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108c0:	1e5a      	subs	r2, r3, #1
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d02c      	beq.n	801092c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d128      	bne.n	801092c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	3304      	adds	r3, #4
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fe fc46 	bl	800f170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108fc:	4b0f      	ldr	r3, [pc, #60]	; (801093c <xTaskPriorityDisinherit+0xd4>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	429a      	cmp	r2, r3
 8010902:	d903      	bls.n	801090c <xTaskPriorityDisinherit+0xa4>
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010908:	4a0c      	ldr	r2, [pc, #48]	; (801093c <xTaskPriorityDisinherit+0xd4>)
 801090a:	6013      	str	r3, [r2, #0]
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010910:	4613      	mov	r3, r2
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	4413      	add	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4a09      	ldr	r2, [pc, #36]	; (8010940 <xTaskPriorityDisinherit+0xd8>)
 801091a:	441a      	add	r2, r3
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	3304      	adds	r3, #4
 8010920:	4619      	mov	r1, r3
 8010922:	4610      	mov	r0, r2
 8010924:	f7fe fbc7 	bl	800f0b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010928:	2301      	movs	r3, #1
 801092a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801092c:	697b      	ldr	r3, [r7, #20]
	}
 801092e:	4618      	mov	r0, r3
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	2400146c 	.word	0x2400146c
 801093c:	24001948 	.word	0x24001948
 8010940:	24001470 	.word	0x24001470

08010944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801094e:	4b21      	ldr	r3, [pc, #132]	; (80109d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010954:	4b20      	ldr	r3, [pc, #128]	; (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3304      	adds	r3, #4
 801095a:	4618      	mov	r0, r3
 801095c:	f7fe fc08 	bl	800f170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010966:	d10a      	bne.n	801097e <prvAddCurrentTaskToDelayedList+0x3a>
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d007      	beq.n	801097e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801096e:	4b1a      	ldr	r3, [pc, #104]	; (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3304      	adds	r3, #4
 8010974:	4619      	mov	r1, r3
 8010976:	4819      	ldr	r0, [pc, #100]	; (80109dc <prvAddCurrentTaskToDelayedList+0x98>)
 8010978:	f7fe fb9d 	bl	800f0b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801097c:	e026      	b.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4413      	add	r3, r2
 8010984:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010986:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	429a      	cmp	r2, r3
 8010994:	d209      	bcs.n	80109aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010996:	4b12      	ldr	r3, [pc, #72]	; (80109e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	4b0f      	ldr	r3, [pc, #60]	; (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3304      	adds	r3, #4
 80109a0:	4619      	mov	r1, r3
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7fe fbab 	bl	800f0fe <vListInsert>
}
 80109a8:	e010      	b.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109aa:	4b0e      	ldr	r3, [pc, #56]	; (80109e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	4b0a      	ldr	r3, [pc, #40]	; (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	3304      	adds	r3, #4
 80109b4:	4619      	mov	r1, r3
 80109b6:	4610      	mov	r0, r2
 80109b8:	f7fe fba1 	bl	800f0fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80109bc:	4b0a      	ldr	r3, [pc, #40]	; (80109e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d202      	bcs.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80109c6:	4a08      	ldr	r2, [pc, #32]	; (80109e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	6013      	str	r3, [r2, #0]
}
 80109cc:	bf00      	nop
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	24001944 	.word	0x24001944
 80109d8:	2400146c 	.word	0x2400146c
 80109dc:	2400192c 	.word	0x2400192c
 80109e0:	240018fc 	.word	0x240018fc
 80109e4:	240018f8 	.word	0x240018f8
 80109e8:	24001960 	.word	0x24001960

080109ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	; 0x28
 80109f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80109f6:	f000 fb07 	bl	8011008 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80109fa:	4b1c      	ldr	r3, [pc, #112]	; (8010a6c <xTimerCreateTimerTask+0x80>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d021      	beq.n	8010a46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010a0a:	1d3a      	adds	r2, r7, #4
 8010a0c:	f107 0108 	add.w	r1, r7, #8
 8010a10:	f107 030c 	add.w	r3, r7, #12
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7fe fb07 	bl	800f028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	9202      	str	r2, [sp, #8]
 8010a22:	9301      	str	r3, [sp, #4]
 8010a24:	2302      	movs	r3, #2
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	460a      	mov	r2, r1
 8010a2c:	4910      	ldr	r1, [pc, #64]	; (8010a70 <xTimerCreateTimerTask+0x84>)
 8010a2e:	4811      	ldr	r0, [pc, #68]	; (8010a74 <xTimerCreateTimerTask+0x88>)
 8010a30:	f7ff f8b4 	bl	800fb9c <xTaskCreateStatic>
 8010a34:	4603      	mov	r3, r0
 8010a36:	4a10      	ldr	r2, [pc, #64]	; (8010a78 <xTimerCreateTimerTask+0x8c>)
 8010a38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010a3a:	4b0f      	ldr	r3, [pc, #60]	; (8010a78 <xTimerCreateTimerTask+0x8c>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d001      	beq.n	8010a46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010a42:	2301      	movs	r3, #1
 8010a44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10a      	bne.n	8010a62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	613b      	str	r3, [r7, #16]
}
 8010a5e:	bf00      	nop
 8010a60:	e7fe      	b.n	8010a60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010a62:	697b      	ldr	r3, [r7, #20]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3718      	adds	r7, #24
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	2400199c 	.word	0x2400199c
 8010a70:	080148a0 	.word	0x080148a0
 8010a74:	08010bb1 	.word	0x08010bb1
 8010a78:	240019a0 	.word	0x240019a0

08010a7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08a      	sub	sp, #40	; 0x28
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	607a      	str	r2, [r7, #4]
 8010a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <xTimerGenericCommand+0x2e>
	__asm volatile
 8010a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	623b      	str	r3, [r7, #32]
}
 8010aa6:	bf00      	nop
 8010aa8:	e7fe      	b.n	8010aa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010aaa:	4b1a      	ldr	r3, [pc, #104]	; (8010b14 <xTimerGenericCommand+0x98>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d02a      	beq.n	8010b08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2b05      	cmp	r3, #5
 8010ac2:	dc18      	bgt.n	8010af6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010ac4:	f7ff feb2 	bl	801082c <xTaskGetSchedulerState>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	d109      	bne.n	8010ae2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010ace:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <xTimerGenericCommand+0x98>)
 8010ad0:	6818      	ldr	r0, [r3, #0]
 8010ad2:	f107 0110 	add.w	r1, r7, #16
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ada:	f7fe fc77 	bl	800f3cc <xQueueGenericSend>
 8010ade:	6278      	str	r0, [r7, #36]	; 0x24
 8010ae0:	e012      	b.n	8010b08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ae2:	4b0c      	ldr	r3, [pc, #48]	; (8010b14 <xTimerGenericCommand+0x98>)
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	f107 0110 	add.w	r1, r7, #16
 8010aea:	2300      	movs	r3, #0
 8010aec:	2200      	movs	r2, #0
 8010aee:	f7fe fc6d 	bl	800f3cc <xQueueGenericSend>
 8010af2:	6278      	str	r0, [r7, #36]	; 0x24
 8010af4:	e008      	b.n	8010b08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010af6:	4b07      	ldr	r3, [pc, #28]	; (8010b14 <xTimerGenericCommand+0x98>)
 8010af8:	6818      	ldr	r0, [r3, #0]
 8010afa:	f107 0110 	add.w	r1, r7, #16
 8010afe:	2300      	movs	r3, #0
 8010b00:	683a      	ldr	r2, [r7, #0]
 8010b02:	f7fe fd61 	bl	800f5c8 <xQueueGenericSendFromISR>
 8010b06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3728      	adds	r7, #40	; 0x28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	2400199c 	.word	0x2400199c

08010b18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b22:	4b22      	ldr	r3, [pc, #136]	; (8010bac <prvProcessExpiredTimer+0x94>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fe fb1d 	bl	800f170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b3c:	f003 0304 	and.w	r3, r3, #4
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d022      	beq.n	8010b8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	699a      	ldr	r2, [r3, #24]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	18d1      	adds	r1, r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	6978      	ldr	r0, [r7, #20]
 8010b52:	f000 f8d1 	bl	8010cf8 <prvInsertTimerInActiveList>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d01f      	beq.n	8010b9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	2300      	movs	r3, #0
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	2100      	movs	r1, #0
 8010b66:	6978      	ldr	r0, [r7, #20]
 8010b68:	f7ff ff88 	bl	8010a7c <xTimerGenericCommand>
 8010b6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d113      	bne.n	8010b9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b78:	f383 8811 	msr	BASEPRI, r3
 8010b7c:	f3bf 8f6f 	isb	sy
 8010b80:	f3bf 8f4f 	dsb	sy
 8010b84:	60fb      	str	r3, [r7, #12]
}
 8010b86:	bf00      	nop
 8010b88:	e7fe      	b.n	8010b88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b90:	f023 0301 	bic.w	r3, r3, #1
 8010b94:	b2da      	uxtb	r2, r3
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	6a1b      	ldr	r3, [r3, #32]
 8010ba0:	6978      	ldr	r0, [r7, #20]
 8010ba2:	4798      	blx	r3
}
 8010ba4:	bf00      	nop
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	24001994 	.word	0x24001994

08010bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bb8:	f107 0308 	add.w	r3, r7, #8
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 f857 	bl	8010c70 <prvGetNextExpireTime>
 8010bc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f000 f803 	bl	8010bd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010bce:	f000 f8d5 	bl	8010d7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bd2:	e7f1      	b.n	8010bb8 <prvTimerTask+0x8>

08010bd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010bde:	f7ff fa39 	bl	8010054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010be2:	f107 0308 	add.w	r3, r7, #8
 8010be6:	4618      	mov	r0, r3
 8010be8:	f000 f866 	bl	8010cb8 <prvSampleTimeNow>
 8010bec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d130      	bne.n	8010c56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10a      	bne.n	8010c10 <prvProcessTimerOrBlockTask+0x3c>
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d806      	bhi.n	8010c10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010c02:	f7ff fa35 	bl	8010070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010c06:	68f9      	ldr	r1, [r7, #12]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f7ff ff85 	bl	8010b18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010c0e:	e024      	b.n	8010c5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d008      	beq.n	8010c28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010c16:	4b13      	ldr	r3, [pc, #76]	; (8010c64 <prvProcessTimerOrBlockTask+0x90>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d101      	bne.n	8010c24 <prvProcessTimerOrBlockTask+0x50>
 8010c20:	2301      	movs	r3, #1
 8010c22:	e000      	b.n	8010c26 <prvProcessTimerOrBlockTask+0x52>
 8010c24:	2300      	movs	r3, #0
 8010c26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010c28:	4b0f      	ldr	r3, [pc, #60]	; (8010c68 <prvProcessTimerOrBlockTask+0x94>)
 8010c2a:	6818      	ldr	r0, [r3, #0]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	4619      	mov	r1, r3
 8010c36:	f7fe ff7d 	bl	800fb34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c3a:	f7ff fa19 	bl	8010070 <xTaskResumeAll>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10a      	bne.n	8010c5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010c44:	4b09      	ldr	r3, [pc, #36]	; (8010c6c <prvProcessTimerOrBlockTask+0x98>)
 8010c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c4a:	601a      	str	r2, [r3, #0]
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	f3bf 8f6f 	isb	sy
}
 8010c54:	e001      	b.n	8010c5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010c56:	f7ff fa0b 	bl	8010070 <xTaskResumeAll>
}
 8010c5a:	bf00      	nop
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	24001998 	.word	0x24001998
 8010c68:	2400199c 	.word	0x2400199c
 8010c6c:	e000ed04 	.word	0xe000ed04

08010c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c78:	4b0e      	ldr	r3, [pc, #56]	; (8010cb4 <prvGetNextExpireTime+0x44>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d101      	bne.n	8010c86 <prvGetNextExpireTime+0x16>
 8010c82:	2201      	movs	r2, #1
 8010c84:	e000      	b.n	8010c88 <prvGetNextExpireTime+0x18>
 8010c86:	2200      	movs	r2, #0
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d105      	bne.n	8010ca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c94:	4b07      	ldr	r3, [pc, #28]	; (8010cb4 <prvGetNextExpireTime+0x44>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	e001      	b.n	8010ca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	24001994 	.word	0x24001994

08010cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010cc0:	f7ff fa74 	bl	80101ac <xTaskGetTickCount>
 8010cc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010cc6:	4b0b      	ldr	r3, [pc, #44]	; (8010cf4 <prvSampleTimeNow+0x3c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d205      	bcs.n	8010cdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010cd0:	f000 f936 	bl	8010f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	e002      	b.n	8010ce2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010ce2:	4a04      	ldr	r2, [pc, #16]	; (8010cf4 <prvSampleTimeNow+0x3c>)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	240019a4 	.word	0x240019a4

08010cf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
 8010d04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010d06:	2300      	movs	r3, #0
 8010d08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	68ba      	ldr	r2, [r7, #8]
 8010d0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d812      	bhi.n	8010d44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	1ad2      	subs	r2, r2, r3
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	699b      	ldr	r3, [r3, #24]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d302      	bcc.n	8010d32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	e01b      	b.n	8010d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010d32:	4b10      	ldr	r3, [pc, #64]	; (8010d74 <prvInsertTimerInActiveList+0x7c>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	f7fe f9de 	bl	800f0fe <vListInsert>
 8010d42:	e012      	b.n	8010d6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d206      	bcs.n	8010d5a <prvInsertTimerInActiveList+0x62>
 8010d4c:	68ba      	ldr	r2, [r7, #8]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d302      	bcc.n	8010d5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010d54:	2301      	movs	r3, #1
 8010d56:	617b      	str	r3, [r7, #20]
 8010d58:	e007      	b.n	8010d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d5a:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <prvInsertTimerInActiveList+0x80>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3304      	adds	r3, #4
 8010d62:	4619      	mov	r1, r3
 8010d64:	4610      	mov	r0, r2
 8010d66:	f7fe f9ca 	bl	800f0fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010d6a:	697b      	ldr	r3, [r7, #20]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3718      	adds	r7, #24
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	24001998 	.word	0x24001998
 8010d78:	24001994 	.word	0x24001994

08010d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b08e      	sub	sp, #56	; 0x38
 8010d80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d82:	e0ca      	b.n	8010f1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	da18      	bge.n	8010dbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d8a:	1d3b      	adds	r3, r7, #4
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10a      	bne.n	8010dac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	f383 8811 	msr	BASEPRI, r3
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f3bf 8f4f 	dsb	sy
 8010da6:	61fb      	str	r3, [r7, #28]
}
 8010da8:	bf00      	nop
 8010daa:	e7fe      	b.n	8010daa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010db2:	6850      	ldr	r0, [r2, #4]
 8010db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010db6:	6892      	ldr	r2, [r2, #8]
 8010db8:	4611      	mov	r1, r2
 8010dba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f2c0 80aa 	blt.w	8010f18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dca:	695b      	ldr	r3, [r3, #20]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d004      	beq.n	8010dda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe f9cb 	bl	800f170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010dda:	463b      	mov	r3, r7
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7ff ff6b 	bl	8010cb8 <prvSampleTimeNow>
 8010de2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b09      	cmp	r3, #9
 8010de8:	f200 8097 	bhi.w	8010f1a <prvProcessReceivedCommands+0x19e>
 8010dec:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <prvProcessReceivedCommands+0x78>)
 8010dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df2:	bf00      	nop
 8010df4:	08010e1d 	.word	0x08010e1d
 8010df8:	08010e1d 	.word	0x08010e1d
 8010dfc:	08010e1d 	.word	0x08010e1d
 8010e00:	08010e91 	.word	0x08010e91
 8010e04:	08010ea5 	.word	0x08010ea5
 8010e08:	08010eef 	.word	0x08010eef
 8010e0c:	08010e1d 	.word	0x08010e1d
 8010e10:	08010e1d 	.word	0x08010e1d
 8010e14:	08010e91 	.word	0x08010e91
 8010e18:	08010ea5 	.word	0x08010ea5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e22:	f043 0301 	orr.w	r3, r3, #1
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e2e:	68ba      	ldr	r2, [r7, #8]
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	699b      	ldr	r3, [r3, #24]
 8010e34:	18d1      	adds	r1, r2, r3
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e3c:	f7ff ff5c 	bl	8010cf8 <prvInsertTimerInActiveList>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d069      	beq.n	8010f1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e48:	6a1b      	ldr	r3, [r3, #32]
 8010e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e54:	f003 0304 	and.w	r3, r3, #4
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d05e      	beq.n	8010f1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	441a      	add	r2, r3
 8010e64:	2300      	movs	r3, #0
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	2300      	movs	r3, #0
 8010e6a:	2100      	movs	r1, #0
 8010e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e6e:	f7ff fe05 	bl	8010a7c <xTimerGenericCommand>
 8010e72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010e74:	6a3b      	ldr	r3, [r7, #32]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d14f      	bne.n	8010f1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	61bb      	str	r3, [r7, #24]
}
 8010e8c:	bf00      	nop
 8010e8e:	e7fe      	b.n	8010e8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e96:	f023 0301 	bic.w	r3, r3, #1
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ea2:	e03a      	b.n	8010f1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010eaa:	f043 0301 	orr.w	r3, r3, #1
 8010eae:	b2da      	uxtb	r2, r3
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010eb6:	68ba      	ldr	r2, [r7, #8]
 8010eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebe:	699b      	ldr	r3, [r3, #24]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d10a      	bne.n	8010eda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	617b      	str	r3, [r7, #20]
}
 8010ed6:	bf00      	nop
 8010ed8:	e7fe      	b.n	8010ed8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010edc:	699a      	ldr	r2, [r3, #24]
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	18d1      	adds	r1, r2, r3
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ee8:	f7ff ff06 	bl	8010cf8 <prvInsertTimerInActiveList>
					break;
 8010eec:	e015      	b.n	8010f1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ef4:	f003 0302 	and.w	r3, r3, #2
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d103      	bne.n	8010f04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010efe:	f000 fbdf 	bl	80116c0 <vPortFree>
 8010f02:	e00a      	b.n	8010f1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f0a:	f023 0301 	bic.w	r3, r3, #1
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010f16:	e000      	b.n	8010f1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010f18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f1a:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <prvProcessReceivedCommands+0x1c0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	1d39      	adds	r1, r7, #4
 8010f20:	2200      	movs	r2, #0
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fe fbec 	bl	800f700 <xQueueReceive>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f47f af2a 	bne.w	8010d84 <prvProcessReceivedCommands+0x8>
	}
}
 8010f30:	bf00      	nop
 8010f32:	bf00      	nop
 8010f34:	3730      	adds	r7, #48	; 0x30
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	2400199c 	.word	0x2400199c

08010f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b088      	sub	sp, #32
 8010f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f46:	e048      	b.n	8010fda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f48:	4b2d      	ldr	r3, [pc, #180]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f52:	4b2b      	ldr	r3, [pc, #172]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	3304      	adds	r3, #4
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe f905 	bl	800f170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6a1b      	ldr	r3, [r3, #32]
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f74:	f003 0304 	and.w	r3, r3, #4
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d02e      	beq.n	8010fda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	693a      	ldr	r2, [r7, #16]
 8010f82:	4413      	add	r3, r2
 8010f84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f86:	68ba      	ldr	r2, [r7, #8]
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d90e      	bls.n	8010fac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f9a:	4b19      	ldr	r3, [pc, #100]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	3304      	adds	r3, #4
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4610      	mov	r0, r2
 8010fa6:	f7fe f8aa 	bl	800f0fe <vListInsert>
 8010faa:	e016      	b.n	8010fda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fac:	2300      	movs	r3, #0
 8010fae:	9300      	str	r3, [sp, #0]
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	f7ff fd60 	bl	8010a7c <xTimerGenericCommand>
 8010fbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d10a      	bne.n	8010fda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	603b      	str	r3, [r7, #0]
}
 8010fd6:	bf00      	nop
 8010fd8:	e7fe      	b.n	8010fd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fda:	4b09      	ldr	r3, [pc, #36]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1b1      	bne.n	8010f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010fe4:	4b06      	ldr	r3, [pc, #24]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010fea:	4b06      	ldr	r3, [pc, #24]	; (8011004 <prvSwitchTimerLists+0xc4>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4a04      	ldr	r2, [pc, #16]	; (8011000 <prvSwitchTimerLists+0xc0>)
 8010ff0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010ff2:	4a04      	ldr	r2, [pc, #16]	; (8011004 <prvSwitchTimerLists+0xc4>)
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	6013      	str	r3, [r2, #0]
}
 8010ff8:	bf00      	nop
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	24001994 	.word	0x24001994
 8011004:	24001998 	.word	0x24001998

08011008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801100e:	f000 f969 	bl	80112e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011012:	4b15      	ldr	r3, [pc, #84]	; (8011068 <prvCheckForValidListAndQueue+0x60>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d120      	bne.n	801105c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801101a:	4814      	ldr	r0, [pc, #80]	; (801106c <prvCheckForValidListAndQueue+0x64>)
 801101c:	f7fe f81e 	bl	800f05c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011020:	4813      	ldr	r0, [pc, #76]	; (8011070 <prvCheckForValidListAndQueue+0x68>)
 8011022:	f7fe f81b 	bl	800f05c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011026:	4b13      	ldr	r3, [pc, #76]	; (8011074 <prvCheckForValidListAndQueue+0x6c>)
 8011028:	4a10      	ldr	r2, [pc, #64]	; (801106c <prvCheckForValidListAndQueue+0x64>)
 801102a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801102c:	4b12      	ldr	r3, [pc, #72]	; (8011078 <prvCheckForValidListAndQueue+0x70>)
 801102e:	4a10      	ldr	r2, [pc, #64]	; (8011070 <prvCheckForValidListAndQueue+0x68>)
 8011030:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011032:	2300      	movs	r3, #0
 8011034:	9300      	str	r3, [sp, #0]
 8011036:	4b11      	ldr	r3, [pc, #68]	; (801107c <prvCheckForValidListAndQueue+0x74>)
 8011038:	4a11      	ldr	r2, [pc, #68]	; (8011080 <prvCheckForValidListAndQueue+0x78>)
 801103a:	2110      	movs	r1, #16
 801103c:	200a      	movs	r0, #10
 801103e:	f7fe f929 	bl	800f294 <xQueueGenericCreateStatic>
 8011042:	4603      	mov	r3, r0
 8011044:	4a08      	ldr	r2, [pc, #32]	; (8011068 <prvCheckForValidListAndQueue+0x60>)
 8011046:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011048:	4b07      	ldr	r3, [pc, #28]	; (8011068 <prvCheckForValidListAndQueue+0x60>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d005      	beq.n	801105c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011050:	4b05      	ldr	r3, [pc, #20]	; (8011068 <prvCheckForValidListAndQueue+0x60>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	490b      	ldr	r1, [pc, #44]	; (8011084 <prvCheckForValidListAndQueue+0x7c>)
 8011056:	4618      	mov	r0, r3
 8011058:	f7fe fd42 	bl	800fae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801105c:	f000 f972 	bl	8011344 <vPortExitCritical>
}
 8011060:	bf00      	nop
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	2400199c 	.word	0x2400199c
 801106c:	2400196c 	.word	0x2400196c
 8011070:	24001980 	.word	0x24001980
 8011074:	24001994 	.word	0x24001994
 8011078:	24001998 	.word	0x24001998
 801107c:	24001a48 	.word	0x24001a48
 8011080:	240019a8 	.word	0x240019a8
 8011084:	080148a8 	.word	0x080148a8

08011088 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3b04      	subs	r3, #4
 8011098:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80110a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3b04      	subs	r3, #4
 80110a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	f023 0201 	bic.w	r2, r3, #1
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	3b04      	subs	r3, #4
 80110b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80110b8:	4a0c      	ldr	r2, [pc, #48]	; (80110ec <pxPortInitialiseStack+0x64>)
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	3b14      	subs	r3, #20
 80110c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3b04      	subs	r3, #4
 80110ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f06f 0202 	mvn.w	r2, #2
 80110d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	3b20      	subs	r3, #32
 80110dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80110de:	68fb      	ldr	r3, [r7, #12]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3714      	adds	r7, #20
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr
 80110ec:	080110f1 	.word	0x080110f1

080110f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110fa:	4b12      	ldr	r3, [pc, #72]	; (8011144 <prvTaskExitError+0x54>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011102:	d00a      	beq.n	801111a <prvTaskExitError+0x2a>
	__asm volatile
 8011104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011108:	f383 8811 	msr	BASEPRI, r3
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	60fb      	str	r3, [r7, #12]
}
 8011116:	bf00      	nop
 8011118:	e7fe      	b.n	8011118 <prvTaskExitError+0x28>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111e:	f383 8811 	msr	BASEPRI, r3
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	60bb      	str	r3, [r7, #8]
}
 801112c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801112e:	bf00      	nop
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d0fc      	beq.n	8011130 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011136:	bf00      	nop
 8011138:	bf00      	nop
 801113a:	3714      	adds	r7, #20
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr
 8011144:	24000010 	.word	0x24000010
	...

08011150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011150:	4b07      	ldr	r3, [pc, #28]	; (8011170 <pxCurrentTCBConst2>)
 8011152:	6819      	ldr	r1, [r3, #0]
 8011154:	6808      	ldr	r0, [r1, #0]
 8011156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115a:	f380 8809 	msr	PSP, r0
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f04f 0000 	mov.w	r0, #0
 8011166:	f380 8811 	msr	BASEPRI, r0
 801116a:	4770      	bx	lr
 801116c:	f3af 8000 	nop.w

08011170 <pxCurrentTCBConst2>:
 8011170:	2400146c 	.word	0x2400146c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011174:	bf00      	nop
 8011176:	bf00      	nop

08011178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011178:	4808      	ldr	r0, [pc, #32]	; (801119c <prvPortStartFirstTask+0x24>)
 801117a:	6800      	ldr	r0, [r0, #0]
 801117c:	6800      	ldr	r0, [r0, #0]
 801117e:	f380 8808 	msr	MSP, r0
 8011182:	f04f 0000 	mov.w	r0, #0
 8011186:	f380 8814 	msr	CONTROL, r0
 801118a:	b662      	cpsie	i
 801118c:	b661      	cpsie	f
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	df00      	svc	0
 8011198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801119a:	bf00      	nop
 801119c:	e000ed08 	.word	0xe000ed08

080111a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80111a6:	4b46      	ldr	r3, [pc, #280]	; (80112c0 <xPortStartScheduler+0x120>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4a46      	ldr	r2, [pc, #280]	; (80112c4 <xPortStartScheduler+0x124>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d10a      	bne.n	80111c6 <xPortStartScheduler+0x26>
	__asm volatile
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	613b      	str	r3, [r7, #16]
}
 80111c2:	bf00      	nop
 80111c4:	e7fe      	b.n	80111c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80111c6:	4b3e      	ldr	r3, [pc, #248]	; (80112c0 <xPortStartScheduler+0x120>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a3f      	ldr	r2, [pc, #252]	; (80112c8 <xPortStartScheduler+0x128>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d10a      	bne.n	80111e6 <xPortStartScheduler+0x46>
	__asm volatile
 80111d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	60fb      	str	r3, [r7, #12]
}
 80111e2:	bf00      	nop
 80111e4:	e7fe      	b.n	80111e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80111e6:	4b39      	ldr	r3, [pc, #228]	; (80112cc <xPortStartScheduler+0x12c>)
 80111e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	22ff      	movs	r2, #255	; 0xff
 80111f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	b2db      	uxtb	r3, r3
 80111fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	b2db      	uxtb	r3, r3
 8011204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011208:	b2da      	uxtb	r2, r3
 801120a:	4b31      	ldr	r3, [pc, #196]	; (80112d0 <xPortStartScheduler+0x130>)
 801120c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801120e:	4b31      	ldr	r3, [pc, #196]	; (80112d4 <xPortStartScheduler+0x134>)
 8011210:	2207      	movs	r2, #7
 8011212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011214:	e009      	b.n	801122a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011216:	4b2f      	ldr	r3, [pc, #188]	; (80112d4 <xPortStartScheduler+0x134>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	3b01      	subs	r3, #1
 801121c:	4a2d      	ldr	r2, [pc, #180]	; (80112d4 <xPortStartScheduler+0x134>)
 801121e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011220:	78fb      	ldrb	r3, [r7, #3]
 8011222:	b2db      	uxtb	r3, r3
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	b2db      	uxtb	r3, r3
 8011228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801122a:	78fb      	ldrb	r3, [r7, #3]
 801122c:	b2db      	uxtb	r3, r3
 801122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011232:	2b80      	cmp	r3, #128	; 0x80
 8011234:	d0ef      	beq.n	8011216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011236:	4b27      	ldr	r3, [pc, #156]	; (80112d4 <xPortStartScheduler+0x134>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f1c3 0307 	rsb	r3, r3, #7
 801123e:	2b04      	cmp	r3, #4
 8011240:	d00a      	beq.n	8011258 <xPortStartScheduler+0xb8>
	__asm volatile
 8011242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011246:	f383 8811 	msr	BASEPRI, r3
 801124a:	f3bf 8f6f 	isb	sy
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	60bb      	str	r3, [r7, #8]
}
 8011254:	bf00      	nop
 8011256:	e7fe      	b.n	8011256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011258:	4b1e      	ldr	r3, [pc, #120]	; (80112d4 <xPortStartScheduler+0x134>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	021b      	lsls	r3, r3, #8
 801125e:	4a1d      	ldr	r2, [pc, #116]	; (80112d4 <xPortStartScheduler+0x134>)
 8011260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011262:	4b1c      	ldr	r3, [pc, #112]	; (80112d4 <xPortStartScheduler+0x134>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801126a:	4a1a      	ldr	r2, [pc, #104]	; (80112d4 <xPortStartScheduler+0x134>)
 801126c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	b2da      	uxtb	r2, r3
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011276:	4b18      	ldr	r3, [pc, #96]	; (80112d8 <xPortStartScheduler+0x138>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a17      	ldr	r2, [pc, #92]	; (80112d8 <xPortStartScheduler+0x138>)
 801127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011282:	4b15      	ldr	r3, [pc, #84]	; (80112d8 <xPortStartScheduler+0x138>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	4a14      	ldr	r2, [pc, #80]	; (80112d8 <xPortStartScheduler+0x138>)
 8011288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801128c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801128e:	f000 f8dd 	bl	801144c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011292:	4b12      	ldr	r3, [pc, #72]	; (80112dc <xPortStartScheduler+0x13c>)
 8011294:	2200      	movs	r2, #0
 8011296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011298:	f000 f8fc 	bl	8011494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801129c:	4b10      	ldr	r3, [pc, #64]	; (80112e0 <xPortStartScheduler+0x140>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4a0f      	ldr	r2, [pc, #60]	; (80112e0 <xPortStartScheduler+0x140>)
 80112a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80112a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80112a8:	f7ff ff66 	bl	8011178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80112ac:	f7ff f848 	bl	8010340 <vTaskSwitchContext>
	prvTaskExitError();
 80112b0:	f7ff ff1e 	bl	80110f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3718      	adds	r7, #24
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	e000ed00 	.word	0xe000ed00
 80112c4:	410fc271 	.word	0x410fc271
 80112c8:	410fc270 	.word	0x410fc270
 80112cc:	e000e400 	.word	0xe000e400
 80112d0:	24001a98 	.word	0x24001a98
 80112d4:	24001a9c 	.word	0x24001a9c
 80112d8:	e000ed20 	.word	0xe000ed20
 80112dc:	24000010 	.word	0x24000010
 80112e0:	e000ef34 	.word	0xe000ef34

080112e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	607b      	str	r3, [r7, #4]
}
 80112fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80112fe:	4b0f      	ldr	r3, [pc, #60]	; (801133c <vPortEnterCritical+0x58>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	3301      	adds	r3, #1
 8011304:	4a0d      	ldr	r2, [pc, #52]	; (801133c <vPortEnterCritical+0x58>)
 8011306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011308:	4b0c      	ldr	r3, [pc, #48]	; (801133c <vPortEnterCritical+0x58>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d10f      	bne.n	8011330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011310:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <vPortEnterCritical+0x5c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00a      	beq.n	8011330 <vPortEnterCritical+0x4c>
	__asm volatile
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	603b      	str	r3, [r7, #0]
}
 801132c:	bf00      	nop
 801132e:	e7fe      	b.n	801132e <vPortEnterCritical+0x4a>
	}
}
 8011330:	bf00      	nop
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	24000010 	.word	0x24000010
 8011340:	e000ed04 	.word	0xe000ed04

08011344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801134a:	4b12      	ldr	r3, [pc, #72]	; (8011394 <vPortExitCritical+0x50>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10a      	bne.n	8011368 <vPortExitCritical+0x24>
	__asm volatile
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	607b      	str	r3, [r7, #4]
}
 8011364:	bf00      	nop
 8011366:	e7fe      	b.n	8011366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011368:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <vPortExitCritical+0x50>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	3b01      	subs	r3, #1
 801136e:	4a09      	ldr	r2, [pc, #36]	; (8011394 <vPortExitCritical+0x50>)
 8011370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011372:	4b08      	ldr	r3, [pc, #32]	; (8011394 <vPortExitCritical+0x50>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d105      	bne.n	8011386 <vPortExitCritical+0x42>
 801137a:	2300      	movs	r3, #0
 801137c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	f383 8811 	msr	BASEPRI, r3
}
 8011384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011386:	bf00      	nop
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	24000010 	.word	0x24000010
	...

080113a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80113a0:	f3ef 8009 	mrs	r0, PSP
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	4b15      	ldr	r3, [pc, #84]	; (8011400 <pxCurrentTCBConst>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	f01e 0f10 	tst.w	lr, #16
 80113b0:	bf08      	it	eq
 80113b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80113b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ba:	6010      	str	r0, [r2, #0]
 80113bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80113c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80113c4:	f380 8811 	msr	BASEPRI, r0
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	f3bf 8f6f 	isb	sy
 80113d0:	f7fe ffb6 	bl	8010340 <vTaskSwitchContext>
 80113d4:	f04f 0000 	mov.w	r0, #0
 80113d8:	f380 8811 	msr	BASEPRI, r0
 80113dc:	bc09      	pop	{r0, r3}
 80113de:	6819      	ldr	r1, [r3, #0]
 80113e0:	6808      	ldr	r0, [r1, #0]
 80113e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e6:	f01e 0f10 	tst.w	lr, #16
 80113ea:	bf08      	it	eq
 80113ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80113f0:	f380 8809 	msr	PSP, r0
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	f3af 8000 	nop.w

08011400 <pxCurrentTCBConst>:
 8011400:	2400146c 	.word	0x2400146c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011404:	bf00      	nop
 8011406:	bf00      	nop

08011408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	607b      	str	r3, [r7, #4]
}
 8011420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011422:	f7fe fed3 	bl	80101cc <xTaskIncrementTick>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d003      	beq.n	8011434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801142c:	4b06      	ldr	r3, [pc, #24]	; (8011448 <xPortSysTickHandler+0x40>)
 801142e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	2300      	movs	r3, #0
 8011436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	f383 8811 	msr	BASEPRI, r3
}
 801143e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011440:	bf00      	nop
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	e000ed04 	.word	0xe000ed04

0801144c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801144c:	b480      	push	{r7}
 801144e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011450:	4b0b      	ldr	r3, [pc, #44]	; (8011480 <vPortSetupTimerInterrupt+0x34>)
 8011452:	2200      	movs	r2, #0
 8011454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011456:	4b0b      	ldr	r3, [pc, #44]	; (8011484 <vPortSetupTimerInterrupt+0x38>)
 8011458:	2200      	movs	r2, #0
 801145a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801145c:	4b0a      	ldr	r3, [pc, #40]	; (8011488 <vPortSetupTimerInterrupt+0x3c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a0a      	ldr	r2, [pc, #40]	; (801148c <vPortSetupTimerInterrupt+0x40>)
 8011462:	fba2 2303 	umull	r2, r3, r2, r3
 8011466:	099b      	lsrs	r3, r3, #6
 8011468:	4a09      	ldr	r2, [pc, #36]	; (8011490 <vPortSetupTimerInterrupt+0x44>)
 801146a:	3b01      	subs	r3, #1
 801146c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801146e:	4b04      	ldr	r3, [pc, #16]	; (8011480 <vPortSetupTimerInterrupt+0x34>)
 8011470:	2207      	movs	r2, #7
 8011472:	601a      	str	r2, [r3, #0]
}
 8011474:	bf00      	nop
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	e000e010 	.word	0xe000e010
 8011484:	e000e018 	.word	0xe000e018
 8011488:	24000000 	.word	0x24000000
 801148c:	10624dd3 	.word	0x10624dd3
 8011490:	e000e014 	.word	0xe000e014

08011494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80114a4 <vPortEnableVFP+0x10>
 8011498:	6801      	ldr	r1, [r0, #0]
 801149a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801149e:	6001      	str	r1, [r0, #0]
 80114a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80114a2:	bf00      	nop
 80114a4:	e000ed88 	.word	0xe000ed88

080114a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80114a8:	b480      	push	{r7}
 80114aa:	b085      	sub	sp, #20
 80114ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80114ae:	f3ef 8305 	mrs	r3, IPSR
 80114b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2b0f      	cmp	r3, #15
 80114b8:	d914      	bls.n	80114e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80114ba:	4a17      	ldr	r2, [pc, #92]	; (8011518 <vPortValidateInterruptPriority+0x70>)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	4413      	add	r3, r2
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80114c4:	4b15      	ldr	r3, [pc, #84]	; (801151c <vPortValidateInterruptPriority+0x74>)
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	7afa      	ldrb	r2, [r7, #11]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d20a      	bcs.n	80114e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d2:	f383 8811 	msr	BASEPRI, r3
 80114d6:	f3bf 8f6f 	isb	sy
 80114da:	f3bf 8f4f 	dsb	sy
 80114de:	607b      	str	r3, [r7, #4]
}
 80114e0:	bf00      	nop
 80114e2:	e7fe      	b.n	80114e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80114e4:	4b0e      	ldr	r3, [pc, #56]	; (8011520 <vPortValidateInterruptPriority+0x78>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80114ec:	4b0d      	ldr	r3, [pc, #52]	; (8011524 <vPortValidateInterruptPriority+0x7c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d90a      	bls.n	801150a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80114f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f8:	f383 8811 	msr	BASEPRI, r3
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	f3bf 8f4f 	dsb	sy
 8011504:	603b      	str	r3, [r7, #0]
}
 8011506:	bf00      	nop
 8011508:	e7fe      	b.n	8011508 <vPortValidateInterruptPriority+0x60>
	}
 801150a:	bf00      	nop
 801150c:	3714      	adds	r7, #20
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop
 8011518:	e000e3f0 	.word	0xe000e3f0
 801151c:	24001a98 	.word	0x24001a98
 8011520:	e000ed0c 	.word	0xe000ed0c
 8011524:	24001a9c 	.word	0x24001a9c

08011528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08a      	sub	sp, #40	; 0x28
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011534:	f7fe fd8e 	bl	8010054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011538:	4b5b      	ldr	r3, [pc, #364]	; (80116a8 <pvPortMalloc+0x180>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d101      	bne.n	8011544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011540:	f000 f920 	bl	8011784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011544:	4b59      	ldr	r3, [pc, #356]	; (80116ac <pvPortMalloc+0x184>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4013      	ands	r3, r2
 801154c:	2b00      	cmp	r3, #0
 801154e:	f040 8093 	bne.w	8011678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d01d      	beq.n	8011594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011558:	2208      	movs	r2, #8
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4413      	add	r3, r2
 801155e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f003 0307 	and.w	r3, r3, #7
 8011566:	2b00      	cmp	r3, #0
 8011568:	d014      	beq.n	8011594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f023 0307 	bic.w	r3, r3, #7
 8011570:	3308      	adds	r3, #8
 8011572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f003 0307 	and.w	r3, r3, #7
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00a      	beq.n	8011594 <pvPortMalloc+0x6c>
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	617b      	str	r3, [r7, #20]
}
 8011590:	bf00      	nop
 8011592:	e7fe      	b.n	8011592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d06e      	beq.n	8011678 <pvPortMalloc+0x150>
 801159a:	4b45      	ldr	r3, [pc, #276]	; (80116b0 <pvPortMalloc+0x188>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d869      	bhi.n	8011678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115a4:	4b43      	ldr	r3, [pc, #268]	; (80116b4 <pvPortMalloc+0x18c>)
 80115a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80115a8:	4b42      	ldr	r3, [pc, #264]	; (80116b4 <pvPortMalloc+0x18c>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115ae:	e004      	b.n	80115ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80115b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d903      	bls.n	80115cc <pvPortMalloc+0xa4>
 80115c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1f1      	bne.n	80115b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80115cc:	4b36      	ldr	r3, [pc, #216]	; (80116a8 <pvPortMalloc+0x180>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d050      	beq.n	8011678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2208      	movs	r2, #8
 80115dc:	4413      	add	r3, r2
 80115de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80115e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	6a3b      	ldr	r3, [r7, #32]
 80115e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	1ad2      	subs	r2, r2, r3
 80115f0:	2308      	movs	r3, #8
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d91f      	bls.n	8011638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80115f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4413      	add	r3, r2
 80115fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	f003 0307 	and.w	r3, r3, #7
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00a      	beq.n	8011620 <pvPortMalloc+0xf8>
	__asm volatile
 801160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160e:	f383 8811 	msr	BASEPRI, r3
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	f3bf 8f4f 	dsb	sy
 801161a:	613b      	str	r3, [r7, #16]
}
 801161c:	bf00      	nop
 801161e:	e7fe      	b.n	801161e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	1ad2      	subs	r2, r2, r3
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011632:	69b8      	ldr	r0, [r7, #24]
 8011634:	f000 f908 	bl	8011848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011638:	4b1d      	ldr	r3, [pc, #116]	; (80116b0 <pvPortMalloc+0x188>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	4a1b      	ldr	r2, [pc, #108]	; (80116b0 <pvPortMalloc+0x188>)
 8011644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011646:	4b1a      	ldr	r3, [pc, #104]	; (80116b0 <pvPortMalloc+0x188>)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	4b1b      	ldr	r3, [pc, #108]	; (80116b8 <pvPortMalloc+0x190>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d203      	bcs.n	801165a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011652:	4b17      	ldr	r3, [pc, #92]	; (80116b0 <pvPortMalloc+0x188>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4a18      	ldr	r2, [pc, #96]	; (80116b8 <pvPortMalloc+0x190>)
 8011658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165c:	685a      	ldr	r2, [r3, #4]
 801165e:	4b13      	ldr	r3, [pc, #76]	; (80116ac <pvPortMalloc+0x184>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	431a      	orrs	r2, r3
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166a:	2200      	movs	r2, #0
 801166c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801166e:	4b13      	ldr	r3, [pc, #76]	; (80116bc <pvPortMalloc+0x194>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	3301      	adds	r3, #1
 8011674:	4a11      	ldr	r2, [pc, #68]	; (80116bc <pvPortMalloc+0x194>)
 8011676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011678:	f7fe fcfa 	bl	8010070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	f003 0307 	and.w	r3, r3, #7
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00a      	beq.n	801169c <pvPortMalloc+0x174>
	__asm volatile
 8011686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	60fb      	str	r3, [r7, #12]
}
 8011698:	bf00      	nop
 801169a:	e7fe      	b.n	801169a <pvPortMalloc+0x172>
	return pvReturn;
 801169c:	69fb      	ldr	r3, [r7, #28]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3728      	adds	r7, #40	; 0x28
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	240056a8 	.word	0x240056a8
 80116ac:	240056bc 	.word	0x240056bc
 80116b0:	240056ac 	.word	0x240056ac
 80116b4:	240056a0 	.word	0x240056a0
 80116b8:	240056b0 	.word	0x240056b0
 80116bc:	240056b4 	.word	0x240056b4

080116c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d04d      	beq.n	801176e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80116d2:	2308      	movs	r3, #8
 80116d4:	425b      	negs	r3, r3
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	4413      	add	r3, r2
 80116da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	685a      	ldr	r2, [r3, #4]
 80116e4:	4b24      	ldr	r3, [pc, #144]	; (8011778 <vPortFree+0xb8>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4013      	ands	r3, r2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10a      	bne.n	8011704 <vPortFree+0x44>
	__asm volatile
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	60fb      	str	r3, [r7, #12]
}
 8011700:	bf00      	nop
 8011702:	e7fe      	b.n	8011702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00a      	beq.n	8011722 <vPortFree+0x62>
	__asm volatile
 801170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011710:	f383 8811 	msr	BASEPRI, r3
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	60bb      	str	r3, [r7, #8]
}
 801171e:	bf00      	nop
 8011720:	e7fe      	b.n	8011720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	685a      	ldr	r2, [r3, #4]
 8011726:	4b14      	ldr	r3, [pc, #80]	; (8011778 <vPortFree+0xb8>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	4013      	ands	r3, r2
 801172c:	2b00      	cmp	r3, #0
 801172e:	d01e      	beq.n	801176e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d11a      	bne.n	801176e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	4b0e      	ldr	r3, [pc, #56]	; (8011778 <vPortFree+0xb8>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	43db      	mvns	r3, r3
 8011742:	401a      	ands	r2, r3
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011748:	f7fe fc84 	bl	8010054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	4b0a      	ldr	r3, [pc, #40]	; (801177c <vPortFree+0xbc>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4413      	add	r3, r2
 8011756:	4a09      	ldr	r2, [pc, #36]	; (801177c <vPortFree+0xbc>)
 8011758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801175a:	6938      	ldr	r0, [r7, #16]
 801175c:	f000 f874 	bl	8011848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011760:	4b07      	ldr	r3, [pc, #28]	; (8011780 <vPortFree+0xc0>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3301      	adds	r3, #1
 8011766:	4a06      	ldr	r2, [pc, #24]	; (8011780 <vPortFree+0xc0>)
 8011768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801176a:	f7fe fc81 	bl	8010070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801176e:	bf00      	nop
 8011770:	3718      	adds	r7, #24
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	240056bc 	.word	0x240056bc
 801177c:	240056ac 	.word	0x240056ac
 8011780:	240056b8 	.word	0x240056b8

08011784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011784:	b480      	push	{r7}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801178a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801178e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011790:	4b27      	ldr	r3, [pc, #156]	; (8011830 <prvHeapInit+0xac>)
 8011792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f003 0307 	and.w	r3, r3, #7
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00c      	beq.n	80117b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	3307      	adds	r3, #7
 80117a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0307 	bic.w	r3, r3, #7
 80117aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	4a1f      	ldr	r2, [pc, #124]	; (8011830 <prvHeapInit+0xac>)
 80117b4:	4413      	add	r3, r2
 80117b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117bc:	4a1d      	ldr	r2, [pc, #116]	; (8011834 <prvHeapInit+0xb0>)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117c2:	4b1c      	ldr	r3, [pc, #112]	; (8011834 <prvHeapInit+0xb0>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	4413      	add	r3, r2
 80117ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117d0:	2208      	movs	r2, #8
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	1a9b      	subs	r3, r3, r2
 80117d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f023 0307 	bic.w	r3, r3, #7
 80117de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4a15      	ldr	r2, [pc, #84]	; (8011838 <prvHeapInit+0xb4>)
 80117e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80117e6:	4b14      	ldr	r3, [pc, #80]	; (8011838 <prvHeapInit+0xb4>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2200      	movs	r2, #0
 80117ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117ee:	4b12      	ldr	r3, [pc, #72]	; (8011838 <prvHeapInit+0xb4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2200      	movs	r2, #0
 80117f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	1ad2      	subs	r2, r2, r3
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011804:	4b0c      	ldr	r3, [pc, #48]	; (8011838 <prvHeapInit+0xb4>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	4a0a      	ldr	r2, [pc, #40]	; (801183c <prvHeapInit+0xb8>)
 8011812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	4a09      	ldr	r2, [pc, #36]	; (8011840 <prvHeapInit+0xbc>)
 801181a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801181c:	4b09      	ldr	r3, [pc, #36]	; (8011844 <prvHeapInit+0xc0>)
 801181e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011822:	601a      	str	r2, [r3, #0]
}
 8011824:	bf00      	nop
 8011826:	3714      	adds	r7, #20
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	24001aa0 	.word	0x24001aa0
 8011834:	240056a0 	.word	0x240056a0
 8011838:	240056a8 	.word	0x240056a8
 801183c:	240056b0 	.word	0x240056b0
 8011840:	240056ac 	.word	0x240056ac
 8011844:	240056bc 	.word	0x240056bc

08011848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011850:	4b28      	ldr	r3, [pc, #160]	; (80118f4 <prvInsertBlockIntoFreeList+0xac>)
 8011852:	60fb      	str	r3, [r7, #12]
 8011854:	e002      	b.n	801185c <prvInsertBlockIntoFreeList+0x14>
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	60fb      	str	r3, [r7, #12]
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	687a      	ldr	r2, [r7, #4]
 8011862:	429a      	cmp	r2, r3
 8011864:	d8f7      	bhi.n	8011856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	4413      	add	r3, r2
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	429a      	cmp	r2, r3
 8011876:	d108      	bne.n	801188a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	441a      	add	r2, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	68ba      	ldr	r2, [r7, #8]
 8011894:	441a      	add	r2, r3
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	429a      	cmp	r2, r3
 801189c:	d118      	bne.n	80118d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	4b15      	ldr	r3, [pc, #84]	; (80118f8 <prvInsertBlockIntoFreeList+0xb0>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d00d      	beq.n	80118c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	685a      	ldr	r2, [r3, #4]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	441a      	add	r2, r3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	681a      	ldr	r2, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	e008      	b.n	80118d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118c6:	4b0c      	ldr	r3, [pc, #48]	; (80118f8 <prvInsertBlockIntoFreeList+0xb0>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	601a      	str	r2, [r3, #0]
 80118ce:	e003      	b.n	80118d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118d8:	68fa      	ldr	r2, [r7, #12]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d002      	beq.n	80118e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118e6:	bf00      	nop
 80118e8:	3714      	adds	r7, #20
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	240056a0 	.word	0x240056a0
 80118f8:	240056a8 	.word	0x240056a8

080118fc <__errno>:
 80118fc:	4b01      	ldr	r3, [pc, #4]	; (8011904 <__errno+0x8>)
 80118fe:	6818      	ldr	r0, [r3, #0]
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	24000014 	.word	0x24000014

08011908 <std>:
 8011908:	2300      	movs	r3, #0
 801190a:	b510      	push	{r4, lr}
 801190c:	4604      	mov	r4, r0
 801190e:	e9c0 3300 	strd	r3, r3, [r0]
 8011912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011916:	6083      	str	r3, [r0, #8]
 8011918:	8181      	strh	r1, [r0, #12]
 801191a:	6643      	str	r3, [r0, #100]	; 0x64
 801191c:	81c2      	strh	r2, [r0, #14]
 801191e:	6183      	str	r3, [r0, #24]
 8011920:	4619      	mov	r1, r3
 8011922:	2208      	movs	r2, #8
 8011924:	305c      	adds	r0, #92	; 0x5c
 8011926:	f000 f91a 	bl	8011b5e <memset>
 801192a:	4b05      	ldr	r3, [pc, #20]	; (8011940 <std+0x38>)
 801192c:	6263      	str	r3, [r4, #36]	; 0x24
 801192e:	4b05      	ldr	r3, [pc, #20]	; (8011944 <std+0x3c>)
 8011930:	62a3      	str	r3, [r4, #40]	; 0x28
 8011932:	4b05      	ldr	r3, [pc, #20]	; (8011948 <std+0x40>)
 8011934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011936:	4b05      	ldr	r3, [pc, #20]	; (801194c <std+0x44>)
 8011938:	6224      	str	r4, [r4, #32]
 801193a:	6323      	str	r3, [r4, #48]	; 0x30
 801193c:	bd10      	pop	{r4, pc}
 801193e:	bf00      	nop
 8011940:	08012651 	.word	0x08012651
 8011944:	08012673 	.word	0x08012673
 8011948:	080126ab 	.word	0x080126ab
 801194c:	080126cf 	.word	0x080126cf

08011950 <_cleanup_r>:
 8011950:	4901      	ldr	r1, [pc, #4]	; (8011958 <_cleanup_r+0x8>)
 8011952:	f000 b8af 	b.w	8011ab4 <_fwalk_reent>
 8011956:	bf00      	nop
 8011958:	080135a1 	.word	0x080135a1

0801195c <__sfmoreglue>:
 801195c:	b570      	push	{r4, r5, r6, lr}
 801195e:	2268      	movs	r2, #104	; 0x68
 8011960:	1e4d      	subs	r5, r1, #1
 8011962:	4355      	muls	r5, r2
 8011964:	460e      	mov	r6, r1
 8011966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801196a:	f000 f921 	bl	8011bb0 <_malloc_r>
 801196e:	4604      	mov	r4, r0
 8011970:	b140      	cbz	r0, 8011984 <__sfmoreglue+0x28>
 8011972:	2100      	movs	r1, #0
 8011974:	e9c0 1600 	strd	r1, r6, [r0]
 8011978:	300c      	adds	r0, #12
 801197a:	60a0      	str	r0, [r4, #8]
 801197c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011980:	f000 f8ed 	bl	8011b5e <memset>
 8011984:	4620      	mov	r0, r4
 8011986:	bd70      	pop	{r4, r5, r6, pc}

08011988 <__sfp_lock_acquire>:
 8011988:	4801      	ldr	r0, [pc, #4]	; (8011990 <__sfp_lock_acquire+0x8>)
 801198a:	f000 b8d8 	b.w	8011b3e <__retarget_lock_acquire_recursive>
 801198e:	bf00      	nop
 8011990:	240056c1 	.word	0x240056c1

08011994 <__sfp_lock_release>:
 8011994:	4801      	ldr	r0, [pc, #4]	; (801199c <__sfp_lock_release+0x8>)
 8011996:	f000 b8d3 	b.w	8011b40 <__retarget_lock_release_recursive>
 801199a:	bf00      	nop
 801199c:	240056c1 	.word	0x240056c1

080119a0 <__sinit_lock_acquire>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__sinit_lock_acquire+0x8>)
 80119a2:	f000 b8cc 	b.w	8011b3e <__retarget_lock_acquire_recursive>
 80119a6:	bf00      	nop
 80119a8:	240056c2 	.word	0x240056c2

080119ac <__sinit_lock_release>:
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__sinit_lock_release+0x8>)
 80119ae:	f000 b8c7 	b.w	8011b40 <__retarget_lock_release_recursive>
 80119b2:	bf00      	nop
 80119b4:	240056c2 	.word	0x240056c2

080119b8 <__sinit>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	4604      	mov	r4, r0
 80119bc:	f7ff fff0 	bl	80119a0 <__sinit_lock_acquire>
 80119c0:	69a3      	ldr	r3, [r4, #24]
 80119c2:	b11b      	cbz	r3, 80119cc <__sinit+0x14>
 80119c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c8:	f7ff bff0 	b.w	80119ac <__sinit_lock_release>
 80119cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119d0:	6523      	str	r3, [r4, #80]	; 0x50
 80119d2:	4b13      	ldr	r3, [pc, #76]	; (8011a20 <__sinit+0x68>)
 80119d4:	4a13      	ldr	r2, [pc, #76]	; (8011a24 <__sinit+0x6c>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80119da:	42a3      	cmp	r3, r4
 80119dc:	bf04      	itt	eq
 80119de:	2301      	moveq	r3, #1
 80119e0:	61a3      	streq	r3, [r4, #24]
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 f820 	bl	8011a28 <__sfp>
 80119e8:	6060      	str	r0, [r4, #4]
 80119ea:	4620      	mov	r0, r4
 80119ec:	f000 f81c 	bl	8011a28 <__sfp>
 80119f0:	60a0      	str	r0, [r4, #8]
 80119f2:	4620      	mov	r0, r4
 80119f4:	f000 f818 	bl	8011a28 <__sfp>
 80119f8:	2200      	movs	r2, #0
 80119fa:	60e0      	str	r0, [r4, #12]
 80119fc:	2104      	movs	r1, #4
 80119fe:	6860      	ldr	r0, [r4, #4]
 8011a00:	f7ff ff82 	bl	8011908 <std>
 8011a04:	68a0      	ldr	r0, [r4, #8]
 8011a06:	2201      	movs	r2, #1
 8011a08:	2109      	movs	r1, #9
 8011a0a:	f7ff ff7d 	bl	8011908 <std>
 8011a0e:	68e0      	ldr	r0, [r4, #12]
 8011a10:	2202      	movs	r2, #2
 8011a12:	2112      	movs	r1, #18
 8011a14:	f7ff ff78 	bl	8011908 <std>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	61a3      	str	r3, [r4, #24]
 8011a1c:	e7d2      	b.n	80119c4 <__sinit+0xc>
 8011a1e:	bf00      	nop
 8011a20:	08014984 	.word	0x08014984
 8011a24:	08011951 	.word	0x08011951

08011a28 <__sfp>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	4607      	mov	r7, r0
 8011a2c:	f7ff ffac 	bl	8011988 <__sfp_lock_acquire>
 8011a30:	4b1e      	ldr	r3, [pc, #120]	; (8011aac <__sfp+0x84>)
 8011a32:	681e      	ldr	r6, [r3, #0]
 8011a34:	69b3      	ldr	r3, [r6, #24]
 8011a36:	b913      	cbnz	r3, 8011a3e <__sfp+0x16>
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f7ff ffbd 	bl	80119b8 <__sinit>
 8011a3e:	3648      	adds	r6, #72	; 0x48
 8011a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a44:	3b01      	subs	r3, #1
 8011a46:	d503      	bpl.n	8011a50 <__sfp+0x28>
 8011a48:	6833      	ldr	r3, [r6, #0]
 8011a4a:	b30b      	cbz	r3, 8011a90 <__sfp+0x68>
 8011a4c:	6836      	ldr	r6, [r6, #0]
 8011a4e:	e7f7      	b.n	8011a40 <__sfp+0x18>
 8011a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a54:	b9d5      	cbnz	r5, 8011a8c <__sfp+0x64>
 8011a56:	4b16      	ldr	r3, [pc, #88]	; (8011ab0 <__sfp+0x88>)
 8011a58:	60e3      	str	r3, [r4, #12]
 8011a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8011a60:	f000 f86c 	bl	8011b3c <__retarget_lock_init_recursive>
 8011a64:	f7ff ff96 	bl	8011994 <__sfp_lock_release>
 8011a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a70:	6025      	str	r5, [r4, #0]
 8011a72:	61a5      	str	r5, [r4, #24]
 8011a74:	2208      	movs	r2, #8
 8011a76:	4629      	mov	r1, r5
 8011a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a7c:	f000 f86f 	bl	8011b5e <memset>
 8011a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a88:	4620      	mov	r0, r4
 8011a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a8c:	3468      	adds	r4, #104	; 0x68
 8011a8e:	e7d9      	b.n	8011a44 <__sfp+0x1c>
 8011a90:	2104      	movs	r1, #4
 8011a92:	4638      	mov	r0, r7
 8011a94:	f7ff ff62 	bl	801195c <__sfmoreglue>
 8011a98:	4604      	mov	r4, r0
 8011a9a:	6030      	str	r0, [r6, #0]
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d1d5      	bne.n	8011a4c <__sfp+0x24>
 8011aa0:	f7ff ff78 	bl	8011994 <__sfp_lock_release>
 8011aa4:	230c      	movs	r3, #12
 8011aa6:	603b      	str	r3, [r7, #0]
 8011aa8:	e7ee      	b.n	8011a88 <__sfp+0x60>
 8011aaa:	bf00      	nop
 8011aac:	08014984 	.word	0x08014984
 8011ab0:	ffff0001 	.word	0xffff0001

08011ab4 <_fwalk_reent>:
 8011ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ab8:	4606      	mov	r6, r0
 8011aba:	4688      	mov	r8, r1
 8011abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ac0:	2700      	movs	r7, #0
 8011ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8011aca:	d505      	bpl.n	8011ad8 <_fwalk_reent+0x24>
 8011acc:	6824      	ldr	r4, [r4, #0]
 8011ace:	2c00      	cmp	r4, #0
 8011ad0:	d1f7      	bne.n	8011ac2 <_fwalk_reent+0xe>
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ad8:	89ab      	ldrh	r3, [r5, #12]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d907      	bls.n	8011aee <_fwalk_reent+0x3a>
 8011ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	d003      	beq.n	8011aee <_fwalk_reent+0x3a>
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	4630      	mov	r0, r6
 8011aea:	47c0      	blx	r8
 8011aec:	4307      	orrs	r7, r0
 8011aee:	3568      	adds	r5, #104	; 0x68
 8011af0:	e7e9      	b.n	8011ac6 <_fwalk_reent+0x12>
	...

08011af4 <__libc_init_array>:
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	4d0d      	ldr	r5, [pc, #52]	; (8011b2c <__libc_init_array+0x38>)
 8011af8:	4c0d      	ldr	r4, [pc, #52]	; (8011b30 <__libc_init_array+0x3c>)
 8011afa:	1b64      	subs	r4, r4, r5
 8011afc:	10a4      	asrs	r4, r4, #2
 8011afe:	2600      	movs	r6, #0
 8011b00:	42a6      	cmp	r6, r4
 8011b02:	d109      	bne.n	8011b18 <__libc_init_array+0x24>
 8011b04:	4d0b      	ldr	r5, [pc, #44]	; (8011b34 <__libc_init_array+0x40>)
 8011b06:	4c0c      	ldr	r4, [pc, #48]	; (8011b38 <__libc_init_array+0x44>)
 8011b08:	f002 fdd2 	bl	80146b0 <_init>
 8011b0c:	1b64      	subs	r4, r4, r5
 8011b0e:	10a4      	asrs	r4, r4, #2
 8011b10:	2600      	movs	r6, #0
 8011b12:	42a6      	cmp	r6, r4
 8011b14:	d105      	bne.n	8011b22 <__libc_init_array+0x2e>
 8011b16:	bd70      	pop	{r4, r5, r6, pc}
 8011b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b1c:	4798      	blx	r3
 8011b1e:	3601      	adds	r6, #1
 8011b20:	e7ee      	b.n	8011b00 <__libc_init_array+0xc>
 8011b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b26:	4798      	blx	r3
 8011b28:	3601      	adds	r6, #1
 8011b2a:	e7f2      	b.n	8011b12 <__libc_init_array+0x1e>
 8011b2c:	08014d04 	.word	0x08014d04
 8011b30:	08014d04 	.word	0x08014d04
 8011b34:	08014d04 	.word	0x08014d04
 8011b38:	08014d08 	.word	0x08014d08

08011b3c <__retarget_lock_init_recursive>:
 8011b3c:	4770      	bx	lr

08011b3e <__retarget_lock_acquire_recursive>:
 8011b3e:	4770      	bx	lr

08011b40 <__retarget_lock_release_recursive>:
 8011b40:	4770      	bx	lr

08011b42 <memcpy>:
 8011b42:	440a      	add	r2, r1
 8011b44:	4291      	cmp	r1, r2
 8011b46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b4a:	d100      	bne.n	8011b4e <memcpy+0xc>
 8011b4c:	4770      	bx	lr
 8011b4e:	b510      	push	{r4, lr}
 8011b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b58:	4291      	cmp	r1, r2
 8011b5a:	d1f9      	bne.n	8011b50 <memcpy+0xe>
 8011b5c:	bd10      	pop	{r4, pc}

08011b5e <memset>:
 8011b5e:	4402      	add	r2, r0
 8011b60:	4603      	mov	r3, r0
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d100      	bne.n	8011b68 <memset+0xa>
 8011b66:	4770      	bx	lr
 8011b68:	f803 1b01 	strb.w	r1, [r3], #1
 8011b6c:	e7f9      	b.n	8011b62 <memset+0x4>
	...

08011b70 <sbrk_aligned>:
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	4e0e      	ldr	r6, [pc, #56]	; (8011bac <sbrk_aligned+0x3c>)
 8011b74:	460c      	mov	r4, r1
 8011b76:	6831      	ldr	r1, [r6, #0]
 8011b78:	4605      	mov	r5, r0
 8011b7a:	b911      	cbnz	r1, 8011b82 <sbrk_aligned+0x12>
 8011b7c:	f000 fd38 	bl	80125f0 <_sbrk_r>
 8011b80:	6030      	str	r0, [r6, #0]
 8011b82:	4621      	mov	r1, r4
 8011b84:	4628      	mov	r0, r5
 8011b86:	f000 fd33 	bl	80125f0 <_sbrk_r>
 8011b8a:	1c43      	adds	r3, r0, #1
 8011b8c:	d00a      	beq.n	8011ba4 <sbrk_aligned+0x34>
 8011b8e:	1cc4      	adds	r4, r0, #3
 8011b90:	f024 0403 	bic.w	r4, r4, #3
 8011b94:	42a0      	cmp	r0, r4
 8011b96:	d007      	beq.n	8011ba8 <sbrk_aligned+0x38>
 8011b98:	1a21      	subs	r1, r4, r0
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	f000 fd28 	bl	80125f0 <_sbrk_r>
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d101      	bne.n	8011ba8 <sbrk_aligned+0x38>
 8011ba4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011ba8:	4620      	mov	r0, r4
 8011baa:	bd70      	pop	{r4, r5, r6, pc}
 8011bac:	240056c8 	.word	0x240056c8

08011bb0 <_malloc_r>:
 8011bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb4:	1ccd      	adds	r5, r1, #3
 8011bb6:	f025 0503 	bic.w	r5, r5, #3
 8011bba:	3508      	adds	r5, #8
 8011bbc:	2d0c      	cmp	r5, #12
 8011bbe:	bf38      	it	cc
 8011bc0:	250c      	movcc	r5, #12
 8011bc2:	2d00      	cmp	r5, #0
 8011bc4:	4607      	mov	r7, r0
 8011bc6:	db01      	blt.n	8011bcc <_malloc_r+0x1c>
 8011bc8:	42a9      	cmp	r1, r5
 8011bca:	d905      	bls.n	8011bd8 <_malloc_r+0x28>
 8011bcc:	230c      	movs	r3, #12
 8011bce:	603b      	str	r3, [r7, #0]
 8011bd0:	2600      	movs	r6, #0
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd8:	4e2e      	ldr	r6, [pc, #184]	; (8011c94 <_malloc_r+0xe4>)
 8011bda:	f001 fda1 	bl	8013720 <__malloc_lock>
 8011bde:	6833      	ldr	r3, [r6, #0]
 8011be0:	461c      	mov	r4, r3
 8011be2:	bb34      	cbnz	r4, 8011c32 <_malloc_r+0x82>
 8011be4:	4629      	mov	r1, r5
 8011be6:	4638      	mov	r0, r7
 8011be8:	f7ff ffc2 	bl	8011b70 <sbrk_aligned>
 8011bec:	1c43      	adds	r3, r0, #1
 8011bee:	4604      	mov	r4, r0
 8011bf0:	d14d      	bne.n	8011c8e <_malloc_r+0xde>
 8011bf2:	6834      	ldr	r4, [r6, #0]
 8011bf4:	4626      	mov	r6, r4
 8011bf6:	2e00      	cmp	r6, #0
 8011bf8:	d140      	bne.n	8011c7c <_malloc_r+0xcc>
 8011bfa:	6823      	ldr	r3, [r4, #0]
 8011bfc:	4631      	mov	r1, r6
 8011bfe:	4638      	mov	r0, r7
 8011c00:	eb04 0803 	add.w	r8, r4, r3
 8011c04:	f000 fcf4 	bl	80125f0 <_sbrk_r>
 8011c08:	4580      	cmp	r8, r0
 8011c0a:	d13a      	bne.n	8011c82 <_malloc_r+0xd2>
 8011c0c:	6821      	ldr	r1, [r4, #0]
 8011c0e:	3503      	adds	r5, #3
 8011c10:	1a6d      	subs	r5, r5, r1
 8011c12:	f025 0503 	bic.w	r5, r5, #3
 8011c16:	3508      	adds	r5, #8
 8011c18:	2d0c      	cmp	r5, #12
 8011c1a:	bf38      	it	cc
 8011c1c:	250c      	movcc	r5, #12
 8011c1e:	4629      	mov	r1, r5
 8011c20:	4638      	mov	r0, r7
 8011c22:	f7ff ffa5 	bl	8011b70 <sbrk_aligned>
 8011c26:	3001      	adds	r0, #1
 8011c28:	d02b      	beq.n	8011c82 <_malloc_r+0xd2>
 8011c2a:	6823      	ldr	r3, [r4, #0]
 8011c2c:	442b      	add	r3, r5
 8011c2e:	6023      	str	r3, [r4, #0]
 8011c30:	e00e      	b.n	8011c50 <_malloc_r+0xa0>
 8011c32:	6822      	ldr	r2, [r4, #0]
 8011c34:	1b52      	subs	r2, r2, r5
 8011c36:	d41e      	bmi.n	8011c76 <_malloc_r+0xc6>
 8011c38:	2a0b      	cmp	r2, #11
 8011c3a:	d916      	bls.n	8011c6a <_malloc_r+0xba>
 8011c3c:	1961      	adds	r1, r4, r5
 8011c3e:	42a3      	cmp	r3, r4
 8011c40:	6025      	str	r5, [r4, #0]
 8011c42:	bf18      	it	ne
 8011c44:	6059      	strne	r1, [r3, #4]
 8011c46:	6863      	ldr	r3, [r4, #4]
 8011c48:	bf08      	it	eq
 8011c4a:	6031      	streq	r1, [r6, #0]
 8011c4c:	5162      	str	r2, [r4, r5]
 8011c4e:	604b      	str	r3, [r1, #4]
 8011c50:	4638      	mov	r0, r7
 8011c52:	f104 060b 	add.w	r6, r4, #11
 8011c56:	f001 fd69 	bl	801372c <__malloc_unlock>
 8011c5a:	f026 0607 	bic.w	r6, r6, #7
 8011c5e:	1d23      	adds	r3, r4, #4
 8011c60:	1af2      	subs	r2, r6, r3
 8011c62:	d0b6      	beq.n	8011bd2 <_malloc_r+0x22>
 8011c64:	1b9b      	subs	r3, r3, r6
 8011c66:	50a3      	str	r3, [r4, r2]
 8011c68:	e7b3      	b.n	8011bd2 <_malloc_r+0x22>
 8011c6a:	6862      	ldr	r2, [r4, #4]
 8011c6c:	42a3      	cmp	r3, r4
 8011c6e:	bf0c      	ite	eq
 8011c70:	6032      	streq	r2, [r6, #0]
 8011c72:	605a      	strne	r2, [r3, #4]
 8011c74:	e7ec      	b.n	8011c50 <_malloc_r+0xa0>
 8011c76:	4623      	mov	r3, r4
 8011c78:	6864      	ldr	r4, [r4, #4]
 8011c7a:	e7b2      	b.n	8011be2 <_malloc_r+0x32>
 8011c7c:	4634      	mov	r4, r6
 8011c7e:	6876      	ldr	r6, [r6, #4]
 8011c80:	e7b9      	b.n	8011bf6 <_malloc_r+0x46>
 8011c82:	230c      	movs	r3, #12
 8011c84:	603b      	str	r3, [r7, #0]
 8011c86:	4638      	mov	r0, r7
 8011c88:	f001 fd50 	bl	801372c <__malloc_unlock>
 8011c8c:	e7a1      	b.n	8011bd2 <_malloc_r+0x22>
 8011c8e:	6025      	str	r5, [r4, #0]
 8011c90:	e7de      	b.n	8011c50 <_malloc_r+0xa0>
 8011c92:	bf00      	nop
 8011c94:	240056c4 	.word	0x240056c4

08011c98 <__cvt>:
 8011c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9a:	ed2d 8b02 	vpush	{d8}
 8011c9e:	eeb0 8b40 	vmov.f64	d8, d0
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	4617      	mov	r7, r2
 8011ca6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011ca8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011caa:	ee18 2a90 	vmov	r2, s17
 8011cae:	f025 0520 	bic.w	r5, r5, #32
 8011cb2:	2a00      	cmp	r2, #0
 8011cb4:	bfb6      	itet	lt
 8011cb6:	222d      	movlt	r2, #45	; 0x2d
 8011cb8:	2200      	movge	r2, #0
 8011cba:	eeb1 8b40 	vneglt.f64	d8, d0
 8011cbe:	2d46      	cmp	r5, #70	; 0x46
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	701a      	strb	r2, [r3, #0]
 8011cc4:	d004      	beq.n	8011cd0 <__cvt+0x38>
 8011cc6:	2d45      	cmp	r5, #69	; 0x45
 8011cc8:	d100      	bne.n	8011ccc <__cvt+0x34>
 8011cca:	3401      	adds	r4, #1
 8011ccc:	2102      	movs	r1, #2
 8011cce:	e000      	b.n	8011cd2 <__cvt+0x3a>
 8011cd0:	2103      	movs	r1, #3
 8011cd2:	ab03      	add	r3, sp, #12
 8011cd4:	9301      	str	r3, [sp, #4]
 8011cd6:	ab02      	add	r3, sp, #8
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	4622      	mov	r2, r4
 8011cdc:	4633      	mov	r3, r6
 8011cde:	eeb0 0b48 	vmov.f64	d0, d8
 8011ce2:	f000 fe69 	bl	80129b8 <_dtoa_r>
 8011ce6:	2d47      	cmp	r5, #71	; 0x47
 8011ce8:	d101      	bne.n	8011cee <__cvt+0x56>
 8011cea:	07fb      	lsls	r3, r7, #31
 8011cec:	d51a      	bpl.n	8011d24 <__cvt+0x8c>
 8011cee:	2d46      	cmp	r5, #70	; 0x46
 8011cf0:	eb00 0204 	add.w	r2, r0, r4
 8011cf4:	d10c      	bne.n	8011d10 <__cvt+0x78>
 8011cf6:	7803      	ldrb	r3, [r0, #0]
 8011cf8:	2b30      	cmp	r3, #48	; 0x30
 8011cfa:	d107      	bne.n	8011d0c <__cvt+0x74>
 8011cfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	bf1c      	itt	ne
 8011d06:	f1c4 0401 	rsbne	r4, r4, #1
 8011d0a:	6034      	strne	r4, [r6, #0]
 8011d0c:	6833      	ldr	r3, [r6, #0]
 8011d0e:	441a      	add	r2, r3
 8011d10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	bf08      	it	eq
 8011d1a:	9203      	streq	r2, [sp, #12]
 8011d1c:	2130      	movs	r1, #48	; 0x30
 8011d1e:	9b03      	ldr	r3, [sp, #12]
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d307      	bcc.n	8011d34 <__cvt+0x9c>
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d28:	1a1b      	subs	r3, r3, r0
 8011d2a:	6013      	str	r3, [r2, #0]
 8011d2c:	b005      	add	sp, #20
 8011d2e:	ecbd 8b02 	vpop	{d8}
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d34:	1c5c      	adds	r4, r3, #1
 8011d36:	9403      	str	r4, [sp, #12]
 8011d38:	7019      	strb	r1, [r3, #0]
 8011d3a:	e7f0      	b.n	8011d1e <__cvt+0x86>

08011d3c <__exponent>:
 8011d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2900      	cmp	r1, #0
 8011d42:	bfb8      	it	lt
 8011d44:	4249      	neglt	r1, r1
 8011d46:	f803 2b02 	strb.w	r2, [r3], #2
 8011d4a:	bfb4      	ite	lt
 8011d4c:	222d      	movlt	r2, #45	; 0x2d
 8011d4e:	222b      	movge	r2, #43	; 0x2b
 8011d50:	2909      	cmp	r1, #9
 8011d52:	7042      	strb	r2, [r0, #1]
 8011d54:	dd2a      	ble.n	8011dac <__exponent+0x70>
 8011d56:	f10d 0407 	add.w	r4, sp, #7
 8011d5a:	46a4      	mov	ip, r4
 8011d5c:	270a      	movs	r7, #10
 8011d5e:	46a6      	mov	lr, r4
 8011d60:	460a      	mov	r2, r1
 8011d62:	fb91 f6f7 	sdiv	r6, r1, r7
 8011d66:	fb07 1516 	mls	r5, r7, r6, r1
 8011d6a:	3530      	adds	r5, #48	; 0x30
 8011d6c:	2a63      	cmp	r2, #99	; 0x63
 8011d6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011d72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011d76:	4631      	mov	r1, r6
 8011d78:	dcf1      	bgt.n	8011d5e <__exponent+0x22>
 8011d7a:	3130      	adds	r1, #48	; 0x30
 8011d7c:	f1ae 0502 	sub.w	r5, lr, #2
 8011d80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011d84:	1c44      	adds	r4, r0, #1
 8011d86:	4629      	mov	r1, r5
 8011d88:	4561      	cmp	r1, ip
 8011d8a:	d30a      	bcc.n	8011da2 <__exponent+0x66>
 8011d8c:	f10d 0209 	add.w	r2, sp, #9
 8011d90:	eba2 020e 	sub.w	r2, r2, lr
 8011d94:	4565      	cmp	r5, ip
 8011d96:	bf88      	it	hi
 8011d98:	2200      	movhi	r2, #0
 8011d9a:	4413      	add	r3, r2
 8011d9c:	1a18      	subs	r0, r3, r0
 8011d9e:	b003      	add	sp, #12
 8011da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011da6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011daa:	e7ed      	b.n	8011d88 <__exponent+0x4c>
 8011dac:	2330      	movs	r3, #48	; 0x30
 8011dae:	3130      	adds	r1, #48	; 0x30
 8011db0:	7083      	strb	r3, [r0, #2]
 8011db2:	70c1      	strb	r1, [r0, #3]
 8011db4:	1d03      	adds	r3, r0, #4
 8011db6:	e7f1      	b.n	8011d9c <__exponent+0x60>

08011db8 <_printf_float>:
 8011db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dbc:	b08b      	sub	sp, #44	; 0x2c
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	461f      	mov	r7, r3
 8011dc8:	4605      	mov	r5, r0
 8011dca:	f001 fc25 	bl	8013618 <_localeconv_r>
 8011dce:	f8d0 b000 	ldr.w	fp, [r0]
 8011dd2:	4658      	mov	r0, fp
 8011dd4:	f7ee fa84 	bl	80002e0 <strlen>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9308      	str	r3, [sp, #32]
 8011ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8011de0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011de4:	6822      	ldr	r2, [r4, #0]
 8011de6:	3307      	adds	r3, #7
 8011de8:	f023 0307 	bic.w	r3, r3, #7
 8011dec:	f103 0108 	add.w	r1, r3, #8
 8011df0:	f8c8 1000 	str.w	r1, [r8]
 8011df4:	4682      	mov	sl, r0
 8011df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011dfa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011dfe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012060 <_printf_float+0x2a8>
 8011e02:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011e06:	eeb0 6bc0 	vabs.f64	d6, d0
 8011e0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e12:	dd24      	ble.n	8011e5e <_printf_float+0xa6>
 8011e14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1c:	d502      	bpl.n	8011e24 <_printf_float+0x6c>
 8011e1e:	232d      	movs	r3, #45	; 0x2d
 8011e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e24:	4b90      	ldr	r3, [pc, #576]	; (8012068 <_printf_float+0x2b0>)
 8011e26:	4891      	ldr	r0, [pc, #580]	; (801206c <_printf_float+0x2b4>)
 8011e28:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011e2c:	bf94      	ite	ls
 8011e2e:	4698      	movls	r8, r3
 8011e30:	4680      	movhi	r8, r0
 8011e32:	2303      	movs	r3, #3
 8011e34:	6123      	str	r3, [r4, #16]
 8011e36:	f022 0204 	bic.w	r2, r2, #4
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	6022      	str	r2, [r4, #0]
 8011e3e:	9304      	str	r3, [sp, #16]
 8011e40:	9700      	str	r7, [sp, #0]
 8011e42:	4633      	mov	r3, r6
 8011e44:	aa09      	add	r2, sp, #36	; 0x24
 8011e46:	4621      	mov	r1, r4
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 f9d3 	bl	80121f4 <_printf_common>
 8011e4e:	3001      	adds	r0, #1
 8011e50:	f040 808a 	bne.w	8011f68 <_printf_float+0x1b0>
 8011e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e58:	b00b      	add	sp, #44	; 0x2c
 8011e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e66:	d709      	bvc.n	8011e7c <_printf_float+0xc4>
 8011e68:	ee10 3a90 	vmov	r3, s1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	bfbc      	itt	lt
 8011e70:	232d      	movlt	r3, #45	; 0x2d
 8011e72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011e76:	487e      	ldr	r0, [pc, #504]	; (8012070 <_printf_float+0x2b8>)
 8011e78:	4b7e      	ldr	r3, [pc, #504]	; (8012074 <_printf_float+0x2bc>)
 8011e7a:	e7d5      	b.n	8011e28 <_printf_float+0x70>
 8011e7c:	6863      	ldr	r3, [r4, #4]
 8011e7e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011e82:	9104      	str	r1, [sp, #16]
 8011e84:	1c59      	adds	r1, r3, #1
 8011e86:	d13c      	bne.n	8011f02 <_printf_float+0x14a>
 8011e88:	2306      	movs	r3, #6
 8011e8a:	6063      	str	r3, [r4, #4]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9303      	str	r3, [sp, #12]
 8011e90:	ab08      	add	r3, sp, #32
 8011e92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e9a:	ab07      	add	r3, sp, #28
 8011e9c:	6861      	ldr	r1, [r4, #4]
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	6022      	str	r2, [r4, #0]
 8011ea2:	f10d 031b 	add.w	r3, sp, #27
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7ff fef6 	bl	8011c98 <__cvt>
 8011eac:	9b04      	ldr	r3, [sp, #16]
 8011eae:	9907      	ldr	r1, [sp, #28]
 8011eb0:	2b47      	cmp	r3, #71	; 0x47
 8011eb2:	4680      	mov	r8, r0
 8011eb4:	d108      	bne.n	8011ec8 <_printf_float+0x110>
 8011eb6:	1cc8      	adds	r0, r1, #3
 8011eb8:	db02      	blt.n	8011ec0 <_printf_float+0x108>
 8011eba:	6863      	ldr	r3, [r4, #4]
 8011ebc:	4299      	cmp	r1, r3
 8011ebe:	dd41      	ble.n	8011f44 <_printf_float+0x18c>
 8011ec0:	f1a9 0902 	sub.w	r9, r9, #2
 8011ec4:	fa5f f989 	uxtb.w	r9, r9
 8011ec8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011ecc:	d820      	bhi.n	8011f10 <_printf_float+0x158>
 8011ece:	3901      	subs	r1, #1
 8011ed0:	464a      	mov	r2, r9
 8011ed2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ed6:	9107      	str	r1, [sp, #28]
 8011ed8:	f7ff ff30 	bl	8011d3c <__exponent>
 8011edc:	9a08      	ldr	r2, [sp, #32]
 8011ede:	9004      	str	r0, [sp, #16]
 8011ee0:	1813      	adds	r3, r2, r0
 8011ee2:	2a01      	cmp	r2, #1
 8011ee4:	6123      	str	r3, [r4, #16]
 8011ee6:	dc02      	bgt.n	8011eee <_printf_float+0x136>
 8011ee8:	6822      	ldr	r2, [r4, #0]
 8011eea:	07d2      	lsls	r2, r2, #31
 8011eec:	d501      	bpl.n	8011ef2 <_printf_float+0x13a>
 8011eee:	3301      	adds	r3, #1
 8011ef0:	6123      	str	r3, [r4, #16]
 8011ef2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d0a2      	beq.n	8011e40 <_printf_float+0x88>
 8011efa:	232d      	movs	r3, #45	; 0x2d
 8011efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f00:	e79e      	b.n	8011e40 <_printf_float+0x88>
 8011f02:	9904      	ldr	r1, [sp, #16]
 8011f04:	2947      	cmp	r1, #71	; 0x47
 8011f06:	d1c1      	bne.n	8011e8c <_printf_float+0xd4>
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d1bf      	bne.n	8011e8c <_printf_float+0xd4>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	e7bc      	b.n	8011e8a <_printf_float+0xd2>
 8011f10:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011f14:	d118      	bne.n	8011f48 <_printf_float+0x190>
 8011f16:	2900      	cmp	r1, #0
 8011f18:	6863      	ldr	r3, [r4, #4]
 8011f1a:	dd0b      	ble.n	8011f34 <_printf_float+0x17c>
 8011f1c:	6121      	str	r1, [r4, #16]
 8011f1e:	b913      	cbnz	r3, 8011f26 <_printf_float+0x16e>
 8011f20:	6822      	ldr	r2, [r4, #0]
 8011f22:	07d0      	lsls	r0, r2, #31
 8011f24:	d502      	bpl.n	8011f2c <_printf_float+0x174>
 8011f26:	3301      	adds	r3, #1
 8011f28:	440b      	add	r3, r1
 8011f2a:	6123      	str	r3, [r4, #16]
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011f30:	9304      	str	r3, [sp, #16]
 8011f32:	e7de      	b.n	8011ef2 <_printf_float+0x13a>
 8011f34:	b913      	cbnz	r3, 8011f3c <_printf_float+0x184>
 8011f36:	6822      	ldr	r2, [r4, #0]
 8011f38:	07d2      	lsls	r2, r2, #31
 8011f3a:	d501      	bpl.n	8011f40 <_printf_float+0x188>
 8011f3c:	3302      	adds	r3, #2
 8011f3e:	e7f4      	b.n	8011f2a <_printf_float+0x172>
 8011f40:	2301      	movs	r3, #1
 8011f42:	e7f2      	b.n	8011f2a <_printf_float+0x172>
 8011f44:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011f48:	9b08      	ldr	r3, [sp, #32]
 8011f4a:	4299      	cmp	r1, r3
 8011f4c:	db05      	blt.n	8011f5a <_printf_float+0x1a2>
 8011f4e:	6823      	ldr	r3, [r4, #0]
 8011f50:	6121      	str	r1, [r4, #16]
 8011f52:	07d8      	lsls	r0, r3, #31
 8011f54:	d5ea      	bpl.n	8011f2c <_printf_float+0x174>
 8011f56:	1c4b      	adds	r3, r1, #1
 8011f58:	e7e7      	b.n	8011f2a <_printf_float+0x172>
 8011f5a:	2900      	cmp	r1, #0
 8011f5c:	bfd4      	ite	le
 8011f5e:	f1c1 0202 	rsble	r2, r1, #2
 8011f62:	2201      	movgt	r2, #1
 8011f64:	4413      	add	r3, r2
 8011f66:	e7e0      	b.n	8011f2a <_printf_float+0x172>
 8011f68:	6823      	ldr	r3, [r4, #0]
 8011f6a:	055a      	lsls	r2, r3, #21
 8011f6c:	d407      	bmi.n	8011f7e <_printf_float+0x1c6>
 8011f6e:	6923      	ldr	r3, [r4, #16]
 8011f70:	4642      	mov	r2, r8
 8011f72:	4631      	mov	r1, r6
 8011f74:	4628      	mov	r0, r5
 8011f76:	47b8      	blx	r7
 8011f78:	3001      	adds	r0, #1
 8011f7a:	d12a      	bne.n	8011fd2 <_printf_float+0x21a>
 8011f7c:	e76a      	b.n	8011e54 <_printf_float+0x9c>
 8011f7e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f82:	f240 80e2 	bls.w	801214a <_printf_float+0x392>
 8011f86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011f8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f92:	d133      	bne.n	8011ffc <_printf_float+0x244>
 8011f94:	4a38      	ldr	r2, [pc, #224]	; (8012078 <_printf_float+0x2c0>)
 8011f96:	2301      	movs	r3, #1
 8011f98:	4631      	mov	r1, r6
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	47b8      	blx	r7
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	f43f af58 	beq.w	8011e54 <_printf_float+0x9c>
 8011fa4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	db02      	blt.n	8011fb2 <_printf_float+0x1fa>
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	07d8      	lsls	r0, r3, #31
 8011fb0:	d50f      	bpl.n	8011fd2 <_printf_float+0x21a>
 8011fb2:	4653      	mov	r3, sl
 8011fb4:	465a      	mov	r2, fp
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	4628      	mov	r0, r5
 8011fba:	47b8      	blx	r7
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	f43f af49 	beq.w	8011e54 <_printf_float+0x9c>
 8011fc2:	f04f 0800 	mov.w	r8, #0
 8011fc6:	f104 091a 	add.w	r9, r4, #26
 8011fca:	9b08      	ldr	r3, [sp, #32]
 8011fcc:	3b01      	subs	r3, #1
 8011fce:	4543      	cmp	r3, r8
 8011fd0:	dc09      	bgt.n	8011fe6 <_printf_float+0x22e>
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	079b      	lsls	r3, r3, #30
 8011fd6:	f100 8108 	bmi.w	80121ea <_printf_float+0x432>
 8011fda:	68e0      	ldr	r0, [r4, #12]
 8011fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fde:	4298      	cmp	r0, r3
 8011fe0:	bfb8      	it	lt
 8011fe2:	4618      	movlt	r0, r3
 8011fe4:	e738      	b.n	8011e58 <_printf_float+0xa0>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	464a      	mov	r2, r9
 8011fea:	4631      	mov	r1, r6
 8011fec:	4628      	mov	r0, r5
 8011fee:	47b8      	blx	r7
 8011ff0:	3001      	adds	r0, #1
 8011ff2:	f43f af2f 	beq.w	8011e54 <_printf_float+0x9c>
 8011ff6:	f108 0801 	add.w	r8, r8, #1
 8011ffa:	e7e6      	b.n	8011fca <_printf_float+0x212>
 8011ffc:	9b07      	ldr	r3, [sp, #28]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	dc3c      	bgt.n	801207c <_printf_float+0x2c4>
 8012002:	4a1d      	ldr	r2, [pc, #116]	; (8012078 <_printf_float+0x2c0>)
 8012004:	2301      	movs	r3, #1
 8012006:	4631      	mov	r1, r6
 8012008:	4628      	mov	r0, r5
 801200a:	47b8      	blx	r7
 801200c:	3001      	adds	r0, #1
 801200e:	f43f af21 	beq.w	8011e54 <_printf_float+0x9c>
 8012012:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012016:	4313      	orrs	r3, r2
 8012018:	d102      	bne.n	8012020 <_printf_float+0x268>
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	07d9      	lsls	r1, r3, #31
 801201e:	d5d8      	bpl.n	8011fd2 <_printf_float+0x21a>
 8012020:	4653      	mov	r3, sl
 8012022:	465a      	mov	r2, fp
 8012024:	4631      	mov	r1, r6
 8012026:	4628      	mov	r0, r5
 8012028:	47b8      	blx	r7
 801202a:	3001      	adds	r0, #1
 801202c:	f43f af12 	beq.w	8011e54 <_printf_float+0x9c>
 8012030:	f04f 0900 	mov.w	r9, #0
 8012034:	f104 0a1a 	add.w	sl, r4, #26
 8012038:	9b07      	ldr	r3, [sp, #28]
 801203a:	425b      	negs	r3, r3
 801203c:	454b      	cmp	r3, r9
 801203e:	dc01      	bgt.n	8012044 <_printf_float+0x28c>
 8012040:	9b08      	ldr	r3, [sp, #32]
 8012042:	e795      	b.n	8011f70 <_printf_float+0x1b8>
 8012044:	2301      	movs	r3, #1
 8012046:	4652      	mov	r2, sl
 8012048:	4631      	mov	r1, r6
 801204a:	4628      	mov	r0, r5
 801204c:	47b8      	blx	r7
 801204e:	3001      	adds	r0, #1
 8012050:	f43f af00 	beq.w	8011e54 <_printf_float+0x9c>
 8012054:	f109 0901 	add.w	r9, r9, #1
 8012058:	e7ee      	b.n	8012038 <_printf_float+0x280>
 801205a:	bf00      	nop
 801205c:	f3af 8000 	nop.w
 8012060:	ffffffff 	.word	0xffffffff
 8012064:	7fefffff 	.word	0x7fefffff
 8012068:	08014988 	.word	0x08014988
 801206c:	0801498c 	.word	0x0801498c
 8012070:	08014994 	.word	0x08014994
 8012074:	08014990 	.word	0x08014990
 8012078:	08014998 	.word	0x08014998
 801207c:	9a08      	ldr	r2, [sp, #32]
 801207e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012080:	429a      	cmp	r2, r3
 8012082:	bfa8      	it	ge
 8012084:	461a      	movge	r2, r3
 8012086:	2a00      	cmp	r2, #0
 8012088:	4691      	mov	r9, r2
 801208a:	dc38      	bgt.n	80120fe <_printf_float+0x346>
 801208c:	2300      	movs	r3, #0
 801208e:	9305      	str	r3, [sp, #20]
 8012090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012094:	f104 021a 	add.w	r2, r4, #26
 8012098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801209a:	9905      	ldr	r1, [sp, #20]
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	eba3 0309 	sub.w	r3, r3, r9
 80120a2:	428b      	cmp	r3, r1
 80120a4:	dc33      	bgt.n	801210e <_printf_float+0x356>
 80120a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	db3c      	blt.n	8012128 <_printf_float+0x370>
 80120ae:	6823      	ldr	r3, [r4, #0]
 80120b0:	07da      	lsls	r2, r3, #31
 80120b2:	d439      	bmi.n	8012128 <_printf_float+0x370>
 80120b4:	9b08      	ldr	r3, [sp, #32]
 80120b6:	9a04      	ldr	r2, [sp, #16]
 80120b8:	9907      	ldr	r1, [sp, #28]
 80120ba:	1a9a      	subs	r2, r3, r2
 80120bc:	eba3 0901 	sub.w	r9, r3, r1
 80120c0:	4591      	cmp	r9, r2
 80120c2:	bfa8      	it	ge
 80120c4:	4691      	movge	r9, r2
 80120c6:	f1b9 0f00 	cmp.w	r9, #0
 80120ca:	dc35      	bgt.n	8012138 <_printf_float+0x380>
 80120cc:	f04f 0800 	mov.w	r8, #0
 80120d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120d4:	f104 0a1a 	add.w	sl, r4, #26
 80120d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80120dc:	1a9b      	subs	r3, r3, r2
 80120de:	eba3 0309 	sub.w	r3, r3, r9
 80120e2:	4543      	cmp	r3, r8
 80120e4:	f77f af75 	ble.w	8011fd2 <_printf_float+0x21a>
 80120e8:	2301      	movs	r3, #1
 80120ea:	4652      	mov	r2, sl
 80120ec:	4631      	mov	r1, r6
 80120ee:	4628      	mov	r0, r5
 80120f0:	47b8      	blx	r7
 80120f2:	3001      	adds	r0, #1
 80120f4:	f43f aeae 	beq.w	8011e54 <_printf_float+0x9c>
 80120f8:	f108 0801 	add.w	r8, r8, #1
 80120fc:	e7ec      	b.n	80120d8 <_printf_float+0x320>
 80120fe:	4613      	mov	r3, r2
 8012100:	4631      	mov	r1, r6
 8012102:	4642      	mov	r2, r8
 8012104:	4628      	mov	r0, r5
 8012106:	47b8      	blx	r7
 8012108:	3001      	adds	r0, #1
 801210a:	d1bf      	bne.n	801208c <_printf_float+0x2d4>
 801210c:	e6a2      	b.n	8011e54 <_printf_float+0x9c>
 801210e:	2301      	movs	r3, #1
 8012110:	4631      	mov	r1, r6
 8012112:	4628      	mov	r0, r5
 8012114:	9204      	str	r2, [sp, #16]
 8012116:	47b8      	blx	r7
 8012118:	3001      	adds	r0, #1
 801211a:	f43f ae9b 	beq.w	8011e54 <_printf_float+0x9c>
 801211e:	9b05      	ldr	r3, [sp, #20]
 8012120:	9a04      	ldr	r2, [sp, #16]
 8012122:	3301      	adds	r3, #1
 8012124:	9305      	str	r3, [sp, #20]
 8012126:	e7b7      	b.n	8012098 <_printf_float+0x2e0>
 8012128:	4653      	mov	r3, sl
 801212a:	465a      	mov	r2, fp
 801212c:	4631      	mov	r1, r6
 801212e:	4628      	mov	r0, r5
 8012130:	47b8      	blx	r7
 8012132:	3001      	adds	r0, #1
 8012134:	d1be      	bne.n	80120b4 <_printf_float+0x2fc>
 8012136:	e68d      	b.n	8011e54 <_printf_float+0x9c>
 8012138:	9a04      	ldr	r2, [sp, #16]
 801213a:	464b      	mov	r3, r9
 801213c:	4442      	add	r2, r8
 801213e:	4631      	mov	r1, r6
 8012140:	4628      	mov	r0, r5
 8012142:	47b8      	blx	r7
 8012144:	3001      	adds	r0, #1
 8012146:	d1c1      	bne.n	80120cc <_printf_float+0x314>
 8012148:	e684      	b.n	8011e54 <_printf_float+0x9c>
 801214a:	9a08      	ldr	r2, [sp, #32]
 801214c:	2a01      	cmp	r2, #1
 801214e:	dc01      	bgt.n	8012154 <_printf_float+0x39c>
 8012150:	07db      	lsls	r3, r3, #31
 8012152:	d537      	bpl.n	80121c4 <_printf_float+0x40c>
 8012154:	2301      	movs	r3, #1
 8012156:	4642      	mov	r2, r8
 8012158:	4631      	mov	r1, r6
 801215a:	4628      	mov	r0, r5
 801215c:	47b8      	blx	r7
 801215e:	3001      	adds	r0, #1
 8012160:	f43f ae78 	beq.w	8011e54 <_printf_float+0x9c>
 8012164:	4653      	mov	r3, sl
 8012166:	465a      	mov	r2, fp
 8012168:	4631      	mov	r1, r6
 801216a:	4628      	mov	r0, r5
 801216c:	47b8      	blx	r7
 801216e:	3001      	adds	r0, #1
 8012170:	f43f ae70 	beq.w	8011e54 <_printf_float+0x9c>
 8012174:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012178:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012180:	d01b      	beq.n	80121ba <_printf_float+0x402>
 8012182:	9b08      	ldr	r3, [sp, #32]
 8012184:	f108 0201 	add.w	r2, r8, #1
 8012188:	3b01      	subs	r3, #1
 801218a:	4631      	mov	r1, r6
 801218c:	4628      	mov	r0, r5
 801218e:	47b8      	blx	r7
 8012190:	3001      	adds	r0, #1
 8012192:	d10e      	bne.n	80121b2 <_printf_float+0x3fa>
 8012194:	e65e      	b.n	8011e54 <_printf_float+0x9c>
 8012196:	2301      	movs	r3, #1
 8012198:	464a      	mov	r2, r9
 801219a:	4631      	mov	r1, r6
 801219c:	4628      	mov	r0, r5
 801219e:	47b8      	blx	r7
 80121a0:	3001      	adds	r0, #1
 80121a2:	f43f ae57 	beq.w	8011e54 <_printf_float+0x9c>
 80121a6:	f108 0801 	add.w	r8, r8, #1
 80121aa:	9b08      	ldr	r3, [sp, #32]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	4543      	cmp	r3, r8
 80121b0:	dcf1      	bgt.n	8012196 <_printf_float+0x3de>
 80121b2:	9b04      	ldr	r3, [sp, #16]
 80121b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80121b8:	e6db      	b.n	8011f72 <_printf_float+0x1ba>
 80121ba:	f04f 0800 	mov.w	r8, #0
 80121be:	f104 091a 	add.w	r9, r4, #26
 80121c2:	e7f2      	b.n	80121aa <_printf_float+0x3f2>
 80121c4:	2301      	movs	r3, #1
 80121c6:	4642      	mov	r2, r8
 80121c8:	e7df      	b.n	801218a <_printf_float+0x3d2>
 80121ca:	2301      	movs	r3, #1
 80121cc:	464a      	mov	r2, r9
 80121ce:	4631      	mov	r1, r6
 80121d0:	4628      	mov	r0, r5
 80121d2:	47b8      	blx	r7
 80121d4:	3001      	adds	r0, #1
 80121d6:	f43f ae3d 	beq.w	8011e54 <_printf_float+0x9c>
 80121da:	f108 0801 	add.w	r8, r8, #1
 80121de:	68e3      	ldr	r3, [r4, #12]
 80121e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121e2:	1a5b      	subs	r3, r3, r1
 80121e4:	4543      	cmp	r3, r8
 80121e6:	dcf0      	bgt.n	80121ca <_printf_float+0x412>
 80121e8:	e6f7      	b.n	8011fda <_printf_float+0x222>
 80121ea:	f04f 0800 	mov.w	r8, #0
 80121ee:	f104 0919 	add.w	r9, r4, #25
 80121f2:	e7f4      	b.n	80121de <_printf_float+0x426>

080121f4 <_printf_common>:
 80121f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f8:	4616      	mov	r6, r2
 80121fa:	4699      	mov	r9, r3
 80121fc:	688a      	ldr	r2, [r1, #8]
 80121fe:	690b      	ldr	r3, [r1, #16]
 8012200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012204:	4293      	cmp	r3, r2
 8012206:	bfb8      	it	lt
 8012208:	4613      	movlt	r3, r2
 801220a:	6033      	str	r3, [r6, #0]
 801220c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012210:	4607      	mov	r7, r0
 8012212:	460c      	mov	r4, r1
 8012214:	b10a      	cbz	r2, 801221a <_printf_common+0x26>
 8012216:	3301      	adds	r3, #1
 8012218:	6033      	str	r3, [r6, #0]
 801221a:	6823      	ldr	r3, [r4, #0]
 801221c:	0699      	lsls	r1, r3, #26
 801221e:	bf42      	ittt	mi
 8012220:	6833      	ldrmi	r3, [r6, #0]
 8012222:	3302      	addmi	r3, #2
 8012224:	6033      	strmi	r3, [r6, #0]
 8012226:	6825      	ldr	r5, [r4, #0]
 8012228:	f015 0506 	ands.w	r5, r5, #6
 801222c:	d106      	bne.n	801223c <_printf_common+0x48>
 801222e:	f104 0a19 	add.w	sl, r4, #25
 8012232:	68e3      	ldr	r3, [r4, #12]
 8012234:	6832      	ldr	r2, [r6, #0]
 8012236:	1a9b      	subs	r3, r3, r2
 8012238:	42ab      	cmp	r3, r5
 801223a:	dc26      	bgt.n	801228a <_printf_common+0x96>
 801223c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012240:	1e13      	subs	r3, r2, #0
 8012242:	6822      	ldr	r2, [r4, #0]
 8012244:	bf18      	it	ne
 8012246:	2301      	movne	r3, #1
 8012248:	0692      	lsls	r2, r2, #26
 801224a:	d42b      	bmi.n	80122a4 <_printf_common+0xb0>
 801224c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012250:	4649      	mov	r1, r9
 8012252:	4638      	mov	r0, r7
 8012254:	47c0      	blx	r8
 8012256:	3001      	adds	r0, #1
 8012258:	d01e      	beq.n	8012298 <_printf_common+0xa4>
 801225a:	6823      	ldr	r3, [r4, #0]
 801225c:	68e5      	ldr	r5, [r4, #12]
 801225e:	6832      	ldr	r2, [r6, #0]
 8012260:	f003 0306 	and.w	r3, r3, #6
 8012264:	2b04      	cmp	r3, #4
 8012266:	bf08      	it	eq
 8012268:	1aad      	subeq	r5, r5, r2
 801226a:	68a3      	ldr	r3, [r4, #8]
 801226c:	6922      	ldr	r2, [r4, #16]
 801226e:	bf0c      	ite	eq
 8012270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012274:	2500      	movne	r5, #0
 8012276:	4293      	cmp	r3, r2
 8012278:	bfc4      	itt	gt
 801227a:	1a9b      	subgt	r3, r3, r2
 801227c:	18ed      	addgt	r5, r5, r3
 801227e:	2600      	movs	r6, #0
 8012280:	341a      	adds	r4, #26
 8012282:	42b5      	cmp	r5, r6
 8012284:	d11a      	bne.n	80122bc <_printf_common+0xc8>
 8012286:	2000      	movs	r0, #0
 8012288:	e008      	b.n	801229c <_printf_common+0xa8>
 801228a:	2301      	movs	r3, #1
 801228c:	4652      	mov	r2, sl
 801228e:	4649      	mov	r1, r9
 8012290:	4638      	mov	r0, r7
 8012292:	47c0      	blx	r8
 8012294:	3001      	adds	r0, #1
 8012296:	d103      	bne.n	80122a0 <_printf_common+0xac>
 8012298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801229c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122a0:	3501      	adds	r5, #1
 80122a2:	e7c6      	b.n	8012232 <_printf_common+0x3e>
 80122a4:	18e1      	adds	r1, r4, r3
 80122a6:	1c5a      	adds	r2, r3, #1
 80122a8:	2030      	movs	r0, #48	; 0x30
 80122aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122ae:	4422      	add	r2, r4
 80122b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80122b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80122b8:	3302      	adds	r3, #2
 80122ba:	e7c7      	b.n	801224c <_printf_common+0x58>
 80122bc:	2301      	movs	r3, #1
 80122be:	4622      	mov	r2, r4
 80122c0:	4649      	mov	r1, r9
 80122c2:	4638      	mov	r0, r7
 80122c4:	47c0      	blx	r8
 80122c6:	3001      	adds	r0, #1
 80122c8:	d0e6      	beq.n	8012298 <_printf_common+0xa4>
 80122ca:	3601      	adds	r6, #1
 80122cc:	e7d9      	b.n	8012282 <_printf_common+0x8e>
	...

080122d0 <_printf_i>:
 80122d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122d4:	7e0f      	ldrb	r7, [r1, #24]
 80122d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122d8:	2f78      	cmp	r7, #120	; 0x78
 80122da:	4691      	mov	r9, r2
 80122dc:	4680      	mov	r8, r0
 80122de:	460c      	mov	r4, r1
 80122e0:	469a      	mov	sl, r3
 80122e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80122e6:	d807      	bhi.n	80122f8 <_printf_i+0x28>
 80122e8:	2f62      	cmp	r7, #98	; 0x62
 80122ea:	d80a      	bhi.n	8012302 <_printf_i+0x32>
 80122ec:	2f00      	cmp	r7, #0
 80122ee:	f000 80d8 	beq.w	80124a2 <_printf_i+0x1d2>
 80122f2:	2f58      	cmp	r7, #88	; 0x58
 80122f4:	f000 80a3 	beq.w	801243e <_printf_i+0x16e>
 80122f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012300:	e03a      	b.n	8012378 <_printf_i+0xa8>
 8012302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012306:	2b15      	cmp	r3, #21
 8012308:	d8f6      	bhi.n	80122f8 <_printf_i+0x28>
 801230a:	a101      	add	r1, pc, #4	; (adr r1, 8012310 <_printf_i+0x40>)
 801230c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012310:	08012369 	.word	0x08012369
 8012314:	0801237d 	.word	0x0801237d
 8012318:	080122f9 	.word	0x080122f9
 801231c:	080122f9 	.word	0x080122f9
 8012320:	080122f9 	.word	0x080122f9
 8012324:	080122f9 	.word	0x080122f9
 8012328:	0801237d 	.word	0x0801237d
 801232c:	080122f9 	.word	0x080122f9
 8012330:	080122f9 	.word	0x080122f9
 8012334:	080122f9 	.word	0x080122f9
 8012338:	080122f9 	.word	0x080122f9
 801233c:	08012489 	.word	0x08012489
 8012340:	080123ad 	.word	0x080123ad
 8012344:	0801246b 	.word	0x0801246b
 8012348:	080122f9 	.word	0x080122f9
 801234c:	080122f9 	.word	0x080122f9
 8012350:	080124ab 	.word	0x080124ab
 8012354:	080122f9 	.word	0x080122f9
 8012358:	080123ad 	.word	0x080123ad
 801235c:	080122f9 	.word	0x080122f9
 8012360:	080122f9 	.word	0x080122f9
 8012364:	08012473 	.word	0x08012473
 8012368:	682b      	ldr	r3, [r5, #0]
 801236a:	1d1a      	adds	r2, r3, #4
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	602a      	str	r2, [r5, #0]
 8012370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012378:	2301      	movs	r3, #1
 801237a:	e0a3      	b.n	80124c4 <_printf_i+0x1f4>
 801237c:	6820      	ldr	r0, [r4, #0]
 801237e:	6829      	ldr	r1, [r5, #0]
 8012380:	0606      	lsls	r6, r0, #24
 8012382:	f101 0304 	add.w	r3, r1, #4
 8012386:	d50a      	bpl.n	801239e <_printf_i+0xce>
 8012388:	680e      	ldr	r6, [r1, #0]
 801238a:	602b      	str	r3, [r5, #0]
 801238c:	2e00      	cmp	r6, #0
 801238e:	da03      	bge.n	8012398 <_printf_i+0xc8>
 8012390:	232d      	movs	r3, #45	; 0x2d
 8012392:	4276      	negs	r6, r6
 8012394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012398:	485e      	ldr	r0, [pc, #376]	; (8012514 <_printf_i+0x244>)
 801239a:	230a      	movs	r3, #10
 801239c:	e019      	b.n	80123d2 <_printf_i+0x102>
 801239e:	680e      	ldr	r6, [r1, #0]
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80123a6:	bf18      	it	ne
 80123a8:	b236      	sxthne	r6, r6
 80123aa:	e7ef      	b.n	801238c <_printf_i+0xbc>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	6820      	ldr	r0, [r4, #0]
 80123b0:	1d19      	adds	r1, r3, #4
 80123b2:	6029      	str	r1, [r5, #0]
 80123b4:	0601      	lsls	r1, r0, #24
 80123b6:	d501      	bpl.n	80123bc <_printf_i+0xec>
 80123b8:	681e      	ldr	r6, [r3, #0]
 80123ba:	e002      	b.n	80123c2 <_printf_i+0xf2>
 80123bc:	0646      	lsls	r6, r0, #25
 80123be:	d5fb      	bpl.n	80123b8 <_printf_i+0xe8>
 80123c0:	881e      	ldrh	r6, [r3, #0]
 80123c2:	4854      	ldr	r0, [pc, #336]	; (8012514 <_printf_i+0x244>)
 80123c4:	2f6f      	cmp	r7, #111	; 0x6f
 80123c6:	bf0c      	ite	eq
 80123c8:	2308      	moveq	r3, #8
 80123ca:	230a      	movne	r3, #10
 80123cc:	2100      	movs	r1, #0
 80123ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80123d2:	6865      	ldr	r5, [r4, #4]
 80123d4:	60a5      	str	r5, [r4, #8]
 80123d6:	2d00      	cmp	r5, #0
 80123d8:	bfa2      	ittt	ge
 80123da:	6821      	ldrge	r1, [r4, #0]
 80123dc:	f021 0104 	bicge.w	r1, r1, #4
 80123e0:	6021      	strge	r1, [r4, #0]
 80123e2:	b90e      	cbnz	r6, 80123e8 <_printf_i+0x118>
 80123e4:	2d00      	cmp	r5, #0
 80123e6:	d04d      	beq.n	8012484 <_printf_i+0x1b4>
 80123e8:	4615      	mov	r5, r2
 80123ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80123ee:	fb03 6711 	mls	r7, r3, r1, r6
 80123f2:	5dc7      	ldrb	r7, [r0, r7]
 80123f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80123f8:	4637      	mov	r7, r6
 80123fa:	42bb      	cmp	r3, r7
 80123fc:	460e      	mov	r6, r1
 80123fe:	d9f4      	bls.n	80123ea <_printf_i+0x11a>
 8012400:	2b08      	cmp	r3, #8
 8012402:	d10b      	bne.n	801241c <_printf_i+0x14c>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	07de      	lsls	r6, r3, #31
 8012408:	d508      	bpl.n	801241c <_printf_i+0x14c>
 801240a:	6923      	ldr	r3, [r4, #16]
 801240c:	6861      	ldr	r1, [r4, #4]
 801240e:	4299      	cmp	r1, r3
 8012410:	bfde      	ittt	le
 8012412:	2330      	movle	r3, #48	; 0x30
 8012414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012418:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801241c:	1b52      	subs	r2, r2, r5
 801241e:	6122      	str	r2, [r4, #16]
 8012420:	f8cd a000 	str.w	sl, [sp]
 8012424:	464b      	mov	r3, r9
 8012426:	aa03      	add	r2, sp, #12
 8012428:	4621      	mov	r1, r4
 801242a:	4640      	mov	r0, r8
 801242c:	f7ff fee2 	bl	80121f4 <_printf_common>
 8012430:	3001      	adds	r0, #1
 8012432:	d14c      	bne.n	80124ce <_printf_i+0x1fe>
 8012434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012438:	b004      	add	sp, #16
 801243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801243e:	4835      	ldr	r0, [pc, #212]	; (8012514 <_printf_i+0x244>)
 8012440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012444:	6829      	ldr	r1, [r5, #0]
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	f851 6b04 	ldr.w	r6, [r1], #4
 801244c:	6029      	str	r1, [r5, #0]
 801244e:	061d      	lsls	r5, r3, #24
 8012450:	d514      	bpl.n	801247c <_printf_i+0x1ac>
 8012452:	07df      	lsls	r7, r3, #31
 8012454:	bf44      	itt	mi
 8012456:	f043 0320 	orrmi.w	r3, r3, #32
 801245a:	6023      	strmi	r3, [r4, #0]
 801245c:	b91e      	cbnz	r6, 8012466 <_printf_i+0x196>
 801245e:	6823      	ldr	r3, [r4, #0]
 8012460:	f023 0320 	bic.w	r3, r3, #32
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	2310      	movs	r3, #16
 8012468:	e7b0      	b.n	80123cc <_printf_i+0xfc>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	f043 0320 	orr.w	r3, r3, #32
 8012470:	6023      	str	r3, [r4, #0]
 8012472:	2378      	movs	r3, #120	; 0x78
 8012474:	4828      	ldr	r0, [pc, #160]	; (8012518 <_printf_i+0x248>)
 8012476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801247a:	e7e3      	b.n	8012444 <_printf_i+0x174>
 801247c:	0659      	lsls	r1, r3, #25
 801247e:	bf48      	it	mi
 8012480:	b2b6      	uxthmi	r6, r6
 8012482:	e7e6      	b.n	8012452 <_printf_i+0x182>
 8012484:	4615      	mov	r5, r2
 8012486:	e7bb      	b.n	8012400 <_printf_i+0x130>
 8012488:	682b      	ldr	r3, [r5, #0]
 801248a:	6826      	ldr	r6, [r4, #0]
 801248c:	6961      	ldr	r1, [r4, #20]
 801248e:	1d18      	adds	r0, r3, #4
 8012490:	6028      	str	r0, [r5, #0]
 8012492:	0635      	lsls	r5, r6, #24
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	d501      	bpl.n	801249c <_printf_i+0x1cc>
 8012498:	6019      	str	r1, [r3, #0]
 801249a:	e002      	b.n	80124a2 <_printf_i+0x1d2>
 801249c:	0670      	lsls	r0, r6, #25
 801249e:	d5fb      	bpl.n	8012498 <_printf_i+0x1c8>
 80124a0:	8019      	strh	r1, [r3, #0]
 80124a2:	2300      	movs	r3, #0
 80124a4:	6123      	str	r3, [r4, #16]
 80124a6:	4615      	mov	r5, r2
 80124a8:	e7ba      	b.n	8012420 <_printf_i+0x150>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	1d1a      	adds	r2, r3, #4
 80124ae:	602a      	str	r2, [r5, #0]
 80124b0:	681d      	ldr	r5, [r3, #0]
 80124b2:	6862      	ldr	r2, [r4, #4]
 80124b4:	2100      	movs	r1, #0
 80124b6:	4628      	mov	r0, r5
 80124b8:	f7ed ff1a 	bl	80002f0 <memchr>
 80124bc:	b108      	cbz	r0, 80124c2 <_printf_i+0x1f2>
 80124be:	1b40      	subs	r0, r0, r5
 80124c0:	6060      	str	r0, [r4, #4]
 80124c2:	6863      	ldr	r3, [r4, #4]
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	2300      	movs	r3, #0
 80124c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124cc:	e7a8      	b.n	8012420 <_printf_i+0x150>
 80124ce:	6923      	ldr	r3, [r4, #16]
 80124d0:	462a      	mov	r2, r5
 80124d2:	4649      	mov	r1, r9
 80124d4:	4640      	mov	r0, r8
 80124d6:	47d0      	blx	sl
 80124d8:	3001      	adds	r0, #1
 80124da:	d0ab      	beq.n	8012434 <_printf_i+0x164>
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	079b      	lsls	r3, r3, #30
 80124e0:	d413      	bmi.n	801250a <_printf_i+0x23a>
 80124e2:	68e0      	ldr	r0, [r4, #12]
 80124e4:	9b03      	ldr	r3, [sp, #12]
 80124e6:	4298      	cmp	r0, r3
 80124e8:	bfb8      	it	lt
 80124ea:	4618      	movlt	r0, r3
 80124ec:	e7a4      	b.n	8012438 <_printf_i+0x168>
 80124ee:	2301      	movs	r3, #1
 80124f0:	4632      	mov	r2, r6
 80124f2:	4649      	mov	r1, r9
 80124f4:	4640      	mov	r0, r8
 80124f6:	47d0      	blx	sl
 80124f8:	3001      	adds	r0, #1
 80124fa:	d09b      	beq.n	8012434 <_printf_i+0x164>
 80124fc:	3501      	adds	r5, #1
 80124fe:	68e3      	ldr	r3, [r4, #12]
 8012500:	9903      	ldr	r1, [sp, #12]
 8012502:	1a5b      	subs	r3, r3, r1
 8012504:	42ab      	cmp	r3, r5
 8012506:	dcf2      	bgt.n	80124ee <_printf_i+0x21e>
 8012508:	e7eb      	b.n	80124e2 <_printf_i+0x212>
 801250a:	2500      	movs	r5, #0
 801250c:	f104 0619 	add.w	r6, r4, #25
 8012510:	e7f5      	b.n	80124fe <_printf_i+0x22e>
 8012512:	bf00      	nop
 8012514:	0801499a 	.word	0x0801499a
 8012518:	080149ab 	.word	0x080149ab

0801251c <cleanup_glue>:
 801251c:	b538      	push	{r3, r4, r5, lr}
 801251e:	460c      	mov	r4, r1
 8012520:	6809      	ldr	r1, [r1, #0]
 8012522:	4605      	mov	r5, r0
 8012524:	b109      	cbz	r1, 801252a <cleanup_glue+0xe>
 8012526:	f7ff fff9 	bl	801251c <cleanup_glue>
 801252a:	4621      	mov	r1, r4
 801252c:	4628      	mov	r0, r5
 801252e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012532:	f001 bc9b 	b.w	8013e6c <_free_r>
	...

08012538 <_reclaim_reent>:
 8012538:	4b2c      	ldr	r3, [pc, #176]	; (80125ec <_reclaim_reent+0xb4>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4283      	cmp	r3, r0
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	4604      	mov	r4, r0
 8012542:	d051      	beq.n	80125e8 <_reclaim_reent+0xb0>
 8012544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012546:	b143      	cbz	r3, 801255a <_reclaim_reent+0x22>
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d14a      	bne.n	80125e4 <_reclaim_reent+0xac>
 801254e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012550:	6819      	ldr	r1, [r3, #0]
 8012552:	b111      	cbz	r1, 801255a <_reclaim_reent+0x22>
 8012554:	4620      	mov	r0, r4
 8012556:	f001 fc89 	bl	8013e6c <_free_r>
 801255a:	6961      	ldr	r1, [r4, #20]
 801255c:	b111      	cbz	r1, 8012564 <_reclaim_reent+0x2c>
 801255e:	4620      	mov	r0, r4
 8012560:	f001 fc84 	bl	8013e6c <_free_r>
 8012564:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012566:	b111      	cbz	r1, 801256e <_reclaim_reent+0x36>
 8012568:	4620      	mov	r0, r4
 801256a:	f001 fc7f 	bl	8013e6c <_free_r>
 801256e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012570:	b111      	cbz	r1, 8012578 <_reclaim_reent+0x40>
 8012572:	4620      	mov	r0, r4
 8012574:	f001 fc7a 	bl	8013e6c <_free_r>
 8012578:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801257a:	b111      	cbz	r1, 8012582 <_reclaim_reent+0x4a>
 801257c:	4620      	mov	r0, r4
 801257e:	f001 fc75 	bl	8013e6c <_free_r>
 8012582:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012584:	b111      	cbz	r1, 801258c <_reclaim_reent+0x54>
 8012586:	4620      	mov	r0, r4
 8012588:	f001 fc70 	bl	8013e6c <_free_r>
 801258c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801258e:	b111      	cbz	r1, 8012596 <_reclaim_reent+0x5e>
 8012590:	4620      	mov	r0, r4
 8012592:	f001 fc6b 	bl	8013e6c <_free_r>
 8012596:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012598:	b111      	cbz	r1, 80125a0 <_reclaim_reent+0x68>
 801259a:	4620      	mov	r0, r4
 801259c:	f001 fc66 	bl	8013e6c <_free_r>
 80125a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125a2:	b111      	cbz	r1, 80125aa <_reclaim_reent+0x72>
 80125a4:	4620      	mov	r0, r4
 80125a6:	f001 fc61 	bl	8013e6c <_free_r>
 80125aa:	69a3      	ldr	r3, [r4, #24]
 80125ac:	b1e3      	cbz	r3, 80125e8 <_reclaim_reent+0xb0>
 80125ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80125b0:	4620      	mov	r0, r4
 80125b2:	4798      	blx	r3
 80125b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80125b6:	b1b9      	cbz	r1, 80125e8 <_reclaim_reent+0xb0>
 80125b8:	4620      	mov	r0, r4
 80125ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125be:	f7ff bfad 	b.w	801251c <cleanup_glue>
 80125c2:	5949      	ldr	r1, [r1, r5]
 80125c4:	b941      	cbnz	r1, 80125d8 <_reclaim_reent+0xa0>
 80125c6:	3504      	adds	r5, #4
 80125c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125ca:	2d80      	cmp	r5, #128	; 0x80
 80125cc:	68d9      	ldr	r1, [r3, #12]
 80125ce:	d1f8      	bne.n	80125c2 <_reclaim_reent+0x8a>
 80125d0:	4620      	mov	r0, r4
 80125d2:	f001 fc4b 	bl	8013e6c <_free_r>
 80125d6:	e7ba      	b.n	801254e <_reclaim_reent+0x16>
 80125d8:	680e      	ldr	r6, [r1, #0]
 80125da:	4620      	mov	r0, r4
 80125dc:	f001 fc46 	bl	8013e6c <_free_r>
 80125e0:	4631      	mov	r1, r6
 80125e2:	e7ef      	b.n	80125c4 <_reclaim_reent+0x8c>
 80125e4:	2500      	movs	r5, #0
 80125e6:	e7ef      	b.n	80125c8 <_reclaim_reent+0x90>
 80125e8:	bd70      	pop	{r4, r5, r6, pc}
 80125ea:	bf00      	nop
 80125ec:	24000014 	.word	0x24000014

080125f0 <_sbrk_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d06      	ldr	r5, [pc, #24]	; (801260c <_sbrk_r+0x1c>)
 80125f4:	2300      	movs	r3, #0
 80125f6:	4604      	mov	r4, r0
 80125f8:	4608      	mov	r0, r1
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	f7f0 fdf4 	bl	80031e8 <_sbrk>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_sbrk_r+0x1a>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_sbrk_r+0x1a>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	240056cc 	.word	0x240056cc

08012610 <siprintf>:
 8012610:	b40e      	push	{r1, r2, r3}
 8012612:	b500      	push	{lr}
 8012614:	b09c      	sub	sp, #112	; 0x70
 8012616:	ab1d      	add	r3, sp, #116	; 0x74
 8012618:	9002      	str	r0, [sp, #8]
 801261a:	9006      	str	r0, [sp, #24]
 801261c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012620:	4809      	ldr	r0, [pc, #36]	; (8012648 <siprintf+0x38>)
 8012622:	9107      	str	r1, [sp, #28]
 8012624:	9104      	str	r1, [sp, #16]
 8012626:	4909      	ldr	r1, [pc, #36]	; (801264c <siprintf+0x3c>)
 8012628:	f853 2b04 	ldr.w	r2, [r3], #4
 801262c:	9105      	str	r1, [sp, #20]
 801262e:	6800      	ldr	r0, [r0, #0]
 8012630:	9301      	str	r3, [sp, #4]
 8012632:	a902      	add	r1, sp, #8
 8012634:	f001 fcc2 	bl	8013fbc <_svfiprintf_r>
 8012638:	9b02      	ldr	r3, [sp, #8]
 801263a:	2200      	movs	r2, #0
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	b01c      	add	sp, #112	; 0x70
 8012640:	f85d eb04 	ldr.w	lr, [sp], #4
 8012644:	b003      	add	sp, #12
 8012646:	4770      	bx	lr
 8012648:	24000014 	.word	0x24000014
 801264c:	ffff0208 	.word	0xffff0208

08012650 <__sread>:
 8012650:	b510      	push	{r4, lr}
 8012652:	460c      	mov	r4, r1
 8012654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012658:	f001 ff0a 	bl	8014470 <_read_r>
 801265c:	2800      	cmp	r0, #0
 801265e:	bfab      	itete	ge
 8012660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012662:	89a3      	ldrhlt	r3, [r4, #12]
 8012664:	181b      	addge	r3, r3, r0
 8012666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801266a:	bfac      	ite	ge
 801266c:	6563      	strge	r3, [r4, #84]	; 0x54
 801266e:	81a3      	strhlt	r3, [r4, #12]
 8012670:	bd10      	pop	{r4, pc}

08012672 <__swrite>:
 8012672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012676:	461f      	mov	r7, r3
 8012678:	898b      	ldrh	r3, [r1, #12]
 801267a:	05db      	lsls	r3, r3, #23
 801267c:	4605      	mov	r5, r0
 801267e:	460c      	mov	r4, r1
 8012680:	4616      	mov	r6, r2
 8012682:	d505      	bpl.n	8012690 <__swrite+0x1e>
 8012684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012688:	2302      	movs	r3, #2
 801268a:	2200      	movs	r2, #0
 801268c:	f000 ffc8 	bl	8013620 <_lseek_r>
 8012690:	89a3      	ldrh	r3, [r4, #12]
 8012692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801269a:	81a3      	strh	r3, [r4, #12]
 801269c:	4632      	mov	r2, r6
 801269e:	463b      	mov	r3, r7
 80126a0:	4628      	mov	r0, r5
 80126a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126a6:	f000 b869 	b.w	801277c <_write_r>

080126aa <__sseek>:
 80126aa:	b510      	push	{r4, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b2:	f000 ffb5 	bl	8013620 <_lseek_r>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	89a3      	ldrh	r3, [r4, #12]
 80126ba:	bf15      	itete	ne
 80126bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80126be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126c6:	81a3      	strheq	r3, [r4, #12]
 80126c8:	bf18      	it	ne
 80126ca:	81a3      	strhne	r3, [r4, #12]
 80126cc:	bd10      	pop	{r4, pc}

080126ce <__sclose>:
 80126ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126d2:	f000 b8d3 	b.w	801287c <_close_r>
	...

080126d8 <__swbuf_r>:
 80126d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126da:	460e      	mov	r6, r1
 80126dc:	4614      	mov	r4, r2
 80126de:	4605      	mov	r5, r0
 80126e0:	b118      	cbz	r0, 80126ea <__swbuf_r+0x12>
 80126e2:	6983      	ldr	r3, [r0, #24]
 80126e4:	b90b      	cbnz	r3, 80126ea <__swbuf_r+0x12>
 80126e6:	f7ff f967 	bl	80119b8 <__sinit>
 80126ea:	4b21      	ldr	r3, [pc, #132]	; (8012770 <__swbuf_r+0x98>)
 80126ec:	429c      	cmp	r4, r3
 80126ee:	d12b      	bne.n	8012748 <__swbuf_r+0x70>
 80126f0:	686c      	ldr	r4, [r5, #4]
 80126f2:	69a3      	ldr	r3, [r4, #24]
 80126f4:	60a3      	str	r3, [r4, #8]
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	071a      	lsls	r2, r3, #28
 80126fa:	d52f      	bpl.n	801275c <__swbuf_r+0x84>
 80126fc:	6923      	ldr	r3, [r4, #16]
 80126fe:	b36b      	cbz	r3, 801275c <__swbuf_r+0x84>
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	6820      	ldr	r0, [r4, #0]
 8012704:	1ac0      	subs	r0, r0, r3
 8012706:	6963      	ldr	r3, [r4, #20]
 8012708:	b2f6      	uxtb	r6, r6
 801270a:	4283      	cmp	r3, r0
 801270c:	4637      	mov	r7, r6
 801270e:	dc04      	bgt.n	801271a <__swbuf_r+0x42>
 8012710:	4621      	mov	r1, r4
 8012712:	4628      	mov	r0, r5
 8012714:	f000 ff44 	bl	80135a0 <_fflush_r>
 8012718:	bb30      	cbnz	r0, 8012768 <__swbuf_r+0x90>
 801271a:	68a3      	ldr	r3, [r4, #8]
 801271c:	3b01      	subs	r3, #1
 801271e:	60a3      	str	r3, [r4, #8]
 8012720:	6823      	ldr	r3, [r4, #0]
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	6022      	str	r2, [r4, #0]
 8012726:	701e      	strb	r6, [r3, #0]
 8012728:	6963      	ldr	r3, [r4, #20]
 801272a:	3001      	adds	r0, #1
 801272c:	4283      	cmp	r3, r0
 801272e:	d004      	beq.n	801273a <__swbuf_r+0x62>
 8012730:	89a3      	ldrh	r3, [r4, #12]
 8012732:	07db      	lsls	r3, r3, #31
 8012734:	d506      	bpl.n	8012744 <__swbuf_r+0x6c>
 8012736:	2e0a      	cmp	r6, #10
 8012738:	d104      	bne.n	8012744 <__swbuf_r+0x6c>
 801273a:	4621      	mov	r1, r4
 801273c:	4628      	mov	r0, r5
 801273e:	f000 ff2f 	bl	80135a0 <_fflush_r>
 8012742:	b988      	cbnz	r0, 8012768 <__swbuf_r+0x90>
 8012744:	4638      	mov	r0, r7
 8012746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012748:	4b0a      	ldr	r3, [pc, #40]	; (8012774 <__swbuf_r+0x9c>)
 801274a:	429c      	cmp	r4, r3
 801274c:	d101      	bne.n	8012752 <__swbuf_r+0x7a>
 801274e:	68ac      	ldr	r4, [r5, #8]
 8012750:	e7cf      	b.n	80126f2 <__swbuf_r+0x1a>
 8012752:	4b09      	ldr	r3, [pc, #36]	; (8012778 <__swbuf_r+0xa0>)
 8012754:	429c      	cmp	r4, r3
 8012756:	bf08      	it	eq
 8012758:	68ec      	ldreq	r4, [r5, #12]
 801275a:	e7ca      	b.n	80126f2 <__swbuf_r+0x1a>
 801275c:	4621      	mov	r1, r4
 801275e:	4628      	mov	r0, r5
 8012760:	f000 f81e 	bl	80127a0 <__swsetup_r>
 8012764:	2800      	cmp	r0, #0
 8012766:	d0cb      	beq.n	8012700 <__swbuf_r+0x28>
 8012768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801276c:	e7ea      	b.n	8012744 <__swbuf_r+0x6c>
 801276e:	bf00      	nop
 8012770:	08014944 	.word	0x08014944
 8012774:	08014964 	.word	0x08014964
 8012778:	08014924 	.word	0x08014924

0801277c <_write_r>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	4d07      	ldr	r5, [pc, #28]	; (801279c <_write_r+0x20>)
 8012780:	4604      	mov	r4, r0
 8012782:	4608      	mov	r0, r1
 8012784:	4611      	mov	r1, r2
 8012786:	2200      	movs	r2, #0
 8012788:	602a      	str	r2, [r5, #0]
 801278a:	461a      	mov	r2, r3
 801278c:	f7f0 fcdb 	bl	8003146 <_write>
 8012790:	1c43      	adds	r3, r0, #1
 8012792:	d102      	bne.n	801279a <_write_r+0x1e>
 8012794:	682b      	ldr	r3, [r5, #0]
 8012796:	b103      	cbz	r3, 801279a <_write_r+0x1e>
 8012798:	6023      	str	r3, [r4, #0]
 801279a:	bd38      	pop	{r3, r4, r5, pc}
 801279c:	240056cc 	.word	0x240056cc

080127a0 <__swsetup_r>:
 80127a0:	4b32      	ldr	r3, [pc, #200]	; (801286c <__swsetup_r+0xcc>)
 80127a2:	b570      	push	{r4, r5, r6, lr}
 80127a4:	681d      	ldr	r5, [r3, #0]
 80127a6:	4606      	mov	r6, r0
 80127a8:	460c      	mov	r4, r1
 80127aa:	b125      	cbz	r5, 80127b6 <__swsetup_r+0x16>
 80127ac:	69ab      	ldr	r3, [r5, #24]
 80127ae:	b913      	cbnz	r3, 80127b6 <__swsetup_r+0x16>
 80127b0:	4628      	mov	r0, r5
 80127b2:	f7ff f901 	bl	80119b8 <__sinit>
 80127b6:	4b2e      	ldr	r3, [pc, #184]	; (8012870 <__swsetup_r+0xd0>)
 80127b8:	429c      	cmp	r4, r3
 80127ba:	d10f      	bne.n	80127dc <__swsetup_r+0x3c>
 80127bc:	686c      	ldr	r4, [r5, #4]
 80127be:	89a3      	ldrh	r3, [r4, #12]
 80127c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127c4:	0719      	lsls	r1, r3, #28
 80127c6:	d42c      	bmi.n	8012822 <__swsetup_r+0x82>
 80127c8:	06dd      	lsls	r5, r3, #27
 80127ca:	d411      	bmi.n	80127f0 <__swsetup_r+0x50>
 80127cc:	2309      	movs	r3, #9
 80127ce:	6033      	str	r3, [r6, #0]
 80127d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127d4:	81a3      	strh	r3, [r4, #12]
 80127d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127da:	e03e      	b.n	801285a <__swsetup_r+0xba>
 80127dc:	4b25      	ldr	r3, [pc, #148]	; (8012874 <__swsetup_r+0xd4>)
 80127de:	429c      	cmp	r4, r3
 80127e0:	d101      	bne.n	80127e6 <__swsetup_r+0x46>
 80127e2:	68ac      	ldr	r4, [r5, #8]
 80127e4:	e7eb      	b.n	80127be <__swsetup_r+0x1e>
 80127e6:	4b24      	ldr	r3, [pc, #144]	; (8012878 <__swsetup_r+0xd8>)
 80127e8:	429c      	cmp	r4, r3
 80127ea:	bf08      	it	eq
 80127ec:	68ec      	ldreq	r4, [r5, #12]
 80127ee:	e7e6      	b.n	80127be <__swsetup_r+0x1e>
 80127f0:	0758      	lsls	r0, r3, #29
 80127f2:	d512      	bpl.n	801281a <__swsetup_r+0x7a>
 80127f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127f6:	b141      	cbz	r1, 801280a <__swsetup_r+0x6a>
 80127f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127fc:	4299      	cmp	r1, r3
 80127fe:	d002      	beq.n	8012806 <__swsetup_r+0x66>
 8012800:	4630      	mov	r0, r6
 8012802:	f001 fb33 	bl	8013e6c <_free_r>
 8012806:	2300      	movs	r3, #0
 8012808:	6363      	str	r3, [r4, #52]	; 0x34
 801280a:	89a3      	ldrh	r3, [r4, #12]
 801280c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012810:	81a3      	strh	r3, [r4, #12]
 8012812:	2300      	movs	r3, #0
 8012814:	6063      	str	r3, [r4, #4]
 8012816:	6923      	ldr	r3, [r4, #16]
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	f043 0308 	orr.w	r3, r3, #8
 8012820:	81a3      	strh	r3, [r4, #12]
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	b94b      	cbnz	r3, 801283a <__swsetup_r+0x9a>
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012830:	d003      	beq.n	801283a <__swsetup_r+0x9a>
 8012832:	4621      	mov	r1, r4
 8012834:	4630      	mov	r0, r6
 8012836:	f000 ff2b 	bl	8013690 <__smakebuf_r>
 801283a:	89a0      	ldrh	r0, [r4, #12]
 801283c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012840:	f010 0301 	ands.w	r3, r0, #1
 8012844:	d00a      	beq.n	801285c <__swsetup_r+0xbc>
 8012846:	2300      	movs	r3, #0
 8012848:	60a3      	str	r3, [r4, #8]
 801284a:	6963      	ldr	r3, [r4, #20]
 801284c:	425b      	negs	r3, r3
 801284e:	61a3      	str	r3, [r4, #24]
 8012850:	6923      	ldr	r3, [r4, #16]
 8012852:	b943      	cbnz	r3, 8012866 <__swsetup_r+0xc6>
 8012854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012858:	d1ba      	bne.n	80127d0 <__swsetup_r+0x30>
 801285a:	bd70      	pop	{r4, r5, r6, pc}
 801285c:	0781      	lsls	r1, r0, #30
 801285e:	bf58      	it	pl
 8012860:	6963      	ldrpl	r3, [r4, #20]
 8012862:	60a3      	str	r3, [r4, #8]
 8012864:	e7f4      	b.n	8012850 <__swsetup_r+0xb0>
 8012866:	2000      	movs	r0, #0
 8012868:	e7f7      	b.n	801285a <__swsetup_r+0xba>
 801286a:	bf00      	nop
 801286c:	24000014 	.word	0x24000014
 8012870:	08014944 	.word	0x08014944
 8012874:	08014964 	.word	0x08014964
 8012878:	08014924 	.word	0x08014924

0801287c <_close_r>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	4d06      	ldr	r5, [pc, #24]	; (8012898 <_close_r+0x1c>)
 8012880:	2300      	movs	r3, #0
 8012882:	4604      	mov	r4, r0
 8012884:	4608      	mov	r0, r1
 8012886:	602b      	str	r3, [r5, #0]
 8012888:	f7f0 fc79 	bl	800317e <_close>
 801288c:	1c43      	adds	r3, r0, #1
 801288e:	d102      	bne.n	8012896 <_close_r+0x1a>
 8012890:	682b      	ldr	r3, [r5, #0]
 8012892:	b103      	cbz	r3, 8012896 <_close_r+0x1a>
 8012894:	6023      	str	r3, [r4, #0]
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	240056cc 	.word	0x240056cc

0801289c <quorem>:
 801289c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a0:	6903      	ldr	r3, [r0, #16]
 80128a2:	690c      	ldr	r4, [r1, #16]
 80128a4:	42a3      	cmp	r3, r4
 80128a6:	4607      	mov	r7, r0
 80128a8:	f2c0 8081 	blt.w	80129ae <quorem+0x112>
 80128ac:	3c01      	subs	r4, #1
 80128ae:	f101 0814 	add.w	r8, r1, #20
 80128b2:	f100 0514 	add.w	r5, r0, #20
 80128b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128ba:	9301      	str	r3, [sp, #4]
 80128bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80128c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128c4:	3301      	adds	r3, #1
 80128c6:	429a      	cmp	r2, r3
 80128c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80128d4:	d331      	bcc.n	801293a <quorem+0x9e>
 80128d6:	f04f 0e00 	mov.w	lr, #0
 80128da:	4640      	mov	r0, r8
 80128dc:	46ac      	mov	ip, r5
 80128de:	46f2      	mov	sl, lr
 80128e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80128e4:	b293      	uxth	r3, r2
 80128e6:	fb06 e303 	mla	r3, r6, r3, lr
 80128ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	ebaa 0303 	sub.w	r3, sl, r3
 80128f4:	f8dc a000 	ldr.w	sl, [ip]
 80128f8:	0c12      	lsrs	r2, r2, #16
 80128fa:	fa13 f38a 	uxtah	r3, r3, sl
 80128fe:	fb06 e202 	mla	r2, r6, r2, lr
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	9b00      	ldr	r3, [sp, #0]
 8012906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801290a:	b292      	uxth	r2, r2
 801290c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012914:	f8bd 3000 	ldrh.w	r3, [sp]
 8012918:	4581      	cmp	r9, r0
 801291a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801291e:	f84c 3b04 	str.w	r3, [ip], #4
 8012922:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012926:	d2db      	bcs.n	80128e0 <quorem+0x44>
 8012928:	f855 300b 	ldr.w	r3, [r5, fp]
 801292c:	b92b      	cbnz	r3, 801293a <quorem+0x9e>
 801292e:	9b01      	ldr	r3, [sp, #4]
 8012930:	3b04      	subs	r3, #4
 8012932:	429d      	cmp	r5, r3
 8012934:	461a      	mov	r2, r3
 8012936:	d32e      	bcc.n	8012996 <quorem+0xfa>
 8012938:	613c      	str	r4, [r7, #16]
 801293a:	4638      	mov	r0, r7
 801293c:	f001 f97e 	bl	8013c3c <__mcmp>
 8012940:	2800      	cmp	r0, #0
 8012942:	db24      	blt.n	801298e <quorem+0xf2>
 8012944:	3601      	adds	r6, #1
 8012946:	4628      	mov	r0, r5
 8012948:	f04f 0c00 	mov.w	ip, #0
 801294c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012950:	f8d0 e000 	ldr.w	lr, [r0]
 8012954:	b293      	uxth	r3, r2
 8012956:	ebac 0303 	sub.w	r3, ip, r3
 801295a:	0c12      	lsrs	r2, r2, #16
 801295c:	fa13 f38e 	uxtah	r3, r3, lr
 8012960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012968:	b29b      	uxth	r3, r3
 801296a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801296e:	45c1      	cmp	r9, r8
 8012970:	f840 3b04 	str.w	r3, [r0], #4
 8012974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012978:	d2e8      	bcs.n	801294c <quorem+0xb0>
 801297a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801297e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012982:	b922      	cbnz	r2, 801298e <quorem+0xf2>
 8012984:	3b04      	subs	r3, #4
 8012986:	429d      	cmp	r5, r3
 8012988:	461a      	mov	r2, r3
 801298a:	d30a      	bcc.n	80129a2 <quorem+0x106>
 801298c:	613c      	str	r4, [r7, #16]
 801298e:	4630      	mov	r0, r6
 8012990:	b003      	add	sp, #12
 8012992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012996:	6812      	ldr	r2, [r2, #0]
 8012998:	3b04      	subs	r3, #4
 801299a:	2a00      	cmp	r2, #0
 801299c:	d1cc      	bne.n	8012938 <quorem+0x9c>
 801299e:	3c01      	subs	r4, #1
 80129a0:	e7c7      	b.n	8012932 <quorem+0x96>
 80129a2:	6812      	ldr	r2, [r2, #0]
 80129a4:	3b04      	subs	r3, #4
 80129a6:	2a00      	cmp	r2, #0
 80129a8:	d1f0      	bne.n	801298c <quorem+0xf0>
 80129aa:	3c01      	subs	r4, #1
 80129ac:	e7eb      	b.n	8012986 <quorem+0xea>
 80129ae:	2000      	movs	r0, #0
 80129b0:	e7ee      	b.n	8012990 <quorem+0xf4>
 80129b2:	0000      	movs	r0, r0
 80129b4:	0000      	movs	r0, r0
	...

080129b8 <_dtoa_r>:
 80129b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129bc:	ed2d 8b02 	vpush	{d8}
 80129c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129c2:	b091      	sub	sp, #68	; 0x44
 80129c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80129c8:	ec59 8b10 	vmov	r8, r9, d0
 80129cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80129ce:	9106      	str	r1, [sp, #24]
 80129d0:	4606      	mov	r6, r0
 80129d2:	9208      	str	r2, [sp, #32]
 80129d4:	930c      	str	r3, [sp, #48]	; 0x30
 80129d6:	b975      	cbnz	r5, 80129f6 <_dtoa_r+0x3e>
 80129d8:	2010      	movs	r0, #16
 80129da:	f000 fe99 	bl	8013710 <malloc>
 80129de:	4602      	mov	r2, r0
 80129e0:	6270      	str	r0, [r6, #36]	; 0x24
 80129e2:	b920      	cbnz	r0, 80129ee <_dtoa_r+0x36>
 80129e4:	4baa      	ldr	r3, [pc, #680]	; (8012c90 <_dtoa_r+0x2d8>)
 80129e6:	21ea      	movs	r1, #234	; 0xea
 80129e8:	48aa      	ldr	r0, [pc, #680]	; (8012c94 <_dtoa_r+0x2dc>)
 80129ea:	f001 fd53 	bl	8014494 <__assert_func>
 80129ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129f2:	6005      	str	r5, [r0, #0]
 80129f4:	60c5      	str	r5, [r0, #12]
 80129f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129f8:	6819      	ldr	r1, [r3, #0]
 80129fa:	b151      	cbz	r1, 8012a12 <_dtoa_r+0x5a>
 80129fc:	685a      	ldr	r2, [r3, #4]
 80129fe:	604a      	str	r2, [r1, #4]
 8012a00:	2301      	movs	r3, #1
 8012a02:	4093      	lsls	r3, r2
 8012a04:	608b      	str	r3, [r1, #8]
 8012a06:	4630      	mov	r0, r6
 8012a08:	f000 fed6 	bl	80137b8 <_Bfree>
 8012a0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012a0e:	2200      	movs	r2, #0
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	f1b9 0300 	subs.w	r3, r9, #0
 8012a16:	bfbb      	ittet	lt
 8012a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a1c:	9303      	strlt	r3, [sp, #12]
 8012a1e:	2300      	movge	r3, #0
 8012a20:	2201      	movlt	r2, #1
 8012a22:	bfac      	ite	ge
 8012a24:	6023      	strge	r3, [r4, #0]
 8012a26:	6022      	strlt	r2, [r4, #0]
 8012a28:	4b9b      	ldr	r3, [pc, #620]	; (8012c98 <_dtoa_r+0x2e0>)
 8012a2a:	9c03      	ldr	r4, [sp, #12]
 8012a2c:	43a3      	bics	r3, r4
 8012a2e:	d11c      	bne.n	8012a6a <_dtoa_r+0xb2>
 8012a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a36:	6013      	str	r3, [r2, #0]
 8012a38:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012a3c:	ea53 0308 	orrs.w	r3, r3, r8
 8012a40:	f000 84fd 	beq.w	801343e <_dtoa_r+0xa86>
 8012a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a46:	b963      	cbnz	r3, 8012a62 <_dtoa_r+0xaa>
 8012a48:	4b94      	ldr	r3, [pc, #592]	; (8012c9c <_dtoa_r+0x2e4>)
 8012a4a:	e01f      	b.n	8012a8c <_dtoa_r+0xd4>
 8012a4c:	4b94      	ldr	r3, [pc, #592]	; (8012ca0 <_dtoa_r+0x2e8>)
 8012a4e:	9301      	str	r3, [sp, #4]
 8012a50:	3308      	adds	r3, #8
 8012a52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012a54:	6013      	str	r3, [r2, #0]
 8012a56:	9801      	ldr	r0, [sp, #4]
 8012a58:	b011      	add	sp, #68	; 0x44
 8012a5a:	ecbd 8b02 	vpop	{d8}
 8012a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a62:	4b8e      	ldr	r3, [pc, #568]	; (8012c9c <_dtoa_r+0x2e4>)
 8012a64:	9301      	str	r3, [sp, #4]
 8012a66:	3303      	adds	r3, #3
 8012a68:	e7f3      	b.n	8012a52 <_dtoa_r+0x9a>
 8012a6a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012a6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a76:	d10b      	bne.n	8012a90 <_dtoa_r+0xd8>
 8012a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	6013      	str	r3, [r2, #0]
 8012a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 84d9 	beq.w	8013438 <_dtoa_r+0xa80>
 8012a86:	4887      	ldr	r0, [pc, #540]	; (8012ca4 <_dtoa_r+0x2ec>)
 8012a88:	6018      	str	r0, [r3, #0]
 8012a8a:	1e43      	subs	r3, r0, #1
 8012a8c:	9301      	str	r3, [sp, #4]
 8012a8e:	e7e2      	b.n	8012a56 <_dtoa_r+0x9e>
 8012a90:	a90f      	add	r1, sp, #60	; 0x3c
 8012a92:	aa0e      	add	r2, sp, #56	; 0x38
 8012a94:	4630      	mov	r0, r6
 8012a96:	eeb0 0b48 	vmov.f64	d0, d8
 8012a9a:	f001 f975 	bl	8013d88 <__d2b>
 8012a9e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012aa6:	2900      	cmp	r1, #0
 8012aa8:	d046      	beq.n	8012b38 <_dtoa_r+0x180>
 8012aaa:	ee18 4a90 	vmov	r4, s17
 8012aae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012ab2:	ec53 2b18 	vmov	r2, r3, d8
 8012ab6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012aba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012abe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012ac2:	2400      	movs	r4, #0
 8012ac4:	ec43 2b16 	vmov	d6, r2, r3
 8012ac8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012acc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012c78 <_dtoa_r+0x2c0>
 8012ad0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ad4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012c80 <_dtoa_r+0x2c8>
 8012ad8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012adc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012c88 <_dtoa_r+0x2d0>
 8012ae0:	ee07 1a90 	vmov	s15, r1
 8012ae4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012ae8:	eeb0 7b46 	vmov.f64	d7, d6
 8012aec:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012af0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012af4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afc:	ee16 ba90 	vmov	fp, s13
 8012b00:	940a      	str	r4, [sp, #40]	; 0x28
 8012b02:	d508      	bpl.n	8012b16 <_dtoa_r+0x15e>
 8012b04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012b08:	eeb4 6b47 	vcmp.f64	d6, d7
 8012b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b10:	bf18      	it	ne
 8012b12:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012b16:	f1bb 0f16 	cmp.w	fp, #22
 8012b1a:	d82f      	bhi.n	8012b7c <_dtoa_r+0x1c4>
 8012b1c:	4b62      	ldr	r3, [pc, #392]	; (8012ca8 <_dtoa_r+0x2f0>)
 8012b1e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012b22:	ed93 7b00 	vldr	d7, [r3]
 8012b26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2e:	d501      	bpl.n	8012b34 <_dtoa_r+0x17c>
 8012b30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b34:	2300      	movs	r3, #0
 8012b36:	e022      	b.n	8012b7e <_dtoa_r+0x1c6>
 8012b38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b3a:	4401      	add	r1, r0
 8012b3c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012b40:	2b20      	cmp	r3, #32
 8012b42:	bfc1      	itttt	gt
 8012b44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012b48:	fa04 f303 	lslgt.w	r3, r4, r3
 8012b4c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012b50:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012b54:	bfd6      	itet	le
 8012b56:	f1c3 0320 	rsble	r3, r3, #32
 8012b5a:	ea43 0808 	orrgt.w	r8, r3, r8
 8012b5e:	fa08 f803 	lslle.w	r8, r8, r3
 8012b62:	ee07 8a90 	vmov	s15, r8
 8012b66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b6a:	3901      	subs	r1, #1
 8012b6c:	ee17 4a90 	vmov	r4, s15
 8012b70:	ec53 2b17 	vmov	r2, r3, d7
 8012b74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012b78:	2401      	movs	r4, #1
 8012b7a:	e7a3      	b.n	8012ac4 <_dtoa_r+0x10c>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b80:	1a43      	subs	r3, r0, r1
 8012b82:	1e5a      	subs	r2, r3, #1
 8012b84:	bf45      	ittet	mi
 8012b86:	f1c3 0301 	rsbmi	r3, r3, #1
 8012b8a:	9304      	strmi	r3, [sp, #16]
 8012b8c:	2300      	movpl	r3, #0
 8012b8e:	2300      	movmi	r3, #0
 8012b90:	9205      	str	r2, [sp, #20]
 8012b92:	bf54      	ite	pl
 8012b94:	9304      	strpl	r3, [sp, #16]
 8012b96:	9305      	strmi	r3, [sp, #20]
 8012b98:	f1bb 0f00 	cmp.w	fp, #0
 8012b9c:	db18      	blt.n	8012bd0 <_dtoa_r+0x218>
 8012b9e:	9b05      	ldr	r3, [sp, #20]
 8012ba0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012ba4:	445b      	add	r3, fp
 8012ba6:	9305      	str	r3, [sp, #20]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	9a06      	ldr	r2, [sp, #24]
 8012bac:	2a09      	cmp	r2, #9
 8012bae:	d849      	bhi.n	8012c44 <_dtoa_r+0x28c>
 8012bb0:	2a05      	cmp	r2, #5
 8012bb2:	bfc4      	itt	gt
 8012bb4:	3a04      	subgt	r2, #4
 8012bb6:	9206      	strgt	r2, [sp, #24]
 8012bb8:	9a06      	ldr	r2, [sp, #24]
 8012bba:	f1a2 0202 	sub.w	r2, r2, #2
 8012bbe:	bfcc      	ite	gt
 8012bc0:	2400      	movgt	r4, #0
 8012bc2:	2401      	movle	r4, #1
 8012bc4:	2a03      	cmp	r2, #3
 8012bc6:	d848      	bhi.n	8012c5a <_dtoa_r+0x2a2>
 8012bc8:	e8df f002 	tbb	[pc, r2]
 8012bcc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012bd0:	9b04      	ldr	r3, [sp, #16]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	eba3 030b 	sub.w	r3, r3, fp
 8012bd8:	9304      	str	r3, [sp, #16]
 8012bda:	9209      	str	r2, [sp, #36]	; 0x24
 8012bdc:	f1cb 0300 	rsb	r3, fp, #0
 8012be0:	e7e3      	b.n	8012baa <_dtoa_r+0x1f2>
 8012be2:	2200      	movs	r2, #0
 8012be4:	9207      	str	r2, [sp, #28]
 8012be6:	9a08      	ldr	r2, [sp, #32]
 8012be8:	2a00      	cmp	r2, #0
 8012bea:	dc39      	bgt.n	8012c60 <_dtoa_r+0x2a8>
 8012bec:	f04f 0a01 	mov.w	sl, #1
 8012bf0:	46d1      	mov	r9, sl
 8012bf2:	4652      	mov	r2, sl
 8012bf4:	f8cd a020 	str.w	sl, [sp, #32]
 8012bf8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	6079      	str	r1, [r7, #4]
 8012bfe:	2004      	movs	r0, #4
 8012c00:	f100 0c14 	add.w	ip, r0, #20
 8012c04:	4594      	cmp	ip, r2
 8012c06:	6879      	ldr	r1, [r7, #4]
 8012c08:	d92f      	bls.n	8012c6a <_dtoa_r+0x2b2>
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8012c0e:	f000 fd93 	bl	8013738 <_Balloc>
 8012c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c14:	9001      	str	r0, [sp, #4]
 8012c16:	4602      	mov	r2, r0
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d149      	bne.n	8012cb0 <_dtoa_r+0x2f8>
 8012c1c:	4b23      	ldr	r3, [pc, #140]	; (8012cac <_dtoa_r+0x2f4>)
 8012c1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c22:	e6e1      	b.n	80129e8 <_dtoa_r+0x30>
 8012c24:	2201      	movs	r2, #1
 8012c26:	e7dd      	b.n	8012be4 <_dtoa_r+0x22c>
 8012c28:	2200      	movs	r2, #0
 8012c2a:	9207      	str	r2, [sp, #28]
 8012c2c:	9a08      	ldr	r2, [sp, #32]
 8012c2e:	eb0b 0a02 	add.w	sl, fp, r2
 8012c32:	f10a 0901 	add.w	r9, sl, #1
 8012c36:	464a      	mov	r2, r9
 8012c38:	2a01      	cmp	r2, #1
 8012c3a:	bfb8      	it	lt
 8012c3c:	2201      	movlt	r2, #1
 8012c3e:	e7db      	b.n	8012bf8 <_dtoa_r+0x240>
 8012c40:	2201      	movs	r2, #1
 8012c42:	e7f2      	b.n	8012c2a <_dtoa_r+0x272>
 8012c44:	2401      	movs	r4, #1
 8012c46:	2200      	movs	r2, #0
 8012c48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012c4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012c50:	2100      	movs	r1, #0
 8012c52:	46d1      	mov	r9, sl
 8012c54:	2212      	movs	r2, #18
 8012c56:	9108      	str	r1, [sp, #32]
 8012c58:	e7ce      	b.n	8012bf8 <_dtoa_r+0x240>
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	9207      	str	r2, [sp, #28]
 8012c5e:	e7f5      	b.n	8012c4c <_dtoa_r+0x294>
 8012c60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012c64:	46d1      	mov	r9, sl
 8012c66:	4652      	mov	r2, sl
 8012c68:	e7c6      	b.n	8012bf8 <_dtoa_r+0x240>
 8012c6a:	3101      	adds	r1, #1
 8012c6c:	6079      	str	r1, [r7, #4]
 8012c6e:	0040      	lsls	r0, r0, #1
 8012c70:	e7c6      	b.n	8012c00 <_dtoa_r+0x248>
 8012c72:	bf00      	nop
 8012c74:	f3af 8000 	nop.w
 8012c78:	636f4361 	.word	0x636f4361
 8012c7c:	3fd287a7 	.word	0x3fd287a7
 8012c80:	8b60c8b3 	.word	0x8b60c8b3
 8012c84:	3fc68a28 	.word	0x3fc68a28
 8012c88:	509f79fb 	.word	0x509f79fb
 8012c8c:	3fd34413 	.word	0x3fd34413
 8012c90:	080149c9 	.word	0x080149c9
 8012c94:	080149e0 	.word	0x080149e0
 8012c98:	7ff00000 	.word	0x7ff00000
 8012c9c:	080149c5 	.word	0x080149c5
 8012ca0:	080149bc 	.word	0x080149bc
 8012ca4:	08014999 	.word	0x08014999
 8012ca8:	08014ad0 	.word	0x08014ad0
 8012cac:	08014a3b 	.word	0x08014a3b
 8012cb0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012cb2:	9901      	ldr	r1, [sp, #4]
 8012cb4:	6011      	str	r1, [r2, #0]
 8012cb6:	f1b9 0f0e 	cmp.w	r9, #14
 8012cba:	d86c      	bhi.n	8012d96 <_dtoa_r+0x3de>
 8012cbc:	2c00      	cmp	r4, #0
 8012cbe:	d06a      	beq.n	8012d96 <_dtoa_r+0x3de>
 8012cc0:	f1bb 0f00 	cmp.w	fp, #0
 8012cc4:	f340 80a0 	ble.w	8012e08 <_dtoa_r+0x450>
 8012cc8:	49c1      	ldr	r1, [pc, #772]	; (8012fd0 <_dtoa_r+0x618>)
 8012cca:	f00b 020f 	and.w	r2, fp, #15
 8012cce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012cd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012cd6:	ed92 7b00 	vldr	d7, [r2]
 8012cda:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012cde:	f000 8087 	beq.w	8012df0 <_dtoa_r+0x438>
 8012ce2:	4abc      	ldr	r2, [pc, #752]	; (8012fd4 <_dtoa_r+0x61c>)
 8012ce4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012ce8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012cec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012cf0:	f001 010f 	and.w	r1, r1, #15
 8012cf4:	2203      	movs	r2, #3
 8012cf6:	48b7      	ldr	r0, [pc, #732]	; (8012fd4 <_dtoa_r+0x61c>)
 8012cf8:	2900      	cmp	r1, #0
 8012cfa:	d17b      	bne.n	8012df4 <_dtoa_r+0x43c>
 8012cfc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d0a:	2900      	cmp	r1, #0
 8012d0c:	f000 80a2 	beq.w	8012e54 <_dtoa_r+0x49c>
 8012d10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	f140 8098 	bpl.w	8012e54 <_dtoa_r+0x49c>
 8012d24:	f1b9 0f00 	cmp.w	r9, #0
 8012d28:	f000 8094 	beq.w	8012e54 <_dtoa_r+0x49c>
 8012d2c:	f1ba 0f00 	cmp.w	sl, #0
 8012d30:	dd2f      	ble.n	8012d92 <_dtoa_r+0x3da>
 8012d32:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012d36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d3e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012d42:	3201      	adds	r2, #1
 8012d44:	4650      	mov	r0, sl
 8012d46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d4a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012d4e:	ee07 2a90 	vmov	s15, r2
 8012d52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012d56:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012d5a:	ee15 4a90 	vmov	r4, s11
 8012d5e:	ec52 1b15 	vmov	r1, r2, d5
 8012d62:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d177      	bne.n	8012e5a <_dtoa_r+0x4a2>
 8012d6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012d6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012d72:	ec42 1b17 	vmov	d7, r1, r2
 8012d76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7e:	f300 8263 	bgt.w	8013248 <_dtoa_r+0x890>
 8012d82:	eeb1 7b47 	vneg.f64	d7, d7
 8012d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8e:	f100 8258 	bmi.w	8013242 <_dtoa_r+0x88a>
 8012d92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d98:	2a00      	cmp	r2, #0
 8012d9a:	f2c0 811d 	blt.w	8012fd8 <_dtoa_r+0x620>
 8012d9e:	f1bb 0f0e 	cmp.w	fp, #14
 8012da2:	f300 8119 	bgt.w	8012fd8 <_dtoa_r+0x620>
 8012da6:	4b8a      	ldr	r3, [pc, #552]	; (8012fd0 <_dtoa_r+0x618>)
 8012da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012dac:	ed93 6b00 	vldr	d6, [r3]
 8012db0:	9b08      	ldr	r3, [sp, #32]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f280 80b7 	bge.w	8012f26 <_dtoa_r+0x56e>
 8012db8:	f1b9 0f00 	cmp.w	r9, #0
 8012dbc:	f300 80b3 	bgt.w	8012f26 <_dtoa_r+0x56e>
 8012dc0:	f040 823f 	bne.w	8013242 <_dtoa_r+0x88a>
 8012dc4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012dc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd8:	464c      	mov	r4, r9
 8012dda:	464f      	mov	r7, r9
 8012ddc:	f280 8215 	bge.w	801320a <_dtoa_r+0x852>
 8012de0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012de4:	2331      	movs	r3, #49	; 0x31
 8012de6:	f808 3b01 	strb.w	r3, [r8], #1
 8012dea:	f10b 0b01 	add.w	fp, fp, #1
 8012dee:	e211      	b.n	8013214 <_dtoa_r+0x85c>
 8012df0:	2202      	movs	r2, #2
 8012df2:	e780      	b.n	8012cf6 <_dtoa_r+0x33e>
 8012df4:	07cc      	lsls	r4, r1, #31
 8012df6:	d504      	bpl.n	8012e02 <_dtoa_r+0x44a>
 8012df8:	ed90 6b00 	vldr	d6, [r0]
 8012dfc:	3201      	adds	r2, #1
 8012dfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e02:	1049      	asrs	r1, r1, #1
 8012e04:	3008      	adds	r0, #8
 8012e06:	e777      	b.n	8012cf8 <_dtoa_r+0x340>
 8012e08:	d022      	beq.n	8012e50 <_dtoa_r+0x498>
 8012e0a:	f1cb 0100 	rsb	r1, fp, #0
 8012e0e:	4a70      	ldr	r2, [pc, #448]	; (8012fd0 <_dtoa_r+0x618>)
 8012e10:	f001 000f 	and.w	r0, r1, #15
 8012e14:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012e18:	ed92 7b00 	vldr	d7, [r2]
 8012e1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012e20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e24:	486b      	ldr	r0, [pc, #428]	; (8012fd4 <_dtoa_r+0x61c>)
 8012e26:	1109      	asrs	r1, r1, #4
 8012e28:	2400      	movs	r4, #0
 8012e2a:	2202      	movs	r2, #2
 8012e2c:	b929      	cbnz	r1, 8012e3a <_dtoa_r+0x482>
 8012e2e:	2c00      	cmp	r4, #0
 8012e30:	f43f af6a 	beq.w	8012d08 <_dtoa_r+0x350>
 8012e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e38:	e766      	b.n	8012d08 <_dtoa_r+0x350>
 8012e3a:	07cf      	lsls	r7, r1, #31
 8012e3c:	d505      	bpl.n	8012e4a <_dtoa_r+0x492>
 8012e3e:	ed90 6b00 	vldr	d6, [r0]
 8012e42:	3201      	adds	r2, #1
 8012e44:	2401      	movs	r4, #1
 8012e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e4a:	1049      	asrs	r1, r1, #1
 8012e4c:	3008      	adds	r0, #8
 8012e4e:	e7ed      	b.n	8012e2c <_dtoa_r+0x474>
 8012e50:	2202      	movs	r2, #2
 8012e52:	e759      	b.n	8012d08 <_dtoa_r+0x350>
 8012e54:	465f      	mov	r7, fp
 8012e56:	4648      	mov	r0, r9
 8012e58:	e775      	b.n	8012d46 <_dtoa_r+0x38e>
 8012e5a:	ec42 1b17 	vmov	d7, r1, r2
 8012e5e:	4a5c      	ldr	r2, [pc, #368]	; (8012fd0 <_dtoa_r+0x618>)
 8012e60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012e64:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012e68:	9a01      	ldr	r2, [sp, #4]
 8012e6a:	1814      	adds	r4, r2, r0
 8012e6c:	9a07      	ldr	r2, [sp, #28]
 8012e6e:	b352      	cbz	r2, 8012ec6 <_dtoa_r+0x50e>
 8012e70:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012e74:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012e78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e7c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012e80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012e88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e8c:	ee14 2a90 	vmov	r2, s9
 8012e90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e94:	3230      	adds	r2, #48	; 0x30
 8012e96:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea2:	f808 2b01 	strb.w	r2, [r8], #1
 8012ea6:	d439      	bmi.n	8012f1c <_dtoa_r+0x564>
 8012ea8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012eac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb4:	d472      	bmi.n	8012f9c <_dtoa_r+0x5e4>
 8012eb6:	45a0      	cmp	r8, r4
 8012eb8:	f43f af6b 	beq.w	8012d92 <_dtoa_r+0x3da>
 8012ebc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012ec0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012ec4:	e7e0      	b.n	8012e88 <_dtoa_r+0x4d0>
 8012ec6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012eca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012ece:	4621      	mov	r1, r4
 8012ed0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ed4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ed8:	ee14 2a90 	vmov	r2, s9
 8012edc:	3230      	adds	r2, #48	; 0x30
 8012ede:	f808 2b01 	strb.w	r2, [r8], #1
 8012ee2:	45a0      	cmp	r8, r4
 8012ee4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ee8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012eec:	d118      	bne.n	8012f20 <_dtoa_r+0x568>
 8012eee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012ef2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012ef6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efe:	dc4d      	bgt.n	8012f9c <_dtoa_r+0x5e4>
 8012f00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012f04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0c:	f57f af41 	bpl.w	8012d92 <_dtoa_r+0x3da>
 8012f10:	4688      	mov	r8, r1
 8012f12:	3901      	subs	r1, #1
 8012f14:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012f18:	2b30      	cmp	r3, #48	; 0x30
 8012f1a:	d0f9      	beq.n	8012f10 <_dtoa_r+0x558>
 8012f1c:	46bb      	mov	fp, r7
 8012f1e:	e02a      	b.n	8012f76 <_dtoa_r+0x5be>
 8012f20:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012f24:	e7d6      	b.n	8012ed4 <_dtoa_r+0x51c>
 8012f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012f2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012f32:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012f36:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012f3a:	ee15 3a10 	vmov	r3, s10
 8012f3e:	3330      	adds	r3, #48	; 0x30
 8012f40:	f808 3b01 	strb.w	r3, [r8], #1
 8012f44:	9b01      	ldr	r3, [sp, #4]
 8012f46:	eba8 0303 	sub.w	r3, r8, r3
 8012f4a:	4599      	cmp	r9, r3
 8012f4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012f50:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012f54:	d133      	bne.n	8012fbe <_dtoa_r+0x606>
 8012f56:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012f5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f62:	dc1a      	bgt.n	8012f9a <_dtoa_r+0x5e2>
 8012f64:	eeb4 7b46 	vcmp.f64	d7, d6
 8012f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6c:	d103      	bne.n	8012f76 <_dtoa_r+0x5be>
 8012f6e:	ee15 3a10 	vmov	r3, s10
 8012f72:	07d9      	lsls	r1, r3, #31
 8012f74:	d411      	bmi.n	8012f9a <_dtoa_r+0x5e2>
 8012f76:	4629      	mov	r1, r5
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f000 fc1d 	bl	80137b8 <_Bfree>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f82:	f888 3000 	strb.w	r3, [r8]
 8012f86:	f10b 0301 	add.w	r3, fp, #1
 8012f8a:	6013      	str	r3, [r2, #0]
 8012f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f43f ad61 	beq.w	8012a56 <_dtoa_r+0x9e>
 8012f94:	f8c3 8000 	str.w	r8, [r3]
 8012f98:	e55d      	b.n	8012a56 <_dtoa_r+0x9e>
 8012f9a:	465f      	mov	r7, fp
 8012f9c:	4643      	mov	r3, r8
 8012f9e:	4698      	mov	r8, r3
 8012fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fa4:	2a39      	cmp	r2, #57	; 0x39
 8012fa6:	d106      	bne.n	8012fb6 <_dtoa_r+0x5fe>
 8012fa8:	9a01      	ldr	r2, [sp, #4]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d1f7      	bne.n	8012f9e <_dtoa_r+0x5e6>
 8012fae:	9901      	ldr	r1, [sp, #4]
 8012fb0:	2230      	movs	r2, #48	; 0x30
 8012fb2:	3701      	adds	r7, #1
 8012fb4:	700a      	strb	r2, [r1, #0]
 8012fb6:	781a      	ldrb	r2, [r3, #0]
 8012fb8:	3201      	adds	r2, #1
 8012fba:	701a      	strb	r2, [r3, #0]
 8012fbc:	e7ae      	b.n	8012f1c <_dtoa_r+0x564>
 8012fbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012fc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fca:	d1b2      	bne.n	8012f32 <_dtoa_r+0x57a>
 8012fcc:	e7d3      	b.n	8012f76 <_dtoa_r+0x5be>
 8012fce:	bf00      	nop
 8012fd0:	08014ad0 	.word	0x08014ad0
 8012fd4:	08014aa8 	.word	0x08014aa8
 8012fd8:	9907      	ldr	r1, [sp, #28]
 8012fda:	2900      	cmp	r1, #0
 8012fdc:	f000 80d0 	beq.w	8013180 <_dtoa_r+0x7c8>
 8012fe0:	9906      	ldr	r1, [sp, #24]
 8012fe2:	2901      	cmp	r1, #1
 8012fe4:	f300 80b4 	bgt.w	8013150 <_dtoa_r+0x798>
 8012fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012fea:	2900      	cmp	r1, #0
 8012fec:	f000 80ac 	beq.w	8013148 <_dtoa_r+0x790>
 8012ff0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012ff4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012ff8:	461c      	mov	r4, r3
 8012ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8012ffc:	9b04      	ldr	r3, [sp, #16]
 8012ffe:	4413      	add	r3, r2
 8013000:	9304      	str	r3, [sp, #16]
 8013002:	9b05      	ldr	r3, [sp, #20]
 8013004:	2101      	movs	r1, #1
 8013006:	4413      	add	r3, r2
 8013008:	4630      	mov	r0, r6
 801300a:	9305      	str	r3, [sp, #20]
 801300c:	f000 fc8c 	bl	8013928 <__i2b>
 8013010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013012:	4607      	mov	r7, r0
 8013014:	f1b8 0f00 	cmp.w	r8, #0
 8013018:	dd0d      	ble.n	8013036 <_dtoa_r+0x67e>
 801301a:	9a05      	ldr	r2, [sp, #20]
 801301c:	2a00      	cmp	r2, #0
 801301e:	dd0a      	ble.n	8013036 <_dtoa_r+0x67e>
 8013020:	4542      	cmp	r2, r8
 8013022:	9904      	ldr	r1, [sp, #16]
 8013024:	bfa8      	it	ge
 8013026:	4642      	movge	r2, r8
 8013028:	1a89      	subs	r1, r1, r2
 801302a:	9104      	str	r1, [sp, #16]
 801302c:	9905      	ldr	r1, [sp, #20]
 801302e:	eba8 0802 	sub.w	r8, r8, r2
 8013032:	1a8a      	subs	r2, r1, r2
 8013034:	9205      	str	r2, [sp, #20]
 8013036:	b303      	cbz	r3, 801307a <_dtoa_r+0x6c2>
 8013038:	9a07      	ldr	r2, [sp, #28]
 801303a:	2a00      	cmp	r2, #0
 801303c:	f000 80a5 	beq.w	801318a <_dtoa_r+0x7d2>
 8013040:	2c00      	cmp	r4, #0
 8013042:	dd13      	ble.n	801306c <_dtoa_r+0x6b4>
 8013044:	4639      	mov	r1, r7
 8013046:	4622      	mov	r2, r4
 8013048:	4630      	mov	r0, r6
 801304a:	930d      	str	r3, [sp, #52]	; 0x34
 801304c:	f000 fd2c 	bl	8013aa8 <__pow5mult>
 8013050:	462a      	mov	r2, r5
 8013052:	4601      	mov	r1, r0
 8013054:	4607      	mov	r7, r0
 8013056:	4630      	mov	r0, r6
 8013058:	f000 fc7c 	bl	8013954 <__multiply>
 801305c:	4629      	mov	r1, r5
 801305e:	900a      	str	r0, [sp, #40]	; 0x28
 8013060:	4630      	mov	r0, r6
 8013062:	f000 fba9 	bl	80137b8 <_Bfree>
 8013066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801306a:	4615      	mov	r5, r2
 801306c:	1b1a      	subs	r2, r3, r4
 801306e:	d004      	beq.n	801307a <_dtoa_r+0x6c2>
 8013070:	4629      	mov	r1, r5
 8013072:	4630      	mov	r0, r6
 8013074:	f000 fd18 	bl	8013aa8 <__pow5mult>
 8013078:	4605      	mov	r5, r0
 801307a:	2101      	movs	r1, #1
 801307c:	4630      	mov	r0, r6
 801307e:	f000 fc53 	bl	8013928 <__i2b>
 8013082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013084:	2b00      	cmp	r3, #0
 8013086:	4604      	mov	r4, r0
 8013088:	f340 8081 	ble.w	801318e <_dtoa_r+0x7d6>
 801308c:	461a      	mov	r2, r3
 801308e:	4601      	mov	r1, r0
 8013090:	4630      	mov	r0, r6
 8013092:	f000 fd09 	bl	8013aa8 <__pow5mult>
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	2b01      	cmp	r3, #1
 801309a:	4604      	mov	r4, r0
 801309c:	dd7a      	ble.n	8013194 <_dtoa_r+0x7dc>
 801309e:	2300      	movs	r3, #0
 80130a0:	930a      	str	r3, [sp, #40]	; 0x28
 80130a2:	6922      	ldr	r2, [r4, #16]
 80130a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80130a8:	6910      	ldr	r0, [r2, #16]
 80130aa:	f000 fbed 	bl	8013888 <__hi0bits>
 80130ae:	f1c0 0020 	rsb	r0, r0, #32
 80130b2:	9b05      	ldr	r3, [sp, #20]
 80130b4:	4418      	add	r0, r3
 80130b6:	f010 001f 	ands.w	r0, r0, #31
 80130ba:	f000 808c 	beq.w	80131d6 <_dtoa_r+0x81e>
 80130be:	f1c0 0220 	rsb	r2, r0, #32
 80130c2:	2a04      	cmp	r2, #4
 80130c4:	f340 8085 	ble.w	80131d2 <_dtoa_r+0x81a>
 80130c8:	f1c0 001c 	rsb	r0, r0, #28
 80130cc:	9b04      	ldr	r3, [sp, #16]
 80130ce:	4403      	add	r3, r0
 80130d0:	9304      	str	r3, [sp, #16]
 80130d2:	9b05      	ldr	r3, [sp, #20]
 80130d4:	4403      	add	r3, r0
 80130d6:	4480      	add	r8, r0
 80130d8:	9305      	str	r3, [sp, #20]
 80130da:	9b04      	ldr	r3, [sp, #16]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	dd05      	ble.n	80130ec <_dtoa_r+0x734>
 80130e0:	4629      	mov	r1, r5
 80130e2:	461a      	mov	r2, r3
 80130e4:	4630      	mov	r0, r6
 80130e6:	f000 fd39 	bl	8013b5c <__lshift>
 80130ea:	4605      	mov	r5, r0
 80130ec:	9b05      	ldr	r3, [sp, #20]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	dd05      	ble.n	80130fe <_dtoa_r+0x746>
 80130f2:	4621      	mov	r1, r4
 80130f4:	461a      	mov	r2, r3
 80130f6:	4630      	mov	r0, r6
 80130f8:	f000 fd30 	bl	8013b5c <__lshift>
 80130fc:	4604      	mov	r4, r0
 80130fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013100:	2b00      	cmp	r3, #0
 8013102:	d06a      	beq.n	80131da <_dtoa_r+0x822>
 8013104:	4621      	mov	r1, r4
 8013106:	4628      	mov	r0, r5
 8013108:	f000 fd98 	bl	8013c3c <__mcmp>
 801310c:	2800      	cmp	r0, #0
 801310e:	da64      	bge.n	80131da <_dtoa_r+0x822>
 8013110:	2300      	movs	r3, #0
 8013112:	4629      	mov	r1, r5
 8013114:	220a      	movs	r2, #10
 8013116:	4630      	mov	r0, r6
 8013118:	f000 fb70 	bl	80137fc <__multadd>
 801311c:	9b07      	ldr	r3, [sp, #28]
 801311e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013122:	4605      	mov	r5, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 8191 	beq.w	801344c <_dtoa_r+0xa94>
 801312a:	4639      	mov	r1, r7
 801312c:	2300      	movs	r3, #0
 801312e:	220a      	movs	r2, #10
 8013130:	4630      	mov	r0, r6
 8013132:	f000 fb63 	bl	80137fc <__multadd>
 8013136:	f1ba 0f00 	cmp.w	sl, #0
 801313a:	4607      	mov	r7, r0
 801313c:	f300 808d 	bgt.w	801325a <_dtoa_r+0x8a2>
 8013140:	9b06      	ldr	r3, [sp, #24]
 8013142:	2b02      	cmp	r3, #2
 8013144:	dc50      	bgt.n	80131e8 <_dtoa_r+0x830>
 8013146:	e088      	b.n	801325a <_dtoa_r+0x8a2>
 8013148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801314a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801314e:	e751      	b.n	8012ff4 <_dtoa_r+0x63c>
 8013150:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013154:	42a3      	cmp	r3, r4
 8013156:	bfbf      	itttt	lt
 8013158:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801315a:	1ae3      	sublt	r3, r4, r3
 801315c:	18d2      	addlt	r2, r2, r3
 801315e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013160:	bfb6      	itet	lt
 8013162:	4623      	movlt	r3, r4
 8013164:	1b1c      	subge	r4, r3, r4
 8013166:	2400      	movlt	r4, #0
 8013168:	f1b9 0f00 	cmp.w	r9, #0
 801316c:	bfb5      	itete	lt
 801316e:	9a04      	ldrlt	r2, [sp, #16]
 8013170:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013174:	eba2 0809 	sublt.w	r8, r2, r9
 8013178:	464a      	movge	r2, r9
 801317a:	bfb8      	it	lt
 801317c:	2200      	movlt	r2, #0
 801317e:	e73c      	b.n	8012ffa <_dtoa_r+0x642>
 8013180:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013184:	9f07      	ldr	r7, [sp, #28]
 8013186:	461c      	mov	r4, r3
 8013188:	e744      	b.n	8013014 <_dtoa_r+0x65c>
 801318a:	461a      	mov	r2, r3
 801318c:	e770      	b.n	8013070 <_dtoa_r+0x6b8>
 801318e:	9b06      	ldr	r3, [sp, #24]
 8013190:	2b01      	cmp	r3, #1
 8013192:	dc18      	bgt.n	80131c6 <_dtoa_r+0x80e>
 8013194:	9b02      	ldr	r3, [sp, #8]
 8013196:	b9b3      	cbnz	r3, 80131c6 <_dtoa_r+0x80e>
 8013198:	9b03      	ldr	r3, [sp, #12]
 801319a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801319e:	b9a2      	cbnz	r2, 80131ca <_dtoa_r+0x812>
 80131a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80131a4:	0d12      	lsrs	r2, r2, #20
 80131a6:	0512      	lsls	r2, r2, #20
 80131a8:	b18a      	cbz	r2, 80131ce <_dtoa_r+0x816>
 80131aa:	9b04      	ldr	r3, [sp, #16]
 80131ac:	3301      	adds	r3, #1
 80131ae:	9304      	str	r3, [sp, #16]
 80131b0:	9b05      	ldr	r3, [sp, #20]
 80131b2:	3301      	adds	r3, #1
 80131b4:	9305      	str	r3, [sp, #20]
 80131b6:	2301      	movs	r3, #1
 80131b8:	930a      	str	r3, [sp, #40]	; 0x28
 80131ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f47f af70 	bne.w	80130a2 <_dtoa_r+0x6ea>
 80131c2:	2001      	movs	r0, #1
 80131c4:	e775      	b.n	80130b2 <_dtoa_r+0x6fa>
 80131c6:	2300      	movs	r3, #0
 80131c8:	e7f6      	b.n	80131b8 <_dtoa_r+0x800>
 80131ca:	9b02      	ldr	r3, [sp, #8]
 80131cc:	e7f4      	b.n	80131b8 <_dtoa_r+0x800>
 80131ce:	920a      	str	r2, [sp, #40]	; 0x28
 80131d0:	e7f3      	b.n	80131ba <_dtoa_r+0x802>
 80131d2:	d082      	beq.n	80130da <_dtoa_r+0x722>
 80131d4:	4610      	mov	r0, r2
 80131d6:	301c      	adds	r0, #28
 80131d8:	e778      	b.n	80130cc <_dtoa_r+0x714>
 80131da:	f1b9 0f00 	cmp.w	r9, #0
 80131de:	dc37      	bgt.n	8013250 <_dtoa_r+0x898>
 80131e0:	9b06      	ldr	r3, [sp, #24]
 80131e2:	2b02      	cmp	r3, #2
 80131e4:	dd34      	ble.n	8013250 <_dtoa_r+0x898>
 80131e6:	46ca      	mov	sl, r9
 80131e8:	f1ba 0f00 	cmp.w	sl, #0
 80131ec:	d10d      	bne.n	801320a <_dtoa_r+0x852>
 80131ee:	4621      	mov	r1, r4
 80131f0:	4653      	mov	r3, sl
 80131f2:	2205      	movs	r2, #5
 80131f4:	4630      	mov	r0, r6
 80131f6:	f000 fb01 	bl	80137fc <__multadd>
 80131fa:	4601      	mov	r1, r0
 80131fc:	4604      	mov	r4, r0
 80131fe:	4628      	mov	r0, r5
 8013200:	f000 fd1c 	bl	8013c3c <__mcmp>
 8013204:	2800      	cmp	r0, #0
 8013206:	f73f adeb 	bgt.w	8012de0 <_dtoa_r+0x428>
 801320a:	9b08      	ldr	r3, [sp, #32]
 801320c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013210:	ea6f 0b03 	mvn.w	fp, r3
 8013214:	f04f 0900 	mov.w	r9, #0
 8013218:	4621      	mov	r1, r4
 801321a:	4630      	mov	r0, r6
 801321c:	f000 facc 	bl	80137b8 <_Bfree>
 8013220:	2f00      	cmp	r7, #0
 8013222:	f43f aea8 	beq.w	8012f76 <_dtoa_r+0x5be>
 8013226:	f1b9 0f00 	cmp.w	r9, #0
 801322a:	d005      	beq.n	8013238 <_dtoa_r+0x880>
 801322c:	45b9      	cmp	r9, r7
 801322e:	d003      	beq.n	8013238 <_dtoa_r+0x880>
 8013230:	4649      	mov	r1, r9
 8013232:	4630      	mov	r0, r6
 8013234:	f000 fac0 	bl	80137b8 <_Bfree>
 8013238:	4639      	mov	r1, r7
 801323a:	4630      	mov	r0, r6
 801323c:	f000 fabc 	bl	80137b8 <_Bfree>
 8013240:	e699      	b.n	8012f76 <_dtoa_r+0x5be>
 8013242:	2400      	movs	r4, #0
 8013244:	4627      	mov	r7, r4
 8013246:	e7e0      	b.n	801320a <_dtoa_r+0x852>
 8013248:	46bb      	mov	fp, r7
 801324a:	4604      	mov	r4, r0
 801324c:	4607      	mov	r7, r0
 801324e:	e5c7      	b.n	8012de0 <_dtoa_r+0x428>
 8013250:	9b07      	ldr	r3, [sp, #28]
 8013252:	46ca      	mov	sl, r9
 8013254:	2b00      	cmp	r3, #0
 8013256:	f000 8100 	beq.w	801345a <_dtoa_r+0xaa2>
 801325a:	f1b8 0f00 	cmp.w	r8, #0
 801325e:	dd05      	ble.n	801326c <_dtoa_r+0x8b4>
 8013260:	4639      	mov	r1, r7
 8013262:	4642      	mov	r2, r8
 8013264:	4630      	mov	r0, r6
 8013266:	f000 fc79 	bl	8013b5c <__lshift>
 801326a:	4607      	mov	r7, r0
 801326c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801326e:	2b00      	cmp	r3, #0
 8013270:	d05d      	beq.n	801332e <_dtoa_r+0x976>
 8013272:	6879      	ldr	r1, [r7, #4]
 8013274:	4630      	mov	r0, r6
 8013276:	f000 fa5f 	bl	8013738 <_Balloc>
 801327a:	4680      	mov	r8, r0
 801327c:	b928      	cbnz	r0, 801328a <_dtoa_r+0x8d2>
 801327e:	4b82      	ldr	r3, [pc, #520]	; (8013488 <_dtoa_r+0xad0>)
 8013280:	4602      	mov	r2, r0
 8013282:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013286:	f7ff bbaf 	b.w	80129e8 <_dtoa_r+0x30>
 801328a:	693a      	ldr	r2, [r7, #16]
 801328c:	3202      	adds	r2, #2
 801328e:	0092      	lsls	r2, r2, #2
 8013290:	f107 010c 	add.w	r1, r7, #12
 8013294:	300c      	adds	r0, #12
 8013296:	f7fe fc54 	bl	8011b42 <memcpy>
 801329a:	2201      	movs	r2, #1
 801329c:	4641      	mov	r1, r8
 801329e:	4630      	mov	r0, r6
 80132a0:	f000 fc5c 	bl	8013b5c <__lshift>
 80132a4:	9b01      	ldr	r3, [sp, #4]
 80132a6:	3301      	adds	r3, #1
 80132a8:	9304      	str	r3, [sp, #16]
 80132aa:	9b01      	ldr	r3, [sp, #4]
 80132ac:	4453      	add	r3, sl
 80132ae:	9308      	str	r3, [sp, #32]
 80132b0:	9b02      	ldr	r3, [sp, #8]
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	46b9      	mov	r9, r7
 80132b8:	9307      	str	r3, [sp, #28]
 80132ba:	4607      	mov	r7, r0
 80132bc:	9b04      	ldr	r3, [sp, #16]
 80132be:	4621      	mov	r1, r4
 80132c0:	3b01      	subs	r3, #1
 80132c2:	4628      	mov	r0, r5
 80132c4:	9302      	str	r3, [sp, #8]
 80132c6:	f7ff fae9 	bl	801289c <quorem>
 80132ca:	4603      	mov	r3, r0
 80132cc:	3330      	adds	r3, #48	; 0x30
 80132ce:	9005      	str	r0, [sp, #20]
 80132d0:	4649      	mov	r1, r9
 80132d2:	4628      	mov	r0, r5
 80132d4:	9309      	str	r3, [sp, #36]	; 0x24
 80132d6:	f000 fcb1 	bl	8013c3c <__mcmp>
 80132da:	463a      	mov	r2, r7
 80132dc:	4682      	mov	sl, r0
 80132de:	4621      	mov	r1, r4
 80132e0:	4630      	mov	r0, r6
 80132e2:	f000 fcc7 	bl	8013c74 <__mdiff>
 80132e6:	68c2      	ldr	r2, [r0, #12]
 80132e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ea:	4680      	mov	r8, r0
 80132ec:	bb0a      	cbnz	r2, 8013332 <_dtoa_r+0x97a>
 80132ee:	4601      	mov	r1, r0
 80132f0:	4628      	mov	r0, r5
 80132f2:	f000 fca3 	bl	8013c3c <__mcmp>
 80132f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f8:	4602      	mov	r2, r0
 80132fa:	4641      	mov	r1, r8
 80132fc:	4630      	mov	r0, r6
 80132fe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013302:	f000 fa59 	bl	80137b8 <_Bfree>
 8013306:	9b06      	ldr	r3, [sp, #24]
 8013308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801330a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801330e:	ea43 0102 	orr.w	r1, r3, r2
 8013312:	9b07      	ldr	r3, [sp, #28]
 8013314:	430b      	orrs	r3, r1
 8013316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013318:	d10d      	bne.n	8013336 <_dtoa_r+0x97e>
 801331a:	2b39      	cmp	r3, #57	; 0x39
 801331c:	d029      	beq.n	8013372 <_dtoa_r+0x9ba>
 801331e:	f1ba 0f00 	cmp.w	sl, #0
 8013322:	dd01      	ble.n	8013328 <_dtoa_r+0x970>
 8013324:	9b05      	ldr	r3, [sp, #20]
 8013326:	3331      	adds	r3, #49	; 0x31
 8013328:	9a02      	ldr	r2, [sp, #8]
 801332a:	7013      	strb	r3, [r2, #0]
 801332c:	e774      	b.n	8013218 <_dtoa_r+0x860>
 801332e:	4638      	mov	r0, r7
 8013330:	e7b8      	b.n	80132a4 <_dtoa_r+0x8ec>
 8013332:	2201      	movs	r2, #1
 8013334:	e7e1      	b.n	80132fa <_dtoa_r+0x942>
 8013336:	f1ba 0f00 	cmp.w	sl, #0
 801333a:	db06      	blt.n	801334a <_dtoa_r+0x992>
 801333c:	9906      	ldr	r1, [sp, #24]
 801333e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013342:	9907      	ldr	r1, [sp, #28]
 8013344:	ea5a 0101 	orrs.w	r1, sl, r1
 8013348:	d120      	bne.n	801338c <_dtoa_r+0x9d4>
 801334a:	2a00      	cmp	r2, #0
 801334c:	ddec      	ble.n	8013328 <_dtoa_r+0x970>
 801334e:	4629      	mov	r1, r5
 8013350:	2201      	movs	r2, #1
 8013352:	4630      	mov	r0, r6
 8013354:	9304      	str	r3, [sp, #16]
 8013356:	f000 fc01 	bl	8013b5c <__lshift>
 801335a:	4621      	mov	r1, r4
 801335c:	4605      	mov	r5, r0
 801335e:	f000 fc6d 	bl	8013c3c <__mcmp>
 8013362:	2800      	cmp	r0, #0
 8013364:	9b04      	ldr	r3, [sp, #16]
 8013366:	dc02      	bgt.n	801336e <_dtoa_r+0x9b6>
 8013368:	d1de      	bne.n	8013328 <_dtoa_r+0x970>
 801336a:	07da      	lsls	r2, r3, #31
 801336c:	d5dc      	bpl.n	8013328 <_dtoa_r+0x970>
 801336e:	2b39      	cmp	r3, #57	; 0x39
 8013370:	d1d8      	bne.n	8013324 <_dtoa_r+0x96c>
 8013372:	9a02      	ldr	r2, [sp, #8]
 8013374:	2339      	movs	r3, #57	; 0x39
 8013376:	7013      	strb	r3, [r2, #0]
 8013378:	4643      	mov	r3, r8
 801337a:	4698      	mov	r8, r3
 801337c:	3b01      	subs	r3, #1
 801337e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013382:	2a39      	cmp	r2, #57	; 0x39
 8013384:	d051      	beq.n	801342a <_dtoa_r+0xa72>
 8013386:	3201      	adds	r2, #1
 8013388:	701a      	strb	r2, [r3, #0]
 801338a:	e745      	b.n	8013218 <_dtoa_r+0x860>
 801338c:	2a00      	cmp	r2, #0
 801338e:	dd03      	ble.n	8013398 <_dtoa_r+0x9e0>
 8013390:	2b39      	cmp	r3, #57	; 0x39
 8013392:	d0ee      	beq.n	8013372 <_dtoa_r+0x9ba>
 8013394:	3301      	adds	r3, #1
 8013396:	e7c7      	b.n	8013328 <_dtoa_r+0x970>
 8013398:	9a04      	ldr	r2, [sp, #16]
 801339a:	9908      	ldr	r1, [sp, #32]
 801339c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80133a0:	428a      	cmp	r2, r1
 80133a2:	d02b      	beq.n	80133fc <_dtoa_r+0xa44>
 80133a4:	4629      	mov	r1, r5
 80133a6:	2300      	movs	r3, #0
 80133a8:	220a      	movs	r2, #10
 80133aa:	4630      	mov	r0, r6
 80133ac:	f000 fa26 	bl	80137fc <__multadd>
 80133b0:	45b9      	cmp	r9, r7
 80133b2:	4605      	mov	r5, r0
 80133b4:	f04f 0300 	mov.w	r3, #0
 80133b8:	f04f 020a 	mov.w	r2, #10
 80133bc:	4649      	mov	r1, r9
 80133be:	4630      	mov	r0, r6
 80133c0:	d107      	bne.n	80133d2 <_dtoa_r+0xa1a>
 80133c2:	f000 fa1b 	bl	80137fc <__multadd>
 80133c6:	4681      	mov	r9, r0
 80133c8:	4607      	mov	r7, r0
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	3301      	adds	r3, #1
 80133ce:	9304      	str	r3, [sp, #16]
 80133d0:	e774      	b.n	80132bc <_dtoa_r+0x904>
 80133d2:	f000 fa13 	bl	80137fc <__multadd>
 80133d6:	4639      	mov	r1, r7
 80133d8:	4681      	mov	r9, r0
 80133da:	2300      	movs	r3, #0
 80133dc:	220a      	movs	r2, #10
 80133de:	4630      	mov	r0, r6
 80133e0:	f000 fa0c 	bl	80137fc <__multadd>
 80133e4:	4607      	mov	r7, r0
 80133e6:	e7f0      	b.n	80133ca <_dtoa_r+0xa12>
 80133e8:	f1ba 0f00 	cmp.w	sl, #0
 80133ec:	9a01      	ldr	r2, [sp, #4]
 80133ee:	bfcc      	ite	gt
 80133f0:	46d0      	movgt	r8, sl
 80133f2:	f04f 0801 	movle.w	r8, #1
 80133f6:	4490      	add	r8, r2
 80133f8:	f04f 0900 	mov.w	r9, #0
 80133fc:	4629      	mov	r1, r5
 80133fe:	2201      	movs	r2, #1
 8013400:	4630      	mov	r0, r6
 8013402:	9302      	str	r3, [sp, #8]
 8013404:	f000 fbaa 	bl	8013b5c <__lshift>
 8013408:	4621      	mov	r1, r4
 801340a:	4605      	mov	r5, r0
 801340c:	f000 fc16 	bl	8013c3c <__mcmp>
 8013410:	2800      	cmp	r0, #0
 8013412:	dcb1      	bgt.n	8013378 <_dtoa_r+0x9c0>
 8013414:	d102      	bne.n	801341c <_dtoa_r+0xa64>
 8013416:	9b02      	ldr	r3, [sp, #8]
 8013418:	07db      	lsls	r3, r3, #31
 801341a:	d4ad      	bmi.n	8013378 <_dtoa_r+0x9c0>
 801341c:	4643      	mov	r3, r8
 801341e:	4698      	mov	r8, r3
 8013420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013424:	2a30      	cmp	r2, #48	; 0x30
 8013426:	d0fa      	beq.n	801341e <_dtoa_r+0xa66>
 8013428:	e6f6      	b.n	8013218 <_dtoa_r+0x860>
 801342a:	9a01      	ldr	r2, [sp, #4]
 801342c:	429a      	cmp	r2, r3
 801342e:	d1a4      	bne.n	801337a <_dtoa_r+0x9c2>
 8013430:	f10b 0b01 	add.w	fp, fp, #1
 8013434:	2331      	movs	r3, #49	; 0x31
 8013436:	e778      	b.n	801332a <_dtoa_r+0x972>
 8013438:	4b14      	ldr	r3, [pc, #80]	; (801348c <_dtoa_r+0xad4>)
 801343a:	f7ff bb27 	b.w	8012a8c <_dtoa_r+0xd4>
 801343e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013440:	2b00      	cmp	r3, #0
 8013442:	f47f ab03 	bne.w	8012a4c <_dtoa_r+0x94>
 8013446:	4b12      	ldr	r3, [pc, #72]	; (8013490 <_dtoa_r+0xad8>)
 8013448:	f7ff bb20 	b.w	8012a8c <_dtoa_r+0xd4>
 801344c:	f1ba 0f00 	cmp.w	sl, #0
 8013450:	dc03      	bgt.n	801345a <_dtoa_r+0xaa2>
 8013452:	9b06      	ldr	r3, [sp, #24]
 8013454:	2b02      	cmp	r3, #2
 8013456:	f73f aec7 	bgt.w	80131e8 <_dtoa_r+0x830>
 801345a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801345e:	4621      	mov	r1, r4
 8013460:	4628      	mov	r0, r5
 8013462:	f7ff fa1b 	bl	801289c <quorem>
 8013466:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801346a:	f808 3b01 	strb.w	r3, [r8], #1
 801346e:	9a01      	ldr	r2, [sp, #4]
 8013470:	eba8 0202 	sub.w	r2, r8, r2
 8013474:	4592      	cmp	sl, r2
 8013476:	ddb7      	ble.n	80133e8 <_dtoa_r+0xa30>
 8013478:	4629      	mov	r1, r5
 801347a:	2300      	movs	r3, #0
 801347c:	220a      	movs	r2, #10
 801347e:	4630      	mov	r0, r6
 8013480:	f000 f9bc 	bl	80137fc <__multadd>
 8013484:	4605      	mov	r5, r0
 8013486:	e7ea      	b.n	801345e <_dtoa_r+0xaa6>
 8013488:	08014a3b 	.word	0x08014a3b
 801348c:	08014998 	.word	0x08014998
 8013490:	080149bc 	.word	0x080149bc

08013494 <__sflush_r>:
 8013494:	898a      	ldrh	r2, [r1, #12]
 8013496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801349a:	4605      	mov	r5, r0
 801349c:	0710      	lsls	r0, r2, #28
 801349e:	460c      	mov	r4, r1
 80134a0:	d458      	bmi.n	8013554 <__sflush_r+0xc0>
 80134a2:	684b      	ldr	r3, [r1, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	dc05      	bgt.n	80134b4 <__sflush_r+0x20>
 80134a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	dc02      	bgt.n	80134b4 <__sflush_r+0x20>
 80134ae:	2000      	movs	r0, #0
 80134b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134b6:	2e00      	cmp	r6, #0
 80134b8:	d0f9      	beq.n	80134ae <__sflush_r+0x1a>
 80134ba:	2300      	movs	r3, #0
 80134bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80134c0:	682f      	ldr	r7, [r5, #0]
 80134c2:	602b      	str	r3, [r5, #0]
 80134c4:	d032      	beq.n	801352c <__sflush_r+0x98>
 80134c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	075a      	lsls	r2, r3, #29
 80134cc:	d505      	bpl.n	80134da <__sflush_r+0x46>
 80134ce:	6863      	ldr	r3, [r4, #4]
 80134d0:	1ac0      	subs	r0, r0, r3
 80134d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134d4:	b10b      	cbz	r3, 80134da <__sflush_r+0x46>
 80134d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134d8:	1ac0      	subs	r0, r0, r3
 80134da:	2300      	movs	r3, #0
 80134dc:	4602      	mov	r2, r0
 80134de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134e0:	6a21      	ldr	r1, [r4, #32]
 80134e2:	4628      	mov	r0, r5
 80134e4:	47b0      	blx	r6
 80134e6:	1c43      	adds	r3, r0, #1
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	d106      	bne.n	80134fa <__sflush_r+0x66>
 80134ec:	6829      	ldr	r1, [r5, #0]
 80134ee:	291d      	cmp	r1, #29
 80134f0:	d82c      	bhi.n	801354c <__sflush_r+0xb8>
 80134f2:	4a2a      	ldr	r2, [pc, #168]	; (801359c <__sflush_r+0x108>)
 80134f4:	40ca      	lsrs	r2, r1
 80134f6:	07d6      	lsls	r6, r2, #31
 80134f8:	d528      	bpl.n	801354c <__sflush_r+0xb8>
 80134fa:	2200      	movs	r2, #0
 80134fc:	6062      	str	r2, [r4, #4]
 80134fe:	04d9      	lsls	r1, r3, #19
 8013500:	6922      	ldr	r2, [r4, #16]
 8013502:	6022      	str	r2, [r4, #0]
 8013504:	d504      	bpl.n	8013510 <__sflush_r+0x7c>
 8013506:	1c42      	adds	r2, r0, #1
 8013508:	d101      	bne.n	801350e <__sflush_r+0x7a>
 801350a:	682b      	ldr	r3, [r5, #0]
 801350c:	b903      	cbnz	r3, 8013510 <__sflush_r+0x7c>
 801350e:	6560      	str	r0, [r4, #84]	; 0x54
 8013510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013512:	602f      	str	r7, [r5, #0]
 8013514:	2900      	cmp	r1, #0
 8013516:	d0ca      	beq.n	80134ae <__sflush_r+0x1a>
 8013518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801351c:	4299      	cmp	r1, r3
 801351e:	d002      	beq.n	8013526 <__sflush_r+0x92>
 8013520:	4628      	mov	r0, r5
 8013522:	f000 fca3 	bl	8013e6c <_free_r>
 8013526:	2000      	movs	r0, #0
 8013528:	6360      	str	r0, [r4, #52]	; 0x34
 801352a:	e7c1      	b.n	80134b0 <__sflush_r+0x1c>
 801352c:	6a21      	ldr	r1, [r4, #32]
 801352e:	2301      	movs	r3, #1
 8013530:	4628      	mov	r0, r5
 8013532:	47b0      	blx	r6
 8013534:	1c41      	adds	r1, r0, #1
 8013536:	d1c7      	bne.n	80134c8 <__sflush_r+0x34>
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d0c4      	beq.n	80134c8 <__sflush_r+0x34>
 801353e:	2b1d      	cmp	r3, #29
 8013540:	d001      	beq.n	8013546 <__sflush_r+0xb2>
 8013542:	2b16      	cmp	r3, #22
 8013544:	d101      	bne.n	801354a <__sflush_r+0xb6>
 8013546:	602f      	str	r7, [r5, #0]
 8013548:	e7b1      	b.n	80134ae <__sflush_r+0x1a>
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013550:	81a3      	strh	r3, [r4, #12]
 8013552:	e7ad      	b.n	80134b0 <__sflush_r+0x1c>
 8013554:	690f      	ldr	r7, [r1, #16]
 8013556:	2f00      	cmp	r7, #0
 8013558:	d0a9      	beq.n	80134ae <__sflush_r+0x1a>
 801355a:	0793      	lsls	r3, r2, #30
 801355c:	680e      	ldr	r6, [r1, #0]
 801355e:	bf08      	it	eq
 8013560:	694b      	ldreq	r3, [r1, #20]
 8013562:	600f      	str	r7, [r1, #0]
 8013564:	bf18      	it	ne
 8013566:	2300      	movne	r3, #0
 8013568:	eba6 0807 	sub.w	r8, r6, r7
 801356c:	608b      	str	r3, [r1, #8]
 801356e:	f1b8 0f00 	cmp.w	r8, #0
 8013572:	dd9c      	ble.n	80134ae <__sflush_r+0x1a>
 8013574:	6a21      	ldr	r1, [r4, #32]
 8013576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013578:	4643      	mov	r3, r8
 801357a:	463a      	mov	r2, r7
 801357c:	4628      	mov	r0, r5
 801357e:	47b0      	blx	r6
 8013580:	2800      	cmp	r0, #0
 8013582:	dc06      	bgt.n	8013592 <__sflush_r+0xfe>
 8013584:	89a3      	ldrh	r3, [r4, #12]
 8013586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801358a:	81a3      	strh	r3, [r4, #12]
 801358c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013590:	e78e      	b.n	80134b0 <__sflush_r+0x1c>
 8013592:	4407      	add	r7, r0
 8013594:	eba8 0800 	sub.w	r8, r8, r0
 8013598:	e7e9      	b.n	801356e <__sflush_r+0xda>
 801359a:	bf00      	nop
 801359c:	20400001 	.word	0x20400001

080135a0 <_fflush_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	690b      	ldr	r3, [r1, #16]
 80135a4:	4605      	mov	r5, r0
 80135a6:	460c      	mov	r4, r1
 80135a8:	b913      	cbnz	r3, 80135b0 <_fflush_r+0x10>
 80135aa:	2500      	movs	r5, #0
 80135ac:	4628      	mov	r0, r5
 80135ae:	bd38      	pop	{r3, r4, r5, pc}
 80135b0:	b118      	cbz	r0, 80135ba <_fflush_r+0x1a>
 80135b2:	6983      	ldr	r3, [r0, #24]
 80135b4:	b90b      	cbnz	r3, 80135ba <_fflush_r+0x1a>
 80135b6:	f7fe f9ff 	bl	80119b8 <__sinit>
 80135ba:	4b14      	ldr	r3, [pc, #80]	; (801360c <_fflush_r+0x6c>)
 80135bc:	429c      	cmp	r4, r3
 80135be:	d11b      	bne.n	80135f8 <_fflush_r+0x58>
 80135c0:	686c      	ldr	r4, [r5, #4]
 80135c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d0ef      	beq.n	80135aa <_fflush_r+0xa>
 80135ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135cc:	07d0      	lsls	r0, r2, #31
 80135ce:	d404      	bmi.n	80135da <_fflush_r+0x3a>
 80135d0:	0599      	lsls	r1, r3, #22
 80135d2:	d402      	bmi.n	80135da <_fflush_r+0x3a>
 80135d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135d6:	f7fe fab2 	bl	8011b3e <__retarget_lock_acquire_recursive>
 80135da:	4628      	mov	r0, r5
 80135dc:	4621      	mov	r1, r4
 80135de:	f7ff ff59 	bl	8013494 <__sflush_r>
 80135e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135e4:	07da      	lsls	r2, r3, #31
 80135e6:	4605      	mov	r5, r0
 80135e8:	d4e0      	bmi.n	80135ac <_fflush_r+0xc>
 80135ea:	89a3      	ldrh	r3, [r4, #12]
 80135ec:	059b      	lsls	r3, r3, #22
 80135ee:	d4dd      	bmi.n	80135ac <_fflush_r+0xc>
 80135f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135f2:	f7fe faa5 	bl	8011b40 <__retarget_lock_release_recursive>
 80135f6:	e7d9      	b.n	80135ac <_fflush_r+0xc>
 80135f8:	4b05      	ldr	r3, [pc, #20]	; (8013610 <_fflush_r+0x70>)
 80135fa:	429c      	cmp	r4, r3
 80135fc:	d101      	bne.n	8013602 <_fflush_r+0x62>
 80135fe:	68ac      	ldr	r4, [r5, #8]
 8013600:	e7df      	b.n	80135c2 <_fflush_r+0x22>
 8013602:	4b04      	ldr	r3, [pc, #16]	; (8013614 <_fflush_r+0x74>)
 8013604:	429c      	cmp	r4, r3
 8013606:	bf08      	it	eq
 8013608:	68ec      	ldreq	r4, [r5, #12]
 801360a:	e7da      	b.n	80135c2 <_fflush_r+0x22>
 801360c:	08014944 	.word	0x08014944
 8013610:	08014964 	.word	0x08014964
 8013614:	08014924 	.word	0x08014924

08013618 <_localeconv_r>:
 8013618:	4800      	ldr	r0, [pc, #0]	; (801361c <_localeconv_r+0x4>)
 801361a:	4770      	bx	lr
 801361c:	24000168 	.word	0x24000168

08013620 <_lseek_r>:
 8013620:	b538      	push	{r3, r4, r5, lr}
 8013622:	4d07      	ldr	r5, [pc, #28]	; (8013640 <_lseek_r+0x20>)
 8013624:	4604      	mov	r4, r0
 8013626:	4608      	mov	r0, r1
 8013628:	4611      	mov	r1, r2
 801362a:	2200      	movs	r2, #0
 801362c:	602a      	str	r2, [r5, #0]
 801362e:	461a      	mov	r2, r3
 8013630:	f7ef fdcc 	bl	80031cc <_lseek>
 8013634:	1c43      	adds	r3, r0, #1
 8013636:	d102      	bne.n	801363e <_lseek_r+0x1e>
 8013638:	682b      	ldr	r3, [r5, #0]
 801363a:	b103      	cbz	r3, 801363e <_lseek_r+0x1e>
 801363c:	6023      	str	r3, [r4, #0]
 801363e:	bd38      	pop	{r3, r4, r5, pc}
 8013640:	240056cc 	.word	0x240056cc

08013644 <__swhatbuf_r>:
 8013644:	b570      	push	{r4, r5, r6, lr}
 8013646:	460e      	mov	r6, r1
 8013648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801364c:	2900      	cmp	r1, #0
 801364e:	b096      	sub	sp, #88	; 0x58
 8013650:	4614      	mov	r4, r2
 8013652:	461d      	mov	r5, r3
 8013654:	da08      	bge.n	8013668 <__swhatbuf_r+0x24>
 8013656:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801365a:	2200      	movs	r2, #0
 801365c:	602a      	str	r2, [r5, #0]
 801365e:	061a      	lsls	r2, r3, #24
 8013660:	d410      	bmi.n	8013684 <__swhatbuf_r+0x40>
 8013662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013666:	e00e      	b.n	8013686 <__swhatbuf_r+0x42>
 8013668:	466a      	mov	r2, sp
 801366a:	f000 ff43 	bl	80144f4 <_fstat_r>
 801366e:	2800      	cmp	r0, #0
 8013670:	dbf1      	blt.n	8013656 <__swhatbuf_r+0x12>
 8013672:	9a01      	ldr	r2, [sp, #4]
 8013674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801367c:	425a      	negs	r2, r3
 801367e:	415a      	adcs	r2, r3
 8013680:	602a      	str	r2, [r5, #0]
 8013682:	e7ee      	b.n	8013662 <__swhatbuf_r+0x1e>
 8013684:	2340      	movs	r3, #64	; 0x40
 8013686:	2000      	movs	r0, #0
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	b016      	add	sp, #88	; 0x58
 801368c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013690 <__smakebuf_r>:
 8013690:	898b      	ldrh	r3, [r1, #12]
 8013692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013694:	079d      	lsls	r5, r3, #30
 8013696:	4606      	mov	r6, r0
 8013698:	460c      	mov	r4, r1
 801369a:	d507      	bpl.n	80136ac <__smakebuf_r+0x1c>
 801369c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80136a0:	6023      	str	r3, [r4, #0]
 80136a2:	6123      	str	r3, [r4, #16]
 80136a4:	2301      	movs	r3, #1
 80136a6:	6163      	str	r3, [r4, #20]
 80136a8:	b002      	add	sp, #8
 80136aa:	bd70      	pop	{r4, r5, r6, pc}
 80136ac:	ab01      	add	r3, sp, #4
 80136ae:	466a      	mov	r2, sp
 80136b0:	f7ff ffc8 	bl	8013644 <__swhatbuf_r>
 80136b4:	9900      	ldr	r1, [sp, #0]
 80136b6:	4605      	mov	r5, r0
 80136b8:	4630      	mov	r0, r6
 80136ba:	f7fe fa79 	bl	8011bb0 <_malloc_r>
 80136be:	b948      	cbnz	r0, 80136d4 <__smakebuf_r+0x44>
 80136c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136c4:	059a      	lsls	r2, r3, #22
 80136c6:	d4ef      	bmi.n	80136a8 <__smakebuf_r+0x18>
 80136c8:	f023 0303 	bic.w	r3, r3, #3
 80136cc:	f043 0302 	orr.w	r3, r3, #2
 80136d0:	81a3      	strh	r3, [r4, #12]
 80136d2:	e7e3      	b.n	801369c <__smakebuf_r+0xc>
 80136d4:	4b0d      	ldr	r3, [pc, #52]	; (801370c <__smakebuf_r+0x7c>)
 80136d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80136d8:	89a3      	ldrh	r3, [r4, #12]
 80136da:	6020      	str	r0, [r4, #0]
 80136dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136e0:	81a3      	strh	r3, [r4, #12]
 80136e2:	9b00      	ldr	r3, [sp, #0]
 80136e4:	6163      	str	r3, [r4, #20]
 80136e6:	9b01      	ldr	r3, [sp, #4]
 80136e8:	6120      	str	r0, [r4, #16]
 80136ea:	b15b      	cbz	r3, 8013704 <__smakebuf_r+0x74>
 80136ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136f0:	4630      	mov	r0, r6
 80136f2:	f000 ff11 	bl	8014518 <_isatty_r>
 80136f6:	b128      	cbz	r0, 8013704 <__smakebuf_r+0x74>
 80136f8:	89a3      	ldrh	r3, [r4, #12]
 80136fa:	f023 0303 	bic.w	r3, r3, #3
 80136fe:	f043 0301 	orr.w	r3, r3, #1
 8013702:	81a3      	strh	r3, [r4, #12]
 8013704:	89a0      	ldrh	r0, [r4, #12]
 8013706:	4305      	orrs	r5, r0
 8013708:	81a5      	strh	r5, [r4, #12]
 801370a:	e7cd      	b.n	80136a8 <__smakebuf_r+0x18>
 801370c:	08011951 	.word	0x08011951

08013710 <malloc>:
 8013710:	4b02      	ldr	r3, [pc, #8]	; (801371c <malloc+0xc>)
 8013712:	4601      	mov	r1, r0
 8013714:	6818      	ldr	r0, [r3, #0]
 8013716:	f7fe ba4b 	b.w	8011bb0 <_malloc_r>
 801371a:	bf00      	nop
 801371c:	24000014 	.word	0x24000014

08013720 <__malloc_lock>:
 8013720:	4801      	ldr	r0, [pc, #4]	; (8013728 <__malloc_lock+0x8>)
 8013722:	f7fe ba0c 	b.w	8011b3e <__retarget_lock_acquire_recursive>
 8013726:	bf00      	nop
 8013728:	240056c0 	.word	0x240056c0

0801372c <__malloc_unlock>:
 801372c:	4801      	ldr	r0, [pc, #4]	; (8013734 <__malloc_unlock+0x8>)
 801372e:	f7fe ba07 	b.w	8011b40 <__retarget_lock_release_recursive>
 8013732:	bf00      	nop
 8013734:	240056c0 	.word	0x240056c0

08013738 <_Balloc>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801373c:	4604      	mov	r4, r0
 801373e:	460d      	mov	r5, r1
 8013740:	b976      	cbnz	r6, 8013760 <_Balloc+0x28>
 8013742:	2010      	movs	r0, #16
 8013744:	f7ff ffe4 	bl	8013710 <malloc>
 8013748:	4602      	mov	r2, r0
 801374a:	6260      	str	r0, [r4, #36]	; 0x24
 801374c:	b920      	cbnz	r0, 8013758 <_Balloc+0x20>
 801374e:	4b18      	ldr	r3, [pc, #96]	; (80137b0 <_Balloc+0x78>)
 8013750:	4818      	ldr	r0, [pc, #96]	; (80137b4 <_Balloc+0x7c>)
 8013752:	2166      	movs	r1, #102	; 0x66
 8013754:	f000 fe9e 	bl	8014494 <__assert_func>
 8013758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801375c:	6006      	str	r6, [r0, #0]
 801375e:	60c6      	str	r6, [r0, #12]
 8013760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013762:	68f3      	ldr	r3, [r6, #12]
 8013764:	b183      	cbz	r3, 8013788 <_Balloc+0x50>
 8013766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801376e:	b9b8      	cbnz	r0, 80137a0 <_Balloc+0x68>
 8013770:	2101      	movs	r1, #1
 8013772:	fa01 f605 	lsl.w	r6, r1, r5
 8013776:	1d72      	adds	r2, r6, #5
 8013778:	0092      	lsls	r2, r2, #2
 801377a:	4620      	mov	r0, r4
 801377c:	f000 fb60 	bl	8013e40 <_calloc_r>
 8013780:	b160      	cbz	r0, 801379c <_Balloc+0x64>
 8013782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013786:	e00e      	b.n	80137a6 <_Balloc+0x6e>
 8013788:	2221      	movs	r2, #33	; 0x21
 801378a:	2104      	movs	r1, #4
 801378c:	4620      	mov	r0, r4
 801378e:	f000 fb57 	bl	8013e40 <_calloc_r>
 8013792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013794:	60f0      	str	r0, [r6, #12]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d1e4      	bne.n	8013766 <_Balloc+0x2e>
 801379c:	2000      	movs	r0, #0
 801379e:	bd70      	pop	{r4, r5, r6, pc}
 80137a0:	6802      	ldr	r2, [r0, #0]
 80137a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137a6:	2300      	movs	r3, #0
 80137a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137ac:	e7f7      	b.n	801379e <_Balloc+0x66>
 80137ae:	bf00      	nop
 80137b0:	080149c9 	.word	0x080149c9
 80137b4:	08014a4c 	.word	0x08014a4c

080137b8 <_Bfree>:
 80137b8:	b570      	push	{r4, r5, r6, lr}
 80137ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80137bc:	4605      	mov	r5, r0
 80137be:	460c      	mov	r4, r1
 80137c0:	b976      	cbnz	r6, 80137e0 <_Bfree+0x28>
 80137c2:	2010      	movs	r0, #16
 80137c4:	f7ff ffa4 	bl	8013710 <malloc>
 80137c8:	4602      	mov	r2, r0
 80137ca:	6268      	str	r0, [r5, #36]	; 0x24
 80137cc:	b920      	cbnz	r0, 80137d8 <_Bfree+0x20>
 80137ce:	4b09      	ldr	r3, [pc, #36]	; (80137f4 <_Bfree+0x3c>)
 80137d0:	4809      	ldr	r0, [pc, #36]	; (80137f8 <_Bfree+0x40>)
 80137d2:	218a      	movs	r1, #138	; 0x8a
 80137d4:	f000 fe5e 	bl	8014494 <__assert_func>
 80137d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137dc:	6006      	str	r6, [r0, #0]
 80137de:	60c6      	str	r6, [r0, #12]
 80137e0:	b13c      	cbz	r4, 80137f2 <_Bfree+0x3a>
 80137e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80137e4:	6862      	ldr	r2, [r4, #4]
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137ec:	6021      	str	r1, [r4, #0]
 80137ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80137f2:	bd70      	pop	{r4, r5, r6, pc}
 80137f4:	080149c9 	.word	0x080149c9
 80137f8:	08014a4c 	.word	0x08014a4c

080137fc <__multadd>:
 80137fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013800:	690d      	ldr	r5, [r1, #16]
 8013802:	4607      	mov	r7, r0
 8013804:	460c      	mov	r4, r1
 8013806:	461e      	mov	r6, r3
 8013808:	f101 0c14 	add.w	ip, r1, #20
 801380c:	2000      	movs	r0, #0
 801380e:	f8dc 3000 	ldr.w	r3, [ip]
 8013812:	b299      	uxth	r1, r3
 8013814:	fb02 6101 	mla	r1, r2, r1, r6
 8013818:	0c1e      	lsrs	r6, r3, #16
 801381a:	0c0b      	lsrs	r3, r1, #16
 801381c:	fb02 3306 	mla	r3, r2, r6, r3
 8013820:	b289      	uxth	r1, r1
 8013822:	3001      	adds	r0, #1
 8013824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013828:	4285      	cmp	r5, r0
 801382a:	f84c 1b04 	str.w	r1, [ip], #4
 801382e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013832:	dcec      	bgt.n	801380e <__multadd+0x12>
 8013834:	b30e      	cbz	r6, 801387a <__multadd+0x7e>
 8013836:	68a3      	ldr	r3, [r4, #8]
 8013838:	42ab      	cmp	r3, r5
 801383a:	dc19      	bgt.n	8013870 <__multadd+0x74>
 801383c:	6861      	ldr	r1, [r4, #4]
 801383e:	4638      	mov	r0, r7
 8013840:	3101      	adds	r1, #1
 8013842:	f7ff ff79 	bl	8013738 <_Balloc>
 8013846:	4680      	mov	r8, r0
 8013848:	b928      	cbnz	r0, 8013856 <__multadd+0x5a>
 801384a:	4602      	mov	r2, r0
 801384c:	4b0c      	ldr	r3, [pc, #48]	; (8013880 <__multadd+0x84>)
 801384e:	480d      	ldr	r0, [pc, #52]	; (8013884 <__multadd+0x88>)
 8013850:	21b5      	movs	r1, #181	; 0xb5
 8013852:	f000 fe1f 	bl	8014494 <__assert_func>
 8013856:	6922      	ldr	r2, [r4, #16]
 8013858:	3202      	adds	r2, #2
 801385a:	f104 010c 	add.w	r1, r4, #12
 801385e:	0092      	lsls	r2, r2, #2
 8013860:	300c      	adds	r0, #12
 8013862:	f7fe f96e 	bl	8011b42 <memcpy>
 8013866:	4621      	mov	r1, r4
 8013868:	4638      	mov	r0, r7
 801386a:	f7ff ffa5 	bl	80137b8 <_Bfree>
 801386e:	4644      	mov	r4, r8
 8013870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013874:	3501      	adds	r5, #1
 8013876:	615e      	str	r6, [r3, #20]
 8013878:	6125      	str	r5, [r4, #16]
 801387a:	4620      	mov	r0, r4
 801387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013880:	08014a3b 	.word	0x08014a3b
 8013884:	08014a4c 	.word	0x08014a4c

08013888 <__hi0bits>:
 8013888:	0c03      	lsrs	r3, r0, #16
 801388a:	041b      	lsls	r3, r3, #16
 801388c:	b9d3      	cbnz	r3, 80138c4 <__hi0bits+0x3c>
 801388e:	0400      	lsls	r0, r0, #16
 8013890:	2310      	movs	r3, #16
 8013892:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013896:	bf04      	itt	eq
 8013898:	0200      	lsleq	r0, r0, #8
 801389a:	3308      	addeq	r3, #8
 801389c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80138a0:	bf04      	itt	eq
 80138a2:	0100      	lsleq	r0, r0, #4
 80138a4:	3304      	addeq	r3, #4
 80138a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80138aa:	bf04      	itt	eq
 80138ac:	0080      	lsleq	r0, r0, #2
 80138ae:	3302      	addeq	r3, #2
 80138b0:	2800      	cmp	r0, #0
 80138b2:	db05      	blt.n	80138c0 <__hi0bits+0x38>
 80138b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80138b8:	f103 0301 	add.w	r3, r3, #1
 80138bc:	bf08      	it	eq
 80138be:	2320      	moveq	r3, #32
 80138c0:	4618      	mov	r0, r3
 80138c2:	4770      	bx	lr
 80138c4:	2300      	movs	r3, #0
 80138c6:	e7e4      	b.n	8013892 <__hi0bits+0xa>

080138c8 <__lo0bits>:
 80138c8:	6803      	ldr	r3, [r0, #0]
 80138ca:	f013 0207 	ands.w	r2, r3, #7
 80138ce:	4601      	mov	r1, r0
 80138d0:	d00b      	beq.n	80138ea <__lo0bits+0x22>
 80138d2:	07da      	lsls	r2, r3, #31
 80138d4:	d423      	bmi.n	801391e <__lo0bits+0x56>
 80138d6:	0798      	lsls	r0, r3, #30
 80138d8:	bf49      	itett	mi
 80138da:	085b      	lsrmi	r3, r3, #1
 80138dc:	089b      	lsrpl	r3, r3, #2
 80138de:	2001      	movmi	r0, #1
 80138e0:	600b      	strmi	r3, [r1, #0]
 80138e2:	bf5c      	itt	pl
 80138e4:	600b      	strpl	r3, [r1, #0]
 80138e6:	2002      	movpl	r0, #2
 80138e8:	4770      	bx	lr
 80138ea:	b298      	uxth	r0, r3
 80138ec:	b9a8      	cbnz	r0, 801391a <__lo0bits+0x52>
 80138ee:	0c1b      	lsrs	r3, r3, #16
 80138f0:	2010      	movs	r0, #16
 80138f2:	b2da      	uxtb	r2, r3
 80138f4:	b90a      	cbnz	r2, 80138fa <__lo0bits+0x32>
 80138f6:	3008      	adds	r0, #8
 80138f8:	0a1b      	lsrs	r3, r3, #8
 80138fa:	071a      	lsls	r2, r3, #28
 80138fc:	bf04      	itt	eq
 80138fe:	091b      	lsreq	r3, r3, #4
 8013900:	3004      	addeq	r0, #4
 8013902:	079a      	lsls	r2, r3, #30
 8013904:	bf04      	itt	eq
 8013906:	089b      	lsreq	r3, r3, #2
 8013908:	3002      	addeq	r0, #2
 801390a:	07da      	lsls	r2, r3, #31
 801390c:	d403      	bmi.n	8013916 <__lo0bits+0x4e>
 801390e:	085b      	lsrs	r3, r3, #1
 8013910:	f100 0001 	add.w	r0, r0, #1
 8013914:	d005      	beq.n	8013922 <__lo0bits+0x5a>
 8013916:	600b      	str	r3, [r1, #0]
 8013918:	4770      	bx	lr
 801391a:	4610      	mov	r0, r2
 801391c:	e7e9      	b.n	80138f2 <__lo0bits+0x2a>
 801391e:	2000      	movs	r0, #0
 8013920:	4770      	bx	lr
 8013922:	2020      	movs	r0, #32
 8013924:	4770      	bx	lr
	...

08013928 <__i2b>:
 8013928:	b510      	push	{r4, lr}
 801392a:	460c      	mov	r4, r1
 801392c:	2101      	movs	r1, #1
 801392e:	f7ff ff03 	bl	8013738 <_Balloc>
 8013932:	4602      	mov	r2, r0
 8013934:	b928      	cbnz	r0, 8013942 <__i2b+0x1a>
 8013936:	4b05      	ldr	r3, [pc, #20]	; (801394c <__i2b+0x24>)
 8013938:	4805      	ldr	r0, [pc, #20]	; (8013950 <__i2b+0x28>)
 801393a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801393e:	f000 fda9 	bl	8014494 <__assert_func>
 8013942:	2301      	movs	r3, #1
 8013944:	6144      	str	r4, [r0, #20]
 8013946:	6103      	str	r3, [r0, #16]
 8013948:	bd10      	pop	{r4, pc}
 801394a:	bf00      	nop
 801394c:	08014a3b 	.word	0x08014a3b
 8013950:	08014a4c 	.word	0x08014a4c

08013954 <__multiply>:
 8013954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013958:	4691      	mov	r9, r2
 801395a:	690a      	ldr	r2, [r1, #16]
 801395c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013960:	429a      	cmp	r2, r3
 8013962:	bfb8      	it	lt
 8013964:	460b      	movlt	r3, r1
 8013966:	460c      	mov	r4, r1
 8013968:	bfbc      	itt	lt
 801396a:	464c      	movlt	r4, r9
 801396c:	4699      	movlt	r9, r3
 801396e:	6927      	ldr	r7, [r4, #16]
 8013970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013974:	68a3      	ldr	r3, [r4, #8]
 8013976:	6861      	ldr	r1, [r4, #4]
 8013978:	eb07 060a 	add.w	r6, r7, sl
 801397c:	42b3      	cmp	r3, r6
 801397e:	b085      	sub	sp, #20
 8013980:	bfb8      	it	lt
 8013982:	3101      	addlt	r1, #1
 8013984:	f7ff fed8 	bl	8013738 <_Balloc>
 8013988:	b930      	cbnz	r0, 8013998 <__multiply+0x44>
 801398a:	4602      	mov	r2, r0
 801398c:	4b44      	ldr	r3, [pc, #272]	; (8013aa0 <__multiply+0x14c>)
 801398e:	4845      	ldr	r0, [pc, #276]	; (8013aa4 <__multiply+0x150>)
 8013990:	f240 115d 	movw	r1, #349	; 0x15d
 8013994:	f000 fd7e 	bl	8014494 <__assert_func>
 8013998:	f100 0514 	add.w	r5, r0, #20
 801399c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80139a0:	462b      	mov	r3, r5
 80139a2:	2200      	movs	r2, #0
 80139a4:	4543      	cmp	r3, r8
 80139a6:	d321      	bcc.n	80139ec <__multiply+0x98>
 80139a8:	f104 0314 	add.w	r3, r4, #20
 80139ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80139b0:	f109 0314 	add.w	r3, r9, #20
 80139b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80139b8:	9202      	str	r2, [sp, #8]
 80139ba:	1b3a      	subs	r2, r7, r4
 80139bc:	3a15      	subs	r2, #21
 80139be:	f022 0203 	bic.w	r2, r2, #3
 80139c2:	3204      	adds	r2, #4
 80139c4:	f104 0115 	add.w	r1, r4, #21
 80139c8:	428f      	cmp	r7, r1
 80139ca:	bf38      	it	cc
 80139cc:	2204      	movcc	r2, #4
 80139ce:	9201      	str	r2, [sp, #4]
 80139d0:	9a02      	ldr	r2, [sp, #8]
 80139d2:	9303      	str	r3, [sp, #12]
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d80c      	bhi.n	80139f2 <__multiply+0x9e>
 80139d8:	2e00      	cmp	r6, #0
 80139da:	dd03      	ble.n	80139e4 <__multiply+0x90>
 80139dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d05a      	beq.n	8013a9a <__multiply+0x146>
 80139e4:	6106      	str	r6, [r0, #16]
 80139e6:	b005      	add	sp, #20
 80139e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ec:	f843 2b04 	str.w	r2, [r3], #4
 80139f0:	e7d8      	b.n	80139a4 <__multiply+0x50>
 80139f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80139f6:	f1ba 0f00 	cmp.w	sl, #0
 80139fa:	d024      	beq.n	8013a46 <__multiply+0xf2>
 80139fc:	f104 0e14 	add.w	lr, r4, #20
 8013a00:	46a9      	mov	r9, r5
 8013a02:	f04f 0c00 	mov.w	ip, #0
 8013a06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013a0a:	f8d9 1000 	ldr.w	r1, [r9]
 8013a0e:	fa1f fb82 	uxth.w	fp, r2
 8013a12:	b289      	uxth	r1, r1
 8013a14:	fb0a 110b 	mla	r1, sl, fp, r1
 8013a18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8013a20:	4461      	add	r1, ip
 8013a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013a26:	fb0a c20b 	mla	r2, sl, fp, ip
 8013a2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013a2e:	b289      	uxth	r1, r1
 8013a30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013a34:	4577      	cmp	r7, lr
 8013a36:	f849 1b04 	str.w	r1, [r9], #4
 8013a3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013a3e:	d8e2      	bhi.n	8013a06 <__multiply+0xb2>
 8013a40:	9a01      	ldr	r2, [sp, #4]
 8013a42:	f845 c002 	str.w	ip, [r5, r2]
 8013a46:	9a03      	ldr	r2, [sp, #12]
 8013a48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	f1b9 0f00 	cmp.w	r9, #0
 8013a52:	d020      	beq.n	8013a96 <__multiply+0x142>
 8013a54:	6829      	ldr	r1, [r5, #0]
 8013a56:	f104 0c14 	add.w	ip, r4, #20
 8013a5a:	46ae      	mov	lr, r5
 8013a5c:	f04f 0a00 	mov.w	sl, #0
 8013a60:	f8bc b000 	ldrh.w	fp, [ip]
 8013a64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013a68:	fb09 220b 	mla	r2, r9, fp, r2
 8013a6c:	4492      	add	sl, r2
 8013a6e:	b289      	uxth	r1, r1
 8013a70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013a74:	f84e 1b04 	str.w	r1, [lr], #4
 8013a78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013a7c:	f8be 1000 	ldrh.w	r1, [lr]
 8013a80:	0c12      	lsrs	r2, r2, #16
 8013a82:	fb09 1102 	mla	r1, r9, r2, r1
 8013a86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013a8a:	4567      	cmp	r7, ip
 8013a8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013a90:	d8e6      	bhi.n	8013a60 <__multiply+0x10c>
 8013a92:	9a01      	ldr	r2, [sp, #4]
 8013a94:	50a9      	str	r1, [r5, r2]
 8013a96:	3504      	adds	r5, #4
 8013a98:	e79a      	b.n	80139d0 <__multiply+0x7c>
 8013a9a:	3e01      	subs	r6, #1
 8013a9c:	e79c      	b.n	80139d8 <__multiply+0x84>
 8013a9e:	bf00      	nop
 8013aa0:	08014a3b 	.word	0x08014a3b
 8013aa4:	08014a4c 	.word	0x08014a4c

08013aa8 <__pow5mult>:
 8013aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013aac:	4615      	mov	r5, r2
 8013aae:	f012 0203 	ands.w	r2, r2, #3
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	460f      	mov	r7, r1
 8013ab6:	d007      	beq.n	8013ac8 <__pow5mult+0x20>
 8013ab8:	4c25      	ldr	r4, [pc, #148]	; (8013b50 <__pow5mult+0xa8>)
 8013aba:	3a01      	subs	r2, #1
 8013abc:	2300      	movs	r3, #0
 8013abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ac2:	f7ff fe9b 	bl	80137fc <__multadd>
 8013ac6:	4607      	mov	r7, r0
 8013ac8:	10ad      	asrs	r5, r5, #2
 8013aca:	d03d      	beq.n	8013b48 <__pow5mult+0xa0>
 8013acc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ace:	b97c      	cbnz	r4, 8013af0 <__pow5mult+0x48>
 8013ad0:	2010      	movs	r0, #16
 8013ad2:	f7ff fe1d 	bl	8013710 <malloc>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	6270      	str	r0, [r6, #36]	; 0x24
 8013ada:	b928      	cbnz	r0, 8013ae8 <__pow5mult+0x40>
 8013adc:	4b1d      	ldr	r3, [pc, #116]	; (8013b54 <__pow5mult+0xac>)
 8013ade:	481e      	ldr	r0, [pc, #120]	; (8013b58 <__pow5mult+0xb0>)
 8013ae0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013ae4:	f000 fcd6 	bl	8014494 <__assert_func>
 8013ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013aec:	6004      	str	r4, [r0, #0]
 8013aee:	60c4      	str	r4, [r0, #12]
 8013af0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013af8:	b94c      	cbnz	r4, 8013b0e <__pow5mult+0x66>
 8013afa:	f240 2171 	movw	r1, #625	; 0x271
 8013afe:	4630      	mov	r0, r6
 8013b00:	f7ff ff12 	bl	8013928 <__i2b>
 8013b04:	2300      	movs	r3, #0
 8013b06:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	6003      	str	r3, [r0, #0]
 8013b0e:	f04f 0900 	mov.w	r9, #0
 8013b12:	07eb      	lsls	r3, r5, #31
 8013b14:	d50a      	bpl.n	8013b2c <__pow5mult+0x84>
 8013b16:	4639      	mov	r1, r7
 8013b18:	4622      	mov	r2, r4
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f7ff ff1a 	bl	8013954 <__multiply>
 8013b20:	4639      	mov	r1, r7
 8013b22:	4680      	mov	r8, r0
 8013b24:	4630      	mov	r0, r6
 8013b26:	f7ff fe47 	bl	80137b8 <_Bfree>
 8013b2a:	4647      	mov	r7, r8
 8013b2c:	106d      	asrs	r5, r5, #1
 8013b2e:	d00b      	beq.n	8013b48 <__pow5mult+0xa0>
 8013b30:	6820      	ldr	r0, [r4, #0]
 8013b32:	b938      	cbnz	r0, 8013b44 <__pow5mult+0x9c>
 8013b34:	4622      	mov	r2, r4
 8013b36:	4621      	mov	r1, r4
 8013b38:	4630      	mov	r0, r6
 8013b3a:	f7ff ff0b 	bl	8013954 <__multiply>
 8013b3e:	6020      	str	r0, [r4, #0]
 8013b40:	f8c0 9000 	str.w	r9, [r0]
 8013b44:	4604      	mov	r4, r0
 8013b46:	e7e4      	b.n	8013b12 <__pow5mult+0x6a>
 8013b48:	4638      	mov	r0, r7
 8013b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b4e:	bf00      	nop
 8013b50:	08014b98 	.word	0x08014b98
 8013b54:	080149c9 	.word	0x080149c9
 8013b58:	08014a4c 	.word	0x08014a4c

08013b5c <__lshift>:
 8013b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b60:	460c      	mov	r4, r1
 8013b62:	6849      	ldr	r1, [r1, #4]
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013b6a:	68a3      	ldr	r3, [r4, #8]
 8013b6c:	4607      	mov	r7, r0
 8013b6e:	4691      	mov	r9, r2
 8013b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b74:	f108 0601 	add.w	r6, r8, #1
 8013b78:	42b3      	cmp	r3, r6
 8013b7a:	db0b      	blt.n	8013b94 <__lshift+0x38>
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f7ff fddb 	bl	8013738 <_Balloc>
 8013b82:	4605      	mov	r5, r0
 8013b84:	b948      	cbnz	r0, 8013b9a <__lshift+0x3e>
 8013b86:	4602      	mov	r2, r0
 8013b88:	4b2a      	ldr	r3, [pc, #168]	; (8013c34 <__lshift+0xd8>)
 8013b8a:	482b      	ldr	r0, [pc, #172]	; (8013c38 <__lshift+0xdc>)
 8013b8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013b90:	f000 fc80 	bl	8014494 <__assert_func>
 8013b94:	3101      	adds	r1, #1
 8013b96:	005b      	lsls	r3, r3, #1
 8013b98:	e7ee      	b.n	8013b78 <__lshift+0x1c>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f100 0114 	add.w	r1, r0, #20
 8013ba0:	f100 0210 	add.w	r2, r0, #16
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	4553      	cmp	r3, sl
 8013ba8:	db37      	blt.n	8013c1a <__lshift+0xbe>
 8013baa:	6920      	ldr	r0, [r4, #16]
 8013bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013bb0:	f104 0314 	add.w	r3, r4, #20
 8013bb4:	f019 091f 	ands.w	r9, r9, #31
 8013bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013bbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013bc0:	d02f      	beq.n	8013c22 <__lshift+0xc6>
 8013bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8013bc6:	468a      	mov	sl, r1
 8013bc8:	f04f 0c00 	mov.w	ip, #0
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	fa02 f209 	lsl.w	r2, r2, r9
 8013bd2:	ea42 020c 	orr.w	r2, r2, ip
 8013bd6:	f84a 2b04 	str.w	r2, [sl], #4
 8013bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bde:	4298      	cmp	r0, r3
 8013be0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013be4:	d8f2      	bhi.n	8013bcc <__lshift+0x70>
 8013be6:	1b03      	subs	r3, r0, r4
 8013be8:	3b15      	subs	r3, #21
 8013bea:	f023 0303 	bic.w	r3, r3, #3
 8013bee:	3304      	adds	r3, #4
 8013bf0:	f104 0215 	add.w	r2, r4, #21
 8013bf4:	4290      	cmp	r0, r2
 8013bf6:	bf38      	it	cc
 8013bf8:	2304      	movcc	r3, #4
 8013bfa:	f841 c003 	str.w	ip, [r1, r3]
 8013bfe:	f1bc 0f00 	cmp.w	ip, #0
 8013c02:	d001      	beq.n	8013c08 <__lshift+0xac>
 8013c04:	f108 0602 	add.w	r6, r8, #2
 8013c08:	3e01      	subs	r6, #1
 8013c0a:	4638      	mov	r0, r7
 8013c0c:	612e      	str	r6, [r5, #16]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	f7ff fdd2 	bl	80137b8 <_Bfree>
 8013c14:	4628      	mov	r0, r5
 8013c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c1e:	3301      	adds	r3, #1
 8013c20:	e7c1      	b.n	8013ba6 <__lshift+0x4a>
 8013c22:	3904      	subs	r1, #4
 8013c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c28:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c2c:	4298      	cmp	r0, r3
 8013c2e:	d8f9      	bhi.n	8013c24 <__lshift+0xc8>
 8013c30:	e7ea      	b.n	8013c08 <__lshift+0xac>
 8013c32:	bf00      	nop
 8013c34:	08014a3b 	.word	0x08014a3b
 8013c38:	08014a4c 	.word	0x08014a4c

08013c3c <__mcmp>:
 8013c3c:	b530      	push	{r4, r5, lr}
 8013c3e:	6902      	ldr	r2, [r0, #16]
 8013c40:	690c      	ldr	r4, [r1, #16]
 8013c42:	1b12      	subs	r2, r2, r4
 8013c44:	d10e      	bne.n	8013c64 <__mcmp+0x28>
 8013c46:	f100 0314 	add.w	r3, r0, #20
 8013c4a:	3114      	adds	r1, #20
 8013c4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013c50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013c54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013c58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013c5c:	42a5      	cmp	r5, r4
 8013c5e:	d003      	beq.n	8013c68 <__mcmp+0x2c>
 8013c60:	d305      	bcc.n	8013c6e <__mcmp+0x32>
 8013c62:	2201      	movs	r2, #1
 8013c64:	4610      	mov	r0, r2
 8013c66:	bd30      	pop	{r4, r5, pc}
 8013c68:	4283      	cmp	r3, r0
 8013c6a:	d3f3      	bcc.n	8013c54 <__mcmp+0x18>
 8013c6c:	e7fa      	b.n	8013c64 <__mcmp+0x28>
 8013c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c72:	e7f7      	b.n	8013c64 <__mcmp+0x28>

08013c74 <__mdiff>:
 8013c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c78:	460c      	mov	r4, r1
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	4620      	mov	r0, r4
 8013c80:	4690      	mov	r8, r2
 8013c82:	f7ff ffdb 	bl	8013c3c <__mcmp>
 8013c86:	1e05      	subs	r5, r0, #0
 8013c88:	d110      	bne.n	8013cac <__mdiff+0x38>
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f7ff fd53 	bl	8013738 <_Balloc>
 8013c92:	b930      	cbnz	r0, 8013ca2 <__mdiff+0x2e>
 8013c94:	4b3a      	ldr	r3, [pc, #232]	; (8013d80 <__mdiff+0x10c>)
 8013c96:	4602      	mov	r2, r0
 8013c98:	f240 2132 	movw	r1, #562	; 0x232
 8013c9c:	4839      	ldr	r0, [pc, #228]	; (8013d84 <__mdiff+0x110>)
 8013c9e:	f000 fbf9 	bl	8014494 <__assert_func>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cac:	bfa4      	itt	ge
 8013cae:	4643      	movge	r3, r8
 8013cb0:	46a0      	movge	r8, r4
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013cb8:	bfa6      	itte	ge
 8013cba:	461c      	movge	r4, r3
 8013cbc:	2500      	movge	r5, #0
 8013cbe:	2501      	movlt	r5, #1
 8013cc0:	f7ff fd3a 	bl	8013738 <_Balloc>
 8013cc4:	b920      	cbnz	r0, 8013cd0 <__mdiff+0x5c>
 8013cc6:	4b2e      	ldr	r3, [pc, #184]	; (8013d80 <__mdiff+0x10c>)
 8013cc8:	4602      	mov	r2, r0
 8013cca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013cce:	e7e5      	b.n	8013c9c <__mdiff+0x28>
 8013cd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013cd4:	6926      	ldr	r6, [r4, #16]
 8013cd6:	60c5      	str	r5, [r0, #12]
 8013cd8:	f104 0914 	add.w	r9, r4, #20
 8013cdc:	f108 0514 	add.w	r5, r8, #20
 8013ce0:	f100 0e14 	add.w	lr, r0, #20
 8013ce4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013ce8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013cec:	f108 0210 	add.w	r2, r8, #16
 8013cf0:	46f2      	mov	sl, lr
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8013cf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013cfc:	fa1f f883 	uxth.w	r8, r3
 8013d00:	fa11 f18b 	uxtah	r1, r1, fp
 8013d04:	0c1b      	lsrs	r3, r3, #16
 8013d06:	eba1 0808 	sub.w	r8, r1, r8
 8013d0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013d0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013d12:	fa1f f888 	uxth.w	r8, r8
 8013d16:	1419      	asrs	r1, r3, #16
 8013d18:	454e      	cmp	r6, r9
 8013d1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013d1e:	f84a 3b04 	str.w	r3, [sl], #4
 8013d22:	d8e7      	bhi.n	8013cf4 <__mdiff+0x80>
 8013d24:	1b33      	subs	r3, r6, r4
 8013d26:	3b15      	subs	r3, #21
 8013d28:	f023 0303 	bic.w	r3, r3, #3
 8013d2c:	3304      	adds	r3, #4
 8013d2e:	3415      	adds	r4, #21
 8013d30:	42a6      	cmp	r6, r4
 8013d32:	bf38      	it	cc
 8013d34:	2304      	movcc	r3, #4
 8013d36:	441d      	add	r5, r3
 8013d38:	4473      	add	r3, lr
 8013d3a:	469e      	mov	lr, r3
 8013d3c:	462e      	mov	r6, r5
 8013d3e:	4566      	cmp	r6, ip
 8013d40:	d30e      	bcc.n	8013d60 <__mdiff+0xec>
 8013d42:	f10c 0203 	add.w	r2, ip, #3
 8013d46:	1b52      	subs	r2, r2, r5
 8013d48:	f022 0203 	bic.w	r2, r2, #3
 8013d4c:	3d03      	subs	r5, #3
 8013d4e:	45ac      	cmp	ip, r5
 8013d50:	bf38      	it	cc
 8013d52:	2200      	movcc	r2, #0
 8013d54:	441a      	add	r2, r3
 8013d56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013d5a:	b17b      	cbz	r3, 8013d7c <__mdiff+0x108>
 8013d5c:	6107      	str	r7, [r0, #16]
 8013d5e:	e7a3      	b.n	8013ca8 <__mdiff+0x34>
 8013d60:	f856 8b04 	ldr.w	r8, [r6], #4
 8013d64:	fa11 f288 	uxtah	r2, r1, r8
 8013d68:	1414      	asrs	r4, r2, #16
 8013d6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013d6e:	b292      	uxth	r2, r2
 8013d70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013d74:	f84e 2b04 	str.w	r2, [lr], #4
 8013d78:	1421      	asrs	r1, r4, #16
 8013d7a:	e7e0      	b.n	8013d3e <__mdiff+0xca>
 8013d7c:	3f01      	subs	r7, #1
 8013d7e:	e7ea      	b.n	8013d56 <__mdiff+0xe2>
 8013d80:	08014a3b 	.word	0x08014a3b
 8013d84:	08014a4c 	.word	0x08014a4c

08013d88 <__d2b>:
 8013d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013d8c:	4689      	mov	r9, r1
 8013d8e:	2101      	movs	r1, #1
 8013d90:	ec57 6b10 	vmov	r6, r7, d0
 8013d94:	4690      	mov	r8, r2
 8013d96:	f7ff fccf 	bl	8013738 <_Balloc>
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	b930      	cbnz	r0, 8013dac <__d2b+0x24>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	4b25      	ldr	r3, [pc, #148]	; (8013e38 <__d2b+0xb0>)
 8013da2:	4826      	ldr	r0, [pc, #152]	; (8013e3c <__d2b+0xb4>)
 8013da4:	f240 310a 	movw	r1, #778	; 0x30a
 8013da8:	f000 fb74 	bl	8014494 <__assert_func>
 8013dac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013db4:	bb35      	cbnz	r5, 8013e04 <__d2b+0x7c>
 8013db6:	2e00      	cmp	r6, #0
 8013db8:	9301      	str	r3, [sp, #4]
 8013dba:	d028      	beq.n	8013e0e <__d2b+0x86>
 8013dbc:	4668      	mov	r0, sp
 8013dbe:	9600      	str	r6, [sp, #0]
 8013dc0:	f7ff fd82 	bl	80138c8 <__lo0bits>
 8013dc4:	9900      	ldr	r1, [sp, #0]
 8013dc6:	b300      	cbz	r0, 8013e0a <__d2b+0x82>
 8013dc8:	9a01      	ldr	r2, [sp, #4]
 8013dca:	f1c0 0320 	rsb	r3, r0, #32
 8013dce:	fa02 f303 	lsl.w	r3, r2, r3
 8013dd2:	430b      	orrs	r3, r1
 8013dd4:	40c2      	lsrs	r2, r0
 8013dd6:	6163      	str	r3, [r4, #20]
 8013dd8:	9201      	str	r2, [sp, #4]
 8013dda:	9b01      	ldr	r3, [sp, #4]
 8013ddc:	61a3      	str	r3, [r4, #24]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	bf14      	ite	ne
 8013de2:	2202      	movne	r2, #2
 8013de4:	2201      	moveq	r2, #1
 8013de6:	6122      	str	r2, [r4, #16]
 8013de8:	b1d5      	cbz	r5, 8013e20 <__d2b+0x98>
 8013dea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013dee:	4405      	add	r5, r0
 8013df0:	f8c9 5000 	str.w	r5, [r9]
 8013df4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013df8:	f8c8 0000 	str.w	r0, [r8]
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	b003      	add	sp, #12
 8013e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013e08:	e7d5      	b.n	8013db6 <__d2b+0x2e>
 8013e0a:	6161      	str	r1, [r4, #20]
 8013e0c:	e7e5      	b.n	8013dda <__d2b+0x52>
 8013e0e:	a801      	add	r0, sp, #4
 8013e10:	f7ff fd5a 	bl	80138c8 <__lo0bits>
 8013e14:	9b01      	ldr	r3, [sp, #4]
 8013e16:	6163      	str	r3, [r4, #20]
 8013e18:	2201      	movs	r2, #1
 8013e1a:	6122      	str	r2, [r4, #16]
 8013e1c:	3020      	adds	r0, #32
 8013e1e:	e7e3      	b.n	8013de8 <__d2b+0x60>
 8013e20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013e28:	f8c9 0000 	str.w	r0, [r9]
 8013e2c:	6918      	ldr	r0, [r3, #16]
 8013e2e:	f7ff fd2b 	bl	8013888 <__hi0bits>
 8013e32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e36:	e7df      	b.n	8013df8 <__d2b+0x70>
 8013e38:	08014a3b 	.word	0x08014a3b
 8013e3c:	08014a4c 	.word	0x08014a4c

08013e40 <_calloc_r>:
 8013e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e42:	fba1 2402 	umull	r2, r4, r1, r2
 8013e46:	b94c      	cbnz	r4, 8013e5c <_calloc_r+0x1c>
 8013e48:	4611      	mov	r1, r2
 8013e4a:	9201      	str	r2, [sp, #4]
 8013e4c:	f7fd feb0 	bl	8011bb0 <_malloc_r>
 8013e50:	9a01      	ldr	r2, [sp, #4]
 8013e52:	4605      	mov	r5, r0
 8013e54:	b930      	cbnz	r0, 8013e64 <_calloc_r+0x24>
 8013e56:	4628      	mov	r0, r5
 8013e58:	b003      	add	sp, #12
 8013e5a:	bd30      	pop	{r4, r5, pc}
 8013e5c:	220c      	movs	r2, #12
 8013e5e:	6002      	str	r2, [r0, #0]
 8013e60:	2500      	movs	r5, #0
 8013e62:	e7f8      	b.n	8013e56 <_calloc_r+0x16>
 8013e64:	4621      	mov	r1, r4
 8013e66:	f7fd fe7a 	bl	8011b5e <memset>
 8013e6a:	e7f4      	b.n	8013e56 <_calloc_r+0x16>

08013e6c <_free_r>:
 8013e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e6e:	2900      	cmp	r1, #0
 8013e70:	d044      	beq.n	8013efc <_free_r+0x90>
 8013e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e76:	9001      	str	r0, [sp, #4]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8013e7e:	bfb8      	it	lt
 8013e80:	18e4      	addlt	r4, r4, r3
 8013e82:	f7ff fc4d 	bl	8013720 <__malloc_lock>
 8013e86:	4a1e      	ldr	r2, [pc, #120]	; (8013f00 <_free_r+0x94>)
 8013e88:	9801      	ldr	r0, [sp, #4]
 8013e8a:	6813      	ldr	r3, [r2, #0]
 8013e8c:	b933      	cbnz	r3, 8013e9c <_free_r+0x30>
 8013e8e:	6063      	str	r3, [r4, #4]
 8013e90:	6014      	str	r4, [r2, #0]
 8013e92:	b003      	add	sp, #12
 8013e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e98:	f7ff bc48 	b.w	801372c <__malloc_unlock>
 8013e9c:	42a3      	cmp	r3, r4
 8013e9e:	d908      	bls.n	8013eb2 <_free_r+0x46>
 8013ea0:	6825      	ldr	r5, [r4, #0]
 8013ea2:	1961      	adds	r1, r4, r5
 8013ea4:	428b      	cmp	r3, r1
 8013ea6:	bf01      	itttt	eq
 8013ea8:	6819      	ldreq	r1, [r3, #0]
 8013eaa:	685b      	ldreq	r3, [r3, #4]
 8013eac:	1949      	addeq	r1, r1, r5
 8013eae:	6021      	streq	r1, [r4, #0]
 8013eb0:	e7ed      	b.n	8013e8e <_free_r+0x22>
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	b10b      	cbz	r3, 8013ebc <_free_r+0x50>
 8013eb8:	42a3      	cmp	r3, r4
 8013eba:	d9fa      	bls.n	8013eb2 <_free_r+0x46>
 8013ebc:	6811      	ldr	r1, [r2, #0]
 8013ebe:	1855      	adds	r5, r2, r1
 8013ec0:	42a5      	cmp	r5, r4
 8013ec2:	d10b      	bne.n	8013edc <_free_r+0x70>
 8013ec4:	6824      	ldr	r4, [r4, #0]
 8013ec6:	4421      	add	r1, r4
 8013ec8:	1854      	adds	r4, r2, r1
 8013eca:	42a3      	cmp	r3, r4
 8013ecc:	6011      	str	r1, [r2, #0]
 8013ece:	d1e0      	bne.n	8013e92 <_free_r+0x26>
 8013ed0:	681c      	ldr	r4, [r3, #0]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	6053      	str	r3, [r2, #4]
 8013ed6:	4421      	add	r1, r4
 8013ed8:	6011      	str	r1, [r2, #0]
 8013eda:	e7da      	b.n	8013e92 <_free_r+0x26>
 8013edc:	d902      	bls.n	8013ee4 <_free_r+0x78>
 8013ede:	230c      	movs	r3, #12
 8013ee0:	6003      	str	r3, [r0, #0]
 8013ee2:	e7d6      	b.n	8013e92 <_free_r+0x26>
 8013ee4:	6825      	ldr	r5, [r4, #0]
 8013ee6:	1961      	adds	r1, r4, r5
 8013ee8:	428b      	cmp	r3, r1
 8013eea:	bf04      	itt	eq
 8013eec:	6819      	ldreq	r1, [r3, #0]
 8013eee:	685b      	ldreq	r3, [r3, #4]
 8013ef0:	6063      	str	r3, [r4, #4]
 8013ef2:	bf04      	itt	eq
 8013ef4:	1949      	addeq	r1, r1, r5
 8013ef6:	6021      	streq	r1, [r4, #0]
 8013ef8:	6054      	str	r4, [r2, #4]
 8013efa:	e7ca      	b.n	8013e92 <_free_r+0x26>
 8013efc:	b003      	add	sp, #12
 8013efe:	bd30      	pop	{r4, r5, pc}
 8013f00:	240056c4 	.word	0x240056c4

08013f04 <__ssputs_r>:
 8013f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f08:	688e      	ldr	r6, [r1, #8]
 8013f0a:	429e      	cmp	r6, r3
 8013f0c:	4682      	mov	sl, r0
 8013f0e:	460c      	mov	r4, r1
 8013f10:	4690      	mov	r8, r2
 8013f12:	461f      	mov	r7, r3
 8013f14:	d838      	bhi.n	8013f88 <__ssputs_r+0x84>
 8013f16:	898a      	ldrh	r2, [r1, #12]
 8013f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f1c:	d032      	beq.n	8013f84 <__ssputs_r+0x80>
 8013f1e:	6825      	ldr	r5, [r4, #0]
 8013f20:	6909      	ldr	r1, [r1, #16]
 8013f22:	eba5 0901 	sub.w	r9, r5, r1
 8013f26:	6965      	ldr	r5, [r4, #20]
 8013f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f30:	3301      	adds	r3, #1
 8013f32:	444b      	add	r3, r9
 8013f34:	106d      	asrs	r5, r5, #1
 8013f36:	429d      	cmp	r5, r3
 8013f38:	bf38      	it	cc
 8013f3a:	461d      	movcc	r5, r3
 8013f3c:	0553      	lsls	r3, r2, #21
 8013f3e:	d531      	bpl.n	8013fa4 <__ssputs_r+0xa0>
 8013f40:	4629      	mov	r1, r5
 8013f42:	f7fd fe35 	bl	8011bb0 <_malloc_r>
 8013f46:	4606      	mov	r6, r0
 8013f48:	b950      	cbnz	r0, 8013f60 <__ssputs_r+0x5c>
 8013f4a:	230c      	movs	r3, #12
 8013f4c:	f8ca 3000 	str.w	r3, [sl]
 8013f50:	89a3      	ldrh	r3, [r4, #12]
 8013f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f56:	81a3      	strh	r3, [r4, #12]
 8013f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f60:	6921      	ldr	r1, [r4, #16]
 8013f62:	464a      	mov	r2, r9
 8013f64:	f7fd fded 	bl	8011b42 <memcpy>
 8013f68:	89a3      	ldrh	r3, [r4, #12]
 8013f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f72:	81a3      	strh	r3, [r4, #12]
 8013f74:	6126      	str	r6, [r4, #16]
 8013f76:	6165      	str	r5, [r4, #20]
 8013f78:	444e      	add	r6, r9
 8013f7a:	eba5 0509 	sub.w	r5, r5, r9
 8013f7e:	6026      	str	r6, [r4, #0]
 8013f80:	60a5      	str	r5, [r4, #8]
 8013f82:	463e      	mov	r6, r7
 8013f84:	42be      	cmp	r6, r7
 8013f86:	d900      	bls.n	8013f8a <__ssputs_r+0x86>
 8013f88:	463e      	mov	r6, r7
 8013f8a:	6820      	ldr	r0, [r4, #0]
 8013f8c:	4632      	mov	r2, r6
 8013f8e:	4641      	mov	r1, r8
 8013f90:	f000 fae4 	bl	801455c <memmove>
 8013f94:	68a3      	ldr	r3, [r4, #8]
 8013f96:	1b9b      	subs	r3, r3, r6
 8013f98:	60a3      	str	r3, [r4, #8]
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	4433      	add	r3, r6
 8013f9e:	6023      	str	r3, [r4, #0]
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	e7db      	b.n	8013f5c <__ssputs_r+0x58>
 8013fa4:	462a      	mov	r2, r5
 8013fa6:	f000 faf3 	bl	8014590 <_realloc_r>
 8013faa:	4606      	mov	r6, r0
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d1e1      	bne.n	8013f74 <__ssputs_r+0x70>
 8013fb0:	6921      	ldr	r1, [r4, #16]
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	f7ff ff5a 	bl	8013e6c <_free_r>
 8013fb8:	e7c7      	b.n	8013f4a <__ssputs_r+0x46>
	...

08013fbc <_svfiprintf_r>:
 8013fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc0:	4698      	mov	r8, r3
 8013fc2:	898b      	ldrh	r3, [r1, #12]
 8013fc4:	061b      	lsls	r3, r3, #24
 8013fc6:	b09d      	sub	sp, #116	; 0x74
 8013fc8:	4607      	mov	r7, r0
 8013fca:	460d      	mov	r5, r1
 8013fcc:	4614      	mov	r4, r2
 8013fce:	d50e      	bpl.n	8013fee <_svfiprintf_r+0x32>
 8013fd0:	690b      	ldr	r3, [r1, #16]
 8013fd2:	b963      	cbnz	r3, 8013fee <_svfiprintf_r+0x32>
 8013fd4:	2140      	movs	r1, #64	; 0x40
 8013fd6:	f7fd fdeb 	bl	8011bb0 <_malloc_r>
 8013fda:	6028      	str	r0, [r5, #0]
 8013fdc:	6128      	str	r0, [r5, #16]
 8013fde:	b920      	cbnz	r0, 8013fea <_svfiprintf_r+0x2e>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fe8:	e0d1      	b.n	801418e <_svfiprintf_r+0x1d2>
 8013fea:	2340      	movs	r3, #64	; 0x40
 8013fec:	616b      	str	r3, [r5, #20]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff2:	2320      	movs	r3, #32
 8013ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ffc:	2330      	movs	r3, #48	; 0x30
 8013ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80141a8 <_svfiprintf_r+0x1ec>
 8014002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014006:	f04f 0901 	mov.w	r9, #1
 801400a:	4623      	mov	r3, r4
 801400c:	469a      	mov	sl, r3
 801400e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014012:	b10a      	cbz	r2, 8014018 <_svfiprintf_r+0x5c>
 8014014:	2a25      	cmp	r2, #37	; 0x25
 8014016:	d1f9      	bne.n	801400c <_svfiprintf_r+0x50>
 8014018:	ebba 0b04 	subs.w	fp, sl, r4
 801401c:	d00b      	beq.n	8014036 <_svfiprintf_r+0x7a>
 801401e:	465b      	mov	r3, fp
 8014020:	4622      	mov	r2, r4
 8014022:	4629      	mov	r1, r5
 8014024:	4638      	mov	r0, r7
 8014026:	f7ff ff6d 	bl	8013f04 <__ssputs_r>
 801402a:	3001      	adds	r0, #1
 801402c:	f000 80aa 	beq.w	8014184 <_svfiprintf_r+0x1c8>
 8014030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014032:	445a      	add	r2, fp
 8014034:	9209      	str	r2, [sp, #36]	; 0x24
 8014036:	f89a 3000 	ldrb.w	r3, [sl]
 801403a:	2b00      	cmp	r3, #0
 801403c:	f000 80a2 	beq.w	8014184 <_svfiprintf_r+0x1c8>
 8014040:	2300      	movs	r3, #0
 8014042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801404a:	f10a 0a01 	add.w	sl, sl, #1
 801404e:	9304      	str	r3, [sp, #16]
 8014050:	9307      	str	r3, [sp, #28]
 8014052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014056:	931a      	str	r3, [sp, #104]	; 0x68
 8014058:	4654      	mov	r4, sl
 801405a:	2205      	movs	r2, #5
 801405c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014060:	4851      	ldr	r0, [pc, #324]	; (80141a8 <_svfiprintf_r+0x1ec>)
 8014062:	f7ec f945 	bl	80002f0 <memchr>
 8014066:	9a04      	ldr	r2, [sp, #16]
 8014068:	b9d8      	cbnz	r0, 80140a2 <_svfiprintf_r+0xe6>
 801406a:	06d0      	lsls	r0, r2, #27
 801406c:	bf44      	itt	mi
 801406e:	2320      	movmi	r3, #32
 8014070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014074:	0711      	lsls	r1, r2, #28
 8014076:	bf44      	itt	mi
 8014078:	232b      	movmi	r3, #43	; 0x2b
 801407a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801407e:	f89a 3000 	ldrb.w	r3, [sl]
 8014082:	2b2a      	cmp	r3, #42	; 0x2a
 8014084:	d015      	beq.n	80140b2 <_svfiprintf_r+0xf6>
 8014086:	9a07      	ldr	r2, [sp, #28]
 8014088:	4654      	mov	r4, sl
 801408a:	2000      	movs	r0, #0
 801408c:	f04f 0c0a 	mov.w	ip, #10
 8014090:	4621      	mov	r1, r4
 8014092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014096:	3b30      	subs	r3, #48	; 0x30
 8014098:	2b09      	cmp	r3, #9
 801409a:	d94e      	bls.n	801413a <_svfiprintf_r+0x17e>
 801409c:	b1b0      	cbz	r0, 80140cc <_svfiprintf_r+0x110>
 801409e:	9207      	str	r2, [sp, #28]
 80140a0:	e014      	b.n	80140cc <_svfiprintf_r+0x110>
 80140a2:	eba0 0308 	sub.w	r3, r0, r8
 80140a6:	fa09 f303 	lsl.w	r3, r9, r3
 80140aa:	4313      	orrs	r3, r2
 80140ac:	9304      	str	r3, [sp, #16]
 80140ae:	46a2      	mov	sl, r4
 80140b0:	e7d2      	b.n	8014058 <_svfiprintf_r+0x9c>
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	1d19      	adds	r1, r3, #4
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	9103      	str	r1, [sp, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	bfbb      	ittet	lt
 80140be:	425b      	neglt	r3, r3
 80140c0:	f042 0202 	orrlt.w	r2, r2, #2
 80140c4:	9307      	strge	r3, [sp, #28]
 80140c6:	9307      	strlt	r3, [sp, #28]
 80140c8:	bfb8      	it	lt
 80140ca:	9204      	strlt	r2, [sp, #16]
 80140cc:	7823      	ldrb	r3, [r4, #0]
 80140ce:	2b2e      	cmp	r3, #46	; 0x2e
 80140d0:	d10c      	bne.n	80140ec <_svfiprintf_r+0x130>
 80140d2:	7863      	ldrb	r3, [r4, #1]
 80140d4:	2b2a      	cmp	r3, #42	; 0x2a
 80140d6:	d135      	bne.n	8014144 <_svfiprintf_r+0x188>
 80140d8:	9b03      	ldr	r3, [sp, #12]
 80140da:	1d1a      	adds	r2, r3, #4
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	9203      	str	r2, [sp, #12]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	bfb8      	it	lt
 80140e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80140e8:	3402      	adds	r4, #2
 80140ea:	9305      	str	r3, [sp, #20]
 80140ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80141b8 <_svfiprintf_r+0x1fc>
 80140f0:	7821      	ldrb	r1, [r4, #0]
 80140f2:	2203      	movs	r2, #3
 80140f4:	4650      	mov	r0, sl
 80140f6:	f7ec f8fb 	bl	80002f0 <memchr>
 80140fa:	b140      	cbz	r0, 801410e <_svfiprintf_r+0x152>
 80140fc:	2340      	movs	r3, #64	; 0x40
 80140fe:	eba0 000a 	sub.w	r0, r0, sl
 8014102:	fa03 f000 	lsl.w	r0, r3, r0
 8014106:	9b04      	ldr	r3, [sp, #16]
 8014108:	4303      	orrs	r3, r0
 801410a:	3401      	adds	r4, #1
 801410c:	9304      	str	r3, [sp, #16]
 801410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014112:	4826      	ldr	r0, [pc, #152]	; (80141ac <_svfiprintf_r+0x1f0>)
 8014114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014118:	2206      	movs	r2, #6
 801411a:	f7ec f8e9 	bl	80002f0 <memchr>
 801411e:	2800      	cmp	r0, #0
 8014120:	d038      	beq.n	8014194 <_svfiprintf_r+0x1d8>
 8014122:	4b23      	ldr	r3, [pc, #140]	; (80141b0 <_svfiprintf_r+0x1f4>)
 8014124:	bb1b      	cbnz	r3, 801416e <_svfiprintf_r+0x1b2>
 8014126:	9b03      	ldr	r3, [sp, #12]
 8014128:	3307      	adds	r3, #7
 801412a:	f023 0307 	bic.w	r3, r3, #7
 801412e:	3308      	adds	r3, #8
 8014130:	9303      	str	r3, [sp, #12]
 8014132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014134:	4433      	add	r3, r6
 8014136:	9309      	str	r3, [sp, #36]	; 0x24
 8014138:	e767      	b.n	801400a <_svfiprintf_r+0x4e>
 801413a:	fb0c 3202 	mla	r2, ip, r2, r3
 801413e:	460c      	mov	r4, r1
 8014140:	2001      	movs	r0, #1
 8014142:	e7a5      	b.n	8014090 <_svfiprintf_r+0xd4>
 8014144:	2300      	movs	r3, #0
 8014146:	3401      	adds	r4, #1
 8014148:	9305      	str	r3, [sp, #20]
 801414a:	4619      	mov	r1, r3
 801414c:	f04f 0c0a 	mov.w	ip, #10
 8014150:	4620      	mov	r0, r4
 8014152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014156:	3a30      	subs	r2, #48	; 0x30
 8014158:	2a09      	cmp	r2, #9
 801415a:	d903      	bls.n	8014164 <_svfiprintf_r+0x1a8>
 801415c:	2b00      	cmp	r3, #0
 801415e:	d0c5      	beq.n	80140ec <_svfiprintf_r+0x130>
 8014160:	9105      	str	r1, [sp, #20]
 8014162:	e7c3      	b.n	80140ec <_svfiprintf_r+0x130>
 8014164:	fb0c 2101 	mla	r1, ip, r1, r2
 8014168:	4604      	mov	r4, r0
 801416a:	2301      	movs	r3, #1
 801416c:	e7f0      	b.n	8014150 <_svfiprintf_r+0x194>
 801416e:	ab03      	add	r3, sp, #12
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	462a      	mov	r2, r5
 8014174:	4b0f      	ldr	r3, [pc, #60]	; (80141b4 <_svfiprintf_r+0x1f8>)
 8014176:	a904      	add	r1, sp, #16
 8014178:	4638      	mov	r0, r7
 801417a:	f7fd fe1d 	bl	8011db8 <_printf_float>
 801417e:	1c42      	adds	r2, r0, #1
 8014180:	4606      	mov	r6, r0
 8014182:	d1d6      	bne.n	8014132 <_svfiprintf_r+0x176>
 8014184:	89ab      	ldrh	r3, [r5, #12]
 8014186:	065b      	lsls	r3, r3, #25
 8014188:	f53f af2c 	bmi.w	8013fe4 <_svfiprintf_r+0x28>
 801418c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801418e:	b01d      	add	sp, #116	; 0x74
 8014190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014194:	ab03      	add	r3, sp, #12
 8014196:	9300      	str	r3, [sp, #0]
 8014198:	462a      	mov	r2, r5
 801419a:	4b06      	ldr	r3, [pc, #24]	; (80141b4 <_svfiprintf_r+0x1f8>)
 801419c:	a904      	add	r1, sp, #16
 801419e:	4638      	mov	r0, r7
 80141a0:	f7fe f896 	bl	80122d0 <_printf_i>
 80141a4:	e7eb      	b.n	801417e <_svfiprintf_r+0x1c2>
 80141a6:	bf00      	nop
 80141a8:	08014ba4 	.word	0x08014ba4
 80141ac:	08014bae 	.word	0x08014bae
 80141b0:	08011db9 	.word	0x08011db9
 80141b4:	08013f05 	.word	0x08013f05
 80141b8:	08014baa 	.word	0x08014baa

080141bc <__sfputc_r>:
 80141bc:	6893      	ldr	r3, [r2, #8]
 80141be:	3b01      	subs	r3, #1
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	b410      	push	{r4}
 80141c4:	6093      	str	r3, [r2, #8]
 80141c6:	da08      	bge.n	80141da <__sfputc_r+0x1e>
 80141c8:	6994      	ldr	r4, [r2, #24]
 80141ca:	42a3      	cmp	r3, r4
 80141cc:	db01      	blt.n	80141d2 <__sfputc_r+0x16>
 80141ce:	290a      	cmp	r1, #10
 80141d0:	d103      	bne.n	80141da <__sfputc_r+0x1e>
 80141d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141d6:	f7fe ba7f 	b.w	80126d8 <__swbuf_r>
 80141da:	6813      	ldr	r3, [r2, #0]
 80141dc:	1c58      	adds	r0, r3, #1
 80141de:	6010      	str	r0, [r2, #0]
 80141e0:	7019      	strb	r1, [r3, #0]
 80141e2:	4608      	mov	r0, r1
 80141e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <__sfputs_r>:
 80141ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	4614      	mov	r4, r2
 80141f2:	18d5      	adds	r5, r2, r3
 80141f4:	42ac      	cmp	r4, r5
 80141f6:	d101      	bne.n	80141fc <__sfputs_r+0x12>
 80141f8:	2000      	movs	r0, #0
 80141fa:	e007      	b.n	801420c <__sfputs_r+0x22>
 80141fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014200:	463a      	mov	r2, r7
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff ffda 	bl	80141bc <__sfputc_r>
 8014208:	1c43      	adds	r3, r0, #1
 801420a:	d1f3      	bne.n	80141f4 <__sfputs_r+0xa>
 801420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014210 <_vfiprintf_r>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	460d      	mov	r5, r1
 8014216:	b09d      	sub	sp, #116	; 0x74
 8014218:	4614      	mov	r4, r2
 801421a:	4698      	mov	r8, r3
 801421c:	4606      	mov	r6, r0
 801421e:	b118      	cbz	r0, 8014228 <_vfiprintf_r+0x18>
 8014220:	6983      	ldr	r3, [r0, #24]
 8014222:	b90b      	cbnz	r3, 8014228 <_vfiprintf_r+0x18>
 8014224:	f7fd fbc8 	bl	80119b8 <__sinit>
 8014228:	4b89      	ldr	r3, [pc, #548]	; (8014450 <_vfiprintf_r+0x240>)
 801422a:	429d      	cmp	r5, r3
 801422c:	d11b      	bne.n	8014266 <_vfiprintf_r+0x56>
 801422e:	6875      	ldr	r5, [r6, #4]
 8014230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014232:	07d9      	lsls	r1, r3, #31
 8014234:	d405      	bmi.n	8014242 <_vfiprintf_r+0x32>
 8014236:	89ab      	ldrh	r3, [r5, #12]
 8014238:	059a      	lsls	r2, r3, #22
 801423a:	d402      	bmi.n	8014242 <_vfiprintf_r+0x32>
 801423c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801423e:	f7fd fc7e 	bl	8011b3e <__retarget_lock_acquire_recursive>
 8014242:	89ab      	ldrh	r3, [r5, #12]
 8014244:	071b      	lsls	r3, r3, #28
 8014246:	d501      	bpl.n	801424c <_vfiprintf_r+0x3c>
 8014248:	692b      	ldr	r3, [r5, #16]
 801424a:	b9eb      	cbnz	r3, 8014288 <_vfiprintf_r+0x78>
 801424c:	4629      	mov	r1, r5
 801424e:	4630      	mov	r0, r6
 8014250:	f7fe faa6 	bl	80127a0 <__swsetup_r>
 8014254:	b1c0      	cbz	r0, 8014288 <_vfiprintf_r+0x78>
 8014256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014258:	07dc      	lsls	r4, r3, #31
 801425a:	d50e      	bpl.n	801427a <_vfiprintf_r+0x6a>
 801425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014260:	b01d      	add	sp, #116	; 0x74
 8014262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014266:	4b7b      	ldr	r3, [pc, #492]	; (8014454 <_vfiprintf_r+0x244>)
 8014268:	429d      	cmp	r5, r3
 801426a:	d101      	bne.n	8014270 <_vfiprintf_r+0x60>
 801426c:	68b5      	ldr	r5, [r6, #8]
 801426e:	e7df      	b.n	8014230 <_vfiprintf_r+0x20>
 8014270:	4b79      	ldr	r3, [pc, #484]	; (8014458 <_vfiprintf_r+0x248>)
 8014272:	429d      	cmp	r5, r3
 8014274:	bf08      	it	eq
 8014276:	68f5      	ldreq	r5, [r6, #12]
 8014278:	e7da      	b.n	8014230 <_vfiprintf_r+0x20>
 801427a:	89ab      	ldrh	r3, [r5, #12]
 801427c:	0598      	lsls	r0, r3, #22
 801427e:	d4ed      	bmi.n	801425c <_vfiprintf_r+0x4c>
 8014280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014282:	f7fd fc5d 	bl	8011b40 <__retarget_lock_release_recursive>
 8014286:	e7e9      	b.n	801425c <_vfiprintf_r+0x4c>
 8014288:	2300      	movs	r3, #0
 801428a:	9309      	str	r3, [sp, #36]	; 0x24
 801428c:	2320      	movs	r3, #32
 801428e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014292:	f8cd 800c 	str.w	r8, [sp, #12]
 8014296:	2330      	movs	r3, #48	; 0x30
 8014298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801445c <_vfiprintf_r+0x24c>
 801429c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142a0:	f04f 0901 	mov.w	r9, #1
 80142a4:	4623      	mov	r3, r4
 80142a6:	469a      	mov	sl, r3
 80142a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142ac:	b10a      	cbz	r2, 80142b2 <_vfiprintf_r+0xa2>
 80142ae:	2a25      	cmp	r2, #37	; 0x25
 80142b0:	d1f9      	bne.n	80142a6 <_vfiprintf_r+0x96>
 80142b2:	ebba 0b04 	subs.w	fp, sl, r4
 80142b6:	d00b      	beq.n	80142d0 <_vfiprintf_r+0xc0>
 80142b8:	465b      	mov	r3, fp
 80142ba:	4622      	mov	r2, r4
 80142bc:	4629      	mov	r1, r5
 80142be:	4630      	mov	r0, r6
 80142c0:	f7ff ff93 	bl	80141ea <__sfputs_r>
 80142c4:	3001      	adds	r0, #1
 80142c6:	f000 80aa 	beq.w	801441e <_vfiprintf_r+0x20e>
 80142ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142cc:	445a      	add	r2, fp
 80142ce:	9209      	str	r2, [sp, #36]	; 0x24
 80142d0:	f89a 3000 	ldrb.w	r3, [sl]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f000 80a2 	beq.w	801441e <_vfiprintf_r+0x20e>
 80142da:	2300      	movs	r3, #0
 80142dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142e4:	f10a 0a01 	add.w	sl, sl, #1
 80142e8:	9304      	str	r3, [sp, #16]
 80142ea:	9307      	str	r3, [sp, #28]
 80142ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142f0:	931a      	str	r3, [sp, #104]	; 0x68
 80142f2:	4654      	mov	r4, sl
 80142f4:	2205      	movs	r2, #5
 80142f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fa:	4858      	ldr	r0, [pc, #352]	; (801445c <_vfiprintf_r+0x24c>)
 80142fc:	f7eb fff8 	bl	80002f0 <memchr>
 8014300:	9a04      	ldr	r2, [sp, #16]
 8014302:	b9d8      	cbnz	r0, 801433c <_vfiprintf_r+0x12c>
 8014304:	06d1      	lsls	r1, r2, #27
 8014306:	bf44      	itt	mi
 8014308:	2320      	movmi	r3, #32
 801430a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801430e:	0713      	lsls	r3, r2, #28
 8014310:	bf44      	itt	mi
 8014312:	232b      	movmi	r3, #43	; 0x2b
 8014314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014318:	f89a 3000 	ldrb.w	r3, [sl]
 801431c:	2b2a      	cmp	r3, #42	; 0x2a
 801431e:	d015      	beq.n	801434c <_vfiprintf_r+0x13c>
 8014320:	9a07      	ldr	r2, [sp, #28]
 8014322:	4654      	mov	r4, sl
 8014324:	2000      	movs	r0, #0
 8014326:	f04f 0c0a 	mov.w	ip, #10
 801432a:	4621      	mov	r1, r4
 801432c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014330:	3b30      	subs	r3, #48	; 0x30
 8014332:	2b09      	cmp	r3, #9
 8014334:	d94e      	bls.n	80143d4 <_vfiprintf_r+0x1c4>
 8014336:	b1b0      	cbz	r0, 8014366 <_vfiprintf_r+0x156>
 8014338:	9207      	str	r2, [sp, #28]
 801433a:	e014      	b.n	8014366 <_vfiprintf_r+0x156>
 801433c:	eba0 0308 	sub.w	r3, r0, r8
 8014340:	fa09 f303 	lsl.w	r3, r9, r3
 8014344:	4313      	orrs	r3, r2
 8014346:	9304      	str	r3, [sp, #16]
 8014348:	46a2      	mov	sl, r4
 801434a:	e7d2      	b.n	80142f2 <_vfiprintf_r+0xe2>
 801434c:	9b03      	ldr	r3, [sp, #12]
 801434e:	1d19      	adds	r1, r3, #4
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	9103      	str	r1, [sp, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	bfbb      	ittet	lt
 8014358:	425b      	neglt	r3, r3
 801435a:	f042 0202 	orrlt.w	r2, r2, #2
 801435e:	9307      	strge	r3, [sp, #28]
 8014360:	9307      	strlt	r3, [sp, #28]
 8014362:	bfb8      	it	lt
 8014364:	9204      	strlt	r2, [sp, #16]
 8014366:	7823      	ldrb	r3, [r4, #0]
 8014368:	2b2e      	cmp	r3, #46	; 0x2e
 801436a:	d10c      	bne.n	8014386 <_vfiprintf_r+0x176>
 801436c:	7863      	ldrb	r3, [r4, #1]
 801436e:	2b2a      	cmp	r3, #42	; 0x2a
 8014370:	d135      	bne.n	80143de <_vfiprintf_r+0x1ce>
 8014372:	9b03      	ldr	r3, [sp, #12]
 8014374:	1d1a      	adds	r2, r3, #4
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	9203      	str	r2, [sp, #12]
 801437a:	2b00      	cmp	r3, #0
 801437c:	bfb8      	it	lt
 801437e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014382:	3402      	adds	r4, #2
 8014384:	9305      	str	r3, [sp, #20]
 8014386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801446c <_vfiprintf_r+0x25c>
 801438a:	7821      	ldrb	r1, [r4, #0]
 801438c:	2203      	movs	r2, #3
 801438e:	4650      	mov	r0, sl
 8014390:	f7eb ffae 	bl	80002f0 <memchr>
 8014394:	b140      	cbz	r0, 80143a8 <_vfiprintf_r+0x198>
 8014396:	2340      	movs	r3, #64	; 0x40
 8014398:	eba0 000a 	sub.w	r0, r0, sl
 801439c:	fa03 f000 	lsl.w	r0, r3, r0
 80143a0:	9b04      	ldr	r3, [sp, #16]
 80143a2:	4303      	orrs	r3, r0
 80143a4:	3401      	adds	r4, #1
 80143a6:	9304      	str	r3, [sp, #16]
 80143a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ac:	482c      	ldr	r0, [pc, #176]	; (8014460 <_vfiprintf_r+0x250>)
 80143ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143b2:	2206      	movs	r2, #6
 80143b4:	f7eb ff9c 	bl	80002f0 <memchr>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d03f      	beq.n	801443c <_vfiprintf_r+0x22c>
 80143bc:	4b29      	ldr	r3, [pc, #164]	; (8014464 <_vfiprintf_r+0x254>)
 80143be:	bb1b      	cbnz	r3, 8014408 <_vfiprintf_r+0x1f8>
 80143c0:	9b03      	ldr	r3, [sp, #12]
 80143c2:	3307      	adds	r3, #7
 80143c4:	f023 0307 	bic.w	r3, r3, #7
 80143c8:	3308      	adds	r3, #8
 80143ca:	9303      	str	r3, [sp, #12]
 80143cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143ce:	443b      	add	r3, r7
 80143d0:	9309      	str	r3, [sp, #36]	; 0x24
 80143d2:	e767      	b.n	80142a4 <_vfiprintf_r+0x94>
 80143d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80143d8:	460c      	mov	r4, r1
 80143da:	2001      	movs	r0, #1
 80143dc:	e7a5      	b.n	801432a <_vfiprintf_r+0x11a>
 80143de:	2300      	movs	r3, #0
 80143e0:	3401      	adds	r4, #1
 80143e2:	9305      	str	r3, [sp, #20]
 80143e4:	4619      	mov	r1, r3
 80143e6:	f04f 0c0a 	mov.w	ip, #10
 80143ea:	4620      	mov	r0, r4
 80143ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143f0:	3a30      	subs	r2, #48	; 0x30
 80143f2:	2a09      	cmp	r2, #9
 80143f4:	d903      	bls.n	80143fe <_vfiprintf_r+0x1ee>
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d0c5      	beq.n	8014386 <_vfiprintf_r+0x176>
 80143fa:	9105      	str	r1, [sp, #20]
 80143fc:	e7c3      	b.n	8014386 <_vfiprintf_r+0x176>
 80143fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014402:	4604      	mov	r4, r0
 8014404:	2301      	movs	r3, #1
 8014406:	e7f0      	b.n	80143ea <_vfiprintf_r+0x1da>
 8014408:	ab03      	add	r3, sp, #12
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	462a      	mov	r2, r5
 801440e:	4b16      	ldr	r3, [pc, #88]	; (8014468 <_vfiprintf_r+0x258>)
 8014410:	a904      	add	r1, sp, #16
 8014412:	4630      	mov	r0, r6
 8014414:	f7fd fcd0 	bl	8011db8 <_printf_float>
 8014418:	4607      	mov	r7, r0
 801441a:	1c78      	adds	r0, r7, #1
 801441c:	d1d6      	bne.n	80143cc <_vfiprintf_r+0x1bc>
 801441e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014420:	07d9      	lsls	r1, r3, #31
 8014422:	d405      	bmi.n	8014430 <_vfiprintf_r+0x220>
 8014424:	89ab      	ldrh	r3, [r5, #12]
 8014426:	059a      	lsls	r2, r3, #22
 8014428:	d402      	bmi.n	8014430 <_vfiprintf_r+0x220>
 801442a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801442c:	f7fd fb88 	bl	8011b40 <__retarget_lock_release_recursive>
 8014430:	89ab      	ldrh	r3, [r5, #12]
 8014432:	065b      	lsls	r3, r3, #25
 8014434:	f53f af12 	bmi.w	801425c <_vfiprintf_r+0x4c>
 8014438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801443a:	e711      	b.n	8014260 <_vfiprintf_r+0x50>
 801443c:	ab03      	add	r3, sp, #12
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	462a      	mov	r2, r5
 8014442:	4b09      	ldr	r3, [pc, #36]	; (8014468 <_vfiprintf_r+0x258>)
 8014444:	a904      	add	r1, sp, #16
 8014446:	4630      	mov	r0, r6
 8014448:	f7fd ff42 	bl	80122d0 <_printf_i>
 801444c:	e7e4      	b.n	8014418 <_vfiprintf_r+0x208>
 801444e:	bf00      	nop
 8014450:	08014944 	.word	0x08014944
 8014454:	08014964 	.word	0x08014964
 8014458:	08014924 	.word	0x08014924
 801445c:	08014ba4 	.word	0x08014ba4
 8014460:	08014bae 	.word	0x08014bae
 8014464:	08011db9 	.word	0x08011db9
 8014468:	080141eb 	.word	0x080141eb
 801446c:	08014baa 	.word	0x08014baa

08014470 <_read_r>:
 8014470:	b538      	push	{r3, r4, r5, lr}
 8014472:	4d07      	ldr	r5, [pc, #28]	; (8014490 <_read_r+0x20>)
 8014474:	4604      	mov	r4, r0
 8014476:	4608      	mov	r0, r1
 8014478:	4611      	mov	r1, r2
 801447a:	2200      	movs	r2, #0
 801447c:	602a      	str	r2, [r5, #0]
 801447e:	461a      	mov	r2, r3
 8014480:	f7ee fe44 	bl	800310c <_read>
 8014484:	1c43      	adds	r3, r0, #1
 8014486:	d102      	bne.n	801448e <_read_r+0x1e>
 8014488:	682b      	ldr	r3, [r5, #0]
 801448a:	b103      	cbz	r3, 801448e <_read_r+0x1e>
 801448c:	6023      	str	r3, [r4, #0]
 801448e:	bd38      	pop	{r3, r4, r5, pc}
 8014490:	240056cc 	.word	0x240056cc

08014494 <__assert_func>:
 8014494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014496:	4614      	mov	r4, r2
 8014498:	461a      	mov	r2, r3
 801449a:	4b09      	ldr	r3, [pc, #36]	; (80144c0 <__assert_func+0x2c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4605      	mov	r5, r0
 80144a0:	68d8      	ldr	r0, [r3, #12]
 80144a2:	b14c      	cbz	r4, 80144b8 <__assert_func+0x24>
 80144a4:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <__assert_func+0x30>)
 80144a6:	9100      	str	r1, [sp, #0]
 80144a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80144ac:	4906      	ldr	r1, [pc, #24]	; (80144c8 <__assert_func+0x34>)
 80144ae:	462b      	mov	r3, r5
 80144b0:	f000 f80e 	bl	80144d0 <fiprintf>
 80144b4:	f000 f8a8 	bl	8014608 <abort>
 80144b8:	4b04      	ldr	r3, [pc, #16]	; (80144cc <__assert_func+0x38>)
 80144ba:	461c      	mov	r4, r3
 80144bc:	e7f3      	b.n	80144a6 <__assert_func+0x12>
 80144be:	bf00      	nop
 80144c0:	24000014 	.word	0x24000014
 80144c4:	08014bb5 	.word	0x08014bb5
 80144c8:	08014bc2 	.word	0x08014bc2
 80144cc:	08014bf0 	.word	0x08014bf0

080144d0 <fiprintf>:
 80144d0:	b40e      	push	{r1, r2, r3}
 80144d2:	b503      	push	{r0, r1, lr}
 80144d4:	4601      	mov	r1, r0
 80144d6:	ab03      	add	r3, sp, #12
 80144d8:	4805      	ldr	r0, [pc, #20]	; (80144f0 <fiprintf+0x20>)
 80144da:	f853 2b04 	ldr.w	r2, [r3], #4
 80144de:	6800      	ldr	r0, [r0, #0]
 80144e0:	9301      	str	r3, [sp, #4]
 80144e2:	f7ff fe95 	bl	8014210 <_vfiprintf_r>
 80144e6:	b002      	add	sp, #8
 80144e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80144ec:	b003      	add	sp, #12
 80144ee:	4770      	bx	lr
 80144f0:	24000014 	.word	0x24000014

080144f4 <_fstat_r>:
 80144f4:	b538      	push	{r3, r4, r5, lr}
 80144f6:	4d07      	ldr	r5, [pc, #28]	; (8014514 <_fstat_r+0x20>)
 80144f8:	2300      	movs	r3, #0
 80144fa:	4604      	mov	r4, r0
 80144fc:	4608      	mov	r0, r1
 80144fe:	4611      	mov	r1, r2
 8014500:	602b      	str	r3, [r5, #0]
 8014502:	f7ee fe48 	bl	8003196 <_fstat>
 8014506:	1c43      	adds	r3, r0, #1
 8014508:	d102      	bne.n	8014510 <_fstat_r+0x1c>
 801450a:	682b      	ldr	r3, [r5, #0]
 801450c:	b103      	cbz	r3, 8014510 <_fstat_r+0x1c>
 801450e:	6023      	str	r3, [r4, #0]
 8014510:	bd38      	pop	{r3, r4, r5, pc}
 8014512:	bf00      	nop
 8014514:	240056cc 	.word	0x240056cc

08014518 <_isatty_r>:
 8014518:	b538      	push	{r3, r4, r5, lr}
 801451a:	4d06      	ldr	r5, [pc, #24]	; (8014534 <_isatty_r+0x1c>)
 801451c:	2300      	movs	r3, #0
 801451e:	4604      	mov	r4, r0
 8014520:	4608      	mov	r0, r1
 8014522:	602b      	str	r3, [r5, #0]
 8014524:	f7ee fe47 	bl	80031b6 <_isatty>
 8014528:	1c43      	adds	r3, r0, #1
 801452a:	d102      	bne.n	8014532 <_isatty_r+0x1a>
 801452c:	682b      	ldr	r3, [r5, #0]
 801452e:	b103      	cbz	r3, 8014532 <_isatty_r+0x1a>
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	bd38      	pop	{r3, r4, r5, pc}
 8014534:	240056cc 	.word	0x240056cc

08014538 <__ascii_mbtowc>:
 8014538:	b082      	sub	sp, #8
 801453a:	b901      	cbnz	r1, 801453e <__ascii_mbtowc+0x6>
 801453c:	a901      	add	r1, sp, #4
 801453e:	b142      	cbz	r2, 8014552 <__ascii_mbtowc+0x1a>
 8014540:	b14b      	cbz	r3, 8014556 <__ascii_mbtowc+0x1e>
 8014542:	7813      	ldrb	r3, [r2, #0]
 8014544:	600b      	str	r3, [r1, #0]
 8014546:	7812      	ldrb	r2, [r2, #0]
 8014548:	1e10      	subs	r0, r2, #0
 801454a:	bf18      	it	ne
 801454c:	2001      	movne	r0, #1
 801454e:	b002      	add	sp, #8
 8014550:	4770      	bx	lr
 8014552:	4610      	mov	r0, r2
 8014554:	e7fb      	b.n	801454e <__ascii_mbtowc+0x16>
 8014556:	f06f 0001 	mvn.w	r0, #1
 801455a:	e7f8      	b.n	801454e <__ascii_mbtowc+0x16>

0801455c <memmove>:
 801455c:	4288      	cmp	r0, r1
 801455e:	b510      	push	{r4, lr}
 8014560:	eb01 0402 	add.w	r4, r1, r2
 8014564:	d902      	bls.n	801456c <memmove+0x10>
 8014566:	4284      	cmp	r4, r0
 8014568:	4623      	mov	r3, r4
 801456a:	d807      	bhi.n	801457c <memmove+0x20>
 801456c:	1e43      	subs	r3, r0, #1
 801456e:	42a1      	cmp	r1, r4
 8014570:	d008      	beq.n	8014584 <memmove+0x28>
 8014572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014576:	f803 2f01 	strb.w	r2, [r3, #1]!
 801457a:	e7f8      	b.n	801456e <memmove+0x12>
 801457c:	4402      	add	r2, r0
 801457e:	4601      	mov	r1, r0
 8014580:	428a      	cmp	r2, r1
 8014582:	d100      	bne.n	8014586 <memmove+0x2a>
 8014584:	bd10      	pop	{r4, pc}
 8014586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801458a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801458e:	e7f7      	b.n	8014580 <memmove+0x24>

08014590 <_realloc_r>:
 8014590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014594:	4680      	mov	r8, r0
 8014596:	4614      	mov	r4, r2
 8014598:	460e      	mov	r6, r1
 801459a:	b921      	cbnz	r1, 80145a6 <_realloc_r+0x16>
 801459c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145a0:	4611      	mov	r1, r2
 80145a2:	f7fd bb05 	b.w	8011bb0 <_malloc_r>
 80145a6:	b92a      	cbnz	r2, 80145b4 <_realloc_r+0x24>
 80145a8:	f7ff fc60 	bl	8013e6c <_free_r>
 80145ac:	4625      	mov	r5, r4
 80145ae:	4628      	mov	r0, r5
 80145b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b4:	f000 f82f 	bl	8014616 <_malloc_usable_size_r>
 80145b8:	4284      	cmp	r4, r0
 80145ba:	4607      	mov	r7, r0
 80145bc:	d802      	bhi.n	80145c4 <_realloc_r+0x34>
 80145be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80145c2:	d812      	bhi.n	80145ea <_realloc_r+0x5a>
 80145c4:	4621      	mov	r1, r4
 80145c6:	4640      	mov	r0, r8
 80145c8:	f7fd faf2 	bl	8011bb0 <_malloc_r>
 80145cc:	4605      	mov	r5, r0
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0ed      	beq.n	80145ae <_realloc_r+0x1e>
 80145d2:	42bc      	cmp	r4, r7
 80145d4:	4622      	mov	r2, r4
 80145d6:	4631      	mov	r1, r6
 80145d8:	bf28      	it	cs
 80145da:	463a      	movcs	r2, r7
 80145dc:	f7fd fab1 	bl	8011b42 <memcpy>
 80145e0:	4631      	mov	r1, r6
 80145e2:	4640      	mov	r0, r8
 80145e4:	f7ff fc42 	bl	8013e6c <_free_r>
 80145e8:	e7e1      	b.n	80145ae <_realloc_r+0x1e>
 80145ea:	4635      	mov	r5, r6
 80145ec:	e7df      	b.n	80145ae <_realloc_r+0x1e>

080145ee <__ascii_wctomb>:
 80145ee:	b149      	cbz	r1, 8014604 <__ascii_wctomb+0x16>
 80145f0:	2aff      	cmp	r2, #255	; 0xff
 80145f2:	bf85      	ittet	hi
 80145f4:	238a      	movhi	r3, #138	; 0x8a
 80145f6:	6003      	strhi	r3, [r0, #0]
 80145f8:	700a      	strbls	r2, [r1, #0]
 80145fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80145fe:	bf98      	it	ls
 8014600:	2001      	movls	r0, #1
 8014602:	4770      	bx	lr
 8014604:	4608      	mov	r0, r1
 8014606:	4770      	bx	lr

08014608 <abort>:
 8014608:	b508      	push	{r3, lr}
 801460a:	2006      	movs	r0, #6
 801460c:	f000 f834 	bl	8014678 <raise>
 8014610:	2001      	movs	r0, #1
 8014612:	f7ee fd71 	bl	80030f8 <_exit>

08014616 <_malloc_usable_size_r>:
 8014616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801461a:	1f18      	subs	r0, r3, #4
 801461c:	2b00      	cmp	r3, #0
 801461e:	bfbc      	itt	lt
 8014620:	580b      	ldrlt	r3, [r1, r0]
 8014622:	18c0      	addlt	r0, r0, r3
 8014624:	4770      	bx	lr

08014626 <_raise_r>:
 8014626:	291f      	cmp	r1, #31
 8014628:	b538      	push	{r3, r4, r5, lr}
 801462a:	4604      	mov	r4, r0
 801462c:	460d      	mov	r5, r1
 801462e:	d904      	bls.n	801463a <_raise_r+0x14>
 8014630:	2316      	movs	r3, #22
 8014632:	6003      	str	r3, [r0, #0]
 8014634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014638:	bd38      	pop	{r3, r4, r5, pc}
 801463a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801463c:	b112      	cbz	r2, 8014644 <_raise_r+0x1e>
 801463e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014642:	b94b      	cbnz	r3, 8014658 <_raise_r+0x32>
 8014644:	4620      	mov	r0, r4
 8014646:	f000 f831 	bl	80146ac <_getpid_r>
 801464a:	462a      	mov	r2, r5
 801464c:	4601      	mov	r1, r0
 801464e:	4620      	mov	r0, r4
 8014650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014654:	f000 b818 	b.w	8014688 <_kill_r>
 8014658:	2b01      	cmp	r3, #1
 801465a:	d00a      	beq.n	8014672 <_raise_r+0x4c>
 801465c:	1c59      	adds	r1, r3, #1
 801465e:	d103      	bne.n	8014668 <_raise_r+0x42>
 8014660:	2316      	movs	r3, #22
 8014662:	6003      	str	r3, [r0, #0]
 8014664:	2001      	movs	r0, #1
 8014666:	e7e7      	b.n	8014638 <_raise_r+0x12>
 8014668:	2400      	movs	r4, #0
 801466a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801466e:	4628      	mov	r0, r5
 8014670:	4798      	blx	r3
 8014672:	2000      	movs	r0, #0
 8014674:	e7e0      	b.n	8014638 <_raise_r+0x12>
	...

08014678 <raise>:
 8014678:	4b02      	ldr	r3, [pc, #8]	; (8014684 <raise+0xc>)
 801467a:	4601      	mov	r1, r0
 801467c:	6818      	ldr	r0, [r3, #0]
 801467e:	f7ff bfd2 	b.w	8014626 <_raise_r>
 8014682:	bf00      	nop
 8014684:	24000014 	.word	0x24000014

08014688 <_kill_r>:
 8014688:	b538      	push	{r3, r4, r5, lr}
 801468a:	4d07      	ldr	r5, [pc, #28]	; (80146a8 <_kill_r+0x20>)
 801468c:	2300      	movs	r3, #0
 801468e:	4604      	mov	r4, r0
 8014690:	4608      	mov	r0, r1
 8014692:	4611      	mov	r1, r2
 8014694:	602b      	str	r3, [r5, #0]
 8014696:	f7ee fd1f 	bl	80030d8 <_kill>
 801469a:	1c43      	adds	r3, r0, #1
 801469c:	d102      	bne.n	80146a4 <_kill_r+0x1c>
 801469e:	682b      	ldr	r3, [r5, #0]
 80146a0:	b103      	cbz	r3, 80146a4 <_kill_r+0x1c>
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	bd38      	pop	{r3, r4, r5, pc}
 80146a6:	bf00      	nop
 80146a8:	240056cc 	.word	0x240056cc

080146ac <_getpid_r>:
 80146ac:	f7ee bd0c 	b.w	80030c8 <_getpid>

080146b0 <_init>:
 80146b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b2:	bf00      	nop
 80146b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146b6:	bc08      	pop	{r3}
 80146b8:	469e      	mov	lr, r3
 80146ba:	4770      	bx	lr

080146bc <_fini>:
 80146bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146be:	bf00      	nop
 80146c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146c2:	bc08      	pop	{r3}
 80146c4:	469e      	mov	lr, r3
 80146c6:	4770      	bx	lr
