
EPFL_XPLORE_AVIONICS_MCU_ROCOROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08011da8  08011da8  00021da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080125a4  080125a4  000225a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080125ac  080125ac  000225ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080125b0  080125b0  000225b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  080125b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f68  240001ec  080127a0  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001154  080127a0  00031154  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000385bc  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053d3  00000000  00000000  000687d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002990  00000000  00000000  0006dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002788  00000000  00000000  00070540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba80  00000000  00000000  00072cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035ff7  00000000  00000000  0007e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001b7525  00000000  00000000  000b473f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026bc64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c634  00000000  00000000  0026bcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011d90 	.word	0x08011d90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	08011d90 	.word	0x08011d90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <bno_test>:
	/* USER CODE BEGIN 3 */
	}
}


static void bno_test(void){
 8000694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000698:	b0a9      	sub	sp, #164	; 0xa4
 800069a:	af06      	add	r7, sp, #24
	char text[100];
	bno055_assignI2C(&hi2c4);
 800069c:	484a      	ldr	r0, [pc, #296]	; (80007c8 <bno_test+0x134>)
 800069e:	f003 f8a3 	bl	80037e8 <bno055_assignI2C>
	bno055_setup();
 80006a2:	f002 feb4 	bl	800340e <bno055_setup>
	bno055_setOperationModeNDOF();
 80006a6:	f002 fe9f 	bl	80033e8 <bno055_setOperationModeNDOF>
	while (1)
	{
		/* USER CODE END WHILE */
		bno055_vector_t v = bno055_getVectorEuler();
 80006aa:	f003 f837 	bl	800371c <bno055_getVectorEuler>
 80006ae:	eeb0 4b40 	vmov.f64	d4, d0
 80006b2:	eeb0 5b41 	vmov.f64	d5, d1
 80006b6:	eeb0 6b42 	vmov.f64	d6, d2
 80006ba:	eeb0 7b43 	vmov.f64	d7, d3
 80006be:	ed87 4b00 	vstr	d4, [r7]
 80006c2:	ed87 5b02 	vstr	d5, [r7, #8]
 80006c6:	ed87 6b04 	vstr	d6, [r7, #16]
 80006ca:	ed87 7b06 	vstr	d7, [r7, #24]
		sprintf(text, "Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 80006ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80006d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80006da:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80006de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80006e2:	e9cd 2300 	strd	r2, r3, [sp]
 80006e6:	4622      	mov	r2, r4
 80006e8:	462b      	mov	r3, r5
 80006ea:	4938      	ldr	r1, [pc, #224]	; (80007cc <bno_test+0x138>)
 80006ec:	4630      	mov	r0, r6
 80006ee:	f00f faff 	bl	800fcf0 <siprintf>
		HAL_UART_Transmit(&huart2, text, strlen((char*)text), 0xFF);
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fdf2 	bl	80002e0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000704:	23ff      	movs	r3, #255	; 0xff
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <bno_test+0x13c>)
 8000708:	f00c fa82 	bl	800cc10 <HAL_UART_Transmit>
		v = bno055_getVectorQuaternion();
 800070c:	f003 f839 	bl	8003782 <bno055_getVectorQuaternion>
 8000710:	eeb0 4b40 	vmov.f64	d4, d0
 8000714:	eeb0 5b41 	vmov.f64	d5, d1
 8000718:	eeb0 6b42 	vmov.f64	d6, d2
 800071c:	eeb0 7b43 	vmov.f64	d7, d3
 8000720:	ed87 4b00 	vstr	d4, [r7]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b04 	vstr	d6, [r7, #16]
 800072c:	ed87 7b06 	vstr	d7, [r7, #24]
		sprintf(text, "W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
 8000730:	e9d7 8900 	ldrd	r8, r9, [r7]
 8000734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000738:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800073c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000740:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8000744:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800074c:	e9cd 2300 	strd	r2, r3, [sp]
 8000750:	4642      	mov	r2, r8
 8000752:	464b      	mov	r3, r9
 8000754:	491f      	ldr	r1, [pc, #124]	; (80007d4 <bno_test+0x140>)
 8000756:	4630      	mov	r0, r6
 8000758:	f00f faca 	bl	800fcf0 <siprintf>
		HAL_UART_Transmit(&huart2, text, strlen((char*)text), 0xFF);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdbd 	bl	80002e0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800076e:	23ff      	movs	r3, #255	; 0xff
 8000770:	4817      	ldr	r0, [pc, #92]	; (80007d0 <bno_test+0x13c>)
 8000772:	f00c fa4d 	bl	800cc10 <HAL_UART_Transmit>
		bno055_calibration_state_t u = bno055_getCalibrationState();
 8000776:	f002 fe67 	bl	8003448 <bno055_getCalibrationState>
 800077a:	4603      	mov	r3, r0
 800077c:	623b      	str	r3, [r7, #32]
		sprintf(text, "sys: %.2f accel: %.2f gyro: %.2f mag: %.2f\r\n", u.sys, u.accel, u.gyro, u.mag);
 800077e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000782:	4619      	mov	r1, r3
 8000784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000788:	461c      	mov	r4, r3
 800078a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800078e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4623      	mov	r3, r4
 800079c:	460a      	mov	r2, r1
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <bno_test+0x144>)
 80007a0:	f00f faa6 	bl	800fcf0 <siprintf>
		HAL_UART_Transmit(&huart2, text, strlen((char*)text), 0xFF);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd99 	bl	80002e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <bno_test+0x13c>)
 80007ba:	f00c fa29 	bl	800cc10 <HAL_UART_Transmit>
		HAL_Delay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c2:	f003 f997 	bl	8003af4 <HAL_Delay>
	{
 80007c6:	e770      	b.n	80006aa <bno_test+0x16>
 80007c8:	24000520 	.word	0x24000520
 80007cc:	08011e34 	.word	0x08011e34
 80007d0:	2400077c 	.word	0x2400077c
 80007d4:	08011e5c 	.word	0x08011e5c
 80007d8:	08011e80 	.word	0x08011e80

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b0ac      	sub	sp, #176	; 0xb0
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f003 f92b 	bl	8003a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f861 	bl	80008ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ea:	f000 f8e5 	bl	80009b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f001 f983 	bl	8001af8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007f2:	f000 fa8f 	bl	8000d14 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80007f6:	f000 faf1 	bl	8000ddc <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80007fa:	f000 fb53 	bl	8000ea4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007fe:	f000 fb91 	bl	8000f24 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000802:	f000 fbcf 	bl	8000fa4 <MX_I2C4_Init>
  MX_USART1_Init();
 8000806:	f000 fcf3 	bl	80011f0 <MX_USART1_Init>
  MX_USART2_UART_Init();
 800080a:	f000 fd3d 	bl	8001288 <MX_USART2_UART_Init>
  MX_USART3_Init();
 800080e:	f000 fd87 	bl	8001320 <MX_USART3_Init>
  MX_ADC1_Init();
 8000812:	f000 f8ff 	bl	8000a14 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000816:	f000 f977 	bl	8000b08 <MX_ADC2_Init>
  MX_ADC3_Init();
 800081a:	f000 f9db 	bl	8000bd4 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 800081e:	f000 fe17 	bl	8001450 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000822:	f000 fe41 	bl	80014a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000826:	f000 fe95 	bl	8001554 <MX_SPI2_Init>
  MX_SPI4_Init();
 800082a:	f000 fee9 	bl	8001600 <MX_SPI4_Init>
  MX_USART6_Init();
 800082e:	f000 fdc3 	bl	80013b8 <MX_USART6_Init>
  MX_DAC1_Init();
 8000832:	f000 fa33 	bl	8000c9c <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000836:	f000 fbf5 	bl	8001024 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800083a:	f000 fc41 	bl	80010c0 <MX_UART4_Init>
  MX_UART8_Init();
 800083e:	f000 fc8b 	bl	8001158 <MX_UART8_Init>
  MX_TIM1_Init();
 8000842:	f000 ff33 	bl	80016ac <MX_TIM1_Init>
  MX_TIM5_Init();
 8000846:	f001 f839 	bl	80018bc <MX_TIM5_Init>
  MX_TIM15_Init();
 800084a:	f001 f891 	bl	8001970 <MX_TIM15_Init>
  MX_DMA_Init();
 800084e:	f001 f933 	bl	8001ab8 <MX_DMA_Init>
  MX_TIM4_Init();
 8000852:	f000 ffbb 	bl	80017cc <MX_TIM4_Init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char text[100];

	uint8_t Buffer[25] = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800085a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0xc4>)
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0xc8>)
 8000872:	f107 040c 	add.w	r4, r7, #12
 8000876:	461d      	mov	r5, r3
 8000878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000880:	c403      	stmia	r4!, {r0, r1}
 8000882:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <main+0xcc>)
 8000886:	463b      	mov	r3, r7
 8000888:	ca07      	ldmia	r2, {r0, r1, r2}
 800088a:	c303      	stmia	r3!, {r0, r1}
 800088c:	801a      	strh	r2, [r3, #0]
 800088e:	3302      	adds	r3, #2
 8000890:	0c12      	lsrs	r2, r2, #16
 8000892:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0, ret;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	//  stemma_test();
	bno_test();
 800089a:	f7ff fefb 	bl	8000694 <bno_test>
	//  VL53l1_test();
	//  hx711_test();
	//	ADC1115_test();
	while (1)
 800089e:	e7fe      	b.n	800089e <main+0xc2>
 80008a0:	00202d20 	.word	0x00202d20
 80008a4:	08011f04 	.word	0x08011f04
 80008a8:	08011f20 	.word	0x08011f20

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00e fc9b 	bl	800f1f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00e fc95 	bl	800f1f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f007 fc01 	bl	80080d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <SystemClock_Config+0x100>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a34      	ldr	r2, [pc, #208]	; (80009ac <SystemClock_Config+0x100>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <SystemClock_Config+0x100>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <SystemClock_Config+0x104>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <SystemClock_Config+0x104>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <SystemClock_Config+0x104>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000908:	bf00      	nop
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemClock_Config+0x104>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	d1f8      	bne.n	800090a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0x108>)
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <SystemClock_Config+0x108>)
 800091e:	f023 0303 	bic.w	r3, r3, #3
 8000922:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000928:	2301      	movs	r3, #1
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800093c:	2309      	movs	r3, #9
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000944:	2303      	movs	r3, #3
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094c:	230c      	movs	r3, #12
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000950:	2302      	movs	r3, #2
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4618      	mov	r0, r3
 8000960:	f007 fcac 	bl	80082bc <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800096a:	f001 f9e5 	bl	8001d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	233f      	movs	r3, #63	; 0x3f
 8000970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f008 f8bf 	bl	8008b18 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009a0:	f001 f9ca 	bl	8001d38 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3770      	adds	r7, #112	; 0x70
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58000400 	.word	0x58000400
 80009b0:	58024800 	.word	0x58024800
 80009b4:	58024400 	.word	0x58024400

080009b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0b0      	sub	sp, #192	; 0xc0
 80009bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	22bc      	movs	r2, #188	; 0xbc
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00e fc16 	bl	800f1f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009ce:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80009d4:	2309      	movs	r3, #9
 80009d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009e4:	23c0      	movs	r3, #192	; 0xc0
 80009e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009e8:	2320      	movs	r3, #32
 80009ea:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80009ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 fc5a 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000a06:	f001 f997 	bl	8001d38 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	37c0      	adds	r7, #192	; 0xc0
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a3a:	4a30      	ldr	r2, [pc, #192]	; (8000afc <MX_ADC1_Init+0xe8>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000a96:	f003 f9e9 	bl	8003e6c <HAL_ADC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aa0:	f001 f94a 	bl	8001d38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000ab0:	f003 fffe 	bl	8004ab0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aba:	f001 f93d 	bl	8001d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_ADC1_Init+0xec>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_ADC1_Init+0xf0>)
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC1_Init+0xe4>)
 8000ae0:	f003 fb66 	bl	80041b0 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000aea:	f001 f925 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	24000208 	.word	0x24000208
 8000afc:	40022000 	.word	0x40022000
 8000b00:	10c00010 	.word	0x10c00010
 8000b04:	47ff0000 	.word	0x47ff0000

08000b08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <MX_ADC2_Init+0xc0>)
 8000b24:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000b7e:	f003 f975 	bl	8003e6c <HAL_ADC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b88:	f001 f8d6 	bl	8001d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_ADC2_Init+0xc4>)
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b90:	2306      	movs	r3, #6
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_ADC2_Init+0xc8>)
 8000b9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_ADC2_Init+0xbc>)
 8000bae:	f003 faff 	bl	80041b0 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000bb8:	f001 f8be 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2400026c 	.word	0x2400026c
 8000bc8:	40022100 	.word	0x40022100
 8000bcc:	10c00010 	.word	0x10c00010
 8000bd0:	47ff0000 	.word	0x47ff0000

08000bd4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000bee:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <MX_ADC3_Init+0xbc>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c00:	2204      	movs	r2, #4
 8000c02:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c44:	f003 f912 	bl	8003e6c <HAL_ADC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c4e:	f001 f873 	bl	8001d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_ADC3_Init+0xc0>)
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c56:	2306      	movs	r3, #6
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_ADC3_Init+0xc4>)
 8000c60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c62:	2304      	movs	r3, #4
 8000c64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC3_Init+0xb8>)
 8000c74:	f003 fa9c 	bl	80041b0 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000c7e:	f001 f85b 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	240002d0 	.word	0x240002d0
 8000c90:	58026000 	.word	0x58026000
 8000c94:	2a000400 	.word	0x2a000400
 8000c98:	47ff0000 	.word	0x47ff0000

08000c9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2224      	movs	r2, #36	; 0x24
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00e faa4 	bl	800f1f6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_DAC1_Init+0x70>)
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <MX_DAC1_Init+0x74>)
 8000cb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cb4:	4815      	ldr	r0, [pc, #84]	; (8000d0c <MX_DAC1_Init+0x70>)
 8000cb6:	f004 f8b9 	bl	8004e2c <HAL_DAC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cc0:	f001 f83a 	bl	8001d38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_DAC1_Init+0x70>)
 8000ce0:	f004 f92a 	bl	8004f38 <HAL_DAC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cea:	f001 f825 	bl	8001d38 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_DAC1_Init+0x70>)
 8000cf6:	f004 f91f 	bl	8004f38 <HAL_DAC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000d00:	f001 f81a 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000334 	.word	0x24000334
 8000d10:	40007400 	.word	0x40007400

08000d14 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <MX_FDCAN1_Init+0xc4>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d3e:	2210      	movs	r2, #16
 8000d40:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	f005 feb5 	bl	8006b30 <HAL_FDCAN_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dcc:	f000 ffb4 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24000348 	.word	0x24000348
 8000dd8:	4000a000 	.word	0x4000a000

08000ddc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000de2:	4a2f      	ldr	r2, [pc, #188]	; (8000ea0 <MX_FDCAN2_Init+0xc4>)
 8000de4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e06:	2210      	movs	r2, #16
 8000e08:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_FDCAN2_Init+0xc0>)
 8000e8a:	f005 fe51 	bl	8006b30 <HAL_FDCAN_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e94:	f000 ff50 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	240003e8 	.word	0x240003e8
 8000ea0:	4000a400 	.word	0x4000a400

08000ea4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_I2C1_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_I2C1_Init+0x7c>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ee0:	f006 fb54 	bl	800758c <HAL_I2C_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eea:	f000 ff25 	bl	8001d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ef2:	f007 f857 	bl	8007fa4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000efc:	f000 ff1c 	bl	8001d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000f04:	f007 f899 	bl	800803a <HAL_I2CEx_ConfigDigitalFilter>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 ff13 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24000488 	.word	0x24000488
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	00707cbb 	.word	0x00707cbb

08000f24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <MX_I2C2_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_I2C2_Init+0x7c>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f60:	f006 fb14 	bl	800758c <HAL_I2C_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f6a:	f000 fee5 	bl	8001d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f72:	f007 f817 	bl	8007fa4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fedc 	bl	8001d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_I2C2_Init+0x74>)
 8000f84:	f007 f859 	bl	800803a <HAL_I2CEx_ConfigDigitalFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 fed3 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240004d4 	.word	0x240004d4
 8000f9c:	40005800 	.word	0x40005800
 8000fa0:	00707cbb 	.word	0x00707cbb

08000fa4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_I2C4_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MX_I2C4_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <MX_I2C4_Init+0x7c>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_I2C4_Init+0x74>)
 8000fe0:	f006 fad4 	bl	800758c <HAL_I2C_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000fea:	f000 fea5 	bl	8001d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_I2C4_Init+0x74>)
 8000ff2:	f006 ffd7 	bl	8007fa4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 fe9c 	bl	8001d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_I2C4_Init+0x74>)
 8001004:	f007 f819 	bl	800803a <HAL_I2CEx_ConfigDigitalFilter>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800100e:	f000 fe93 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000520 	.word	0x24000520
 800101c:	58001c00 	.word	0x58001c00
 8001020:	00707cbb 	.word	0x00707cbb

08001024 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <MX_LPUART1_UART_Init+0x94>)
 800102c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <MX_LPUART1_UART_Init+0x98>)
 8001032:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001048:	220c      	movs	r2, #12
 800104a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800106c:	f00b fd80 	bl	800cb70 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001076:	f000 fe5f 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800107e:	f00c fdb3 	bl	800dbe8 <HAL_UARTEx_SetTxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001088:	f000 fe56 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001090:	f00c fde8 	bl	800dc64 <HAL_UARTEx_SetRxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800109a:	f000 fe4d 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 80010a0:	f00c fd69 	bl	800db76 <HAL_UARTEx_DisableFifoMode>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80010aa:	f000 fe45 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2400056c 	.word	0x2400056c
 80010b8:	58000c00 	.word	0x58000c00
 80010bc:	00033324 	.word	0x00033324

080010c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_UART4_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <MX_UART4_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_UART4_Init+0x90>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_UART4_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_UART4_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_UART4_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_UART4_Init+0x90>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_UART4_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_UART4_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_UART4_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_UART4_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_UART4_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_UART4_Init+0x90>)
 800110a:	f00b fd31 	bl	800cb70 <HAL_UART_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 fe10 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_UART4_Init+0x90>)
 800111c:	f00c fd64 	bl	800dbe8 <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 fe07 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <MX_UART4_Init+0x90>)
 800112e:	f00c fd99 	bl	800dc64 <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 fdfe 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_UART4_Init+0x90>)
 800113e:	f00c fd1a 	bl	800db76 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 fdf6 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	240005fc 	.word	0x240005fc
 8001154:	40004c00 	.word	0x40004c00

08001158 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_UART8_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_UART8_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_UART8_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_UART8_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_UART8_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_UART8_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_UART8_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_UART8_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_UART8_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_UART8_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_UART8_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_UART8_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_UART8_Init+0x90>)
 80011a2:	f00b fce5 	bl	800cb70 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 fdc4 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_UART8_Init+0x90>)
 80011b4:	f00c fd18 	bl	800dbe8 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 fdbb 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_UART8_Init+0x90>)
 80011c6:	f00c fd4d 	bl	800dc64 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fdb2 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_UART8_Init+0x90>)
 80011d6:	f00c fcce 	bl	800db76 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 fdaa 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2400068c 	.word	0x2400068c
 80011ec:	40007c00 	.word	0x40007c00

080011f0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART1_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART1_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART1_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART1_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART1_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART1_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART1_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART1_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART1_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART1_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART1_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART1_Init+0x90>)
 800123a:	f00c fd9f 	bl	800dd7c <HAL_USART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 fd78 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART1_Init+0x90>)
 800124c:	f00d fbb2 	bl	800e9b4 <HAL_USARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 fd6f 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART1_Init+0x90>)
 800125e:	f00d fbe7 	bl	800ea30 <HAL_USARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 fd66 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_Init+0x90>)
 800126e:	f00d fb68 	bl	800e942 <HAL_USARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 fd5e 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400071c 	.word	0x2400071c
 8001284:	40011000 	.word	0x40011000

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_USART2_UART_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <MX_USART2_UART_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_USART2_UART_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_USART2_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012d2:	f00b fc4d 	bl	800cb70 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fd2c 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012e4:	f00c fc80 	bl	800dbe8 <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 fd23 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x90>)
 80012f6:	f00c fcb5 	bl	800dc64 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 fd1a 	bl	8001d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_USART2_UART_Init+0x90>)
 8001306:	f00c fc36 	bl	800db76 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 fd12 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400077c 	.word	0x2400077c
 800131c:	40004400 	.word	0x40004400

08001320 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_USART3_Init+0x90>)
 8001326:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <MX_USART3_Init+0x94>)
 8001328:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_USART3_Init+0x90>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_USART3_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_USART3_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_USART3_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_USART3_Init+0x90>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_USART3_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_USART3_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_USART3_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USART3_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_USART3_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <MX_USART3_Init+0x90>)
 800136a:	f00c fd07 	bl	800dd7c <HAL_USART_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 fce0 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_USART3_Init+0x90>)
 800137c:	f00d fb1a 	bl	800e9b4 <HAL_USARTEx_SetTxFifoThreshold>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001386:	f000 fcd7 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <MX_USART3_Init+0x90>)
 800138e:	f00d fb4f 	bl	800ea30 <HAL_USARTEx_SetRxFifoThreshold>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 fcce 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_USART3_Init+0x90>)
 800139e:	f00d fad0 	bl	800e942 <HAL_USARTEx_DisableFifoMode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART3_Init+0x8c>
  {
    Error_Handler();
 80013a8:	f000 fcc6 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400080c 	.word	0x2400080c
 80013b4:	40004800 	.word	0x40004800

080013b8 <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_USART6_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <MX_USART6_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_USART6_Init+0x90>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_USART6_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_USART6_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_USART6_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_USART6_Init+0x90>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_USART6_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_USART6_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_USART6_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART6_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART6_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart6) != HAL_OK)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <MX_USART6_Init+0x90>)
 8001402:	f00c fcbb 	bl	800dd7c <HAL_USART_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART6_Init+0x58>
  {
    Error_Handler();
 800140c:	f000 fc94 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001410:	2100      	movs	r1, #0
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_USART6_Init+0x90>)
 8001414:	f00d face 	bl	800e9b4 <HAL_USARTEx_SetTxFifoThreshold>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART6_Init+0x6a>
  {
    Error_Handler();
 800141e:	f000 fc8b 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_USART6_Init+0x90>)
 8001426:	f00d fb03 	bl	800ea30 <HAL_USARTEx_SetRxFifoThreshold>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART6_Init+0x7c>
  {
    Error_Handler();
 8001430:	f000 fc82 	bl	8001d38 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_USART6_Init+0x90>)
 8001436:	f00d fa84 	bl	800e942 <HAL_USARTEx_DisableFifoMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART6_Init+0x8c>
  {
    Error_Handler();
 8001440:	f000 fc7a 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2400086c 	.word	0x2400086c
 800144c:	40011400 	.word	0x40011400

08001450 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_QUADSPI_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001462:	2201      	movs	r2, #1
 8001464:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 800146e:	2201      	movs	r2, #1
 8001470:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_QUADSPI_Init+0x50>)
 800148c:	f006 fe5c 	bl	8008148 <HAL_QSPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001496:	f000 fc4f 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000944 	.word	0x24000944
 80014a4:	52005000 	.word	0x52005000

080014a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <MX_SPI1_Init+0xa4>)
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <MX_SPI1_Init+0xa8>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_SPI1_Init+0xa4>)
 80014b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_SPI1_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_SPI1_Init+0xa4>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_SPI1_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_SPI1_Init+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_SPI1_Init+0xa4>)
 80014d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_SPI1_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_SPI1_Init+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_SPI1_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_SPI1_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_SPI1_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_SPI1_Init+0xa4>)
 80014fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_SPI1_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_SPI1_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_SPI1_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_SPI1_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SPI1_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_SPI1_Init+0xa4>)
 8001538:	f00a f848 	bl	800b5cc <HAL_SPI_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001542:	f000 fbf9 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000990 	.word	0x24000990
 8001550:	40013000 	.word	0x40013000

08001554 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_SPI2_Init+0xa4>)
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <MX_SPI2_Init+0xa8>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001560:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001564:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_SPI2_Init+0xa4>)
 800156e:	2203      	movs	r2, #3
 8001570:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_SPI2_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001584:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_SPI2_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_SPI2_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_SPI2_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_SPI2_Init+0xa4>)
 80015e4:	f009 fff2 	bl	800b5cc <HAL_SPI_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 fba3 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000a18 	.word	0x24000a18
 80015fc:	40003800 	.word	0x40003800

08001600 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001606:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <MX_SPI4_Init+0xa8>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800160c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001610:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800161a:	2203      	movs	r2, #3
 800161c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800162c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001630:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI4_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_SPI4_Init+0xa4>)
 8001690:	f009 ff9c 	bl	800b5cc <HAL_SPI_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800169a:	f000 fb4d 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24000aa0 	.word	0x24000aa0
 80016a8:	40013400 	.word	0x40013400

080016ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b096      	sub	sp, #88	; 0x58
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	222c      	movs	r2, #44	; 0x2c
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f00d fd8c 	bl	800f1f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <MX_TIM1_Init+0x118>)
 80016e0:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <MX_TIM1_Init+0x11c>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <MX_TIM1_Init+0x118>)
 80016e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80016ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <MX_TIM1_Init+0x118>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 80016f2:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <MX_TIM1_Init+0x118>)
 80016f4:	2213      	movs	r2, #19
 80016f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <MX_TIM1_Init+0x118>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <MX_TIM1_Init+0x118>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <MX_TIM1_Init+0x118>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800170a:	482e      	ldr	r0, [pc, #184]	; (80017c4 <MX_TIM1_Init+0x118>)
 800170c:	f00a f94e 	bl	800b9ac <HAL_TIM_PWM_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 fb0f 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800172a:	4619      	mov	r1, r3
 800172c:	4825      	ldr	r0, [pc, #148]	; (80017c4 <MX_TIM1_Init+0x118>)
 800172e:	f00b f8f5 	bl	800c91c <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001738:	f000 fafe 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173c:	2360      	movs	r3, #96	; 0x60
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 8001740:	230f      	movs	r3, #15
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_TIM1_Init+0x118>)
 8001762:	f00a fa99 	bl	800bc98 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800176c:	f000 fae4 	bl	8001d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM1_Init+0x118>)
 80017a6:	f00b f947 	bl	800ca38 <HAL_TIMEx_ConfigBreakDeadTime>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80017b0:	f000 fac2 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM1_Init+0x118>)
 80017b6:	f001 fb1d 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3758      	adds	r7, #88	; 0x58
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000b28 	.word	0x24000b28
 80017c8:	40010000 	.word	0x40010000

080017cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <MX_TIM4_Init+0xec>)
 8001802:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_TIM4_Init+0xe8>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001816:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <MX_TIM4_Init+0xe8>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001826:	f009 fff2 	bl	800b80e <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001830:	f000 fa82 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	4619      	mov	r1, r3
 8001840:	481c      	ldr	r0, [pc, #112]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001842:	f00a fb3d 	bl	800bec0 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800184c:	f000 fa74 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001850:	4818      	ldr	r0, [pc, #96]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001852:	f00a f8ab 	bl	800b9ac <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800185c:	f000 fa6c 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001870:	f00b f854 	bl	800c91c <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800187a:	f000 fa5d 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	; 0x60
 8001880:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	220c      	movs	r2, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM4_Init+0xe8>)
 8001896:	f00a f9ff 	bl	800bc98 <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80018a0:	f000 fa4a 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM4_Init+0xe8>)
 80018a6:	f001 faa5 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3738      	adds	r7, #56	; 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000b74 	.word	0x24000b74
 80018b8:	40000800 	.word	0x40000800

080018bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_TIM5_Init+0xac>)
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <MX_TIM5_Init+0xb0>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_TIM5_Init+0xac>)
 80018e8:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80018ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM5_Init+0xac>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM5_Init+0xac>)
 80018f6:	22c7      	movs	r2, #199	; 0xc7
 80018f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_TIM5_Init+0xac>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM5_Init+0xac>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001906:	4818      	ldr	r0, [pc, #96]	; (8001968 <MX_TIM5_Init+0xac>)
 8001908:	f00a f850 	bl	800b9ac <HAL_TIM_PWM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001912:	f000 fa11 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <MX_TIM5_Init+0xac>)
 8001926:	f00a fff9 	bl	800c91c <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001930:	f000 fa02 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001934:	2360      	movs	r3, #96	; 0x60
 8001936:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 8001938:	2363      	movs	r3, #99	; 0x63
 800193a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	2204      	movs	r2, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM5_Init+0xac>)
 800194c:	f00a f9a4 	bl	800bc98 <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001956:	f000 f9ef 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM5_Init+0xac>)
 800195c:	f001 fa4a 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24000bc0 	.word	0x24000bc0
 800196c:	40000c00 	.word	0x40000c00

08001970 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b09a      	sub	sp, #104	; 0x68
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	222c      	movs	r2, #44	; 0x2c
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00d fc23 	bl	800f1f6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <MX_TIM15_Init+0x144>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019b8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019c6:	22c7      	movs	r2, #199	; 0xc7
 80019c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019dc:	4834      	ldr	r0, [pc, #208]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019de:	f009 ff16 	bl	800b80e <HAL_TIM_Base_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80019e8:	f000 f9a6 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019f6:	4619      	mov	r1, r3
 80019f8:	482d      	ldr	r0, [pc, #180]	; (8001ab0 <MX_TIM15_Init+0x140>)
 80019fa:	f00a fa61 	bl	800bec0 <HAL_TIM_ConfigClockSource>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001a04:	f000 f998 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a08:	4829      	ldr	r0, [pc, #164]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a0a:	f009 ffcf 	bl	800b9ac <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a14:	f000 f990 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a28:	f00a ff78 	bl	800c91c <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a32:	f000 f981 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 8001a3a:	2363      	movs	r3, #99	; 0x63
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a5c:	f00a f91c 	bl	800bc98 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a66:	f000 f967 	bl	8001d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001a92:	f00a ffd1 	bl	800ca38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a9c:	f000 f94c 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <MX_TIM15_Init+0x140>)
 8001aa2:	f001 f9a7 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 8001aa6:	bf00      	nop
 8001aa8:	3768      	adds	r7, #104	; 0x68
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	24000c0c 	.word	0x24000c0c
 8001ab4:	40014000 	.word	0x40014000

08001ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	200b      	movs	r0, #11
 8001ae2:	f003 f97b 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	f003 f992 	bl	8004e10 <HAL_NVIC_EnableIRQ>

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	58024400 	.word	0x58024400

08001af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5a:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba4:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <MX_GPIO_Init+0x204>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001bc8:	484d      	ldr	r0, [pc, #308]	; (8001d00 <MX_GPIO_Init+0x208>)
 8001bca:	f005 fcc5 	bl	8007558 <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f644 0190 	movw	r1, #18576	; 0x4890
 8001bd4:	484b      	ldr	r0, [pc, #300]	; (8001d04 <MX_GPIO_Init+0x20c>)
 8001bd6:	f005 fcbf 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be0:	4849      	ldr	r0, [pc, #292]	; (8001d08 <MX_GPIO_Init+0x210>)
 8001be2:	f005 fcb9 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS2_Pin SPI4_CS1_Pin SPI1_CS_Pin SPI2_CS0_Pin
                           SPI2_CS1_Pin SPI2_CS2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8001be6:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001bea:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4840      	ldr	r0, [pc, #256]	; (8001d00 <MX_GPIO_Init+0x208>)
 8001c00:	f005 fafa 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	483a      	ldr	r0, [pc, #232]	; (8001d08 <MX_GPIO_Init+0x210>)
 8001c20:	f005 faea 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_AUX_4_Pin GPIO_AUX_1_Pin SPI3_CS0_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7;
 8001c24:	f644 0390 	movw	r3, #18576	; 0x4890
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4831      	ldr	r0, [pc, #196]	; (8001d04 <MX_GPIO_Init+0x20c>)
 8001c3e:	f005 fadb 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	482d      	ldr	r0, [pc, #180]	; (8001d0c <MX_GPIO_Init+0x214>)
 8001c58:	f005 face 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8001c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4824      	ldr	r0, [pc, #144]	; (8001d08 <MX_GPIO_Init+0x210>)
 8001c76:	f005 fabf 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481d      	ldr	r0, [pc, #116]	; (8001d0c <MX_GPIO_Init+0x214>)
 8001c98:	f005 faae 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4815      	ldr	r0, [pc, #84]	; (8001d04 <MX_GPIO_Init+0x20c>)
 8001cb0:	f005 faa2 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4810      	ldr	r0, [pc, #64]	; (8001d10 <MX_GPIO_Init+0x218>)
 8001cd0:	f005 fa92 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <MX_GPIO_Init+0x218>)
 8001cf0:	f005 fa82 	bl	80071f8 <HAL_GPIO_Init>

}
 8001cf4:	bf00      	nop
 8001cf6:	3730      	adds	r7, #48	; 0x30
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58021000 	.word	0x58021000
 8001d04:	58020c00 	.word	0x58020c00
 8001d08:	58020000 	.word	0x58020000
 8001d0c:	58020800 	.word	0x58020800
 8001d10:	58020400 	.word	0x58020400

08001d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d26:	f001 fec5 	bl	8003ab4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40001000 	.word	0x40001000

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <Error_Handler+0x8>
	...

08001d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x38>)
 8001d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_MspInit+0x38>)
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_MspInit+0x38>)
 8001d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f06f 0001 	mvn.w	r0, #1
 8001d70:	f003 f834 	bl	8004ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58024400 	.word	0x58024400

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b090      	sub	sp, #64	; 0x40
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a79      	ldr	r2, [pc, #484]	; (8001f84 <HAL_ADC_MspInit+0x204>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d14e      	bne.n	8001e40 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001da2:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001daa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dac:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10e      	bne.n	8001dd2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dba:	4a74      	ldr	r2, [pc, #464]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	4a6c      	ldr	r2, [pc, #432]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de2:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e0e:	2333      	movs	r3, #51	; 0x33
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	2303      	movs	r3, #3
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	485b      	ldr	r0, [pc, #364]	; (8001f90 <HAL_ADC_MspInit+0x210>)
 8001e22:	f005 f9e9 	bl	80071f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4856      	ldr	r0, [pc, #344]	; (8001f94 <HAL_ADC_MspInit+0x214>)
 8001e3a:	f005 f9dd 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e3e:	e09d      	b.n	8001f7c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <HAL_ADC_MspInit+0x218>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d169      	bne.n	8001f1e <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e4a:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_ADC_MspInit+0x208>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10e      	bne.n	8001e7a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea8:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ed4:	2333      	movs	r3, #51	; 0x33
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482a      	ldr	r0, [pc, #168]	; (8001f90 <HAL_ADC_MspInit+0x210>)
 8001ee8:	f005 f986 	bl	80071f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eec:	2304      	movs	r3, #4
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efc:	4619      	mov	r1, r3
 8001efe:	4827      	ldr	r0, [pc, #156]	; (8001f9c <HAL_ADC_MspInit+0x21c>)
 8001f00:	f005 f97a 	bl	80071f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	4619      	mov	r1, r3
 8001f16:	481f      	ldr	r0, [pc, #124]	; (8001f94 <HAL_ADC_MspInit+0x214>)
 8001f18:	f005 f96e 	bl	80071f8 <HAL_GPIO_Init>
}
 8001f1c:	e02e      	b.n	8001f7c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_ADC_MspInit+0x220>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d129      	bne.n	8001f7c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_ADC_MspInit+0x20c>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f64:	2303      	movs	r3, #3
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <HAL_ADC_MspInit+0x210>)
 8001f78:	f005 f93e 	bl	80071f8 <HAL_GPIO_Init>
}
 8001f7c:	bf00      	nop
 8001f7e:	3740      	adds	r7, #64	; 0x40
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40022000 	.word	0x40022000
 8001f88:	24000c58 	.word	0x24000c58
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020400 	.word	0x58020400
 8001f98:	40022100 	.word	0x40022100
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	58026000 	.word	0x58026000

08001fa4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_DAC_MspInit+0x90>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d131      	bne.n	800202a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_DAC_MspInit+0x94>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002002:	2330      	movs	r3, #48	; 0x30
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002006:	2303      	movs	r3, #3
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <HAL_DAC_MspInit+0x98>)
 8002016:	f005 f8ef 	bl	80071f8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	210f      	movs	r1, #15
 800201e:	2036      	movs	r0, #54	; 0x36
 8002020:	f002 fedc 	bl	8004ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002024:	2036      	movs	r0, #54	; 0x36
 8002026:	f002 fef3 	bl	8004e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40007400 	.word	0x40007400
 8002038:	58024400 	.word	0x58024400
 800203c:	58020000 	.word	0x58020000

08002040 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0ba      	sub	sp, #232	; 0xe8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	22bc      	movs	r2, #188	; 0xbc
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f00d f8c8 	bl	800f1f6 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_FDCAN_MspInit+0x17c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d14e      	bne.n	800210e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002074:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800207a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4618      	mov	r0, r3
 8002084:	f007 f916 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800208e:	f7ff fe53 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 800209a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800209c:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10e      	bne.n	80020c2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020a4:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020aa:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020fa:	2309      	movs	r3, #9
 80020fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002104:	4619      	mov	r1, r3
 8002106:	4830      	ldr	r0, [pc, #192]	; (80021c8 <HAL_FDCAN_MspInit+0x188>)
 8002108:	f005 f876 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800210c:	e052      	b.n	80021b4 <HAL_FDCAN_MspInit+0x174>
  else if(hfdcan->Instance==FDCAN2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <HAL_FDCAN_MspInit+0x18c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d14d      	bne.n	80021b4 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800211e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002126:	f107 0318 	add.w	r3, r7, #24
 800212a:	4618      	mov	r0, r3
 800212c:	f007 f8c2 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8002136:	f7ff fdff 	bl	8001d38 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 8002142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_FDCAN_MspInit+0x180>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10e      	bne.n	800216a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 800214e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 800215e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_FDCAN_MspInit+0x184>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002188:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800218c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80021a2:	2309      	movs	r3, #9
 80021a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <HAL_FDCAN_MspInit+0x190>)
 80021b0:	f005 f822 	bl	80071f8 <HAL_GPIO_Init>
}
 80021b4:	bf00      	nop
 80021b6:	37e8      	adds	r7, #232	; 0xe8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	4000a000 	.word	0x4000a000
 80021c0:	24000c5c 	.word	0x24000c5c
 80021c4:	58024400 	.word	0x58024400
 80021c8:	58020000 	.word	0x58020000
 80021cc:	4000a400 	.word	0x4000a400
 80021d0:	58020400 	.word	0x58020400

080021d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0bc      	sub	sp, #240	; 0xf0
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	22bc      	movs	r2, #188	; 0xbc
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f00c fffe 	bl	800f1f6 <memset>
  if(hi2c->Instance==I2C1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6d      	ldr	r2, [pc, #436]	; (80023b4 <HAL_I2C_MspInit+0x1e0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d142      	bne.n	800228a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002204:	2308      	movs	r3, #8
 8002206:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	4618      	mov	r0, r3
 8002214:	f007 f84e 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800221e:	f7ff fd8b 	bl	8001d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	4a63      	ldr	r2, [pc, #396]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002258:	2304      	movs	r3, #4
 800225a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002262:	4619      	mov	r1, r3
 8002264:	4855      	ldr	r0, [pc, #340]	; (80023bc <HAL_I2C_MspInit+0x1e8>)
 8002266:	f004 ffc7 	bl	80071f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 800226c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 800227c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002288:	e090      	b.n	80023ac <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_I2C_MspInit+0x1ec>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d143      	bne.n	800231c <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	4618      	mov	r0, r3
 80022a4:	f007 f806 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80022ae:	f7ff fd43 	bl	8001d38 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b8:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d8:	2312      	movs	r3, #18
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022ea:	2304      	movs	r3, #4
 80022ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022f4:	4619      	mov	r1, r3
 80022f6:	4831      	ldr	r0, [pc, #196]	; (80023bc <HAL_I2C_MspInit+0x1e8>)
 80022f8:	f004 ff7e 	bl	80071f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022fc:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002302:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
}
 800231a:	e047      	b.n	80023ac <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <HAL_I2C_MspInit+0x1f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d142      	bne.n	80023ac <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002326:	2310      	movs	r3, #16
 8002328:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	4618      	mov	r0, r3
 8002336:	f006 ffbd 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 8002340:	f7ff fcfa 	bl	8001d38 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002362:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800237c:	2304      	movs	r3, #4
 800237e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002382:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002386:	4619      	mov	r1, r3
 8002388:	480f      	ldr	r0, [pc, #60]	; (80023c8 <HAL_I2C_MspInit+0x1f4>)
 800238a:	f004 ff35 	bl	80071f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 8002396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_I2C_MspInit+0x1e4>)
 80023a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
}
 80023ac:	bf00      	nop
 80023ae:	37f0      	adds	r7, #240	; 0xf0
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40005400 	.word	0x40005400
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020400 	.word	0x58020400
 80023c0:	40005800 	.word	0x40005800
 80023c4:	58001c00 	.word	0x58001c00
 80023c8:	58020c00 	.word	0x58020c00

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0be      	sub	sp, #248	; 0xf8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e8:	22bc      	movs	r2, #188	; 0xbc
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00c ff02 	bl	800f1f6 <memset>
  if(huart->Instance==LPUART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a91      	ldr	r2, [pc, #580]	; (800263c <HAL_UART_MspInit+0x270>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d143      	bne.n	8002484 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023fc:	2304      	movs	r3, #4
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240a:	4618      	mov	r0, r3
 800240c:	f006 ff52 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002416:	f7ff fc8f 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_UART_MspInit+0x274>)
 800241c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002420:	4a87      	ldr	r2, [pc, #540]	; (8002640 <HAL_UART_MspInit+0x274>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_UART_MspInit+0x274>)
 800242c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_UART_MspInit+0x274>)
 800243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <HAL_UART_MspInit+0x274>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002448:	4b7d      	ldr	r3, [pc, #500]	; (8002640 <HAL_UART_MspInit+0x274>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800245a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002470:	2303      	movs	r3, #3
 8002472:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800247a:	4619      	mov	r1, r3
 800247c:	4871      	ldr	r0, [pc, #452]	; (8002644 <HAL_UART_MspInit+0x278>)
 800247e:	f004 febb 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002482:	e0d6      	b.n	8002632 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6f      	ldr	r2, [pc, #444]	; (8002648 <HAL_UART_MspInit+0x27c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d142      	bne.n	8002514 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800248e:	2302      	movs	r3, #2
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249c:	4618      	mov	r0, r3
 800249e:	f006 ff09 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80024a8:	f7ff fc46 	bl	8001d38 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80024ac:	4b64      	ldr	r3, [pc, #400]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b2:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024bc:	4b60      	ldr	r3, [pc, #384]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d0:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_UART_MspInit+0x274>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002500:	2308      	movs	r3, #8
 8002502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800250a:	4619      	mov	r1, r3
 800250c:	484f      	ldr	r0, [pc, #316]	; (800264c <HAL_UART_MspInit+0x280>)
 800250e:	f004 fe73 	bl	80071f8 <HAL_GPIO_Init>
}
 8002512:	e08e      	b.n	8002632 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==UART8)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4d      	ldr	r2, [pc, #308]	; (8002650 <HAL_UART_MspInit+0x284>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d142      	bne.n	80025a4 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252c:	4618      	mov	r0, r3
 800252e:	f006 fec1 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002538:	f7ff fbfe 	bl	8001d38 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_UART_MspInit+0x274>)
 800253e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002542:	4a3f      	ldr	r2, [pc, #252]	; (8002640 <HAL_UART_MspInit+0x274>)
 8002544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254c:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_UART_MspInit+0x274>)
 800254e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_UART_MspInit+0x274>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	4a37      	ldr	r2, [pc, #220]	; (8002640 <HAL_UART_MspInit+0x274>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <HAL_UART_MspInit+0x274>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002578:	2303      	movs	r3, #3
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002590:	2308      	movs	r3, #8
 8002592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002596:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800259a:	4619      	mov	r1, r3
 800259c:	482d      	ldr	r0, [pc, #180]	; (8002654 <HAL_UART_MspInit+0x288>)
 800259e:	f004 fe2b 	bl	80071f8 <HAL_GPIO_Init>
}
 80025a2:	e046      	b.n	8002632 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <HAL_UART_MspInit+0x28c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d141      	bne.n	8002632 <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025bc:	4618      	mov	r0, r3
 80025be:	f006 fe79 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_MspInit+0x200>
      Error_Handler();
 80025c8:	f7ff fbb6 	bl	8001d38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_UART_MspInit+0x274>)
 80025fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002608:	2360      	movs	r3, #96	; 0x60
 800260a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002620:	2307      	movs	r3, #7
 8002622:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002626:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800262a:	4619      	mov	r1, r3
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <HAL_UART_MspInit+0x280>)
 800262e:	f004 fde3 	bl	80071f8 <HAL_GPIO_Init>
}
 8002632:	bf00      	nop
 8002634:	37f8      	adds	r7, #248	; 0xf8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	58000c00 	.word	0x58000c00
 8002640:	58024400 	.word	0x58024400
 8002644:	58020000 	.word	0x58020000
 8002648:	40004c00 	.word	0x40004c00
 800264c:	58020c00 	.word	0x58020c00
 8002650:	40007c00 	.word	0x40007c00
 8002654:	58021000 	.word	0x58021000
 8002658:	40004400 	.word	0x40004400

0800265c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0be      	sub	sp, #248	; 0xf8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002678:	22bc      	movs	r2, #188	; 0xbc
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f00c fdba 	bl	800f1f6 <memset>
  if(husart->Instance==USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a97      	ldr	r2, [pc, #604]	; (80028e4 <HAL_USART_MspInit+0x288>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d168      	bne.n	800275e <HAL_USART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800268c:	2301      	movs	r3, #1
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	4618      	mov	r0, r3
 800269c:	f006 fe0a 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 80026a6:	f7ff fb47 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026aa:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b0:	4a8d      	ldr	r2, [pc, #564]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026b2:	f043 0310 	orr.w	r3, r3, #16
 80026b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b87      	ldr	r3, [pc, #540]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	4a86      	ldr	r2, [pc, #536]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002704:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800271e:	2304      	movs	r3, #4
 8002720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002728:	4619      	mov	r1, r3
 800272a:	4870      	ldr	r0, [pc, #448]	; (80028ec <HAL_USART_MspInit+0x290>)
 800272c:	f004 fd64 	bl	80071f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800274a:	2307      	movs	r3, #7
 800274c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002754:	4619      	mov	r1, r3
 8002756:	4866      	ldr	r0, [pc, #408]	; (80028f0 <HAL_USART_MspInit+0x294>)
 8002758:	f004 fd4e 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800275c:	e0bd      	b.n	80028da <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a64      	ldr	r2, [pc, #400]	; (80028f4 <HAL_USART_MspInit+0x298>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d170      	bne.n	800284a <HAL_USART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002768:	2302      	movs	r3, #2
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	4618      	mov	r0, r3
 8002778:	f006 fd9c 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_USART_MspInit+0x12a>
      Error_Handler();
 8002782:	f7ff fad9 	bl	8001d38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002786:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800278c:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 800278e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002792:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027aa:	4a4f      	ldr	r2, [pc, #316]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80027c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80027c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4843      	ldr	r0, [pc, #268]	; (80028f8 <HAL_USART_MspInit+0x29c>)
 80027ea:	f004 fd05 	bl	80071f8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_USART_MspInit+0x2a4>)
 80027f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 80027f6:	222d      	movs	r2, #45	; 0x2d
 80027f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800282c:	4833      	ldr	r0, [pc, #204]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 800282e:	f002 fcbd 	bl	80051ac <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_USART_MspInit+0x1e0>
      Error_Handler();
 8002838:	f7ff fa7e 	bl	8001d38 <Error_Handler>
    __HAL_LINKDMA(husart,hdmarx,hdma_usart3_rx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
 8002842:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_USART_MspInit+0x2a0>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002848:	e047      	b.n	80028da <HAL_USART_MspInit+0x27e>
  else if(husart->Instance==USART6)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_USART_MspInit+0x2a8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d142      	bne.n	80028da <HAL_USART_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002854:	2301      	movs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002862:	4618      	mov	r0, r3
 8002864:	f006 fd26 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_USART_MspInit+0x216>
      Error_Handler();
 800286e:	f7ff fa63 	bl	8001d38 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002878:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_USART_MspInit+0x28c>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80028ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80028c8:	2307      	movs	r3, #7
 80028ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <HAL_USART_MspInit+0x2ac>)
 80028d6:	f004 fc8f 	bl	80071f8 <HAL_GPIO_Init>
}
 80028da:	bf00      	nop
 80028dc:	37f8      	adds	r7, #248	; 0xf8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40011000 	.word	0x40011000
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58020400 	.word	0x58020400
 80028f0:	58020000 	.word	0x58020000
 80028f4:	40004800 	.word	0x40004800
 80028f8:	58020c00 	.word	0x58020c00
 80028fc:	240008cc 	.word	0x240008cc
 8002900:	40020010 	.word	0x40020010
 8002904:	40011400 	.word	0x40011400
 8002908:	58020800 	.word	0x58020800

0800290c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0ba      	sub	sp, #232	; 0xe8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	22bc      	movs	r2, #188	; 0xbc
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f00c fc62 	bl	800f1f6 <memset>
  if(hqspi->Instance==QUADSPI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_QSPI_MspInit+0x154>)
 8002938:	4293      	cmp	r3, r2
 800293a:	f040 808c 	bne.w	8002a56 <HAL_QSPI_MspInit+0x14a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800293e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002942:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002944:	2300      	movs	r3, #0
 8002946:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f006 fcb1 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002958:	f7ff f9ee 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 800295e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002962:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800296c:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 800296e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 80029a0:	f043 0310 	orr.w	r3, r3, #16
 80029a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 80029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_QSPI_MspInit+0x158>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d4:	2304      	movs	r3, #4
 80029d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029ec:	2309      	movs	r3, #9
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029f6:	4619      	mov	r1, r3
 80029f8:	481b      	ldr	r0, [pc, #108]	; (8002a68 <HAL_QSPI_MspInit+0x15c>)
 80029fa:	f004 fbfd 	bl	80071f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80029fe:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a18:	230a      	movs	r3, #10
 8002a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4811      	ldr	r0, [pc, #68]	; (8002a6c <HAL_QSPI_MspInit+0x160>)
 8002a26:	f004 fbe7 	bl	80071f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a44:	2309      	movs	r3, #9
 8002a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <HAL_QSPI_MspInit+0x164>)
 8002a52:	f004 fbd1 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	37e8      	adds	r7, #232	; 0xe8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	52005000 	.word	0x52005000
 8002a64:	58024400 	.word	0x58024400
 8002a68:	58020400 	.word	0x58020400
 8002a6c:	58021000 	.word	0x58021000
 8002a70:	58020800 	.word	0x58020800

08002a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0be      	sub	sp, #248	; 0xf8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a90:	22bc      	movs	r2, #188	; 0xbc
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00c fbae 	bl	800f1f6 <memset>
  if(hspi->Instance==SPI1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_SPI_MspInit+0x274>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d167      	bne.n	8002b74 <HAL_SPI_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f006 fbfd 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002ac0:	f7ff f93a 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ac4:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aca:	4a88      	ldr	r2, [pc, #544]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ad4:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b82      	ldr	r3, [pc, #520]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	4a80      	ldr	r2, [pc, #512]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af2:	4b7e      	ldr	r3, [pc, #504]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	4b7a      	ldr	r3, [pc, #488]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	4a79      	ldr	r2, [pc, #484]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b10:	4b76      	ldr	r3, [pc, #472]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b1e:	23c0      	movs	r3, #192	; 0xc0
 8002b20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b36:	2305      	movs	r3, #5
 8002b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b40:	4619      	mov	r1, r3
 8002b42:	486b      	ldr	r0, [pc, #428]	; (8002cf0 <HAL_SPI_MspInit+0x27c>)
 8002b44:	f004 fb58 	bl	80071f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b60:	2305      	movs	r3, #5
 8002b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4861      	ldr	r0, [pc, #388]	; (8002cf4 <HAL_SPI_MspInit+0x280>)
 8002b6e:	f004 fb43 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002b72:	e0b4      	b.n	8002cde <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_SPI_MspInit+0x284>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d167      	bne.n	8002c4e <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fb90 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 8002b9a:	f7ff f8cd 	bl	8001d38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b9e:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba4:	4a51      	ldr	r2, [pc, #324]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002baa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bae:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc2:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bcc:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	4a42      	ldr	r2, [pc, #264]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c10:	2305      	movs	r3, #5
 8002c12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4837      	ldr	r0, [pc, #220]	; (8002cfc <HAL_SPI_MspInit+0x288>)
 8002c1e:	f004 faeb 	bl	80071f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c22:	2308      	movs	r3, #8
 8002c24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c44:	4619      	mov	r1, r3
 8002c46:	482e      	ldr	r0, [pc, #184]	; (8002d00 <HAL_SPI_MspInit+0x28c>)
 8002c48:	f004 fad6 	bl	80071f8 <HAL_GPIO_Init>
}
 8002c4c:	e047      	b.n	8002cde <HAL_SPI_MspInit+0x26a>
  else if(hspi->Instance==SPI4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_SPI_MspInit+0x290>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d142      	bne.n	8002cde <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 fb23 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002c74:	f7ff f860 	bl	8001d38 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9c:	4a13      	ldr	r2, [pc, #76]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_SPI_MspInit+0x278>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ccc:	2305      	movs	r3, #5
 8002cce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480b      	ldr	r0, [pc, #44]	; (8002d08 <HAL_SPI_MspInit+0x294>)
 8002cda:	f004 fa8d 	bl	80071f8 <HAL_GPIO_Init>
}
 8002cde:	bf00      	nop
 8002ce0:	37f8      	adds	r7, #248	; 0xf8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40013000 	.word	0x40013000
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	58020000 	.word	0x58020000
 8002cf4:	58020400 	.word	0x58020400
 8002cf8:	40003800 	.word	0x40003800
 8002cfc:	58020800 	.word	0x58020800
 8002d00:	58020c00 	.word	0x58020c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	58021000 	.word	0x58021000

08002d0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_TIM_PWM_MspInit+0x68>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10f      	bne.n	8002d3e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM5)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_TIM_PWM_MspInit+0x70>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10e      	bne.n	8002d66 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8002d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	40000c00 	.word	0x40000c00

08002d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10f      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002db0:	e013      	b.n	8002dda <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_TIM_Base_MspInit+0x70>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10e      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_TIM_Base_MspInit+0x6c>)
 8002dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40000800 	.word	0x40000800
 8002dec:	58024400 	.word	0x58024400
 8002df0:	40014000 	.word	0x40014000

08002df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_TIM_MspPostInit+0x14c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d120      	bne.n	8002e58 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e16:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1c:	4a49      	ldr	r2, [pc, #292]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	483d      	ldr	r0, [pc, #244]	; (8002f48 <HAL_TIM_MspPostInit+0x154>)
 8002e52:	f004 f9d1 	bl	80071f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002e56:	e06e      	b.n	8002f36 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_TIM_MspPostInit+0x158>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d120      	bne.n	8002ea4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e68:	4a36      	ldr	r2, [pc, #216]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e92:	2302      	movs	r3, #2
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	482c      	ldr	r0, [pc, #176]	; (8002f50 <HAL_TIM_MspPostInit+0x15c>)
 8002e9e:	f004 f9ab 	bl	80071f8 <HAL_GPIO_Init>
}
 8002ea2:	e048      	b.n	8002f36 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <HAL_TIM_MspPostInit+0x160>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d11f      	bne.n	8002eee <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb4:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002edc:	2302      	movs	r3, #2
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481c      	ldr	r0, [pc, #112]	; (8002f58 <HAL_TIM_MspPostInit+0x164>)
 8002ee8:	f004 f986 	bl	80071f8 <HAL_GPIO_Init>
}
 8002eec:	e023      	b.n	8002f36 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_TIM_MspPostInit+0x168>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d11e      	bne.n	8002f36 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_TIM_MspPostInit+0x150>)
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f16:	2308      	movs	r3, #8
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002f26:	2304      	movs	r3, #4
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <HAL_TIM_MspPostInit+0x164>)
 8002f32:	f004 f961 	bl	80071f8 <HAL_GPIO_Init>
}
 8002f36:	bf00      	nop
 8002f38:	3730      	adds	r7, #48	; 0x30
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58021000 	.word	0x58021000
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	58020c00 	.word	0x58020c00
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	58020000 	.word	0x58020000
 8002f5c:	40014000 	.word	0x40014000

08002f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b090      	sub	sp, #64	; 0x40
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d827      	bhi.n	8002fbe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	2036      	movs	r0, #54	; 0x36
 8002f74:	f001 ff32 	bl	8004ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f78:	2036      	movs	r0, #54	; 0x36
 8002f7a:	f001 ff49 	bl	8004e10 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_InitTick+0xc4>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_InitTick+0xc8>)
 8002f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f8a:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_InitTick+0xc8>)
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_InitTick+0xc8>)
 8002f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa2:	f107 0210 	add.w	r2, r7, #16
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f006 f93f 	bl	8009230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_InitTick+0x6a>
 8002fbc:	e001      	b.n	8002fc2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02b      	b.n	800301a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fc2:	f006 f909 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 8002fc6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002fc8:	e004      	b.n	8002fd4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fca:	f006 f905 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_InitTick+0xcc>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_InitTick+0xd0>)
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_InitTick+0xd4>)
 8002fe6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_InitTick+0xd0>)
 8002fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_InitTick+0xd0>)
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_InitTick+0xd0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_InitTick+0xd0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <HAL_InitTick+0xd0>)
 8003004:	f008 fc03 	bl	800b80e <HAL_TIM_Base_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800300e:	4808      	ldr	r0, [pc, #32]	; (8003030 <HAL_InitTick+0xd0>)
 8003010:	f008 fc54 	bl	800b8bc <HAL_TIM_Base_Start_IT>
 8003014:	4603      	mov	r3, r0
 8003016:	e000      	b.n	800301a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
}
 800301a:	4618      	mov	r0, r3
 800301c:	3740      	adds	r7, #64	; 0x40
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	24000014 	.word	0x24000014
 8003028:	58024400 	.word	0x58024400
 800302c:	431bde83 	.word	0x431bde83
 8003030:	24000c60 	.word	0x24000c60
 8003034:	40001000 	.word	0x40001000

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800303c:	e7fe      	b.n	800303c <NMI_Handler+0x4>

0800303e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <MemManage_Handler+0x4>

0800304a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <UsageFault_Handler+0x4>

08003056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <DMA1_Stream0_IRQHandler+0x10>)
 800306a:	f002 fbfb 	bl	8005864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	240008cc 	.word	0x240008cc

08003078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <TIM6_DAC_IRQHandler+0x20>)
 800307e:	791b      	ldrb	r3, [r3, #4]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003086:	4804      	ldr	r0, [pc, #16]	; (8003098 <TIM6_DAC_IRQHandler+0x20>)
 8003088:	f001 fef2 	bl	8004e70 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <TIM6_DAC_IRQHandler+0x24>)
 800308e:	f008 fce4 	bl	800ba5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	24000334 	.word	0x24000334
 800309c:	24000c60 	.word	0x24000c60

080030a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
	return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_kill>:

int _kill(int pid, int sig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ba:	f00b ff6b 	bl	800ef94 <__errno>
 80030be:	4603      	mov	r3, r0
 80030c0:	2216      	movs	r2, #22
 80030c2:	601a      	str	r2, [r3, #0]
	return -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_exit>:

void _exit (int status)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ffe7 	bl	80030b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030e2:	e7fe      	b.n	80030e2 <_exit+0x12>

080030e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030f6:	f3af 8000 	nop.w
 80030fa:	4601      	mov	r1, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60ba      	str	r2, [r7, #8]
 8003102:	b2ca      	uxtb	r2, r1
 8003104:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	dbf0      	blt.n	80030f6 <_read+0x12>
	}

return len;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e009      	b.n	8003144 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf1      	blt.n	8003130 <_write+0x12>
	}
	return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_close>:

int _close(int file)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
	return -1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317e:	605a      	str	r2, [r3, #4]
	return 0;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <_isatty>:

int _isatty(int file)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	return 1;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
	return 0;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <_sbrk+0x5c>)
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <_sbrk+0x60>)
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <_sbrk+0x64>)
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <_sbrk+0x68>)
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d207      	bcs.n	8003200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f0:	f00b fed0 	bl	800ef94 <__errno>
 80031f4:	4603      	mov	r3, r0
 80031f6:	220c      	movs	r2, #12
 80031f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031fe:	e009      	b.n	8003214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <_sbrk+0x64>)
 8003210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	24080000 	.word	0x24080000
 8003220:	00000400 	.word	0x00000400
 8003224:	24000cac 	.word	0x24000cac
 8003228:	24001158 	.word	0x24001158

0800322c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003230:	4b37      	ldr	r3, [pc, #220]	; (8003310 <SystemInit+0xe4>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	4a36      	ldr	r2, [pc, #216]	; (8003310 <SystemInit+0xe4>)
 8003238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800323c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <SystemInit+0xe8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	2b06      	cmp	r3, #6
 800324a:	d807      	bhi.n	800325c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800324c:	4b31      	ldr	r3, [pc, #196]	; (8003314 <SystemInit+0xe8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 030f 	bic.w	r3, r3, #15
 8003254:	4a2f      	ldr	r2, [pc, #188]	; (8003314 <SystemInit+0xe8>)
 8003256:	f043 0307 	orr.w	r3, r3, #7
 800325a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <SystemInit+0xec>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2d      	ldr	r2, [pc, #180]	; (8003318 <SystemInit+0xec>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <SystemInit+0xec>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <SystemInit+0xec>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4929      	ldr	r1, [pc, #164]	; (8003318 <SystemInit+0xec>)
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <SystemInit+0xf0>)
 8003276:	4013      	ands	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <SystemInit+0xe8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <SystemInit+0xe8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 030f 	bic.w	r3, r3, #15
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <SystemInit+0xe8>)
 8003290:	f043 0307 	orr.w	r3, r3, #7
 8003294:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <SystemInit+0xec>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800329c:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <SystemInit+0xec>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <SystemInit+0xec>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <SystemInit+0xec>)
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <SystemInit+0xf4>)
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <SystemInit+0xec>)
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <SystemInit+0xf8>)
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <SystemInit+0xec>)
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <SystemInit+0xfc>)
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <SystemInit+0xec>)
 80032bc:	2200      	movs	r2, #0
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <SystemInit+0xec>)
 80032c2:	4a19      	ldr	r2, [pc, #100]	; (8003328 <SystemInit+0xfc>)
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <SystemInit+0xec>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <SystemInit+0xec>)
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <SystemInit+0xfc>)
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <SystemInit+0xec>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <SystemInit+0xec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <SystemInit+0xec>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <SystemInit+0xec>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <SystemInit+0x100>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <SystemInit+0x104>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f6:	d202      	bcs.n	80032fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <SystemInit+0x108>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <SystemInit+0x10c>)
 8003300:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003304:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00
 8003314:	52002000 	.word	0x52002000
 8003318:	58024400 	.word	0x58024400
 800331c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003320:	02020200 	.word	0x02020200
 8003324:	01ff0000 	.word	0x01ff0000
 8003328:	01010280 	.word	0x01010280
 800332c:	5c001000 	.word	0x5c001000
 8003330:	ffff0000 	.word	0xffff0000
 8003334:	51008108 	.word	0x51008108
 8003338:	52004000 	.word	0x52004000

0800333c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800333c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003340:	f7ff ff74 	bl	800322c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800335c:	4c0a      	ldr	r4, [pc, #40]	; (8003388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800336a:	f00b ff0f 	bl	800f18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336e:	f7fd fa35 	bl	80007dc <main>
  bx  lr
 8003372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003374:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003378:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800337c:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8003380:	080125b4 	.word	0x080125b4
  ldr r2, =_sbss
 8003384:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8003388:	24001154 	.word	0x24001154

0800338c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC3_IRQHandler>

0800338e <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	4619      	mov	r1, r3
 800339c:	2007      	movs	r0, #7
 800339e:	f000 fa3f 	bl	8003820 <bno055_writeData>
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4619      	mov	r1, r3
 80033b8:	203d      	movs	r0, #61	; 0x3d
 80033ba:	f000 fa31 	bl	8003820 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80033c4:	2013      	movs	r0, #19
 80033c6:	f000 fa1f 	bl	8003808 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80033ca:	e002      	b.n	80033d2 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80033cc:	2007      	movs	r0, #7
 80033ce:	f000 fa1b 	bl	8003808 <bno055_delay>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7ff ffe3 	bl	80033aa <bno055_setOperationMode>
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80033ec:	200c      	movs	r0, #12
 80033ee:	f7ff ffdc 	bl	80033aa <bno055_setOperationMode>
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80033f6:	b580      	push	{r7, lr}
 80033f8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80033fa:	2120      	movs	r1, #32
 80033fc:	203f      	movs	r0, #63	; 0x3f
 80033fe:	f000 fa0f 	bl	8003820 <bno055_writeData>
  bno055_delay(700);
 8003402:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003406:	f000 f9ff 	bl	8003808 <bno055_delay>
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}

0800340e <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
  bno055_reset();
 8003414:	f7ff ffef 	bl	80033f6 <bno055_reset>

  uint8_t id = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	2201      	movs	r2, #1
 8003420:	4619      	mov	r1, r3
 8003422:	2000      	movs	r0, #0
 8003424:	f000 fae8 	bl	80039f8 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 8003428:	2000      	movs	r0, #0
 800342a:	f7ff ffb0 	bl	800338e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800342e:	2100      	movs	r1, #0
 8003430:	203f      	movs	r0, #63	; 0x3f
 8003432:	f000 f9f5 	bl	8003820 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8003436:	f7ff ffd0 	bl	80033da <bno055_setOperationModeConfig>
  bno055_delay(10);
 800343a:	200a      	movs	r0, #10
 800343c:	f000 f9e4 	bl	8003808 <bno055_delay>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <bno055_getCalibrationState>:
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

bno055_calibration_state_t bno055_getCalibrationState() {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 800344e:	2000      	movs	r0, #0
 8003450:	f7ff ff9d 	bl	800338e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	2201      	movs	r2, #1
 8003460:	4619      	mov	r1, r3
 8003462:	2035      	movs	r0, #53	; 0x35
 8003464:	f000 fac8 	bl	80039f8 <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	b2db      	uxtb	r3, r3
 800346e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	72bb      	strb	r3, [r7, #10]
  return cal;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	2300      	movs	r3, #0
 800349c:	7b3a      	ldrb	r2, [r7, #12]
 800349e:	f362 0307 	bfi	r3, r2, #0, #8
 80034a2:	7b7a      	ldrb	r2, [r7, #13]
 80034a4:	f362 230f 	bfi	r3, r2, #8, #8
 80034a8:	7bba      	ldrb	r2, [r7, #14]
 80034aa:	f362 4317 	bfi	r3, r2, #16, #8
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	f362 631f 	bfi	r3, r2, #24, #8
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80034bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034c0:	b09e      	sub	sp, #120	; 0x78
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7ff ff5f 	bl	800338e <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d108      	bne.n	80034ea <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80034d8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034e0:	2208      	movs	r2, #8
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa88 	bl	80039f8 <bno055_readData>
 80034e8:	e007      	b.n	80034fa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80034ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80034ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f2:	2206      	movs	r2, #6
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa7f 	bl	80039f8 <bno055_readData>

  double scale = 1;
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	4b81      	ldr	r3, [pc, #516]	; (8003704 <bno055_getVector+0x248>)
 8003500:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003508:	2b0e      	cmp	r3, #14
 800350a:	d108      	bne.n	800351e <bno055_getVector+0x62>
    scale = magScale;
 800350c:	4b7e      	ldr	r3, [pc, #504]	; (8003708 <bno055_getVector+0x24c>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003518:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800351c:	e03a      	b.n	8003594 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800351e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003522:	2b08      	cmp	r3, #8
 8003524:	d007      	beq.n	8003536 <bno055_getVector+0x7a>
 8003526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800352a:	2b28      	cmp	r3, #40	; 0x28
 800352c:	d003      	beq.n	8003536 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800352e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d108      	bne.n	8003548 <bno055_getVector+0x8c>
    scale = accelScale;
 8003536:	4b75      	ldr	r3, [pc, #468]	; (800370c <bno055_getVector+0x250>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003542:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8003546:	e025      	b.n	8003594 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8003548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354c:	2b14      	cmp	r3, #20
 800354e:	d108      	bne.n	8003562 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8003550:	4b6f      	ldr	r3, [pc, #444]	; (8003710 <bno055_getVector+0x254>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800355c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8003560:	e018      	b.n	8003594 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8003562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003566:	2b1a      	cmp	r3, #26
 8003568:	d108      	bne.n	800357c <bno055_getVector+0xc0>
    scale = eulerScale;
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <bno055_getVector+0x258>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003576:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800357a:	e00b      	b.n	8003594 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800357c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003580:	2b20      	cmp	r3, #32
 8003582:	d107      	bne.n	8003594 <bno055_getVector+0xd8>
    scale = quaScale;
 8003584:	4b64      	ldr	r3, [pc, #400]	; (8003718 <bno055_getVector+0x25c>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003590:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8003594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003598:	2220      	movs	r2, #32
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f00b fe2a 	bl	800f1f6 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80035a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d14c      	bne.n	8003644 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80035aa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80035c4:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80035c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035cc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80035d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80035ea:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80035ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035f2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80035f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003602:	b21b      	sxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b21b      	sxth	r3, r3
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003610:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003614:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003618:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800361c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	b21a      	sxth	r2, r3
 8003624:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003628:	b21b      	sxth	r3, r3
 800362a:	4313      	orrs	r3, r2
 800362c:	b21b      	sxth	r3, r3
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003636:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800363a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800363e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8003642:	e038      	b.n	80036b6 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003644:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	b21a      	sxth	r2, r3
 800364c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003650:	b21b      	sxth	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b21b      	sxth	r3, r3
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800365e:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003662:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003666:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800366a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21b      	sxth	r3, r3
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003684:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8003688:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800368c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8003690:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	b21a      	sxth	r2, r3
 8003698:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800369c:	b21b      	sxth	r3, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80036aa:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80036ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036b2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80036b6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80036ba:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80036be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80036d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80036da:	ec49 8b14 	vmov	d4, r8, r9
 80036de:	ec45 4b15 	vmov	d5, r4, r5
 80036e2:	ec41 0b16 	vmov	d6, r0, r1
 80036e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80036ea:	eeb0 0b44 	vmov.f64	d0, d4
 80036ee:	eeb0 1b45 	vmov.f64	d1, d5
 80036f2:	eeb0 2b46 	vmov.f64	d2, d6
 80036f6:	eeb0 3b47 	vmov.f64	d3, d7
 80036fa:	3778      	adds	r7, #120	; 0x78
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003702:	bf00      	nop
 8003704:	3ff00000 	.word	0x3ff00000
 8003708:	2400000e 	.word	0x2400000e
 800370c:	24000008 	.word	0x24000008
 8003710:	2400000a 	.word	0x2400000a
 8003714:	2400000c 	.word	0x2400000c
 8003718:	24000010 	.word	0x24000010

0800371c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 800371c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003720:	b090      	sub	sp, #64	; 0x40
 8003722:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8003724:	201a      	movs	r0, #26
 8003726:	f7ff fec9 	bl	80034bc <bno055_getVector>
 800372a:	eeb0 4b40 	vmov.f64	d4, d0
 800372e:	eeb0 5b41 	vmov.f64	d5, d1
 8003732:	eeb0 6b42 	vmov.f64	d6, d2
 8003736:	eeb0 7b43 	vmov.f64	d7, d3
 800373a:	ed87 4b08 	vstr	d4, [r7, #32]
 800373e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8003742:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8003746:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800374a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800374e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003752:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003756:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800375a:	ec49 8b14 	vmov	d4, r8, r9
 800375e:	ec45 4b15 	vmov	d5, r4, r5
 8003762:	ec41 0b16 	vmov	d6, r0, r1
 8003766:	ec43 2b17 	vmov	d7, r2, r3
}
 800376a:	eeb0 0b44 	vmov.f64	d0, d4
 800376e:	eeb0 1b45 	vmov.f64	d1, d5
 8003772:	eeb0 2b46 	vmov.f64	d2, d6
 8003776:	eeb0 3b47 	vmov.f64	d3, d7
 800377a:	3740      	adds	r7, #64	; 0x40
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003782 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8003782:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003786:	b090      	sub	sp, #64	; 0x40
 8003788:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800378a:	2020      	movs	r0, #32
 800378c:	f7ff fe96 	bl	80034bc <bno055_getVector>
 8003790:	eeb0 4b40 	vmov.f64	d4, d0
 8003794:	eeb0 5b41 	vmov.f64	d5, d1
 8003798:	eeb0 6b42 	vmov.f64	d6, d2
 800379c:	eeb0 7b43 	vmov.f64	d7, d3
 80037a0:	ed87 4b08 	vstr	d4, [r7, #32]
 80037a4:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80037a8:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80037ac:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80037b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037b4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80037b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80037bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c0:	ec49 8b14 	vmov	d4, r8, r9
 80037c4:	ec45 4b15 	vmov	d5, r4, r5
 80037c8:	ec41 0b16 	vmov	d6, r0, r1
 80037cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80037d0:	eeb0 0b44 	vmov.f64	d0, d4
 80037d4:	eeb0 1b45 	vmov.f64	d1, d5
 80037d8:	eeb0 2b46 	vmov.f64	d2, d6
 80037dc:	eeb0 3b47 	vmov.f64	d3, d7
 80037e0:	3740      	adds	r7, #64	; 0x40
 80037e2:	46bd      	mov	sp, r7
 80037e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080037e8 <bno055_assignI2C>:

#include "../../../BNO055/Core/Inc/bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <bno055_assignI2C+0x1c>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	24000cb0 	.word	0x24000cb0

08003808 <bno055_delay>:

void bno055_delay(int time) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f96e 	bl	8003af4 <HAL_Delay>
#endif
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	4603      	mov	r3, r0
 8003828:	460a      	mov	r2, r1
 800382a:	71fb      	strb	r3, [r7, #7]
 800382c:	4613      	mov	r3, r2
 800382e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	733b      	strb	r3, [r7, #12]
 8003834:	79bb      	ldrb	r3, [r7, #6]
 8003836:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8003838:	4b5a      	ldr	r3, [pc, #360]	; (80039a4 <bno055_writeData+0x184>)
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	f107 020c 	add.w	r2, r7, #12
 8003840:	230a      	movs	r3, #10
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2302      	movs	r3, #2
 8003846:	2150      	movs	r1, #80	; 0x50
 8003848:	f003 ff30 	bl	80076ac <HAL_I2C_Master_Transmit>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a0 	beq.w	8003998 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d103      	bne.n	8003866 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800385e:	4852      	ldr	r0, [pc, #328]	; (80039a8 <bno055_writeData+0x188>)
 8003860:	f00c fa2e 	bl	800fcc0 <puts>
 8003864:	e012      	b.n	800388c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d103      	bne.n	8003874 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800386c:	484f      	ldr	r0, [pc, #316]	; (80039ac <bno055_writeData+0x18c>)
 800386e:	f00c fa27 	bl	800fcc0 <puts>
 8003872:	e00b      	b.n	800388c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800387a:	484d      	ldr	r0, [pc, #308]	; (80039b0 <bno055_writeData+0x190>)
 800387c:	f00c fa20 	bl	800fcc0 <puts>
 8003880:	e004      	b.n	800388c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	4619      	mov	r1, r3
 8003886:	484b      	ldr	r0, [pc, #300]	; (80039b4 <bno055_writeData+0x194>)
 8003888:	f00c f994 	bl	800fbb4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <bno055_writeData+0x184>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f004 f903 	bl	8007a9c <HAL_I2C_GetError>
 8003896:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d07e      	beq.n	800399c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d103      	bne.n	80038ac <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80038a4:	4844      	ldr	r0, [pc, #272]	; (80039b8 <bno055_writeData+0x198>)
 80038a6:	f00c fa0b 	bl	800fcc0 <puts>
 80038aa:	e021      	b.n	80038f0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d103      	bne.n	80038ba <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80038b2:	4842      	ldr	r0, [pc, #264]	; (80039bc <bno055_writeData+0x19c>)
 80038b4:	f00c fa04 	bl	800fcc0 <puts>
 80038b8:	e01a      	b.n	80038f0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d103      	bne.n	80038c8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80038c0:	483f      	ldr	r0, [pc, #252]	; (80039c0 <bno055_writeData+0x1a0>)
 80038c2:	f00c f9fd 	bl	800fcc0 <puts>
 80038c6:	e013      	b.n	80038f0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d103      	bne.n	80038d6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80038ce:	483d      	ldr	r0, [pc, #244]	; (80039c4 <bno055_writeData+0x1a4>)
 80038d0:	f00c f9f6 	bl	800fcc0 <puts>
 80038d4:	e00c      	b.n	80038f0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d103      	bne.n	80038e4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80038dc:	483a      	ldr	r0, [pc, #232]	; (80039c8 <bno055_writeData+0x1a8>)
 80038de:	f00c f9ef 	bl	800fcc0 <puts>
 80038e2:	e005      	b.n	80038f0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d102      	bne.n	80038f0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80038ea:	4838      	ldr	r0, [pc, #224]	; (80039cc <bno055_writeData+0x1ac>)
 80038ec:	f00c f9e8 	bl	800fcc0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <bno055_writeData+0x184>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 f8c3 	bl	8007a80 <HAL_I2C_GetState>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8003904:	4832      	ldr	r0, [pc, #200]	; (80039d0 <bno055_writeData+0x1b0>)
 8003906:	f00c f9db 	bl	800fcc0 <puts>
 800390a:	e048      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b20      	cmp	r3, #32
 8003910:	d103      	bne.n	800391a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8003912:	482f      	ldr	r0, [pc, #188]	; (80039d0 <bno055_writeData+0x1b0>)
 8003914:	f00c f9d4 	bl	800fcc0 <puts>
 8003918:	e041      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b24      	cmp	r3, #36	; 0x24
 800391e:	d103      	bne.n	8003928 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8003920:	482c      	ldr	r0, [pc, #176]	; (80039d4 <bno055_writeData+0x1b4>)
 8003922:	f00c f9cd 	bl	800fcc0 <puts>
 8003926:	e03a      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b21      	cmp	r3, #33	; 0x21
 800392c:	d103      	bne.n	8003936 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800392e:	482a      	ldr	r0, [pc, #168]	; (80039d8 <bno055_writeData+0x1b8>)
 8003930:	f00c f9c6 	bl	800fcc0 <puts>
 8003934:	e033      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b22      	cmp	r3, #34	; 0x22
 800393a:	d103      	bne.n	8003944 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800393c:	4827      	ldr	r0, [pc, #156]	; (80039dc <bno055_writeData+0x1bc>)
 800393e:	f00c f9bf 	bl	800fcc0 <puts>
 8003942:	e02c      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b28      	cmp	r3, #40	; 0x28
 8003948:	d103      	bne.n	8003952 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800394a:	4825      	ldr	r0, [pc, #148]	; (80039e0 <bno055_writeData+0x1c0>)
 800394c:	f00c f9b8 	bl	800fcc0 <puts>
 8003950:	e025      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b29      	cmp	r3, #41	; 0x29
 8003956:	d103      	bne.n	8003960 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8003958:	4822      	ldr	r0, [pc, #136]	; (80039e4 <bno055_writeData+0x1c4>)
 800395a:	f00c f9b1 	bl	800fcc0 <puts>
 800395e:	e01e      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b2a      	cmp	r3, #42	; 0x2a
 8003964:	d103      	bne.n	800396e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8003966:	4820      	ldr	r0, [pc, #128]	; (80039e8 <bno055_writeData+0x1c8>)
 8003968:	f00c f9aa 	bl	800fcc0 <puts>
 800396c:	e017      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d103      	bne.n	800397c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8003974:	481d      	ldr	r0, [pc, #116]	; (80039ec <bno055_writeData+0x1cc>)
 8003976:	f00c f9a3 	bl	800fcc0 <puts>
 800397a:	e010      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2ba0      	cmp	r3, #160	; 0xa0
 8003980:	d103      	bne.n	800398a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8003982:	481b      	ldr	r0, [pc, #108]	; (80039f0 <bno055_writeData+0x1d0>)
 8003984:	f00c f99c 	bl	800fcc0 <puts>
 8003988:	e009      	b.n	800399e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2be0      	cmp	r3, #224	; 0xe0
 800398e:	d106      	bne.n	800399e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8003990:	4818      	ldr	r0, [pc, #96]	; (80039f4 <bno055_writeData+0x1d4>)
 8003992:	f00c f995 	bl	800fcc0 <puts>
 8003996:	e002      	b.n	800399e <bno055_writeData+0x17e>
    return;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <bno055_writeData+0x17e>
    return;
 800399c:	bf00      	nop
  }
}
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	24000cb0 	.word	0x24000cb0
 80039a8:	08011f2c 	.word	0x08011f2c
 80039ac:	08011f50 	.word	0x08011f50
 80039b0:	08011f78 	.word	0x08011f78
 80039b4:	08011f9c 	.word	0x08011f9c
 80039b8:	08011fb4 	.word	0x08011fb4
 80039bc:	08011fc8 	.word	0x08011fc8
 80039c0:	08011fdc 	.word	0x08011fdc
 80039c4:	08011ff0 	.word	0x08011ff0
 80039c8:	08012004 	.word	0x08012004
 80039cc:	08012018 	.word	0x08012018
 80039d0:	08012030 	.word	0x08012030
 80039d4:	08012048 	.word	0x08012048
 80039d8:	0801205c 	.word	0x0801205c
 80039dc:	08012074 	.word	0x08012074
 80039e0:	0801208c 	.word	0x0801208c
 80039e4:	080120a4 	.word	0x080120a4
 80039e8:	080120c4 	.word	0x080120c4
 80039ec:	080120e4 	.word	0x080120e4
 80039f0:	080120fc 	.word	0x080120fc
 80039f4:	08012114 	.word	0x08012114

080039f8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <bno055_readData+0x40>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	1dfa      	adds	r2, r7, #7
 8003a0e:	2364      	movs	r3, #100	; 0x64
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	2150      	movs	r1, #80	; 0x50
 8003a16:	f003 fe49 	bl	80076ac <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <bno055_readData+0x40>)
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	9200      	str	r2, [sp, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	2150      	movs	r1, #80	; 0x50
 8003a2a:	f003 ff33 	bl	8007894 <HAL_I2C_Master_Receive>
                         100);
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24000cb0 	.word	0x24000cb0

08003a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f001 f9bf 	bl	8004dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a48:	f005 fa1c 	bl	8008e84 <HAL_RCC_GetSysClockFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_Init+0x68>)
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	4913      	ldr	r1, [pc, #76]	; (8003aa8 <HAL_Init+0x6c>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_Init+0x68>)
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_Init+0x6c>)
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_Init+0x70>)
 8003a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <HAL_Init+0x74>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a86:	200f      	movs	r0, #15
 8003a88:	f7ff fa6a 	bl	8002f60 <HAL_InitTick>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e002      	b.n	8003a9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a96:	f7fe f955 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	08012178 	.word	0x08012178
 8003aac:	24000004 	.word	0x24000004
 8003ab0:	24000000 	.word	0x24000000

08003ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_IncTick+0x20>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_IncTick+0x24>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_IncTick+0x24>)
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	24000018 	.word	0x24000018
 8003ad8:	24000cb4 	.word	0x24000cb4

08003adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_GetTick+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	24000cb4 	.word	0x24000cb4

08003af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff ffee 	bl	8003adc <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0c:	d005      	beq.n	8003b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_Delay+0x44>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b1a:	bf00      	nop
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d8f7      	bhi.n	8003b1c <HAL_Delay+0x28>
  {
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	24000018 	.word	0x24000018

08003b3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_GetREVID+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0c1b      	lsrs	r3, r3, #16
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	5c001000 	.word	0x5c001000

08003b54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3360      	adds	r3, #96	; 0x60
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]
  }
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3330      	adds	r3, #48	; 0x30
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	211f      	movs	r1, #31
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	f003 011f 	and.w	r1, r3, #31
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0e5b      	lsrs	r3, r3, #25
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2107      	movs	r1, #7
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0d1b      	lsrs	r3, r3, #20
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	401a      	ands	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0318 	and.w	r3, r3, #24
 8003d36:	4908      	ldr	r1, [pc, #32]	; (8003d58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d38:	40d9      	lsrs	r1, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	000fffff 	.word	0x000fffff

08003d5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6093      	str	r3, [r2, #8]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	5fffffc0 	.word	0x5fffffc0

08003d80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <LL_ADC_EnableInternalRegulator+0x24>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	6fffffc0 	.word	0x6fffffc0

08003dd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de4:	d101      	bne.n	8003dea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_IsEnabled+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_IsEnabled+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d101      	bne.n	8003e5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e18f      	b.n	80041a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd ff73 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff67 	bl	8003d80 <LL_ADC_IsDeepPowerDownEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff4d 	bl	8003d5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff82 	bl	8003dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff66 	bl	8003da8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003edc:	4b87      	ldr	r3, [pc, #540]	; (80040fc <HAL_ADC_Init+0x290>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_ADC_Init+0x294>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	3301      	adds	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eee:	e002      	b.n	8003ef6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f9      	bne.n	8003ef0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff65 	bl	8003dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff76 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 8003f32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8129 	bne.w	8004194 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8125 	bne.w	8004194 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff4a 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d136      	bne.n	8003fd8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_ADC_Init+0x298>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADC_Init+0x112>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a63      	ldr	r2, [pc, #396]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10e      	bne.n	8003f9c <HAL_ADC_Init+0x130>
 8003f7e:	4861      	ldr	r0, [pc, #388]	; (8004104 <HAL_ADC_Init+0x298>)
 8003f80:	f7ff ff3a 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f84:	4604      	mov	r4, r0
 8003f86:	4860      	ldr	r0, [pc, #384]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003f88:	f7ff ff36 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4323      	orrs	r3, r4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e008      	b.n	8003fae <HAL_ADC_Init+0x142>
 8003f9c:	485b      	ldr	r0, [pc, #364]	; (800410c <HAL_ADC_Init+0x2a0>)
 8003f9e:	f7ff ff2b 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d012      	beq.n	8003fd8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_ADC_Init+0x298>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_ADC_Init+0x15a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Init+0x15e>
 8003fc6:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_ADC_Init+0x2a4>)
 8003fc8:	e000      	b.n	8003fcc <HAL_ADC_Init+0x160>
 8003fca:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_ADC_Init+0x2a8>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7ff fdbe 	bl	8003b54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003fd8:	f7ff fdb0 	bl	8003b3c <HAL_GetREVID>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d914      	bls.n	8004010 <HAL_ADC_Init+0x1a4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d110      	bne.n	8004010 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7d5b      	ldrb	r3, [r3, #21]
 8003ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ff8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ffe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
 8004004:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004006:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004008:	f043 030c 	orr.w	r3, r3, #12
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e00d      	b.n	800402c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7d5b      	ldrb	r3, [r3, #21]
 8004014:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800401a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004020:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7f1b      	ldrb	r3, [r3, #28]
 8004026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7f1b      	ldrb	r3, [r3, #28]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	3b01      	subs	r3, #1
 800403a:	045b      	lsls	r3, r3, #17
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_ADC_Init+0x2ac>)
 8004066:	4013      	ands	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	430b      	orrs	r3, r1
 8004070:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fed1 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 800407c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fede 	bl	8003e44 <LL_ADC_INJ_IsConversionOngoing>
 8004088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15f      	bne.n	8004150 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d15c      	bne.n	8004150 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7d1b      	ldrb	r3, [r3, #20]
 800409a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_ADC_Init+0x2b0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d130      	bne.n	8004124 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_ADC_Init+0x2b4>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040d6:	3a01      	subs	r2, #1
 80040d8:	0411      	lsls	r1, r2, #16
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ea:	430a      	orrs	r2, r1
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	611a      	str	r2, [r3, #16]
 80040f8:	e01c      	b.n	8004134 <HAL_ADC_Init+0x2c8>
 80040fa:	bf00      	nop
 80040fc:	24000000 	.word	0x24000000
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	40022000 	.word	0x40022000
 8004108:	40022100 	.word	0x40022100
 800410c:	58026000 	.word	0x58026000
 8004110:	40022300 	.word	0x40022300
 8004114:	58026300 	.word	0x58026300
 8004118:	fff0c003 	.word	0xfff0c003
 800411c:	ffffbffc 	.word	0xffffbffc
 8004120:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb80 	bl	8004850 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f023 010f 	bic.w	r1, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
 8004170:	e007      	b.n	8004182 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 020f 	bic.w	r2, r2, #15
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
 8004192:	e007      	b.n	80041a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0210 	orr.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop

080041b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b0a1      	sub	sp, #132	; 0x84
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a9d      	ldr	r2, [pc, #628]	; (8004440 <HAL_ADC_ConfigChannel+0x290>)
 80041ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x2a>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e321      	b.n	800481e <HAL_ADC_ConfigChannel+0x66e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fe19 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 8306 	bne.w	8004800 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x62>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	e016      	b.n	8004240 <HAL_ADC_ConfigChannel+0x90>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004222:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e003      	b.n	8004236 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	2201      	movs	r2, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	69d1      	ldr	r1, [r2, #28]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	430b      	orrs	r3, r1
 800424c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f7ff fd02 	bl	8003c64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fdda 	bl	8003e1e <LL_ADC_REG_IsConversionOngoing>
 800426a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fde7 	bl	8003e44 <LL_ADC_INJ_IsConversionOngoing>
 8004276:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 80b3 	bne.w	80043e6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 80af 	bne.w	80043e6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	461a      	mov	r2, r3
 8004296:	f7ff fd11 	bl	8003cbc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800429a:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <HAL_ADC_ConfigChannel+0x294>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a6:	d10b      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x110>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	e01d      	b.n	80042fc <HAL_ADC_ConfigChannel+0x14c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x136>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	e00a      	b.n	80042fc <HAL_ADC_ConfigChannel+0x14c>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b04      	cmp	r3, #4
 8004304:	d027      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6919      	ldr	r1, [r3, #16]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004314:	f7ff fc52 	bl	8003bbc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6919      	ldr	r1, [r3, #16]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	7e5b      	ldrb	r3, [r3, #25]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_ADC_ConfigChannel+0x17e>
 8004328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800432c:	e000      	b.n	8004330 <HAL_ADC_ConfigChannel+0x180>
 800432e:	2300      	movs	r3, #0
 8004330:	461a      	mov	r2, r3
 8004332:	f7ff fc7c 	bl	8003c2e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	7e1b      	ldrb	r3, [r3, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_ADC_ConfigChannel+0x19c>
 8004346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434a:	e000      	b.n	800434e <HAL_ADC_ConfigChannel+0x19e>
 800434c:	2300      	movs	r3, #0
 800434e:	461a      	mov	r2, r3
 8004350:	f7ff fc54 	bl	8003bfc <LL_ADC_SetDataRightShift>
 8004354:	e047      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	069b      	lsls	r3, r3, #26
 8004366:	429a      	cmp	r2, r3
 8004368:	d107      	bne.n	800437a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004378:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	069b      	lsls	r3, r3, #26
 800438a:	429a      	cmp	r2, r3
 800438c:	d107      	bne.n	800439e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800439c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	069b      	lsls	r3, r3, #26
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d107      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	069b      	lsls	r3, r3, #26
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d107      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fd04 	bl	8003df8 <LL_ADC_IsEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 820d 	bne.w	8004812 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	461a      	mov	r2, r3
 8004406:	f7ff fc85 	bl	8003d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <HAL_ADC_ConfigChannel+0x290>)
 8004410:	4293      	cmp	r3, r2
 8004412:	f040 8133 	bne.w	800467c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004422:	2b00      	cmp	r3, #0
 8004424:	d110      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x298>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0e9b      	lsrs	r3, r3, #26
 800442c:	3301      	adds	r3, #1
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2b09      	cmp	r3, #9
 8004434:	bf94      	ite	ls
 8004436:	2301      	movls	r3, #1
 8004438:	2300      	movhi	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	e01e      	b.n	800447c <HAL_ADC_ConfigChannel+0x2cc>
 800443e:	bf00      	nop
 8004440:	47ff0000 	.word	0x47ff0000
 8004444:	5c001000 	.word	0x5c001000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004450:	fa93 f3a3 	rbit	r3, r3
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004458:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800445a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004460:	2320      	movs	r3, #32
 8004462:	e003      	b.n	800446c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	3301      	adds	r3, #1
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2b09      	cmp	r3, #9
 8004474:	bf94      	ite	ls
 8004476:	2301      	movls	r3, #1
 8004478:	2300      	movhi	r3, #0
 800447a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	2b00      	cmp	r3, #0
 800447e:	d079      	beq.n	8004574 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_ADC_ConfigChannel+0x2ec>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	3301      	adds	r3, #1
 8004494:	069b      	lsls	r3, r3, #26
 8004496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800449a:	e015      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x318>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80044aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80044ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80044b4:	2320      	movs	r3, #32
 80044b6:	e003      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80044b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	069b      	lsls	r3, r3, #26
 80044c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x338>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0e9b      	lsrs	r3, r3, #26
 80044da:	3301      	adds	r3, #1
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	e017      	b.n	8004518 <HAL_ADC_ConfigChannel+0x368>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004500:	2320      	movs	r3, #32
 8004502:	e003      	b.n	800450c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3301      	adds	r3, #1
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f303 	lsl.w	r3, r1, r3
 8004518:	ea42 0103 	orr.w	r1, r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <HAL_ADC_ConfigChannel+0x38e>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	0e9b      	lsrs	r3, r3, #26
 800452e:	3301      	adds	r3, #1
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	051b      	lsls	r3, r3, #20
 800453c:	e018      	b.n	8004570 <HAL_ADC_ConfigChannel+0x3c0>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e003      	b.n	8004562 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004570:	430b      	orrs	r3, r1
 8004572:	e07e      	b.n	8004672 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x3e0>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	3301      	adds	r3, #1
 8004588:	069b      	lsls	r3, r3, #26
 800458a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800458e:	e015      	b.n	80045bc <HAL_ADC_ConfigChannel+0x40c>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	069b      	lsls	r3, r3, #26
 80045b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x42c>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	e017      	b.n	800460c <HAL_ADC_ConfigChannel+0x45c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	61bb      	str	r3, [r7, #24]
  return result;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80045f4:	2320      	movs	r3, #32
 80045f6:	e003      	b.n	8004600 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2101      	movs	r1, #1
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x488>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	3301      	adds	r3, #1
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	3b1e      	subs	r3, #30
 8004630:	051b      	lsls	r3, r3, #20
 8004632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004636:	e01b      	b.n	8004670 <HAL_ADC_ConfigChannel+0x4c0>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	60fb      	str	r3, [r7, #12]
  return result;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004650:	2320      	movs	r3, #32
 8004652:	e003      	b.n	800465c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f003 021f 	and.w	r2, r3, #31
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	3b1e      	subs	r3, #30
 800466a:	051b      	lsls	r3, r3, #20
 800466c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004670:	430b      	orrs	r3, r1
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	6892      	ldr	r2, [r2, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	f7ff fb20 	bl	8003cbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f280 80c6 	bge.w	8004812 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a67      	ldr	r2, [pc, #412]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_ADC_ConfigChannel+0x4ea>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a65      	ldr	r2, [pc, #404]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_ADC_ConfigChannel+0x4ee>
 800469a:	4b65      	ldr	r3, [pc, #404]	; (8004830 <HAL_ADC_ConfigChannel+0x680>)
 800469c:	e000      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x4f0>
 800469e:	4b65      	ldr	r3, [pc, #404]	; (8004834 <HAL_ADC_ConfigChannel+0x684>)
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fa7d 	bl	8003ba0 <LL_ADC_GetCommonPathInternalCh>
 80046a6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_ADC_ConfigChannel+0x50c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5d      	ldr	r2, [pc, #372]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10e      	bne.n	80046da <HAL_ADC_ConfigChannel+0x52a>
 80046bc:	485a      	ldr	r0, [pc, #360]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 80046be:	f7ff fb9b 	bl	8003df8 <LL_ADC_IsEnabled>
 80046c2:	4604      	mov	r4, r0
 80046c4:	4859      	ldr	r0, [pc, #356]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 80046c6:	f7ff fb97 	bl	8003df8 <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4323      	orrs	r3, r4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	e008      	b.n	80046ec <HAL_ADC_ConfigChannel+0x53c>
 80046da:	4857      	ldr	r0, [pc, #348]	; (8004838 <HAL_ADC_ConfigChannel+0x688>)
 80046dc:	f7ff fb8c 	bl	8003df8 <LL_ADC_IsEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d07d      	beq.n	80047ec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a51      	ldr	r2, [pc, #324]	; (800483c <HAL_ADC_ConfigChannel+0x68c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d130      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5ac>
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d12b      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4b      	ldr	r2, [pc, #300]	; (8004838 <HAL_ADC_ConfigChannel+0x688>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f040 8081 	bne.w	8004812 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a44      	ldr	r2, [pc, #272]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_ADC_ConfigChannel+0x574>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a43      	ldr	r2, [pc, #268]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x578>
 8004724:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_ADC_ConfigChannel+0x680>)
 8004726:	e000      	b.n	800472a <HAL_ADC_ConfigChannel+0x57a>
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <HAL_ADC_ConfigChannel+0x684>)
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f7ff fa21 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_ADC_ConfigChannel+0x690>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	4a41      	ldr	r2, [pc, #260]	; (8004844 <HAL_ADC_ConfigChannel+0x694>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	3301      	adds	r3, #1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800474c:	e002      	b.n	8004754 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f9      	bne.n	800474e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800475a:	e05a      	b.n	8004812 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a39      	ldr	r2, [pc, #228]	; (8004848 <HAL_ADC_ConfigChannel+0x698>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d11e      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x5f4>
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d119      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <HAL_ADC_ConfigChannel+0x688>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d14b      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_ADC_ConfigChannel+0x5de>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a28      	ldr	r2, [pc, #160]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x5e2>
 800478e:	4a28      	ldr	r2, [pc, #160]	; (8004830 <HAL_ADC_ConfigChannel+0x680>)
 8004790:	e000      	b.n	8004794 <HAL_ADC_ConfigChannel+0x5e4>
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_ADC_ConfigChannel+0x684>)
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7ff f9ec 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a2:	e036      	b.n	8004812 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a28      	ldr	r2, [pc, #160]	; (800484c <HAL_ADC_ConfigChannel+0x69c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d131      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x662>
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d12c      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_ADC_ConfigChannel+0x688>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d127      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_ADC_ConfigChannel+0x678>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_ConfigChannel+0x626>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <HAL_ADC_ConfigChannel+0x67c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_ADC_ConfigChannel+0x62a>
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_ADC_ConfigChannel+0x680>)
 80047d8:	e000      	b.n	80047dc <HAL_ADC_ConfigChannel+0x62c>
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_ADC_ConfigChannel+0x684>)
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7ff f9c8 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
 80047ea:	e012      	b.n	8004812 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80047fe:	e008      	b.n	8004812 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800481a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800481e:	4618      	mov	r0, r3
 8004820:	3784      	adds	r7, #132	; 0x84
 8004822:	46bd      	mov	sp, r7
 8004824:	bd90      	pop	{r4, r7, pc}
 8004826:	bf00      	nop
 8004828:	40022000 	.word	0x40022000
 800482c:	40022100 	.word	0x40022100
 8004830:	40022300 	.word	0x40022300
 8004834:	58026300 	.word	0x58026300
 8004838:	58026000 	.word	0x58026000
 800483c:	cb840000 	.word	0xcb840000
 8004840:	24000000 	.word	0x24000000
 8004844:	053e2d63 	.word	0x053e2d63
 8004848:	c7520000 	.word	0xc7520000
 800484c:	cfb80000 	.word	0xcfb80000

08004850 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a79      	ldr	r2, [pc, #484]	; (8004a44 <ADC_ConfigureBoostMode+0x1f4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <ADC_ConfigureBoostMode+0x1c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a78      	ldr	r2, [pc, #480]	; (8004a48 <ADC_ConfigureBoostMode+0x1f8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <ADC_ConfigureBoostMode+0x30>
 800486c:	4b77      	ldr	r3, [pc, #476]	; (8004a4c <ADC_ConfigureBoostMode+0x1fc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e008      	b.n	8004892 <ADC_ConfigureBoostMode+0x42>
 8004880:	4b73      	ldr	r3, [pc, #460]	; (8004a50 <ADC_ConfigureBoostMode+0x200>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01c      	beq.n	80048d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004896:	f004 fc6f 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 800489a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a4:	d010      	beq.n	80048c8 <ADC_ConfigureBoostMode+0x78>
 80048a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048aa:	d871      	bhi.n	8004990 <ADC_ConfigureBoostMode+0x140>
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d002      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x68>
 80048b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b6:	d16b      	bne.n	8004990 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	60fb      	str	r3, [r7, #12]
        break;
 80048c6:	e066      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	60fb      	str	r3, [r7, #12]
        break;
 80048ce:	e062      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80048d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80048d4:	f005 fc34 	bl	800a140 <HAL_RCCEx_GetPeriphCLKFreq>
 80048d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048e2:	d051      	beq.n	8004988 <ADC_ConfigureBoostMode+0x138>
 80048e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048e8:	d854      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 80048ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048ee:	d047      	beq.n	8004980 <ADC_ConfigureBoostMode+0x130>
 80048f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048f4:	d84e      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 80048f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80048fa:	d03d      	beq.n	8004978 <ADC_ConfigureBoostMode+0x128>
 80048fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004900:	d848      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 8004902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004906:	d033      	beq.n	8004970 <ADC_ConfigureBoostMode+0x120>
 8004908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800490c:	d842      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 800490e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004912:	d029      	beq.n	8004968 <ADC_ConfigureBoostMode+0x118>
 8004914:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004918:	d83c      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 800491a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800491e:	d01a      	beq.n	8004956 <ADC_ConfigureBoostMode+0x106>
 8004920:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004924:	d836      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 8004926:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800492a:	d014      	beq.n	8004956 <ADC_ConfigureBoostMode+0x106>
 800492c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004930:	d830      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d00e      	beq.n	8004956 <ADC_ConfigureBoostMode+0x106>
 8004938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493c:	d82a      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 800493e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004942:	d008      	beq.n	8004956 <ADC_ConfigureBoostMode+0x106>
 8004944:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004948:	d824      	bhi.n	8004994 <ADC_ConfigureBoostMode+0x144>
 800494a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800494e:	d002      	beq.n	8004956 <ADC_ConfigureBoostMode+0x106>
 8004950:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004954:	d11e      	bne.n	8004994 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	60fb      	str	r3, [r7, #12]
        break;
 8004966:	e016      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e012      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e00e      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	60fb      	str	r3, [r7, #12]
        break;
 800497e:	e00a      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	09db      	lsrs	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
        break;
 8004986:	e006      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	60fb      	str	r3, [r7, #12]
        break;
 800498e:	e002      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004994:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004996:	f7ff f8d1 	bl	8003b3c <HAL_GetREVID>
 800499a:	4603      	mov	r3, r0
 800499c:	f241 0203 	movw	r2, #4099	; 0x1003
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d815      	bhi.n	80049d0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <ADC_ConfigureBoostMode+0x204>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d908      	bls.n	80049be <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80049bc:	e03e      	b.n	8004a3c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049cc:	609a      	str	r2, [r3, #8]
}
 80049ce:	e035      	b.n	8004a3c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <ADC_ConfigureBoostMode+0x208>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d808      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049ec:	609a      	str	r2, [r3, #8]
}
 80049ee:	e025      	b.n	8004a3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <ADC_ConfigureBoostMode+0x20c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d80a      	bhi.n	8004a0e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	e016      	b.n	8004a3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <ADC_ConfigureBoostMode+0x210>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d80a      	bhi.n	8004a2c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	e007      	b.n	8004a3c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40022100 	.word	0x40022100
 8004a4c:	40022300 	.word	0x40022300
 8004a50:	58026300 	.word	0x58026300
 8004a54:	01312d00 	.word	0x01312d00
 8004a58:	005f5e10 	.word	0x005f5e10
 8004a5c:	00bebc20 	.word	0x00bebc20
 8004a60:	017d7840 	.word	0x017d7840

08004a64 <LL_ADC_IsEnabled>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <LL_ADC_IsEnabled+0x18>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <LL_ADC_IsEnabled+0x1a>
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_ADC_REG_IsConversionOngoing>:
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d101      	bne.n	8004aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b09f      	sub	sp, #124	; 0x7c
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e0be      	b.n	8004c4c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a5c      	ldr	r2, [pc, #368]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d102      	bne.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ae8:	4b5b      	ldr	r3, [pc, #364]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	e001      	b.n	8004af2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e09d      	b.n	8004c4c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffb9 	bl	8004a8a <LL_ADC_REG_IsConversionOngoing>
 8004b18:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ffb3 	bl	8004a8a <LL_ADC_REG_IsConversionOngoing>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d17f      	bne.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d17c      	bne.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a47      	ldr	r2, [pc, #284]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a46      	ldr	r2, [pc, #280]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b46:	e000      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004b48:	4b45      	ldr	r3, [pc, #276]	; (8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b4a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d039      	beq.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3a      	ldr	r2, [pc, #232]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a38      	ldr	r2, [pc, #224]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10e      	bne.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004b7a:	4836      	ldr	r0, [pc, #216]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b7c:	f7ff ff72 	bl	8004a64 <LL_ADC_IsEnabled>
 8004b80:	4604      	mov	r4, r0
 8004b82:	4835      	ldr	r0, [pc, #212]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b84:	f7ff ff6e 	bl	8004a64 <LL_ADC_IsEnabled>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4323      	orrs	r3, r4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e008      	b.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004b98:	4832      	ldr	r0, [pc, #200]	; (8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b9a:	f7ff ff63 	bl	8004a64 <LL_ADC_IsEnabled>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d047      	beq.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	6892      	ldr	r2, [r2, #8]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc6:	e03a      	b.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10e      	bne.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004be8:	481a      	ldr	r0, [pc, #104]	; (8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bea:	f7ff ff3b 	bl	8004a64 <LL_ADC_IsEnabled>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	4819      	ldr	r0, [pc, #100]	; (8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004bf2:	f7ff ff37 	bl	8004a64 <LL_ADC_IsEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e008      	b.n	8004c18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004c06:	4817      	ldr	r0, [pc, #92]	; (8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c08:	f7ff ff2c 	bl	8004a64 <LL_ADC_IsEnabled>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c26:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c28:	e009      	b.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004c3c:	e000      	b.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c3e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	377c      	adds	r7, #124	; 0x7c
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40022100 	.word	0x40022100
 8004c5c:	40022300 	.word	0x40022300
 8004c60:	58026300 	.word	0x58026300
 8004c64:	58026000 	.word	0x58026000
 8004c68:	fffff0e0 	.word	0xfffff0e0

08004c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <__NVIC_SetPriorityGrouping+0x40>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <__NVIC_SetPriorityGrouping+0x40>)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	60d3      	str	r3, [r2, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed00 	.word	0xe000ed00
 8004cb0:	05fa0000 	.word	0x05fa0000

08004cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <__NVIC_GetPriorityGrouping+0x18>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 0307 	and.w	r3, r3, #7
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	db0b      	blt.n	8004cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	f003 021f 	and.w	r2, r3, #31
 8004ce8:	4907      	ldr	r1, [pc, #28]	; (8004d08 <__NVIC_EnableIRQ+0x38>)
 8004cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	e000e100 	.word	0xe000e100

08004d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	db0a      	blt.n	8004d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	490c      	ldr	r1, [pc, #48]	; (8004d58 <__NVIC_SetPriority+0x4c>)
 8004d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2a:	0112      	lsls	r2, r2, #4
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d34:	e00a      	b.n	8004d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4908      	ldr	r1, [pc, #32]	; (8004d5c <__NVIC_SetPriority+0x50>)
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	3b04      	subs	r3, #4
 8004d44:	0112      	lsls	r2, r2, #4
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	440b      	add	r3, r1
 8004d4a:	761a      	strb	r2, [r3, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000e100 	.word	0xe000e100
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f1c3 0307 	rsb	r3, r3, #7
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	bf28      	it	cs
 8004d7e:	2304      	movcs	r3, #4
 8004d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d902      	bls.n	8004d90 <NVIC_EncodePriority+0x30>
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3b03      	subs	r3, #3
 8004d8e:	e000      	b.n	8004d92 <NVIC_EncodePriority+0x32>
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	401a      	ands	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	43d9      	mvns	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db8:	4313      	orrs	r3, r2
         );
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff4c 	bl	8004c6c <__NVIC_SetPriorityGrouping>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dea:	f7ff ff63 	bl	8004cb4 <__NVIC_GetPriorityGrouping>
 8004dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6978      	ldr	r0, [r7, #20]
 8004df6:	f7ff ffb3 	bl	8004d60 <NVIC_EncodePriority>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff82 	bl	8004d0c <__NVIC_SetPriority>
}
 8004e08:	bf00      	nop
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff56 	bl	8004cd0 <__NVIC_EnableIRQ>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e014      	b.n	8004e68 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fd f8a8 	bl	8001fa4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e86:	d120      	bne.n	8004eca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d118      	bne.n	8004eca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f82d 	bl	8004f24 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed8:	d120      	bne.n	8004f1c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee8:	d118      	bne.n	8004f1c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f043 0202 	orr.w	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f93e 	bl	8005198 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	795b      	ldrb	r3, [r3, #5]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_DAC_ConfigChannel+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e11d      	b.n	800518c <HAL_DAC_ConfigChannel+0x254>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d174      	bne.n	800504e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f64:	f7fe fdba 	bl	8003adc <HAL_GetTick>
 8004f68:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d134      	bne.n	8004fda <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f70:	e011      	b.n	8004f96 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f72:	f7fe fdb3 	bl	8003adc <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d90a      	bls.n	8004f96 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f043 0208 	orr.w	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0fa      	b.n	800518c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	4b7d      	ldr	r3, [pc, #500]	; (8005194 <HAL_DAC_ConfigChannel+0x25c>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fe fda5 	bl	8003af4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	6992      	ldr	r2, [r2, #24]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8004fb4:	e01e      	b.n	8004ff4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fb6:	f7fe fd91 	bl	8003adc <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d90a      	bls.n	8004fda <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f043 0208 	orr.w	r2, r3, #8
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0d8      	b.n	800518c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	dbe8      	blt.n	8004fb6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f7fe fd85 	bl	8003af4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	6992      	ldr	r2, [r2, #24]
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	ea02 0103 	and.w	r1, r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	409a      	lsls	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	21ff      	movs	r1, #255	; 0xff
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	ea02 0103 	and.w	r1, r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	409a      	lsls	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d11d      	bne.n	8005092 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	221f      	movs	r2, #31
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4013      	ands	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2207      	movs	r2, #7
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4013      	ands	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d102      	bne.n	80050bc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	e00f      	b.n	80050dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d102      	bne.n	80050ca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80050c4:	2301      	movs	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e008      	b.n	80050dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e001      	b.n	80050dc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43da      	mvns	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4013      	ands	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6819      	ldr	r1, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	22c0      	movs	r2, #192	; 0xc0
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43da      	mvns	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	400a      	ands	r2, r1
 800517c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20008000 	.word	0x20008000

08005198 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fe fc92 	bl	8003adc <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e316      	b.n	80057f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a66      	ldr	r2, [pc, #408]	; (8005364 <HAL_DMA_Init+0x1b8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d04a      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a65      	ldr	r2, [pc, #404]	; (8005368 <HAL_DMA_Init+0x1bc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d045      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a63      	ldr	r2, [pc, #396]	; (800536c <HAL_DMA_Init+0x1c0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d040      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a62      	ldr	r2, [pc, #392]	; (8005370 <HAL_DMA_Init+0x1c4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d03b      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a60      	ldr	r2, [pc, #384]	; (8005374 <HAL_DMA_Init+0x1c8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d036      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a5f      	ldr	r2, [pc, #380]	; (8005378 <HAL_DMA_Init+0x1cc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d031      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a5d      	ldr	r2, [pc, #372]	; (800537c <HAL_DMA_Init+0x1d0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02c      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a5c      	ldr	r2, [pc, #368]	; (8005380 <HAL_DMA_Init+0x1d4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d027      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5a      	ldr	r2, [pc, #360]	; (8005384 <HAL_DMA_Init+0x1d8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d022      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a59      	ldr	r2, [pc, #356]	; (8005388 <HAL_DMA_Init+0x1dc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d01d      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a57      	ldr	r2, [pc, #348]	; (800538c <HAL_DMA_Init+0x1e0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a56      	ldr	r2, [pc, #344]	; (8005390 <HAL_DMA_Init+0x1e4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a54      	ldr	r2, [pc, #336]	; (8005394 <HAL_DMA_Init+0x1e8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a53      	ldr	r2, [pc, #332]	; (8005398 <HAL_DMA_Init+0x1ec>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a51      	ldr	r2, [pc, #324]	; (800539c <HAL_DMA_Init+0x1f0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_DMA_Init+0xb8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a50      	ldr	r2, [pc, #320]	; (80053a0 <HAL_DMA_Init+0x1f4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_DMA_Init+0xbc>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_DMA_Init+0xbe>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 813b 	beq.w	80054e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a37      	ldr	r2, [pc, #220]	; (8005364 <HAL_DMA_Init+0x1b8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_Init+0x174>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a36      	ldr	r2, [pc, #216]	; (8005368 <HAL_DMA_Init+0x1bc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_Init+0x174>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a34      	ldr	r2, [pc, #208]	; (800536c <HAL_DMA_Init+0x1c0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_Init+0x174>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a33      	ldr	r2, [pc, #204]	; (8005370 <HAL_DMA_Init+0x1c4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a31      	ldr	r2, [pc, #196]	; (8005374 <HAL_DMA_Init+0x1c8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a30      	ldr	r2, [pc, #192]	; (8005378 <HAL_DMA_Init+0x1cc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_DMA_Init+0x1d0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_DMA_Init+0x1d4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_DMA_Init+0x1d8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <HAL_DMA_Init+0x1dc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a28      	ldr	r2, [pc, #160]	; (800538c <HAL_DMA_Init+0x1e0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_DMA_Init+0x1e4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_Init+0x174>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_DMA_Init+0x1e8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_Init+0x174>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_DMA_Init+0x1ec>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_Init+0x174>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_DMA_Init+0x1f0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_Init+0x174>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_DMA_Init+0x1f4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <HAL_DMA_Init+0x186>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e007      	b.n	8005342 <HAL_DMA_Init+0x196>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005342:	e02f      	b.n	80053a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005344:	f7fe fbca 	bl	8003adc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b05      	cmp	r3, #5
 8005350:	d928      	bls.n	80053a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2203      	movs	r2, #3
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e246      	b.n	80057f2 <HAL_DMA_Init+0x646>
 8005364:	40020010 	.word	0x40020010
 8005368:	40020028 	.word	0x40020028
 800536c:	40020040 	.word	0x40020040
 8005370:	40020058 	.word	0x40020058
 8005374:	40020070 	.word	0x40020070
 8005378:	40020088 	.word	0x40020088
 800537c:	400200a0 	.word	0x400200a0
 8005380:	400200b8 	.word	0x400200b8
 8005384:	40020410 	.word	0x40020410
 8005388:	40020428 	.word	0x40020428
 800538c:	40020440 	.word	0x40020440
 8005390:	40020458 	.word	0x40020458
 8005394:	40020470 	.word	0x40020470
 8005398:	40020488 	.word	0x40020488
 800539c:	400204a0 	.word	0x400204a0
 80053a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1c8      	bne.n	8005344 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4b83      	ldr	r3, [pc, #524]	; (80055cc <HAL_DMA_Init+0x420>)
 80053be:	4013      	ands	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d107      	bne.n	8005408 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	4313      	orrs	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005408:	4b71      	ldr	r3, [pc, #452]	; (80055d0 <HAL_DMA_Init+0x424>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b71      	ldr	r3, [pc, #452]	; (80055d4 <HAL_DMA_Init+0x428>)
 800540e:	4013      	ands	r3, r2
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005414:	d328      	bcc.n	8005468 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b28      	cmp	r3, #40	; 0x28
 800541c:	d903      	bls.n	8005426 <HAL_DMA_Init+0x27a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b2e      	cmp	r3, #46	; 0x2e
 8005424:	d917      	bls.n	8005456 <HAL_DMA_Init+0x2aa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b3e      	cmp	r3, #62	; 0x3e
 800542c:	d903      	bls.n	8005436 <HAL_DMA_Init+0x28a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b42      	cmp	r3, #66	; 0x42
 8005434:	d90f      	bls.n	8005456 <HAL_DMA_Init+0x2aa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b46      	cmp	r3, #70	; 0x46
 800543c:	d903      	bls.n	8005446 <HAL_DMA_Init+0x29a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b48      	cmp	r3, #72	; 0x48
 8005444:	d907      	bls.n	8005456 <HAL_DMA_Init+0x2aa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b4e      	cmp	r3, #78	; 0x4e
 800544c:	d905      	bls.n	800545a <HAL_DMA_Init+0x2ae>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b52      	cmp	r3, #82	; 0x52
 8005454:	d801      	bhi.n	800545a <HAL_DMA_Init+0x2ae>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_DMA_Init+0x2b0>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005466:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b04      	cmp	r3, #4
 8005490:	d117      	bne.n	80054c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 f9b9 	bl	800681c <DMA_CheckFifoParam>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2240      	movs	r2, #64	; 0x40
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e197      	b.n	80057f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f8f4 	bl	80066b8 <DMA_CalcBaseAndBitshift>
 80054d0:	4603      	mov	r3, r0
 80054d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	223f      	movs	r2, #63	; 0x3f
 80054de:	409a      	lsls	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	e0cd      	b.n	8005682 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3b      	ldr	r2, [pc, #236]	; (80055d8 <HAL_DMA_Init+0x42c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a39      	ldr	r2, [pc, #228]	; (80055dc <HAL_DMA_Init+0x430>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a38      	ldr	r2, [pc, #224]	; (80055e0 <HAL_DMA_Init+0x434>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a36      	ldr	r2, [pc, #216]	; (80055e4 <HAL_DMA_Init+0x438>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <HAL_DMA_Init+0x43c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a33      	ldr	r2, [pc, #204]	; (80055ec <HAL_DMA_Init+0x440>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a32      	ldr	r2, [pc, #200]	; (80055f0 <HAL_DMA_Init+0x444>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_DMA_Init+0x38a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a30      	ldr	r2, [pc, #192]	; (80055f4 <HAL_DMA_Init+0x448>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <HAL_DMA_Init+0x38e>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_DMA_Init+0x390>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8097 	beq.w	8005670 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <HAL_DMA_Init+0x42c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d021      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a22      	ldr	r2, [pc, #136]	; (80055dc <HAL_DMA_Init+0x430>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01c      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <HAL_DMA_Init+0x434>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d017      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <HAL_DMA_Init+0x438>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d012      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_DMA_Init+0x43c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00d      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <HAL_DMA_Init+0x440>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d008      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <HAL_DMA_Init+0x444>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <HAL_DMA_Init+0x3e4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <HAL_DMA_Init+0x448>)
 800558e:	4293      	cmp	r3, r2
 8005590:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_DMA_Init+0x44c>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d020      	beq.n	80055fc <HAL_DMA_Init+0x450>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d102      	bne.n	80055c8 <HAL_DMA_Init+0x41c>
 80055c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055c6:	e01a      	b.n	80055fe <HAL_DMA_Init+0x452>
 80055c8:	2300      	movs	r3, #0
 80055ca:	e018      	b.n	80055fe <HAL_DMA_Init+0x452>
 80055cc:	fe10803f 	.word	0xfe10803f
 80055d0:	5c001000 	.word	0x5c001000
 80055d4:	ffff0000 	.word	0xffff0000
 80055d8:	58025408 	.word	0x58025408
 80055dc:	5802541c 	.word	0x5802541c
 80055e0:	58025430 	.word	0x58025430
 80055e4:	58025444 	.word	0x58025444
 80055e8:	58025458 	.word	0x58025458
 80055ec:	5802546c 	.word	0x5802546c
 80055f0:	58025480 	.word	0x58025480
 80055f4:	58025494 	.word	0x58025494
 80055f8:	fffe000f 	.word	0xfffe000f
 80055fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800560c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800561c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800562c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <HAL_DMA_Init+0x650>)
 8005644:	4413      	add	r3, r2
 8005646:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_DMA_Init+0x654>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	009a      	lsls	r2, r3, #2
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 f82f 	bl	80066b8 <DMA_CalcBaseAndBitshift>
 800565a:	4603      	mov	r3, r0
 800565c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	409a      	lsls	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	e008      	b.n	8005682 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2203      	movs	r2, #3
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0b7      	b.n	80057f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5f      	ldr	r2, [pc, #380]	; (8005804 <HAL_DMA_Init+0x658>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d072      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5d      	ldr	r2, [pc, #372]	; (8005808 <HAL_DMA_Init+0x65c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d06d      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a5c      	ldr	r2, [pc, #368]	; (800580c <HAL_DMA_Init+0x660>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d068      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5a      	ldr	r2, [pc, #360]	; (8005810 <HAL_DMA_Init+0x664>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d063      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a59      	ldr	r2, [pc, #356]	; (8005814 <HAL_DMA_Init+0x668>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d05e      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a57      	ldr	r2, [pc, #348]	; (8005818 <HAL_DMA_Init+0x66c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d059      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a56      	ldr	r2, [pc, #344]	; (800581c <HAL_DMA_Init+0x670>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d054      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a54      	ldr	r2, [pc, #336]	; (8005820 <HAL_DMA_Init+0x674>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d04f      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a53      	ldr	r2, [pc, #332]	; (8005824 <HAL_DMA_Init+0x678>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04a      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a51      	ldr	r2, [pc, #324]	; (8005828 <HAL_DMA_Init+0x67c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d045      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a50      	ldr	r2, [pc, #320]	; (800582c <HAL_DMA_Init+0x680>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d040      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <HAL_DMA_Init+0x684>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d03b      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a4d      	ldr	r2, [pc, #308]	; (8005834 <HAL_DMA_Init+0x688>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d036      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a4b      	ldr	r2, [pc, #300]	; (8005838 <HAL_DMA_Init+0x68c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d031      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a4a      	ldr	r2, [pc, #296]	; (800583c <HAL_DMA_Init+0x690>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d02c      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a48      	ldr	r2, [pc, #288]	; (8005840 <HAL_DMA_Init+0x694>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d027      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a47      	ldr	r2, [pc, #284]	; (8005844 <HAL_DMA_Init+0x698>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a45      	ldr	r2, [pc, #276]	; (8005848 <HAL_DMA_Init+0x69c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01d      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a44      	ldr	r2, [pc, #272]	; (800584c <HAL_DMA_Init+0x6a0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a42      	ldr	r2, [pc, #264]	; (8005850 <HAL_DMA_Init+0x6a4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a41      	ldr	r2, [pc, #260]	; (8005854 <HAL_DMA_Init+0x6a8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <HAL_DMA_Init+0x6ac>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a3e      	ldr	r2, [pc, #248]	; (800585c <HAL_DMA_Init+0x6b0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_DMA_Init+0x5c6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a3c      	ldr	r2, [pc, #240]	; (8005860 <HAL_DMA_Init+0x6b4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_DMA_Init+0x5ca>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HAL_DMA_Init+0x5cc>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d032      	beq.n	80057e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f8c9 	bl	8006914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d102      	bne.n	8005790 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <HAL_DMA_Init+0x624>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d80c      	bhi.n	80057d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 f946 	bl	8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e008      	b.n	80057e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	a7fdabf8 	.word	0xa7fdabf8
 8005800:	cccccccd 	.word	0xcccccccd
 8005804:	40020010 	.word	0x40020010
 8005808:	40020028 	.word	0x40020028
 800580c:	40020040 	.word	0x40020040
 8005810:	40020058 	.word	0x40020058
 8005814:	40020070 	.word	0x40020070
 8005818:	40020088 	.word	0x40020088
 800581c:	400200a0 	.word	0x400200a0
 8005820:	400200b8 	.word	0x400200b8
 8005824:	40020410 	.word	0x40020410
 8005828:	40020428 	.word	0x40020428
 800582c:	40020440 	.word	0x40020440
 8005830:	40020458 	.word	0x40020458
 8005834:	40020470 	.word	0x40020470
 8005838:	40020488 	.word	0x40020488
 800583c:	400204a0 	.word	0x400204a0
 8005840:	400204b8 	.word	0x400204b8
 8005844:	58025408 	.word	0x58025408
 8005848:	5802541c 	.word	0x5802541c
 800584c:	58025430 	.word	0x58025430
 8005850:	58025444 	.word	0x58025444
 8005854:	58025458 	.word	0x58025458
 8005858:	5802546c 	.word	0x5802546c
 800585c:	58025480 	.word	0x58025480
 8005860:	58025494 	.word	0x58025494

08005864 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005870:	4b67      	ldr	r3, [pc, #412]	; (8005a10 <HAL_DMA_IRQHandler+0x1ac>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a67      	ldr	r2, [pc, #412]	; (8005a14 <HAL_DMA_IRQHandler+0x1b0>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5f      	ldr	r2, [pc, #380]	; (8005a18 <HAL_DMA_IRQHandler+0x1b4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d04a      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5d      	ldr	r2, [pc, #372]	; (8005a1c <HAL_DMA_IRQHandler+0x1b8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d045      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a5c      	ldr	r2, [pc, #368]	; (8005a20 <HAL_DMA_IRQHandler+0x1bc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d040      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a5a      	ldr	r2, [pc, #360]	; (8005a24 <HAL_DMA_IRQHandler+0x1c0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d03b      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a59      	ldr	r2, [pc, #356]	; (8005a28 <HAL_DMA_IRQHandler+0x1c4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d036      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a57      	ldr	r2, [pc, #348]	; (8005a2c <HAL_DMA_IRQHandler+0x1c8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d031      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a56      	ldr	r2, [pc, #344]	; (8005a30 <HAL_DMA_IRQHandler+0x1cc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d02c      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a54      	ldr	r2, [pc, #336]	; (8005a34 <HAL_DMA_IRQHandler+0x1d0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d027      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a53      	ldr	r2, [pc, #332]	; (8005a38 <HAL_DMA_IRQHandler+0x1d4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a51      	ldr	r2, [pc, #324]	; (8005a3c <HAL_DMA_IRQHandler+0x1d8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01d      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a50      	ldr	r2, [pc, #320]	; (8005a40 <HAL_DMA_IRQHandler+0x1dc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <HAL_DMA_IRQHandler+0x1e0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a4d      	ldr	r2, [pc, #308]	; (8005a48 <HAL_DMA_IRQHandler+0x1e4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4b      	ldr	r2, [pc, #300]	; (8005a4c <HAL_DMA_IRQHandler+0x1e8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a4a      	ldr	r2, [pc, #296]	; (8005a50 <HAL_DMA_IRQHandler+0x1ec>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_DMA_IRQHandler+0xd2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a48      	ldr	r2, [pc, #288]	; (8005a54 <HAL_DMA_IRQHandler+0x1f0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <HAL_DMA_IRQHandler+0xd6>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_DMA_IRQHandler+0xd8>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 842b 	beq.w	8006198 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2208      	movs	r2, #8
 800594c:	409a      	lsls	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80a2 	beq.w	8005a9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <HAL_DMA_IRQHandler+0x1b4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d04a      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2d      	ldr	r2, [pc, #180]	; (8005a1c <HAL_DMA_IRQHandler+0x1b8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d045      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <HAL_DMA_IRQHandler+0x1bc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d040      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2a      	ldr	r2, [pc, #168]	; (8005a24 <HAL_DMA_IRQHandler+0x1c0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d03b      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <HAL_DMA_IRQHandler+0x1c4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d036      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <HAL_DMA_IRQHandler+0x1c8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d031      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a25      	ldr	r2, [pc, #148]	; (8005a30 <HAL_DMA_IRQHandler+0x1cc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d02c      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a24      	ldr	r2, [pc, #144]	; (8005a34 <HAL_DMA_IRQHandler+0x1d0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d027      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <HAL_DMA_IRQHandler+0x1d4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d022      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <HAL_DMA_IRQHandler+0x1d8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d01d      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <HAL_DMA_IRQHandler+0x1dc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d018      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <HAL_DMA_IRQHandler+0x1e0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_DMA_IRQHandler+0x1e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00e      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <HAL_DMA_IRQHandler+0x1e8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_DMA_IRQHandler+0x1ec>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x194>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <HAL_DMA_IRQHandler+0x1f0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d12f      	bne.n	8005a58 <HAL_DMA_IRQHandler+0x1f4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e02e      	b.n	8005a6c <HAL_DMA_IRQHandler+0x208>
 8005a0e:	bf00      	nop
 8005a10:	24000000 	.word	0x24000000
 8005a14:	1b4e81b5 	.word	0x1b4e81b5
 8005a18:	40020010 	.word	0x40020010
 8005a1c:	40020028 	.word	0x40020028
 8005a20:	40020040 	.word	0x40020040
 8005a24:	40020058 	.word	0x40020058
 8005a28:	40020070 	.word	0x40020070
 8005a2c:	40020088 	.word	0x40020088
 8005a30:	400200a0 	.word	0x400200a0
 8005a34:	400200b8 	.word	0x400200b8
 8005a38:	40020410 	.word	0x40020410
 8005a3c:	40020428 	.word	0x40020428
 8005a40:	40020440 	.word	0x40020440
 8005a44:	40020458 	.word	0x40020458
 8005a48:	40020470 	.word	0x40020470
 8005a4c:	40020488 	.word	0x40020488
 8005a50:	400204a0 	.word	0x400204a0
 8005a54:	400204b8 	.word	0x400204b8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2208      	movs	r2, #8
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f043 0201 	orr.w	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d06e      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_DMA_IRQHandler+0x3f8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d04a      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a67      	ldr	r2, [pc, #412]	; (8005c60 <HAL_DMA_IRQHandler+0x3fc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d045      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a66      	ldr	r2, [pc, #408]	; (8005c64 <HAL_DMA_IRQHandler+0x400>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d040      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a64      	ldr	r2, [pc, #400]	; (8005c68 <HAL_DMA_IRQHandler+0x404>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d03b      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a63      	ldr	r2, [pc, #396]	; (8005c6c <HAL_DMA_IRQHandler+0x408>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d036      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a61      	ldr	r2, [pc, #388]	; (8005c70 <HAL_DMA_IRQHandler+0x40c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a60      	ldr	r2, [pc, #384]	; (8005c74 <HAL_DMA_IRQHandler+0x410>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d02c      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5e      	ldr	r2, [pc, #376]	; (8005c78 <HAL_DMA_IRQHandler+0x414>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d027      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a5d      	ldr	r2, [pc, #372]	; (8005c7c <HAL_DMA_IRQHandler+0x418>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a5b      	ldr	r2, [pc, #364]	; (8005c80 <HAL_DMA_IRQHandler+0x41c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5a      	ldr	r2, [pc, #360]	; (8005c84 <HAL_DMA_IRQHandler+0x420>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a58      	ldr	r2, [pc, #352]	; (8005c88 <HAL_DMA_IRQHandler+0x424>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a57      	ldr	r2, [pc, #348]	; (8005c8c <HAL_DMA_IRQHandler+0x428>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a55      	ldr	r2, [pc, #340]	; (8005c90 <HAL_DMA_IRQHandler+0x42c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a54      	ldr	r2, [pc, #336]	; (8005c94 <HAL_DMA_IRQHandler+0x430>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2ee>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a52      	ldr	r2, [pc, #328]	; (8005c98 <HAL_DMA_IRQHandler+0x434>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10a      	bne.n	8005b68 <HAL_DMA_IRQHandler+0x304>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e003      	b.n	8005b70 <HAL_DMA_IRQHandler+0x30c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	f043 0202 	orr.w	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2204      	movs	r2, #4
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 808f 	beq.w	8005cc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <HAL_DMA_IRQHandler+0x3f8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <HAL_DMA_IRQHandler+0x3fc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <HAL_DMA_IRQHandler+0x400>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <HAL_DMA_IRQHandler+0x404>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <HAL_DMA_IRQHandler+0x408>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <HAL_DMA_IRQHandler+0x40c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <HAL_DMA_IRQHandler+0x410>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_DMA_IRQHandler+0x414>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <HAL_DMA_IRQHandler+0x418>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_DMA_IRQHandler+0x41c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_DMA_IRQHandler+0x420>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <HAL_DMA_IRQHandler+0x424>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <HAL_DMA_IRQHandler+0x428>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_DMA_IRQHandler+0x42c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <HAL_DMA_IRQHandler+0x430>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x3e2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <HAL_DMA_IRQHandler+0x434>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d12a      	bne.n	8005c9c <HAL_DMA_IRQHandler+0x438>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e023      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x440>
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	f043 0204 	orr.w	r2, r3, #4
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	2210      	movs	r2, #16
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80a6 	beq.w	8005e26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a85      	ldr	r2, [pc, #532]	; (8005ef4 <HAL_DMA_IRQHandler+0x690>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d04a      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a83      	ldr	r2, [pc, #524]	; (8005ef8 <HAL_DMA_IRQHandler+0x694>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d045      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a82      	ldr	r2, [pc, #520]	; (8005efc <HAL_DMA_IRQHandler+0x698>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d040      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a80      	ldr	r2, [pc, #512]	; (8005f00 <HAL_DMA_IRQHandler+0x69c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d03b      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a7f      	ldr	r2, [pc, #508]	; (8005f04 <HAL_DMA_IRQHandler+0x6a0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d036      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a7d      	ldr	r2, [pc, #500]	; (8005f08 <HAL_DMA_IRQHandler+0x6a4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d031      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a7c      	ldr	r2, [pc, #496]	; (8005f0c <HAL_DMA_IRQHandler+0x6a8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d02c      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a7a      	ldr	r2, [pc, #488]	; (8005f10 <HAL_DMA_IRQHandler+0x6ac>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d027      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a79      	ldr	r2, [pc, #484]	; (8005f14 <HAL_DMA_IRQHandler+0x6b0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d022      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a77      	ldr	r2, [pc, #476]	; (8005f18 <HAL_DMA_IRQHandler+0x6b4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a76      	ldr	r2, [pc, #472]	; (8005f1c <HAL_DMA_IRQHandler+0x6b8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a74      	ldr	r2, [pc, #464]	; (8005f20 <HAL_DMA_IRQHandler+0x6bc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a73      	ldr	r2, [pc, #460]	; (8005f24 <HAL_DMA_IRQHandler+0x6c0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a71      	ldr	r2, [pc, #452]	; (8005f28 <HAL_DMA_IRQHandler+0x6c4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a70      	ldr	r2, [pc, #448]	; (8005f2c <HAL_DMA_IRQHandler+0x6c8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x516>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a6e      	ldr	r2, [pc, #440]	; (8005f30 <HAL_DMA_IRQHandler+0x6cc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10a      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x52c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e009      	b.n	8005da4 <HAL_DMA_IRQHandler+0x540>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf14      	ite	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	2300      	moveq	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d03e      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2210      	movs	r2, #16
 8005db2:	409a      	lsls	r2, r3
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d018      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d024      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
 8005de4:	e01f      	b.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01b      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	e016      	b.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0208 	bic.w	r2, r2, #8
 8005e14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2220      	movs	r2, #32
 8005e30:	409a      	lsls	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8110 	beq.w	800605c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <HAL_DMA_IRQHandler+0x690>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <HAL_DMA_IRQHandler+0x694>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a29      	ldr	r2, [pc, #164]	; (8005efc <HAL_DMA_IRQHandler+0x698>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <HAL_DMA_IRQHandler+0x69c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <HAL_DMA_IRQHandler+0x6a0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <HAL_DMA_IRQHandler+0x6a4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a23      	ldr	r2, [pc, #140]	; (8005f0c <HAL_DMA_IRQHandler+0x6a8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_DMA_IRQHandler+0x6ac>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a20      	ldr	r2, [pc, #128]	; (8005f14 <HAL_DMA_IRQHandler+0x6b0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_DMA_IRQHandler+0x6b4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <HAL_DMA_IRQHandler+0x6b8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_DMA_IRQHandler+0x6bc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <HAL_DMA_IRQHandler+0x6c0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_DMA_IRQHandler+0x6c4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <HAL_DMA_IRQHandler+0x6c8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_IRQHandler+0x678>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <HAL_DMA_IRQHandler+0x6cc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d12b      	bne.n	8005f34 <HAL_DMA_IRQHandler+0x6d0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bf14      	ite	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	2300      	moveq	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	e02a      	b.n	8005f48 <HAL_DMA_IRQHandler+0x6e4>
 8005ef2:	bf00      	nop
 8005ef4:	40020010 	.word	0x40020010
 8005ef8:	40020028 	.word	0x40020028
 8005efc:	40020040 	.word	0x40020040
 8005f00:	40020058 	.word	0x40020058
 8005f04:	40020070 	.word	0x40020070
 8005f08:	40020088 	.word	0x40020088
 8005f0c:	400200a0 	.word	0x400200a0
 8005f10:	400200b8 	.word	0x400200b8
 8005f14:	40020410 	.word	0x40020410
 8005f18:	40020428 	.word	0x40020428
 8005f1c:	40020440 	.word	0x40020440
 8005f20:	40020458 	.word	0x40020458
 8005f24:	40020470 	.word	0x40020470
 8005f28:	40020488 	.word	0x40020488
 8005f2c:	400204a0 	.word	0x400204a0
 8005f30:	400204b8 	.word	0x400204b8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8087 	beq.w	800605c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2220      	movs	r2, #32
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d139      	bne.n	8005fde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0216 	bic.w	r2, r2, #22
 8005f78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <HAL_DMA_IRQHandler+0x736>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0208 	bic.w	r2, r2, #8
 8005fa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	223f      	movs	r2, #63	; 0x3f
 8005fb4:	409a      	lsls	r2, r3
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 834a 	beq.w	8006668 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
          }
          return;
 8005fdc:	e344      	b.n	8006668 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d018      	beq.n	800601e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02c      	beq.n	800605c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	e027      	b.n	800605c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d023      	beq.n	800605c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
 800601c:	e01e      	b.n	800605c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10f      	bne.n	800604c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0210 	bic.w	r2, r2, #16
 800603a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8306 	beq.w	8006672 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8088 	beq.w	8006184 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2204      	movs	r2, #4
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7a      	ldr	r2, [pc, #488]	; (800626c <HAL_DMA_IRQHandler+0xa08>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d04a      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a79      	ldr	r2, [pc, #484]	; (8006270 <HAL_DMA_IRQHandler+0xa0c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d045      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a77      	ldr	r2, [pc, #476]	; (8006274 <HAL_DMA_IRQHandler+0xa10>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d040      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a76      	ldr	r2, [pc, #472]	; (8006278 <HAL_DMA_IRQHandler+0xa14>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d03b      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a74      	ldr	r2, [pc, #464]	; (800627c <HAL_DMA_IRQHandler+0xa18>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d036      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a73      	ldr	r2, [pc, #460]	; (8006280 <HAL_DMA_IRQHandler+0xa1c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d031      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a71      	ldr	r2, [pc, #452]	; (8006284 <HAL_DMA_IRQHandler+0xa20>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02c      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a70      	ldr	r2, [pc, #448]	; (8006288 <HAL_DMA_IRQHandler+0xa24>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d027      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6e      	ldr	r2, [pc, #440]	; (800628c <HAL_DMA_IRQHandler+0xa28>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d022      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6d      	ldr	r2, [pc, #436]	; (8006290 <HAL_DMA_IRQHandler+0xa2c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01d      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6b      	ldr	r2, [pc, #428]	; (8006294 <HAL_DMA_IRQHandler+0xa30>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6a      	ldr	r2, [pc, #424]	; (8006298 <HAL_DMA_IRQHandler+0xa34>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a68      	ldr	r2, [pc, #416]	; (800629c <HAL_DMA_IRQHandler+0xa38>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a67      	ldr	r2, [pc, #412]	; (80062a0 <HAL_DMA_IRQHandler+0xa3c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a65      	ldr	r2, [pc, #404]	; (80062a4 <HAL_DMA_IRQHandler+0xa40>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_DMA_IRQHandler+0x8b8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a64      	ldr	r2, [pc, #400]	; (80062a8 <HAL_DMA_IRQHandler+0xa44>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d108      	bne.n	800612e <HAL_DMA_IRQHandler+0x8ca>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e007      	b.n	800613e <HAL_DMA_IRQHandler+0x8da>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	429a      	cmp	r2, r3
 8006148:	d307      	bcc.n	800615a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f2      	bne.n	800613e <HAL_DMA_IRQHandler+0x8da>
 8006158:	e000      	b.n	800615c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800615a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2203      	movs	r2, #3
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006172:	e003      	b.n	800617c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8272 	beq.w	8006672 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	e26c      	b.n	8006672 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a43      	ldr	r2, [pc, #268]	; (80062ac <HAL_DMA_IRQHandler+0xa48>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a42      	ldr	r2, [pc, #264]	; (80062b0 <HAL_DMA_IRQHandler+0xa4c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01d      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <HAL_DMA_IRQHandler+0xa50>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a3f      	ldr	r2, [pc, #252]	; (80062b8 <HAL_DMA_IRQHandler+0xa54>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3d      	ldr	r2, [pc, #244]	; (80062bc <HAL_DMA_IRQHandler+0xa58>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3c      	ldr	r2, [pc, #240]	; (80062c0 <HAL_DMA_IRQHandler+0xa5c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <HAL_DMA_IRQHandler+0xa60>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x984>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a39      	ldr	r2, [pc, #228]	; (80062c8 <HAL_DMA_IRQHandler+0xa64>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d101      	bne.n	80061ec <HAL_DMA_IRQHandler+0x988>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_DMA_IRQHandler+0x98a>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 823f 	beq.w	8006672 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2204      	movs	r2, #4
 8006206:	409a      	lsls	r2, r3
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80cd 	beq.w	80063ac <HAL_DMA_IRQHandler+0xb48>
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80c7 	beq.w	80063ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2204      	movs	r2, #4
 8006228:	409a      	lsls	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d049      	beq.n	80062cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8210 	beq.w	800666c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006254:	e20a      	b.n	800666c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 8206 	beq.w	800666c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006268:	e200      	b.n	800666c <HAL_DMA_IRQHandler+0xe08>
 800626a:	bf00      	nop
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8
 80062ac:	58025408 	.word	0x58025408
 80062b0:	5802541c 	.word	0x5802541c
 80062b4:	58025430 	.word	0x58025430
 80062b8:	58025444 	.word	0x58025444
 80062bc:	58025458 	.word	0x58025458
 80062c0:	5802546c 	.word	0x5802546c
 80062c4:	58025480 	.word	0x58025480
 80062c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d160      	bne.n	8006398 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a7f      	ldr	r2, [pc, #508]	; (80064d8 <HAL_DMA_IRQHandler+0xc74>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a7d      	ldr	r2, [pc, #500]	; (80064dc <HAL_DMA_IRQHandler+0xc78>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a7c      	ldr	r2, [pc, #496]	; (80064e0 <HAL_DMA_IRQHandler+0xc7c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a7a      	ldr	r2, [pc, #488]	; (80064e4 <HAL_DMA_IRQHandler+0xc80>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a79      	ldr	r2, [pc, #484]	; (80064e8 <HAL_DMA_IRQHandler+0xc84>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a77      	ldr	r2, [pc, #476]	; (80064ec <HAL_DMA_IRQHandler+0xc88>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a76      	ldr	r2, [pc, #472]	; (80064f0 <HAL_DMA_IRQHandler+0xc8c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a74      	ldr	r2, [pc, #464]	; (80064f4 <HAL_DMA_IRQHandler+0xc90>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a73      	ldr	r2, [pc, #460]	; (80064f8 <HAL_DMA_IRQHandler+0xc94>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a71      	ldr	r2, [pc, #452]	; (80064fc <HAL_DMA_IRQHandler+0xc98>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a70      	ldr	r2, [pc, #448]	; (8006500 <HAL_DMA_IRQHandler+0xc9c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6e      	ldr	r2, [pc, #440]	; (8006504 <HAL_DMA_IRQHandler+0xca0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a6d      	ldr	r2, [pc, #436]	; (8006508 <HAL_DMA_IRQHandler+0xca4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a6b      	ldr	r2, [pc, #428]	; (800650c <HAL_DMA_IRQHandler+0xca8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a6a      	ldr	r2, [pc, #424]	; (8006510 <HAL_DMA_IRQHandler+0xcac>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_IRQHandler+0xb12>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a68      	ldr	r2, [pc, #416]	; (8006514 <HAL_DMA_IRQHandler+0xcb0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <HAL_DMA_IRQHandler+0xb24>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0208 	bic.w	r2, r2, #8
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e007      	b.n	8006398 <HAL_DMA_IRQHandler+0xb34>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0204 	bic.w	r2, r2, #4
 8006396:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8165 	beq.w	800666c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063aa:	e15f      	b.n	800666c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	2202      	movs	r2, #2
 80063b6:	409a      	lsls	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80c5 	beq.w	800654c <HAL_DMA_IRQHandler+0xce8>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80bf 	beq.w	800654c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2202      	movs	r2, #2
 80063d8:	409a      	lsls	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d018      	beq.n	800641a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 813a 	beq.w	8006670 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006404:	e134      	b.n	8006670 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8130 	beq.w	8006670 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006418:	e12a      	b.n	8006670 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8089 	bne.w	8006538 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <HAL_DMA_IRQHandler+0xc74>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a29      	ldr	r2, [pc, #164]	; (80064dc <HAL_DMA_IRQHandler+0xc78>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a28      	ldr	r2, [pc, #160]	; (80064e0 <HAL_DMA_IRQHandler+0xc7c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <HAL_DMA_IRQHandler+0xc80>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a25      	ldr	r2, [pc, #148]	; (80064e8 <HAL_DMA_IRQHandler+0xc84>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a23      	ldr	r2, [pc, #140]	; (80064ec <HAL_DMA_IRQHandler+0xc88>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a22      	ldr	r2, [pc, #136]	; (80064f0 <HAL_DMA_IRQHandler+0xc8c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <HAL_DMA_IRQHandler+0xc90>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_DMA_IRQHandler+0xc94>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_DMA_IRQHandler+0xc98>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <HAL_DMA_IRQHandler+0xc9c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1a      	ldr	r2, [pc, #104]	; (8006504 <HAL_DMA_IRQHandler+0xca0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a19      	ldr	r2, [pc, #100]	; (8006508 <HAL_DMA_IRQHandler+0xca4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_DMA_IRQHandler+0xca8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a16      	ldr	r2, [pc, #88]	; (8006510 <HAL_DMA_IRQHandler+0xcac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_IRQHandler+0xc62>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a14      	ldr	r2, [pc, #80]	; (8006514 <HAL_DMA_IRQHandler+0xcb0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d128      	bne.n	8006518 <HAL_DMA_IRQHandler+0xcb4>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0214 	bic.w	r2, r2, #20
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e027      	b.n	8006528 <HAL_DMA_IRQHandler+0xcc4>
 80064d8:	40020010 	.word	0x40020010
 80064dc:	40020028 	.word	0x40020028
 80064e0:	40020040 	.word	0x40020040
 80064e4:	40020058 	.word	0x40020058
 80064e8:	40020070 	.word	0x40020070
 80064ec:	40020088 	.word	0x40020088
 80064f0:	400200a0 	.word	0x400200a0
 80064f4:	400200b8 	.word	0x400200b8
 80064f8:	40020410 	.word	0x40020410
 80064fc:	40020428 	.word	0x40020428
 8006500:	40020440 	.word	0x40020440
 8006504:	40020458 	.word	0x40020458
 8006508:	40020470 	.word	0x40020470
 800650c:	40020488 	.word	0x40020488
 8006510:	400204a0 	.word	0x400204a0
 8006514:	400204b8 	.word	0x400204b8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 020a 	bic.w	r2, r2, #10
 8006526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8097 	beq.w	8006670 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800654a:	e091      	b.n	8006670 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	2208      	movs	r2, #8
 8006556:	409a      	lsls	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8088 	beq.w	8006672 <HAL_DMA_IRQHandler+0xe0e>
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8082 	beq.w	8006672 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a41      	ldr	r2, [pc, #260]	; (8006678 <HAL_DMA_IRQHandler+0xe14>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d04a      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3f      	ldr	r2, [pc, #252]	; (800667c <HAL_DMA_IRQHandler+0xe18>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d045      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3e      	ldr	r2, [pc, #248]	; (8006680 <HAL_DMA_IRQHandler+0xe1c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d040      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3c      	ldr	r2, [pc, #240]	; (8006684 <HAL_DMA_IRQHandler+0xe20>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d03b      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3b      	ldr	r2, [pc, #236]	; (8006688 <HAL_DMA_IRQHandler+0xe24>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d036      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a39      	ldr	r2, [pc, #228]	; (800668c <HAL_DMA_IRQHandler+0xe28>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d031      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a38      	ldr	r2, [pc, #224]	; (8006690 <HAL_DMA_IRQHandler+0xe2c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d02c      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a36      	ldr	r2, [pc, #216]	; (8006694 <HAL_DMA_IRQHandler+0xe30>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d027      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a35      	ldr	r2, [pc, #212]	; (8006698 <HAL_DMA_IRQHandler+0xe34>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a33      	ldr	r2, [pc, #204]	; (800669c <HAL_DMA_IRQHandler+0xe38>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01d      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a32      	ldr	r2, [pc, #200]	; (80066a0 <HAL_DMA_IRQHandler+0xe3c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a30      	ldr	r2, [pc, #192]	; (80066a4 <HAL_DMA_IRQHandler+0xe40>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2f      	ldr	r2, [pc, #188]	; (80066a8 <HAL_DMA_IRQHandler+0xe44>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2d      	ldr	r2, [pc, #180]	; (80066ac <HAL_DMA_IRQHandler+0xe48>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <HAL_DMA_IRQHandler+0xe4c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_DMA_IRQHandler+0xdaa>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <HAL_DMA_IRQHandler+0xe50>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d108      	bne.n	8006620 <HAL_DMA_IRQHandler+0xdbc>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 021c 	bic.w	r2, r2, #28
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e007      	b.n	8006630 <HAL_DMA_IRQHandler+0xdcc>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 020e 	bic.w	r2, r2, #14
 800662e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2201      	movs	r2, #1
 800663a:	409a      	lsls	r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
 8006666:	e004      	b.n	8006672 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006668:	bf00      	nop
 800666a:	e002      	b.n	8006672 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800666c:	bf00      	nop
 800666e:	e000      	b.n	8006672 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006670:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40020010 	.word	0x40020010
 800667c:	40020028 	.word	0x40020028
 8006680:	40020040 	.word	0x40020040
 8006684:	40020058 	.word	0x40020058
 8006688:	40020070 	.word	0x40020070
 800668c:	40020088 	.word	0x40020088
 8006690:	400200a0 	.word	0x400200a0
 8006694:	400200b8 	.word	0x400200b8
 8006698:	40020410 	.word	0x40020410
 800669c:	40020428 	.word	0x40020428
 80066a0:	40020440 	.word	0x40020440
 80066a4:	40020458 	.word	0x40020458
 80066a8:	40020470 	.word	0x40020470
 80066ac:	40020488 	.word	0x40020488
 80066b0:	400204a0 	.word	0x400204a0
 80066b4:	400204b8 	.word	0x400204b8

080066b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <DMA_CalcBaseAndBitshift+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d04a      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a41      	ldr	r2, [pc, #260]	; (80067d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d045      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <DMA_CalcBaseAndBitshift+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d040      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3e      	ldr	r2, [pc, #248]	; (80067dc <DMA_CalcBaseAndBitshift+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d03b      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3c      	ldr	r2, [pc, #240]	; (80067e0 <DMA_CalcBaseAndBitshift+0x128>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d036      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a3b      	ldr	r2, [pc, #236]	; (80067e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d031      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a39      	ldr	r2, [pc, #228]	; (80067e8 <DMA_CalcBaseAndBitshift+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d02c      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a38      	ldr	r2, [pc, #224]	; (80067ec <DMA_CalcBaseAndBitshift+0x134>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d027      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <DMA_CalcBaseAndBitshift+0x138>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d022      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a35      	ldr	r2, [pc, #212]	; (80067f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d01d      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <DMA_CalcBaseAndBitshift+0x140>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d018      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a32      	ldr	r2, [pc, #200]	; (80067fc <DMA_CalcBaseAndBitshift+0x144>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a30      	ldr	r2, [pc, #192]	; (8006800 <DMA_CalcBaseAndBitshift+0x148>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00e      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2f      	ldr	r2, [pc, #188]	; (8006804 <DMA_CalcBaseAndBitshift+0x14c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d009      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2d      	ldr	r2, [pc, #180]	; (8006808 <DMA_CalcBaseAndBitshift+0x150>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2c      	ldr	r2, [pc, #176]	; (800680c <DMA_CalcBaseAndBitshift+0x154>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d101      	bne.n	8006764 <DMA_CalcBaseAndBitshift+0xac>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <DMA_CalcBaseAndBitshift+0xae>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d024      	beq.n	80067b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	3b10      	subs	r3, #16
 8006772:	4a27      	ldr	r2, [pc, #156]	; (8006810 <DMA_CalcBaseAndBitshift+0x158>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	4a24      	ldr	r2, [pc, #144]	; (8006814 <DMA_CalcBaseAndBitshift+0x15c>)
 8006784:	5cd3      	ldrb	r3, [r2, r3]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d908      	bls.n	80067a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <DMA_CalcBaseAndBitshift+0x160>)
 800679a:	4013      	ands	r3, r2
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58
 80067a2:	e00d      	b.n	80067c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <DMA_CalcBaseAndBitshift+0x160>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6593      	str	r3, [r2, #88]	; 0x58
 80067b2:	e005      	b.n	80067c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	aaaaaaab 	.word	0xaaaaaaab
 8006814:	08012188 	.word	0x08012188
 8006818:	fffffc00 	.word	0xfffffc00

0800681c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d120      	bne.n	8006872 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	2b03      	cmp	r3, #3
 8006836:	d858      	bhi.n	80068ea <DMA_CheckFifoParam+0xce>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <DMA_CheckFifoParam+0x24>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006851 	.word	0x08006851
 8006844:	08006863 	.word	0x08006863
 8006848:	08006851 	.word	0x08006851
 800684c:	080068eb 	.word	0x080068eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d048      	beq.n	80068ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006860:	e045      	b.n	80068ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800686a:	d142      	bne.n	80068f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006870:	e03f      	b.n	80068f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687a:	d123      	bne.n	80068c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	2b03      	cmp	r3, #3
 8006882:	d838      	bhi.n	80068f6 <DMA_CheckFifoParam+0xda>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <DMA_CheckFifoParam+0x70>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068a3 	.word	0x080068a3
 8006894:	0800689d 	.word	0x0800689d
 8006898:	080068b5 	.word	0x080068b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
        break;
 80068a0:	e030      	b.n	8006904 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d025      	beq.n	80068fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068b2:	e022      	b.n	80068fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068bc:	d11f      	bne.n	80068fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068c2:	e01c      	b.n	80068fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d902      	bls.n	80068d2 <DMA_CheckFifoParam+0xb6>
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d003      	beq.n	80068d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80068d0:	e018      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
        break;
 80068d6:	e015      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
    break;
 80068e8:	e00b      	b.n	8006902 <DMA_CheckFifoParam+0xe6>
        break;
 80068ea:	bf00      	nop
 80068ec:	e00a      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068ee:	bf00      	nop
 80068f0:	e008      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068f2:	bf00      	nop
 80068f4:	e006      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068f6:	bf00      	nop
 80068f8:	e004      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
    break;
 8006902:	bf00      	nop
    }
  }

  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a36      	ldr	r2, [pc, #216]	; (8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a33      	ldr	r2, [pc, #204]	; (8006a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a32      	ldr	r2, [pc, #200]	; (8006a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	3b08      	subs	r3, #8
 8006984:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2201      	movs	r2, #1
 80069aa:	409a      	lsls	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069b0:	e024      	b.n	80069fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	3b10      	subs	r3, #16
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d806      	bhi.n	80069da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d902      	bls.n	80069da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3308      	adds	r3, #8
 80069d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	58025408 	.word	0x58025408
 8006a0c:	5802541c 	.word	0x5802541c
 8006a10:	58025430 	.word	0x58025430
 8006a14:	58025444 	.word	0x58025444
 8006a18:	58025458 	.word	0x58025458
 8006a1c:	5802546c 	.word	0x5802546c
 8006a20:	58025480 	.word	0x58025480
 8006a24:	58025494 	.word	0x58025494
 8006a28:	cccccccd 	.word	0xcccccccd
 8006a2c:	16009600 	.word	0x16009600
 8006a30:	58025880 	.word	0x58025880
 8006a34:	aaaaaaab 	.word	0xaaaaaaab
 8006a38:	400204b8 	.word	0x400204b8
 8006a3c:	4002040f 	.word	0x4002040f
 8006a40:	10008200 	.word	0x10008200
 8006a44:	40020880 	.word	0x40020880

08006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d04a      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d847      	bhi.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a24      	ldr	r2, [pc, #144]	; (8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a22      	ldr	r2, [pc, #136]	; (8006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ad2:	e009      	b.n	8006ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ae6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2201      	movs	r2, #1
 8006aee:	409a      	lsls	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494
 8006b20:	1600963f 	.word	0x1600963f
 8006b24:	58025940 	.word	0x58025940
 8006b28:	1000823f 	.word	0x1000823f
 8006b2c:	40020940 	.word	0x40020940

08006b30 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b098      	sub	sp, #96	; 0x60
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006b38:	4a84      	ldr	r2, [pc, #528]	; (8006d4c <HAL_FDCAN_Init+0x21c>)
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	4611      	mov	r1, r2
 8006b40:	224c      	movs	r2, #76	; 0x4c
 8006b42:	4618      	mov	r0, r3
 8006b44:	f008 fb49 	bl	800f1da <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e1c6      	b.n	8006ee0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7e      	ldr	r2, [pc, #504]	; (8006d50 <HAL_FDCAN_Init+0x220>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d106      	bne.n	8006b6a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb fa5e 	bl	8002040 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0210 	bic.w	r2, r2, #16
 8006b92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b94:	f7fc ffa2 	bl	8003adc <HAL_GetTick>
 8006b98:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b9a:	e014      	b.n	8006bc6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b9c:	f7fc ff9e 	bl	8003adc <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d90d      	bls.n	8006bc6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb0:	f043 0201 	orr.w	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e18c      	b.n	8006ee0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d0e3      	beq.n	8006b9c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0201 	orr.w	r2, r2, #1
 8006be2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006be4:	f7fc ff7a 	bl	8003adc <HAL_GetTick>
 8006be8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bea:	e014      	b.n	8006c16 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006bec:	f7fc ff76 	bl	8003adc <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b0a      	cmp	r3, #10
 8006bf8:	d90d      	bls.n	8006c16 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c00:	f043 0201 	orr.w	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e164      	b.n	8006ee0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0e3      	beq.n	8006bec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0202 	orr.w	r2, r2, #2
 8006c32:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7c1b      	ldrb	r3, [r3, #16]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d108      	bne.n	8006c4e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4a:	619a      	str	r2, [r3, #24]
 8006c4c:	e007      	b.n	8006c5e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7c5b      	ldrb	r3, [r3, #17]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d108      	bne.n	8006c78 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c74:	619a      	str	r2, [r3, #24]
 8006c76:	e007      	b.n	8006c88 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c86:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	7c9b      	ldrb	r3, [r3, #18]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d108      	bne.n	8006ca2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c9e:	619a      	str	r2, [r3, #24]
 8006ca0:	e007      	b.n	8006cb2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cb0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006cd6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0210 	bic.w	r2, r2, #16
 8006ce6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d108      	bne.n	8006d02 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0204 	orr.w	r2, r2, #4
 8006cfe:	619a      	str	r2, [r3, #24]
 8006d00:	e030      	b.n	8006d64 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d02c      	beq.n	8006d64 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d020      	beq.n	8006d54 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d20:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0210 	orr.w	r2, r2, #16
 8006d30:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d114      	bne.n	8006d64 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0220 	orr.w	r2, r2, #32
 8006d48:	619a      	str	r2, [r3, #24]
 8006d4a:	e00b      	b.n	8006d64 <HAL_FDCAN_Init+0x234>
 8006d4c:	0801212c 	.word	0x0801212c
 8006d50:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0220 	orr.w	r2, r2, #32
 8006d62:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d74:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d7c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d8c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d8e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d98:	d115      	bne.n	8006dc6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	3b01      	subs	r3, #1
 8006da6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006da8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	3b01      	subs	r3, #1
 8006db0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006db2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006dc2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006dc4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	4413      	add	r3, r2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006dfa:	f023 0107 	bic.w	r1, r3, #7
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3360      	adds	r3, #96	; 0x60
 8006e06:	443b      	add	r3, r7
 8006e08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e26:	f023 0107 	bic.w	r1, r3, #7
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	3360      	adds	r3, #96	; 0x60
 8006e32:	443b      	add	r3, r7
 8006e34:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e52:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	3360      	adds	r3, #96	; 0x60
 8006e5e:	443b      	add	r3, r7
 8006e60:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e64:	011a      	lsls	r2, r3, #4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e80:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	3360      	adds	r3, #96	; 0x60
 8006e8c:	443b      	add	r3, r7
 8006e8e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a11      	ldr	r2, [pc, #68]	; (8006ee8 <HAL_FDCAN_Init+0x3b8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d107      	bne.n	8006eb8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f022 0203 	bic.w	r2, r2, #3
 8006eb6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f80b 	bl	8006eec <FDCAN_CalcultateRamBlockAddresses>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006edc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3760      	adds	r7, #96	; 0x60
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	4000a000 	.word	0x4000a000

08006eec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f02:	4ba7      	ldr	r3, [pc, #668]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	0091      	lsls	r1, r2, #2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	041a      	lsls	r2, r3, #16
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	4413      	add	r3, r2
 8006f38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f42:	4b97      	ldr	r3, [pc, #604]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0091      	lsls	r1, r2, #2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f64:	041a      	lsls	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4413      	add	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f84:	4b86      	ldr	r3, [pc, #536]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	0091      	lsls	r1, r2, #2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f9e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	041a      	lsls	r2, r3, #16
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006fcc:	4b74      	ldr	r3, [pc, #464]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	0091      	lsls	r1, r2, #2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fee:	041a      	lsls	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007014:	4b62      	ldr	r3, [pc, #392]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007016:	4013      	ands	r3, r2
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	0091      	lsls	r1, r2, #2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	430b      	orrs	r3, r1
 8007022:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	4413      	add	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007040:	4b57      	ldr	r3, [pc, #348]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007042:	4013      	ands	r3, r2
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	0091      	lsls	r1, r2, #2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	430b      	orrs	r3, r1
 800704e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800705a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	041a      	lsls	r2, r3, #16
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4413      	add	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0091      	lsls	r1, r2, #2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	430b      	orrs	r3, r1
 8007090:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800709c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	041a      	lsls	r2, r3, #16
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070b8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c0:	061a      	lsls	r2, r3, #24
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d0:	4b34      	ldr	r3, [pc, #208]	; (80071a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80070d2:	4413      	add	r3, r2
 80070d4:	009a      	lsls	r2, r3, #2
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	441a      	add	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	441a      	add	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d915      	bls.n	80071c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800719c:	e006      	b.n	80071ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800719e:	bf00      	nop
 80071a0:	ffff0003 	.word	0xffff0003
 80071a4:	10002b00 	.word	0x10002b00
 80071a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071b2:	f043 0220 	orr.w	r2, r3, #32
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e010      	b.n	80071ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e005      	b.n	80071dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3304      	adds	r3, #4
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3f3      	bcc.n	80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop

080071f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b089      	sub	sp, #36	; 0x24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007206:	4b89      	ldr	r3, [pc, #548]	; (800742c <HAL_GPIO_Init+0x234>)
 8007208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800720a:	e194      	b.n	8007536 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	2101      	movs	r1, #1
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	fa01 f303 	lsl.w	r3, r1, r3
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8186 	beq.w	8007530 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d005      	beq.n	800723c <HAL_GPIO_Init+0x44>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d130      	bne.n	800729e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	2203      	movs	r2, #3
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	43db      	mvns	r3, r3
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	4013      	ands	r3, r2
 8007252:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	4313      	orrs	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007272:	2201      	movs	r2, #1
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	43db      	mvns	r3, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f003 0201 	and.w	r2, r3, #1
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	4313      	orrs	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d017      	beq.n	80072da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	2203      	movs	r2, #3
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	43db      	mvns	r3, r3
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	4013      	ands	r3, r2
 80072c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d123      	bne.n	800732e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	08da      	lsrs	r2, r3, #3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3208      	adds	r2, #8
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	220f      	movs	r2, #15
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	43db      	mvns	r3, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4013      	ands	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	4313      	orrs	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	08da      	lsrs	r2, r3, #3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3208      	adds	r2, #8
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	2203      	movs	r2, #3
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43db      	mvns	r3, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4013      	ands	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f003 0203 	and.w	r2, r3, #3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4313      	orrs	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80e0 	beq.w	8007530 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007370:	4b2f      	ldr	r3, [pc, #188]	; (8007430 <HAL_GPIO_Init+0x238>)
 8007372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007376:	4a2e      	ldr	r2, [pc, #184]	; (8007430 <HAL_GPIO_Init+0x238>)
 8007378:	f043 0302 	orr.w	r3, r3, #2
 800737c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007380:	4b2b      	ldr	r3, [pc, #172]	; (8007430 <HAL_GPIO_Init+0x238>)
 8007382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800738e:	4a29      	ldr	r2, [pc, #164]	; (8007434 <HAL_GPIO_Init+0x23c>)
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	3302      	adds	r3, #2
 8007396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	220f      	movs	r2, #15
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	43db      	mvns	r3, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	4013      	ands	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a20      	ldr	r2, [pc, #128]	; (8007438 <HAL_GPIO_Init+0x240>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d052      	beq.n	8007460 <HAL_GPIO_Init+0x268>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1f      	ldr	r2, [pc, #124]	; (800743c <HAL_GPIO_Init+0x244>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_GPIO_Init+0x22e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <HAL_GPIO_Init+0x248>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d02b      	beq.n	8007422 <HAL_GPIO_Init+0x22a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_GPIO_Init+0x24c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d025      	beq.n	800741e <HAL_GPIO_Init+0x226>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_GPIO_Init+0x250>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d01f      	beq.n	800741a <HAL_GPIO_Init+0x222>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <HAL_GPIO_Init+0x254>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d019      	beq.n	8007416 <HAL_GPIO_Init+0x21e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <HAL_GPIO_Init+0x258>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_GPIO_Init+0x21a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a19      	ldr	r2, [pc, #100]	; (8007454 <HAL_GPIO_Init+0x25c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00d      	beq.n	800740e <HAL_GPIO_Init+0x216>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a18      	ldr	r2, [pc, #96]	; (8007458 <HAL_GPIO_Init+0x260>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <HAL_GPIO_Init+0x212>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a17      	ldr	r2, [pc, #92]	; (800745c <HAL_GPIO_Init+0x264>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d101      	bne.n	8007406 <HAL_GPIO_Init+0x20e>
 8007402:	2309      	movs	r3, #9
 8007404:	e02d      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 8007406:	230a      	movs	r3, #10
 8007408:	e02b      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 800740a:	2308      	movs	r3, #8
 800740c:	e029      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 800740e:	2307      	movs	r3, #7
 8007410:	e027      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 8007412:	2306      	movs	r3, #6
 8007414:	e025      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 8007416:	2305      	movs	r3, #5
 8007418:	e023      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 800741a:	2304      	movs	r3, #4
 800741c:	e021      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 800741e:	2303      	movs	r3, #3
 8007420:	e01f      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 8007422:	2302      	movs	r3, #2
 8007424:	e01d      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 8007426:	2301      	movs	r3, #1
 8007428:	e01b      	b.n	8007462 <HAL_GPIO_Init+0x26a>
 800742a:	bf00      	nop
 800742c:	58000080 	.word	0x58000080
 8007430:	58024400 	.word	0x58024400
 8007434:	58000400 	.word	0x58000400
 8007438:	58020000 	.word	0x58020000
 800743c:	58020400 	.word	0x58020400
 8007440:	58020800 	.word	0x58020800
 8007444:	58020c00 	.word	0x58020c00
 8007448:	58021000 	.word	0x58021000
 800744c:	58021400 	.word	0x58021400
 8007450:	58021800 	.word	0x58021800
 8007454:	58021c00 	.word	0x58021c00
 8007458:	58022000 	.word	0x58022000
 800745c:	58022400 	.word	0x58022400
 8007460:	2300      	movs	r3, #0
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	f002 0203 	and.w	r2, r2, #3
 8007468:	0092      	lsls	r2, r2, #2
 800746a:	4093      	lsls	r3, r2
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007472:	4938      	ldr	r1, [pc, #224]	; (8007554 <HAL_GPIO_Init+0x35c>)
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	089b      	lsrs	r3, r3, #2
 8007478:	3302      	adds	r3, #2
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	43db      	mvns	r3, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	4013      	ands	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80074d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	4013      	ands	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	43db      	mvns	r3, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4013      	ands	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3301      	adds	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	f47f ae63 	bne.w	800720c <HAL_GPIO_Init+0x14>
  }
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	3724      	adds	r7, #36	; 0x24
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	58000400 	.word	0x58000400

08007558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
 8007564:	4613      	mov	r3, r2
 8007566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007568:	787b      	ldrb	r3, [r7, #1]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007574:	e003      	b.n	800757e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007576:	887b      	ldrh	r3, [r7, #2]
 8007578:	041a      	lsls	r2, r3, #16
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	619a      	str	r2, [r3, #24]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e07f      	b.n	800769e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa fe0e 	bl	80021d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	; 0x24
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	e006      	b.n	8007614 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007612:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d104      	bne.n	8007626 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007624:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_I2C_Init+0x11c>)
 8007632:	430b      	orrs	r3, r1
 8007634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69d9      	ldr	r1, [r3, #28]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	02008000 	.word	0x02008000

080076ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	461a      	mov	r2, r3
 80076b8:	460b      	mov	r3, r1
 80076ba:	817b      	strh	r3, [r7, #10]
 80076bc:	4613      	mov	r3, r2
 80076be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	f040 80da 	bne.w	8007882 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_I2C_Master_Transmit+0x30>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0d3      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076e4:	f7fc f9fa 	bl	8003adc <HAL_GetTick>
 80076e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	2319      	movs	r3, #25
 80076f0:	2201      	movs	r2, #1
 80076f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa00 	bl	8007afc <I2C_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e0be      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2221      	movs	r2, #33	; 0x21
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2210      	movs	r2, #16
 8007712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	893a      	ldrh	r2, [r7, #8]
 8007726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007732:	b29b      	uxth	r3, r3
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d90e      	bls.n	8007756 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	22ff      	movs	r2, #255	; 0xff
 800773c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007742:	b2da      	uxtb	r2, r3
 8007744:	8979      	ldrh	r1, [r7, #10]
 8007746:	4b51      	ldr	r3, [pc, #324]	; (800788c <HAL_I2C_Master_Transmit+0x1e0>)
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fbf6 	bl	8007f40 <I2C_TransferConfig>
 8007754:	e06c      	b.n	8007830 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007764:	b2da      	uxtb	r2, r3
 8007766:	8979      	ldrh	r1, [r7, #10]
 8007768:	4b48      	ldr	r3, [pc, #288]	; (800788c <HAL_I2C_Master_Transmit+0x1e0>)
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fbe5 	bl	8007f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007776:	e05b      	b.n	8007830 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	6a39      	ldr	r1, [r7, #32]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f9fd 	bl	8007b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e07b      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d034      	beq.n	8007830 <HAL_I2C_Master_Transmit+0x184>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d130      	bne.n	8007830 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2180      	movs	r1, #128	; 0x80
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f98f 	bl	8007afc <I2C_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e04d      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2bff      	cmp	r3, #255	; 0xff
 80077f0:	d90e      	bls.n	8007810 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	22ff      	movs	r2, #255	; 0xff
 80077f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	8979      	ldrh	r1, [r7, #10]
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fb99 	bl	8007f40 <I2C_TransferConfig>
 800780e:	e00f      	b.n	8007830 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	b2da      	uxtb	r2, r3
 8007820:	8979      	ldrh	r1, [r7, #10]
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fb88 	bl	8007f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d19e      	bne.n	8007778 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f9dc 	bl	8007bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e01a      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2220      	movs	r2, #32
 8007854:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6859      	ldr	r1, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <HAL_I2C_Master_Transmit+0x1e4>)
 8007862:	400b      	ands	r3, r1
 8007864:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	80002000 	.word	0x80002000
 8007890:	fe00e800 	.word	0xfe00e800

08007894 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	461a      	mov	r2, r3
 80078a0:	460b      	mov	r3, r1
 80078a2:	817b      	strh	r3, [r7, #10]
 80078a4:	4613      	mov	r3, r2
 80078a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	f040 80db 	bne.w	8007a6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_I2C_Master_Receive+0x30>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e0d4      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078cc:	f7fc f906 	bl	8003adc <HAL_GetTick>
 80078d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2319      	movs	r3, #25
 80078d8:	2201      	movs	r2, #1
 80078da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f90c 	bl	8007afc <I2C_WaitOnFlagUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e0bf      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2222      	movs	r2, #34	; 0x22
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2210      	movs	r2, #16
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	893a      	ldrh	r2, [r7, #8]
 800790e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29b      	uxth	r3, r3
 800791c:	2bff      	cmp	r3, #255	; 0xff
 800791e:	d90e      	bls.n	800793e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	22ff      	movs	r2, #255	; 0xff
 8007924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	b2da      	uxtb	r2, r3
 800792c:	8979      	ldrh	r1, [r7, #10]
 800792e:	4b52      	ldr	r3, [pc, #328]	; (8007a78 <HAL_I2C_Master_Receive+0x1e4>)
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fb02 	bl	8007f40 <I2C_TransferConfig>
 800793c:	e06d      	b.n	8007a1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	8979      	ldrh	r1, [r7, #10]
 8007950:	4b49      	ldr	r3, [pc, #292]	; (8007a78 <HAL_I2C_Master_Receive+0x1e4>)
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 faf1 	bl	8007f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800795e:	e05c      	b.n	8007a1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	6a39      	ldr	r1, [r7, #32]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f985 	bl	8007c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e07c      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d034      	beq.n	8007a1a <HAL_I2C_Master_Receive+0x186>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d130      	bne.n	8007a1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2200      	movs	r2, #0
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f89a 	bl	8007afc <I2C_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e04d      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2bff      	cmp	r3, #255	; 0xff
 80079da:	d90e      	bls.n	80079fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	22ff      	movs	r2, #255	; 0xff
 80079e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	8979      	ldrh	r1, [r7, #10]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 faa4 	bl	8007f40 <I2C_TransferConfig>
 80079f8:	e00f      	b.n	8007a1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	8979      	ldrh	r1, [r7, #10]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fa93 	bl	8007f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d19d      	bne.n	8007960 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	6a39      	ldr	r1, [r7, #32]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f8e7 	bl	8007bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e01a      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <HAL_I2C_Master_Receive+0x1e8>)
 8007a4c:	400b      	ands	r3, r1
 8007a4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e000      	b.n	8007a6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	80002400 	.word	0x80002400
 8007a7c:	fe00e800 	.word	0xfe00e800

08007a80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a8e:	b2db      	uxtb	r3, r3
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d103      	bne.n	8007ad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d007      	beq.n	8007af0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	619a      	str	r2, [r3, #24]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b0c:	e022      	b.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b14:	d01e      	beq.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b16:	f7fb ffe1 	bl	8003adc <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d113      	bne.n	8007b54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b30:	f043 0220 	orr.w	r2, r3, #32
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e00f      	b.n	8007b74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d0cd      	beq.n	8007b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b88:	e02c      	b.n	8007be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f8ea 	bl	8007d68 <I2C_IsErrorOccurred>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e02a      	b.n	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba4:	d01e      	beq.n	8007be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7fb ff99 	bl	8003adc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d113      	bne.n	8007be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	f043 0220 	orr.w	r2, r3, #32
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e007      	b.n	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d1cb      	bne.n	8007b8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c08:	e028      	b.n	8007c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f8aa 	bl	8007d68 <I2C_IsErrorOccurred>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e026      	b.n	8007c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c1e:	f7fb ff5d 	bl	8003adc <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d302      	bcc.n	8007c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d113      	bne.n	8007c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e007      	b.n	8007c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d1cf      	bne.n	8007c0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c80:	e064      	b.n	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f86e 	bl	8007d68 <I2C_IsErrorOccurred>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e062      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d138      	bne.n	8007d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d105      	bne.n	8007cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e04e      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d107      	bne.n	8007cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8007cda:	e002      	b.n	8007ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6859      	ldr	r1, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007cf6:	400b      	ands	r3, r1
 8007cf8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e022      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d16:	f7fb fee1 	bl	8003adc <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d302      	bcc.n	8007d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10f      	bne.n	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e007      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d193      	bne.n	8007c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	fe00e800 	.word	0xfe00e800

08007d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d075      	beq.n	8007e80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2210      	movs	r2, #16
 8007d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d9c:	e056      	b.n	8007e4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da4:	d052      	beq.n	8007e4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7fb fe99 	bl	8003adc <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <I2C_IsErrorOccurred+0x54>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d147      	bne.n	8007e4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dde:	d12e      	bne.n	8007e3e <I2C_IsErrorOccurred+0xd6>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de6:	d02a      	beq.n	8007e3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007de8:	7cfb      	ldrb	r3, [r7, #19]
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d027      	beq.n	8007e3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007dfe:	f7fb fe6d 	bl	8003adc <HAL_GetTick>
 8007e02:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e04:	e01b      	b.n	8007e3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e06:	f7fb fe69 	bl	8003adc <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b19      	cmp	r3, #25
 8007e12:	d914      	bls.n	8007e3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d1dc      	bne.n	8007e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d003      	beq.n	8007e62 <I2C_IsErrorOccurred+0xfa>
 8007e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d09d      	beq.n	8007d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	f043 0304 	orr.w	r3, r3, #4
 8007e78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	f043 0308 	orr.w	r3, r3, #8
 8007eba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01c      	beq.n	8007f30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fddc 	bl	8007ab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <I2C_IsErrorOccurred+0x1d4>)
 8007f08:	400b      	ands	r3, r1
 8007f0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3728      	adds	r7, #40	; 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	fe00e800 	.word	0xfe00e800

08007f40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	817b      	strh	r3, [r7, #10]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f52:	897b      	ldrh	r3, [r7, #10]
 8007f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f58:	7a7b      	ldrb	r3, [r7, #9]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	0d5b      	lsrs	r3, r3, #21
 8007f7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <I2C_TransferConfig+0x60>)
 8007f80:	430b      	orrs	r3, r1
 8007f82:	43db      	mvns	r3, r3
 8007f84:	ea02 0103 	and.w	r1, r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	03ff63ff 	.word	0x03ff63ff

08007fa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d138      	bne.n	800802c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e032      	b.n	800802e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	; 0x24
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	e000      	b.n	800802e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
  }
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b20      	cmp	r3, #32
 800804e:	d139      	bne.n	80080c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800805a:	2302      	movs	r3, #2
 800805c:	e033      	b.n	80080c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800808c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e000      	b.n	80080c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080c4:	2302      	movs	r3, #2
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080dc:	4b19      	ldr	r3, [pc, #100]	; (8008144 <HAL_PWREx_ConfigSupply+0x70>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d00a      	beq.n	80080fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080e8:	4b16      	ldr	r3, [pc, #88]	; (8008144 <HAL_PWREx_ConfigSupply+0x70>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d001      	beq.n	80080fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e01f      	b.n	800813a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e01d      	b.n	800813a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80080fe:	4b11      	ldr	r3, [pc, #68]	; (8008144 <HAL_PWREx_ConfigSupply+0x70>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f023 0207 	bic.w	r2, r3, #7
 8008106:	490f      	ldr	r1, [pc, #60]	; (8008144 <HAL_PWREx_ConfigSupply+0x70>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4313      	orrs	r3, r2
 800810c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800810e:	f7fb fce5 	bl	8003adc <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008114:	e009      	b.n	800812a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008116:	f7fb fce1 	bl	8003adc <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008124:	d901      	bls.n	800812a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e007      	b.n	800813a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800812a:	4b06      	ldr	r3, [pc, #24]	; (8008144 <HAL_PWREx_ConfigSupply+0x70>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008136:	d1ee      	bne.n	8008116 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	58024800 	.word	0x58024800

08008148 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af02      	add	r7, sp, #8
 800814e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008150:	f7fb fcc4 	bl	8003adc <HAL_GetTick>
 8008154:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e05f      	b.n	8008220 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d107      	bne.n	800817c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fa fbcd 	bl	800290c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008172:	f241 3188 	movw	r1, #5000	; 0x1388
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f85a 	bl	8008230 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	3b01      	subs	r3, #1
 800818c:	021a      	lsls	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	2120      	movs	r1, #32
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f852 	bl	800824c <QSPI_WaitFlagStateUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d135      	bne.n	800821e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	4b1b      	ldr	r3, [pc, #108]	; (8008228 <HAL_QSPI_Init+0xe0>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6852      	ldr	r2, [r2, #4]
 80081c0:	0611      	lsls	r1, r2, #24
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68d2      	ldr	r2, [r2, #12]
 80081c6:	4311      	orrs	r1, r2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	69d2      	ldr	r2, [r2, #28]
 80081cc:	4311      	orrs	r1, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6a12      	ldr	r2, [r2, #32]
 80081d2:	4311      	orrs	r1, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	430b      	orrs	r3, r1
 80081da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <HAL_QSPI_Init+0xe4>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6912      	ldr	r2, [r2, #16]
 80081ea:	0411      	lsls	r1, r2, #16
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6952      	ldr	r2, [r2, #20]
 80081f0:	4311      	orrs	r1, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6992      	ldr	r2, [r2, #24]
 80081f6:	4311      	orrs	r1, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800821e:	7afb      	ldrb	r3, [r7, #11]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	00ffff2f 	.word	0x00ffff2f
 800822c:	ffe0f8fe 	.word	0xffe0f8fe

08008230 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800825c:	e01a      	b.n	8008294 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008264:	d016      	beq.n	8008294 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008266:	f7fb fc39 	bl	8003adc <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d302      	bcc.n	800827c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2204      	movs	r2, #4
 8008280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008288:	f043 0201 	orr.w	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e00e      	b.n	80082b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf14      	ite	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	2300      	moveq	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d1d6      	bne.n	800825e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08c      	sub	sp, #48	; 0x30
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f000 bc1d 	b.w	8008b0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8087 	beq.w	80083ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082de:	4b99      	ldr	r3, [pc, #612]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082e8:	4b96      	ldr	r3, [pc, #600]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b10      	cmp	r3, #16
 80082f2:	d007      	beq.n	8008304 <HAL_RCC_OscConfig+0x48>
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	2b18      	cmp	r3, #24
 80082f8:	d110      	bne.n	800831c <HAL_RCC_OscConfig+0x60>
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d10b      	bne.n	800831c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008304:	4b8f      	ldr	r3, [pc, #572]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d06c      	beq.n	80083ea <HAL_RCC_OscConfig+0x12e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d168      	bne.n	80083ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e3f6      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008324:	d106      	bne.n	8008334 <HAL_RCC_OscConfig+0x78>
 8008326:	4b87      	ldr	r3, [pc, #540]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a86      	ldr	r2, [pc, #536]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800832c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	e02e      	b.n	8008392 <HAL_RCC_OscConfig+0xd6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10c      	bne.n	8008356 <HAL_RCC_OscConfig+0x9a>
 800833c:	4b81      	ldr	r3, [pc, #516]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a80      	ldr	r2, [pc, #512]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b7e      	ldr	r3, [pc, #504]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a7d      	ldr	r2, [pc, #500]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800834e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e01d      	b.n	8008392 <HAL_RCC_OscConfig+0xd6>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800835e:	d10c      	bne.n	800837a <HAL_RCC_OscConfig+0xbe>
 8008360:	4b78      	ldr	r3, [pc, #480]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a77      	ldr	r2, [pc, #476]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	4b75      	ldr	r3, [pc, #468]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a74      	ldr	r2, [pc, #464]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e00b      	b.n	8008392 <HAL_RCC_OscConfig+0xd6>
 800837a:	4b72      	ldr	r3, [pc, #456]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a71      	ldr	r2, [pc, #452]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	4b6f      	ldr	r3, [pc, #444]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a6e      	ldr	r2, [pc, #440]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800838c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d013      	beq.n	80083c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839a:	f7fb fb9f 	bl	8003adc <HAL_GetTick>
 800839e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083a2:	f7fb fb9b 	bl	8003adc <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b64      	cmp	r3, #100	; 0x64
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e3aa      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083b4:	4b63      	ldr	r3, [pc, #396]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0xe6>
 80083c0:	e014      	b.n	80083ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c2:	f7fb fb8b 	bl	8003adc <HAL_GetTick>
 80083c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083ca:	f7fb fb87 	bl	8003adc <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b64      	cmp	r3, #100	; 0x64
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e396      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083dc:	4b59      	ldr	r3, [pc, #356]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f0      	bne.n	80083ca <HAL_RCC_OscConfig+0x10e>
 80083e8:	e000      	b.n	80083ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80cb 	beq.w	8008590 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083fa:	4b52      	ldr	r3, [pc, #328]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008402:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008404:	4b4f      	ldr	r3, [pc, #316]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008408:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <HAL_RCC_OscConfig+0x164>
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	2b18      	cmp	r3, #24
 8008414:	d156      	bne.n	80084c4 <HAL_RCC_OscConfig+0x208>
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d151      	bne.n	80084c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008420:	4b48      	ldr	r3, [pc, #288]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_RCC_OscConfig+0x17c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e368      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008438:	4b42      	ldr	r3, [pc, #264]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f023 0219 	bic.w	r2, r3, #25
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	493f      	ldr	r1, [pc, #252]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008446:	4313      	orrs	r3, r2
 8008448:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800844a:	f7fb fb47 	bl	8003adc <HAL_GetTick>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008450:	e008      	b.n	8008464 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008452:	f7fb fb43 	bl	8003adc <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e352      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008464:	4b37      	ldr	r3, [pc, #220]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0f0      	beq.n	8008452 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008470:	f7fb fb64 	bl	8003b3c <HAL_GetREVID>
 8008474:	4603      	mov	r3, r0
 8008476:	f241 0203 	movw	r2, #4099	; 0x1003
 800847a:	4293      	cmp	r3, r2
 800847c:	d817      	bhi.n	80084ae <HAL_RCC_OscConfig+0x1f2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d108      	bne.n	8008498 <HAL_RCC_OscConfig+0x1dc>
 8008486:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800848e:	4a2d      	ldr	r2, [pc, #180]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008494:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008496:	e07b      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008498:	4b2a      	ldr	r3, [pc, #168]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	031b      	lsls	r3, r3, #12
 80084a6:	4927      	ldr	r1, [pc, #156]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084ac:	e070      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ae:	4b25      	ldr	r3, [pc, #148]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	061b      	lsls	r3, r3, #24
 80084bc:	4921      	ldr	r1, [pc, #132]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c2:	e065      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d048      	beq.n	800855e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084cc:	4b1d      	ldr	r3, [pc, #116]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f023 0219 	bic.w	r2, r3, #25
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	491a      	ldr	r1, [pc, #104]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084de:	f7fb fafd 	bl	8003adc <HAL_GetTick>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084e6:	f7fb faf9 	bl	8003adc <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e308      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084f8:	4b12      	ldr	r3, [pc, #72]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f0      	beq.n	80084e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008504:	f7fb fb1a 	bl	8003b3c <HAL_GetREVID>
 8008508:	4603      	mov	r3, r0
 800850a:	f241 0203 	movw	r2, #4099	; 0x1003
 800850e:	4293      	cmp	r3, r2
 8008510:	d81a      	bhi.n	8008548 <HAL_RCC_OscConfig+0x28c>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b40      	cmp	r3, #64	; 0x40
 8008518:	d108      	bne.n	800852c <HAL_RCC_OscConfig+0x270>
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008522:	4a08      	ldr	r2, [pc, #32]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 8008524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008528:	6053      	str	r3, [r2, #4]
 800852a:	e031      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	031b      	lsls	r3, r3, #12
 800853a:	4902      	ldr	r1, [pc, #8]	; (8008544 <HAL_RCC_OscConfig+0x288>)
 800853c:	4313      	orrs	r3, r2
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	e026      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400
 8008548:	4b9a      	ldr	r3, [pc, #616]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	061b      	lsls	r3, r3, #24
 8008556:	4997      	ldr	r1, [pc, #604]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008558:	4313      	orrs	r3, r2
 800855a:	604b      	str	r3, [r1, #4]
 800855c:	e018      	b.n	8008590 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800855e:	4b95      	ldr	r3, [pc, #596]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a94      	ldr	r2, [pc, #592]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856a:	f7fb fab7 	bl	8003adc <HAL_GetTick>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008572:	f7fb fab3 	bl	8003adc <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e2c2      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008584:	4b8b      	ldr	r3, [pc, #556]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f0      	bne.n	8008572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80a9 	beq.w	80086f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859e:	4b85      	ldr	r3, [pc, #532]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085a8:	4b82      	ldr	r3, [pc, #520]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d007      	beq.n	80085c4 <HAL_RCC_OscConfig+0x308>
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2b18      	cmp	r3, #24
 80085b8:	d13a      	bne.n	8008630 <HAL_RCC_OscConfig+0x374>
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d135      	bne.n	8008630 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085c4:	4b7b      	ldr	r3, [pc, #492]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <HAL_RCC_OscConfig+0x320>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e296      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085dc:	f7fb faae 	bl	8003b3c <HAL_GetREVID>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d817      	bhi.n	800861a <HAL_RCC_OscConfig+0x35e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d108      	bne.n	8008604 <HAL_RCC_OscConfig+0x348>
 80085f2:	4b70      	ldr	r3, [pc, #448]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085fa:	4a6e      	ldr	r2, [pc, #440]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80085fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008600:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008602:	e075      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008604:	4b6b      	ldr	r3, [pc, #428]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	069b      	lsls	r3, r3, #26
 8008612:	4968      	ldr	r1, [pc, #416]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008618:	e06a      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800861a:	4b66      	ldr	r3, [pc, #408]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	061b      	lsls	r3, r3, #24
 8008628:	4962      	ldr	r1, [pc, #392]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800862a:	4313      	orrs	r3, r2
 800862c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800862e:	e05f      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d042      	beq.n	80086be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008638:	4b5e      	ldr	r3, [pc, #376]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a5d      	ldr	r2, [pc, #372]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800863e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fb fa4a 	bl	8003adc <HAL_GetTick>
 8008648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800864c:	f7fb fa46 	bl	8003adc <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e255      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800865e:	4b55      	ldr	r3, [pc, #340]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800866a:	f7fb fa67 	bl	8003b3c <HAL_GetREVID>
 800866e:	4603      	mov	r3, r0
 8008670:	f241 0203 	movw	r2, #4099	; 0x1003
 8008674:	4293      	cmp	r3, r2
 8008676:	d817      	bhi.n	80086a8 <HAL_RCC_OscConfig+0x3ec>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	2b20      	cmp	r3, #32
 800867e:	d108      	bne.n	8008692 <HAL_RCC_OscConfig+0x3d6>
 8008680:	4b4c      	ldr	r3, [pc, #304]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008688:	4a4a      	ldr	r2, [pc, #296]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800868a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800868e:	6053      	str	r3, [r2, #4]
 8008690:	e02e      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
 8008692:	4b48      	ldr	r3, [pc, #288]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	069b      	lsls	r3, r3, #26
 80086a0:	4944      	ldr	r1, [pc, #272]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	604b      	str	r3, [r1, #4]
 80086a6:	e023      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
 80086a8:	4b42      	ldr	r3, [pc, #264]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	061b      	lsls	r3, r3, #24
 80086b6:	493f      	ldr	r1, [pc, #252]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60cb      	str	r3, [r1, #12]
 80086bc:	e018      	b.n	80086f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086be:	4b3d      	ldr	r3, [pc, #244]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a3c      	ldr	r2, [pc, #240]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ca:	f7fb fa07 	bl	8003adc <HAL_GetTick>
 80086ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086d2:	f7fb fa03 	bl	8003adc <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e212      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086e4:	4b33      	ldr	r3, [pc, #204]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f0      	bne.n	80086d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d036      	beq.n	800876a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d019      	beq.n	8008738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008704:	4b2b      	ldr	r3, [pc, #172]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008708:	4a2a      	ldr	r2, [pc, #168]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800870a:	f043 0301 	orr.w	r3, r3, #1
 800870e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008710:	f7fb f9e4 	bl	8003adc <HAL_GetTick>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008718:	f7fb f9e0 	bl	8003adc <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e1ef      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800872a:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800872c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCC_OscConfig+0x45c>
 8008736:	e018      	b.n	800876a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008738:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800873a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008744:	f7fb f9ca 	bl	8003adc <HAL_GetTick>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800874c:	f7fb f9c6 	bl	8003adc <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e1d5      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d039      	beq.n	80087ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01c      	beq.n	80087b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800877e:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 8008784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800878a:	f7fb f9a7 	bl	8003adc <HAL_GetTick>
 800878e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008790:	e008      	b.n	80087a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008792:	f7fb f9a3 	bl	8003adc <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	2b02      	cmp	r3, #2
 800879e:	d901      	bls.n	80087a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e1b2      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087a4:	4b03      	ldr	r3, [pc, #12]	; (80087b4 <HAL_RCC_OscConfig+0x4f8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0f0      	beq.n	8008792 <HAL_RCC_OscConfig+0x4d6>
 80087b0:	e01b      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087b8:	4b9b      	ldr	r3, [pc, #620]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a9a      	ldr	r2, [pc, #616]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80087be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087c4:	f7fb f98a 	bl	8003adc <HAL_GetTick>
 80087c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80087cc:	f7fb f986 	bl	8003adc <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e195      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087de:	4b92      	ldr	r3, [pc, #584]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8081 	beq.w	80088fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087f8:	4b8c      	ldr	r3, [pc, #560]	; (8008a2c <HAL_RCC_OscConfig+0x770>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a8b      	ldr	r2, [pc, #556]	; (8008a2c <HAL_RCC_OscConfig+0x770>)
 80087fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008804:	f7fb f96a 	bl	8003adc <HAL_GetTick>
 8008808:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800880c:	f7fb f966 	bl	8003adc <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b64      	cmp	r3, #100	; 0x64
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e175      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800881e:	4b83      	ldr	r3, [pc, #524]	; (8008a2c <HAL_RCC_OscConfig+0x770>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d106      	bne.n	8008840 <HAL_RCC_OscConfig+0x584>
 8008832:	4b7d      	ldr	r3, [pc, #500]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	4a7c      	ldr	r2, [pc, #496]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6713      	str	r3, [r2, #112]	; 0x70
 800883e:	e02d      	b.n	800889c <HAL_RCC_OscConfig+0x5e0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <HAL_RCC_OscConfig+0x5a6>
 8008848:	4b77      	ldr	r3, [pc, #476]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	4a76      	ldr	r2, [pc, #472]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	6713      	str	r3, [r2, #112]	; 0x70
 8008854:	4b74      	ldr	r3, [pc, #464]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008858:	4a73      	ldr	r2, [pc, #460]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800885a:	f023 0304 	bic.w	r3, r3, #4
 800885e:	6713      	str	r3, [r2, #112]	; 0x70
 8008860:	e01c      	b.n	800889c <HAL_RCC_OscConfig+0x5e0>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	2b05      	cmp	r3, #5
 8008868:	d10c      	bne.n	8008884 <HAL_RCC_OscConfig+0x5c8>
 800886a:	4b6f      	ldr	r3, [pc, #444]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	4a6e      	ldr	r2, [pc, #440]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008870:	f043 0304 	orr.w	r3, r3, #4
 8008874:	6713      	str	r3, [r2, #112]	; 0x70
 8008876:	4b6c      	ldr	r3, [pc, #432]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	4a6b      	ldr	r2, [pc, #428]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800887c:	f043 0301 	orr.w	r3, r3, #1
 8008880:	6713      	str	r3, [r2, #112]	; 0x70
 8008882:	e00b      	b.n	800889c <HAL_RCC_OscConfig+0x5e0>
 8008884:	4b68      	ldr	r3, [pc, #416]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	4a67      	ldr	r2, [pc, #412]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800888a:	f023 0301 	bic.w	r3, r3, #1
 800888e:	6713      	str	r3, [r2, #112]	; 0x70
 8008890:	4b65      	ldr	r3, [pc, #404]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a64      	ldr	r2, [pc, #400]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008896:	f023 0304 	bic.w	r3, r3, #4
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d015      	beq.n	80088d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a4:	f7fb f91a 	bl	8003adc <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088aa:	e00a      	b.n	80088c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ac:	f7fb f916 	bl	8003adc <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e123      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c2:	4b59      	ldr	r3, [pc, #356]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0ee      	beq.n	80088ac <HAL_RCC_OscConfig+0x5f0>
 80088ce:	e014      	b.n	80088fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d0:	f7fb f904 	bl	8003adc <HAL_GetTick>
 80088d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088d6:	e00a      	b.n	80088ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088d8:	f7fb f900 	bl	8003adc <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e10d      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088ee:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1ee      	bne.n	80088d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8102 	beq.w	8008b08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008904:	4b48      	ldr	r3, [pc, #288]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890c:	2b18      	cmp	r3, #24
 800890e:	f000 80bd 	beq.w	8008a8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b02      	cmp	r3, #2
 8008918:	f040 809e 	bne.w	8008a58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800891c:	4b42      	ldr	r3, [pc, #264]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a41      	ldr	r2, [pc, #260]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008928:	f7fb f8d8 	bl	8003adc <HAL_GetTick>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008930:	f7fb f8d4 	bl	8003adc <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e0e3      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008942:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f0      	bne.n	8008930 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800894e:	4b36      	ldr	r3, [pc, #216]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008952:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 8008954:	4013      	ands	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800895e:	0112      	lsls	r2, r2, #4
 8008960:	430a      	orrs	r2, r1
 8008962:	4931      	ldr	r1, [pc, #196]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008964:	4313      	orrs	r3, r2
 8008966:	628b      	str	r3, [r1, #40]	; 0x28
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	3b01      	subs	r3, #1
 800896e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	3b01      	subs	r3, #1
 8008978:	025b      	lsls	r3, r3, #9
 800897a:	b29b      	uxth	r3, r3
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	3b01      	subs	r3, #1
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008990:	3b01      	subs	r3, #1
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008998:	4923      	ldr	r1, [pc, #140]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 800899a:	4313      	orrs	r3, r2
 800899c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800899e:	4b22      	ldr	r3, [pc, #136]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089aa:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	4b21      	ldr	r3, [pc, #132]	; (8008a34 <HAL_RCC_OscConfig+0x778>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089b6:	00d2      	lsls	r2, r2, #3
 80089b8:	491b      	ldr	r1, [pc, #108]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089be:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	f023 020c 	bic.w	r2, r3, #12
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	4917      	ldr	r1, [pc, #92]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089d0:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f023 0202 	bic.w	r2, r3, #2
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089dc:	4912      	ldr	r1, [pc, #72]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089e2:	4b11      	ldr	r3, [pc, #68]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ee:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089fa:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	4a0a      	ldr	r2, [pc, #40]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008a06:	4b08      	ldr	r3, [pc, #32]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	4a07      	ldr	r2, [pc, #28]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a04      	ldr	r2, [pc, #16]	; (8008a28 <HAL_RCC_OscConfig+0x76c>)
 8008a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fb f85d 	bl	8003adc <HAL_GetTick>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a24:	e011      	b.n	8008a4a <HAL_RCC_OscConfig+0x78e>
 8008a26:	bf00      	nop
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	58024800 	.word	0x58024800
 8008a30:	fffffc0c 	.word	0xfffffc0c
 8008a34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a38:	f7fb f850 	bl	8003adc <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e05f      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a4a:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0f0      	beq.n	8008a38 <HAL_RCC_OscConfig+0x77c>
 8008a56:	e057      	b.n	8008b08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a58:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a2d      	ldr	r2, [pc, #180]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a64:	f7fb f83a 	bl	8003adc <HAL_GetTick>
 8008a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a6c:	f7fb f836 	bl	8003adc <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e045      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a7e:	4b25      	ldr	r3, [pc, #148]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x7b0>
 8008a8a:	e03d      	b.n	8008b08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a8c:	4b21      	ldr	r3, [pc, #132]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a92:	4b20      	ldr	r3, [pc, #128]	; (8008b14 <HAL_RCC_OscConfig+0x858>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d031      	beq.n	8008b04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f003 0203 	and.w	r2, r3, #3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d12a      	bne.n	8008b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	091b      	lsrs	r3, r3, #4
 8008ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d122      	bne.n	8008b04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d11a      	bne.n	8008b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	0a5b      	lsrs	r3, r3, #9
 8008ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d111      	bne.n	8008b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	0c1b      	lsrs	r3, r3, #16
 8008ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d108      	bne.n	8008b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	0e1b      	lsrs	r3, r3, #24
 8008af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3730      	adds	r7, #48	; 0x30
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	58024400 	.word	0x58024400

08008b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e19c      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b2c:	4b8a      	ldr	r3, [pc, #552]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d910      	bls.n	8008b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b3a:	4b87      	ldr	r3, [pc, #540]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f023 020f 	bic.w	r2, r3, #15
 8008b42:	4985      	ldr	r1, [pc, #532]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b4a:	4b83      	ldr	r3, [pc, #524]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d001      	beq.n	8008b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e184      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d010      	beq.n	8008b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	4b7b      	ldr	r3, [pc, #492]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d908      	bls.n	8008b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b78:	4b78      	ldr	r3, [pc, #480]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	4975      	ldr	r1, [pc, #468]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d010      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695a      	ldr	r2, [r3, #20]
 8008b9a:	4b70      	ldr	r3, [pc, #448]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d908      	bls.n	8008bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ba6:	4b6d      	ldr	r3, [pc, #436]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	496a      	ldr	r1, [pc, #424]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699a      	ldr	r2, [r3, #24]
 8008bc8:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d908      	bls.n	8008be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bd4:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	495e      	ldr	r1, [pc, #376]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d010      	beq.n	8008c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d908      	bls.n	8008c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c02:	4b56      	ldr	r3, [pc, #344]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	4953      	ldr	r1, [pc, #332]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d010      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	4b4d      	ldr	r3, [pc, #308]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d908      	bls.n	8008c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c30:	4b4a      	ldr	r3, [pc, #296]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f023 020f 	bic.w	r2, r3, #15
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4947      	ldr	r1, [pc, #284]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d055      	beq.n	8008cfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c4e:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	4940      	ldr	r1, [pc, #256]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d107      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c68:	4b3c      	ldr	r3, [pc, #240]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d121      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0f6      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d107      	bne.n	8008c90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c80:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d115      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0ea      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c98:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0de      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0d6      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f023 0207 	bic.w	r2, r3, #7
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4925      	ldr	r1, [pc, #148]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cca:	f7fa ff07 	bl	8003adc <HAL_GetTick>
 8008cce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd0:	e00a      	b.n	8008ce8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cd2:	f7fa ff03 	bl	8003adc <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e0be      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce8:	4b1c      	ldr	r3, [pc, #112]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d1eb      	bne.n	8008cd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d010      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d208      	bcs.n	8008d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f023 020f 	bic.w	r2, r3, #15
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	490e      	ldr	r1, [pc, #56]	; (8008d5c <HAL_RCC_ClockConfig+0x244>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d28:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d214      	bcs.n	8008d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d36:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f023 020f 	bic.w	r2, r3, #15
 8008d3e:	4906      	ldr	r1, [pc, #24]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <HAL_RCC_ClockConfig+0x240>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d005      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e086      	b.n	8008e66 <HAL_RCC_ClockConfig+0x34e>
 8008d58:	52002000 	.word	0x52002000
 8008d5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d010      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	4b3f      	ldr	r3, [pc, #252]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d208      	bcs.n	8008d8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d7c:	4b3c      	ldr	r3, [pc, #240]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	4939      	ldr	r1, [pc, #228]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d010      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d208      	bcs.n	8008dbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008daa:	4b31      	ldr	r3, [pc, #196]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	492e      	ldr	r1, [pc, #184]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	4b28      	ldr	r3, [pc, #160]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d208      	bcs.n	8008dea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008dd8:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	4922      	ldr	r1, [pc, #136]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d010      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69da      	ldr	r2, [r3, #28]
 8008dfa:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d208      	bcs.n	8008e18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e06:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	4917      	ldr	r1, [pc, #92]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e18:	f000 f834 	bl	8008e84 <HAL_RCC_GetSysClockFreq>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	4912      	ldr	r1, [pc, #72]	; (8008e74 <HAL_RCC_ClockConfig+0x35c>)
 8008e2a:	5ccb      	ldrb	r3, [r1, r3]
 8008e2c:	f003 031f 	and.w	r3, r3, #31
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <HAL_RCC_ClockConfig+0x358>)
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <HAL_RCC_ClockConfig+0x35c>)
 8008e40:	5cd3      	ldrb	r3, [r2, r3]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4c:	4a0a      	ldr	r2, [pc, #40]	; (8008e78 <HAL_RCC_ClockConfig+0x360>)
 8008e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e50:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <HAL_RCC_ClockConfig+0x364>)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <HAL_RCC_ClockConfig+0x368>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fa f880 	bl	8002f60 <HAL_InitTick>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	58024400 	.word	0x58024400
 8008e74:	08012178 	.word	0x08012178
 8008e78:	24000004 	.word	0x24000004
 8008e7c:	24000000 	.word	0x24000000
 8008e80:	24000014 	.word	0x24000014

08008e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e8a:	4bb3      	ldr	r3, [pc, #716]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e92:	2b18      	cmp	r3, #24
 8008e94:	f200 8155 	bhi.w	8009142 <HAL_RCC_GetSysClockFreq+0x2be>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08009143 	.word	0x08009143
 8008ea8:	08009143 	.word	0x08009143
 8008eac:	08009143 	.word	0x08009143
 8008eb0:	08009143 	.word	0x08009143
 8008eb4:	08009143 	.word	0x08009143
 8008eb8:	08009143 	.word	0x08009143
 8008ebc:	08009143 	.word	0x08009143
 8008ec0:	08008f2b 	.word	0x08008f2b
 8008ec4:	08009143 	.word	0x08009143
 8008ec8:	08009143 	.word	0x08009143
 8008ecc:	08009143 	.word	0x08009143
 8008ed0:	08009143 	.word	0x08009143
 8008ed4:	08009143 	.word	0x08009143
 8008ed8:	08009143 	.word	0x08009143
 8008edc:	08009143 	.word	0x08009143
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	08009143 	.word	0x08009143
 8008ee8:	08009143 	.word	0x08009143
 8008eec:	08009143 	.word	0x08009143
 8008ef0:	08009143 	.word	0x08009143
 8008ef4:	08009143 	.word	0x08009143
 8008ef8:	08009143 	.word	0x08009143
 8008efc:	08009143 	.word	0x08009143
 8008f00:	08008f37 	.word	0x08008f37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f04:	4b94      	ldr	r3, [pc, #592]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f10:	4b91      	ldr	r3, [pc, #580]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a90      	ldr	r2, [pc, #576]	; (800915c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008f22:	e111      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f24:	4b8d      	ldr	r3, [pc, #564]	; (800915c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f26:	61bb      	str	r3, [r7, #24]
    break;
 8008f28:	e10e      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f2a:	4b8d      	ldr	r3, [pc, #564]	; (8009160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f2c:	61bb      	str	r3, [r7, #24]
    break;
 8008f2e:	e10b      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008f30:	4b8c      	ldr	r3, [pc, #560]	; (8009164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f32:	61bb      	str	r3, [r7, #24]
    break;
 8008f34:	e108      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f36:	4b88      	ldr	r3, [pc, #544]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f40:	4b85      	ldr	r3, [pc, #532]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	091b      	lsrs	r3, r3, #4
 8008f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f4c:	4b82      	ldr	r3, [pc, #520]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f56:	4b80      	ldr	r3, [pc, #512]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	08db      	lsrs	r3, r3, #3
 8008f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80e1 	beq.w	800913c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	f000 8083 	beq.w	8009088 <HAL_RCC_GetSysClockFreq+0x204>
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	f200 80a1 	bhi.w	80090cc <HAL_RCC_GetSysClockFreq+0x248>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_RCC_GetSysClockFreq+0x114>
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d056      	beq.n	8009044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f96:	e099      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f98:	4b6f      	ldr	r3, [pc, #444]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02d      	beq.n	8009000 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fa4:	4b6c      	ldr	r3, [pc, #432]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	08db      	lsrs	r3, r3, #3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	4a6b      	ldr	r2, [pc, #428]	; (800915c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fce:	4b62      	ldr	r3, [pc, #392]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ffe:	e087      	b.n	8009110 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800916c <HAL_RCC_GetSysClockFreq+0x2e8>
 800900e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009012:	4b51      	ldr	r3, [pc, #324]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	ed97 6a02 	vldr	s12, [r7, #8]
 8009026:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800902a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009042:	e065      	b.n	8009110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009056:	4b40      	ldr	r3, [pc, #256]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009066:	ed97 6a02 	vldr	s12, [r7, #8]
 800906a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800906e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009086:	e043      	b.n	8009110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800909a:	4b2f      	ldr	r3, [pc, #188]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ca:	e021      	b.n	8009110 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090de:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80090f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009110:	4b11      	ldr	r3, [pc, #68]	; (8009158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	0a5b      	lsrs	r3, r3, #9
 8009116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911a:	3301      	adds	r3, #1
 800911c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	ee07 3a90 	vmov	s15, r3
 8009124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009128:	edd7 6a07 	vldr	s13, [r7, #28]
 800912c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009134:	ee17 3a90 	vmov	r3, s15
 8009138:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800913a:	e005      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	61bb      	str	r3, [r7, #24]
    break;
 8009140:	e002      	b.n	8009148 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009144:	61bb      	str	r3, [r7, #24]
    break;
 8009146:	bf00      	nop
  }

  return sysclockfreq;
 8009148:	69bb      	ldr	r3, [r7, #24]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3724      	adds	r7, #36	; 0x24
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	58024400 	.word	0x58024400
 800915c:	03d09000 	.word	0x03d09000
 8009160:	003d0900 	.word	0x003d0900
 8009164:	02dc6c00 	.word	0x02dc6c00
 8009168:	46000000 	.word	0x46000000
 800916c:	4c742400 	.word	0x4c742400
 8009170:	4a742400 	.word	0x4a742400
 8009174:	4c371b00 	.word	0x4c371b00

08009178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800917e:	f7ff fe81 	bl	8008e84 <HAL_RCC_GetSysClockFreq>
 8009182:	4602      	mov	r2, r0
 8009184:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	490f      	ldr	r1, [pc, #60]	; (80091cc <HAL_RCC_GetHCLKFreq+0x54>)
 8009190:	5ccb      	ldrb	r3, [r1, r3]
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	4a09      	ldr	r2, [pc, #36]	; (80091cc <HAL_RCC_GetHCLKFreq+0x54>)
 80091a6:	5cd3      	ldrb	r3, [r2, r3]
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80091b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091b6:	4a07      	ldr	r2, [pc, #28]	; (80091d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80091be:	681b      	ldr	r3, [r3, #0]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	58024400 	.word	0x58024400
 80091cc:	08012178 	.word	0x08012178
 80091d0:	24000004 	.word	0x24000004
 80091d4:	24000000 	.word	0x24000000

080091d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80091dc:	f7ff ffcc 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	091b      	lsrs	r3, r3, #4
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	4904      	ldr	r1, [pc, #16]	; (8009200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	58024400 	.word	0x58024400
 8009200:	08012178 	.word	0x08012178

08009204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009208:	f7ff ffb6 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b06      	ldr	r3, [pc, #24]	; (8009228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <HAL_RCC_GetPCLK2Freq+0x28>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	58024400 	.word	0x58024400
 800922c:	08012178 	.word	0x08012178

08009230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	223f      	movs	r2, #63	; 0x3f
 800923e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009240:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0207 	and.w	r2, r3, #7
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800924c:	4b17      	ldr	r3, [pc, #92]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009258:	4b14      	ldr	r3, [pc, #80]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f003 020f 	and.w	r2, r3, #15
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009264:	4b11      	ldr	r3, [pc, #68]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009270:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009288:	4b08      	ldr	r3, [pc, #32]	; (80092ac <HAL_RCC_GetClockConfig+0x7c>)
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009294:	4b06      	ldr	r3, [pc, #24]	; (80092b0 <HAL_RCC_GetClockConfig+0x80>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 020f 	and.w	r2, r3, #15
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	601a      	str	r2, [r3, #0]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	58024400 	.word	0x58024400
 80092b0:	52002000 	.word	0x52002000

080092b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092bc:	2300      	movs	r3, #0
 80092be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092c0:	2300      	movs	r3, #0
 80092c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d03f      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092d8:	d02a      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092de:	d824      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e4:	d018      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092ea:	d81e      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80092f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f4:	d007      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80092f6:	e018      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f8:	4ba3      	ldr	r3, [pc, #652]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4aa2      	ldr	r2, [pc, #648]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009304:	e015      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	2102      	movs	r1, #2
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fff9 	bl	800b304 <RCCEx_PLL2_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009316:	e00c      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	2102      	movs	r1, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f002 f8a2 	bl	800b468 <RCCEx_PLL3_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009328:	e003      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	75fb      	strb	r3, [r7, #23]
      break;
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d109      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009338:	4b93      	ldr	r3, [pc, #588]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800933a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	4990      	ldr	r1, [pc, #576]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009346:	4313      	orrs	r3, r2
 8009348:	650b      	str	r3, [r1, #80]	; 0x50
 800934a:	e001      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d03d      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009360:	2b04      	cmp	r3, #4
 8009362:	d826      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	08009381 	.word	0x08009381
 8009370:	0800938f 	.word	0x0800938f
 8009374:	080093a1 	.word	0x080093a1
 8009378:	080093b9 	.word	0x080093b9
 800937c:	080093b9 	.word	0x080093b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4b81      	ldr	r3, [pc, #516]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4a80      	ldr	r2, [pc, #512]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800938c:	e015      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f001 ffb5 	bl	800b304 <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f002 f85e 	bl	800b468 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093c0:	4b71      	ldr	r3, [pc, #452]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c4:	f023 0207 	bic.w	r2, r3, #7
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	496e      	ldr	r1, [pc, #440]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	650b      	str	r3, [r1, #80]	; 0x50
 80093d2:	e001      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d042      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ec:	d02b      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f2:	d825      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80093f4:	2bc0      	cmp	r3, #192	; 0xc0
 80093f6:	d028      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80093f8:	2bc0      	cmp	r3, #192	; 0xc0
 80093fa:	d821      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d016      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d81d      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d007      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800940c:	e018      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940e:	4b5e      	ldr	r3, [pc, #376]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a5d      	ldr	r2, [pc, #372]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800941a:	e017      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3304      	adds	r3, #4
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f001 ff6e 	bl	800b304 <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800942c:	e00e      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3324      	adds	r3, #36	; 0x24
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f002 f817 	bl	800b468 <RCCEx_PLL3_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800943e:	e005      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
      break;
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800944a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009452:	4b4d      	ldr	r3, [pc, #308]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009456:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945e:	494a      	ldr	r1, [pc, #296]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009460:	4313      	orrs	r3, r2
 8009462:	650b      	str	r3, [r1, #80]	; 0x50
 8009464:	e001      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009472:	2b00      	cmp	r3, #0
 8009474:	d049      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800947c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009480:	d030      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009486:	d82a      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800948c:	d02c      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800948e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009492:	d824      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009498:	d018      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800949a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800949e:	d81e      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094a8:	d007      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094aa:	e018      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4b36      	ldr	r3, [pc, #216]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a35      	ldr	r2, [pc, #212]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094b8:	e017      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	2100      	movs	r1, #0
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 ff1f 	bl	800b304 <RCCEx_PLL2_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ca:	e00e      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3324      	adds	r3, #36	; 0x24
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 ffc8 	bl	800b468 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094dc:	e005      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
      break;
 80094e2:	e002      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80094e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094f0:	4b25      	ldr	r3, [pc, #148]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094fe:	4922      	ldr	r1, [pc, #136]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009500:	4313      	orrs	r3, r2
 8009502:	658b      	str	r3, [r1, #88]	; 0x58
 8009504:	e001      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009512:	2b00      	cmp	r3, #0
 8009514:	d04b      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800951c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009520:	d030      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009526:	d82a      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009528:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800952c:	d02e      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800952e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009532:	d824      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009538:	d018      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800953a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800953e:	d81e      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009548:	d007      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800954a:	e018      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009558:	e019      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fecf 	bl	800b304 <RCCEx_PLL2_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800956a:	e010      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3324      	adds	r3, #36	; 0x24
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f001 ff78 	bl	800b468 <RCCEx_PLL3_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800957c:	e007      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
      break;
 8009582:	e004      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009584:	bf00      	nop
 8009586:	e002      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009588:	58024400 	.word	0x58024400
      break;
 800958c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009594:	4b99      	ldr	r3, [pc, #612]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009598:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095a2:	4996      	ldr	r1, [pc, #600]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	658b      	str	r3, [r1, #88]	; 0x58
 80095a8:	e001      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d032      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095be:	2b30      	cmp	r3, #48	; 0x30
 80095c0:	d01c      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80095c2:	2b30      	cmp	r3, #48	; 0x30
 80095c4:	d817      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	d00c      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d813      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d016      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d10f      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d6:	4b89      	ldr	r3, [pc, #548]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	4a88      	ldr	r2, [pc, #544]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095e2:	e00e      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	2102      	movs	r1, #2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 fe8a 	bl	800b304 <RCCEx_PLL2_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095f4:	e005      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
      break;
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009608:	4b7c      	ldr	r3, [pc, #496]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800960a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009614:	4979      	ldr	r1, [pc, #484]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009616:	4313      	orrs	r3, r2
 8009618:	64cb      	str	r3, [r1, #76]	; 0x4c
 800961a:	e001      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d047      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009634:	d030      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800963a:	d82a      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800963c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009640:	d02c      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009646:	d824      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964c:	d018      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800964e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009652:	d81e      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965c:	d007      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800965e:	e018      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009660:	4b66      	ldr	r3, [pc, #408]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	4a65      	ldr	r2, [pc, #404]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800966c:	e017      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3304      	adds	r3, #4
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f001 fe45 	bl	800b304 <RCCEx_PLL2_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800967e:	e00e      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3324      	adds	r3, #36	; 0x24
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f001 feee 	bl	800b468 <RCCEx_PLL3_Config>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009690:	e005      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
      break;
 8009696:	e002      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800969c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096a4:	4b55      	ldr	r3, [pc, #340]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b0:	4952      	ldr	r1, [pc, #328]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	650b      	str	r3, [r1, #80]	; 0x50
 80096b6:	e001      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d049      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d0:	d02e      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d6:	d828      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096dc:	d02a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80096de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096e2:	d822      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096e8:	d026      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80096ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096ee:	d81c      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f4:	d010      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80096f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fa:	d816      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01d      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009704:	d111      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	2101      	movs	r1, #1
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fdf9 	bl	800b304 <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009716:	e012      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	2101      	movs	r1, #1
 800971e:	4618      	mov	r0, r3
 8009720:	f001 fea2 	bl	800b468 <RCCEx_PLL3_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009728:	e009      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
      break;
 800972e:	e006      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009730:	bf00      	nop
 8009732:	e004      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009734:	bf00      	nop
 8009736:	e002      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009738:	bf00      	nop
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800973c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009744:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009748:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009750:	492a      	ldr	r1, [pc, #168]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009752:	4313      	orrs	r3, r2
 8009754:	650b      	str	r3, [r1, #80]	; 0x50
 8009756:	e001      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d04d      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800976e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009772:	d02e      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009778:	d828      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800977a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977e:	d02a      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009784:	d822      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800978a:	d026      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x526>
 800978c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009790:	d81c      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009796:	d010      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979c:	d816      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01d      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097a6:	d111      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fda8 	bl	800b304 <RCCEx_PLL2_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097b8:	e012      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3324      	adds	r3, #36	; 0x24
 80097be:	2101      	movs	r1, #1
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fe51 	bl	800b468 <RCCEx_PLL3_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ca:	e009      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75fb      	strb	r3, [r7, #23]
      break;
 80097d0:	e006      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097d2:	bf00      	nop
 80097d4:	e004      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097d6:	bf00      	nop
 80097d8:	e002      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097da:	bf00      	nop
 80097dc:	e000      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10c      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097f4:	4901      	ldr	r1, [pc, #4]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	658b      	str	r3, [r1, #88]	; 0x58
 80097fa:	e003      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80097fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d02f      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009818:	d00e      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981e:	d814      	bhi.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d015      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009828:	d10f      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4baf      	ldr	r3, [pc, #700]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4aae      	ldr	r2, [pc, #696]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009836:	e00c      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	2101      	movs	r1, #1
 800983e:	4618      	mov	r0, r3
 8009840:	f001 fd60 	bl	800b304 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      break;
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009858:	4ba3      	ldr	r3, [pc, #652]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009864:	49a0      	ldr	r1, [pc, #640]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009866:	4313      	orrs	r3, r2
 8009868:	650b      	str	r3, [r1, #80]	; 0x50
 800986a:	e001      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d032      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	2b03      	cmp	r3, #3
 8009882:	d81b      	bhi.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098c3 	.word	0x080098c3
 8009890:	0800989d 	.word	0x0800989d
 8009894:	080098ab 	.word	0x080098ab
 8009898:	080098c3 	.word	0x080098c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989c:	4b92      	ldr	r3, [pc, #584]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	4a91      	ldr	r2, [pc, #580]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098a8:	e00c      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3304      	adds	r3, #4
 80098ae:	2102      	movs	r1, #2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fd27 	bl	800b304 <RCCEx_PLL2_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098ba:	e003      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
      break;
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098ca:	4b87      	ldr	r3, [pc, #540]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ce:	f023 0203 	bic.w	r2, r3, #3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d6:	4984      	ldr	r1, [pc, #528]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098dc:	e001      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8086 	beq.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098f0:	4b7e      	ldr	r3, [pc, #504]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a7d      	ldr	r2, [pc, #500]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80098f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098fc:	f7fa f8ee 	bl	8003adc <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009902:	e009      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009904:	f7fa f8ea 	bl	8003adc <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b64      	cmp	r3, #100	; 0x64
 8009910:	d902      	bls.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	75fb      	strb	r3, [r7, #23]
        break;
 8009916:	e005      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009918:	4b74      	ldr	r3, [pc, #464]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0ef      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d166      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800992a:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800992c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009934:	4053      	eors	r3, r2
 8009936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993a:	2b00      	cmp	r3, #0
 800993c:	d013      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800993e:	4b6a      	ldr	r3, [pc, #424]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009946:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009948:	4b67      	ldr	r3, [pc, #412]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	4a66      	ldr	r2, [pc, #408]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800994e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009952:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009954:	4b64      	ldr	r3, [pc, #400]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a63      	ldr	r2, [pc, #396]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800995a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009960:	4a61      	ldr	r2, [pc, #388]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d115      	bne.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009972:	f7fa f8b3 	bl	8003adc <HAL_GetTick>
 8009976:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009978:	e00b      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800997a:	f7fa f8af 	bl	8003adc <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	f241 3288 	movw	r2, #5000	; 0x1388
 8009988:	4293      	cmp	r3, r2
 800998a:	d902      	bls.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	75fb      	strb	r3, [r7, #23]
            break;
 8009990:	e005      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009992:	4b55      	ldr	r3, [pc, #340]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ed      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d126      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099b2:	d10d      	bne.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099b4:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099c2:	0919      	lsrs	r1, r3, #4
 80099c4:	4b4a      	ldr	r3, [pc, #296]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	4947      	ldr	r1, [pc, #284]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	610b      	str	r3, [r1, #16]
 80099ce:	e005      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80099d0:	4b45      	ldr	r3, [pc, #276]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	4a44      	ldr	r2, [pc, #272]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099da:	6113      	str	r3, [r2, #16]
 80099dc:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ea:	493f      	ldr	r1, [pc, #252]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	670b      	str	r3, [r1, #112]	; 0x70
 80099f0:	e004      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	75bb      	strb	r3, [r7, #22]
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8085 	beq.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a0e:	2b28      	cmp	r3, #40	; 0x28
 8009a10:	d866      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009af5 	.word	0x08009af5
 8009a1c:	08009ae1 	.word	0x08009ae1
 8009a20:	08009ae1 	.word	0x08009ae1
 8009a24:	08009ae1 	.word	0x08009ae1
 8009a28:	08009ae1 	.word	0x08009ae1
 8009a2c:	08009ae1 	.word	0x08009ae1
 8009a30:	08009ae1 	.word	0x08009ae1
 8009a34:	08009ae1 	.word	0x08009ae1
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009ae1 	.word	0x08009ae1
 8009a40:	08009ae1 	.word	0x08009ae1
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009ae1 	.word	0x08009ae1
 8009a4c:	08009ae1 	.word	0x08009ae1
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009ae1 	.word	0x08009ae1
 8009a58:	08009acf 	.word	0x08009acf
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009ae1 	.word	0x08009ae1
 8009a64:	08009ae1 	.word	0x08009ae1
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009ae1 	.word	0x08009ae1
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009af5 	.word	0x08009af5
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009ae1 	.word	0x08009ae1
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
 8009aac:	08009ae1 	.word	0x08009ae1
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	08009af5 	.word	0x08009af5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fc1e 	bl	800b304 <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009acc:	e013      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f001 fcc7 	bl	800b468 <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ade:	e00a      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e007      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	58024800 	.word	0x58024800
 8009af0:	00ffffcf 	.word	0x00ffffcf
      break;
 8009af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009afc:	4b96      	ldr	r3, [pc, #600]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b08:	4993      	ldr	r1, [pc, #588]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d038      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d821      	bhi.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b73 	.word	0x08009b73
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b5b 	.word	0x08009b5b
 8009b3c:	08009b73 	.word	0x08009b73
 8009b40:	08009b73 	.word	0x08009b73
 8009b44:	08009b73 	.word	0x08009b73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fbd8 	bl	800b304 <RCCEx_PLL2_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b58:	e00c      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3324      	adds	r3, #36	; 0x24
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 fc81 	bl	800b468 <RCCEx_PLL3_Config>
 8009b66:	4603      	mov	r3, r0
 8009b68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b70:	e000      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b7a:	4b77      	ldr	r3, [pc, #476]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f023 0207 	bic.w	r2, r3, #7
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b86:	4974      	ldr	r1, [pc, #464]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b8c:	e001      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d03a      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d821      	bhi.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bf3 	.word	0x08009bf3
 8009bb4:	08009bc9 	.word	0x08009bc9
 8009bb8:	08009bdb 	.word	0x08009bdb
 8009bbc:	08009bf3 	.word	0x08009bf3
 8009bc0:	08009bf3 	.word	0x08009bf3
 8009bc4:	08009bf3 	.word	0x08009bf3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fb98 	bl	800b304 <RCCEx_PLL2_Config>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bd8:	e00c      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3324      	adds	r3, #36	; 0x24
 8009bde:	2101      	movs	r1, #1
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fc41 	bl	800b468 <RCCEx_PLL3_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bea:	e003      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf0:	e000      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bfa:	4b57      	ldr	r3, [pc, #348]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	f023 0207 	bic.w	r2, r3, #7
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c08:	4953      	ldr	r1, [pc, #332]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009c0e:	e001      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d04b      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c2a:	d02e      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c30:	d828      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c36:	d02a      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3c:	d822      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c42:	d026      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c48:	d81c      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4e:	d010      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c54:	d816      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01d      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5e:	d111      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fb4c 	bl	800b304 <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c70:	e012      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3324      	adds	r3, #36	; 0x24
 8009c76:	2102      	movs	r1, #2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 fbf5 	bl	800b468 <RCCEx_PLL3_Config>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c82:	e009      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	e006      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c8a:	bf00      	nop
 8009c8c:	e004      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c8e:	bf00      	nop
 8009c90:	e002      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c92:	bf00      	nop
 8009c94:	e000      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c9e:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cac:	492a      	ldr	r1, [pc, #168]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	654b      	str	r3, [r1, #84]	; 0x54
 8009cb2:	e001      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d04d      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cce:	d02e      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009cd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cd4:	d828      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d02a      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d822      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ce6:	d026      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cec:	d81c      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf2:	d010      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf8:	d816      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01d      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d02:	d111      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fafa 	bl	800b304 <RCCEx_PLL2_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d14:	e012      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3324      	adds	r3, #36	; 0x24
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fba3 	bl	800b468 <RCCEx_PLL3_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d26:	e009      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d2c:	e006      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e004      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d32:	bf00      	nop
 8009d34:	e002      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d36:	bf00      	nop
 8009d38:	e000      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10c      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d50:	4901      	ldr	r1, [pc, #4]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	658b      	str	r3, [r1, #88]	; 0x58
 8009d56:	e003      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d04b      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d76:	d02e      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009d78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d7c:	d828      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d82:	d02a      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d88:	d822      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d8e:	d026      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009d90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d94:	d81c      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d9a:	d010      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009da0:	d816      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01d      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009daa:	d111      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3304      	adds	r3, #4
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 faa6 	bl	800b304 <RCCEx_PLL2_Config>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dbc:	e012      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3324      	adds	r3, #36	; 0x24
 8009dc2:	2102      	movs	r1, #2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fb4f 	bl	800b468 <RCCEx_PLL3_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dce:	e009      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd4:	e006      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dd6:	bf00      	nop
 8009dd8:	e004      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009dea:	4b9d      	ldr	r3, [pc, #628]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009df8:	4999      	ldr	r1, [pc, #612]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dfe:	e001      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1a:	d10a      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3324      	adds	r3, #36	; 0x24
 8009e20:	2102      	movs	r1, #2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fb20 	bl	800b468 <RCCEx_PLL3_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e32:	4b8b      	ldr	r3, [pc, #556]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e40:	4987      	ldr	r1, [pc, #540]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0310 	and.w	r3, r3, #16
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5c:	d10a      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3324      	adds	r3, #36	; 0x24
 8009e62:	2102      	movs	r1, #2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 faff 	bl	800b468 <RCCEx_PLL3_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e74:	4b7a      	ldr	r3, [pc, #488]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e82:	4977      	ldr	r1, [pc, #476]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d034      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9e:	d01d      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea4:	d817      	bhi.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d009      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009eb0:	e011      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 fa23 	bl	800b304 <RCCEx_PLL2_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ec2:	e00c      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3324      	adds	r3, #36	; 0x24
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 facc 	bl	800b468 <RCCEx_PLL3_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eda:	e000      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ee4:	4b5e      	ldr	r3, [pc, #376]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ef2:	495b      	ldr	r1, [pc, #364]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	658b      	str	r3, [r1, #88]	; 0x58
 8009ef8:	e001      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d033      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f14:	d01c      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f1a:	d816      	bhi.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f20:	d003      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f26:	d007      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f28:	e00f      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2a:	4b4d      	ldr	r3, [pc, #308]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	4a4c      	ldr	r2, [pc, #304]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f36:	e00c      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3324      	adds	r3, #36	; 0x24
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 fa92 	bl	800b468 <RCCEx_PLL3_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f48:	e003      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f58:	4b41      	ldr	r3, [pc, #260]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f66:	493e      	ldr	r1, [pc, #248]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f6c:	e001      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d029      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d007      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009f8c:	e00f      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f8e:	4b34      	ldr	r3, [pc, #208]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	4a33      	ldr	r2, [pc, #204]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f9a:	e00b      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 f9ae 	bl	800b304 <RCCEx_PLL2_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fac:	e002      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d109      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fba:	4b29      	ldr	r3, [pc, #164]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc6:	4926      	ldr	r1, [pc, #152]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009fcc:	e001      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3324      	adds	r3, #36	; 0x24
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fa3f 	bl	800b468 <RCCEx_PLL3_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d033      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a008:	d017      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a00a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a00e:	d811      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a014:	d013      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a01a:	d80b      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a024:	d106      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a026:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a0d      	ldr	r2, [pc, #52]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a032:	e007      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	75fb      	strb	r3, [r7, #23]
      break;
 800a038:	e004      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a03a:	bf00      	nop
 800a03c:	e002      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a03e:	bf00      	nop
 800a040:	e000      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a042:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10c      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a04a:	4b05      	ldr	r3, [pc, #20]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a056:	4902      	ldr	r1, [pc, #8]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	654b      	str	r3, [r1, #84]	; 0x54
 800a05c:	e004      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d008      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a074:	4b31      	ldr	r3, [pc, #196]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a080:	492e      	ldr	r1, [pc, #184]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a082:	4313      	orrs	r3, r2
 800a084:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a092:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a0:	4926      	ldr	r1, [pc, #152]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0b2:	4b22      	ldr	r3, [pc, #136]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0be:	491f      	ldr	r1, [pc, #124]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00d      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0d0:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	4a19      	ldr	r2, [pc, #100]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0da:	6113      	str	r3, [r2, #16]
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a0e6:	4915      	ldr	r1, [pc, #84]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da08      	bge.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a100:	490e      	ldr	r1, [pc, #56]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a102:	4313      	orrs	r3, r2
 800a104:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a120:	4906      	ldr	r1, [pc, #24]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a122:	4313      	orrs	r3, r2
 800a124:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a126:	7dbb      	ldrb	r3, [r7, #22]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	58024400 	.word	0x58024400

0800a140 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b090      	sub	sp, #64	; 0x40
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a14e:	f040 8095 	bne.w	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a152:	4b97      	ldr	r3, [pc, #604]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2b04      	cmp	r3, #4
 800a160:	f200 8088 	bhi.w	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a164:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16a:	bf00      	nop
 800a16c:	0800a181 	.word	0x0800a181
 800a170:	0800a1a9 	.word	0x0800a1a9
 800a174:	0800a1d1 	.word	0x0800a1d1
 800a178:	0800a26d 	.word	0x0800a26d
 800a17c:	0800a1f9 	.word	0x0800a1f9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a180:	4b8b      	ldr	r3, [pc, #556]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a18c:	d108      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a192:	4618      	mov	r0, r3
 800a194:	f000 ff64 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a19c:	f000 bc94 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a4:	f000 bc90 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1a8:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1b4:	d108      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b6:	f107 0318 	add.w	r3, r7, #24
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fca8 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c4:	f000 bc80 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1cc:	f000 bc7c 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1d0:	4b77      	ldr	r3, [pc, #476]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1de:	f107 030c 	add.w	r3, r7, #12
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fde8 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ec:	f000 bc6c 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f4:	f000 bc68 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1f8:	4b6d      	ldr	r3, [pc, #436]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a200:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a202:	4b6b      	ldr	r3, [pc, #428]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d10c      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	2b00      	cmp	r3, #0
 800a212:	d109      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a214:	4b66      	ldr	r3, [pc, #408]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	4a65      	ldr	r2, [pc, #404]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a226:	e01f      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a228:	4b61      	ldr	r3, [pc, #388]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a234:	d106      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a23c:	d102      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a23e:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a242:	e011      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a244:	4b5a      	ldr	r3, [pc, #360]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a250:	d106      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a258:	d102      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a25a:	4b58      	ldr	r3, [pc, #352]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a264:	f000 bc30 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a268:	f000 bc2e 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a26c:	4b54      	ldr	r3, [pc, #336]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a270:	f000 bc2a 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a278:	f000 bc26 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a282:	f040 809f 	bne.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a286:	4b4a      	ldr	r3, [pc, #296]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d04d      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a29e:	f200 8084 	bhi.w	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a2a6:	d07d      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ac:	d87d      	bhi.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	2b80      	cmp	r3, #128	; 0x80
 800a2b2:	d02d      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	2b80      	cmp	r3, #128	; 0x80
 800a2b8:	d877      	bhi.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	d012      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2c6:	e070      	b.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2c8:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d4:	d107      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fec0 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2e4:	e3f0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ea:	e3ed      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ec:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2f8:	d107      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fa:	f107 0318 	add.w	r3, r7, #24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fc06 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a308:	e3de      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a30e:	e3db      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a310:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31c:	d107      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31e:	f107 030c 	add.w	r3, r7, #12
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fd48 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32c:	e3cc      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a332:	e3c9      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a334:	4b1e      	ldr	r3, [pc, #120]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a33e:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b04      	cmp	r3, #4
 800a348:	d10c      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d109      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a350:	4b17      	ldr	r3, [pc, #92]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	08db      	lsrs	r3, r3, #3
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	4a16      	ldr	r2, [pc, #88]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a362:	e01e      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a364:	4b12      	ldr	r3, [pc, #72]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a370:	d106      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a378:	d102      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a37a:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a37e:	e010      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38c:	d106      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a394:	d102      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a39a:	e002      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3a0:	e392      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3a2:	e391      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3a8:	e38e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ae:	e38b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	03d09000 	.word	0x03d09000
 800a3b8:	003d0900 	.word	0x003d0900
 800a3bc:	02dc6c00 	.word	0x02dc6c00
 800a3c0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ca:	f040 809c 	bne.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a3ce:	4b9d      	ldr	r3, [pc, #628]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3de:	d054      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3e6:	f200 808b 	bhi.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3f0:	f000 8083 	beq.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3fa:	f200 8081 	bhi.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a404:	d02f      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a40c:	d878      	bhi.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a41a:	d012      	beq.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a41c:	e070      	b.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a41e:	4b89      	ldr	r3, [pc, #548]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fe15 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a43a:	e345      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a440:	e342      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a442:	4b80      	ldr	r3, [pc, #512]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a44e:	d107      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a450:	f107 0318 	add.w	r3, r7, #24
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fb5b 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a45e:	e333      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a464:	e330      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a466:	4b77      	ldr	r3, [pc, #476]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a472:	d107      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a474:	f107 030c 	add.w	r3, r7, #12
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fc9d 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a482:	e321      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a488:	e31e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a48a:	4b6e      	ldr	r3, [pc, #440]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a492:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a494:	4b6b      	ldr	r3, [pc, #428]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d10c      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4a6:	4b67      	ldr	r3, [pc, #412]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	08db      	lsrs	r3, r3, #3
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	4a65      	ldr	r2, [pc, #404]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b8:	e01e      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ba:	4b62      	ldr	r3, [pc, #392]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c6:	d106      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4ce:	d102      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4d0:	4b5e      	ldr	r3, [pc, #376]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d4:	e010      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4d6:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4e2:	d106      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ea:	d102      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4ec:	4b58      	ldr	r3, [pc, #352]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f0:	e002      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4f6:	e2e7      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a4f8:	e2e6      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4fa:	4b56      	ldr	r3, [pc, #344]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fe:	e2e3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a504:	e2e0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50c:	f040 80a7 	bne.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a510:	4b4c      	ldr	r3, [pc, #304]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a518:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a520:	d055      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a528:	f200 8096 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a532:	f000 8084 	beq.w	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a53c:	f200 808c 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a546:	d030      	beq.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a54e:	f200 8083 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2b00      	cmp	r3, #0
 800a556:	d004      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a55e:	d012      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a560:	e07a      	b.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a562:	4b38      	ldr	r3, [pc, #224]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56e:	d107      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fd73 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57e:	e2a3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a584:	e2a0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a586:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a592:	d107      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a594:	f107 0318 	add.w	r3, r7, #24
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fab9 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5a2:	e291      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a8:	e28e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5aa:	4b26      	ldr	r3, [pc, #152]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5b8:	f107 030c 	add.w	r3, r7, #12
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fbfb 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c6:	e27f      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5cc:	e27c      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d10c      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	08db      	lsrs	r3, r3, #3
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	4a14      	ldr	r2, [pc, #80]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e01e      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5fe:	4b11      	ldr	r3, [pc, #68]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a612:	d102      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a614:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a618:	e010      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a626:	d106      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a62e:	d102      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a634:	e002      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a63a:	e245      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a63c:	e244      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a642:	e241      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a644:	58024400 	.word	0x58024400
 800a648:	03d09000 	.word	0x03d09000
 800a64c:	003d0900 	.word	0x003d0900
 800a650:	02dc6c00 	.word	0x02dc6c00
 800a654:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	e234      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a664:	f040 809c 	bne.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a668:	4b9b      	ldr	r3, [pc, #620]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a678:	d054      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a680:	f200 808b 	bhi.w	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a68a:	f000 8083 	beq.w	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a694:	f200 8081 	bhi.w	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d02f      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a6:	d878      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b4:	d012      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a6b6:	e070      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6b8:	4b87      	ldr	r3, [pc, #540]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fcc8 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d4:	e1f8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6da:	e1f5      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6dc:	4b7e      	ldr	r3, [pc, #504]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0318 	add.w	r3, r7, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fa0e 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6f8:	e1e6      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6fe:	e1e3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a700:	4b75      	ldr	r3, [pc, #468]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a70c:	d107      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70e:	f107 030c 	add.w	r3, r7, #12
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fb50 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a71c:	e1d4      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a722:	e1d1      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a724:	4b6c      	ldr	r3, [pc, #432]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a72e:	4b6a      	ldr	r3, [pc, #424]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	2b04      	cmp	r3, #4
 800a738:	d10c      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d109      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a740:	4b65      	ldr	r3, [pc, #404]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	4a64      	ldr	r2, [pc, #400]	; (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a752:	e01e      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a754:	4b60      	ldr	r3, [pc, #384]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a760:	d106      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a768:	d102      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a76a:	4b5d      	ldr	r3, [pc, #372]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76e:	e010      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a770:	4b59      	ldr	r3, [pc, #356]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77c:	d106      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a784:	d102      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a786:	4b57      	ldr	r3, [pc, #348]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a78a:	e002      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a790:	e19a      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a792:	e199      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a794:	4b54      	ldr	r3, [pc, #336]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a798:	e196      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a79e:	e193      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7a6:	d173      	bne.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b8:	d02f      	beq.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c0:	d863      	bhi.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ce:	d012      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a7d0:	e05b      	b.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d2:	4b41      	ldr	r3, [pc, #260]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7de:	d107      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e0:	f107 0318 	add.w	r3, r7, #24
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f993 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7ee:	e16b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f4:	e168      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f6:	4b38      	ldr	r3, [pc, #224]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a802:	d107      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fad5 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a812:	e159      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a818:	e156      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a81a:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a822:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a824:	4b2c      	ldr	r3, [pc, #176]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d10c      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a836:	4b28      	ldr	r3, [pc, #160]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	08db      	lsrs	r3, r3, #3
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a842:	fa22 f303 	lsr.w	r3, r2, r3
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a848:	e01e      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a84a:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a856:	d106      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a85e:	d102      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a860:	4b1f      	ldr	r3, [pc, #124]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a864:	e010      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a86e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a872:	d106      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a87a:	d102      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a87c:	4b19      	ldr	r3, [pc, #100]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a880:	e002      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a886:	e11f      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a888:	e11e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88e:	e11b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a896:	d13e      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ae:	d01d      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8b0:	e02e      	b.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8be:	d107      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fbcb 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8ce:	e0fb      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d4:	e0f8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8d6:	bf00      	nop
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	03d09000 	.word	0x03d09000
 800a8e0:	003d0900 	.word	0x003d0900
 800a8e4:	02dc6c00 	.word	0x02dc6c00
 800a8e8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ec:	4b79      	ldr	r3, [pc, #484]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8f8:	d107      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f906 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a908:	e0de      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90e:	e0db      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a914:	e0d8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a91c:	f040 8085 	bne.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a920:	4b6c      	ldr	r3, [pc, #432]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a924:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a930:	d06b      	beq.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a938:	d874      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d056      	beq.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a948:	d86c      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a950:	d03b      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a958:	d864      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a960:	d021      	beq.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a968:	d85c      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a976:	d004      	beq.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a978:	e054      	b.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a97a:	f000 f8b3 	bl	800aae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a97e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a980:	e0a2      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a982:	4b54      	ldr	r3, [pc, #336]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a98a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a98e:	d107      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a990:	f107 0318 	add.w	r3, r7, #24
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8bb 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a99e:	e093      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a4:	e090      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9a6:	4b4b      	ldr	r3, [pc, #300]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b2:	d107      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f9fd 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9c2:	e081      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c8:	e07e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9ca:	4b42      	ldr	r3, [pc, #264]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d109      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9d6:	4b3f      	ldr	r3, [pc, #252]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	4a3d      	ldr	r2, [pc, #244]	; (800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9e8:	e06e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ee:	e06b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9f0:	4b38      	ldr	r3, [pc, #224]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fc:	d102      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a9fe:	4b37      	ldr	r3, [pc, #220]	; (800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa02:	e061      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa08:	e05e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa0a:	4b32      	ldr	r3, [pc, #200]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa16:	d102      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa18:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa1c:	e054      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa22:	e051      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa28:	e04e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa30:	d148      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa32:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa42:	d02a      	beq.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4a:	d838      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa58:	d00d      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aa5a:	e030      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa5c:	4b1d      	ldr	r3, [pc, #116]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aa6a:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa6e:	e02b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa74:	e028      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa76:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa82:	d107      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fae9 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa92:	e019      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa98:	e016      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa9a:	4b0e      	ldr	r3, [pc, #56]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaa6:	d107      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f82f 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aab6:	e007      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac2:	e001      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3740      	adds	r7, #64	; 0x40
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	58024400 	.word	0x58024400
 800aad8:	03d09000 	.word	0x03d09000
 800aadc:	003d0900 	.word	0x003d0900
 800aae0:	02dc6c00 	.word	0x02dc6c00

0800aae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aae8:	f7fe fb46 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 800aaec:	4602      	mov	r2, r0
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	091b      	lsrs	r3, r3, #4
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	4904      	ldr	r1, [pc, #16]	; (800ab0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aafa:	5ccb      	ldrb	r3, [r1, r3]
 800aafc:	f003 031f 	and.w	r3, r3, #31
 800ab00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	08012178 	.word	0x08012178

0800ab10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b089      	sub	sp, #36	; 0x24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab18:	4ba1      	ldr	r3, [pc, #644]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab22:	4b9f      	ldr	r3, [pc, #636]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	0b1b      	lsrs	r3, r3, #12
 800ab28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab2e:	4b9c      	ldr	r3, [pc, #624]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab32:	091b      	lsrs	r3, r3, #4
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab3a:	4b99      	ldr	r3, [pc, #612]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	fb02 f303 	mul.w	r3, r2, r3
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8111 	beq.w	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	f000 8083 	beq.w	800ac6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	f200 80a1 	bhi.w	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d056      	beq.n	800ac28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab7a:	e099      	b.n	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab7c:	4b88      	ldr	r3, [pc, #544]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02d      	beq.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab88:	4b85      	ldr	r3, [pc, #532]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	08db      	lsrs	r3, r3, #3
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	4a84      	ldr	r2, [pc, #528]	; (800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
 800ab98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b7b      	ldr	r3, [pc, #492]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abe2:	e087      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800abf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf6:	4b6a      	ldr	r3, [pc, #424]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac26:	e065      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3a:	4b59      	ldr	r3, [pc, #356]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac6a:	e043      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7e:	4b48      	ldr	r3, [pc, #288]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acae:	e021      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b37      	ldr	r3, [pc, #220]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800acf4:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	0a5b      	lsrs	r3, r3, #9
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1a:	ee17 2a90 	vmov	r2, s15
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad22:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad48:	ee17 2a90 	vmov	r2, s15
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad50:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad54:	0e1b      	lsrs	r3, r3, #24
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad76:	ee17 2a90 	vmov	r2, s15
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad7e:	e008      	b.n	800ad92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	609a      	str	r2, [r3, #8]
}
 800ad92:	bf00      	nop
 800ad94:	3724      	adds	r7, #36	; 0x24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	58024400 	.word	0x58024400
 800ada4:	03d09000 	.word	0x03d09000
 800ada8:	46000000 	.word	0x46000000
 800adac:	4c742400 	.word	0x4c742400
 800adb0:	4a742400 	.word	0x4a742400
 800adb4:	4c371b00 	.word	0x4c371b00

0800adb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800adb8:	b480      	push	{r7}
 800adba:	b089      	sub	sp, #36	; 0x24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc0:	4ba1      	ldr	r3, [pc, #644]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adca:	4b9f      	ldr	r3, [pc, #636]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	0d1b      	lsrs	r3, r3, #20
 800add0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800add6:	4b9c      	ldr	r3, [pc, #624]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	0a1b      	lsrs	r3, r3, #8
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ade2:	4b99      	ldr	r3, [pc, #612]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	08db      	lsrs	r3, r3, #3
 800ade8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	fb02 f303 	mul.w	r3, r2, r3
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 8111 	beq.w	800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	f000 8083 	beq.w	800af14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f200 80a1 	bhi.w	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d056      	beq.n	800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae22:	e099      	b.n	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae24:	4b88      	ldr	r3, [pc, #544]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d02d      	beq.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae30:	4b85      	ldr	r3, [pc, #532]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	08db      	lsrs	r3, r3, #3
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	4a84      	ldr	r2, [pc, #528]	; (800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5a:	4b7b      	ldr	r3, [pc, #492]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae8a:	e087      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9e:	4b6a      	ldr	r3, [pc, #424]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeae:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aece:	e065      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b59      	ldr	r3, [pc, #356]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af12:	e043      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af26:	4b48      	ldr	r3, [pc, #288]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af36:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af56:	e021      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6a:	4b37      	ldr	r3, [pc, #220]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af9c:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	0a5b      	lsrs	r3, r3, #9
 800afa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc2:	ee17 2a90 	vmov	r2, s15
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800afca:	4b1f      	ldr	r3, [pc, #124]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	ee17 2a90 	vmov	r2, s15
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aff8:	4b13      	ldr	r3, [pc, #76]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	0e1b      	lsrs	r3, r3, #24
 800affe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b012:	edd7 6a07 	vldr	s13, [r7, #28]
 800b016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01e:	ee17 2a90 	vmov	r2, s15
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b026:	e008      	b.n	800b03a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	609a      	str	r2, [r3, #8]
}
 800b03a:	bf00      	nop
 800b03c:	3724      	adds	r7, #36	; 0x24
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	58024400 	.word	0x58024400
 800b04c:	03d09000 	.word	0x03d09000
 800b050:	46000000 	.word	0x46000000
 800b054:	4c742400 	.word	0x4c742400
 800b058:	4a742400 	.word	0x4a742400
 800b05c:	4c371b00 	.word	0x4c371b00

0800b060 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b060:	b480      	push	{r7}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b068:	4ba0      	ldr	r3, [pc, #640]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06c:	f003 0303 	and.w	r3, r3, #3
 800b070:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b072:	4b9e      	ldr	r3, [pc, #632]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	091b      	lsrs	r3, r3, #4
 800b078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b07c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b07e:	4b9b      	ldr	r3, [pc, #620]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b088:	4b98      	ldr	r3, [pc, #608]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08c:	08db      	lsrs	r3, r3, #3
 800b08e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	fb02 f303 	mul.w	r3, r2, r3
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 8111 	beq.w	800b2ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	f000 8083 	beq.w	800b1ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	f200 80a1 	bhi.w	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d056      	beq.n	800b176 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0c8:	e099      	b.n	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ca:	4b88      	ldr	r3, [pc, #544]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d02d      	beq.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0d6:	4b85      	ldr	r3, [pc, #532]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	08db      	lsrs	r3, r3, #3
 800b0dc:	f003 0303 	and.w	r3, r3, #3
 800b0e0:	4a83      	ldr	r2, [pc, #524]	; (800b2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b100:	4b7a      	ldr	r3, [pc, #488]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b110:	ed97 6a03 	vldr	s12, [r7, #12]
 800b114:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b130:	e087      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b144:	4b69      	ldr	r3, [pc, #420]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b154:	ed97 6a03 	vldr	s12, [r7, #12]
 800b158:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b170:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b174:	e065      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b180:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b2fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b188:	4b58      	ldr	r3, [pc, #352]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b198:	ed97 6a03 	vldr	s12, [r7, #12]
 800b19c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1b8:	e043      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1cc:	4b47      	ldr	r3, [pc, #284]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d4:	ee07 3a90 	vmov	s15, r3
 800b1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1fc:	e021      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b208:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b210:	4b36      	ldr	r3, [pc, #216]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b220:	ed97 6a03 	vldr	s12, [r7, #12]
 800b224:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b240:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b242:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	0a5b      	lsrs	r3, r3, #9
 800b248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b25c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b268:	ee17 2a90 	vmov	r2, s15
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b270:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b274:	0c1b      	lsrs	r3, r3, #16
 800b276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b28a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b296:	ee17 2a90 	vmov	r2, s15
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b29e:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a2:	0e1b      	lsrs	r3, r3, #24
 800b2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c4:	ee17 2a90 	vmov	r2, s15
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	609a      	str	r2, [r3, #8]
}
 800b2e0:	bf00      	nop
 800b2e2:	3724      	adds	r7, #36	; 0x24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	03d09000 	.word	0x03d09000
 800b2f4:	46000000 	.word	0x46000000
 800b2f8:	4c742400 	.word	0x4c742400
 800b2fc:	4a742400 	.word	0x4a742400
 800b300:	4c371b00 	.word	0x4c371b00

0800b304 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b312:	4b53      	ldr	r3, [pc, #332]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d101      	bne.n	800b322 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e099      	b.n	800b456 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b322:	4b4f      	ldr	r3, [pc, #316]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a4e      	ldr	r2, [pc, #312]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b328:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32e:	f7f8 fbd5 	bl	8003adc <HAL_GetTick>
 800b332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b334:	e008      	b.n	800b348 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b336:	f7f8 fbd1 	bl	8003adc <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d901      	bls.n	800b348 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e086      	b.n	800b456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1f0      	bne.n	800b336 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b354:	4b42      	ldr	r3, [pc, #264]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	031b      	lsls	r3, r3, #12
 800b362:	493f      	ldr	r1, [pc, #252]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b364:	4313      	orrs	r3, r2
 800b366:	628b      	str	r3, [r1, #40]	; 0x28
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	3b01      	subs	r3, #1
 800b378:	025b      	lsls	r3, r3, #9
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	3b01      	subs	r3, #1
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	3b01      	subs	r3, #1
 800b392:	061b      	lsls	r3, r3, #24
 800b394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b398:	4931      	ldr	r1, [pc, #196]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	492d      	ldr	r1, [pc, #180]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3b0:	4b2b      	ldr	r3, [pc, #172]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	f023 0220 	bic.w	r2, r3, #32
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	4928      	ldr	r1, [pc, #160]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3c2:	4b27      	ldr	r3, [pc, #156]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	4a26      	ldr	r2, [pc, #152]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3c8:	f023 0310 	bic.w	r3, r3, #16
 800b3cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3ce:	4b24      	ldr	r3, [pc, #144]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3d2:	4b24      	ldr	r3, [pc, #144]	; (800b464 <RCCEx_PLL2_Config+0x160>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	69d2      	ldr	r2, [r2, #28]
 800b3da:	00d2      	lsls	r2, r2, #3
 800b3dc:	4920      	ldr	r1, [pc, #128]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3e2:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	f043 0310 	orr.w	r3, r3, #16
 800b3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3f4:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a19      	ldr	r2, [pc, #100]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b400:	e00f      	b.n	800b422 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d106      	bne.n	800b416 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b408:	4b15      	ldr	r3, [pc, #84]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a14      	ldr	r2, [pc, #80]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b40e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b414:	e005      	b.n	800b422 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b416:	4b12      	ldr	r3, [pc, #72]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a11      	ldr	r2, [pc, #68]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b42e:	f7f8 fb55 	bl	8003adc <HAL_GetTick>
 800b432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b434:	e008      	b.n	800b448 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b436:	f7f8 fb51 	bl	8003adc <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d901      	bls.n	800b448 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e006      	b.n	800b456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d0f0      	beq.n	800b436 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
 800b464:	ffff0007 	.word	0xffff0007

0800b468 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b476:	4b53      	ldr	r3, [pc, #332]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d101      	bne.n	800b486 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e099      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b486:	4b4f      	ldr	r3, [pc, #316]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a4e      	ldr	r2, [pc, #312]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b48c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b492:	f7f8 fb23 	bl	8003adc <HAL_GetTick>
 800b496:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b498:	e008      	b.n	800b4ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b49a:	f7f8 fb1f 	bl	8003adc <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d901      	bls.n	800b4ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e086      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4ac:	4b45      	ldr	r3, [pc, #276]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1f0      	bne.n	800b49a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4b8:	4b42      	ldr	r3, [pc, #264]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	493f      	ldr	r1, [pc, #252]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	628b      	str	r3, [r1, #40]	; 0x28
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	025b      	lsls	r3, r3, #9
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	041b      	lsls	r3, r3, #16
 800b4ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	061b      	lsls	r3, r3, #24
 800b4f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4fc:	4931      	ldr	r1, [pc, #196]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b502:	4b30      	ldr	r3, [pc, #192]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	492d      	ldr	r1, [pc, #180]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b510:	4313      	orrs	r3, r2
 800b512:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b514:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	4928      	ldr	r1, [pc, #160]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b522:	4313      	orrs	r3, r2
 800b524:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	4a26      	ldr	r2, [pc, #152]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b52c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b532:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b536:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <RCCEx_PLL3_Config+0x160>)
 800b538:	4013      	ands	r3, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	69d2      	ldr	r2, [r2, #28]
 800b53e:	00d2      	lsls	r2, r2, #3
 800b540:	4920      	ldr	r1, [pc, #128]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b542:	4313      	orrs	r3, r2
 800b544:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b546:	4b1f      	ldr	r3, [pc, #124]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	4a1e      	ldr	r2, [pc, #120]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d106      	bne.n	800b566 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b558:	4b1a      	ldr	r3, [pc, #104]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4a19      	ldr	r2, [pc, #100]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b562:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b564:	e00f      	b.n	800b586 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d106      	bne.n	800b57a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b56c:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	4a14      	ldr	r2, [pc, #80]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b576:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b578:	e005      	b.n	800b586 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b57a:	4b12      	ldr	r3, [pc, #72]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	4a11      	ldr	r2, [pc, #68]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b584:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b586:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a0e      	ldr	r2, [pc, #56]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b58c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b592:	f7f8 faa3 	bl	8003adc <HAL_GetTick>
 800b596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b598:	e008      	b.n	800b5ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b59a:	f7f8 fa9f 	bl	8003adc <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d901      	bls.n	800b5ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e006      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0f0      	beq.n	800b59a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	ffff0007 	.word	0xffff0007

0800b5cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e0f1      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a78      	ldr	r2, [pc, #480]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00f      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a77      	ldr	r2, [pc, #476]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00a      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a75      	ldr	r2, [pc, #468]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d005      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d901      	bls.n	800b60e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e0d9      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f8e2 	bl	800b7d8 <SPI_GetPacketSize>
 800b614:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a6c      	ldr	r2, [pc, #432]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00c      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a6a      	ldr	r2, [pc, #424]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a69      	ldr	r2, [pc, #420]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d002      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b08      	cmp	r3, #8
 800b638:	d811      	bhi.n	800b65e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b63e:	4a63      	ldr	r2, [pc, #396]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d009      	beq.n	800b658 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a61      	ldr	r2, [pc, #388]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d004      	beq.n	800b658 <HAL_SPI_Init+0x8c>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a60      	ldr	r2, [pc, #384]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d104      	bne.n	800b662 <HAL_SPI_Init+0x96>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d901      	bls.n	800b662 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e0af      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7f7 f9fc 	bl	8002a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0201 	bic.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b69e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6a8:	d119      	bne.n	800b6de <HAL_SPI_Init+0x112>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6b2:	d103      	bne.n	800b6bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10c      	bne.n	800b6de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6cc:	d107      	bne.n	800b6de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69da      	ldr	r2, [r3, #28]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f0:	ea42 0103 	orr.w	r1, r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	431a      	orrs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b73e:	ea42 0103 	orr.w	r1, r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d113      	bne.n	800b77e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b768:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b77c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0201 	bic.w	r2, r2, #1
 800b78c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	40013000 	.word	0x40013000
 800b7d0:	40003800 	.word	0x40003800
 800b7d4:	40003c00 	.word	0x40003c00

0800b7d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e4:	095b      	lsrs	r3, r3, #5
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	3307      	adds	r3, #7
 800b7f6:	08db      	lsrs	r3, r3, #3
 800b7f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e049      	b.n	800b8b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7f7 faa3 	bl	8002d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2202      	movs	r2, #2
 800b83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3304      	adds	r3, #4
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f000 fc57 	bl	800c100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d001      	beq.n	800b8d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e054      	b.n	800b97e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0201 	orr.w	r2, r2, #1
 800b8ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a26      	ldr	r2, [pc, #152]	; (800b98c <HAL_TIM_Base_Start_IT+0xd0>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d022      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fe:	d01d      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a22      	ldr	r2, [pc, #136]	; (800b990 <HAL_TIM_Base_Start_IT+0xd4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d018      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a21      	ldr	r2, [pc, #132]	; (800b994 <HAL_TIM_Base_Start_IT+0xd8>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d013      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a1f      	ldr	r2, [pc, #124]	; (800b998 <HAL_TIM_Base_Start_IT+0xdc>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d00e      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a1e      	ldr	r2, [pc, #120]	; (800b99c <HAL_TIM_Base_Start_IT+0xe0>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d009      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1c      	ldr	r2, [pc, #112]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d004      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x80>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d115      	bne.n	800b968 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	4b19      	ldr	r3, [pc, #100]	; (800b9a8 <HAL_TIM_Base_Start_IT+0xec>)
 800b944:	4013      	ands	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b06      	cmp	r3, #6
 800b94c:	d015      	beq.n	800b97a <HAL_TIM_Base_Start_IT+0xbe>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b954:	d011      	beq.n	800b97a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b966:	e008      	b.n	800b97a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0201 	orr.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e000      	b.n	800b97c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	40010000 	.word	0x40010000
 800b990:	40000400 	.word	0x40000400
 800b994:	40000800 	.word	0x40000800
 800b998:	40000c00 	.word	0x40000c00
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40001800 	.word	0x40001800
 800b9a4:	40014000 	.word	0x40014000
 800b9a8:	00010007 	.word	0x00010007

0800b9ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e049      	b.n	800ba52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7f7 f99a 	bl	8002d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f000 fb88 	bl	800c100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d122      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d11b      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f06f 0202 	mvn.w	r2, #2
 800ba86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fb11 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800baa2:	e005      	b.n	800bab0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fb03 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fb14 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d122      	bne.n	800bb0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	f003 0304 	and.w	r3, r3, #4
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d11b      	bne.n	800bb0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f06f 0204 	mvn.w	r2, #4
 800bada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2202      	movs	r2, #2
 800bae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fae7 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800baf6:	e005      	b.n	800bb04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fad9 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 faea 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d122      	bne.n	800bb5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f003 0308 	and.w	r3, r3, #8
 800bb22:	2b08      	cmp	r3, #8
 800bb24:	d11b      	bne.n	800bb5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f06f 0208 	mvn.w	r2, #8
 800bb2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2204      	movs	r2, #4
 800bb34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	f003 0303 	and.w	r3, r3, #3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fabd 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bb4a:	e005      	b.n	800bb58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 faaf 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fac0 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b10      	cmp	r3, #16
 800bb6a:	d122      	bne.n	800bbb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f003 0310 	and.w	r3, r3, #16
 800bb76:	2b10      	cmp	r3, #16
 800bb78:	d11b      	bne.n	800bbb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f06f 0210 	mvn.w	r2, #16
 800bb82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2208      	movs	r2, #8
 800bb88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fa93 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bb9e:	e005      	b.n	800bbac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fa85 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fa96 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d10e      	bne.n	800bbde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d107      	bne.n	800bbde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f06f 0201 	mvn.w	r2, #1
 800bbd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7f6 f89b 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe8:	2b80      	cmp	r3, #128	; 0x80
 800bbea:	d10e      	bne.n	800bc0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf6:	2b80      	cmp	r3, #128	; 0x80
 800bbf8:	d107      	bne.n	800bc0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 ff9f 	bl	800cb48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc18:	d10e      	bne.n	800bc38 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc24:	2b80      	cmp	r3, #128	; 0x80
 800bc26:	d107      	bne.n	800bc38 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 ff92 	bl	800cb5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc42:	2b40      	cmp	r3, #64	; 0x40
 800bc44:	d10e      	bne.n	800bc64 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc50:	2b40      	cmp	r3, #64	; 0x40
 800bc52:	d107      	bne.n	800bc64 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa44 	bl	800c0ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d10e      	bne.n	800bc90 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	f003 0320 	and.w	r3, r3, #32
 800bc7c:	2b20      	cmp	r3, #32
 800bc7e:	d107      	bne.n	800bc90 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f06f 0220 	mvn.w	r2, #32
 800bc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 ff52 	bl	800cb34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d101      	bne.n	800bcb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	e0ff      	b.n	800beb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b14      	cmp	r3, #20
 800bcc2:	f200 80f0 	bhi.w	800bea6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bcc6:	a201      	add	r2, pc, #4	; (adr r2, 800bccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bccc:	0800bd21 	.word	0x0800bd21
 800bcd0:	0800bea7 	.word	0x0800bea7
 800bcd4:	0800bea7 	.word	0x0800bea7
 800bcd8:	0800bea7 	.word	0x0800bea7
 800bcdc:	0800bd61 	.word	0x0800bd61
 800bce0:	0800bea7 	.word	0x0800bea7
 800bce4:	0800bea7 	.word	0x0800bea7
 800bce8:	0800bea7 	.word	0x0800bea7
 800bcec:	0800bda3 	.word	0x0800bda3
 800bcf0:	0800bea7 	.word	0x0800bea7
 800bcf4:	0800bea7 	.word	0x0800bea7
 800bcf8:	0800bea7 	.word	0x0800bea7
 800bcfc:	0800bde3 	.word	0x0800bde3
 800bd00:	0800bea7 	.word	0x0800bea7
 800bd04:	0800bea7 	.word	0x0800bea7
 800bd08:	0800bea7 	.word	0x0800bea7
 800bd0c:	0800be25 	.word	0x0800be25
 800bd10:	0800bea7 	.word	0x0800bea7
 800bd14:	0800bea7 	.word	0x0800bea7
 800bd18:	0800bea7 	.word	0x0800bea7
 800bd1c:	0800be65 	.word	0x0800be65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fa84 	bl	800c234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	699a      	ldr	r2, [r3, #24]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f042 0208 	orr.w	r2, r2, #8
 800bd3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	699a      	ldr	r2, [r3, #24]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0204 	bic.w	r2, r2, #4
 800bd4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6999      	ldr	r1, [r3, #24]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	691a      	ldr	r2, [r3, #16]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	619a      	str	r2, [r3, #24]
      break;
 800bd5e:	e0a5      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 faf4 	bl	800c354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	699a      	ldr	r2, [r3, #24]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	699a      	ldr	r2, [r3, #24]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6999      	ldr	r1, [r3, #24]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	021a      	lsls	r2, r3, #8
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	619a      	str	r2, [r3, #24]
      break;
 800bda0:	e084      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68b9      	ldr	r1, [r7, #8]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fb5d 	bl	800c468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	69da      	ldr	r2, [r3, #28]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f042 0208 	orr.w	r2, r2, #8
 800bdbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	69da      	ldr	r2, [r3, #28]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 0204 	bic.w	r2, r2, #4
 800bdcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69d9      	ldr	r1, [r3, #28]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	61da      	str	r2, [r3, #28]
      break;
 800bde0:	e064      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 fbc5 	bl	800c578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	69da      	ldr	r2, [r3, #28]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	69da      	ldr	r2, [r3, #28]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69d9      	ldr	r1, [r3, #28]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	021a      	lsls	r2, r3, #8
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	61da      	str	r2, [r3, #28]
      break;
 800be22:	e043      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fc0e 	bl	800c64c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f042 0208 	orr.w	r2, r2, #8
 800be3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0204 	bic.w	r2, r2, #4
 800be4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	691a      	ldr	r2, [r3, #16]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be62:	e023      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fc52 	bl	800c714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	021a      	lsls	r2, r3, #8
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bea4:	e002      	b.n	800beac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	75fb      	strb	r3, [r7, #23]
      break;
 800beaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d101      	bne.n	800bedc <HAL_TIM_ConfigClockSource+0x1c>
 800bed8:	2302      	movs	r3, #2
 800beda:	e0dc      	b.n	800c096 <HAL_TIM_ConfigClockSource+0x1d6>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	4b6a      	ldr	r3, [pc, #424]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bef8:	4013      	ands	r3, r2
 800befa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a64      	ldr	r2, [pc, #400]	; (800c0a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	f000 80a9 	beq.w	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf18:	4a62      	ldr	r2, [pc, #392]	; (800c0a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	f200 80ae 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf20:	4a61      	ldr	r2, [pc, #388]	; (800c0a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	f000 80a1 	beq.w	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf28:	4a5f      	ldr	r2, [pc, #380]	; (800c0a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	f200 80a6 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf30:	4a5e      	ldr	r2, [pc, #376]	; (800c0ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	f000 8099 	beq.w	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf38:	4a5c      	ldr	r2, [pc, #368]	; (800c0ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	f200 809e 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf44:	f000 8091 	beq.w	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf4c:	f200 8096 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf54:	f000 8089 	beq.w	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf5c:	f200 808e 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf64:	d03e      	beq.n	800bfe4 <HAL_TIM_ConfigClockSource+0x124>
 800bf66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6a:	f200 8087 	bhi.w	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf72:	f000 8086 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf7a:	d87f      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf7c:	2b70      	cmp	r3, #112	; 0x70
 800bf7e:	d01a      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0xf6>
 800bf80:	2b70      	cmp	r3, #112	; 0x70
 800bf82:	d87b      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf84:	2b60      	cmp	r3, #96	; 0x60
 800bf86:	d050      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0x16a>
 800bf88:	2b60      	cmp	r3, #96	; 0x60
 800bf8a:	d877      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf8c:	2b50      	cmp	r3, #80	; 0x50
 800bf8e:	d03c      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x14a>
 800bf90:	2b50      	cmp	r3, #80	; 0x50
 800bf92:	d873      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf94:	2b40      	cmp	r3, #64	; 0x40
 800bf96:	d058      	beq.n	800c04a <HAL_TIM_ConfigClockSource+0x18a>
 800bf98:	2b40      	cmp	r3, #64	; 0x40
 800bf9a:	d86f      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf9c:	2b30      	cmp	r3, #48	; 0x30
 800bf9e:	d064      	beq.n	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfa0:	2b30      	cmp	r3, #48	; 0x30
 800bfa2:	d86b      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d060      	beq.n	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d867      	bhi.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d05c      	beq.n	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	d05a      	beq.n	800c06a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfb4:	e062      	b.n	800c07c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	6899      	ldr	r1, [r3, #8]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f000 fc89 	bl	800c8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	609a      	str	r2, [r3, #8]
      break;
 800bfe2:	e04f      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	6899      	ldr	r1, [r3, #8]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685a      	ldr	r2, [r3, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	f000 fc72 	bl	800c8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689a      	ldr	r2, [r3, #8]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c006:	609a      	str	r2, [r3, #8]
      break;
 800c008:	e03c      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	6859      	ldr	r1, [r3, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	461a      	mov	r2, r3
 800c018:	f000 fbe2 	bl	800c7e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2150      	movs	r1, #80	; 0x50
 800c022:	4618      	mov	r0, r3
 800c024:	f000 fc3c 	bl	800c8a0 <TIM_ITRx_SetConfig>
      break;
 800c028:	e02c      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6859      	ldr	r1, [r3, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	461a      	mov	r2, r3
 800c038:	f000 fc01 	bl	800c83e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2160      	movs	r1, #96	; 0x60
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fc2c 	bl	800c8a0 <TIM_ITRx_SetConfig>
      break;
 800c048:	e01c      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6818      	ldr	r0, [r3, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	6859      	ldr	r1, [r3, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	461a      	mov	r2, r3
 800c058:	f000 fbc2 	bl	800c7e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2140      	movs	r1, #64	; 0x40
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fc1c 	bl	800c8a0 <TIM_ITRx_SetConfig>
      break;
 800c068:	e00c      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f000 fc13 	bl	800c8a0 <TIM_ITRx_SetConfig>
      break;
 800c07a:	e003      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	73fb      	strb	r3, [r7, #15]
      break;
 800c080:	e000      	b.n	800c084 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c094:	7bfb      	ldrb	r3, [r7, #15]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	ffceff88 	.word	0xffceff88
 800c0a4:	00100040 	.word	0x00100040
 800c0a8:	00100030 	.word	0x00100030
 800c0ac:	00100020 	.word	0x00100020

0800c0b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a40      	ldr	r2, [pc, #256]	; (800c214 <TIM_Base_SetConfig+0x114>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d013      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11e:	d00f      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3d      	ldr	r2, [pc, #244]	; (800c218 <TIM_Base_SetConfig+0x118>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00b      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a3c      	ldr	r2, [pc, #240]	; (800c21c <TIM_Base_SetConfig+0x11c>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d007      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3b      	ldr	r2, [pc, #236]	; (800c220 <TIM_Base_SetConfig+0x120>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d003      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a3a      	ldr	r2, [pc, #232]	; (800c224 <TIM_Base_SetConfig+0x124>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d108      	bne.n	800c152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a2f      	ldr	r2, [pc, #188]	; (800c214 <TIM_Base_SetConfig+0x114>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d01f      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c160:	d01b      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2c      	ldr	r2, [pc, #176]	; (800c218 <TIM_Base_SetConfig+0x118>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d017      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a2b      	ldr	r2, [pc, #172]	; (800c21c <TIM_Base_SetConfig+0x11c>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d013      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a2a      	ldr	r2, [pc, #168]	; (800c220 <TIM_Base_SetConfig+0x120>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d00f      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a29      	ldr	r2, [pc, #164]	; (800c224 <TIM_Base_SetConfig+0x124>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00b      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a28      	ldr	r2, [pc, #160]	; (800c228 <TIM_Base_SetConfig+0x128>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d007      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a27      	ldr	r2, [pc, #156]	; (800c22c <TIM_Base_SetConfig+0x12c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d003      	beq.n	800c19a <TIM_Base_SetConfig+0x9a>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a26      	ldr	r2, [pc, #152]	; (800c230 <TIM_Base_SetConfig+0x130>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d108      	bne.n	800c1ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a10      	ldr	r2, [pc, #64]	; (800c214 <TIM_Base_SetConfig+0x114>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d00f      	beq.n	800c1f8 <TIM_Base_SetConfig+0xf8>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a12      	ldr	r2, [pc, #72]	; (800c224 <TIM_Base_SetConfig+0x124>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d00b      	beq.n	800c1f8 <TIM_Base_SetConfig+0xf8>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a11      	ldr	r2, [pc, #68]	; (800c228 <TIM_Base_SetConfig+0x128>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d007      	beq.n	800c1f8 <TIM_Base_SetConfig+0xf8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a10      	ldr	r2, [pc, #64]	; (800c22c <TIM_Base_SetConfig+0x12c>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d003      	beq.n	800c1f8 <TIM_Base_SetConfig+0xf8>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a0f      	ldr	r2, [pc, #60]	; (800c230 <TIM_Base_SetConfig+0x130>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d103      	bne.n	800c200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	691a      	ldr	r2, [r3, #16]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	615a      	str	r2, [r3, #20]
}
 800c206:	bf00      	nop
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	40010000 	.word	0x40010000
 800c218:	40000400 	.word	0x40000400
 800c21c:	40000800 	.word	0x40000800
 800c220:	40000c00 	.word	0x40000c00
 800c224:	40010400 	.word	0x40010400
 800c228:	40014000 	.word	0x40014000
 800c22c:	40014400 	.word	0x40014400
 800c230:	40014800 	.word	0x40014800

0800c234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	f023 0201 	bic.w	r2, r3, #1
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4b37      	ldr	r3, [pc, #220]	; (800c33c <TIM_OC1_SetConfig+0x108>)
 800c260:	4013      	ands	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f023 0303 	bic.w	r3, r3, #3
 800c26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	4313      	orrs	r3, r2
 800c274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f023 0302 	bic.w	r3, r3, #2
 800c27c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	4313      	orrs	r3, r2
 800c286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a2d      	ldr	r2, [pc, #180]	; (800c340 <TIM_OC1_SetConfig+0x10c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d00f      	beq.n	800c2b0 <TIM_OC1_SetConfig+0x7c>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a2c      	ldr	r2, [pc, #176]	; (800c344 <TIM_OC1_SetConfig+0x110>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d00b      	beq.n	800c2b0 <TIM_OC1_SetConfig+0x7c>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a2b      	ldr	r2, [pc, #172]	; (800c348 <TIM_OC1_SetConfig+0x114>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d007      	beq.n	800c2b0 <TIM_OC1_SetConfig+0x7c>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a2a      	ldr	r2, [pc, #168]	; (800c34c <TIM_OC1_SetConfig+0x118>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d003      	beq.n	800c2b0 <TIM_OC1_SetConfig+0x7c>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a29      	ldr	r2, [pc, #164]	; (800c350 <TIM_OC1_SetConfig+0x11c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d10c      	bne.n	800c2ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f023 0308 	bic.w	r3, r3, #8
 800c2b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f023 0304 	bic.w	r3, r3, #4
 800c2c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a1c      	ldr	r2, [pc, #112]	; (800c340 <TIM_OC1_SetConfig+0x10c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00f      	beq.n	800c2f2 <TIM_OC1_SetConfig+0xbe>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a1b      	ldr	r2, [pc, #108]	; (800c344 <TIM_OC1_SetConfig+0x110>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d00b      	beq.n	800c2f2 <TIM_OC1_SetConfig+0xbe>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a1a      	ldr	r2, [pc, #104]	; (800c348 <TIM_OC1_SetConfig+0x114>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d007      	beq.n	800c2f2 <TIM_OC1_SetConfig+0xbe>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a19      	ldr	r2, [pc, #100]	; (800c34c <TIM_OC1_SetConfig+0x118>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d003      	beq.n	800c2f2 <TIM_OC1_SetConfig+0xbe>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a18      	ldr	r2, [pc, #96]	; (800c350 <TIM_OC1_SetConfig+0x11c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d111      	bne.n	800c316 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	693a      	ldr	r2, [r7, #16]
 800c308:	4313      	orrs	r3, r2
 800c30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	4313      	orrs	r3, r2
 800c314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	621a      	str	r2, [r3, #32]
}
 800c330:	bf00      	nop
 800c332:	371c      	adds	r7, #28
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	fffeff8f 	.word	0xfffeff8f
 800c340:	40010000 	.word	0x40010000
 800c344:	40010400 	.word	0x40010400
 800c348:	40014000 	.word	0x40014000
 800c34c:	40014400 	.word	0x40014400
 800c350:	40014800 	.word	0x40014800

0800c354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c354:	b480      	push	{r7}
 800c356:	b087      	sub	sp, #28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	f023 0210 	bic.w	r2, r3, #16
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4b34      	ldr	r3, [pc, #208]	; (800c450 <TIM_OC2_SetConfig+0xfc>)
 800c380:	4013      	ands	r3, r2
 800c382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	4313      	orrs	r3, r2
 800c396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f023 0320 	bic.w	r3, r3, #32
 800c39e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a29      	ldr	r2, [pc, #164]	; (800c454 <TIM_OC2_SetConfig+0x100>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d003      	beq.n	800c3bc <TIM_OC2_SetConfig+0x68>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a28      	ldr	r2, [pc, #160]	; (800c458 <TIM_OC2_SetConfig+0x104>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d10d      	bne.n	800c3d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	011b      	lsls	r3, r3, #4
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a1e      	ldr	r2, [pc, #120]	; (800c454 <TIM_OC2_SetConfig+0x100>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d00f      	beq.n	800c400 <TIM_OC2_SetConfig+0xac>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <TIM_OC2_SetConfig+0x104>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d00b      	beq.n	800c400 <TIM_OC2_SetConfig+0xac>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a1c      	ldr	r2, [pc, #112]	; (800c45c <TIM_OC2_SetConfig+0x108>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d007      	beq.n	800c400 <TIM_OC2_SetConfig+0xac>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a1b      	ldr	r2, [pc, #108]	; (800c460 <TIM_OC2_SetConfig+0x10c>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d003      	beq.n	800c400 <TIM_OC2_SetConfig+0xac>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a1a      	ldr	r2, [pc, #104]	; (800c464 <TIM_OC2_SetConfig+0x110>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d113      	bne.n	800c428 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c40e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	4313      	orrs	r3, r2
 800c426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	621a      	str	r2, [r3, #32]
}
 800c442:	bf00      	nop
 800c444:	371c      	adds	r7, #28
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	feff8fff 	.word	0xfeff8fff
 800c454:	40010000 	.word	0x40010000
 800c458:	40010400 	.word	0x40010400
 800c45c:	40014000 	.word	0x40014000
 800c460:	40014400 	.word	0x40014400
 800c464:	40014800 	.word	0x40014800

0800c468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c468:	b480      	push	{r7}
 800c46a:	b087      	sub	sp, #28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4b33      	ldr	r3, [pc, #204]	; (800c560 <TIM_OC3_SetConfig+0xf8>)
 800c494:	4013      	ands	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0303 	bic.w	r3, r3, #3
 800c49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a28      	ldr	r2, [pc, #160]	; (800c564 <TIM_OC3_SetConfig+0xfc>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d003      	beq.n	800c4ce <TIM_OC3_SetConfig+0x66>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a27      	ldr	r2, [pc, #156]	; (800c568 <TIM_OC3_SetConfig+0x100>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d10d      	bne.n	800c4ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	021b      	lsls	r3, r3, #8
 800c4dc:	697a      	ldr	r2, [r7, #20]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a1d      	ldr	r2, [pc, #116]	; (800c564 <TIM_OC3_SetConfig+0xfc>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00f      	beq.n	800c512 <TIM_OC3_SetConfig+0xaa>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a1c      	ldr	r2, [pc, #112]	; (800c568 <TIM_OC3_SetConfig+0x100>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00b      	beq.n	800c512 <TIM_OC3_SetConfig+0xaa>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a1b      	ldr	r2, [pc, #108]	; (800c56c <TIM_OC3_SetConfig+0x104>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d007      	beq.n	800c512 <TIM_OC3_SetConfig+0xaa>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a1a      	ldr	r2, [pc, #104]	; (800c570 <TIM_OC3_SetConfig+0x108>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d003      	beq.n	800c512 <TIM_OC3_SetConfig+0xaa>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a19      	ldr	r2, [pc, #100]	; (800c574 <TIM_OC3_SetConfig+0x10c>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d113      	bne.n	800c53a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	011b      	lsls	r3, r3, #4
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	011b      	lsls	r3, r3, #4
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	4313      	orrs	r3, r2
 800c538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	621a      	str	r2, [r3, #32]
}
 800c554:	bf00      	nop
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	fffeff8f 	.word	0xfffeff8f
 800c564:	40010000 	.word	0x40010000
 800c568:	40010400 	.word	0x40010400
 800c56c:	40014000 	.word	0x40014000
 800c570:	40014400 	.word	0x40014400
 800c574:	40014800 	.word	0x40014800

0800c578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4b24      	ldr	r3, [pc, #144]	; (800c634 <TIM_OC4_SetConfig+0xbc>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	021b      	lsls	r3, r3, #8
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	031b      	lsls	r3, r3, #12
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a19      	ldr	r2, [pc, #100]	; (800c638 <TIM_OC4_SetConfig+0xc0>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d00f      	beq.n	800c5f8 <TIM_OC4_SetConfig+0x80>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a18      	ldr	r2, [pc, #96]	; (800c63c <TIM_OC4_SetConfig+0xc4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d00b      	beq.n	800c5f8 <TIM_OC4_SetConfig+0x80>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a17      	ldr	r2, [pc, #92]	; (800c640 <TIM_OC4_SetConfig+0xc8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d007      	beq.n	800c5f8 <TIM_OC4_SetConfig+0x80>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a16      	ldr	r2, [pc, #88]	; (800c644 <TIM_OC4_SetConfig+0xcc>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d003      	beq.n	800c5f8 <TIM_OC4_SetConfig+0x80>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a15      	ldr	r2, [pc, #84]	; (800c648 <TIM_OC4_SetConfig+0xd0>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d109      	bne.n	800c60c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	019b      	lsls	r3, r3, #6
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	4313      	orrs	r3, r2
 800c60a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	621a      	str	r2, [r3, #32]
}
 800c626:	bf00      	nop
 800c628:	371c      	adds	r7, #28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	feff8fff 	.word	0xfeff8fff
 800c638:	40010000 	.word	0x40010000
 800c63c:	40010400 	.word	0x40010400
 800c640:	40014000 	.word	0x40014000
 800c644:	40014400 	.word	0x40014400
 800c648:	40014800 	.word	0x40014800

0800c64c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b087      	sub	sp, #28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4b21      	ldr	r3, [pc, #132]	; (800c6fc <TIM_OC5_SetConfig+0xb0>)
 800c678:	4013      	ands	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c68c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	041b      	lsls	r3, r3, #16
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	4313      	orrs	r3, r2
 800c698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a18      	ldr	r2, [pc, #96]	; (800c700 <TIM_OC5_SetConfig+0xb4>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00f      	beq.n	800c6c2 <TIM_OC5_SetConfig+0x76>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a17      	ldr	r2, [pc, #92]	; (800c704 <TIM_OC5_SetConfig+0xb8>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d00b      	beq.n	800c6c2 <TIM_OC5_SetConfig+0x76>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a16      	ldr	r2, [pc, #88]	; (800c708 <TIM_OC5_SetConfig+0xbc>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d007      	beq.n	800c6c2 <TIM_OC5_SetConfig+0x76>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a15      	ldr	r2, [pc, #84]	; (800c70c <TIM_OC5_SetConfig+0xc0>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d003      	beq.n	800c6c2 <TIM_OC5_SetConfig+0x76>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a14      	ldr	r2, [pc, #80]	; (800c710 <TIM_OC5_SetConfig+0xc4>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d109      	bne.n	800c6d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	021b      	lsls	r3, r3, #8
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	621a      	str	r2, [r3, #32]
}
 800c6f0:	bf00      	nop
 800c6f2:	371c      	adds	r7, #28
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	fffeff8f 	.word	0xfffeff8f
 800c700:	40010000 	.word	0x40010000
 800c704:	40010400 	.word	0x40010400
 800c708:	40014000 	.word	0x40014000
 800c70c:	40014400 	.word	0x40014400
 800c710:	40014800 	.word	0x40014800

0800c714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4b22      	ldr	r3, [pc, #136]	; (800c7c8 <TIM_OC6_SetConfig+0xb4>)
 800c740:	4013      	ands	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	051b      	lsls	r3, r3, #20
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	4313      	orrs	r3, r2
 800c762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a19      	ldr	r2, [pc, #100]	; (800c7cc <TIM_OC6_SetConfig+0xb8>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d00f      	beq.n	800c78c <TIM_OC6_SetConfig+0x78>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a18      	ldr	r2, [pc, #96]	; (800c7d0 <TIM_OC6_SetConfig+0xbc>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d00b      	beq.n	800c78c <TIM_OC6_SetConfig+0x78>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a17      	ldr	r2, [pc, #92]	; (800c7d4 <TIM_OC6_SetConfig+0xc0>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d007      	beq.n	800c78c <TIM_OC6_SetConfig+0x78>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a16      	ldr	r2, [pc, #88]	; (800c7d8 <TIM_OC6_SetConfig+0xc4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d003      	beq.n	800c78c <TIM_OC6_SetConfig+0x78>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a15      	ldr	r2, [pc, #84]	; (800c7dc <TIM_OC6_SetConfig+0xc8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d109      	bne.n	800c7a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	029b      	lsls	r3, r3, #10
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	621a      	str	r2, [r3, #32]
}
 800c7ba:	bf00      	nop
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	feff8fff 	.word	0xfeff8fff
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	40014400 	.word	0x40014400
 800c7dc:	40014800 	.word	0x40014800

0800c7e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	f023 0201 	bic.w	r2, r3, #1
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c80a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	4313      	orrs	r3, r2
 800c814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f023 030a 	bic.w	r3, r3, #10
 800c81c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	4313      	orrs	r3, r2
 800c824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	621a      	str	r2, [r3, #32]
}
 800c832:	bf00      	nop
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c83e:	b480      	push	{r7}
 800c840:	b087      	sub	sp, #28
 800c842:	af00      	add	r7, sp, #0
 800c844:	60f8      	str	r0, [r7, #12]
 800c846:	60b9      	str	r1, [r7, #8]
 800c848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	f023 0210 	bic.w	r2, r3, #16
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	031b      	lsls	r3, r3, #12
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	4313      	orrs	r3, r2
 800c872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c87a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	011b      	lsls	r3, r3, #4
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4313      	orrs	r3, r2
 800c884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	621a      	str	r2, [r3, #32]
}
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <TIM_ITRx_SetConfig+0x38>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	f043 0307 	orr.w	r3, r3, #7
 800c8c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	609a      	str	r2, [r3, #8]
}
 800c8ca:	bf00      	nop
 800c8cc:	3714      	adds	r7, #20
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	ffcfff8f 	.word	0xffcfff8f

0800c8dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b087      	sub	sp, #28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	021a      	lsls	r2, r3, #8
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	431a      	orrs	r2, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	4313      	orrs	r3, r2
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	609a      	str	r2, [r3, #8]
}
 800c910:	bf00      	nop
 800c912:	371c      	adds	r7, #28
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c930:	2302      	movs	r3, #2
 800c932:	e06d      	b.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a30      	ldr	r2, [pc, #192]	; (800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d004      	beq.n	800c968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a2f      	ldr	r2, [pc, #188]	; (800ca20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d108      	bne.n	800c97a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c96e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4313      	orrs	r3, r2
 800c978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	4313      	orrs	r3, r2
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a20      	ldr	r2, [pc, #128]	; (800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d022      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9a6:	d01d      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d018      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	; (800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d013      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d00e      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a15      	ldr	r2, [pc, #84]	; (800ca20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d009      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a16      	ldr	r2, [pc, #88]	; (800ca30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d004      	beq.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d10c      	bne.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	40010000 	.word	0x40010000
 800ca20:	40010400 	.word	0x40010400
 800ca24:	40000400 	.word	0x40000400
 800ca28:	40000800 	.word	0x40000800
 800ca2c:	40000c00 	.word	0x40000c00
 800ca30:	40001800 	.word	0x40001800
 800ca34:	40014000 	.word	0x40014000

0800ca38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d101      	bne.n	800ca54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca50:	2302      	movs	r3, #2
 800ca52:	e065      	b.n	800cb20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	4313      	orrs	r3, r2
 800ca84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	041b      	lsls	r3, r3, #16
 800caca:	4313      	orrs	r3, r2
 800cacc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a16      	ldr	r2, [pc, #88]	; (800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d004      	beq.n	800cae2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a14      	ldr	r2, [pc, #80]	; (800cb30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d115      	bne.n	800cb0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	051b      	lsls	r3, r3, #20
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	40010000 	.word	0x40010000
 800cb30:	40010400 	.word	0x40010400

0800cb34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e042      	b.n	800cc08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7f5 fc19 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2224      	movs	r2, #36	; 0x24
 800cb9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f022 0201 	bic.w	r2, r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f8c2 	bl	800cd3c <UART_SetConfig>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e022      	b.n	800cc08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fe1e 	bl	800d80c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0201 	orr.w	r2, r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fea5 	bl	800d950 <UART_CheckIdleState>
 800cc06:	4603      	mov	r3, r0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08a      	sub	sp, #40	; 0x28
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	f040 8083 	bne.w	800cd32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <HAL_UART_Transmit+0x28>
 800cc32:	88fb      	ldrh	r3, [r7, #6]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e07b      	b.n	800cd34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d101      	bne.n	800cc4a <HAL_UART_Transmit+0x3a>
 800cc46:	2302      	movs	r3, #2
 800cc48:	e074      	b.n	800cd34 <HAL_UART_Transmit+0x124>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2221      	movs	r2, #33	; 0x21
 800cc5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc62:	f7f6 ff3b 	bl	8003adc <HAL_GetTick>
 800cc66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	88fa      	ldrh	r2, [r7, #6]
 800cc6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	88fa      	ldrh	r2, [r7, #6]
 800cc74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc80:	d108      	bne.n	800cc94 <HAL_UART_Transmit+0x84>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e003      	b.n	800cc9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cca4:	e02c      	b.n	800cd00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2200      	movs	r2, #0
 800ccae:	2180      	movs	r1, #128	; 0x80
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 fe98 	bl	800d9e6 <UART_WaitOnFlagUntilTimeout>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e039      	b.n	800cd34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	3302      	adds	r3, #2
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	e007      	b.n	800ccee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	781a      	ldrb	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1cc      	bne.n	800cca6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2200      	movs	r2, #0
 800cd14:	2140      	movs	r1, #64	; 0x40
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 fe65 	bl	800d9e6 <UART_WaitOnFlagUntilTimeout>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e006      	b.n	800cd34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2220      	movs	r2, #32
 800cd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e000      	b.n	800cd34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cd32:	2302      	movs	r3, #2
  }
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd40:	b092      	sub	sp, #72	; 0x48
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	689a      	ldr	r2, [r3, #8]
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	4bbe      	ldr	r3, [pc, #760]	; (800d064 <UART_SetConfig+0x328>)
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd74:	430b      	orrs	r3, r1
 800cd76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	68da      	ldr	r2, [r3, #12]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4ab3      	ldr	r2, [pc, #716]	; (800d068 <UART_SetConfig+0x32c>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d004      	beq.n	800cda8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cda4:	4313      	orrs	r3, r2
 800cda6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	4baf      	ldr	r3, [pc, #700]	; (800d06c <UART_SetConfig+0x330>)
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	f023 010f 	bic.w	r1, r3, #15
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4aa6      	ldr	r2, [pc, #664]	; (800d070 <UART_SetConfig+0x334>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d177      	bne.n	800cecc <UART_SetConfig+0x190>
 800cddc:	4ba5      	ldr	r3, [pc, #660]	; (800d074 <UART_SetConfig+0x338>)
 800cdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cde4:	2b28      	cmp	r3, #40	; 0x28
 800cde6:	d86d      	bhi.n	800cec4 <UART_SetConfig+0x188>
 800cde8:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <UART_SetConfig+0xb4>)
 800cdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdee:	bf00      	nop
 800cdf0:	0800ce95 	.word	0x0800ce95
 800cdf4:	0800cec5 	.word	0x0800cec5
 800cdf8:	0800cec5 	.word	0x0800cec5
 800cdfc:	0800cec5 	.word	0x0800cec5
 800ce00:	0800cec5 	.word	0x0800cec5
 800ce04:	0800cec5 	.word	0x0800cec5
 800ce08:	0800cec5 	.word	0x0800cec5
 800ce0c:	0800cec5 	.word	0x0800cec5
 800ce10:	0800ce9d 	.word	0x0800ce9d
 800ce14:	0800cec5 	.word	0x0800cec5
 800ce18:	0800cec5 	.word	0x0800cec5
 800ce1c:	0800cec5 	.word	0x0800cec5
 800ce20:	0800cec5 	.word	0x0800cec5
 800ce24:	0800cec5 	.word	0x0800cec5
 800ce28:	0800cec5 	.word	0x0800cec5
 800ce2c:	0800cec5 	.word	0x0800cec5
 800ce30:	0800cea5 	.word	0x0800cea5
 800ce34:	0800cec5 	.word	0x0800cec5
 800ce38:	0800cec5 	.word	0x0800cec5
 800ce3c:	0800cec5 	.word	0x0800cec5
 800ce40:	0800cec5 	.word	0x0800cec5
 800ce44:	0800cec5 	.word	0x0800cec5
 800ce48:	0800cec5 	.word	0x0800cec5
 800ce4c:	0800cec5 	.word	0x0800cec5
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800cec5 	.word	0x0800cec5
 800ce58:	0800cec5 	.word	0x0800cec5
 800ce5c:	0800cec5 	.word	0x0800cec5
 800ce60:	0800cec5 	.word	0x0800cec5
 800ce64:	0800cec5 	.word	0x0800cec5
 800ce68:	0800cec5 	.word	0x0800cec5
 800ce6c:	0800cec5 	.word	0x0800cec5
 800ce70:	0800ceb5 	.word	0x0800ceb5
 800ce74:	0800cec5 	.word	0x0800cec5
 800ce78:	0800cec5 	.word	0x0800cec5
 800ce7c:	0800cec5 	.word	0x0800cec5
 800ce80:	0800cec5 	.word	0x0800cec5
 800ce84:	0800cec5 	.word	0x0800cec5
 800ce88:	0800cec5 	.word	0x0800cec5
 800ce8c:	0800cec5 	.word	0x0800cec5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9a:	e222      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800ce9c:	2304      	movs	r3, #4
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cea2:	e21e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cea4:	2308      	movs	r3, #8
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceaa:	e21a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800ceac:	2310      	movs	r3, #16
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb2:	e216      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800ceb4:	2320      	movs	r3, #32
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceba:	e212      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cebc:	2340      	movs	r3, #64	; 0x40
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e20e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cec4:	2380      	movs	r3, #128	; 0x80
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e20a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a69      	ldr	r2, [pc, #420]	; (800d078 <UART_SetConfig+0x33c>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d130      	bne.n	800cf38 <UART_SetConfig+0x1fc>
 800ced6:	4b67      	ldr	r3, [pc, #412]	; (800d074 <UART_SetConfig+0x338>)
 800ced8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d826      	bhi.n	800cf30 <UART_SetConfig+0x1f4>
 800cee2:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <UART_SetConfig+0x1ac>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cf09 	.word	0x0800cf09
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf19 	.word	0x0800cf19
 800cef8:	0800cf21 	.word	0x0800cf21
 800cefc:	0800cf29 	.word	0x0800cf29
 800cf00:	2300      	movs	r3, #0
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e1ec      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0e:	e1e8      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf10:	2308      	movs	r3, #8
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf16:	e1e4      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e1e0      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf20:	2320      	movs	r3, #32
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e1dc      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf28:	2340      	movs	r3, #64	; 0x40
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2e:	e1d8      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf30:	2380      	movs	r3, #128	; 0x80
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf36:	e1d4      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a4f      	ldr	r2, [pc, #316]	; (800d07c <UART_SetConfig+0x340>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d130      	bne.n	800cfa4 <UART_SetConfig+0x268>
 800cf42:	4b4c      	ldr	r3, [pc, #304]	; (800d074 <UART_SetConfig+0x338>)
 800cf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d826      	bhi.n	800cf9c <UART_SetConfig+0x260>
 800cf4e:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <UART_SetConfig+0x218>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cf6d 	.word	0x0800cf6d
 800cf58:	0800cf75 	.word	0x0800cf75
 800cf5c:	0800cf7d 	.word	0x0800cf7d
 800cf60:	0800cf85 	.word	0x0800cf85
 800cf64:	0800cf8d 	.word	0x0800cf8d
 800cf68:	0800cf95 	.word	0x0800cf95
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf72:	e1b6      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf74:	2304      	movs	r3, #4
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7a:	e1b2      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf82:	e1ae      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf84:	2310      	movs	r3, #16
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e1aa      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e1a6      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf94:	2340      	movs	r3, #64	; 0x40
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e1a2      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cf9c:	2380      	movs	r3, #128	; 0x80
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e19e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a35      	ldr	r2, [pc, #212]	; (800d080 <UART_SetConfig+0x344>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d130      	bne.n	800d010 <UART_SetConfig+0x2d4>
 800cfae:	4b31      	ldr	r3, [pc, #196]	; (800d074 <UART_SetConfig+0x338>)
 800cfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	2b05      	cmp	r3, #5
 800cfb8:	d826      	bhi.n	800d008 <UART_SetConfig+0x2cc>
 800cfba:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <UART_SetConfig+0x284>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cfd9 	.word	0x0800cfd9
 800cfc4:	0800cfe1 	.word	0x0800cfe1
 800cfc8:	0800cfe9 	.word	0x0800cfe9
 800cfcc:	0800cff1 	.word	0x0800cff1
 800cfd0:	0800cff9 	.word	0x0800cff9
 800cfd4:	0800d001 	.word	0x0800d001
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfde:	e180      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cfe0:	2304      	movs	r3, #4
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe6:	e17c      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cfe8:	2308      	movs	r3, #8
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfee:	e178      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cff0:	2310      	movs	r3, #16
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e174      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800cff8:	2320      	movs	r3, #32
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e170      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e16c      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d008:	2380      	movs	r3, #128	; 0x80
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e168      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1b      	ldr	r2, [pc, #108]	; (800d084 <UART_SetConfig+0x348>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d142      	bne.n	800d0a0 <UART_SetConfig+0x364>
 800d01a:	4b16      	ldr	r3, [pc, #88]	; (800d074 <UART_SetConfig+0x338>)
 800d01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	2b05      	cmp	r3, #5
 800d024:	d838      	bhi.n	800d098 <UART_SetConfig+0x35c>
 800d026:	a201      	add	r2, pc, #4	; (adr r2, 800d02c <UART_SetConfig+0x2f0>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d045 	.word	0x0800d045
 800d030:	0800d04d 	.word	0x0800d04d
 800d034:	0800d055 	.word	0x0800d055
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d089 	.word	0x0800d089
 800d040:	0800d091 	.word	0x0800d091
 800d044:	2300      	movs	r3, #0
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e14a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d04c:	2304      	movs	r3, #4
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d052:	e146      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d054:	2308      	movs	r3, #8
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05a:	e142      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d05c:	2310      	movs	r3, #16
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d062:	e13e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d064:	cfff69f3 	.word	0xcfff69f3
 800d068:	58000c00 	.word	0x58000c00
 800d06c:	11fff4ff 	.word	0x11fff4ff
 800d070:	40011000 	.word	0x40011000
 800d074:	58024400 	.word	0x58024400
 800d078:	40004400 	.word	0x40004400
 800d07c:	40004800 	.word	0x40004800
 800d080:	40004c00 	.word	0x40004c00
 800d084:	40005000 	.word	0x40005000
 800d088:	2320      	movs	r3, #32
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08e:	e128      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d090:	2340      	movs	r3, #64	; 0x40
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d096:	e124      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d098:	2380      	movs	r3, #128	; 0x80
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d09e:	e120      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4acb      	ldr	r2, [pc, #812]	; (800d3d4 <UART_SetConfig+0x698>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d176      	bne.n	800d198 <UART_SetConfig+0x45c>
 800d0aa:	4bcb      	ldr	r3, [pc, #812]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0b2:	2b28      	cmp	r3, #40	; 0x28
 800d0b4:	d86c      	bhi.n	800d190 <UART_SetConfig+0x454>
 800d0b6:	a201      	add	r2, pc, #4	; (adr r2, 800d0bc <UART_SetConfig+0x380>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d161 	.word	0x0800d161
 800d0c0:	0800d191 	.word	0x0800d191
 800d0c4:	0800d191 	.word	0x0800d191
 800d0c8:	0800d191 	.word	0x0800d191
 800d0cc:	0800d191 	.word	0x0800d191
 800d0d0:	0800d191 	.word	0x0800d191
 800d0d4:	0800d191 	.word	0x0800d191
 800d0d8:	0800d191 	.word	0x0800d191
 800d0dc:	0800d169 	.word	0x0800d169
 800d0e0:	0800d191 	.word	0x0800d191
 800d0e4:	0800d191 	.word	0x0800d191
 800d0e8:	0800d191 	.word	0x0800d191
 800d0ec:	0800d191 	.word	0x0800d191
 800d0f0:	0800d191 	.word	0x0800d191
 800d0f4:	0800d191 	.word	0x0800d191
 800d0f8:	0800d191 	.word	0x0800d191
 800d0fc:	0800d171 	.word	0x0800d171
 800d100:	0800d191 	.word	0x0800d191
 800d104:	0800d191 	.word	0x0800d191
 800d108:	0800d191 	.word	0x0800d191
 800d10c:	0800d191 	.word	0x0800d191
 800d110:	0800d191 	.word	0x0800d191
 800d114:	0800d191 	.word	0x0800d191
 800d118:	0800d191 	.word	0x0800d191
 800d11c:	0800d179 	.word	0x0800d179
 800d120:	0800d191 	.word	0x0800d191
 800d124:	0800d191 	.word	0x0800d191
 800d128:	0800d191 	.word	0x0800d191
 800d12c:	0800d191 	.word	0x0800d191
 800d130:	0800d191 	.word	0x0800d191
 800d134:	0800d191 	.word	0x0800d191
 800d138:	0800d191 	.word	0x0800d191
 800d13c:	0800d181 	.word	0x0800d181
 800d140:	0800d191 	.word	0x0800d191
 800d144:	0800d191 	.word	0x0800d191
 800d148:	0800d191 	.word	0x0800d191
 800d14c:	0800d191 	.word	0x0800d191
 800d150:	0800d191 	.word	0x0800d191
 800d154:	0800d191 	.word	0x0800d191
 800d158:	0800d191 	.word	0x0800d191
 800d15c:	0800d189 	.word	0x0800d189
 800d160:	2301      	movs	r3, #1
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d166:	e0bc      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d168:	2304      	movs	r3, #4
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16e:	e0b8      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d170:	2308      	movs	r3, #8
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d176:	e0b4      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d178:	2310      	movs	r3, #16
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e0b0      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d180:	2320      	movs	r3, #32
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e0ac      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e0a8      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d190:	2380      	movs	r3, #128	; 0x80
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e0a4      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a8f      	ldr	r2, [pc, #572]	; (800d3dc <UART_SetConfig+0x6a0>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d130      	bne.n	800d204 <UART_SetConfig+0x4c8>
 800d1a2:	4b8d      	ldr	r3, [pc, #564]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b05      	cmp	r3, #5
 800d1ac:	d826      	bhi.n	800d1fc <UART_SetConfig+0x4c0>
 800d1ae:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <UART_SetConfig+0x478>)
 800d1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b4:	0800d1cd 	.word	0x0800d1cd
 800d1b8:	0800d1d5 	.word	0x0800d1d5
 800d1bc:	0800d1dd 	.word	0x0800d1dd
 800d1c0:	0800d1e5 	.word	0x0800d1e5
 800d1c4:	0800d1ed 	.word	0x0800d1ed
 800d1c8:	0800d1f5 	.word	0x0800d1f5
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e086      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e082      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1dc:	2308      	movs	r3, #8
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e07e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e07a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e076      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1f4:	2340      	movs	r3, #64	; 0x40
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e072      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d1fc:	2380      	movs	r3, #128	; 0x80
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e06e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a75      	ldr	r2, [pc, #468]	; (800d3e0 <UART_SetConfig+0x6a4>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d130      	bne.n	800d270 <UART_SetConfig+0x534>
 800d20e:	4b72      	ldr	r3, [pc, #456]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b05      	cmp	r3, #5
 800d218:	d826      	bhi.n	800d268 <UART_SetConfig+0x52c>
 800d21a:	a201      	add	r2, pc, #4	; (adr r2, 800d220 <UART_SetConfig+0x4e4>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d239 	.word	0x0800d239
 800d224:	0800d241 	.word	0x0800d241
 800d228:	0800d249 	.word	0x0800d249
 800d22c:	0800d251 	.word	0x0800d251
 800d230:	0800d259 	.word	0x0800d259
 800d234:	0800d261 	.word	0x0800d261
 800d238:	2300      	movs	r3, #0
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e050      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d240:	2304      	movs	r3, #4
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e04c      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d248:	2308      	movs	r3, #8
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e048      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d250:	2310      	movs	r3, #16
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e044      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d258:	2320      	movs	r3, #32
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e040      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e03c      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d268:	2380      	movs	r3, #128	; 0x80
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e038      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a5b      	ldr	r2, [pc, #364]	; (800d3e4 <UART_SetConfig+0x6a8>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d130      	bne.n	800d2dc <UART_SetConfig+0x5a0>
 800d27a:	4b57      	ldr	r3, [pc, #348]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d27e:	f003 0307 	and.w	r3, r3, #7
 800d282:	2b05      	cmp	r3, #5
 800d284:	d826      	bhi.n	800d2d4 <UART_SetConfig+0x598>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <UART_SetConfig+0x550>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2a5 	.word	0x0800d2a5
 800d290:	0800d2ad 	.word	0x0800d2ad
 800d294:	0800d2b5 	.word	0x0800d2b5
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2c5 	.word	0x0800d2c5
 800d2a0:	0800d2cd 	.word	0x0800d2cd
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2aa:	e01a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2ac:	2304      	movs	r3, #4
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b2:	e016      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e012      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2bc:	2310      	movs	r3, #16
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e00e      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e00a      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2cc:	2340      	movs	r3, #64	; 0x40
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e006      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2d4:	2380      	movs	r3, #128	; 0x80
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2da:	e002      	b.n	800d2e2 <UART_SetConfig+0x5a6>
 800d2dc:	2380      	movs	r3, #128	; 0x80
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a3f      	ldr	r2, [pc, #252]	; (800d3e4 <UART_SetConfig+0x6a8>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	f040 80f8 	bne.w	800d4de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	dc46      	bgt.n	800d384 <UART_SetConfig+0x648>
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	f2c0 8082 	blt.w	800d400 <UART_SetConfig+0x6c4>
 800d2fc:	3b02      	subs	r3, #2
 800d2fe:	2b1e      	cmp	r3, #30
 800d300:	d87e      	bhi.n	800d400 <UART_SetConfig+0x6c4>
 800d302:	a201      	add	r2, pc, #4	; (adr r2, 800d308 <UART_SetConfig+0x5cc>)
 800d304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d308:	0800d38b 	.word	0x0800d38b
 800d30c:	0800d401 	.word	0x0800d401
 800d310:	0800d393 	.word	0x0800d393
 800d314:	0800d401 	.word	0x0800d401
 800d318:	0800d401 	.word	0x0800d401
 800d31c:	0800d401 	.word	0x0800d401
 800d320:	0800d3a3 	.word	0x0800d3a3
 800d324:	0800d401 	.word	0x0800d401
 800d328:	0800d401 	.word	0x0800d401
 800d32c:	0800d401 	.word	0x0800d401
 800d330:	0800d401 	.word	0x0800d401
 800d334:	0800d401 	.word	0x0800d401
 800d338:	0800d401 	.word	0x0800d401
 800d33c:	0800d401 	.word	0x0800d401
 800d340:	0800d3b3 	.word	0x0800d3b3
 800d344:	0800d401 	.word	0x0800d401
 800d348:	0800d401 	.word	0x0800d401
 800d34c:	0800d401 	.word	0x0800d401
 800d350:	0800d401 	.word	0x0800d401
 800d354:	0800d401 	.word	0x0800d401
 800d358:	0800d401 	.word	0x0800d401
 800d35c:	0800d401 	.word	0x0800d401
 800d360:	0800d401 	.word	0x0800d401
 800d364:	0800d401 	.word	0x0800d401
 800d368:	0800d401 	.word	0x0800d401
 800d36c:	0800d401 	.word	0x0800d401
 800d370:	0800d401 	.word	0x0800d401
 800d374:	0800d401 	.word	0x0800d401
 800d378:	0800d401 	.word	0x0800d401
 800d37c:	0800d401 	.word	0x0800d401
 800d380:	0800d3f3 	.word	0x0800d3f3
 800d384:	2b40      	cmp	r3, #64	; 0x40
 800d386:	d037      	beq.n	800d3f8 <UART_SetConfig+0x6bc>
 800d388:	e03a      	b.n	800d400 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d38a:	f7fd fbab 	bl	800aae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d38e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d390:	e03c      	b.n	800d40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd fbba 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a0:	e034      	b.n	800d40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3a2:	f107 0318 	add.w	r3, r7, #24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fd fd06 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b0:	e02c      	b.n	800d40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3b2:	4b09      	ldr	r3, [pc, #36]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d016      	beq.n	800d3ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <UART_SetConfig+0x69c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	08db      	lsrs	r3, r3, #3
 800d3c4:	f003 0303 	and.w	r3, r3, #3
 800d3c8:	4a07      	ldr	r2, [pc, #28]	; (800d3e8 <UART_SetConfig+0x6ac>)
 800d3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3d0:	e01c      	b.n	800d40c <UART_SetConfig+0x6d0>
 800d3d2:	bf00      	nop
 800d3d4:	40011400 	.word	0x40011400
 800d3d8:	58024400 	.word	0x58024400
 800d3dc:	40007800 	.word	0x40007800
 800d3e0:	40007c00 	.word	0x40007c00
 800d3e4:	58000c00 	.word	0x58000c00
 800d3e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d3ec:	4b9d      	ldr	r3, [pc, #628]	; (800d664 <UART_SetConfig+0x928>)
 800d3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3f0:	e00c      	b.n	800d40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3f2:	4b9d      	ldr	r3, [pc, #628]	; (800d668 <UART_SetConfig+0x92c>)
 800d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3f6:	e009      	b.n	800d40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fe:	e005      	b.n	800d40c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d400:	2300      	movs	r3, #0
 800d402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d40a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 81de 	beq.w	800d7d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d418:	4a94      	ldr	r2, [pc, #592]	; (800d66c <UART_SetConfig+0x930>)
 800d41a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d41e:	461a      	mov	r2, r3
 800d420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d422:	fbb3 f3f2 	udiv	r3, r3, r2
 800d426:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	4613      	mov	r3, r2
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d434:	429a      	cmp	r2, r3
 800d436:	d305      	bcc.n	800d444 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d440:	429a      	cmp	r2, r3
 800d442:	d903      	bls.n	800d44c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d44a:	e1c1      	b.n	800d7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44e:	2200      	movs	r2, #0
 800d450:	60bb      	str	r3, [r7, #8]
 800d452:	60fa      	str	r2, [r7, #12]
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d458:	4a84      	ldr	r2, [pc, #528]	; (800d66c <UART_SetConfig+0x930>)
 800d45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	2200      	movs	r2, #0
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d46a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d46e:	f7f2 ff8f 	bl	8000390 <__aeabi_uldivmod>
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	4610      	mov	r0, r2
 800d478:	4619      	mov	r1, r3
 800d47a:	f04f 0200 	mov.w	r2, #0
 800d47e:	f04f 0300 	mov.w	r3, #0
 800d482:	020b      	lsls	r3, r1, #8
 800d484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d488:	0202      	lsls	r2, r0, #8
 800d48a:	6979      	ldr	r1, [r7, #20]
 800d48c:	6849      	ldr	r1, [r1, #4]
 800d48e:	0849      	lsrs	r1, r1, #1
 800d490:	2000      	movs	r0, #0
 800d492:	460c      	mov	r4, r1
 800d494:	4605      	mov	r5, r0
 800d496:	eb12 0804 	adds.w	r8, r2, r4
 800d49a:	eb43 0905 	adc.w	r9, r3, r5
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	469a      	mov	sl, r3
 800d4a6:	4693      	mov	fp, r2
 800d4a8:	4652      	mov	r2, sl
 800d4aa:	465b      	mov	r3, fp
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	4649      	mov	r1, r9
 800d4b0:	f7f2 ff6e 	bl	8000390 <__aeabi_uldivmod>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4c2:	d308      	bcc.n	800d4d6 <UART_SetConfig+0x79a>
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ca:	d204      	bcs.n	800d4d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4d2:	60da      	str	r2, [r3, #12]
 800d4d4:	e17c      	b.n	800d7d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4dc:	e178      	b.n	800d7d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4e6:	f040 80c5 	bne.w	800d674 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d4ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4ee:	2b20      	cmp	r3, #32
 800d4f0:	dc48      	bgt.n	800d584 <UART_SetConfig+0x848>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	db7b      	blt.n	800d5ee <UART_SetConfig+0x8b2>
 800d4f6:	2b20      	cmp	r3, #32
 800d4f8:	d879      	bhi.n	800d5ee <UART_SetConfig+0x8b2>
 800d4fa:	a201      	add	r2, pc, #4	; (adr r2, 800d500 <UART_SetConfig+0x7c4>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d58b 	.word	0x0800d58b
 800d504:	0800d593 	.word	0x0800d593
 800d508:	0800d5ef 	.word	0x0800d5ef
 800d50c:	0800d5ef 	.word	0x0800d5ef
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d5ef 	.word	0x0800d5ef
 800d518:	0800d5ef 	.word	0x0800d5ef
 800d51c:	0800d5ef 	.word	0x0800d5ef
 800d520:	0800d5ab 	.word	0x0800d5ab
 800d524:	0800d5ef 	.word	0x0800d5ef
 800d528:	0800d5ef 	.word	0x0800d5ef
 800d52c:	0800d5ef 	.word	0x0800d5ef
 800d530:	0800d5ef 	.word	0x0800d5ef
 800d534:	0800d5ef 	.word	0x0800d5ef
 800d538:	0800d5ef 	.word	0x0800d5ef
 800d53c:	0800d5ef 	.word	0x0800d5ef
 800d540:	0800d5bb 	.word	0x0800d5bb
 800d544:	0800d5ef 	.word	0x0800d5ef
 800d548:	0800d5ef 	.word	0x0800d5ef
 800d54c:	0800d5ef 	.word	0x0800d5ef
 800d550:	0800d5ef 	.word	0x0800d5ef
 800d554:	0800d5ef 	.word	0x0800d5ef
 800d558:	0800d5ef 	.word	0x0800d5ef
 800d55c:	0800d5ef 	.word	0x0800d5ef
 800d560:	0800d5ef 	.word	0x0800d5ef
 800d564:	0800d5ef 	.word	0x0800d5ef
 800d568:	0800d5ef 	.word	0x0800d5ef
 800d56c:	0800d5ef 	.word	0x0800d5ef
 800d570:	0800d5ef 	.word	0x0800d5ef
 800d574:	0800d5ef 	.word	0x0800d5ef
 800d578:	0800d5ef 	.word	0x0800d5ef
 800d57c:	0800d5ef 	.word	0x0800d5ef
 800d580:	0800d5e1 	.word	0x0800d5e1
 800d584:	2b40      	cmp	r3, #64	; 0x40
 800d586:	d02e      	beq.n	800d5e6 <UART_SetConfig+0x8aa>
 800d588:	e031      	b.n	800d5ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d58a:	f7fb fe25 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800d58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d590:	e033      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d592:	f7fb fe37 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 800d596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d598:	e02f      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fd fab6 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a8:	e027      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5aa:	f107 0318 	add.w	r3, r7, #24
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fd fc02 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5b8:	e01f      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5ba:	4b2d      	ldr	r3, [pc, #180]	; (800d670 <UART_SetConfig+0x934>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 0320 	and.w	r3, r3, #32
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d009      	beq.n	800d5da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5c6:	4b2a      	ldr	r3, [pc, #168]	; (800d670 <UART_SetConfig+0x934>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	08db      	lsrs	r3, r3, #3
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	4a24      	ldr	r2, [pc, #144]	; (800d664 <UART_SetConfig+0x928>)
 800d5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5d8:	e00f      	b.n	800d5fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5da:	4b22      	ldr	r3, [pc, #136]	; (800d664 <UART_SetConfig+0x928>)
 800d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5de:	e00c      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5e0:	4b21      	ldr	r3, [pc, #132]	; (800d668 <UART_SetConfig+0x92c>)
 800d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5e4:	e009      	b.n	800d5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ec:	e005      	b.n	800d5fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 80e7 	beq.w	800d7d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	4a19      	ldr	r2, [pc, #100]	; (800d66c <UART_SetConfig+0x930>)
 800d608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d60c:	461a      	mov	r2, r3
 800d60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d610:	fbb3 f3f2 	udiv	r3, r3, r2
 800d614:	005a      	lsls	r2, r3, #1
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	085b      	lsrs	r3, r3, #1
 800d61c:	441a      	add	r2, r3
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	fbb2 f3f3 	udiv	r3, r2, r3
 800d626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	2b0f      	cmp	r3, #15
 800d62c:	d916      	bls.n	800d65c <UART_SetConfig+0x920>
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d634:	d212      	bcs.n	800d65c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	b29b      	uxth	r3, r3
 800d63a:	f023 030f 	bic.w	r3, r3, #15
 800d63e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	085b      	lsrs	r3, r3, #1
 800d644:	b29b      	uxth	r3, r3
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d64e:	4313      	orrs	r3, r2
 800d650:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d658:	60da      	str	r2, [r3, #12]
 800d65a:	e0b9      	b.n	800d7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d662:	e0b5      	b.n	800d7d0 <UART_SetConfig+0xa94>
 800d664:	03d09000 	.word	0x03d09000
 800d668:	003d0900 	.word	0x003d0900
 800d66c:	08012190 	.word	0x08012190
 800d670:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d678:	2b20      	cmp	r3, #32
 800d67a:	dc49      	bgt.n	800d710 <UART_SetConfig+0x9d4>
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	db7c      	blt.n	800d77a <UART_SetConfig+0xa3e>
 800d680:	2b20      	cmp	r3, #32
 800d682:	d87a      	bhi.n	800d77a <UART_SetConfig+0xa3e>
 800d684:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <UART_SetConfig+0x950>)
 800d686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68a:	bf00      	nop
 800d68c:	0800d717 	.word	0x0800d717
 800d690:	0800d71f 	.word	0x0800d71f
 800d694:	0800d77b 	.word	0x0800d77b
 800d698:	0800d77b 	.word	0x0800d77b
 800d69c:	0800d727 	.word	0x0800d727
 800d6a0:	0800d77b 	.word	0x0800d77b
 800d6a4:	0800d77b 	.word	0x0800d77b
 800d6a8:	0800d77b 	.word	0x0800d77b
 800d6ac:	0800d737 	.word	0x0800d737
 800d6b0:	0800d77b 	.word	0x0800d77b
 800d6b4:	0800d77b 	.word	0x0800d77b
 800d6b8:	0800d77b 	.word	0x0800d77b
 800d6bc:	0800d77b 	.word	0x0800d77b
 800d6c0:	0800d77b 	.word	0x0800d77b
 800d6c4:	0800d77b 	.word	0x0800d77b
 800d6c8:	0800d77b 	.word	0x0800d77b
 800d6cc:	0800d747 	.word	0x0800d747
 800d6d0:	0800d77b 	.word	0x0800d77b
 800d6d4:	0800d77b 	.word	0x0800d77b
 800d6d8:	0800d77b 	.word	0x0800d77b
 800d6dc:	0800d77b 	.word	0x0800d77b
 800d6e0:	0800d77b 	.word	0x0800d77b
 800d6e4:	0800d77b 	.word	0x0800d77b
 800d6e8:	0800d77b 	.word	0x0800d77b
 800d6ec:	0800d77b 	.word	0x0800d77b
 800d6f0:	0800d77b 	.word	0x0800d77b
 800d6f4:	0800d77b 	.word	0x0800d77b
 800d6f8:	0800d77b 	.word	0x0800d77b
 800d6fc:	0800d77b 	.word	0x0800d77b
 800d700:	0800d77b 	.word	0x0800d77b
 800d704:	0800d77b 	.word	0x0800d77b
 800d708:	0800d77b 	.word	0x0800d77b
 800d70c:	0800d76d 	.word	0x0800d76d
 800d710:	2b40      	cmp	r3, #64	; 0x40
 800d712:	d02e      	beq.n	800d772 <UART_SetConfig+0xa36>
 800d714:	e031      	b.n	800d77a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d716:	f7fb fd5f 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800d71a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d71c:	e033      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d71e:	f7fb fd71 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 800d722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d724:	e02f      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd f9f0 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d734:	e027      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d736:	f107 0318 	add.w	r3, r7, #24
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fd fb3c 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d744:	e01f      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d746:	4b2d      	ldr	r3, [pc, #180]	; (800d7fc <UART_SetConfig+0xac0>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0320 	and.w	r3, r3, #32
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d009      	beq.n	800d766 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d752:	4b2a      	ldr	r3, [pc, #168]	; (800d7fc <UART_SetConfig+0xac0>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	08db      	lsrs	r3, r3, #3
 800d758:	f003 0303 	and.w	r3, r3, #3
 800d75c:	4a28      	ldr	r2, [pc, #160]	; (800d800 <UART_SetConfig+0xac4>)
 800d75e:	fa22 f303 	lsr.w	r3, r2, r3
 800d762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d764:	e00f      	b.n	800d786 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d766:	4b26      	ldr	r3, [pc, #152]	; (800d800 <UART_SetConfig+0xac4>)
 800d768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d76a:	e00c      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d76c:	4b25      	ldr	r3, [pc, #148]	; (800d804 <UART_SetConfig+0xac8>)
 800d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d770:	e009      	b.n	800d786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d778:	e005      	b.n	800d786 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d77a:	2300      	movs	r3, #0
 800d77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d784:	bf00      	nop
    }

    if (pclk != 0U)
 800d786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d021      	beq.n	800d7d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	4a1d      	ldr	r2, [pc, #116]	; (800d808 <UART_SetConfig+0xacc>)
 800d792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d796:	461a      	mov	r2, r3
 800d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	085b      	lsrs	r3, r3, #1
 800d7a4:	441a      	add	r2, r3
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	2b0f      	cmp	r3, #15
 800d7b4:	d909      	bls.n	800d7ca <UART_SetConfig+0xa8e>
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7bc:	d205      	bcs.n	800d7ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60da      	str	r2, [r3, #12]
 800d7c8:	e002      	b.n	800d7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d7ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3748      	adds	r7, #72	; 0x48
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7fa:	bf00      	nop
 800d7fc:	58024400 	.word	0x58024400
 800d800:	03d09000 	.word	0x03d09000
 800d804:	003d0900 	.word	0x003d0900
 800d808:	08012190 	.word	0x08012190

0800d80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00a      	beq.n	800d836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	430a      	orrs	r2, r1
 800d834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d83a:	f003 0302 	and.w	r3, r3, #2
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	430a      	orrs	r2, r1
 800d856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00a      	beq.n	800d87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	430a      	orrs	r2, r1
 800d878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87e:	f003 0308 	and.w	r3, r3, #8
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00a      	beq.n	800d89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	430a      	orrs	r2, r1
 800d89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a0:	f003 0310 	and.w	r3, r3, #16
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00a      	beq.n	800d8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c2:	f003 0320 	and.w	r3, r3, #32
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01a      	beq.n	800d922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	430a      	orrs	r2, r1
 800d900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d90a:	d10a      	bne.n	800d922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	430a      	orrs	r2, r1
 800d942:	605a      	str	r2, [r3, #4]
  }
}
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af02      	add	r7, sp, #8
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d960:	f7f6 f8bc 	bl	8003adc <HAL_GetTick>
 800d964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f003 0308 	and.w	r3, r3, #8
 800d970:	2b08      	cmp	r3, #8
 800d972:	d10e      	bne.n	800d992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f82f 	bl	800d9e6 <UART_WaitOnFlagUntilTimeout>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d001      	beq.n	800d992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d98e:	2303      	movs	r3, #3
 800d990:	e025      	b.n	800d9de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	d10e      	bne.n	800d9be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f819 	bl	800d9e6 <UART_WaitOnFlagUntilTimeout>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e00f      	b.n	800d9de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b09c      	sub	sp, #112	; 0x70
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	60f8      	str	r0, [r7, #12]
 800d9ee:	60b9      	str	r1, [r7, #8]
 800d9f0:	603b      	str	r3, [r7, #0]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9f6:	e0a9      	b.n	800db4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9fe:	f000 80a5 	beq.w	800db4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da02:	f7f6 f86b 	bl	8003adc <HAL_GetTick>
 800da06:	4602      	mov	r2, r0
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da0e:	429a      	cmp	r2, r3
 800da10:	d302      	bcc.n	800da18 <UART_WaitOnFlagUntilTimeout+0x32>
 800da12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da14:	2b00      	cmp	r3, #0
 800da16:	d140      	bne.n	800da9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da20:	e853 3f00 	ldrex	r3, [r3]
 800da24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800da26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da2c:	667b      	str	r3, [r7, #100]	; 0x64
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800da44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e6      	bne.n	800da18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3308      	adds	r3, #8
 800da50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da54:	e853 3f00 	ldrex	r3, [r3]
 800da58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5c:	f023 0301 	bic.w	r3, r3, #1
 800da60:	663b      	str	r3, [r7, #96]	; 0x60
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3308      	adds	r3, #8
 800da68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da6a:	64ba      	str	r2, [r7, #72]	; 0x48
 800da6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da72:	e841 2300 	strex	r3, r2, [r1]
 800da76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1e5      	bne.n	800da4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2220      	movs	r2, #32
 800da82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e069      	b.n	800db6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d051      	beq.n	800db4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	69db      	ldr	r3, [r3, #28]
 800daae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dab6:	d149      	bne.n	800db4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dac0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	e853 3f00 	ldrex	r3, [r3]
 800dace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	461a      	mov	r2, r3
 800dade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae0:	637b      	str	r3, [r7, #52]	; 0x34
 800dae2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae8:	e841 2300 	strex	r3, r2, [r1]
 800daec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1e6      	bne.n	800dac2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3308      	adds	r3, #8
 800dafa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	e853 3f00 	ldrex	r3, [r3]
 800db02:	613b      	str	r3, [r7, #16]
   return(result);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	f023 0301 	bic.w	r3, r3, #1
 800db0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3308      	adds	r3, #8
 800db12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db14:	623a      	str	r2, [r7, #32]
 800db16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db18:	69f9      	ldr	r1, [r7, #28]
 800db1a:	6a3a      	ldr	r2, [r7, #32]
 800db1c:	e841 2300 	strex	r3, r2, [r1]
 800db20:	61bb      	str	r3, [r7, #24]
   return(result);
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1e5      	bne.n	800daf4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2220      	movs	r2, #32
 800db2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2220      	movs	r2, #32
 800db34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2220      	movs	r2, #32
 800db3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db48:	2303      	movs	r3, #3
 800db4a:	e010      	b.n	800db6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	69da      	ldr	r2, [r3, #28]
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	4013      	ands	r3, r2
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	429a      	cmp	r2, r3
 800db5a:	bf0c      	ite	eq
 800db5c:	2301      	moveq	r3, #1
 800db5e:	2300      	movne	r3, #0
 800db60:	b2db      	uxtb	r3, r3
 800db62:	461a      	mov	r2, r3
 800db64:	79fb      	ldrb	r3, [r7, #7]
 800db66:	429a      	cmp	r2, r3
 800db68:	f43f af46 	beq.w	800d9f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3770      	adds	r7, #112	; 0x70
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db76:	b480      	push	{r7}
 800db78:	b085      	sub	sp, #20
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db84:	2b01      	cmp	r3, #1
 800db86:	d101      	bne.n	800db8c <HAL_UARTEx_DisableFifoMode+0x16>
 800db88:	2302      	movs	r3, #2
 800db8a:	e027      	b.n	800dbdc <HAL_UARTEx_DisableFifoMode+0x66>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2224      	movs	r2, #36	; 0x24
 800db98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f022 0201 	bic.w	r2, r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2220      	movs	r2, #32
 800dbce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d101      	bne.n	800dc00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	e02d      	b.n	800dc5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2224      	movs	r2, #36	; 0x24
 800dc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0201 	bic.w	r2, r2, #1
 800dc26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	430a      	orrs	r2, r1
 800dc3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f84f 	bl	800dce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e02d      	b.n	800dcd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2224      	movs	r2, #36	; 0x24
 800dc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 0201 	bic.w	r2, r2, #1
 800dca2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f811 	bl	800dce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d108      	bne.n	800dd02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd00:	e031      	b.n	800dd66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd02:	2310      	movs	r3, #16
 800dd04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd06:	2310      	movs	r3, #16
 800dd08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	0e5b      	lsrs	r3, r3, #25
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f003 0307 	and.w	r3, r3, #7
 800dd18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	0f5b      	lsrs	r3, r3, #29
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	f003 0307 	and.w	r3, r3, #7
 800dd28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
 800dd2c:	7b3a      	ldrb	r2, [r7, #12]
 800dd2e:	4911      	ldr	r1, [pc, #68]	; (800dd74 <UARTEx_SetNbDataToProcess+0x94>)
 800dd30:	5c8a      	ldrb	r2, [r1, r2]
 800dd32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd36:	7b3a      	ldrb	r2, [r7, #12]
 800dd38:	490f      	ldr	r1, [pc, #60]	; (800dd78 <UARTEx_SetNbDataToProcess+0x98>)
 800dd3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
 800dd4a:	7b7a      	ldrb	r2, [r7, #13]
 800dd4c:	4909      	ldr	r1, [pc, #36]	; (800dd74 <UARTEx_SetNbDataToProcess+0x94>)
 800dd4e:	5c8a      	ldrb	r2, [r1, r2]
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd54:	7b7a      	ldrb	r2, [r7, #13]
 800dd56:	4908      	ldr	r1, [pc, #32]	; (800dd78 <UARTEx_SetNbDataToProcess+0x98>)
 800dd58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	080121a8 	.word	0x080121a8
 800dd78:	080121b0 	.word	0x080121b0

0800dd7c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d101      	bne.n	800dd8e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e03c      	b.n	800de08 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d106      	bne.n	800dda8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7f4 fc5a 	bl	800265c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2202      	movs	r2, #2
 800ddac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0201 	bic.w	r2, r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 f85b 	bl	800de7c <USART_SetConfig>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d101      	bne.n	800ddd0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e01b      	b.n	800de08 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ddde:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	689a      	ldr	r2, [r3, #8]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddee:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f042 0201 	orr.w	r2, r2, #1
 800ddfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fd5b 	bl	800e8bc <USART_CheckIdleState>
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	603b      	str	r3, [r7, #0]
 800de1c:	4613      	mov	r3, r2
 800de1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800de20:	e018      	b.n	800de54 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de28:	d014      	beq.n	800de54 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de2a:	f7f5 fe57 	bl	8003adc <HAL_GetTick>
 800de2e:	4602      	mov	r2, r0
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	69ba      	ldr	r2, [r7, #24]
 800de36:	429a      	cmp	r2, r3
 800de38:	d302      	bcc.n	800de40 <USART_WaitOnFlagUntilTimeout+0x30>
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d109      	bne.n	800de54 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800de50:	2303      	movs	r3, #3
 800de52:	e00f      	b.n	800de74 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	69da      	ldr	r2, [r3, #28]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4013      	ands	r3, r2
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	429a      	cmp	r2, r3
 800de62:	bf0c      	ite	eq
 800de64:	2301      	moveq	r3, #1
 800de66:	2300      	movne	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	79fb      	ldrb	r3, [r7, #7]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d0d7      	beq.n	800de22 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08e      	sub	sp, #56	; 0x38
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800de8a:	2300      	movs	r3, #0
 800de8c:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	431a      	orrs	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	4bc9      	ldr	r3, [pc, #804]	; (800e1d0 <USART_SetConfig+0x354>)
 800deac:	4013      	ands	r3, r2
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	6812      	ldr	r2, [r2, #0]
 800deb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deb4:	430b      	orrs	r3, r1
 800deb6:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800deb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800debc:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a1b      	ldr	r3, [r3, #32]
 800dec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dec4:	4313      	orrs	r3, r2
 800dec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	699a      	ldr	r2, [r3, #24]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ded4:	4313      	orrs	r3, r2
 800ded6:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dede:	4313      	orrs	r3, r2
 800dee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	4bba      	ldr	r3, [pc, #744]	; (800e1d4 <USART_SetConfig+0x358>)
 800deea:	4013      	ands	r3, r2
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	6812      	ldr	r2, [r2, #0]
 800def0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800def2:	430b      	orrs	r3, r1
 800def4:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	f023 010f 	bic.w	r1, r3, #15
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	430a      	orrs	r2, r1
 800df0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4ab1      	ldr	r2, [pc, #708]	; (800e1d8 <USART_SetConfig+0x35c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d176      	bne.n	800e004 <USART_SetConfig+0x188>
 800df16:	4bb1      	ldr	r3, [pc, #708]	; (800e1dc <USART_SetConfig+0x360>)
 800df18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df1e:	2b28      	cmp	r3, #40	; 0x28
 800df20:	d86c      	bhi.n	800dffc <USART_SetConfig+0x180>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <USART_SetConfig+0xac>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800dfcd 	.word	0x0800dfcd
 800df2c:	0800dffd 	.word	0x0800dffd
 800df30:	0800dffd 	.word	0x0800dffd
 800df34:	0800dffd 	.word	0x0800dffd
 800df38:	0800dffd 	.word	0x0800dffd
 800df3c:	0800dffd 	.word	0x0800dffd
 800df40:	0800dffd 	.word	0x0800dffd
 800df44:	0800dffd 	.word	0x0800dffd
 800df48:	0800dfd5 	.word	0x0800dfd5
 800df4c:	0800dffd 	.word	0x0800dffd
 800df50:	0800dffd 	.word	0x0800dffd
 800df54:	0800dffd 	.word	0x0800dffd
 800df58:	0800dffd 	.word	0x0800dffd
 800df5c:	0800dffd 	.word	0x0800dffd
 800df60:	0800dffd 	.word	0x0800dffd
 800df64:	0800dffd 	.word	0x0800dffd
 800df68:	0800dfdd 	.word	0x0800dfdd
 800df6c:	0800dffd 	.word	0x0800dffd
 800df70:	0800dffd 	.word	0x0800dffd
 800df74:	0800dffd 	.word	0x0800dffd
 800df78:	0800dffd 	.word	0x0800dffd
 800df7c:	0800dffd 	.word	0x0800dffd
 800df80:	0800dffd 	.word	0x0800dffd
 800df84:	0800dffd 	.word	0x0800dffd
 800df88:	0800dfe5 	.word	0x0800dfe5
 800df8c:	0800dffd 	.word	0x0800dffd
 800df90:	0800dffd 	.word	0x0800dffd
 800df94:	0800dffd 	.word	0x0800dffd
 800df98:	0800dffd 	.word	0x0800dffd
 800df9c:	0800dffd 	.word	0x0800dffd
 800dfa0:	0800dffd 	.word	0x0800dffd
 800dfa4:	0800dffd 	.word	0x0800dffd
 800dfa8:	0800dfed 	.word	0x0800dfed
 800dfac:	0800dffd 	.word	0x0800dffd
 800dfb0:	0800dffd 	.word	0x0800dffd
 800dfb4:	0800dffd 	.word	0x0800dffd
 800dfb8:	0800dffd 	.word	0x0800dffd
 800dfbc:	0800dffd 	.word	0x0800dffd
 800dfc0:	0800dffd 	.word	0x0800dffd
 800dfc4:	0800dffd 	.word	0x0800dffd
 800dfc8:	0800dff5 	.word	0x0800dff5
 800dfcc:	2301      	movs	r3, #1
 800dfce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dfd2:	e112      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dfda:	e10e      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dfdc:	2304      	movs	r3, #4
 800dfde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dfe2:	e10a      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dfea:	e106      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dfec:	2310      	movs	r3, #16
 800dfee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dff2:	e102      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dff4:	2320      	movs	r3, #32
 800dff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dffa:	e0fe      	b.n	800e1fa <USART_SetConfig+0x37e>
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e002:	e0fa      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a75      	ldr	r2, [pc, #468]	; (800e1e0 <USART_SetConfig+0x364>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d130      	bne.n	800e070 <USART_SetConfig+0x1f4>
 800e00e:	4b73      	ldr	r3, [pc, #460]	; (800e1dc <USART_SetConfig+0x360>)
 800e010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	2b05      	cmp	r3, #5
 800e018:	d826      	bhi.n	800e068 <USART_SetConfig+0x1ec>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <USART_SetConfig+0x1a4>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e039 	.word	0x0800e039
 800e024:	0800e041 	.word	0x0800e041
 800e028:	0800e049 	.word	0x0800e049
 800e02c:	0800e051 	.word	0x0800e051
 800e030:	0800e059 	.word	0x0800e059
 800e034:	0800e061 	.word	0x0800e061
 800e038:	2300      	movs	r3, #0
 800e03a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e03e:	e0dc      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e040:	2302      	movs	r3, #2
 800e042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e046:	e0d8      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e048:	2304      	movs	r3, #4
 800e04a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e04e:	e0d4      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e050:	2308      	movs	r3, #8
 800e052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e056:	e0d0      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e058:	2310      	movs	r3, #16
 800e05a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e05e:	e0cc      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e060:	2320      	movs	r3, #32
 800e062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e066:	e0c8      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e068:	2340      	movs	r3, #64	; 0x40
 800e06a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e06e:	e0c4      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a5b      	ldr	r2, [pc, #364]	; (800e1e4 <USART_SetConfig+0x368>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d130      	bne.n	800e0dc <USART_SetConfig+0x260>
 800e07a:	4b58      	ldr	r3, [pc, #352]	; (800e1dc <USART_SetConfig+0x360>)
 800e07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07e:	f003 0307 	and.w	r3, r3, #7
 800e082:	2b05      	cmp	r3, #5
 800e084:	d826      	bhi.n	800e0d4 <USART_SetConfig+0x258>
 800e086:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <USART_SetConfig+0x210>)
 800e088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08c:	0800e0a5 	.word	0x0800e0a5
 800e090:	0800e0ad 	.word	0x0800e0ad
 800e094:	0800e0b5 	.word	0x0800e0b5
 800e098:	0800e0bd 	.word	0x0800e0bd
 800e09c:	0800e0c5 	.word	0x0800e0c5
 800e0a0:	0800e0cd 	.word	0x0800e0cd
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0aa:	e0a6      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0ac:	2302      	movs	r3, #2
 800e0ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0b2:	e0a2      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0ba:	e09e      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0bc:	2308      	movs	r3, #8
 800e0be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0c2:	e09a      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0c4:	2310      	movs	r3, #16
 800e0c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0ca:	e096      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0cc:	2320      	movs	r3, #32
 800e0ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0d2:	e092      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0d4:	2340      	movs	r3, #64	; 0x40
 800e0d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0da:	e08e      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a41      	ldr	r2, [pc, #260]	; (800e1e8 <USART_SetConfig+0x36c>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	f040 8086 	bne.w	800e1f4 <USART_SetConfig+0x378>
 800e0e8:	4b3c      	ldr	r3, [pc, #240]	; (800e1dc <USART_SetConfig+0x360>)
 800e0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0f0:	2b28      	cmp	r3, #40	; 0x28
 800e0f2:	d87b      	bhi.n	800e1ec <USART_SetConfig+0x370>
 800e0f4:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <USART_SetConfig+0x280>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e1a1 	.word	0x0800e1a1
 800e100:	0800e1ed 	.word	0x0800e1ed
 800e104:	0800e1ed 	.word	0x0800e1ed
 800e108:	0800e1ed 	.word	0x0800e1ed
 800e10c:	0800e1ed 	.word	0x0800e1ed
 800e110:	0800e1ed 	.word	0x0800e1ed
 800e114:	0800e1ed 	.word	0x0800e1ed
 800e118:	0800e1ed 	.word	0x0800e1ed
 800e11c:	0800e1a9 	.word	0x0800e1a9
 800e120:	0800e1ed 	.word	0x0800e1ed
 800e124:	0800e1ed 	.word	0x0800e1ed
 800e128:	0800e1ed 	.word	0x0800e1ed
 800e12c:	0800e1ed 	.word	0x0800e1ed
 800e130:	0800e1ed 	.word	0x0800e1ed
 800e134:	0800e1ed 	.word	0x0800e1ed
 800e138:	0800e1ed 	.word	0x0800e1ed
 800e13c:	0800e1b1 	.word	0x0800e1b1
 800e140:	0800e1ed 	.word	0x0800e1ed
 800e144:	0800e1ed 	.word	0x0800e1ed
 800e148:	0800e1ed 	.word	0x0800e1ed
 800e14c:	0800e1ed 	.word	0x0800e1ed
 800e150:	0800e1ed 	.word	0x0800e1ed
 800e154:	0800e1ed 	.word	0x0800e1ed
 800e158:	0800e1ed 	.word	0x0800e1ed
 800e15c:	0800e1b9 	.word	0x0800e1b9
 800e160:	0800e1ed 	.word	0x0800e1ed
 800e164:	0800e1ed 	.word	0x0800e1ed
 800e168:	0800e1ed 	.word	0x0800e1ed
 800e16c:	0800e1ed 	.word	0x0800e1ed
 800e170:	0800e1ed 	.word	0x0800e1ed
 800e174:	0800e1ed 	.word	0x0800e1ed
 800e178:	0800e1ed 	.word	0x0800e1ed
 800e17c:	0800e1c1 	.word	0x0800e1c1
 800e180:	0800e1ed 	.word	0x0800e1ed
 800e184:	0800e1ed 	.word	0x0800e1ed
 800e188:	0800e1ed 	.word	0x0800e1ed
 800e18c:	0800e1ed 	.word	0x0800e1ed
 800e190:	0800e1ed 	.word	0x0800e1ed
 800e194:	0800e1ed 	.word	0x0800e1ed
 800e198:	0800e1ed 	.word	0x0800e1ed
 800e19c:	0800e1c9 	.word	0x0800e1c9
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1a6:	e028      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1ae:	e024      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1b0:	2304      	movs	r3, #4
 800e1b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1b6:	e020      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1b8:	2308      	movs	r3, #8
 800e1ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1be:	e01c      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1c0:	2310      	movs	r3, #16
 800e1c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1c6:	e018      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1c8:	2320      	movs	r3, #32
 800e1ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1ce:	e014      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1d0:	cfff69f3 	.word	0xcfff69f3
 800e1d4:	ffffc0f6 	.word	0xffffc0f6
 800e1d8:	40011000 	.word	0x40011000
 800e1dc:	58024400 	.word	0x58024400
 800e1e0:	40004400 	.word	0x40004400
 800e1e4:	40004800 	.word	0x40004800
 800e1e8:	40011400 	.word	0x40011400
 800e1ec:	2340      	movs	r3, #64	; 0x40
 800e1ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1f2:	e002      	b.n	800e1fa <USART_SetConfig+0x37e>
 800e1f4:	2340      	movs	r3, #64	; 0x40
 800e1f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800e1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1fe:	2b20      	cmp	r3, #32
 800e200:	f200 8329 	bhi.w	800e856 <USART_SetConfig+0x9da>
 800e204:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <USART_SetConfig+0x390>)
 800e206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20a:	bf00      	nop
 800e20c:	0800e291 	.word	0x0800e291
 800e210:	0800e347 	.word	0x0800e347
 800e214:	0800e3fd 	.word	0x0800e3fd
 800e218:	0800e857 	.word	0x0800e857
 800e21c:	0800e4b7 	.word	0x0800e4b7
 800e220:	0800e857 	.word	0x0800e857
 800e224:	0800e857 	.word	0x0800e857
 800e228:	0800e857 	.word	0x0800e857
 800e22c:	0800e571 	.word	0x0800e571
 800e230:	0800e857 	.word	0x0800e857
 800e234:	0800e857 	.word	0x0800e857
 800e238:	0800e857 	.word	0x0800e857
 800e23c:	0800e857 	.word	0x0800e857
 800e240:	0800e857 	.word	0x0800e857
 800e244:	0800e857 	.word	0x0800e857
 800e248:	0800e857 	.word	0x0800e857
 800e24c:	0800e6e9 	.word	0x0800e6e9
 800e250:	0800e857 	.word	0x0800e857
 800e254:	0800e857 	.word	0x0800e857
 800e258:	0800e857 	.word	0x0800e857
 800e25c:	0800e857 	.word	0x0800e857
 800e260:	0800e857 	.word	0x0800e857
 800e264:	0800e857 	.word	0x0800e857
 800e268:	0800e857 	.word	0x0800e857
 800e26c:	0800e857 	.word	0x0800e857
 800e270:	0800e857 	.word	0x0800e857
 800e274:	0800e857 	.word	0x0800e857
 800e278:	0800e857 	.word	0x0800e857
 800e27c:	0800e857 	.word	0x0800e857
 800e280:	0800e857 	.word	0x0800e857
 800e284:	0800e857 	.word	0x0800e857
 800e288:	0800e857 	.word	0x0800e857
 800e28c:	0800e7a5 	.word	0x0800e7a5
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800e290:	f7fa ffa2 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800e294:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d044      	beq.n	800e328 <USART_SetConfig+0x4ac>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d03e      	beq.n	800e324 <USART_SetConfig+0x4a8>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d038      	beq.n	800e320 <USART_SetConfig+0x4a4>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d032      	beq.n	800e31c <USART_SetConfig+0x4a0>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d02c      	beq.n	800e318 <USART_SetConfig+0x49c>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	2b05      	cmp	r3, #5
 800e2c4:	d026      	beq.n	800e314 <USART_SetConfig+0x498>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ca:	2b06      	cmp	r3, #6
 800e2cc:	d020      	beq.n	800e310 <USART_SetConfig+0x494>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d2:	2b07      	cmp	r3, #7
 800e2d4:	d01a      	beq.n	800e30c <USART_SetConfig+0x490>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2da:	2b08      	cmp	r3, #8
 800e2dc:	d014      	beq.n	800e308 <USART_SetConfig+0x48c>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e2:	2b09      	cmp	r3, #9
 800e2e4:	d00e      	beq.n	800e304 <USART_SetConfig+0x488>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ea:	2b0a      	cmp	r3, #10
 800e2ec:	d008      	beq.n	800e300 <USART_SetConfig+0x484>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f2:	2b0b      	cmp	r3, #11
 800e2f4:	d102      	bne.n	800e2fc <USART_SetConfig+0x480>
 800e2f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2fa:	e016      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e014      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	e012      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e304:	2340      	movs	r3, #64	; 0x40
 800e306:	e010      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e308:	2320      	movs	r3, #32
 800e30a:	e00e      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e30c:	2310      	movs	r3, #16
 800e30e:	e00c      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e310:	230c      	movs	r3, #12
 800e312:	e00a      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e314:	230a      	movs	r3, #10
 800e316:	e008      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e318:	2308      	movs	r3, #8
 800e31a:	e006      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e31c:	2306      	movs	r3, #6
 800e31e:	e004      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e320:	2304      	movs	r3, #4
 800e322:	e002      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e324:	2302      	movs	r3, #2
 800e326:	e000      	b.n	800e32a <USART_SetConfig+0x4ae>
 800e328:	2301      	movs	r3, #1
 800e32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e330:	005a      	lsls	r2, r3, #1
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	085b      	lsrs	r3, r3, #1
 800e338:	441a      	add	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e344:	e28b      	b.n	800e85e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800e346:	f7fa ff5d 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 800e34a:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e350:	2b00      	cmp	r3, #0
 800e352:	d044      	beq.n	800e3de <USART_SetConfig+0x562>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d03e      	beq.n	800e3da <USART_SetConfig+0x55e>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	2b02      	cmp	r3, #2
 800e362:	d038      	beq.n	800e3d6 <USART_SetConfig+0x55a>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d032      	beq.n	800e3d2 <USART_SetConfig+0x556>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	2b04      	cmp	r3, #4
 800e372:	d02c      	beq.n	800e3ce <USART_SetConfig+0x552>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	2b05      	cmp	r3, #5
 800e37a:	d026      	beq.n	800e3ca <USART_SetConfig+0x54e>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b06      	cmp	r3, #6
 800e382:	d020      	beq.n	800e3c6 <USART_SetConfig+0x54a>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2b07      	cmp	r3, #7
 800e38a:	d01a      	beq.n	800e3c2 <USART_SetConfig+0x546>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	2b08      	cmp	r3, #8
 800e392:	d014      	beq.n	800e3be <USART_SetConfig+0x542>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e398:	2b09      	cmp	r3, #9
 800e39a:	d00e      	beq.n	800e3ba <USART_SetConfig+0x53e>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a0:	2b0a      	cmp	r3, #10
 800e3a2:	d008      	beq.n	800e3b6 <USART_SetConfig+0x53a>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	2b0b      	cmp	r3, #11
 800e3aa:	d102      	bne.n	800e3b2 <USART_SetConfig+0x536>
 800e3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3b0:	e016      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e014      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3b6:	2380      	movs	r3, #128	; 0x80
 800e3b8:	e012      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3ba:	2340      	movs	r3, #64	; 0x40
 800e3bc:	e010      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3be:	2320      	movs	r3, #32
 800e3c0:	e00e      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3c2:	2310      	movs	r3, #16
 800e3c4:	e00c      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3c6:	230c      	movs	r3, #12
 800e3c8:	e00a      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3ca:	230a      	movs	r3, #10
 800e3cc:	e008      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3ce:	2308      	movs	r3, #8
 800e3d0:	e006      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3d2:	2306      	movs	r3, #6
 800e3d4:	e004      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3d6:	2304      	movs	r3, #4
 800e3d8:	e002      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3da:	2302      	movs	r3, #2
 800e3dc:	e000      	b.n	800e3e0 <USART_SetConfig+0x564>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3e6:	005a      	lsls	r2, r3, #1
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	085b      	lsrs	r3, r3, #1
 800e3ee:	441a      	add	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e3fa:	e230      	b.n	800e85e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3fc:	f107 0318 	add.w	r3, r7, #24
 800e400:	4618      	mov	r0, r3
 800e402:	f7fc fb85 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800e406:	69fa      	ldr	r2, [r7, #28]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d044      	beq.n	800e49a <USART_SetConfig+0x61e>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e414:	2b01      	cmp	r3, #1
 800e416:	d03e      	beq.n	800e496 <USART_SetConfig+0x61a>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41c:	2b02      	cmp	r3, #2
 800e41e:	d038      	beq.n	800e492 <USART_SetConfig+0x616>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e424:	2b03      	cmp	r3, #3
 800e426:	d032      	beq.n	800e48e <USART_SetConfig+0x612>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	d02c      	beq.n	800e48a <USART_SetConfig+0x60e>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e434:	2b05      	cmp	r3, #5
 800e436:	d026      	beq.n	800e486 <USART_SetConfig+0x60a>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	2b06      	cmp	r3, #6
 800e43e:	d020      	beq.n	800e482 <USART_SetConfig+0x606>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	2b07      	cmp	r3, #7
 800e446:	d01a      	beq.n	800e47e <USART_SetConfig+0x602>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44c:	2b08      	cmp	r3, #8
 800e44e:	d014      	beq.n	800e47a <USART_SetConfig+0x5fe>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e454:	2b09      	cmp	r3, #9
 800e456:	d00e      	beq.n	800e476 <USART_SetConfig+0x5fa>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45c:	2b0a      	cmp	r3, #10
 800e45e:	d008      	beq.n	800e472 <USART_SetConfig+0x5f6>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e464:	2b0b      	cmp	r3, #11
 800e466:	d102      	bne.n	800e46e <USART_SetConfig+0x5f2>
 800e468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e46c:	e016      	b.n	800e49c <USART_SetConfig+0x620>
 800e46e:	2301      	movs	r3, #1
 800e470:	e014      	b.n	800e49c <USART_SetConfig+0x620>
 800e472:	2380      	movs	r3, #128	; 0x80
 800e474:	e012      	b.n	800e49c <USART_SetConfig+0x620>
 800e476:	2340      	movs	r3, #64	; 0x40
 800e478:	e010      	b.n	800e49c <USART_SetConfig+0x620>
 800e47a:	2320      	movs	r3, #32
 800e47c:	e00e      	b.n	800e49c <USART_SetConfig+0x620>
 800e47e:	2310      	movs	r3, #16
 800e480:	e00c      	b.n	800e49c <USART_SetConfig+0x620>
 800e482:	230c      	movs	r3, #12
 800e484:	e00a      	b.n	800e49c <USART_SetConfig+0x620>
 800e486:	230a      	movs	r3, #10
 800e488:	e008      	b.n	800e49c <USART_SetConfig+0x620>
 800e48a:	2308      	movs	r3, #8
 800e48c:	e006      	b.n	800e49c <USART_SetConfig+0x620>
 800e48e:	2306      	movs	r3, #6
 800e490:	e004      	b.n	800e49c <USART_SetConfig+0x620>
 800e492:	2304      	movs	r3, #4
 800e494:	e002      	b.n	800e49c <USART_SetConfig+0x620>
 800e496:	2302      	movs	r3, #2
 800e498:	e000      	b.n	800e49c <USART_SetConfig+0x620>
 800e49a:	2301      	movs	r3, #1
 800e49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a0:	005a      	lsls	r2, r3, #1
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	085b      	lsrs	r3, r3, #1
 800e4a8:	441a      	add	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b2:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e4b4:	e1d3      	b.n	800e85e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4b6:	f107 030c 	add.w	r3, r7, #12
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fc fc7c 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d044      	beq.n	800e554 <USART_SetConfig+0x6d8>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d03e      	beq.n	800e550 <USART_SetConfig+0x6d4>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	d038      	beq.n	800e54c <USART_SetConfig+0x6d0>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d032      	beq.n	800e548 <USART_SetConfig+0x6cc>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d02c      	beq.n	800e544 <USART_SetConfig+0x6c8>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ee:	2b05      	cmp	r3, #5
 800e4f0:	d026      	beq.n	800e540 <USART_SetConfig+0x6c4>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f6:	2b06      	cmp	r3, #6
 800e4f8:	d020      	beq.n	800e53c <USART_SetConfig+0x6c0>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fe:	2b07      	cmp	r3, #7
 800e500:	d01a      	beq.n	800e538 <USART_SetConfig+0x6bc>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e506:	2b08      	cmp	r3, #8
 800e508:	d014      	beq.n	800e534 <USART_SetConfig+0x6b8>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50e:	2b09      	cmp	r3, #9
 800e510:	d00e      	beq.n	800e530 <USART_SetConfig+0x6b4>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e516:	2b0a      	cmp	r3, #10
 800e518:	d008      	beq.n	800e52c <USART_SetConfig+0x6b0>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51e:	2b0b      	cmp	r3, #11
 800e520:	d102      	bne.n	800e528 <USART_SetConfig+0x6ac>
 800e522:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e526:	e016      	b.n	800e556 <USART_SetConfig+0x6da>
 800e528:	2301      	movs	r3, #1
 800e52a:	e014      	b.n	800e556 <USART_SetConfig+0x6da>
 800e52c:	2380      	movs	r3, #128	; 0x80
 800e52e:	e012      	b.n	800e556 <USART_SetConfig+0x6da>
 800e530:	2340      	movs	r3, #64	; 0x40
 800e532:	e010      	b.n	800e556 <USART_SetConfig+0x6da>
 800e534:	2320      	movs	r3, #32
 800e536:	e00e      	b.n	800e556 <USART_SetConfig+0x6da>
 800e538:	2310      	movs	r3, #16
 800e53a:	e00c      	b.n	800e556 <USART_SetConfig+0x6da>
 800e53c:	230c      	movs	r3, #12
 800e53e:	e00a      	b.n	800e556 <USART_SetConfig+0x6da>
 800e540:	230a      	movs	r3, #10
 800e542:	e008      	b.n	800e556 <USART_SetConfig+0x6da>
 800e544:	2308      	movs	r3, #8
 800e546:	e006      	b.n	800e556 <USART_SetConfig+0x6da>
 800e548:	2306      	movs	r3, #6
 800e54a:	e004      	b.n	800e556 <USART_SetConfig+0x6da>
 800e54c:	2304      	movs	r3, #4
 800e54e:	e002      	b.n	800e556 <USART_SetConfig+0x6da>
 800e550:	2302      	movs	r3, #2
 800e552:	e000      	b.n	800e556 <USART_SetConfig+0x6da>
 800e554:	2301      	movs	r3, #1
 800e556:	fbb2 f3f3 	udiv	r3, r2, r3
 800e55a:	005a      	lsls	r2, r3, #1
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	085b      	lsrs	r3, r3, #1
 800e562:	441a      	add	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56c:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e56e:	e176      	b.n	800e85e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e570:	4b89      	ldr	r3, [pc, #548]	; (800e798 <USART_SetConfig+0x91c>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f003 0320 	and.w	r3, r3, #32
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d05d      	beq.n	800e638 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e57c:	4b86      	ldr	r3, [pc, #536]	; (800e798 <USART_SetConfig+0x91c>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	08db      	lsrs	r3, r3, #3
 800e582:	f003 0303 	and.w	r3, r3, #3
 800e586:	4a85      	ldr	r2, [pc, #532]	; (800e79c <USART_SetConfig+0x920>)
 800e588:	40da      	lsrs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d044      	beq.n	800e61c <USART_SetConfig+0x7a0>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e596:	2b01      	cmp	r3, #1
 800e598:	d03e      	beq.n	800e618 <USART_SetConfig+0x79c>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d038      	beq.n	800e614 <USART_SetConfig+0x798>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d032      	beq.n	800e610 <USART_SetConfig+0x794>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	2b04      	cmp	r3, #4
 800e5b0:	d02c      	beq.n	800e60c <USART_SetConfig+0x790>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	d026      	beq.n	800e608 <USART_SetConfig+0x78c>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5be:	2b06      	cmp	r3, #6
 800e5c0:	d020      	beq.n	800e604 <USART_SetConfig+0x788>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c6:	2b07      	cmp	r3, #7
 800e5c8:	d01a      	beq.n	800e600 <USART_SetConfig+0x784>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ce:	2b08      	cmp	r3, #8
 800e5d0:	d014      	beq.n	800e5fc <USART_SetConfig+0x780>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d6:	2b09      	cmp	r3, #9
 800e5d8:	d00e      	beq.n	800e5f8 <USART_SetConfig+0x77c>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5de:	2b0a      	cmp	r3, #10
 800e5e0:	d008      	beq.n	800e5f4 <USART_SetConfig+0x778>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	2b0b      	cmp	r3, #11
 800e5e8:	d102      	bne.n	800e5f0 <USART_SetConfig+0x774>
 800e5ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5ee:	e016      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e014      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e5f4:	2380      	movs	r3, #128	; 0x80
 800e5f6:	e012      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e5f8:	2340      	movs	r3, #64	; 0x40
 800e5fa:	e010      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e5fc:	2320      	movs	r3, #32
 800e5fe:	e00e      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e600:	2310      	movs	r3, #16
 800e602:	e00c      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e604:	230c      	movs	r3, #12
 800e606:	e00a      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e608:	230a      	movs	r3, #10
 800e60a:	e008      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e60c:	2308      	movs	r3, #8
 800e60e:	e006      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e610:	2306      	movs	r3, #6
 800e612:	e004      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e614:	2304      	movs	r3, #4
 800e616:	e002      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e618:	2302      	movs	r3, #2
 800e61a:	e000      	b.n	800e61e <USART_SetConfig+0x7a2>
 800e61c:	2301      	movs	r3, #1
 800e61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e622:	005a      	lsls	r2, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	085b      	lsrs	r3, r3, #1
 800e62a:	441a      	add	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	fbb2 f3f3 	udiv	r3, r2, r3
 800e634:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e636:	e112      	b.n	800e85e <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d044      	beq.n	800e6ca <USART_SetConfig+0x84e>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	2b01      	cmp	r3, #1
 800e646:	d03e      	beq.n	800e6c6 <USART_SetConfig+0x84a>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d038      	beq.n	800e6c2 <USART_SetConfig+0x846>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	2b03      	cmp	r3, #3
 800e656:	d032      	beq.n	800e6be <USART_SetConfig+0x842>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	2b04      	cmp	r3, #4
 800e65e:	d02c      	beq.n	800e6ba <USART_SetConfig+0x83e>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	2b05      	cmp	r3, #5
 800e666:	d026      	beq.n	800e6b6 <USART_SetConfig+0x83a>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66c:	2b06      	cmp	r3, #6
 800e66e:	d020      	beq.n	800e6b2 <USART_SetConfig+0x836>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e674:	2b07      	cmp	r3, #7
 800e676:	d01a      	beq.n	800e6ae <USART_SetConfig+0x832>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67c:	2b08      	cmp	r3, #8
 800e67e:	d014      	beq.n	800e6aa <USART_SetConfig+0x82e>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e684:	2b09      	cmp	r3, #9
 800e686:	d00e      	beq.n	800e6a6 <USART_SetConfig+0x82a>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68c:	2b0a      	cmp	r3, #10
 800e68e:	d008      	beq.n	800e6a2 <USART_SetConfig+0x826>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e694:	2b0b      	cmp	r3, #11
 800e696:	d102      	bne.n	800e69e <USART_SetConfig+0x822>
 800e698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e69c:	e016      	b.n	800e6cc <USART_SetConfig+0x850>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e014      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6a2:	2380      	movs	r3, #128	; 0x80
 800e6a4:	e012      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6a6:	2340      	movs	r3, #64	; 0x40
 800e6a8:	e010      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6aa:	2320      	movs	r3, #32
 800e6ac:	e00e      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6ae:	2310      	movs	r3, #16
 800e6b0:	e00c      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	e00a      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6b6:	230a      	movs	r3, #10
 800e6b8:	e008      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6ba:	2308      	movs	r3, #8
 800e6bc:	e006      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6be:	2306      	movs	r3, #6
 800e6c0:	e004      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	e002      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	e000      	b.n	800e6cc <USART_SetConfig+0x850>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	4a33      	ldr	r2, [pc, #204]	; (800e79c <USART_SetConfig+0x920>)
 800e6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d2:	005a      	lsls	r2, r3, #1
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	085b      	lsrs	r3, r3, #1
 800e6da:	441a      	add	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e6e6:	e0ba      	b.n	800e85e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d044      	beq.n	800e77a <USART_SetConfig+0x8fe>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d03e      	beq.n	800e776 <USART_SetConfig+0x8fa>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d038      	beq.n	800e772 <USART_SetConfig+0x8f6>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e704:	2b03      	cmp	r3, #3
 800e706:	d032      	beq.n	800e76e <USART_SetConfig+0x8f2>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	2b04      	cmp	r3, #4
 800e70e:	d02c      	beq.n	800e76a <USART_SetConfig+0x8ee>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	2b05      	cmp	r3, #5
 800e716:	d026      	beq.n	800e766 <USART_SetConfig+0x8ea>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71c:	2b06      	cmp	r3, #6
 800e71e:	d020      	beq.n	800e762 <USART_SetConfig+0x8e6>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e724:	2b07      	cmp	r3, #7
 800e726:	d01a      	beq.n	800e75e <USART_SetConfig+0x8e2>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d014      	beq.n	800e75a <USART_SetConfig+0x8de>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e734:	2b09      	cmp	r3, #9
 800e736:	d00e      	beq.n	800e756 <USART_SetConfig+0x8da>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73c:	2b0a      	cmp	r3, #10
 800e73e:	d008      	beq.n	800e752 <USART_SetConfig+0x8d6>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e744:	2b0b      	cmp	r3, #11
 800e746:	d102      	bne.n	800e74e <USART_SetConfig+0x8d2>
 800e748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e74c:	e016      	b.n	800e77c <USART_SetConfig+0x900>
 800e74e:	2301      	movs	r3, #1
 800e750:	e014      	b.n	800e77c <USART_SetConfig+0x900>
 800e752:	2380      	movs	r3, #128	; 0x80
 800e754:	e012      	b.n	800e77c <USART_SetConfig+0x900>
 800e756:	2340      	movs	r3, #64	; 0x40
 800e758:	e010      	b.n	800e77c <USART_SetConfig+0x900>
 800e75a:	2320      	movs	r3, #32
 800e75c:	e00e      	b.n	800e77c <USART_SetConfig+0x900>
 800e75e:	2310      	movs	r3, #16
 800e760:	e00c      	b.n	800e77c <USART_SetConfig+0x900>
 800e762:	230c      	movs	r3, #12
 800e764:	e00a      	b.n	800e77c <USART_SetConfig+0x900>
 800e766:	230a      	movs	r3, #10
 800e768:	e008      	b.n	800e77c <USART_SetConfig+0x900>
 800e76a:	2308      	movs	r3, #8
 800e76c:	e006      	b.n	800e77c <USART_SetConfig+0x900>
 800e76e:	2306      	movs	r3, #6
 800e770:	e004      	b.n	800e77c <USART_SetConfig+0x900>
 800e772:	2304      	movs	r3, #4
 800e774:	e002      	b.n	800e77c <USART_SetConfig+0x900>
 800e776:	2302      	movs	r3, #2
 800e778:	e000      	b.n	800e77c <USART_SetConfig+0x900>
 800e77a:	2301      	movs	r3, #1
 800e77c:	4a08      	ldr	r2, [pc, #32]	; (800e7a0 <USART_SetConfig+0x924>)
 800e77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e782:	005a      	lsls	r2, r3, #1
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	085b      	lsrs	r3, r3, #1
 800e78a:	441a      	add	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	fbb2 f3f3 	udiv	r3, r2, r3
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e796:	e062      	b.n	800e85e <USART_SetConfig+0x9e2>
 800e798:	58024400 	.word	0x58024400
 800e79c:	03d09000 	.word	0x03d09000
 800e7a0:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d044      	beq.n	800e836 <USART_SetConfig+0x9ba>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d03e      	beq.n	800e832 <USART_SetConfig+0x9b6>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d038      	beq.n	800e82e <USART_SetConfig+0x9b2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d032      	beq.n	800e82a <USART_SetConfig+0x9ae>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	d02c      	beq.n	800e826 <USART_SetConfig+0x9aa>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d0:	2b05      	cmp	r3, #5
 800e7d2:	d026      	beq.n	800e822 <USART_SetConfig+0x9a6>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d8:	2b06      	cmp	r3, #6
 800e7da:	d020      	beq.n	800e81e <USART_SetConfig+0x9a2>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e0:	2b07      	cmp	r3, #7
 800e7e2:	d01a      	beq.n	800e81a <USART_SetConfig+0x99e>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e8:	2b08      	cmp	r3, #8
 800e7ea:	d014      	beq.n	800e816 <USART_SetConfig+0x99a>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	d00e      	beq.n	800e812 <USART_SetConfig+0x996>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f8:	2b0a      	cmp	r3, #10
 800e7fa:	d008      	beq.n	800e80e <USART_SetConfig+0x992>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e800:	2b0b      	cmp	r3, #11
 800e802:	d102      	bne.n	800e80a <USART_SetConfig+0x98e>
 800e804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e808:	e016      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e014      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e80e:	2380      	movs	r3, #128	; 0x80
 800e810:	e012      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e812:	2340      	movs	r3, #64	; 0x40
 800e814:	e010      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e816:	2320      	movs	r3, #32
 800e818:	e00e      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e81a:	2310      	movs	r3, #16
 800e81c:	e00c      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e81e:	230c      	movs	r3, #12
 800e820:	e00a      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e822:	230a      	movs	r3, #10
 800e824:	e008      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e826:	2308      	movs	r3, #8
 800e828:	e006      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e82a:	2306      	movs	r3, #6
 800e82c:	e004      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e82e:	2304      	movs	r3, #4
 800e830:	e002      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e832:	2302      	movs	r3, #2
 800e834:	e000      	b.n	800e838 <USART_SetConfig+0x9bc>
 800e836:	2301      	movs	r3, #1
 800e838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e840:	005a      	lsls	r2, r3, #1
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	085b      	lsrs	r3, r3, #1
 800e848:	441a      	add	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e854:	e003      	b.n	800e85e <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800e85c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	2b0f      	cmp	r3, #15
 800e862:	d916      	bls.n	800e892 <USART_SetConfig+0xa16>
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e86a:	d212      	bcs.n	800e892 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	b29b      	uxth	r3, r3
 800e870:	f023 030f 	bic.w	r3, r3, #15
 800e874:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	085b      	lsrs	r3, r3, #1
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	f003 0307 	and.w	r3, r3, #7
 800e880:	b29a      	uxth	r2, r3
 800e882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e884:	4313      	orrs	r3, r2
 800e886:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e88e:	60da      	str	r2, [r3, #12]
 800e890:	e002      	b.n	800e898 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800e8b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3738      	adds	r7, #56	; 0x38
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af02      	add	r7, sp, #8
 800e8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e8ca:	f7f5 f907 	bl	8003adc <HAL_GetTick>
 800e8ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0308 	and.w	r3, r3, #8
 800e8da:	2b08      	cmp	r3, #8
 800e8dc:	d10e      	bne.n	800e8fc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e8de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7ff fa8f 	bl	800de10 <USART_WaitOnFlagUntilTimeout>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e01e      	b.n	800e93a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0304 	and.w	r3, r3, #4
 800e906:	2b04      	cmp	r3, #4
 800e908:	d10e      	bne.n	800e928 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e90a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff fa79 	bl	800de10 <USART_WaitOnFlagUntilTimeout>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e924:	2303      	movs	r3, #3
 800e926:	e008      	b.n	800e93a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800e942:	b480      	push	{r7}
 800e944:	b085      	sub	sp, #20
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e950:	2b01      	cmp	r3, #1
 800e952:	d101      	bne.n	800e958 <HAL_USARTEx_DisableFifoMode+0x16>
 800e954:	2302      	movs	r3, #2
 800e956:	e027      	b.n	800e9a8 <HAL_USARTEx_DisableFifoMode+0x66>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2202      	movs	r2, #2
 800e964:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f022 0201 	bic.w	r2, r2, #1
 800e97e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e986:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3714      	adds	r7, #20
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d101      	bne.n	800e9cc <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	e02d      	b.n	800ea28 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f022 0201 	bic.w	r2, r2, #1
 800e9f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	683a      	ldr	r2, [r7, #0]
 800ea04:	430a      	orrs	r2, r1
 800ea06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f84f 	bl	800eaac <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d101      	bne.n	800ea48 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800ea44:	2302      	movs	r3, #2
 800ea46:	e02d      	b.n	800eaa4 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2202      	movs	r2, #2
 800ea54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f022 0201 	bic.w	r2, r2, #1
 800ea6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	430a      	orrs	r2, r1
 800ea82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f811 	bl	800eaac <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d106      	bne.n	800eaca <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eac8:	e02f      	b.n	800eb2a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eaca:	2310      	movs	r3, #16
 800eacc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eace:	2310      	movs	r3, #16
 800ead0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ead8:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	f003 0307 	and.w	r3, r3, #7
 800eae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800eae8:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0307 	and.w	r3, r3, #7
 800eaf0:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eaf2:	7bbb      	ldrb	r3, [r7, #14]
 800eaf4:	7b3a      	ldrb	r2, [r7, #12]
 800eaf6:	4910      	ldr	r1, [pc, #64]	; (800eb38 <USARTEx_SetNbDataToProcess+0x8c>)
 800eaf8:	5c8a      	ldrb	r2, [r1, r2]
 800eafa:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800eafe:	7b3a      	ldrb	r2, [r7, #12]
 800eb00:	490e      	ldr	r1, [pc, #56]	; (800eb3c <USARTEx_SetNbDataToProcess+0x90>)
 800eb02:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb04:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
 800eb10:	7b7a      	ldrb	r2, [r7, #13]
 800eb12:	4909      	ldr	r1, [pc, #36]	; (800eb38 <USARTEx_SetNbDataToProcess+0x8c>)
 800eb14:	5c8a      	ldrb	r2, [r1, r2]
 800eb16:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800eb1a:	7b7a      	ldrb	r2, [r7, #13]
 800eb1c:	4907      	ldr	r1, [pc, #28]	; (800eb3c <USARTEx_SetNbDataToProcess+0x90>)
 800eb1e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb20:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800eb2a:	bf00      	nop
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	080121b8 	.word	0x080121b8
 800eb3c:	080121c0 	.word	0x080121c0

0800eb40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eb40:	b580      	push	{r7, lr}
 800eb42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eb44:	4b05      	ldr	r3, [pc, #20]	; (800eb5c <SysTick_Handler+0x1c>)
 800eb46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eb48:	f000 fa06 	bl	800ef58 <xTaskGetSchedulerState>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d001      	beq.n	800eb56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eb52:	f000 f8a1 	bl	800ec98 <xPortSysTickHandler>
  }
}
 800eb56:	bf00      	nop
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	e000e010 	.word	0xe000e010

0800eb60 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	689a      	ldr	r2, [r3, #8]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	601a      	str	r2, [r3, #0]
}
 800eb9c:	bf00      	nop
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	6892      	ldr	r2, [r2, #8]
 800ebbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	6852      	ldr	r2, [r2, #4]
 800ebc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d103      	bne.n	800ebdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	689a      	ldr	r2, [r3, #8]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	1e5a      	subs	r2, r3, #1
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	0000      	movs	r0, r0
	...

0800ec00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <pxCurrentTCBConst2>)
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	6808      	ldr	r0, [r1, #0]
 800ec06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0a:	f380 8809 	msr	PSP, r0
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f04f 0000 	mov.w	r0, #0
 800ec16:	f380 8811 	msr	BASEPRI, r0
 800ec1a:	4770      	bx	lr
 800ec1c:	f3af 8000 	nop.w

0800ec20 <pxCurrentTCBConst2>:
 800ec20:	24000cb8 	.word	0x24000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
	...

0800ec30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec30:	f3ef 8009 	mrs	r0, PSP
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	4b15      	ldr	r3, [pc, #84]	; (800ec90 <pxCurrentTCBConst>)
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	f01e 0f10 	tst.w	lr, #16
 800ec40:	bf08      	it	eq
 800ec42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4a:	6010      	str	r0, [r2, #0]
 800ec4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec54:	f380 8811 	msr	BASEPRI, r0
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f000 f8f6 	bl	800ee50 <vTaskSwitchContext>
 800ec64:	f04f 0000 	mov.w	r0, #0
 800ec68:	f380 8811 	msr	BASEPRI, r0
 800ec6c:	bc09      	pop	{r0, r3}
 800ec6e:	6819      	ldr	r1, [r3, #0]
 800ec70:	6808      	ldr	r0, [r1, #0]
 800ec72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec76:	f01e 0f10 	tst.w	lr, #16
 800ec7a:	bf08      	it	eq
 800ec7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec80:	f380 8809 	msr	PSP, r0
 800ec84:	f3bf 8f6f 	isb	sy
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	f3af 8000 	nop.w

0800ec90 <pxCurrentTCBConst>:
 800ec90:	24000cb8 	.word	0x24000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop

0800ec98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ecb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ecb2:	f000 f813 	bl	800ecdc <xTaskIncrementTick>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d003      	beq.n	800ecc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecbc:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <xPortSysTickHandler+0x40>)
 800ecbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ecce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	e000ed04 	.word	0xe000ed04

0800ecdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ece6:	4b4f      	ldr	r3, [pc, #316]	; (800ee24 <xTaskIncrementTick+0x148>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f040 808f 	bne.w	800ee0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ecf0:	4b4d      	ldr	r3, [pc, #308]	; (800ee28 <xTaskIncrementTick+0x14c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ecf8:	4a4b      	ldr	r2, [pc, #300]	; (800ee28 <xTaskIncrementTick+0x14c>)
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d120      	bne.n	800ed46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed04:	4b49      	ldr	r3, [pc, #292]	; (800ee2c <xTaskIncrementTick+0x150>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00a      	beq.n	800ed24 <xTaskIncrementTick+0x48>
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	f383 8811 	msr	BASEPRI, r3
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	f3bf 8f4f 	dsb	sy
 800ed1e:	603b      	str	r3, [r7, #0]
}
 800ed20:	bf00      	nop
 800ed22:	e7fe      	b.n	800ed22 <xTaskIncrementTick+0x46>
 800ed24:	4b41      	ldr	r3, [pc, #260]	; (800ee2c <xTaskIncrementTick+0x150>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	4b41      	ldr	r3, [pc, #260]	; (800ee30 <xTaskIncrementTick+0x154>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a3f      	ldr	r2, [pc, #252]	; (800ee2c <xTaskIncrementTick+0x150>)
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	4a3f      	ldr	r2, [pc, #252]	; (800ee30 <xTaskIncrementTick+0x154>)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	4b3e      	ldr	r3, [pc, #248]	; (800ee34 <xTaskIncrementTick+0x158>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	4a3d      	ldr	r2, [pc, #244]	; (800ee34 <xTaskIncrementTick+0x158>)
 800ed40:	6013      	str	r3, [r2, #0]
 800ed42:	f000 f8e9 	bl	800ef18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ed46:	4b3c      	ldr	r3, [pc, #240]	; (800ee38 <xTaskIncrementTick+0x15c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	693a      	ldr	r2, [r7, #16]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d349      	bcc.n	800ede4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed50:	4b36      	ldr	r3, [pc, #216]	; (800ee2c <xTaskIncrementTick+0x150>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d104      	bne.n	800ed64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed5a:	4b37      	ldr	r3, [pc, #220]	; (800ee38 <xTaskIncrementTick+0x15c>)
 800ed5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed60:	601a      	str	r2, [r3, #0]
					break;
 800ed62:	e03f      	b.n	800ede4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed64:	4b31      	ldr	r3, [pc, #196]	; (800ee2c <xTaskIncrementTick+0x150>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ed74:	693a      	ldr	r2, [r7, #16]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d203      	bcs.n	800ed84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ed7c:	4a2e      	ldr	r2, [pc, #184]	; (800ee38 <xTaskIncrementTick+0x15c>)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ed82:	e02f      	b.n	800ede4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff ff0d 	bl	800eba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d004      	beq.n	800eda0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	3318      	adds	r3, #24
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff ff04 	bl	800eba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda4:	4b25      	ldr	r3, [pc, #148]	; (800ee3c <xTaskIncrementTick+0x160>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d903      	bls.n	800edb4 <xTaskIncrementTick+0xd8>
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb0:	4a22      	ldr	r2, [pc, #136]	; (800ee3c <xTaskIncrementTick+0x160>)
 800edb2:	6013      	str	r3, [r2, #0]
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb8:	4613      	mov	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4413      	add	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4a1f      	ldr	r2, [pc, #124]	; (800ee40 <xTaskIncrementTick+0x164>)
 800edc2:	441a      	add	r2, r3
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	3304      	adds	r3, #4
 800edc8:	4619      	mov	r1, r3
 800edca:	4610      	mov	r0, r2
 800edcc:	f7ff fec8 	bl	800eb60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd4:	4b1b      	ldr	r3, [pc, #108]	; (800ee44 <xTaskIncrementTick+0x168>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edda:	429a      	cmp	r2, r3
 800eddc:	d3b8      	bcc.n	800ed50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800edde:	2301      	movs	r3, #1
 800ede0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ede2:	e7b5      	b.n	800ed50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ede4:	4b17      	ldr	r3, [pc, #92]	; (800ee44 <xTaskIncrementTick+0x168>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edea:	4915      	ldr	r1, [pc, #84]	; (800ee40 <xTaskIncrementTick+0x164>)
 800edec:	4613      	mov	r3, r2
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	4413      	add	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	440b      	add	r3, r1
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d901      	bls.n	800ee00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800edfc:	2301      	movs	r3, #1
 800edfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee00:	4b11      	ldr	r3, [pc, #68]	; (800ee48 <xTaskIncrementTick+0x16c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	e004      	b.n	800ee18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee0e:	4b0f      	ldr	r3, [pc, #60]	; (800ee4c <xTaskIncrementTick+0x170>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	4a0d      	ldr	r2, [pc, #52]	; (800ee4c <xTaskIncrementTick+0x170>)
 800ee16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ee18:	697b      	ldr	r3, [r7, #20]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	24001140 	.word	0x24001140
 800ee28:	24001124 	.word	0x24001124
 800ee2c:	2400111c 	.word	0x2400111c
 800ee30:	24001120 	.word	0x24001120
 800ee34:	24001138 	.word	0x24001138
 800ee38:	2400113c 	.word	0x2400113c
 800ee3c:	24001128 	.word	0x24001128
 800ee40:	24000cbc 	.word	0x24000cbc
 800ee44:	24000cb8 	.word	0x24000cb8
 800ee48:	24001134 	.word	0x24001134
 800ee4c:	24001130 	.word	0x24001130

0800ee50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee56:	4b2a      	ldr	r3, [pc, #168]	; (800ef00 <vTaskSwitchContext+0xb0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ee5e:	4b29      	ldr	r3, [pc, #164]	; (800ef04 <vTaskSwitchContext+0xb4>)
 800ee60:	2201      	movs	r2, #1
 800ee62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ee64:	e046      	b.n	800eef4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ee66:	4b27      	ldr	r3, [pc, #156]	; (800ef04 <vTaskSwitchContext+0xb4>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee6c:	4b26      	ldr	r3, [pc, #152]	; (800ef08 <vTaskSwitchContext+0xb8>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	e010      	b.n	800ee96 <vTaskSwitchContext+0x46>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10a      	bne.n	800ee90 <vTaskSwitchContext+0x40>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	607b      	str	r3, [r7, #4]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <vTaskSwitchContext+0x3e>
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	60fb      	str	r3, [r7, #12]
 800ee96:	491d      	ldr	r1, [pc, #116]	; (800ef0c <vTaskSwitchContext+0xbc>)
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	440b      	add	r3, r1
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d0e4      	beq.n	800ee74 <vTaskSwitchContext+0x24>
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4a15      	ldr	r2, [pc, #84]	; (800ef0c <vTaskSwitchContext+0xbc>)
 800eeb6:	4413      	add	r3, r2
 800eeb8:	60bb      	str	r3, [r7, #8]
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	605a      	str	r2, [r3, #4]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	3308      	adds	r3, #8
 800eecc:	429a      	cmp	r2, r3
 800eece:	d104      	bne.n	800eeda <vTaskSwitchContext+0x8a>
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	605a      	str	r2, [r3, #4]
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	4a0b      	ldr	r2, [pc, #44]	; (800ef10 <vTaskSwitchContext+0xc0>)
 800eee2:	6013      	str	r3, [r2, #0]
 800eee4:	4a08      	ldr	r2, [pc, #32]	; (800ef08 <vTaskSwitchContext+0xb8>)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eeea:	4b09      	ldr	r3, [pc, #36]	; (800ef10 <vTaskSwitchContext+0xc0>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	3354      	adds	r3, #84	; 0x54
 800eef0:	4a08      	ldr	r2, [pc, #32]	; (800ef14 <vTaskSwitchContext+0xc4>)
 800eef2:	6013      	str	r3, [r2, #0]
}
 800eef4:	bf00      	nop
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	24001140 	.word	0x24001140
 800ef04:	24001134 	.word	0x24001134
 800ef08:	24001128 	.word	0x24001128
 800ef0c:	24000cbc 	.word	0x24000cbc
 800ef10:	24000cb8 	.word	0x24000cb8
 800ef14:	2400001c 	.word	0x2400001c

0800ef18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef1e:	4b0c      	ldr	r3, [pc, #48]	; (800ef50 <prvResetNextTaskUnblockTime+0x38>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d104      	bne.n	800ef32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef28:	4b0a      	ldr	r3, [pc, #40]	; (800ef54 <prvResetNextTaskUnblockTime+0x3c>)
 800ef2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef30:	e008      	b.n	800ef44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef32:	4b07      	ldr	r3, [pc, #28]	; (800ef50 <prvResetNextTaskUnblockTime+0x38>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	4a04      	ldr	r2, [pc, #16]	; (800ef54 <prvResetNextTaskUnblockTime+0x3c>)
 800ef42:	6013      	str	r3, [r2, #0]
}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr
 800ef50:	2400111c 	.word	0x2400111c
 800ef54:	2400113c 	.word	0x2400113c

0800ef58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef5e:	4b0b      	ldr	r3, [pc, #44]	; (800ef8c <xTaskGetSchedulerState+0x34>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d102      	bne.n	800ef6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef66:	2301      	movs	r3, #1
 800ef68:	607b      	str	r3, [r7, #4]
 800ef6a:	e008      	b.n	800ef7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef6c:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <xTaskGetSchedulerState+0x38>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef74:	2302      	movs	r3, #2
 800ef76:	607b      	str	r3, [r7, #4]
 800ef78:	e001      	b.n	800ef7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef7e:	687b      	ldr	r3, [r7, #4]
	}
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	2400112c 	.word	0x2400112c
 800ef90:	24001140 	.word	0x24001140

0800ef94 <__errno>:
 800ef94:	4b01      	ldr	r3, [pc, #4]	; (800ef9c <__errno+0x8>)
 800ef96:	6818      	ldr	r0, [r3, #0]
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	2400001c 	.word	0x2400001c

0800efa0 <std>:
 800efa0:	2300      	movs	r3, #0
 800efa2:	b510      	push	{r4, lr}
 800efa4:	4604      	mov	r4, r0
 800efa6:	e9c0 3300 	strd	r3, r3, [r0]
 800efaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efae:	6083      	str	r3, [r0, #8]
 800efb0:	8181      	strh	r1, [r0, #12]
 800efb2:	6643      	str	r3, [r0, #100]	; 0x64
 800efb4:	81c2      	strh	r2, [r0, #14]
 800efb6:	6183      	str	r3, [r0, #24]
 800efb8:	4619      	mov	r1, r3
 800efba:	2208      	movs	r2, #8
 800efbc:	305c      	adds	r0, #92	; 0x5c
 800efbe:	f000 f91a 	bl	800f1f6 <memset>
 800efc2:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <std+0x38>)
 800efc4:	6263      	str	r3, [r4, #36]	; 0x24
 800efc6:	4b05      	ldr	r3, [pc, #20]	; (800efdc <std+0x3c>)
 800efc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800efca:	4b05      	ldr	r3, [pc, #20]	; (800efe0 <std+0x40>)
 800efcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efce:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <std+0x44>)
 800efd0:	6224      	str	r4, [r4, #32]
 800efd2:	6323      	str	r3, [r4, #48]	; 0x30
 800efd4:	bd10      	pop	{r4, pc}
 800efd6:	bf00      	nop
 800efd8:	0800fd31 	.word	0x0800fd31
 800efdc:	0800fd53 	.word	0x0800fd53
 800efe0:	0800fd8b 	.word	0x0800fd8b
 800efe4:	0800fdaf 	.word	0x0800fdaf

0800efe8 <_cleanup_r>:
 800efe8:	4901      	ldr	r1, [pc, #4]	; (800eff0 <_cleanup_r+0x8>)
 800efea:	f000 b8af 	b.w	800f14c <_fwalk_reent>
 800efee:	bf00      	nop
 800eff0:	08010c81 	.word	0x08010c81

0800eff4 <__sfmoreglue>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	2268      	movs	r2, #104	; 0x68
 800eff8:	1e4d      	subs	r5, r1, #1
 800effa:	4355      	muls	r5, r2
 800effc:	460e      	mov	r6, r1
 800effe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f002:	f000 f921 	bl	800f248 <_malloc_r>
 800f006:	4604      	mov	r4, r0
 800f008:	b140      	cbz	r0, 800f01c <__sfmoreglue+0x28>
 800f00a:	2100      	movs	r1, #0
 800f00c:	e9c0 1600 	strd	r1, r6, [r0]
 800f010:	300c      	adds	r0, #12
 800f012:	60a0      	str	r0, [r4, #8]
 800f014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f018:	f000 f8ed 	bl	800f1f6 <memset>
 800f01c:	4620      	mov	r0, r4
 800f01e:	bd70      	pop	{r4, r5, r6, pc}

0800f020 <__sfp_lock_acquire>:
 800f020:	4801      	ldr	r0, [pc, #4]	; (800f028 <__sfp_lock_acquire+0x8>)
 800f022:	f000 b8d8 	b.w	800f1d6 <__retarget_lock_acquire_recursive>
 800f026:	bf00      	nop
 800f028:	24001145 	.word	0x24001145

0800f02c <__sfp_lock_release>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__sfp_lock_release+0x8>)
 800f02e:	f000 b8d3 	b.w	800f1d8 <__retarget_lock_release_recursive>
 800f032:	bf00      	nop
 800f034:	24001145 	.word	0x24001145

0800f038 <__sinit_lock_acquire>:
 800f038:	4801      	ldr	r0, [pc, #4]	; (800f040 <__sinit_lock_acquire+0x8>)
 800f03a:	f000 b8cc 	b.w	800f1d6 <__retarget_lock_acquire_recursive>
 800f03e:	bf00      	nop
 800f040:	24001146 	.word	0x24001146

0800f044 <__sinit_lock_release>:
 800f044:	4801      	ldr	r0, [pc, #4]	; (800f04c <__sinit_lock_release+0x8>)
 800f046:	f000 b8c7 	b.w	800f1d8 <__retarget_lock_release_recursive>
 800f04a:	bf00      	nop
 800f04c:	24001146 	.word	0x24001146

0800f050 <__sinit>:
 800f050:	b510      	push	{r4, lr}
 800f052:	4604      	mov	r4, r0
 800f054:	f7ff fff0 	bl	800f038 <__sinit_lock_acquire>
 800f058:	69a3      	ldr	r3, [r4, #24]
 800f05a:	b11b      	cbz	r3, 800f064 <__sinit+0x14>
 800f05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f060:	f7ff bff0 	b.w	800f044 <__sinit_lock_release>
 800f064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f068:	6523      	str	r3, [r4, #80]	; 0x50
 800f06a:	4b13      	ldr	r3, [pc, #76]	; (800f0b8 <__sinit+0x68>)
 800f06c:	4a13      	ldr	r2, [pc, #76]	; (800f0bc <__sinit+0x6c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	62a2      	str	r2, [r4, #40]	; 0x28
 800f072:	42a3      	cmp	r3, r4
 800f074:	bf04      	itt	eq
 800f076:	2301      	moveq	r3, #1
 800f078:	61a3      	streq	r3, [r4, #24]
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 f820 	bl	800f0c0 <__sfp>
 800f080:	6060      	str	r0, [r4, #4]
 800f082:	4620      	mov	r0, r4
 800f084:	f000 f81c 	bl	800f0c0 <__sfp>
 800f088:	60a0      	str	r0, [r4, #8]
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 f818 	bl	800f0c0 <__sfp>
 800f090:	2200      	movs	r2, #0
 800f092:	60e0      	str	r0, [r4, #12]
 800f094:	2104      	movs	r1, #4
 800f096:	6860      	ldr	r0, [r4, #4]
 800f098:	f7ff ff82 	bl	800efa0 <std>
 800f09c:	68a0      	ldr	r0, [r4, #8]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	2109      	movs	r1, #9
 800f0a2:	f7ff ff7d 	bl	800efa0 <std>
 800f0a6:	68e0      	ldr	r0, [r4, #12]
 800f0a8:	2202      	movs	r2, #2
 800f0aa:	2112      	movs	r1, #18
 800f0ac:	f7ff ff78 	bl	800efa0 <std>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	61a3      	str	r3, [r4, #24]
 800f0b4:	e7d2      	b.n	800f05c <__sinit+0xc>
 800f0b6:	bf00      	nop
 800f0b8:	08012228 	.word	0x08012228
 800f0bc:	0800efe9 	.word	0x0800efe9

0800f0c0 <__sfp>:
 800f0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c2:	4607      	mov	r7, r0
 800f0c4:	f7ff ffac 	bl	800f020 <__sfp_lock_acquire>
 800f0c8:	4b1e      	ldr	r3, [pc, #120]	; (800f144 <__sfp+0x84>)
 800f0ca:	681e      	ldr	r6, [r3, #0]
 800f0cc:	69b3      	ldr	r3, [r6, #24]
 800f0ce:	b913      	cbnz	r3, 800f0d6 <__sfp+0x16>
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f7ff ffbd 	bl	800f050 <__sinit>
 800f0d6:	3648      	adds	r6, #72	; 0x48
 800f0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	d503      	bpl.n	800f0e8 <__sfp+0x28>
 800f0e0:	6833      	ldr	r3, [r6, #0]
 800f0e2:	b30b      	cbz	r3, 800f128 <__sfp+0x68>
 800f0e4:	6836      	ldr	r6, [r6, #0]
 800f0e6:	e7f7      	b.n	800f0d8 <__sfp+0x18>
 800f0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f0ec:	b9d5      	cbnz	r5, 800f124 <__sfp+0x64>
 800f0ee:	4b16      	ldr	r3, [pc, #88]	; (800f148 <__sfp+0x88>)
 800f0f0:	60e3      	str	r3, [r4, #12]
 800f0f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0f6:	6665      	str	r5, [r4, #100]	; 0x64
 800f0f8:	f000 f86c 	bl	800f1d4 <__retarget_lock_init_recursive>
 800f0fc:	f7ff ff96 	bl	800f02c <__sfp_lock_release>
 800f100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f108:	6025      	str	r5, [r4, #0]
 800f10a:	61a5      	str	r5, [r4, #24]
 800f10c:	2208      	movs	r2, #8
 800f10e:	4629      	mov	r1, r5
 800f110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f114:	f000 f86f 	bl	800f1f6 <memset>
 800f118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f120:	4620      	mov	r0, r4
 800f122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f124:	3468      	adds	r4, #104	; 0x68
 800f126:	e7d9      	b.n	800f0dc <__sfp+0x1c>
 800f128:	2104      	movs	r1, #4
 800f12a:	4638      	mov	r0, r7
 800f12c:	f7ff ff62 	bl	800eff4 <__sfmoreglue>
 800f130:	4604      	mov	r4, r0
 800f132:	6030      	str	r0, [r6, #0]
 800f134:	2800      	cmp	r0, #0
 800f136:	d1d5      	bne.n	800f0e4 <__sfp+0x24>
 800f138:	f7ff ff78 	bl	800f02c <__sfp_lock_release>
 800f13c:	230c      	movs	r3, #12
 800f13e:	603b      	str	r3, [r7, #0]
 800f140:	e7ee      	b.n	800f120 <__sfp+0x60>
 800f142:	bf00      	nop
 800f144:	08012228 	.word	0x08012228
 800f148:	ffff0001 	.word	0xffff0001

0800f14c <_fwalk_reent>:
 800f14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f150:	4606      	mov	r6, r0
 800f152:	4688      	mov	r8, r1
 800f154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f158:	2700      	movs	r7, #0
 800f15a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f15e:	f1b9 0901 	subs.w	r9, r9, #1
 800f162:	d505      	bpl.n	800f170 <_fwalk_reent+0x24>
 800f164:	6824      	ldr	r4, [r4, #0]
 800f166:	2c00      	cmp	r4, #0
 800f168:	d1f7      	bne.n	800f15a <_fwalk_reent+0xe>
 800f16a:	4638      	mov	r0, r7
 800f16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f170:	89ab      	ldrh	r3, [r5, #12]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d907      	bls.n	800f186 <_fwalk_reent+0x3a>
 800f176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f17a:	3301      	adds	r3, #1
 800f17c:	d003      	beq.n	800f186 <_fwalk_reent+0x3a>
 800f17e:	4629      	mov	r1, r5
 800f180:	4630      	mov	r0, r6
 800f182:	47c0      	blx	r8
 800f184:	4307      	orrs	r7, r0
 800f186:	3568      	adds	r5, #104	; 0x68
 800f188:	e7e9      	b.n	800f15e <_fwalk_reent+0x12>
	...

0800f18c <__libc_init_array>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	4d0d      	ldr	r5, [pc, #52]	; (800f1c4 <__libc_init_array+0x38>)
 800f190:	4c0d      	ldr	r4, [pc, #52]	; (800f1c8 <__libc_init_array+0x3c>)
 800f192:	1b64      	subs	r4, r4, r5
 800f194:	10a4      	asrs	r4, r4, #2
 800f196:	2600      	movs	r6, #0
 800f198:	42a6      	cmp	r6, r4
 800f19a:	d109      	bne.n	800f1b0 <__libc_init_array+0x24>
 800f19c:	4d0b      	ldr	r5, [pc, #44]	; (800f1cc <__libc_init_array+0x40>)
 800f19e:	4c0c      	ldr	r4, [pc, #48]	; (800f1d0 <__libc_init_array+0x44>)
 800f1a0:	f002 fdf6 	bl	8011d90 <_init>
 800f1a4:	1b64      	subs	r4, r4, r5
 800f1a6:	10a4      	asrs	r4, r4, #2
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	42a6      	cmp	r6, r4
 800f1ac:	d105      	bne.n	800f1ba <__libc_init_array+0x2e>
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b4:	4798      	blx	r3
 800f1b6:	3601      	adds	r6, #1
 800f1b8:	e7ee      	b.n	800f198 <__libc_init_array+0xc>
 800f1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1be:	4798      	blx	r3
 800f1c0:	3601      	adds	r6, #1
 800f1c2:	e7f2      	b.n	800f1aa <__libc_init_array+0x1e>
 800f1c4:	080125ac 	.word	0x080125ac
 800f1c8:	080125ac 	.word	0x080125ac
 800f1cc:	080125ac 	.word	0x080125ac
 800f1d0:	080125b0 	.word	0x080125b0

0800f1d4 <__retarget_lock_init_recursive>:
 800f1d4:	4770      	bx	lr

0800f1d6 <__retarget_lock_acquire_recursive>:
 800f1d6:	4770      	bx	lr

0800f1d8 <__retarget_lock_release_recursive>:
 800f1d8:	4770      	bx	lr

0800f1da <memcpy>:
 800f1da:	440a      	add	r2, r1
 800f1dc:	4291      	cmp	r1, r2
 800f1de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f1e2:	d100      	bne.n	800f1e6 <memcpy+0xc>
 800f1e4:	4770      	bx	lr
 800f1e6:	b510      	push	{r4, lr}
 800f1e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1f0:	4291      	cmp	r1, r2
 800f1f2:	d1f9      	bne.n	800f1e8 <memcpy+0xe>
 800f1f4:	bd10      	pop	{r4, pc}

0800f1f6 <memset>:
 800f1f6:	4402      	add	r2, r0
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d100      	bne.n	800f200 <memset+0xa>
 800f1fe:	4770      	bx	lr
 800f200:	f803 1b01 	strb.w	r1, [r3], #1
 800f204:	e7f9      	b.n	800f1fa <memset+0x4>
	...

0800f208 <sbrk_aligned>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	4e0e      	ldr	r6, [pc, #56]	; (800f244 <sbrk_aligned+0x3c>)
 800f20c:	460c      	mov	r4, r1
 800f20e:	6831      	ldr	r1, [r6, #0]
 800f210:	4605      	mov	r5, r0
 800f212:	b911      	cbnz	r1, 800f21a <sbrk_aligned+0x12>
 800f214:	f000 fd5c 	bl	800fcd0 <_sbrk_r>
 800f218:	6030      	str	r0, [r6, #0]
 800f21a:	4621      	mov	r1, r4
 800f21c:	4628      	mov	r0, r5
 800f21e:	f000 fd57 	bl	800fcd0 <_sbrk_r>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	d00a      	beq.n	800f23c <sbrk_aligned+0x34>
 800f226:	1cc4      	adds	r4, r0, #3
 800f228:	f024 0403 	bic.w	r4, r4, #3
 800f22c:	42a0      	cmp	r0, r4
 800f22e:	d007      	beq.n	800f240 <sbrk_aligned+0x38>
 800f230:	1a21      	subs	r1, r4, r0
 800f232:	4628      	mov	r0, r5
 800f234:	f000 fd4c 	bl	800fcd0 <_sbrk_r>
 800f238:	3001      	adds	r0, #1
 800f23a:	d101      	bne.n	800f240 <sbrk_aligned+0x38>
 800f23c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f240:	4620      	mov	r0, r4
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	2400114c 	.word	0x2400114c

0800f248 <_malloc_r>:
 800f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24c:	1ccd      	adds	r5, r1, #3
 800f24e:	f025 0503 	bic.w	r5, r5, #3
 800f252:	3508      	adds	r5, #8
 800f254:	2d0c      	cmp	r5, #12
 800f256:	bf38      	it	cc
 800f258:	250c      	movcc	r5, #12
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	4607      	mov	r7, r0
 800f25e:	db01      	blt.n	800f264 <_malloc_r+0x1c>
 800f260:	42a9      	cmp	r1, r5
 800f262:	d905      	bls.n	800f270 <_malloc_r+0x28>
 800f264:	230c      	movs	r3, #12
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	2600      	movs	r6, #0
 800f26a:	4630      	mov	r0, r6
 800f26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f270:	4e2e      	ldr	r6, [pc, #184]	; (800f32c <_malloc_r+0xe4>)
 800f272:	f001 fdc5 	bl	8010e00 <__malloc_lock>
 800f276:	6833      	ldr	r3, [r6, #0]
 800f278:	461c      	mov	r4, r3
 800f27a:	bb34      	cbnz	r4, 800f2ca <_malloc_r+0x82>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4638      	mov	r0, r7
 800f280:	f7ff ffc2 	bl	800f208 <sbrk_aligned>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	4604      	mov	r4, r0
 800f288:	d14d      	bne.n	800f326 <_malloc_r+0xde>
 800f28a:	6834      	ldr	r4, [r6, #0]
 800f28c:	4626      	mov	r6, r4
 800f28e:	2e00      	cmp	r6, #0
 800f290:	d140      	bne.n	800f314 <_malloc_r+0xcc>
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	4631      	mov	r1, r6
 800f296:	4638      	mov	r0, r7
 800f298:	eb04 0803 	add.w	r8, r4, r3
 800f29c:	f000 fd18 	bl	800fcd0 <_sbrk_r>
 800f2a0:	4580      	cmp	r8, r0
 800f2a2:	d13a      	bne.n	800f31a <_malloc_r+0xd2>
 800f2a4:	6821      	ldr	r1, [r4, #0]
 800f2a6:	3503      	adds	r5, #3
 800f2a8:	1a6d      	subs	r5, r5, r1
 800f2aa:	f025 0503 	bic.w	r5, r5, #3
 800f2ae:	3508      	adds	r5, #8
 800f2b0:	2d0c      	cmp	r5, #12
 800f2b2:	bf38      	it	cc
 800f2b4:	250c      	movcc	r5, #12
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ffa5 	bl	800f208 <sbrk_aligned>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d02b      	beq.n	800f31a <_malloc_r+0xd2>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	442b      	add	r3, r5
 800f2c6:	6023      	str	r3, [r4, #0]
 800f2c8:	e00e      	b.n	800f2e8 <_malloc_r+0xa0>
 800f2ca:	6822      	ldr	r2, [r4, #0]
 800f2cc:	1b52      	subs	r2, r2, r5
 800f2ce:	d41e      	bmi.n	800f30e <_malloc_r+0xc6>
 800f2d0:	2a0b      	cmp	r2, #11
 800f2d2:	d916      	bls.n	800f302 <_malloc_r+0xba>
 800f2d4:	1961      	adds	r1, r4, r5
 800f2d6:	42a3      	cmp	r3, r4
 800f2d8:	6025      	str	r5, [r4, #0]
 800f2da:	bf18      	it	ne
 800f2dc:	6059      	strne	r1, [r3, #4]
 800f2de:	6863      	ldr	r3, [r4, #4]
 800f2e0:	bf08      	it	eq
 800f2e2:	6031      	streq	r1, [r6, #0]
 800f2e4:	5162      	str	r2, [r4, r5]
 800f2e6:	604b      	str	r3, [r1, #4]
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f104 060b 	add.w	r6, r4, #11
 800f2ee:	f001 fd8d 	bl	8010e0c <__malloc_unlock>
 800f2f2:	f026 0607 	bic.w	r6, r6, #7
 800f2f6:	1d23      	adds	r3, r4, #4
 800f2f8:	1af2      	subs	r2, r6, r3
 800f2fa:	d0b6      	beq.n	800f26a <_malloc_r+0x22>
 800f2fc:	1b9b      	subs	r3, r3, r6
 800f2fe:	50a3      	str	r3, [r4, r2]
 800f300:	e7b3      	b.n	800f26a <_malloc_r+0x22>
 800f302:	6862      	ldr	r2, [r4, #4]
 800f304:	42a3      	cmp	r3, r4
 800f306:	bf0c      	ite	eq
 800f308:	6032      	streq	r2, [r6, #0]
 800f30a:	605a      	strne	r2, [r3, #4]
 800f30c:	e7ec      	b.n	800f2e8 <_malloc_r+0xa0>
 800f30e:	4623      	mov	r3, r4
 800f310:	6864      	ldr	r4, [r4, #4]
 800f312:	e7b2      	b.n	800f27a <_malloc_r+0x32>
 800f314:	4634      	mov	r4, r6
 800f316:	6876      	ldr	r6, [r6, #4]
 800f318:	e7b9      	b.n	800f28e <_malloc_r+0x46>
 800f31a:	230c      	movs	r3, #12
 800f31c:	603b      	str	r3, [r7, #0]
 800f31e:	4638      	mov	r0, r7
 800f320:	f001 fd74 	bl	8010e0c <__malloc_unlock>
 800f324:	e7a1      	b.n	800f26a <_malloc_r+0x22>
 800f326:	6025      	str	r5, [r4, #0]
 800f328:	e7de      	b.n	800f2e8 <_malloc_r+0xa0>
 800f32a:	bf00      	nop
 800f32c:	24001148 	.word	0x24001148

0800f330 <__cvt>:
 800f330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f332:	ed2d 8b02 	vpush	{d8}
 800f336:	eeb0 8b40 	vmov.f64	d8, d0
 800f33a:	b085      	sub	sp, #20
 800f33c:	4617      	mov	r7, r2
 800f33e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f340:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f342:	ee18 2a90 	vmov	r2, s17
 800f346:	f025 0520 	bic.w	r5, r5, #32
 800f34a:	2a00      	cmp	r2, #0
 800f34c:	bfb6      	itet	lt
 800f34e:	222d      	movlt	r2, #45	; 0x2d
 800f350:	2200      	movge	r2, #0
 800f352:	eeb1 8b40 	vneglt.f64	d8, d0
 800f356:	2d46      	cmp	r5, #70	; 0x46
 800f358:	460c      	mov	r4, r1
 800f35a:	701a      	strb	r2, [r3, #0]
 800f35c:	d004      	beq.n	800f368 <__cvt+0x38>
 800f35e:	2d45      	cmp	r5, #69	; 0x45
 800f360:	d100      	bne.n	800f364 <__cvt+0x34>
 800f362:	3401      	adds	r4, #1
 800f364:	2102      	movs	r1, #2
 800f366:	e000      	b.n	800f36a <__cvt+0x3a>
 800f368:	2103      	movs	r1, #3
 800f36a:	ab03      	add	r3, sp, #12
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	ab02      	add	r3, sp, #8
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	4622      	mov	r2, r4
 800f374:	4633      	mov	r3, r6
 800f376:	eeb0 0b48 	vmov.f64	d0, d8
 800f37a:	f000 fe8d 	bl	8010098 <_dtoa_r>
 800f37e:	2d47      	cmp	r5, #71	; 0x47
 800f380:	d101      	bne.n	800f386 <__cvt+0x56>
 800f382:	07fb      	lsls	r3, r7, #31
 800f384:	d51a      	bpl.n	800f3bc <__cvt+0x8c>
 800f386:	2d46      	cmp	r5, #70	; 0x46
 800f388:	eb00 0204 	add.w	r2, r0, r4
 800f38c:	d10c      	bne.n	800f3a8 <__cvt+0x78>
 800f38e:	7803      	ldrb	r3, [r0, #0]
 800f390:	2b30      	cmp	r3, #48	; 0x30
 800f392:	d107      	bne.n	800f3a4 <__cvt+0x74>
 800f394:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39c:	bf1c      	itt	ne
 800f39e:	f1c4 0401 	rsbne	r4, r4, #1
 800f3a2:	6034      	strne	r4, [r6, #0]
 800f3a4:	6833      	ldr	r3, [r6, #0]
 800f3a6:	441a      	add	r2, r3
 800f3a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b0:	bf08      	it	eq
 800f3b2:	9203      	streq	r2, [sp, #12]
 800f3b4:	2130      	movs	r1, #48	; 0x30
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d307      	bcc.n	800f3cc <__cvt+0x9c>
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3c0:	1a1b      	subs	r3, r3, r0
 800f3c2:	6013      	str	r3, [r2, #0]
 800f3c4:	b005      	add	sp, #20
 800f3c6:	ecbd 8b02 	vpop	{d8}
 800f3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3cc:	1c5c      	adds	r4, r3, #1
 800f3ce:	9403      	str	r4, [sp, #12]
 800f3d0:	7019      	strb	r1, [r3, #0]
 800f3d2:	e7f0      	b.n	800f3b6 <__cvt+0x86>

0800f3d4 <__exponent>:
 800f3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2900      	cmp	r1, #0
 800f3da:	bfb8      	it	lt
 800f3dc:	4249      	neglt	r1, r1
 800f3de:	f803 2b02 	strb.w	r2, [r3], #2
 800f3e2:	bfb4      	ite	lt
 800f3e4:	222d      	movlt	r2, #45	; 0x2d
 800f3e6:	222b      	movge	r2, #43	; 0x2b
 800f3e8:	2909      	cmp	r1, #9
 800f3ea:	7042      	strb	r2, [r0, #1]
 800f3ec:	dd2a      	ble.n	800f444 <__exponent+0x70>
 800f3ee:	f10d 0407 	add.w	r4, sp, #7
 800f3f2:	46a4      	mov	ip, r4
 800f3f4:	270a      	movs	r7, #10
 800f3f6:	46a6      	mov	lr, r4
 800f3f8:	460a      	mov	r2, r1
 800f3fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800f3fe:	fb07 1516 	mls	r5, r7, r6, r1
 800f402:	3530      	adds	r5, #48	; 0x30
 800f404:	2a63      	cmp	r2, #99	; 0x63
 800f406:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f40a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f40e:	4631      	mov	r1, r6
 800f410:	dcf1      	bgt.n	800f3f6 <__exponent+0x22>
 800f412:	3130      	adds	r1, #48	; 0x30
 800f414:	f1ae 0502 	sub.w	r5, lr, #2
 800f418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f41c:	1c44      	adds	r4, r0, #1
 800f41e:	4629      	mov	r1, r5
 800f420:	4561      	cmp	r1, ip
 800f422:	d30a      	bcc.n	800f43a <__exponent+0x66>
 800f424:	f10d 0209 	add.w	r2, sp, #9
 800f428:	eba2 020e 	sub.w	r2, r2, lr
 800f42c:	4565      	cmp	r5, ip
 800f42e:	bf88      	it	hi
 800f430:	2200      	movhi	r2, #0
 800f432:	4413      	add	r3, r2
 800f434:	1a18      	subs	r0, r3, r0
 800f436:	b003      	add	sp, #12
 800f438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f43e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f442:	e7ed      	b.n	800f420 <__exponent+0x4c>
 800f444:	2330      	movs	r3, #48	; 0x30
 800f446:	3130      	adds	r1, #48	; 0x30
 800f448:	7083      	strb	r3, [r0, #2]
 800f44a:	70c1      	strb	r1, [r0, #3]
 800f44c:	1d03      	adds	r3, r0, #4
 800f44e:	e7f1      	b.n	800f434 <__exponent+0x60>

0800f450 <_printf_float>:
 800f450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f454:	b08b      	sub	sp, #44	; 0x2c
 800f456:	460c      	mov	r4, r1
 800f458:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f45c:	4616      	mov	r6, r2
 800f45e:	461f      	mov	r7, r3
 800f460:	4605      	mov	r5, r0
 800f462:	f001 fc49 	bl	8010cf8 <_localeconv_r>
 800f466:	f8d0 b000 	ldr.w	fp, [r0]
 800f46a:	4658      	mov	r0, fp
 800f46c:	f7f0 ff38 	bl	80002e0 <strlen>
 800f470:	2300      	movs	r3, #0
 800f472:	9308      	str	r3, [sp, #32]
 800f474:	f8d8 3000 	ldr.w	r3, [r8]
 800f478:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f47c:	6822      	ldr	r2, [r4, #0]
 800f47e:	3307      	adds	r3, #7
 800f480:	f023 0307 	bic.w	r3, r3, #7
 800f484:	f103 0108 	add.w	r1, r3, #8
 800f488:	f8c8 1000 	str.w	r1, [r8]
 800f48c:	4682      	mov	sl, r0
 800f48e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f492:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f496:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f6f8 <_printf_float+0x2a8>
 800f49a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f49e:	eeb0 6bc0 	vabs.f64	d6, d0
 800f4a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4aa:	dd24      	ble.n	800f4f6 <_printf_float+0xa6>
 800f4ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b4:	d502      	bpl.n	800f4bc <_printf_float+0x6c>
 800f4b6:	232d      	movs	r3, #45	; 0x2d
 800f4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4bc:	4b90      	ldr	r3, [pc, #576]	; (800f700 <_printf_float+0x2b0>)
 800f4be:	4891      	ldr	r0, [pc, #580]	; (800f704 <_printf_float+0x2b4>)
 800f4c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f4c4:	bf94      	ite	ls
 800f4c6:	4698      	movls	r8, r3
 800f4c8:	4680      	movhi	r8, r0
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	6123      	str	r3, [r4, #16]
 800f4ce:	f022 0204 	bic.w	r2, r2, #4
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	6022      	str	r2, [r4, #0]
 800f4d6:	9304      	str	r3, [sp, #16]
 800f4d8:	9700      	str	r7, [sp, #0]
 800f4da:	4633      	mov	r3, r6
 800f4dc:	aa09      	add	r2, sp, #36	; 0x24
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 f9d3 	bl	800f88c <_printf_common>
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	f040 808a 	bne.w	800f600 <_printf_float+0x1b0>
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f0:	b00b      	add	sp, #44	; 0x2c
 800f4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f6:	eeb4 0b40 	vcmp.f64	d0, d0
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	d709      	bvc.n	800f514 <_printf_float+0xc4>
 800f500:	ee10 3a90 	vmov	r3, s1
 800f504:	2b00      	cmp	r3, #0
 800f506:	bfbc      	itt	lt
 800f508:	232d      	movlt	r3, #45	; 0x2d
 800f50a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f50e:	487e      	ldr	r0, [pc, #504]	; (800f708 <_printf_float+0x2b8>)
 800f510:	4b7e      	ldr	r3, [pc, #504]	; (800f70c <_printf_float+0x2bc>)
 800f512:	e7d5      	b.n	800f4c0 <_printf_float+0x70>
 800f514:	6863      	ldr	r3, [r4, #4]
 800f516:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f51a:	9104      	str	r1, [sp, #16]
 800f51c:	1c59      	adds	r1, r3, #1
 800f51e:	d13c      	bne.n	800f59a <_printf_float+0x14a>
 800f520:	2306      	movs	r3, #6
 800f522:	6063      	str	r3, [r4, #4]
 800f524:	2300      	movs	r3, #0
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	ab08      	add	r3, sp, #32
 800f52a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f52e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f532:	ab07      	add	r3, sp, #28
 800f534:	6861      	ldr	r1, [r4, #4]
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	6022      	str	r2, [r4, #0]
 800f53a:	f10d 031b 	add.w	r3, sp, #27
 800f53e:	4628      	mov	r0, r5
 800f540:	f7ff fef6 	bl	800f330 <__cvt>
 800f544:	9b04      	ldr	r3, [sp, #16]
 800f546:	9907      	ldr	r1, [sp, #28]
 800f548:	2b47      	cmp	r3, #71	; 0x47
 800f54a:	4680      	mov	r8, r0
 800f54c:	d108      	bne.n	800f560 <_printf_float+0x110>
 800f54e:	1cc8      	adds	r0, r1, #3
 800f550:	db02      	blt.n	800f558 <_printf_float+0x108>
 800f552:	6863      	ldr	r3, [r4, #4]
 800f554:	4299      	cmp	r1, r3
 800f556:	dd41      	ble.n	800f5dc <_printf_float+0x18c>
 800f558:	f1a9 0902 	sub.w	r9, r9, #2
 800f55c:	fa5f f989 	uxtb.w	r9, r9
 800f560:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f564:	d820      	bhi.n	800f5a8 <_printf_float+0x158>
 800f566:	3901      	subs	r1, #1
 800f568:	464a      	mov	r2, r9
 800f56a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f56e:	9107      	str	r1, [sp, #28]
 800f570:	f7ff ff30 	bl	800f3d4 <__exponent>
 800f574:	9a08      	ldr	r2, [sp, #32]
 800f576:	9004      	str	r0, [sp, #16]
 800f578:	1813      	adds	r3, r2, r0
 800f57a:	2a01      	cmp	r2, #1
 800f57c:	6123      	str	r3, [r4, #16]
 800f57e:	dc02      	bgt.n	800f586 <_printf_float+0x136>
 800f580:	6822      	ldr	r2, [r4, #0]
 800f582:	07d2      	lsls	r2, r2, #31
 800f584:	d501      	bpl.n	800f58a <_printf_float+0x13a>
 800f586:	3301      	adds	r3, #1
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0a2      	beq.n	800f4d8 <_printf_float+0x88>
 800f592:	232d      	movs	r3, #45	; 0x2d
 800f594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f598:	e79e      	b.n	800f4d8 <_printf_float+0x88>
 800f59a:	9904      	ldr	r1, [sp, #16]
 800f59c:	2947      	cmp	r1, #71	; 0x47
 800f59e:	d1c1      	bne.n	800f524 <_printf_float+0xd4>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1bf      	bne.n	800f524 <_printf_float+0xd4>
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e7bc      	b.n	800f522 <_printf_float+0xd2>
 800f5a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f5ac:	d118      	bne.n	800f5e0 <_printf_float+0x190>
 800f5ae:	2900      	cmp	r1, #0
 800f5b0:	6863      	ldr	r3, [r4, #4]
 800f5b2:	dd0b      	ble.n	800f5cc <_printf_float+0x17c>
 800f5b4:	6121      	str	r1, [r4, #16]
 800f5b6:	b913      	cbnz	r3, 800f5be <_printf_float+0x16e>
 800f5b8:	6822      	ldr	r2, [r4, #0]
 800f5ba:	07d0      	lsls	r0, r2, #31
 800f5bc:	d502      	bpl.n	800f5c4 <_printf_float+0x174>
 800f5be:	3301      	adds	r3, #1
 800f5c0:	440b      	add	r3, r1
 800f5c2:	6123      	str	r3, [r4, #16]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5c8:	9304      	str	r3, [sp, #16]
 800f5ca:	e7de      	b.n	800f58a <_printf_float+0x13a>
 800f5cc:	b913      	cbnz	r3, 800f5d4 <_printf_float+0x184>
 800f5ce:	6822      	ldr	r2, [r4, #0]
 800f5d0:	07d2      	lsls	r2, r2, #31
 800f5d2:	d501      	bpl.n	800f5d8 <_printf_float+0x188>
 800f5d4:	3302      	adds	r3, #2
 800f5d6:	e7f4      	b.n	800f5c2 <_printf_float+0x172>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e7f2      	b.n	800f5c2 <_printf_float+0x172>
 800f5dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f5e0:	9b08      	ldr	r3, [sp, #32]
 800f5e2:	4299      	cmp	r1, r3
 800f5e4:	db05      	blt.n	800f5f2 <_printf_float+0x1a2>
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	6121      	str	r1, [r4, #16]
 800f5ea:	07d8      	lsls	r0, r3, #31
 800f5ec:	d5ea      	bpl.n	800f5c4 <_printf_float+0x174>
 800f5ee:	1c4b      	adds	r3, r1, #1
 800f5f0:	e7e7      	b.n	800f5c2 <_printf_float+0x172>
 800f5f2:	2900      	cmp	r1, #0
 800f5f4:	bfd4      	ite	le
 800f5f6:	f1c1 0202 	rsble	r2, r1, #2
 800f5fa:	2201      	movgt	r2, #1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	e7e0      	b.n	800f5c2 <_printf_float+0x172>
 800f600:	6823      	ldr	r3, [r4, #0]
 800f602:	055a      	lsls	r2, r3, #21
 800f604:	d407      	bmi.n	800f616 <_printf_float+0x1c6>
 800f606:	6923      	ldr	r3, [r4, #16]
 800f608:	4642      	mov	r2, r8
 800f60a:	4631      	mov	r1, r6
 800f60c:	4628      	mov	r0, r5
 800f60e:	47b8      	blx	r7
 800f610:	3001      	adds	r0, #1
 800f612:	d12a      	bne.n	800f66a <_printf_float+0x21a>
 800f614:	e76a      	b.n	800f4ec <_printf_float+0x9c>
 800f616:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f61a:	f240 80e2 	bls.w	800f7e2 <_printf_float+0x392>
 800f61e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f622:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	d133      	bne.n	800f694 <_printf_float+0x244>
 800f62c:	4a38      	ldr	r2, [pc, #224]	; (800f710 <_printf_float+0x2c0>)
 800f62e:	2301      	movs	r3, #1
 800f630:	4631      	mov	r1, r6
 800f632:	4628      	mov	r0, r5
 800f634:	47b8      	blx	r7
 800f636:	3001      	adds	r0, #1
 800f638:	f43f af58 	beq.w	800f4ec <_printf_float+0x9c>
 800f63c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f640:	429a      	cmp	r2, r3
 800f642:	db02      	blt.n	800f64a <_printf_float+0x1fa>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	07d8      	lsls	r0, r3, #31
 800f648:	d50f      	bpl.n	800f66a <_printf_float+0x21a>
 800f64a:	4653      	mov	r3, sl
 800f64c:	465a      	mov	r2, fp
 800f64e:	4631      	mov	r1, r6
 800f650:	4628      	mov	r0, r5
 800f652:	47b8      	blx	r7
 800f654:	3001      	adds	r0, #1
 800f656:	f43f af49 	beq.w	800f4ec <_printf_float+0x9c>
 800f65a:	f04f 0800 	mov.w	r8, #0
 800f65e:	f104 091a 	add.w	r9, r4, #26
 800f662:	9b08      	ldr	r3, [sp, #32]
 800f664:	3b01      	subs	r3, #1
 800f666:	4543      	cmp	r3, r8
 800f668:	dc09      	bgt.n	800f67e <_printf_float+0x22e>
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	079b      	lsls	r3, r3, #30
 800f66e:	f100 8108 	bmi.w	800f882 <_printf_float+0x432>
 800f672:	68e0      	ldr	r0, [r4, #12]
 800f674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f676:	4298      	cmp	r0, r3
 800f678:	bfb8      	it	lt
 800f67a:	4618      	movlt	r0, r3
 800f67c:	e738      	b.n	800f4f0 <_printf_float+0xa0>
 800f67e:	2301      	movs	r3, #1
 800f680:	464a      	mov	r2, r9
 800f682:	4631      	mov	r1, r6
 800f684:	4628      	mov	r0, r5
 800f686:	47b8      	blx	r7
 800f688:	3001      	adds	r0, #1
 800f68a:	f43f af2f 	beq.w	800f4ec <_printf_float+0x9c>
 800f68e:	f108 0801 	add.w	r8, r8, #1
 800f692:	e7e6      	b.n	800f662 <_printf_float+0x212>
 800f694:	9b07      	ldr	r3, [sp, #28]
 800f696:	2b00      	cmp	r3, #0
 800f698:	dc3c      	bgt.n	800f714 <_printf_float+0x2c4>
 800f69a:	4a1d      	ldr	r2, [pc, #116]	; (800f710 <_printf_float+0x2c0>)
 800f69c:	2301      	movs	r3, #1
 800f69e:	4631      	mov	r1, r6
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	47b8      	blx	r7
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	f43f af21 	beq.w	800f4ec <_printf_float+0x9c>
 800f6aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	d102      	bne.n	800f6b8 <_printf_float+0x268>
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	07d9      	lsls	r1, r3, #31
 800f6b6:	d5d8      	bpl.n	800f66a <_printf_float+0x21a>
 800f6b8:	4653      	mov	r3, sl
 800f6ba:	465a      	mov	r2, fp
 800f6bc:	4631      	mov	r1, r6
 800f6be:	4628      	mov	r0, r5
 800f6c0:	47b8      	blx	r7
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	f43f af12 	beq.w	800f4ec <_printf_float+0x9c>
 800f6c8:	f04f 0900 	mov.w	r9, #0
 800f6cc:	f104 0a1a 	add.w	sl, r4, #26
 800f6d0:	9b07      	ldr	r3, [sp, #28]
 800f6d2:	425b      	negs	r3, r3
 800f6d4:	454b      	cmp	r3, r9
 800f6d6:	dc01      	bgt.n	800f6dc <_printf_float+0x28c>
 800f6d8:	9b08      	ldr	r3, [sp, #32]
 800f6da:	e795      	b.n	800f608 <_printf_float+0x1b8>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	4652      	mov	r2, sl
 800f6e0:	4631      	mov	r1, r6
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	47b8      	blx	r7
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	f43f af00 	beq.w	800f4ec <_printf_float+0x9c>
 800f6ec:	f109 0901 	add.w	r9, r9, #1
 800f6f0:	e7ee      	b.n	800f6d0 <_printf_float+0x280>
 800f6f2:	bf00      	nop
 800f6f4:	f3af 8000 	nop.w
 800f6f8:	ffffffff 	.word	0xffffffff
 800f6fc:	7fefffff 	.word	0x7fefffff
 800f700:	0801222c 	.word	0x0801222c
 800f704:	08012230 	.word	0x08012230
 800f708:	08012238 	.word	0x08012238
 800f70c:	08012234 	.word	0x08012234
 800f710:	0801223c 	.word	0x0801223c
 800f714:	9a08      	ldr	r2, [sp, #32]
 800f716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f718:	429a      	cmp	r2, r3
 800f71a:	bfa8      	it	ge
 800f71c:	461a      	movge	r2, r3
 800f71e:	2a00      	cmp	r2, #0
 800f720:	4691      	mov	r9, r2
 800f722:	dc38      	bgt.n	800f796 <_printf_float+0x346>
 800f724:	2300      	movs	r3, #0
 800f726:	9305      	str	r3, [sp, #20]
 800f728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f72c:	f104 021a 	add.w	r2, r4, #26
 800f730:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f732:	9905      	ldr	r1, [sp, #20]
 800f734:	9304      	str	r3, [sp, #16]
 800f736:	eba3 0309 	sub.w	r3, r3, r9
 800f73a:	428b      	cmp	r3, r1
 800f73c:	dc33      	bgt.n	800f7a6 <_printf_float+0x356>
 800f73e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f742:	429a      	cmp	r2, r3
 800f744:	db3c      	blt.n	800f7c0 <_printf_float+0x370>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	07da      	lsls	r2, r3, #31
 800f74a:	d439      	bmi.n	800f7c0 <_printf_float+0x370>
 800f74c:	9b08      	ldr	r3, [sp, #32]
 800f74e:	9a04      	ldr	r2, [sp, #16]
 800f750:	9907      	ldr	r1, [sp, #28]
 800f752:	1a9a      	subs	r2, r3, r2
 800f754:	eba3 0901 	sub.w	r9, r3, r1
 800f758:	4591      	cmp	r9, r2
 800f75a:	bfa8      	it	ge
 800f75c:	4691      	movge	r9, r2
 800f75e:	f1b9 0f00 	cmp.w	r9, #0
 800f762:	dc35      	bgt.n	800f7d0 <_printf_float+0x380>
 800f764:	f04f 0800 	mov.w	r8, #0
 800f768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f76c:	f104 0a1a 	add.w	sl, r4, #26
 800f770:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f774:	1a9b      	subs	r3, r3, r2
 800f776:	eba3 0309 	sub.w	r3, r3, r9
 800f77a:	4543      	cmp	r3, r8
 800f77c:	f77f af75 	ble.w	800f66a <_printf_float+0x21a>
 800f780:	2301      	movs	r3, #1
 800f782:	4652      	mov	r2, sl
 800f784:	4631      	mov	r1, r6
 800f786:	4628      	mov	r0, r5
 800f788:	47b8      	blx	r7
 800f78a:	3001      	adds	r0, #1
 800f78c:	f43f aeae 	beq.w	800f4ec <_printf_float+0x9c>
 800f790:	f108 0801 	add.w	r8, r8, #1
 800f794:	e7ec      	b.n	800f770 <_printf_float+0x320>
 800f796:	4613      	mov	r3, r2
 800f798:	4631      	mov	r1, r6
 800f79a:	4642      	mov	r2, r8
 800f79c:	4628      	mov	r0, r5
 800f79e:	47b8      	blx	r7
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d1bf      	bne.n	800f724 <_printf_float+0x2d4>
 800f7a4:	e6a2      	b.n	800f4ec <_printf_float+0x9c>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	9204      	str	r2, [sp, #16]
 800f7ae:	47b8      	blx	r7
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	f43f ae9b 	beq.w	800f4ec <_printf_float+0x9c>
 800f7b6:	9b05      	ldr	r3, [sp, #20]
 800f7b8:	9a04      	ldr	r2, [sp, #16]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	9305      	str	r3, [sp, #20]
 800f7be:	e7b7      	b.n	800f730 <_printf_float+0x2e0>
 800f7c0:	4653      	mov	r3, sl
 800f7c2:	465a      	mov	r2, fp
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	47b8      	blx	r7
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	d1be      	bne.n	800f74c <_printf_float+0x2fc>
 800f7ce:	e68d      	b.n	800f4ec <_printf_float+0x9c>
 800f7d0:	9a04      	ldr	r2, [sp, #16]
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	4442      	add	r2, r8
 800f7d6:	4631      	mov	r1, r6
 800f7d8:	4628      	mov	r0, r5
 800f7da:	47b8      	blx	r7
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d1c1      	bne.n	800f764 <_printf_float+0x314>
 800f7e0:	e684      	b.n	800f4ec <_printf_float+0x9c>
 800f7e2:	9a08      	ldr	r2, [sp, #32]
 800f7e4:	2a01      	cmp	r2, #1
 800f7e6:	dc01      	bgt.n	800f7ec <_printf_float+0x39c>
 800f7e8:	07db      	lsls	r3, r3, #31
 800f7ea:	d537      	bpl.n	800f85c <_printf_float+0x40c>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	4642      	mov	r2, r8
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f ae78 	beq.w	800f4ec <_printf_float+0x9c>
 800f7fc:	4653      	mov	r3, sl
 800f7fe:	465a      	mov	r2, fp
 800f800:	4631      	mov	r1, r6
 800f802:	4628      	mov	r0, r5
 800f804:	47b8      	blx	r7
 800f806:	3001      	adds	r0, #1
 800f808:	f43f ae70 	beq.w	800f4ec <_printf_float+0x9c>
 800f80c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f810:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f818:	d01b      	beq.n	800f852 <_printf_float+0x402>
 800f81a:	9b08      	ldr	r3, [sp, #32]
 800f81c:	f108 0201 	add.w	r2, r8, #1
 800f820:	3b01      	subs	r3, #1
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	47b8      	blx	r7
 800f828:	3001      	adds	r0, #1
 800f82a:	d10e      	bne.n	800f84a <_printf_float+0x3fa>
 800f82c:	e65e      	b.n	800f4ec <_printf_float+0x9c>
 800f82e:	2301      	movs	r3, #1
 800f830:	464a      	mov	r2, r9
 800f832:	4631      	mov	r1, r6
 800f834:	4628      	mov	r0, r5
 800f836:	47b8      	blx	r7
 800f838:	3001      	adds	r0, #1
 800f83a:	f43f ae57 	beq.w	800f4ec <_printf_float+0x9c>
 800f83e:	f108 0801 	add.w	r8, r8, #1
 800f842:	9b08      	ldr	r3, [sp, #32]
 800f844:	3b01      	subs	r3, #1
 800f846:	4543      	cmp	r3, r8
 800f848:	dcf1      	bgt.n	800f82e <_printf_float+0x3de>
 800f84a:	9b04      	ldr	r3, [sp, #16]
 800f84c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f850:	e6db      	b.n	800f60a <_printf_float+0x1ba>
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	f104 091a 	add.w	r9, r4, #26
 800f85a:	e7f2      	b.n	800f842 <_printf_float+0x3f2>
 800f85c:	2301      	movs	r3, #1
 800f85e:	4642      	mov	r2, r8
 800f860:	e7df      	b.n	800f822 <_printf_float+0x3d2>
 800f862:	2301      	movs	r3, #1
 800f864:	464a      	mov	r2, r9
 800f866:	4631      	mov	r1, r6
 800f868:	4628      	mov	r0, r5
 800f86a:	47b8      	blx	r7
 800f86c:	3001      	adds	r0, #1
 800f86e:	f43f ae3d 	beq.w	800f4ec <_printf_float+0x9c>
 800f872:	f108 0801 	add.w	r8, r8, #1
 800f876:	68e3      	ldr	r3, [r4, #12]
 800f878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f87a:	1a5b      	subs	r3, r3, r1
 800f87c:	4543      	cmp	r3, r8
 800f87e:	dcf0      	bgt.n	800f862 <_printf_float+0x412>
 800f880:	e6f7      	b.n	800f672 <_printf_float+0x222>
 800f882:	f04f 0800 	mov.w	r8, #0
 800f886:	f104 0919 	add.w	r9, r4, #25
 800f88a:	e7f4      	b.n	800f876 <_printf_float+0x426>

0800f88c <_printf_common>:
 800f88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f890:	4616      	mov	r6, r2
 800f892:	4699      	mov	r9, r3
 800f894:	688a      	ldr	r2, [r1, #8]
 800f896:	690b      	ldr	r3, [r1, #16]
 800f898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f89c:	4293      	cmp	r3, r2
 800f89e:	bfb8      	it	lt
 800f8a0:	4613      	movlt	r3, r2
 800f8a2:	6033      	str	r3, [r6, #0]
 800f8a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	b10a      	cbz	r2, 800f8b2 <_printf_common+0x26>
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	6033      	str	r3, [r6, #0]
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	0699      	lsls	r1, r3, #26
 800f8b6:	bf42      	ittt	mi
 800f8b8:	6833      	ldrmi	r3, [r6, #0]
 800f8ba:	3302      	addmi	r3, #2
 800f8bc:	6033      	strmi	r3, [r6, #0]
 800f8be:	6825      	ldr	r5, [r4, #0]
 800f8c0:	f015 0506 	ands.w	r5, r5, #6
 800f8c4:	d106      	bne.n	800f8d4 <_printf_common+0x48>
 800f8c6:	f104 0a19 	add.w	sl, r4, #25
 800f8ca:	68e3      	ldr	r3, [r4, #12]
 800f8cc:	6832      	ldr	r2, [r6, #0]
 800f8ce:	1a9b      	subs	r3, r3, r2
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	dc26      	bgt.n	800f922 <_printf_common+0x96>
 800f8d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8d8:	1e13      	subs	r3, r2, #0
 800f8da:	6822      	ldr	r2, [r4, #0]
 800f8dc:	bf18      	it	ne
 800f8de:	2301      	movne	r3, #1
 800f8e0:	0692      	lsls	r2, r2, #26
 800f8e2:	d42b      	bmi.n	800f93c <_printf_common+0xb0>
 800f8e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8e8:	4649      	mov	r1, r9
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	47c0      	blx	r8
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	d01e      	beq.n	800f930 <_printf_common+0xa4>
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	68e5      	ldr	r5, [r4, #12]
 800f8f6:	6832      	ldr	r2, [r6, #0]
 800f8f8:	f003 0306 	and.w	r3, r3, #6
 800f8fc:	2b04      	cmp	r3, #4
 800f8fe:	bf08      	it	eq
 800f900:	1aad      	subeq	r5, r5, r2
 800f902:	68a3      	ldr	r3, [r4, #8]
 800f904:	6922      	ldr	r2, [r4, #16]
 800f906:	bf0c      	ite	eq
 800f908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f90c:	2500      	movne	r5, #0
 800f90e:	4293      	cmp	r3, r2
 800f910:	bfc4      	itt	gt
 800f912:	1a9b      	subgt	r3, r3, r2
 800f914:	18ed      	addgt	r5, r5, r3
 800f916:	2600      	movs	r6, #0
 800f918:	341a      	adds	r4, #26
 800f91a:	42b5      	cmp	r5, r6
 800f91c:	d11a      	bne.n	800f954 <_printf_common+0xc8>
 800f91e:	2000      	movs	r0, #0
 800f920:	e008      	b.n	800f934 <_printf_common+0xa8>
 800f922:	2301      	movs	r3, #1
 800f924:	4652      	mov	r2, sl
 800f926:	4649      	mov	r1, r9
 800f928:	4638      	mov	r0, r7
 800f92a:	47c0      	blx	r8
 800f92c:	3001      	adds	r0, #1
 800f92e:	d103      	bne.n	800f938 <_printf_common+0xac>
 800f930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f938:	3501      	adds	r5, #1
 800f93a:	e7c6      	b.n	800f8ca <_printf_common+0x3e>
 800f93c:	18e1      	adds	r1, r4, r3
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	2030      	movs	r0, #48	; 0x30
 800f942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f946:	4422      	add	r2, r4
 800f948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f94c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f950:	3302      	adds	r3, #2
 800f952:	e7c7      	b.n	800f8e4 <_printf_common+0x58>
 800f954:	2301      	movs	r3, #1
 800f956:	4622      	mov	r2, r4
 800f958:	4649      	mov	r1, r9
 800f95a:	4638      	mov	r0, r7
 800f95c:	47c0      	blx	r8
 800f95e:	3001      	adds	r0, #1
 800f960:	d0e6      	beq.n	800f930 <_printf_common+0xa4>
 800f962:	3601      	adds	r6, #1
 800f964:	e7d9      	b.n	800f91a <_printf_common+0x8e>
	...

0800f968 <_printf_i>:
 800f968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f96c:	7e0f      	ldrb	r7, [r1, #24]
 800f96e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f970:	2f78      	cmp	r7, #120	; 0x78
 800f972:	4691      	mov	r9, r2
 800f974:	4680      	mov	r8, r0
 800f976:	460c      	mov	r4, r1
 800f978:	469a      	mov	sl, r3
 800f97a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f97e:	d807      	bhi.n	800f990 <_printf_i+0x28>
 800f980:	2f62      	cmp	r7, #98	; 0x62
 800f982:	d80a      	bhi.n	800f99a <_printf_i+0x32>
 800f984:	2f00      	cmp	r7, #0
 800f986:	f000 80d8 	beq.w	800fb3a <_printf_i+0x1d2>
 800f98a:	2f58      	cmp	r7, #88	; 0x58
 800f98c:	f000 80a3 	beq.w	800fad6 <_printf_i+0x16e>
 800f990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f998:	e03a      	b.n	800fa10 <_printf_i+0xa8>
 800f99a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f99e:	2b15      	cmp	r3, #21
 800f9a0:	d8f6      	bhi.n	800f990 <_printf_i+0x28>
 800f9a2:	a101      	add	r1, pc, #4	; (adr r1, 800f9a8 <_printf_i+0x40>)
 800f9a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9a8:	0800fa01 	.word	0x0800fa01
 800f9ac:	0800fa15 	.word	0x0800fa15
 800f9b0:	0800f991 	.word	0x0800f991
 800f9b4:	0800f991 	.word	0x0800f991
 800f9b8:	0800f991 	.word	0x0800f991
 800f9bc:	0800f991 	.word	0x0800f991
 800f9c0:	0800fa15 	.word	0x0800fa15
 800f9c4:	0800f991 	.word	0x0800f991
 800f9c8:	0800f991 	.word	0x0800f991
 800f9cc:	0800f991 	.word	0x0800f991
 800f9d0:	0800f991 	.word	0x0800f991
 800f9d4:	0800fb21 	.word	0x0800fb21
 800f9d8:	0800fa45 	.word	0x0800fa45
 800f9dc:	0800fb03 	.word	0x0800fb03
 800f9e0:	0800f991 	.word	0x0800f991
 800f9e4:	0800f991 	.word	0x0800f991
 800f9e8:	0800fb43 	.word	0x0800fb43
 800f9ec:	0800f991 	.word	0x0800f991
 800f9f0:	0800fa45 	.word	0x0800fa45
 800f9f4:	0800f991 	.word	0x0800f991
 800f9f8:	0800f991 	.word	0x0800f991
 800f9fc:	0800fb0b 	.word	0x0800fb0b
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	1d1a      	adds	r2, r3, #4
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	602a      	str	r2, [r5, #0]
 800fa08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa10:	2301      	movs	r3, #1
 800fa12:	e0a3      	b.n	800fb5c <_printf_i+0x1f4>
 800fa14:	6820      	ldr	r0, [r4, #0]
 800fa16:	6829      	ldr	r1, [r5, #0]
 800fa18:	0606      	lsls	r6, r0, #24
 800fa1a:	f101 0304 	add.w	r3, r1, #4
 800fa1e:	d50a      	bpl.n	800fa36 <_printf_i+0xce>
 800fa20:	680e      	ldr	r6, [r1, #0]
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	2e00      	cmp	r6, #0
 800fa26:	da03      	bge.n	800fa30 <_printf_i+0xc8>
 800fa28:	232d      	movs	r3, #45	; 0x2d
 800fa2a:	4276      	negs	r6, r6
 800fa2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa30:	485e      	ldr	r0, [pc, #376]	; (800fbac <_printf_i+0x244>)
 800fa32:	230a      	movs	r3, #10
 800fa34:	e019      	b.n	800fa6a <_printf_i+0x102>
 800fa36:	680e      	ldr	r6, [r1, #0]
 800fa38:	602b      	str	r3, [r5, #0]
 800fa3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa3e:	bf18      	it	ne
 800fa40:	b236      	sxthne	r6, r6
 800fa42:	e7ef      	b.n	800fa24 <_printf_i+0xbc>
 800fa44:	682b      	ldr	r3, [r5, #0]
 800fa46:	6820      	ldr	r0, [r4, #0]
 800fa48:	1d19      	adds	r1, r3, #4
 800fa4a:	6029      	str	r1, [r5, #0]
 800fa4c:	0601      	lsls	r1, r0, #24
 800fa4e:	d501      	bpl.n	800fa54 <_printf_i+0xec>
 800fa50:	681e      	ldr	r6, [r3, #0]
 800fa52:	e002      	b.n	800fa5a <_printf_i+0xf2>
 800fa54:	0646      	lsls	r6, r0, #25
 800fa56:	d5fb      	bpl.n	800fa50 <_printf_i+0xe8>
 800fa58:	881e      	ldrh	r6, [r3, #0]
 800fa5a:	4854      	ldr	r0, [pc, #336]	; (800fbac <_printf_i+0x244>)
 800fa5c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa5e:	bf0c      	ite	eq
 800fa60:	2308      	moveq	r3, #8
 800fa62:	230a      	movne	r3, #10
 800fa64:	2100      	movs	r1, #0
 800fa66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa6a:	6865      	ldr	r5, [r4, #4]
 800fa6c:	60a5      	str	r5, [r4, #8]
 800fa6e:	2d00      	cmp	r5, #0
 800fa70:	bfa2      	ittt	ge
 800fa72:	6821      	ldrge	r1, [r4, #0]
 800fa74:	f021 0104 	bicge.w	r1, r1, #4
 800fa78:	6021      	strge	r1, [r4, #0]
 800fa7a:	b90e      	cbnz	r6, 800fa80 <_printf_i+0x118>
 800fa7c:	2d00      	cmp	r5, #0
 800fa7e:	d04d      	beq.n	800fb1c <_printf_i+0x1b4>
 800fa80:	4615      	mov	r5, r2
 800fa82:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa86:	fb03 6711 	mls	r7, r3, r1, r6
 800fa8a:	5dc7      	ldrb	r7, [r0, r7]
 800fa8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa90:	4637      	mov	r7, r6
 800fa92:	42bb      	cmp	r3, r7
 800fa94:	460e      	mov	r6, r1
 800fa96:	d9f4      	bls.n	800fa82 <_printf_i+0x11a>
 800fa98:	2b08      	cmp	r3, #8
 800fa9a:	d10b      	bne.n	800fab4 <_printf_i+0x14c>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	07de      	lsls	r6, r3, #31
 800faa0:	d508      	bpl.n	800fab4 <_printf_i+0x14c>
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	6861      	ldr	r1, [r4, #4]
 800faa6:	4299      	cmp	r1, r3
 800faa8:	bfde      	ittt	le
 800faaa:	2330      	movle	r3, #48	; 0x30
 800faac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fab0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fab4:	1b52      	subs	r2, r2, r5
 800fab6:	6122      	str	r2, [r4, #16]
 800fab8:	f8cd a000 	str.w	sl, [sp]
 800fabc:	464b      	mov	r3, r9
 800fabe:	aa03      	add	r2, sp, #12
 800fac0:	4621      	mov	r1, r4
 800fac2:	4640      	mov	r0, r8
 800fac4:	f7ff fee2 	bl	800f88c <_printf_common>
 800fac8:	3001      	adds	r0, #1
 800faca:	d14c      	bne.n	800fb66 <_printf_i+0x1fe>
 800facc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fad0:	b004      	add	sp, #16
 800fad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad6:	4835      	ldr	r0, [pc, #212]	; (800fbac <_printf_i+0x244>)
 800fad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fadc:	6829      	ldr	r1, [r5, #0]
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fae4:	6029      	str	r1, [r5, #0]
 800fae6:	061d      	lsls	r5, r3, #24
 800fae8:	d514      	bpl.n	800fb14 <_printf_i+0x1ac>
 800faea:	07df      	lsls	r7, r3, #31
 800faec:	bf44      	itt	mi
 800faee:	f043 0320 	orrmi.w	r3, r3, #32
 800faf2:	6023      	strmi	r3, [r4, #0]
 800faf4:	b91e      	cbnz	r6, 800fafe <_printf_i+0x196>
 800faf6:	6823      	ldr	r3, [r4, #0]
 800faf8:	f023 0320 	bic.w	r3, r3, #32
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	2310      	movs	r3, #16
 800fb00:	e7b0      	b.n	800fa64 <_printf_i+0xfc>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	f043 0320 	orr.w	r3, r3, #32
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	2378      	movs	r3, #120	; 0x78
 800fb0c:	4828      	ldr	r0, [pc, #160]	; (800fbb0 <_printf_i+0x248>)
 800fb0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb12:	e7e3      	b.n	800fadc <_printf_i+0x174>
 800fb14:	0659      	lsls	r1, r3, #25
 800fb16:	bf48      	it	mi
 800fb18:	b2b6      	uxthmi	r6, r6
 800fb1a:	e7e6      	b.n	800faea <_printf_i+0x182>
 800fb1c:	4615      	mov	r5, r2
 800fb1e:	e7bb      	b.n	800fa98 <_printf_i+0x130>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	6826      	ldr	r6, [r4, #0]
 800fb24:	6961      	ldr	r1, [r4, #20]
 800fb26:	1d18      	adds	r0, r3, #4
 800fb28:	6028      	str	r0, [r5, #0]
 800fb2a:	0635      	lsls	r5, r6, #24
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	d501      	bpl.n	800fb34 <_printf_i+0x1cc>
 800fb30:	6019      	str	r1, [r3, #0]
 800fb32:	e002      	b.n	800fb3a <_printf_i+0x1d2>
 800fb34:	0670      	lsls	r0, r6, #25
 800fb36:	d5fb      	bpl.n	800fb30 <_printf_i+0x1c8>
 800fb38:	8019      	strh	r1, [r3, #0]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6123      	str	r3, [r4, #16]
 800fb3e:	4615      	mov	r5, r2
 800fb40:	e7ba      	b.n	800fab8 <_printf_i+0x150>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	1d1a      	adds	r2, r3, #4
 800fb46:	602a      	str	r2, [r5, #0]
 800fb48:	681d      	ldr	r5, [r3, #0]
 800fb4a:	6862      	ldr	r2, [r4, #4]
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f7f0 fbce 	bl	80002f0 <memchr>
 800fb54:	b108      	cbz	r0, 800fb5a <_printf_i+0x1f2>
 800fb56:	1b40      	subs	r0, r0, r5
 800fb58:	6060      	str	r0, [r4, #4]
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	6123      	str	r3, [r4, #16]
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb64:	e7a8      	b.n	800fab8 <_printf_i+0x150>
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	462a      	mov	r2, r5
 800fb6a:	4649      	mov	r1, r9
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	47d0      	blx	sl
 800fb70:	3001      	adds	r0, #1
 800fb72:	d0ab      	beq.n	800facc <_printf_i+0x164>
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	079b      	lsls	r3, r3, #30
 800fb78:	d413      	bmi.n	800fba2 <_printf_i+0x23a>
 800fb7a:	68e0      	ldr	r0, [r4, #12]
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	4298      	cmp	r0, r3
 800fb80:	bfb8      	it	lt
 800fb82:	4618      	movlt	r0, r3
 800fb84:	e7a4      	b.n	800fad0 <_printf_i+0x168>
 800fb86:	2301      	movs	r3, #1
 800fb88:	4632      	mov	r2, r6
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	47d0      	blx	sl
 800fb90:	3001      	adds	r0, #1
 800fb92:	d09b      	beq.n	800facc <_printf_i+0x164>
 800fb94:	3501      	adds	r5, #1
 800fb96:	68e3      	ldr	r3, [r4, #12]
 800fb98:	9903      	ldr	r1, [sp, #12]
 800fb9a:	1a5b      	subs	r3, r3, r1
 800fb9c:	42ab      	cmp	r3, r5
 800fb9e:	dcf2      	bgt.n	800fb86 <_printf_i+0x21e>
 800fba0:	e7eb      	b.n	800fb7a <_printf_i+0x212>
 800fba2:	2500      	movs	r5, #0
 800fba4:	f104 0619 	add.w	r6, r4, #25
 800fba8:	e7f5      	b.n	800fb96 <_printf_i+0x22e>
 800fbaa:	bf00      	nop
 800fbac:	0801223e 	.word	0x0801223e
 800fbb0:	0801224f 	.word	0x0801224f

0800fbb4 <iprintf>:
 800fbb4:	b40f      	push	{r0, r1, r2, r3}
 800fbb6:	4b0a      	ldr	r3, [pc, #40]	; (800fbe0 <iprintf+0x2c>)
 800fbb8:	b513      	push	{r0, r1, r4, lr}
 800fbba:	681c      	ldr	r4, [r3, #0]
 800fbbc:	b124      	cbz	r4, 800fbc8 <iprintf+0x14>
 800fbbe:	69a3      	ldr	r3, [r4, #24]
 800fbc0:	b913      	cbnz	r3, 800fbc8 <iprintf+0x14>
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff fa44 	bl	800f050 <__sinit>
 800fbc8:	ab05      	add	r3, sp, #20
 800fbca:	9a04      	ldr	r2, [sp, #16]
 800fbcc:	68a1      	ldr	r1, [r4, #8]
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f001 fe8d 	bl	80118f0 <_vfiprintf_r>
 800fbd6:	b002      	add	sp, #8
 800fbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbdc:	b004      	add	sp, #16
 800fbde:	4770      	bx	lr
 800fbe0:	2400001c 	.word	0x2400001c

0800fbe4 <_puts_r>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	460e      	mov	r6, r1
 800fbe8:	4605      	mov	r5, r0
 800fbea:	b118      	cbz	r0, 800fbf4 <_puts_r+0x10>
 800fbec:	6983      	ldr	r3, [r0, #24]
 800fbee:	b90b      	cbnz	r3, 800fbf4 <_puts_r+0x10>
 800fbf0:	f7ff fa2e 	bl	800f050 <__sinit>
 800fbf4:	69ab      	ldr	r3, [r5, #24]
 800fbf6:	68ac      	ldr	r4, [r5, #8]
 800fbf8:	b913      	cbnz	r3, 800fc00 <_puts_r+0x1c>
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f7ff fa28 	bl	800f050 <__sinit>
 800fc00:	4b2c      	ldr	r3, [pc, #176]	; (800fcb4 <_puts_r+0xd0>)
 800fc02:	429c      	cmp	r4, r3
 800fc04:	d120      	bne.n	800fc48 <_puts_r+0x64>
 800fc06:	686c      	ldr	r4, [r5, #4]
 800fc08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc0a:	07db      	lsls	r3, r3, #31
 800fc0c:	d405      	bmi.n	800fc1a <_puts_r+0x36>
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	0598      	lsls	r0, r3, #22
 800fc12:	d402      	bmi.n	800fc1a <_puts_r+0x36>
 800fc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc16:	f7ff fade 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	0719      	lsls	r1, r3, #28
 800fc1e:	d51d      	bpl.n	800fc5c <_puts_r+0x78>
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	b1db      	cbz	r3, 800fc5c <_puts_r+0x78>
 800fc24:	3e01      	subs	r6, #1
 800fc26:	68a3      	ldr	r3, [r4, #8]
 800fc28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	60a3      	str	r3, [r4, #8]
 800fc30:	bb39      	cbnz	r1, 800fc82 <_puts_r+0x9e>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	da38      	bge.n	800fca8 <_puts_r+0xc4>
 800fc36:	4622      	mov	r2, r4
 800fc38:	210a      	movs	r1, #10
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f000 f8bc 	bl	800fdb8 <__swbuf_r>
 800fc40:	3001      	adds	r0, #1
 800fc42:	d011      	beq.n	800fc68 <_puts_r+0x84>
 800fc44:	250a      	movs	r5, #10
 800fc46:	e011      	b.n	800fc6c <_puts_r+0x88>
 800fc48:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <_puts_r+0xd4>)
 800fc4a:	429c      	cmp	r4, r3
 800fc4c:	d101      	bne.n	800fc52 <_puts_r+0x6e>
 800fc4e:	68ac      	ldr	r4, [r5, #8]
 800fc50:	e7da      	b.n	800fc08 <_puts_r+0x24>
 800fc52:	4b1a      	ldr	r3, [pc, #104]	; (800fcbc <_puts_r+0xd8>)
 800fc54:	429c      	cmp	r4, r3
 800fc56:	bf08      	it	eq
 800fc58:	68ec      	ldreq	r4, [r5, #12]
 800fc5a:	e7d5      	b.n	800fc08 <_puts_r+0x24>
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f000 f90e 	bl	800fe80 <__swsetup_r>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d0dd      	beq.n	800fc24 <_puts_r+0x40>
 800fc68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fc6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc6e:	07da      	lsls	r2, r3, #31
 800fc70:	d405      	bmi.n	800fc7e <_puts_r+0x9a>
 800fc72:	89a3      	ldrh	r3, [r4, #12]
 800fc74:	059b      	lsls	r3, r3, #22
 800fc76:	d402      	bmi.n	800fc7e <_puts_r+0x9a>
 800fc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc7a:	f7ff faad 	bl	800f1d8 <__retarget_lock_release_recursive>
 800fc7e:	4628      	mov	r0, r5
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	da04      	bge.n	800fc90 <_puts_r+0xac>
 800fc86:	69a2      	ldr	r2, [r4, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	dc06      	bgt.n	800fc9a <_puts_r+0xb6>
 800fc8c:	290a      	cmp	r1, #10
 800fc8e:	d004      	beq.n	800fc9a <_puts_r+0xb6>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	6022      	str	r2, [r4, #0]
 800fc96:	7019      	strb	r1, [r3, #0]
 800fc98:	e7c5      	b.n	800fc26 <_puts_r+0x42>
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f000 f88b 	bl	800fdb8 <__swbuf_r>
 800fca2:	3001      	adds	r0, #1
 800fca4:	d1bf      	bne.n	800fc26 <_puts_r+0x42>
 800fca6:	e7df      	b.n	800fc68 <_puts_r+0x84>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	250a      	movs	r5, #10
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	6022      	str	r2, [r4, #0]
 800fcb0:	701d      	strb	r5, [r3, #0]
 800fcb2:	e7db      	b.n	800fc6c <_puts_r+0x88>
 800fcb4:	080121e8 	.word	0x080121e8
 800fcb8:	08012208 	.word	0x08012208
 800fcbc:	080121c8 	.word	0x080121c8

0800fcc0 <puts>:
 800fcc0:	4b02      	ldr	r3, [pc, #8]	; (800fccc <puts+0xc>)
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	6818      	ldr	r0, [r3, #0]
 800fcc6:	f7ff bf8d 	b.w	800fbe4 <_puts_r>
 800fcca:	bf00      	nop
 800fccc:	2400001c 	.word	0x2400001c

0800fcd0 <_sbrk_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4d06      	ldr	r5, [pc, #24]	; (800fcec <_sbrk_r+0x1c>)
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	4608      	mov	r0, r1
 800fcda:	602b      	str	r3, [r5, #0]
 800fcdc:	f7f3 fa70 	bl	80031c0 <_sbrk>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_sbrk_r+0x1a>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_sbrk_r+0x1a>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	24001150 	.word	0x24001150

0800fcf0 <siprintf>:
 800fcf0:	b40e      	push	{r1, r2, r3}
 800fcf2:	b500      	push	{lr}
 800fcf4:	b09c      	sub	sp, #112	; 0x70
 800fcf6:	ab1d      	add	r3, sp, #116	; 0x74
 800fcf8:	9002      	str	r0, [sp, #8]
 800fcfa:	9006      	str	r0, [sp, #24]
 800fcfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd00:	4809      	ldr	r0, [pc, #36]	; (800fd28 <siprintf+0x38>)
 800fd02:	9107      	str	r1, [sp, #28]
 800fd04:	9104      	str	r1, [sp, #16]
 800fd06:	4909      	ldr	r1, [pc, #36]	; (800fd2c <siprintf+0x3c>)
 800fd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0c:	9105      	str	r1, [sp, #20]
 800fd0e:	6800      	ldr	r0, [r0, #0]
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	a902      	add	r1, sp, #8
 800fd14:	f001 fcc2 	bl	801169c <_svfiprintf_r>
 800fd18:	9b02      	ldr	r3, [sp, #8]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	b01c      	add	sp, #112	; 0x70
 800fd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd24:	b003      	add	sp, #12
 800fd26:	4770      	bx	lr
 800fd28:	2400001c 	.word	0x2400001c
 800fd2c:	ffff0208 	.word	0xffff0208

0800fd30 <__sread>:
 800fd30:	b510      	push	{r4, lr}
 800fd32:	460c      	mov	r4, r1
 800fd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd38:	f001 ff0a 	bl	8011b50 <_read_r>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	bfab      	itete	ge
 800fd40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd42:	89a3      	ldrhlt	r3, [r4, #12]
 800fd44:	181b      	addge	r3, r3, r0
 800fd46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd4a:	bfac      	ite	ge
 800fd4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd4e:	81a3      	strhlt	r3, [r4, #12]
 800fd50:	bd10      	pop	{r4, pc}

0800fd52 <__swrite>:
 800fd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd56:	461f      	mov	r7, r3
 800fd58:	898b      	ldrh	r3, [r1, #12]
 800fd5a:	05db      	lsls	r3, r3, #23
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	460c      	mov	r4, r1
 800fd60:	4616      	mov	r6, r2
 800fd62:	d505      	bpl.n	800fd70 <__swrite+0x1e>
 800fd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd68:	2302      	movs	r3, #2
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f000 ffc8 	bl	8010d00 <_lseek_r>
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd7a:	81a3      	strh	r3, [r4, #12]
 800fd7c:	4632      	mov	r2, r6
 800fd7e:	463b      	mov	r3, r7
 800fd80:	4628      	mov	r0, r5
 800fd82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd86:	f000 b869 	b.w	800fe5c <_write_r>

0800fd8a <__sseek>:
 800fd8a:	b510      	push	{r4, lr}
 800fd8c:	460c      	mov	r4, r1
 800fd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd92:	f000 ffb5 	bl	8010d00 <_lseek_r>
 800fd96:	1c43      	adds	r3, r0, #1
 800fd98:	89a3      	ldrh	r3, [r4, #12]
 800fd9a:	bf15      	itete	ne
 800fd9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fda2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fda6:	81a3      	strheq	r3, [r4, #12]
 800fda8:	bf18      	it	ne
 800fdaa:	81a3      	strhne	r3, [r4, #12]
 800fdac:	bd10      	pop	{r4, pc}

0800fdae <__sclose>:
 800fdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdb2:	f000 b8d3 	b.w	800ff5c <_close_r>
	...

0800fdb8 <__swbuf_r>:
 800fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdba:	460e      	mov	r6, r1
 800fdbc:	4614      	mov	r4, r2
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	b118      	cbz	r0, 800fdca <__swbuf_r+0x12>
 800fdc2:	6983      	ldr	r3, [r0, #24]
 800fdc4:	b90b      	cbnz	r3, 800fdca <__swbuf_r+0x12>
 800fdc6:	f7ff f943 	bl	800f050 <__sinit>
 800fdca:	4b21      	ldr	r3, [pc, #132]	; (800fe50 <__swbuf_r+0x98>)
 800fdcc:	429c      	cmp	r4, r3
 800fdce:	d12b      	bne.n	800fe28 <__swbuf_r+0x70>
 800fdd0:	686c      	ldr	r4, [r5, #4]
 800fdd2:	69a3      	ldr	r3, [r4, #24]
 800fdd4:	60a3      	str	r3, [r4, #8]
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	071a      	lsls	r2, r3, #28
 800fdda:	d52f      	bpl.n	800fe3c <__swbuf_r+0x84>
 800fddc:	6923      	ldr	r3, [r4, #16]
 800fdde:	b36b      	cbz	r3, 800fe3c <__swbuf_r+0x84>
 800fde0:	6923      	ldr	r3, [r4, #16]
 800fde2:	6820      	ldr	r0, [r4, #0]
 800fde4:	1ac0      	subs	r0, r0, r3
 800fde6:	6963      	ldr	r3, [r4, #20]
 800fde8:	b2f6      	uxtb	r6, r6
 800fdea:	4283      	cmp	r3, r0
 800fdec:	4637      	mov	r7, r6
 800fdee:	dc04      	bgt.n	800fdfa <__swbuf_r+0x42>
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f000 ff44 	bl	8010c80 <_fflush_r>
 800fdf8:	bb30      	cbnz	r0, 800fe48 <__swbuf_r+0x90>
 800fdfa:	68a3      	ldr	r3, [r4, #8]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	60a3      	str	r3, [r4, #8]
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	1c5a      	adds	r2, r3, #1
 800fe04:	6022      	str	r2, [r4, #0]
 800fe06:	701e      	strb	r6, [r3, #0]
 800fe08:	6963      	ldr	r3, [r4, #20]
 800fe0a:	3001      	adds	r0, #1
 800fe0c:	4283      	cmp	r3, r0
 800fe0e:	d004      	beq.n	800fe1a <__swbuf_r+0x62>
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	07db      	lsls	r3, r3, #31
 800fe14:	d506      	bpl.n	800fe24 <__swbuf_r+0x6c>
 800fe16:	2e0a      	cmp	r6, #10
 800fe18:	d104      	bne.n	800fe24 <__swbuf_r+0x6c>
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f000 ff2f 	bl	8010c80 <_fflush_r>
 800fe22:	b988      	cbnz	r0, 800fe48 <__swbuf_r+0x90>
 800fe24:	4638      	mov	r0, r7
 800fe26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe28:	4b0a      	ldr	r3, [pc, #40]	; (800fe54 <__swbuf_r+0x9c>)
 800fe2a:	429c      	cmp	r4, r3
 800fe2c:	d101      	bne.n	800fe32 <__swbuf_r+0x7a>
 800fe2e:	68ac      	ldr	r4, [r5, #8]
 800fe30:	e7cf      	b.n	800fdd2 <__swbuf_r+0x1a>
 800fe32:	4b09      	ldr	r3, [pc, #36]	; (800fe58 <__swbuf_r+0xa0>)
 800fe34:	429c      	cmp	r4, r3
 800fe36:	bf08      	it	eq
 800fe38:	68ec      	ldreq	r4, [r5, #12]
 800fe3a:	e7ca      	b.n	800fdd2 <__swbuf_r+0x1a>
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f81e 	bl	800fe80 <__swsetup_r>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0cb      	beq.n	800fde0 <__swbuf_r+0x28>
 800fe48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fe4c:	e7ea      	b.n	800fe24 <__swbuf_r+0x6c>
 800fe4e:	bf00      	nop
 800fe50:	080121e8 	.word	0x080121e8
 800fe54:	08012208 	.word	0x08012208
 800fe58:	080121c8 	.word	0x080121c8

0800fe5c <_write_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d07      	ldr	r5, [pc, #28]	; (800fe7c <_write_r+0x20>)
 800fe60:	4604      	mov	r4, r0
 800fe62:	4608      	mov	r0, r1
 800fe64:	4611      	mov	r1, r2
 800fe66:	2200      	movs	r2, #0
 800fe68:	602a      	str	r2, [r5, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	f7f3 f957 	bl	800311e <_write>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	d102      	bne.n	800fe7a <_write_r+0x1e>
 800fe74:	682b      	ldr	r3, [r5, #0]
 800fe76:	b103      	cbz	r3, 800fe7a <_write_r+0x1e>
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	24001150 	.word	0x24001150

0800fe80 <__swsetup_r>:
 800fe80:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <__swsetup_r+0xcc>)
 800fe82:	b570      	push	{r4, r5, r6, lr}
 800fe84:	681d      	ldr	r5, [r3, #0]
 800fe86:	4606      	mov	r6, r0
 800fe88:	460c      	mov	r4, r1
 800fe8a:	b125      	cbz	r5, 800fe96 <__swsetup_r+0x16>
 800fe8c:	69ab      	ldr	r3, [r5, #24]
 800fe8e:	b913      	cbnz	r3, 800fe96 <__swsetup_r+0x16>
 800fe90:	4628      	mov	r0, r5
 800fe92:	f7ff f8dd 	bl	800f050 <__sinit>
 800fe96:	4b2e      	ldr	r3, [pc, #184]	; (800ff50 <__swsetup_r+0xd0>)
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	d10f      	bne.n	800febc <__swsetup_r+0x3c>
 800fe9c:	686c      	ldr	r4, [r5, #4]
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fea4:	0719      	lsls	r1, r3, #28
 800fea6:	d42c      	bmi.n	800ff02 <__swsetup_r+0x82>
 800fea8:	06dd      	lsls	r5, r3, #27
 800feaa:	d411      	bmi.n	800fed0 <__swsetup_r+0x50>
 800feac:	2309      	movs	r3, #9
 800feae:	6033      	str	r3, [r6, #0]
 800feb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800feb4:	81a3      	strh	r3, [r4, #12]
 800feb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800feba:	e03e      	b.n	800ff3a <__swsetup_r+0xba>
 800febc:	4b25      	ldr	r3, [pc, #148]	; (800ff54 <__swsetup_r+0xd4>)
 800febe:	429c      	cmp	r4, r3
 800fec0:	d101      	bne.n	800fec6 <__swsetup_r+0x46>
 800fec2:	68ac      	ldr	r4, [r5, #8]
 800fec4:	e7eb      	b.n	800fe9e <__swsetup_r+0x1e>
 800fec6:	4b24      	ldr	r3, [pc, #144]	; (800ff58 <__swsetup_r+0xd8>)
 800fec8:	429c      	cmp	r4, r3
 800feca:	bf08      	it	eq
 800fecc:	68ec      	ldreq	r4, [r5, #12]
 800fece:	e7e6      	b.n	800fe9e <__swsetup_r+0x1e>
 800fed0:	0758      	lsls	r0, r3, #29
 800fed2:	d512      	bpl.n	800fefa <__swsetup_r+0x7a>
 800fed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fed6:	b141      	cbz	r1, 800feea <__swsetup_r+0x6a>
 800fed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fedc:	4299      	cmp	r1, r3
 800fede:	d002      	beq.n	800fee6 <__swsetup_r+0x66>
 800fee0:	4630      	mov	r0, r6
 800fee2:	f001 fb33 	bl	801154c <_free_r>
 800fee6:	2300      	movs	r3, #0
 800fee8:	6363      	str	r3, [r4, #52]	; 0x34
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	2300      	movs	r3, #0
 800fef4:	6063      	str	r3, [r4, #4]
 800fef6:	6923      	ldr	r3, [r4, #16]
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f043 0308 	orr.w	r3, r3, #8
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	6923      	ldr	r3, [r4, #16]
 800ff04:	b94b      	cbnz	r3, 800ff1a <__swsetup_r+0x9a>
 800ff06:	89a3      	ldrh	r3, [r4, #12]
 800ff08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff10:	d003      	beq.n	800ff1a <__swsetup_r+0x9a>
 800ff12:	4621      	mov	r1, r4
 800ff14:	4630      	mov	r0, r6
 800ff16:	f000 ff2b 	bl	8010d70 <__smakebuf_r>
 800ff1a:	89a0      	ldrh	r0, [r4, #12]
 800ff1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff20:	f010 0301 	ands.w	r3, r0, #1
 800ff24:	d00a      	beq.n	800ff3c <__swsetup_r+0xbc>
 800ff26:	2300      	movs	r3, #0
 800ff28:	60a3      	str	r3, [r4, #8]
 800ff2a:	6963      	ldr	r3, [r4, #20]
 800ff2c:	425b      	negs	r3, r3
 800ff2e:	61a3      	str	r3, [r4, #24]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	b943      	cbnz	r3, 800ff46 <__swsetup_r+0xc6>
 800ff34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff38:	d1ba      	bne.n	800feb0 <__swsetup_r+0x30>
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	0781      	lsls	r1, r0, #30
 800ff3e:	bf58      	it	pl
 800ff40:	6963      	ldrpl	r3, [r4, #20]
 800ff42:	60a3      	str	r3, [r4, #8]
 800ff44:	e7f4      	b.n	800ff30 <__swsetup_r+0xb0>
 800ff46:	2000      	movs	r0, #0
 800ff48:	e7f7      	b.n	800ff3a <__swsetup_r+0xba>
 800ff4a:	bf00      	nop
 800ff4c:	2400001c 	.word	0x2400001c
 800ff50:	080121e8 	.word	0x080121e8
 800ff54:	08012208 	.word	0x08012208
 800ff58:	080121c8 	.word	0x080121c8

0800ff5c <_close_r>:
 800ff5c:	b538      	push	{r3, r4, r5, lr}
 800ff5e:	4d06      	ldr	r5, [pc, #24]	; (800ff78 <_close_r+0x1c>)
 800ff60:	2300      	movs	r3, #0
 800ff62:	4604      	mov	r4, r0
 800ff64:	4608      	mov	r0, r1
 800ff66:	602b      	str	r3, [r5, #0]
 800ff68:	f7f3 f8f5 	bl	8003156 <_close>
 800ff6c:	1c43      	adds	r3, r0, #1
 800ff6e:	d102      	bne.n	800ff76 <_close_r+0x1a>
 800ff70:	682b      	ldr	r3, [r5, #0]
 800ff72:	b103      	cbz	r3, 800ff76 <_close_r+0x1a>
 800ff74:	6023      	str	r3, [r4, #0]
 800ff76:	bd38      	pop	{r3, r4, r5, pc}
 800ff78:	24001150 	.word	0x24001150

0800ff7c <quorem>:
 800ff7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	6903      	ldr	r3, [r0, #16]
 800ff82:	690c      	ldr	r4, [r1, #16]
 800ff84:	42a3      	cmp	r3, r4
 800ff86:	4607      	mov	r7, r0
 800ff88:	f2c0 8081 	blt.w	801008e <quorem+0x112>
 800ff8c:	3c01      	subs	r4, #1
 800ff8e:	f101 0814 	add.w	r8, r1, #20
 800ff92:	f100 0514 	add.w	r5, r0, #20
 800ff96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ffac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffb4:	d331      	bcc.n	801001a <quorem+0x9e>
 800ffb6:	f04f 0e00 	mov.w	lr, #0
 800ffba:	4640      	mov	r0, r8
 800ffbc:	46ac      	mov	ip, r5
 800ffbe:	46f2      	mov	sl, lr
 800ffc0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ffc4:	b293      	uxth	r3, r2
 800ffc6:	fb06 e303 	mla	r3, r6, r3, lr
 800ffca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	ebaa 0303 	sub.w	r3, sl, r3
 800ffd4:	f8dc a000 	ldr.w	sl, [ip]
 800ffd8:	0c12      	lsrs	r2, r2, #16
 800ffda:	fa13 f38a 	uxtah	r3, r3, sl
 800ffde:	fb06 e202 	mla	r2, r6, r2, lr
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	9b00      	ldr	r3, [sp, #0]
 800ffe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ffea:	b292      	uxth	r2, r2
 800ffec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fff4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fff8:	4581      	cmp	r9, r0
 800fffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fffe:	f84c 3b04 	str.w	r3, [ip], #4
 8010002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010006:	d2db      	bcs.n	800ffc0 <quorem+0x44>
 8010008:	f855 300b 	ldr.w	r3, [r5, fp]
 801000c:	b92b      	cbnz	r3, 801001a <quorem+0x9e>
 801000e:	9b01      	ldr	r3, [sp, #4]
 8010010:	3b04      	subs	r3, #4
 8010012:	429d      	cmp	r5, r3
 8010014:	461a      	mov	r2, r3
 8010016:	d32e      	bcc.n	8010076 <quorem+0xfa>
 8010018:	613c      	str	r4, [r7, #16]
 801001a:	4638      	mov	r0, r7
 801001c:	f001 f97e 	bl	801131c <__mcmp>
 8010020:	2800      	cmp	r0, #0
 8010022:	db24      	blt.n	801006e <quorem+0xf2>
 8010024:	3601      	adds	r6, #1
 8010026:	4628      	mov	r0, r5
 8010028:	f04f 0c00 	mov.w	ip, #0
 801002c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010030:	f8d0 e000 	ldr.w	lr, [r0]
 8010034:	b293      	uxth	r3, r2
 8010036:	ebac 0303 	sub.w	r3, ip, r3
 801003a:	0c12      	lsrs	r2, r2, #16
 801003c:	fa13 f38e 	uxtah	r3, r3, lr
 8010040:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010048:	b29b      	uxth	r3, r3
 801004a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801004e:	45c1      	cmp	r9, r8
 8010050:	f840 3b04 	str.w	r3, [r0], #4
 8010054:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010058:	d2e8      	bcs.n	801002c <quorem+0xb0>
 801005a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801005e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010062:	b922      	cbnz	r2, 801006e <quorem+0xf2>
 8010064:	3b04      	subs	r3, #4
 8010066:	429d      	cmp	r5, r3
 8010068:	461a      	mov	r2, r3
 801006a:	d30a      	bcc.n	8010082 <quorem+0x106>
 801006c:	613c      	str	r4, [r7, #16]
 801006e:	4630      	mov	r0, r6
 8010070:	b003      	add	sp, #12
 8010072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010076:	6812      	ldr	r2, [r2, #0]
 8010078:	3b04      	subs	r3, #4
 801007a:	2a00      	cmp	r2, #0
 801007c:	d1cc      	bne.n	8010018 <quorem+0x9c>
 801007e:	3c01      	subs	r4, #1
 8010080:	e7c7      	b.n	8010012 <quorem+0x96>
 8010082:	6812      	ldr	r2, [r2, #0]
 8010084:	3b04      	subs	r3, #4
 8010086:	2a00      	cmp	r2, #0
 8010088:	d1f0      	bne.n	801006c <quorem+0xf0>
 801008a:	3c01      	subs	r4, #1
 801008c:	e7eb      	b.n	8010066 <quorem+0xea>
 801008e:	2000      	movs	r0, #0
 8010090:	e7ee      	b.n	8010070 <quorem+0xf4>
 8010092:	0000      	movs	r0, r0
 8010094:	0000      	movs	r0, r0
	...

08010098 <_dtoa_r>:
 8010098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	ed2d 8b02 	vpush	{d8}
 80100a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80100a2:	b091      	sub	sp, #68	; 0x44
 80100a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100a8:	ec59 8b10 	vmov	r8, r9, d0
 80100ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80100ae:	9106      	str	r1, [sp, #24]
 80100b0:	4606      	mov	r6, r0
 80100b2:	9208      	str	r2, [sp, #32]
 80100b4:	930c      	str	r3, [sp, #48]	; 0x30
 80100b6:	b975      	cbnz	r5, 80100d6 <_dtoa_r+0x3e>
 80100b8:	2010      	movs	r0, #16
 80100ba:	f000 fe99 	bl	8010df0 <malloc>
 80100be:	4602      	mov	r2, r0
 80100c0:	6270      	str	r0, [r6, #36]	; 0x24
 80100c2:	b920      	cbnz	r0, 80100ce <_dtoa_r+0x36>
 80100c4:	4baa      	ldr	r3, [pc, #680]	; (8010370 <_dtoa_r+0x2d8>)
 80100c6:	21ea      	movs	r1, #234	; 0xea
 80100c8:	48aa      	ldr	r0, [pc, #680]	; (8010374 <_dtoa_r+0x2dc>)
 80100ca:	f001 fd53 	bl	8011b74 <__assert_func>
 80100ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80100d2:	6005      	str	r5, [r0, #0]
 80100d4:	60c5      	str	r5, [r0, #12]
 80100d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80100d8:	6819      	ldr	r1, [r3, #0]
 80100da:	b151      	cbz	r1, 80100f2 <_dtoa_r+0x5a>
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	604a      	str	r2, [r1, #4]
 80100e0:	2301      	movs	r3, #1
 80100e2:	4093      	lsls	r3, r2
 80100e4:	608b      	str	r3, [r1, #8]
 80100e6:	4630      	mov	r0, r6
 80100e8:	f000 fed6 	bl	8010e98 <_Bfree>
 80100ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	f1b9 0300 	subs.w	r3, r9, #0
 80100f6:	bfbb      	ittet	lt
 80100f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80100fc:	9303      	strlt	r3, [sp, #12]
 80100fe:	2300      	movge	r3, #0
 8010100:	2201      	movlt	r2, #1
 8010102:	bfac      	ite	ge
 8010104:	6023      	strge	r3, [r4, #0]
 8010106:	6022      	strlt	r2, [r4, #0]
 8010108:	4b9b      	ldr	r3, [pc, #620]	; (8010378 <_dtoa_r+0x2e0>)
 801010a:	9c03      	ldr	r4, [sp, #12]
 801010c:	43a3      	bics	r3, r4
 801010e:	d11c      	bne.n	801014a <_dtoa_r+0xb2>
 8010110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010112:	f242 730f 	movw	r3, #9999	; 0x270f
 8010116:	6013      	str	r3, [r2, #0]
 8010118:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801011c:	ea53 0308 	orrs.w	r3, r3, r8
 8010120:	f000 84fd 	beq.w	8010b1e <_dtoa_r+0xa86>
 8010124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010126:	b963      	cbnz	r3, 8010142 <_dtoa_r+0xaa>
 8010128:	4b94      	ldr	r3, [pc, #592]	; (801037c <_dtoa_r+0x2e4>)
 801012a:	e01f      	b.n	801016c <_dtoa_r+0xd4>
 801012c:	4b94      	ldr	r3, [pc, #592]	; (8010380 <_dtoa_r+0x2e8>)
 801012e:	9301      	str	r3, [sp, #4]
 8010130:	3308      	adds	r3, #8
 8010132:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010134:	6013      	str	r3, [r2, #0]
 8010136:	9801      	ldr	r0, [sp, #4]
 8010138:	b011      	add	sp, #68	; 0x44
 801013a:	ecbd 8b02 	vpop	{d8}
 801013e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010142:	4b8e      	ldr	r3, [pc, #568]	; (801037c <_dtoa_r+0x2e4>)
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	3303      	adds	r3, #3
 8010148:	e7f3      	b.n	8010132 <_dtoa_r+0x9a>
 801014a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801014e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010156:	d10b      	bne.n	8010170 <_dtoa_r+0xd8>
 8010158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801015a:	2301      	movs	r3, #1
 801015c:	6013      	str	r3, [r2, #0]
 801015e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 84d9 	beq.w	8010b18 <_dtoa_r+0xa80>
 8010166:	4887      	ldr	r0, [pc, #540]	; (8010384 <_dtoa_r+0x2ec>)
 8010168:	6018      	str	r0, [r3, #0]
 801016a:	1e43      	subs	r3, r0, #1
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	e7e2      	b.n	8010136 <_dtoa_r+0x9e>
 8010170:	a90f      	add	r1, sp, #60	; 0x3c
 8010172:	aa0e      	add	r2, sp, #56	; 0x38
 8010174:	4630      	mov	r0, r6
 8010176:	eeb0 0b48 	vmov.f64	d0, d8
 801017a:	f001 f975 	bl	8011468 <__d2b>
 801017e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010182:	4605      	mov	r5, r0
 8010184:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010186:	2900      	cmp	r1, #0
 8010188:	d046      	beq.n	8010218 <_dtoa_r+0x180>
 801018a:	ee18 4a90 	vmov	r4, s17
 801018e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010192:	ec53 2b18 	vmov	r2, r3, d8
 8010196:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801019a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801019e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80101a2:	2400      	movs	r4, #0
 80101a4:	ec43 2b16 	vmov	d6, r2, r3
 80101a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80101ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010358 <_dtoa_r+0x2c0>
 80101b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80101b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010360 <_dtoa_r+0x2c8>
 80101b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80101bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010368 <_dtoa_r+0x2d0>
 80101c0:	ee07 1a90 	vmov	s15, r1
 80101c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80101c8:	eeb0 7b46 	vmov.f64	d7, d6
 80101cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80101d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80101d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80101d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101dc:	ee16 ba90 	vmov	fp, s13
 80101e0:	940a      	str	r4, [sp, #40]	; 0x28
 80101e2:	d508      	bpl.n	80101f6 <_dtoa_r+0x15e>
 80101e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80101e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80101ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f0:	bf18      	it	ne
 80101f2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80101f6:	f1bb 0f16 	cmp.w	fp, #22
 80101fa:	d82f      	bhi.n	801025c <_dtoa_r+0x1c4>
 80101fc:	4b62      	ldr	r3, [pc, #392]	; (8010388 <_dtoa_r+0x2f0>)
 80101fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010202:	ed93 7b00 	vldr	d7, [r3]
 8010206:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	d501      	bpl.n	8010214 <_dtoa_r+0x17c>
 8010210:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010214:	2300      	movs	r3, #0
 8010216:	e022      	b.n	801025e <_dtoa_r+0x1c6>
 8010218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801021a:	4401      	add	r1, r0
 801021c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010220:	2b20      	cmp	r3, #32
 8010222:	bfc1      	itttt	gt
 8010224:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010228:	fa04 f303 	lslgt.w	r3, r4, r3
 801022c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010230:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010234:	bfd6      	itet	le
 8010236:	f1c3 0320 	rsble	r3, r3, #32
 801023a:	ea43 0808 	orrgt.w	r8, r3, r8
 801023e:	fa08 f803 	lslle.w	r8, r8, r3
 8010242:	ee07 8a90 	vmov	s15, r8
 8010246:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801024a:	3901      	subs	r1, #1
 801024c:	ee17 4a90 	vmov	r4, s15
 8010250:	ec53 2b17 	vmov	r2, r3, d7
 8010254:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010258:	2401      	movs	r4, #1
 801025a:	e7a3      	b.n	80101a4 <_dtoa_r+0x10c>
 801025c:	2301      	movs	r3, #1
 801025e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010260:	1a43      	subs	r3, r0, r1
 8010262:	1e5a      	subs	r2, r3, #1
 8010264:	bf45      	ittet	mi
 8010266:	f1c3 0301 	rsbmi	r3, r3, #1
 801026a:	9304      	strmi	r3, [sp, #16]
 801026c:	2300      	movpl	r3, #0
 801026e:	2300      	movmi	r3, #0
 8010270:	9205      	str	r2, [sp, #20]
 8010272:	bf54      	ite	pl
 8010274:	9304      	strpl	r3, [sp, #16]
 8010276:	9305      	strmi	r3, [sp, #20]
 8010278:	f1bb 0f00 	cmp.w	fp, #0
 801027c:	db18      	blt.n	80102b0 <_dtoa_r+0x218>
 801027e:	9b05      	ldr	r3, [sp, #20]
 8010280:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010284:	445b      	add	r3, fp
 8010286:	9305      	str	r3, [sp, #20]
 8010288:	2300      	movs	r3, #0
 801028a:	9a06      	ldr	r2, [sp, #24]
 801028c:	2a09      	cmp	r2, #9
 801028e:	d849      	bhi.n	8010324 <_dtoa_r+0x28c>
 8010290:	2a05      	cmp	r2, #5
 8010292:	bfc4      	itt	gt
 8010294:	3a04      	subgt	r2, #4
 8010296:	9206      	strgt	r2, [sp, #24]
 8010298:	9a06      	ldr	r2, [sp, #24]
 801029a:	f1a2 0202 	sub.w	r2, r2, #2
 801029e:	bfcc      	ite	gt
 80102a0:	2400      	movgt	r4, #0
 80102a2:	2401      	movle	r4, #1
 80102a4:	2a03      	cmp	r2, #3
 80102a6:	d848      	bhi.n	801033a <_dtoa_r+0x2a2>
 80102a8:	e8df f002 	tbb	[pc, r2]
 80102ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80102b0:	9b04      	ldr	r3, [sp, #16]
 80102b2:	2200      	movs	r2, #0
 80102b4:	eba3 030b 	sub.w	r3, r3, fp
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	9209      	str	r2, [sp, #36]	; 0x24
 80102bc:	f1cb 0300 	rsb	r3, fp, #0
 80102c0:	e7e3      	b.n	801028a <_dtoa_r+0x1f2>
 80102c2:	2200      	movs	r2, #0
 80102c4:	9207      	str	r2, [sp, #28]
 80102c6:	9a08      	ldr	r2, [sp, #32]
 80102c8:	2a00      	cmp	r2, #0
 80102ca:	dc39      	bgt.n	8010340 <_dtoa_r+0x2a8>
 80102cc:	f04f 0a01 	mov.w	sl, #1
 80102d0:	46d1      	mov	r9, sl
 80102d2:	4652      	mov	r2, sl
 80102d4:	f8cd a020 	str.w	sl, [sp, #32]
 80102d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80102da:	2100      	movs	r1, #0
 80102dc:	6079      	str	r1, [r7, #4]
 80102de:	2004      	movs	r0, #4
 80102e0:	f100 0c14 	add.w	ip, r0, #20
 80102e4:	4594      	cmp	ip, r2
 80102e6:	6879      	ldr	r1, [r7, #4]
 80102e8:	d92f      	bls.n	801034a <_dtoa_r+0x2b2>
 80102ea:	4630      	mov	r0, r6
 80102ec:	930d      	str	r3, [sp, #52]	; 0x34
 80102ee:	f000 fd93 	bl	8010e18 <_Balloc>
 80102f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102f4:	9001      	str	r0, [sp, #4]
 80102f6:	4602      	mov	r2, r0
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d149      	bne.n	8010390 <_dtoa_r+0x2f8>
 80102fc:	4b23      	ldr	r3, [pc, #140]	; (801038c <_dtoa_r+0x2f4>)
 80102fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010302:	e6e1      	b.n	80100c8 <_dtoa_r+0x30>
 8010304:	2201      	movs	r2, #1
 8010306:	e7dd      	b.n	80102c4 <_dtoa_r+0x22c>
 8010308:	2200      	movs	r2, #0
 801030a:	9207      	str	r2, [sp, #28]
 801030c:	9a08      	ldr	r2, [sp, #32]
 801030e:	eb0b 0a02 	add.w	sl, fp, r2
 8010312:	f10a 0901 	add.w	r9, sl, #1
 8010316:	464a      	mov	r2, r9
 8010318:	2a01      	cmp	r2, #1
 801031a:	bfb8      	it	lt
 801031c:	2201      	movlt	r2, #1
 801031e:	e7db      	b.n	80102d8 <_dtoa_r+0x240>
 8010320:	2201      	movs	r2, #1
 8010322:	e7f2      	b.n	801030a <_dtoa_r+0x272>
 8010324:	2401      	movs	r4, #1
 8010326:	2200      	movs	r2, #0
 8010328:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801032c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010330:	2100      	movs	r1, #0
 8010332:	46d1      	mov	r9, sl
 8010334:	2212      	movs	r2, #18
 8010336:	9108      	str	r1, [sp, #32]
 8010338:	e7ce      	b.n	80102d8 <_dtoa_r+0x240>
 801033a:	2201      	movs	r2, #1
 801033c:	9207      	str	r2, [sp, #28]
 801033e:	e7f5      	b.n	801032c <_dtoa_r+0x294>
 8010340:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010344:	46d1      	mov	r9, sl
 8010346:	4652      	mov	r2, sl
 8010348:	e7c6      	b.n	80102d8 <_dtoa_r+0x240>
 801034a:	3101      	adds	r1, #1
 801034c:	6079      	str	r1, [r7, #4]
 801034e:	0040      	lsls	r0, r0, #1
 8010350:	e7c6      	b.n	80102e0 <_dtoa_r+0x248>
 8010352:	bf00      	nop
 8010354:	f3af 8000 	nop.w
 8010358:	636f4361 	.word	0x636f4361
 801035c:	3fd287a7 	.word	0x3fd287a7
 8010360:	8b60c8b3 	.word	0x8b60c8b3
 8010364:	3fc68a28 	.word	0x3fc68a28
 8010368:	509f79fb 	.word	0x509f79fb
 801036c:	3fd34413 	.word	0x3fd34413
 8010370:	0801226d 	.word	0x0801226d
 8010374:	08012284 	.word	0x08012284
 8010378:	7ff00000 	.word	0x7ff00000
 801037c:	08012269 	.word	0x08012269
 8010380:	08012260 	.word	0x08012260
 8010384:	0801223d 	.word	0x0801223d
 8010388:	08012378 	.word	0x08012378
 801038c:	080122df 	.word	0x080122df
 8010390:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010392:	9901      	ldr	r1, [sp, #4]
 8010394:	6011      	str	r1, [r2, #0]
 8010396:	f1b9 0f0e 	cmp.w	r9, #14
 801039a:	d86c      	bhi.n	8010476 <_dtoa_r+0x3de>
 801039c:	2c00      	cmp	r4, #0
 801039e:	d06a      	beq.n	8010476 <_dtoa_r+0x3de>
 80103a0:	f1bb 0f00 	cmp.w	fp, #0
 80103a4:	f340 80a0 	ble.w	80104e8 <_dtoa_r+0x450>
 80103a8:	49c1      	ldr	r1, [pc, #772]	; (80106b0 <_dtoa_r+0x618>)
 80103aa:	f00b 020f 	and.w	r2, fp, #15
 80103ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80103b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80103b6:	ed92 7b00 	vldr	d7, [r2]
 80103ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80103be:	f000 8087 	beq.w	80104d0 <_dtoa_r+0x438>
 80103c2:	4abc      	ldr	r2, [pc, #752]	; (80106b4 <_dtoa_r+0x61c>)
 80103c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80103c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80103cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80103d0:	f001 010f 	and.w	r1, r1, #15
 80103d4:	2203      	movs	r2, #3
 80103d6:	48b7      	ldr	r0, [pc, #732]	; (80106b4 <_dtoa_r+0x61c>)
 80103d8:	2900      	cmp	r1, #0
 80103da:	d17b      	bne.n	80104d4 <_dtoa_r+0x43c>
 80103dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80103e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80103e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80103e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103ea:	2900      	cmp	r1, #0
 80103ec:	f000 80a2 	beq.w	8010534 <_dtoa_r+0x49c>
 80103f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80103f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80103fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010400:	f140 8098 	bpl.w	8010534 <_dtoa_r+0x49c>
 8010404:	f1b9 0f00 	cmp.w	r9, #0
 8010408:	f000 8094 	beq.w	8010534 <_dtoa_r+0x49c>
 801040c:	f1ba 0f00 	cmp.w	sl, #0
 8010410:	dd2f      	ble.n	8010472 <_dtoa_r+0x3da>
 8010412:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010416:	ee27 7b06 	vmul.f64	d7, d7, d6
 801041a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801041e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8010422:	3201      	adds	r2, #1
 8010424:	4650      	mov	r0, sl
 8010426:	ed9d 6b02 	vldr	d6, [sp, #8]
 801042a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801042e:	ee07 2a90 	vmov	s15, r2
 8010432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010436:	eea7 5b06 	vfma.f64	d5, d7, d6
 801043a:	ee15 4a90 	vmov	r4, s11
 801043e:	ec52 1b15 	vmov	r1, r2, d5
 8010442:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010446:	2800      	cmp	r0, #0
 8010448:	d177      	bne.n	801053a <_dtoa_r+0x4a2>
 801044a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801044e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010452:	ec42 1b17 	vmov	d7, r1, r2
 8010456:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045e:	f300 8263 	bgt.w	8010928 <_dtoa_r+0x890>
 8010462:	eeb1 7b47 	vneg.f64	d7, d7
 8010466:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	f100 8258 	bmi.w	8010922 <_dtoa_r+0x88a>
 8010472:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010478:	2a00      	cmp	r2, #0
 801047a:	f2c0 811d 	blt.w	80106b8 <_dtoa_r+0x620>
 801047e:	f1bb 0f0e 	cmp.w	fp, #14
 8010482:	f300 8119 	bgt.w	80106b8 <_dtoa_r+0x620>
 8010486:	4b8a      	ldr	r3, [pc, #552]	; (80106b0 <_dtoa_r+0x618>)
 8010488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801048c:	ed93 6b00 	vldr	d6, [r3]
 8010490:	9b08      	ldr	r3, [sp, #32]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f280 80b7 	bge.w	8010606 <_dtoa_r+0x56e>
 8010498:	f1b9 0f00 	cmp.w	r9, #0
 801049c:	f300 80b3 	bgt.w	8010606 <_dtoa_r+0x56e>
 80104a0:	f040 823f 	bne.w	8010922 <_dtoa_r+0x88a>
 80104a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80104a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80104ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b8:	464c      	mov	r4, r9
 80104ba:	464f      	mov	r7, r9
 80104bc:	f280 8215 	bge.w	80108ea <_dtoa_r+0x852>
 80104c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80104c4:	2331      	movs	r3, #49	; 0x31
 80104c6:	f808 3b01 	strb.w	r3, [r8], #1
 80104ca:	f10b 0b01 	add.w	fp, fp, #1
 80104ce:	e211      	b.n	80108f4 <_dtoa_r+0x85c>
 80104d0:	2202      	movs	r2, #2
 80104d2:	e780      	b.n	80103d6 <_dtoa_r+0x33e>
 80104d4:	07cc      	lsls	r4, r1, #31
 80104d6:	d504      	bpl.n	80104e2 <_dtoa_r+0x44a>
 80104d8:	ed90 6b00 	vldr	d6, [r0]
 80104dc:	3201      	adds	r2, #1
 80104de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104e2:	1049      	asrs	r1, r1, #1
 80104e4:	3008      	adds	r0, #8
 80104e6:	e777      	b.n	80103d8 <_dtoa_r+0x340>
 80104e8:	d022      	beq.n	8010530 <_dtoa_r+0x498>
 80104ea:	f1cb 0100 	rsb	r1, fp, #0
 80104ee:	4a70      	ldr	r2, [pc, #448]	; (80106b0 <_dtoa_r+0x618>)
 80104f0:	f001 000f 	and.w	r0, r1, #15
 80104f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80104f8:	ed92 7b00 	vldr	d7, [r2]
 80104fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010500:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010504:	486b      	ldr	r0, [pc, #428]	; (80106b4 <_dtoa_r+0x61c>)
 8010506:	1109      	asrs	r1, r1, #4
 8010508:	2400      	movs	r4, #0
 801050a:	2202      	movs	r2, #2
 801050c:	b929      	cbnz	r1, 801051a <_dtoa_r+0x482>
 801050e:	2c00      	cmp	r4, #0
 8010510:	f43f af6a 	beq.w	80103e8 <_dtoa_r+0x350>
 8010514:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010518:	e766      	b.n	80103e8 <_dtoa_r+0x350>
 801051a:	07cf      	lsls	r7, r1, #31
 801051c:	d505      	bpl.n	801052a <_dtoa_r+0x492>
 801051e:	ed90 6b00 	vldr	d6, [r0]
 8010522:	3201      	adds	r2, #1
 8010524:	2401      	movs	r4, #1
 8010526:	ee27 7b06 	vmul.f64	d7, d7, d6
 801052a:	1049      	asrs	r1, r1, #1
 801052c:	3008      	adds	r0, #8
 801052e:	e7ed      	b.n	801050c <_dtoa_r+0x474>
 8010530:	2202      	movs	r2, #2
 8010532:	e759      	b.n	80103e8 <_dtoa_r+0x350>
 8010534:	465f      	mov	r7, fp
 8010536:	4648      	mov	r0, r9
 8010538:	e775      	b.n	8010426 <_dtoa_r+0x38e>
 801053a:	ec42 1b17 	vmov	d7, r1, r2
 801053e:	4a5c      	ldr	r2, [pc, #368]	; (80106b0 <_dtoa_r+0x618>)
 8010540:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010544:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	1814      	adds	r4, r2, r0
 801054c:	9a07      	ldr	r2, [sp, #28]
 801054e:	b352      	cbz	r2, 80105a6 <_dtoa_r+0x50e>
 8010550:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010554:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010558:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801055c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010560:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010564:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010568:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801056c:	ee14 2a90 	vmov	r2, s9
 8010570:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010574:	3230      	adds	r2, #48	; 0x30
 8010576:	ee36 6b45 	vsub.f64	d6, d6, d5
 801057a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	f808 2b01 	strb.w	r2, [r8], #1
 8010586:	d439      	bmi.n	80105fc <_dtoa_r+0x564>
 8010588:	ee32 5b46 	vsub.f64	d5, d2, d6
 801058c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010594:	d472      	bmi.n	801067c <_dtoa_r+0x5e4>
 8010596:	45a0      	cmp	r8, r4
 8010598:	f43f af6b 	beq.w	8010472 <_dtoa_r+0x3da>
 801059c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80105a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80105a4:	e7e0      	b.n	8010568 <_dtoa_r+0x4d0>
 80105a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80105aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80105ae:	4621      	mov	r1, r4
 80105b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80105b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80105b8:	ee14 2a90 	vmov	r2, s9
 80105bc:	3230      	adds	r2, #48	; 0x30
 80105be:	f808 2b01 	strb.w	r2, [r8], #1
 80105c2:	45a0      	cmp	r8, r4
 80105c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80105c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80105cc:	d118      	bne.n	8010600 <_dtoa_r+0x568>
 80105ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80105d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80105d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105de:	dc4d      	bgt.n	801067c <_dtoa_r+0x5e4>
 80105e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80105e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ec:	f57f af41 	bpl.w	8010472 <_dtoa_r+0x3da>
 80105f0:	4688      	mov	r8, r1
 80105f2:	3901      	subs	r1, #1
 80105f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80105f8:	2b30      	cmp	r3, #48	; 0x30
 80105fa:	d0f9      	beq.n	80105f0 <_dtoa_r+0x558>
 80105fc:	46bb      	mov	fp, r7
 80105fe:	e02a      	b.n	8010656 <_dtoa_r+0x5be>
 8010600:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010604:	e7d6      	b.n	80105b4 <_dtoa_r+0x51c>
 8010606:	ed9d 7b02 	vldr	d7, [sp, #8]
 801060a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801060e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010612:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010616:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801061a:	ee15 3a10 	vmov	r3, s10
 801061e:	3330      	adds	r3, #48	; 0x30
 8010620:	f808 3b01 	strb.w	r3, [r8], #1
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	eba8 0303 	sub.w	r3, r8, r3
 801062a:	4599      	cmp	r9, r3
 801062c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010630:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010634:	d133      	bne.n	801069e <_dtoa_r+0x606>
 8010636:	ee37 7b07 	vadd.f64	d7, d7, d7
 801063a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010642:	dc1a      	bgt.n	801067a <_dtoa_r+0x5e2>
 8010644:	eeb4 7b46 	vcmp.f64	d7, d6
 8010648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064c:	d103      	bne.n	8010656 <_dtoa_r+0x5be>
 801064e:	ee15 3a10 	vmov	r3, s10
 8010652:	07d9      	lsls	r1, r3, #31
 8010654:	d411      	bmi.n	801067a <_dtoa_r+0x5e2>
 8010656:	4629      	mov	r1, r5
 8010658:	4630      	mov	r0, r6
 801065a:	f000 fc1d 	bl	8010e98 <_Bfree>
 801065e:	2300      	movs	r3, #0
 8010660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010662:	f888 3000 	strb.w	r3, [r8]
 8010666:	f10b 0301 	add.w	r3, fp, #1
 801066a:	6013      	str	r3, [r2, #0]
 801066c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801066e:	2b00      	cmp	r3, #0
 8010670:	f43f ad61 	beq.w	8010136 <_dtoa_r+0x9e>
 8010674:	f8c3 8000 	str.w	r8, [r3]
 8010678:	e55d      	b.n	8010136 <_dtoa_r+0x9e>
 801067a:	465f      	mov	r7, fp
 801067c:	4643      	mov	r3, r8
 801067e:	4698      	mov	r8, r3
 8010680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010684:	2a39      	cmp	r2, #57	; 0x39
 8010686:	d106      	bne.n	8010696 <_dtoa_r+0x5fe>
 8010688:	9a01      	ldr	r2, [sp, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d1f7      	bne.n	801067e <_dtoa_r+0x5e6>
 801068e:	9901      	ldr	r1, [sp, #4]
 8010690:	2230      	movs	r2, #48	; 0x30
 8010692:	3701      	adds	r7, #1
 8010694:	700a      	strb	r2, [r1, #0]
 8010696:	781a      	ldrb	r2, [r3, #0]
 8010698:	3201      	adds	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
 801069c:	e7ae      	b.n	80105fc <_dtoa_r+0x564>
 801069e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80106a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	d1b2      	bne.n	8010612 <_dtoa_r+0x57a>
 80106ac:	e7d3      	b.n	8010656 <_dtoa_r+0x5be>
 80106ae:	bf00      	nop
 80106b0:	08012378 	.word	0x08012378
 80106b4:	08012350 	.word	0x08012350
 80106b8:	9907      	ldr	r1, [sp, #28]
 80106ba:	2900      	cmp	r1, #0
 80106bc:	f000 80d0 	beq.w	8010860 <_dtoa_r+0x7c8>
 80106c0:	9906      	ldr	r1, [sp, #24]
 80106c2:	2901      	cmp	r1, #1
 80106c4:	f300 80b4 	bgt.w	8010830 <_dtoa_r+0x798>
 80106c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80106ca:	2900      	cmp	r1, #0
 80106cc:	f000 80ac 	beq.w	8010828 <_dtoa_r+0x790>
 80106d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80106d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80106d8:	461c      	mov	r4, r3
 80106da:	930a      	str	r3, [sp, #40]	; 0x28
 80106dc:	9b04      	ldr	r3, [sp, #16]
 80106de:	4413      	add	r3, r2
 80106e0:	9304      	str	r3, [sp, #16]
 80106e2:	9b05      	ldr	r3, [sp, #20]
 80106e4:	2101      	movs	r1, #1
 80106e6:	4413      	add	r3, r2
 80106e8:	4630      	mov	r0, r6
 80106ea:	9305      	str	r3, [sp, #20]
 80106ec:	f000 fc8c 	bl	8011008 <__i2b>
 80106f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f2:	4607      	mov	r7, r0
 80106f4:	f1b8 0f00 	cmp.w	r8, #0
 80106f8:	dd0d      	ble.n	8010716 <_dtoa_r+0x67e>
 80106fa:	9a05      	ldr	r2, [sp, #20]
 80106fc:	2a00      	cmp	r2, #0
 80106fe:	dd0a      	ble.n	8010716 <_dtoa_r+0x67e>
 8010700:	4542      	cmp	r2, r8
 8010702:	9904      	ldr	r1, [sp, #16]
 8010704:	bfa8      	it	ge
 8010706:	4642      	movge	r2, r8
 8010708:	1a89      	subs	r1, r1, r2
 801070a:	9104      	str	r1, [sp, #16]
 801070c:	9905      	ldr	r1, [sp, #20]
 801070e:	eba8 0802 	sub.w	r8, r8, r2
 8010712:	1a8a      	subs	r2, r1, r2
 8010714:	9205      	str	r2, [sp, #20]
 8010716:	b303      	cbz	r3, 801075a <_dtoa_r+0x6c2>
 8010718:	9a07      	ldr	r2, [sp, #28]
 801071a:	2a00      	cmp	r2, #0
 801071c:	f000 80a5 	beq.w	801086a <_dtoa_r+0x7d2>
 8010720:	2c00      	cmp	r4, #0
 8010722:	dd13      	ble.n	801074c <_dtoa_r+0x6b4>
 8010724:	4639      	mov	r1, r7
 8010726:	4622      	mov	r2, r4
 8010728:	4630      	mov	r0, r6
 801072a:	930d      	str	r3, [sp, #52]	; 0x34
 801072c:	f000 fd2c 	bl	8011188 <__pow5mult>
 8010730:	462a      	mov	r2, r5
 8010732:	4601      	mov	r1, r0
 8010734:	4607      	mov	r7, r0
 8010736:	4630      	mov	r0, r6
 8010738:	f000 fc7c 	bl	8011034 <__multiply>
 801073c:	4629      	mov	r1, r5
 801073e:	900a      	str	r0, [sp, #40]	; 0x28
 8010740:	4630      	mov	r0, r6
 8010742:	f000 fba9 	bl	8010e98 <_Bfree>
 8010746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801074a:	4615      	mov	r5, r2
 801074c:	1b1a      	subs	r2, r3, r4
 801074e:	d004      	beq.n	801075a <_dtoa_r+0x6c2>
 8010750:	4629      	mov	r1, r5
 8010752:	4630      	mov	r0, r6
 8010754:	f000 fd18 	bl	8011188 <__pow5mult>
 8010758:	4605      	mov	r5, r0
 801075a:	2101      	movs	r1, #1
 801075c:	4630      	mov	r0, r6
 801075e:	f000 fc53 	bl	8011008 <__i2b>
 8010762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010764:	2b00      	cmp	r3, #0
 8010766:	4604      	mov	r4, r0
 8010768:	f340 8081 	ble.w	801086e <_dtoa_r+0x7d6>
 801076c:	461a      	mov	r2, r3
 801076e:	4601      	mov	r1, r0
 8010770:	4630      	mov	r0, r6
 8010772:	f000 fd09 	bl	8011188 <__pow5mult>
 8010776:	9b06      	ldr	r3, [sp, #24]
 8010778:	2b01      	cmp	r3, #1
 801077a:	4604      	mov	r4, r0
 801077c:	dd7a      	ble.n	8010874 <_dtoa_r+0x7dc>
 801077e:	2300      	movs	r3, #0
 8010780:	930a      	str	r3, [sp, #40]	; 0x28
 8010782:	6922      	ldr	r2, [r4, #16]
 8010784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010788:	6910      	ldr	r0, [r2, #16]
 801078a:	f000 fbed 	bl	8010f68 <__hi0bits>
 801078e:	f1c0 0020 	rsb	r0, r0, #32
 8010792:	9b05      	ldr	r3, [sp, #20]
 8010794:	4418      	add	r0, r3
 8010796:	f010 001f 	ands.w	r0, r0, #31
 801079a:	f000 808c 	beq.w	80108b6 <_dtoa_r+0x81e>
 801079e:	f1c0 0220 	rsb	r2, r0, #32
 80107a2:	2a04      	cmp	r2, #4
 80107a4:	f340 8085 	ble.w	80108b2 <_dtoa_r+0x81a>
 80107a8:	f1c0 001c 	rsb	r0, r0, #28
 80107ac:	9b04      	ldr	r3, [sp, #16]
 80107ae:	4403      	add	r3, r0
 80107b0:	9304      	str	r3, [sp, #16]
 80107b2:	9b05      	ldr	r3, [sp, #20]
 80107b4:	4403      	add	r3, r0
 80107b6:	4480      	add	r8, r0
 80107b8:	9305      	str	r3, [sp, #20]
 80107ba:	9b04      	ldr	r3, [sp, #16]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd05      	ble.n	80107cc <_dtoa_r+0x734>
 80107c0:	4629      	mov	r1, r5
 80107c2:	461a      	mov	r2, r3
 80107c4:	4630      	mov	r0, r6
 80107c6:	f000 fd39 	bl	801123c <__lshift>
 80107ca:	4605      	mov	r5, r0
 80107cc:	9b05      	ldr	r3, [sp, #20]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	dd05      	ble.n	80107de <_dtoa_r+0x746>
 80107d2:	4621      	mov	r1, r4
 80107d4:	461a      	mov	r2, r3
 80107d6:	4630      	mov	r0, r6
 80107d8:	f000 fd30 	bl	801123c <__lshift>
 80107dc:	4604      	mov	r4, r0
 80107de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d06a      	beq.n	80108ba <_dtoa_r+0x822>
 80107e4:	4621      	mov	r1, r4
 80107e6:	4628      	mov	r0, r5
 80107e8:	f000 fd98 	bl	801131c <__mcmp>
 80107ec:	2800      	cmp	r0, #0
 80107ee:	da64      	bge.n	80108ba <_dtoa_r+0x822>
 80107f0:	2300      	movs	r3, #0
 80107f2:	4629      	mov	r1, r5
 80107f4:	220a      	movs	r2, #10
 80107f6:	4630      	mov	r0, r6
 80107f8:	f000 fb70 	bl	8010edc <__multadd>
 80107fc:	9b07      	ldr	r3, [sp, #28]
 80107fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010802:	4605      	mov	r5, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8191 	beq.w	8010b2c <_dtoa_r+0xa94>
 801080a:	4639      	mov	r1, r7
 801080c:	2300      	movs	r3, #0
 801080e:	220a      	movs	r2, #10
 8010810:	4630      	mov	r0, r6
 8010812:	f000 fb63 	bl	8010edc <__multadd>
 8010816:	f1ba 0f00 	cmp.w	sl, #0
 801081a:	4607      	mov	r7, r0
 801081c:	f300 808d 	bgt.w	801093a <_dtoa_r+0x8a2>
 8010820:	9b06      	ldr	r3, [sp, #24]
 8010822:	2b02      	cmp	r3, #2
 8010824:	dc50      	bgt.n	80108c8 <_dtoa_r+0x830>
 8010826:	e088      	b.n	801093a <_dtoa_r+0x8a2>
 8010828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801082a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801082e:	e751      	b.n	80106d4 <_dtoa_r+0x63c>
 8010830:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8010834:	42a3      	cmp	r3, r4
 8010836:	bfbf      	itttt	lt
 8010838:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801083a:	1ae3      	sublt	r3, r4, r3
 801083c:	18d2      	addlt	r2, r2, r3
 801083e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8010840:	bfb6      	itet	lt
 8010842:	4623      	movlt	r3, r4
 8010844:	1b1c      	subge	r4, r3, r4
 8010846:	2400      	movlt	r4, #0
 8010848:	f1b9 0f00 	cmp.w	r9, #0
 801084c:	bfb5      	itete	lt
 801084e:	9a04      	ldrlt	r2, [sp, #16]
 8010850:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8010854:	eba2 0809 	sublt.w	r8, r2, r9
 8010858:	464a      	movge	r2, r9
 801085a:	bfb8      	it	lt
 801085c:	2200      	movlt	r2, #0
 801085e:	e73c      	b.n	80106da <_dtoa_r+0x642>
 8010860:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010864:	9f07      	ldr	r7, [sp, #28]
 8010866:	461c      	mov	r4, r3
 8010868:	e744      	b.n	80106f4 <_dtoa_r+0x65c>
 801086a:	461a      	mov	r2, r3
 801086c:	e770      	b.n	8010750 <_dtoa_r+0x6b8>
 801086e:	9b06      	ldr	r3, [sp, #24]
 8010870:	2b01      	cmp	r3, #1
 8010872:	dc18      	bgt.n	80108a6 <_dtoa_r+0x80e>
 8010874:	9b02      	ldr	r3, [sp, #8]
 8010876:	b9b3      	cbnz	r3, 80108a6 <_dtoa_r+0x80e>
 8010878:	9b03      	ldr	r3, [sp, #12]
 801087a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801087e:	b9a2      	cbnz	r2, 80108aa <_dtoa_r+0x812>
 8010880:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010884:	0d12      	lsrs	r2, r2, #20
 8010886:	0512      	lsls	r2, r2, #20
 8010888:	b18a      	cbz	r2, 80108ae <_dtoa_r+0x816>
 801088a:	9b04      	ldr	r3, [sp, #16]
 801088c:	3301      	adds	r3, #1
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	9b05      	ldr	r3, [sp, #20]
 8010892:	3301      	adds	r3, #1
 8010894:	9305      	str	r3, [sp, #20]
 8010896:	2301      	movs	r3, #1
 8010898:	930a      	str	r3, [sp, #40]	; 0x28
 801089a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801089c:	2b00      	cmp	r3, #0
 801089e:	f47f af70 	bne.w	8010782 <_dtoa_r+0x6ea>
 80108a2:	2001      	movs	r0, #1
 80108a4:	e775      	b.n	8010792 <_dtoa_r+0x6fa>
 80108a6:	2300      	movs	r3, #0
 80108a8:	e7f6      	b.n	8010898 <_dtoa_r+0x800>
 80108aa:	9b02      	ldr	r3, [sp, #8]
 80108ac:	e7f4      	b.n	8010898 <_dtoa_r+0x800>
 80108ae:	920a      	str	r2, [sp, #40]	; 0x28
 80108b0:	e7f3      	b.n	801089a <_dtoa_r+0x802>
 80108b2:	d082      	beq.n	80107ba <_dtoa_r+0x722>
 80108b4:	4610      	mov	r0, r2
 80108b6:	301c      	adds	r0, #28
 80108b8:	e778      	b.n	80107ac <_dtoa_r+0x714>
 80108ba:	f1b9 0f00 	cmp.w	r9, #0
 80108be:	dc37      	bgt.n	8010930 <_dtoa_r+0x898>
 80108c0:	9b06      	ldr	r3, [sp, #24]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	dd34      	ble.n	8010930 <_dtoa_r+0x898>
 80108c6:	46ca      	mov	sl, r9
 80108c8:	f1ba 0f00 	cmp.w	sl, #0
 80108cc:	d10d      	bne.n	80108ea <_dtoa_r+0x852>
 80108ce:	4621      	mov	r1, r4
 80108d0:	4653      	mov	r3, sl
 80108d2:	2205      	movs	r2, #5
 80108d4:	4630      	mov	r0, r6
 80108d6:	f000 fb01 	bl	8010edc <__multadd>
 80108da:	4601      	mov	r1, r0
 80108dc:	4604      	mov	r4, r0
 80108de:	4628      	mov	r0, r5
 80108e0:	f000 fd1c 	bl	801131c <__mcmp>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f73f adeb 	bgt.w	80104c0 <_dtoa_r+0x428>
 80108ea:	9b08      	ldr	r3, [sp, #32]
 80108ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80108f0:	ea6f 0b03 	mvn.w	fp, r3
 80108f4:	f04f 0900 	mov.w	r9, #0
 80108f8:	4621      	mov	r1, r4
 80108fa:	4630      	mov	r0, r6
 80108fc:	f000 facc 	bl	8010e98 <_Bfree>
 8010900:	2f00      	cmp	r7, #0
 8010902:	f43f aea8 	beq.w	8010656 <_dtoa_r+0x5be>
 8010906:	f1b9 0f00 	cmp.w	r9, #0
 801090a:	d005      	beq.n	8010918 <_dtoa_r+0x880>
 801090c:	45b9      	cmp	r9, r7
 801090e:	d003      	beq.n	8010918 <_dtoa_r+0x880>
 8010910:	4649      	mov	r1, r9
 8010912:	4630      	mov	r0, r6
 8010914:	f000 fac0 	bl	8010e98 <_Bfree>
 8010918:	4639      	mov	r1, r7
 801091a:	4630      	mov	r0, r6
 801091c:	f000 fabc 	bl	8010e98 <_Bfree>
 8010920:	e699      	b.n	8010656 <_dtoa_r+0x5be>
 8010922:	2400      	movs	r4, #0
 8010924:	4627      	mov	r7, r4
 8010926:	e7e0      	b.n	80108ea <_dtoa_r+0x852>
 8010928:	46bb      	mov	fp, r7
 801092a:	4604      	mov	r4, r0
 801092c:	4607      	mov	r7, r0
 801092e:	e5c7      	b.n	80104c0 <_dtoa_r+0x428>
 8010930:	9b07      	ldr	r3, [sp, #28]
 8010932:	46ca      	mov	sl, r9
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 8100 	beq.w	8010b3a <_dtoa_r+0xaa2>
 801093a:	f1b8 0f00 	cmp.w	r8, #0
 801093e:	dd05      	ble.n	801094c <_dtoa_r+0x8b4>
 8010940:	4639      	mov	r1, r7
 8010942:	4642      	mov	r2, r8
 8010944:	4630      	mov	r0, r6
 8010946:	f000 fc79 	bl	801123c <__lshift>
 801094a:	4607      	mov	r7, r0
 801094c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	d05d      	beq.n	8010a0e <_dtoa_r+0x976>
 8010952:	6879      	ldr	r1, [r7, #4]
 8010954:	4630      	mov	r0, r6
 8010956:	f000 fa5f 	bl	8010e18 <_Balloc>
 801095a:	4680      	mov	r8, r0
 801095c:	b928      	cbnz	r0, 801096a <_dtoa_r+0x8d2>
 801095e:	4b82      	ldr	r3, [pc, #520]	; (8010b68 <_dtoa_r+0xad0>)
 8010960:	4602      	mov	r2, r0
 8010962:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010966:	f7ff bbaf 	b.w	80100c8 <_dtoa_r+0x30>
 801096a:	693a      	ldr	r2, [r7, #16]
 801096c:	3202      	adds	r2, #2
 801096e:	0092      	lsls	r2, r2, #2
 8010970:	f107 010c 	add.w	r1, r7, #12
 8010974:	300c      	adds	r0, #12
 8010976:	f7fe fc30 	bl	800f1da <memcpy>
 801097a:	2201      	movs	r2, #1
 801097c:	4641      	mov	r1, r8
 801097e:	4630      	mov	r0, r6
 8010980:	f000 fc5c 	bl	801123c <__lshift>
 8010984:	9b01      	ldr	r3, [sp, #4]
 8010986:	3301      	adds	r3, #1
 8010988:	9304      	str	r3, [sp, #16]
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	4453      	add	r3, sl
 801098e:	9308      	str	r3, [sp, #32]
 8010990:	9b02      	ldr	r3, [sp, #8]
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	46b9      	mov	r9, r7
 8010998:	9307      	str	r3, [sp, #28]
 801099a:	4607      	mov	r7, r0
 801099c:	9b04      	ldr	r3, [sp, #16]
 801099e:	4621      	mov	r1, r4
 80109a0:	3b01      	subs	r3, #1
 80109a2:	4628      	mov	r0, r5
 80109a4:	9302      	str	r3, [sp, #8]
 80109a6:	f7ff fae9 	bl	800ff7c <quorem>
 80109aa:	4603      	mov	r3, r0
 80109ac:	3330      	adds	r3, #48	; 0x30
 80109ae:	9005      	str	r0, [sp, #20]
 80109b0:	4649      	mov	r1, r9
 80109b2:	4628      	mov	r0, r5
 80109b4:	9309      	str	r3, [sp, #36]	; 0x24
 80109b6:	f000 fcb1 	bl	801131c <__mcmp>
 80109ba:	463a      	mov	r2, r7
 80109bc:	4682      	mov	sl, r0
 80109be:	4621      	mov	r1, r4
 80109c0:	4630      	mov	r0, r6
 80109c2:	f000 fcc7 	bl	8011354 <__mdiff>
 80109c6:	68c2      	ldr	r2, [r0, #12]
 80109c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ca:	4680      	mov	r8, r0
 80109cc:	bb0a      	cbnz	r2, 8010a12 <_dtoa_r+0x97a>
 80109ce:	4601      	mov	r1, r0
 80109d0:	4628      	mov	r0, r5
 80109d2:	f000 fca3 	bl	801131c <__mcmp>
 80109d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d8:	4602      	mov	r2, r0
 80109da:	4641      	mov	r1, r8
 80109dc:	4630      	mov	r0, r6
 80109de:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80109e2:	f000 fa59 	bl	8010e98 <_Bfree>
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80109ee:	ea43 0102 	orr.w	r1, r3, r2
 80109f2:	9b07      	ldr	r3, [sp, #28]
 80109f4:	430b      	orrs	r3, r1
 80109f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f8:	d10d      	bne.n	8010a16 <_dtoa_r+0x97e>
 80109fa:	2b39      	cmp	r3, #57	; 0x39
 80109fc:	d029      	beq.n	8010a52 <_dtoa_r+0x9ba>
 80109fe:	f1ba 0f00 	cmp.w	sl, #0
 8010a02:	dd01      	ble.n	8010a08 <_dtoa_r+0x970>
 8010a04:	9b05      	ldr	r3, [sp, #20]
 8010a06:	3331      	adds	r3, #49	; 0x31
 8010a08:	9a02      	ldr	r2, [sp, #8]
 8010a0a:	7013      	strb	r3, [r2, #0]
 8010a0c:	e774      	b.n	80108f8 <_dtoa_r+0x860>
 8010a0e:	4638      	mov	r0, r7
 8010a10:	e7b8      	b.n	8010984 <_dtoa_r+0x8ec>
 8010a12:	2201      	movs	r2, #1
 8010a14:	e7e1      	b.n	80109da <_dtoa_r+0x942>
 8010a16:	f1ba 0f00 	cmp.w	sl, #0
 8010a1a:	db06      	blt.n	8010a2a <_dtoa_r+0x992>
 8010a1c:	9906      	ldr	r1, [sp, #24]
 8010a1e:	ea41 0a0a 	orr.w	sl, r1, sl
 8010a22:	9907      	ldr	r1, [sp, #28]
 8010a24:	ea5a 0101 	orrs.w	r1, sl, r1
 8010a28:	d120      	bne.n	8010a6c <_dtoa_r+0x9d4>
 8010a2a:	2a00      	cmp	r2, #0
 8010a2c:	ddec      	ble.n	8010a08 <_dtoa_r+0x970>
 8010a2e:	4629      	mov	r1, r5
 8010a30:	2201      	movs	r2, #1
 8010a32:	4630      	mov	r0, r6
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	f000 fc01 	bl	801123c <__lshift>
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	4605      	mov	r5, r0
 8010a3e:	f000 fc6d 	bl	801131c <__mcmp>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	9b04      	ldr	r3, [sp, #16]
 8010a46:	dc02      	bgt.n	8010a4e <_dtoa_r+0x9b6>
 8010a48:	d1de      	bne.n	8010a08 <_dtoa_r+0x970>
 8010a4a:	07da      	lsls	r2, r3, #31
 8010a4c:	d5dc      	bpl.n	8010a08 <_dtoa_r+0x970>
 8010a4e:	2b39      	cmp	r3, #57	; 0x39
 8010a50:	d1d8      	bne.n	8010a04 <_dtoa_r+0x96c>
 8010a52:	9a02      	ldr	r2, [sp, #8]
 8010a54:	2339      	movs	r3, #57	; 0x39
 8010a56:	7013      	strb	r3, [r2, #0]
 8010a58:	4643      	mov	r3, r8
 8010a5a:	4698      	mov	r8, r3
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010a62:	2a39      	cmp	r2, #57	; 0x39
 8010a64:	d051      	beq.n	8010b0a <_dtoa_r+0xa72>
 8010a66:	3201      	adds	r2, #1
 8010a68:	701a      	strb	r2, [r3, #0]
 8010a6a:	e745      	b.n	80108f8 <_dtoa_r+0x860>
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	dd03      	ble.n	8010a78 <_dtoa_r+0x9e0>
 8010a70:	2b39      	cmp	r3, #57	; 0x39
 8010a72:	d0ee      	beq.n	8010a52 <_dtoa_r+0x9ba>
 8010a74:	3301      	adds	r3, #1
 8010a76:	e7c7      	b.n	8010a08 <_dtoa_r+0x970>
 8010a78:	9a04      	ldr	r2, [sp, #16]
 8010a7a:	9908      	ldr	r1, [sp, #32]
 8010a7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010a80:	428a      	cmp	r2, r1
 8010a82:	d02b      	beq.n	8010adc <_dtoa_r+0xa44>
 8010a84:	4629      	mov	r1, r5
 8010a86:	2300      	movs	r3, #0
 8010a88:	220a      	movs	r2, #10
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f000 fa26 	bl	8010edc <__multadd>
 8010a90:	45b9      	cmp	r9, r7
 8010a92:	4605      	mov	r5, r0
 8010a94:	f04f 0300 	mov.w	r3, #0
 8010a98:	f04f 020a 	mov.w	r2, #10
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	d107      	bne.n	8010ab2 <_dtoa_r+0xa1a>
 8010aa2:	f000 fa1b 	bl	8010edc <__multadd>
 8010aa6:	4681      	mov	r9, r0
 8010aa8:	4607      	mov	r7, r0
 8010aaa:	9b04      	ldr	r3, [sp, #16]
 8010aac:	3301      	adds	r3, #1
 8010aae:	9304      	str	r3, [sp, #16]
 8010ab0:	e774      	b.n	801099c <_dtoa_r+0x904>
 8010ab2:	f000 fa13 	bl	8010edc <__multadd>
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	4681      	mov	r9, r0
 8010aba:	2300      	movs	r3, #0
 8010abc:	220a      	movs	r2, #10
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f000 fa0c 	bl	8010edc <__multadd>
 8010ac4:	4607      	mov	r7, r0
 8010ac6:	e7f0      	b.n	8010aaa <_dtoa_r+0xa12>
 8010ac8:	f1ba 0f00 	cmp.w	sl, #0
 8010acc:	9a01      	ldr	r2, [sp, #4]
 8010ace:	bfcc      	ite	gt
 8010ad0:	46d0      	movgt	r8, sl
 8010ad2:	f04f 0801 	movle.w	r8, #1
 8010ad6:	4490      	add	r8, r2
 8010ad8:	f04f 0900 	mov.w	r9, #0
 8010adc:	4629      	mov	r1, r5
 8010ade:	2201      	movs	r2, #1
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	9302      	str	r3, [sp, #8]
 8010ae4:	f000 fbaa 	bl	801123c <__lshift>
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4605      	mov	r5, r0
 8010aec:	f000 fc16 	bl	801131c <__mcmp>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	dcb1      	bgt.n	8010a58 <_dtoa_r+0x9c0>
 8010af4:	d102      	bne.n	8010afc <_dtoa_r+0xa64>
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	07db      	lsls	r3, r3, #31
 8010afa:	d4ad      	bmi.n	8010a58 <_dtoa_r+0x9c0>
 8010afc:	4643      	mov	r3, r8
 8010afe:	4698      	mov	r8, r3
 8010b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b04:	2a30      	cmp	r2, #48	; 0x30
 8010b06:	d0fa      	beq.n	8010afe <_dtoa_r+0xa66>
 8010b08:	e6f6      	b.n	80108f8 <_dtoa_r+0x860>
 8010b0a:	9a01      	ldr	r2, [sp, #4]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d1a4      	bne.n	8010a5a <_dtoa_r+0x9c2>
 8010b10:	f10b 0b01 	add.w	fp, fp, #1
 8010b14:	2331      	movs	r3, #49	; 0x31
 8010b16:	e778      	b.n	8010a0a <_dtoa_r+0x972>
 8010b18:	4b14      	ldr	r3, [pc, #80]	; (8010b6c <_dtoa_r+0xad4>)
 8010b1a:	f7ff bb27 	b.w	801016c <_dtoa_r+0xd4>
 8010b1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f47f ab03 	bne.w	801012c <_dtoa_r+0x94>
 8010b26:	4b12      	ldr	r3, [pc, #72]	; (8010b70 <_dtoa_r+0xad8>)
 8010b28:	f7ff bb20 	b.w	801016c <_dtoa_r+0xd4>
 8010b2c:	f1ba 0f00 	cmp.w	sl, #0
 8010b30:	dc03      	bgt.n	8010b3a <_dtoa_r+0xaa2>
 8010b32:	9b06      	ldr	r3, [sp, #24]
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	f73f aec7 	bgt.w	80108c8 <_dtoa_r+0x830>
 8010b3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010b3e:	4621      	mov	r1, r4
 8010b40:	4628      	mov	r0, r5
 8010b42:	f7ff fa1b 	bl	800ff7c <quorem>
 8010b46:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010b4a:	f808 3b01 	strb.w	r3, [r8], #1
 8010b4e:	9a01      	ldr	r2, [sp, #4]
 8010b50:	eba8 0202 	sub.w	r2, r8, r2
 8010b54:	4592      	cmp	sl, r2
 8010b56:	ddb7      	ble.n	8010ac8 <_dtoa_r+0xa30>
 8010b58:	4629      	mov	r1, r5
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	220a      	movs	r2, #10
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f000 f9bc 	bl	8010edc <__multadd>
 8010b64:	4605      	mov	r5, r0
 8010b66:	e7ea      	b.n	8010b3e <_dtoa_r+0xaa6>
 8010b68:	080122df 	.word	0x080122df
 8010b6c:	0801223c 	.word	0x0801223c
 8010b70:	08012260 	.word	0x08012260

08010b74 <__sflush_r>:
 8010b74:	898a      	ldrh	r2, [r1, #12]
 8010b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	0710      	lsls	r0, r2, #28
 8010b7e:	460c      	mov	r4, r1
 8010b80:	d458      	bmi.n	8010c34 <__sflush_r+0xc0>
 8010b82:	684b      	ldr	r3, [r1, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dc05      	bgt.n	8010b94 <__sflush_r+0x20>
 8010b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	dc02      	bgt.n	8010b94 <__sflush_r+0x20>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b96:	2e00      	cmp	r6, #0
 8010b98:	d0f9      	beq.n	8010b8e <__sflush_r+0x1a>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ba0:	682f      	ldr	r7, [r5, #0]
 8010ba2:	602b      	str	r3, [r5, #0]
 8010ba4:	d032      	beq.n	8010c0c <__sflush_r+0x98>
 8010ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	075a      	lsls	r2, r3, #29
 8010bac:	d505      	bpl.n	8010bba <__sflush_r+0x46>
 8010bae:	6863      	ldr	r3, [r4, #4]
 8010bb0:	1ac0      	subs	r0, r0, r3
 8010bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bb4:	b10b      	cbz	r3, 8010bba <__sflush_r+0x46>
 8010bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bb8:	1ac0      	subs	r0, r0, r3
 8010bba:	2300      	movs	r3, #0
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bc0:	6a21      	ldr	r1, [r4, #32]
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b0      	blx	r6
 8010bc6:	1c43      	adds	r3, r0, #1
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	d106      	bne.n	8010bda <__sflush_r+0x66>
 8010bcc:	6829      	ldr	r1, [r5, #0]
 8010bce:	291d      	cmp	r1, #29
 8010bd0:	d82c      	bhi.n	8010c2c <__sflush_r+0xb8>
 8010bd2:	4a2a      	ldr	r2, [pc, #168]	; (8010c7c <__sflush_r+0x108>)
 8010bd4:	40ca      	lsrs	r2, r1
 8010bd6:	07d6      	lsls	r6, r2, #31
 8010bd8:	d528      	bpl.n	8010c2c <__sflush_r+0xb8>
 8010bda:	2200      	movs	r2, #0
 8010bdc:	6062      	str	r2, [r4, #4]
 8010bde:	04d9      	lsls	r1, r3, #19
 8010be0:	6922      	ldr	r2, [r4, #16]
 8010be2:	6022      	str	r2, [r4, #0]
 8010be4:	d504      	bpl.n	8010bf0 <__sflush_r+0x7c>
 8010be6:	1c42      	adds	r2, r0, #1
 8010be8:	d101      	bne.n	8010bee <__sflush_r+0x7a>
 8010bea:	682b      	ldr	r3, [r5, #0]
 8010bec:	b903      	cbnz	r3, 8010bf0 <__sflush_r+0x7c>
 8010bee:	6560      	str	r0, [r4, #84]	; 0x54
 8010bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bf2:	602f      	str	r7, [r5, #0]
 8010bf4:	2900      	cmp	r1, #0
 8010bf6:	d0ca      	beq.n	8010b8e <__sflush_r+0x1a>
 8010bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bfc:	4299      	cmp	r1, r3
 8010bfe:	d002      	beq.n	8010c06 <__sflush_r+0x92>
 8010c00:	4628      	mov	r0, r5
 8010c02:	f000 fca3 	bl	801154c <_free_r>
 8010c06:	2000      	movs	r0, #0
 8010c08:	6360      	str	r0, [r4, #52]	; 0x34
 8010c0a:	e7c1      	b.n	8010b90 <__sflush_r+0x1c>
 8010c0c:	6a21      	ldr	r1, [r4, #32]
 8010c0e:	2301      	movs	r3, #1
 8010c10:	4628      	mov	r0, r5
 8010c12:	47b0      	blx	r6
 8010c14:	1c41      	adds	r1, r0, #1
 8010c16:	d1c7      	bne.n	8010ba8 <__sflush_r+0x34>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0c4      	beq.n	8010ba8 <__sflush_r+0x34>
 8010c1e:	2b1d      	cmp	r3, #29
 8010c20:	d001      	beq.n	8010c26 <__sflush_r+0xb2>
 8010c22:	2b16      	cmp	r3, #22
 8010c24:	d101      	bne.n	8010c2a <__sflush_r+0xb6>
 8010c26:	602f      	str	r7, [r5, #0]
 8010c28:	e7b1      	b.n	8010b8e <__sflush_r+0x1a>
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	e7ad      	b.n	8010b90 <__sflush_r+0x1c>
 8010c34:	690f      	ldr	r7, [r1, #16]
 8010c36:	2f00      	cmp	r7, #0
 8010c38:	d0a9      	beq.n	8010b8e <__sflush_r+0x1a>
 8010c3a:	0793      	lsls	r3, r2, #30
 8010c3c:	680e      	ldr	r6, [r1, #0]
 8010c3e:	bf08      	it	eq
 8010c40:	694b      	ldreq	r3, [r1, #20]
 8010c42:	600f      	str	r7, [r1, #0]
 8010c44:	bf18      	it	ne
 8010c46:	2300      	movne	r3, #0
 8010c48:	eba6 0807 	sub.w	r8, r6, r7
 8010c4c:	608b      	str	r3, [r1, #8]
 8010c4e:	f1b8 0f00 	cmp.w	r8, #0
 8010c52:	dd9c      	ble.n	8010b8e <__sflush_r+0x1a>
 8010c54:	6a21      	ldr	r1, [r4, #32]
 8010c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c58:	4643      	mov	r3, r8
 8010c5a:	463a      	mov	r2, r7
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	47b0      	blx	r6
 8010c60:	2800      	cmp	r0, #0
 8010c62:	dc06      	bgt.n	8010c72 <__sflush_r+0xfe>
 8010c64:	89a3      	ldrh	r3, [r4, #12]
 8010c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6a:	81a3      	strh	r3, [r4, #12]
 8010c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c70:	e78e      	b.n	8010b90 <__sflush_r+0x1c>
 8010c72:	4407      	add	r7, r0
 8010c74:	eba8 0800 	sub.w	r8, r8, r0
 8010c78:	e7e9      	b.n	8010c4e <__sflush_r+0xda>
 8010c7a:	bf00      	nop
 8010c7c:	20400001 	.word	0x20400001

08010c80 <_fflush_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	690b      	ldr	r3, [r1, #16]
 8010c84:	4605      	mov	r5, r0
 8010c86:	460c      	mov	r4, r1
 8010c88:	b913      	cbnz	r3, 8010c90 <_fflush_r+0x10>
 8010c8a:	2500      	movs	r5, #0
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	b118      	cbz	r0, 8010c9a <_fflush_r+0x1a>
 8010c92:	6983      	ldr	r3, [r0, #24]
 8010c94:	b90b      	cbnz	r3, 8010c9a <_fflush_r+0x1a>
 8010c96:	f7fe f9db 	bl	800f050 <__sinit>
 8010c9a:	4b14      	ldr	r3, [pc, #80]	; (8010cec <_fflush_r+0x6c>)
 8010c9c:	429c      	cmp	r4, r3
 8010c9e:	d11b      	bne.n	8010cd8 <_fflush_r+0x58>
 8010ca0:	686c      	ldr	r4, [r5, #4]
 8010ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d0ef      	beq.n	8010c8a <_fflush_r+0xa>
 8010caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010cac:	07d0      	lsls	r0, r2, #31
 8010cae:	d404      	bmi.n	8010cba <_fflush_r+0x3a>
 8010cb0:	0599      	lsls	r1, r3, #22
 8010cb2:	d402      	bmi.n	8010cba <_fflush_r+0x3a>
 8010cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cb6:	f7fe fa8e 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 8010cba:	4628      	mov	r0, r5
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	f7ff ff59 	bl	8010b74 <__sflush_r>
 8010cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cc4:	07da      	lsls	r2, r3, #31
 8010cc6:	4605      	mov	r5, r0
 8010cc8:	d4e0      	bmi.n	8010c8c <_fflush_r+0xc>
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	059b      	lsls	r3, r3, #22
 8010cce:	d4dd      	bmi.n	8010c8c <_fflush_r+0xc>
 8010cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cd2:	f7fe fa81 	bl	800f1d8 <__retarget_lock_release_recursive>
 8010cd6:	e7d9      	b.n	8010c8c <_fflush_r+0xc>
 8010cd8:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <_fflush_r+0x70>)
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	d101      	bne.n	8010ce2 <_fflush_r+0x62>
 8010cde:	68ac      	ldr	r4, [r5, #8]
 8010ce0:	e7df      	b.n	8010ca2 <_fflush_r+0x22>
 8010ce2:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <_fflush_r+0x74>)
 8010ce4:	429c      	cmp	r4, r3
 8010ce6:	bf08      	it	eq
 8010ce8:	68ec      	ldreq	r4, [r5, #12]
 8010cea:	e7da      	b.n	8010ca2 <_fflush_r+0x22>
 8010cec:	080121e8 	.word	0x080121e8
 8010cf0:	08012208 	.word	0x08012208
 8010cf4:	080121c8 	.word	0x080121c8

08010cf8 <_localeconv_r>:
 8010cf8:	4800      	ldr	r0, [pc, #0]	; (8010cfc <_localeconv_r+0x4>)
 8010cfa:	4770      	bx	lr
 8010cfc:	24000170 	.word	0x24000170

08010d00 <_lseek_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	4d07      	ldr	r5, [pc, #28]	; (8010d20 <_lseek_r+0x20>)
 8010d04:	4604      	mov	r4, r0
 8010d06:	4608      	mov	r0, r1
 8010d08:	4611      	mov	r1, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	602a      	str	r2, [r5, #0]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	f7f2 fa48 	bl	80031a4 <_lseek>
 8010d14:	1c43      	adds	r3, r0, #1
 8010d16:	d102      	bne.n	8010d1e <_lseek_r+0x1e>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	b103      	cbz	r3, 8010d1e <_lseek_r+0x1e>
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	24001150 	.word	0x24001150

08010d24 <__swhatbuf_r>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	460e      	mov	r6, r1
 8010d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	b096      	sub	sp, #88	; 0x58
 8010d30:	4614      	mov	r4, r2
 8010d32:	461d      	mov	r5, r3
 8010d34:	da08      	bge.n	8010d48 <__swhatbuf_r+0x24>
 8010d36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	602a      	str	r2, [r5, #0]
 8010d3e:	061a      	lsls	r2, r3, #24
 8010d40:	d410      	bmi.n	8010d64 <__swhatbuf_r+0x40>
 8010d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d46:	e00e      	b.n	8010d66 <__swhatbuf_r+0x42>
 8010d48:	466a      	mov	r2, sp
 8010d4a:	f000 ff43 	bl	8011bd4 <_fstat_r>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	dbf1      	blt.n	8010d36 <__swhatbuf_r+0x12>
 8010d52:	9a01      	ldr	r2, [sp, #4]
 8010d54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d5c:	425a      	negs	r2, r3
 8010d5e:	415a      	adcs	r2, r3
 8010d60:	602a      	str	r2, [r5, #0]
 8010d62:	e7ee      	b.n	8010d42 <__swhatbuf_r+0x1e>
 8010d64:	2340      	movs	r3, #64	; 0x40
 8010d66:	2000      	movs	r0, #0
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	b016      	add	sp, #88	; 0x58
 8010d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d70 <__smakebuf_r>:
 8010d70:	898b      	ldrh	r3, [r1, #12]
 8010d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d74:	079d      	lsls	r5, r3, #30
 8010d76:	4606      	mov	r6, r0
 8010d78:	460c      	mov	r4, r1
 8010d7a:	d507      	bpl.n	8010d8c <__smakebuf_r+0x1c>
 8010d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d80:	6023      	str	r3, [r4, #0]
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	2301      	movs	r3, #1
 8010d86:	6163      	str	r3, [r4, #20]
 8010d88:	b002      	add	sp, #8
 8010d8a:	bd70      	pop	{r4, r5, r6, pc}
 8010d8c:	ab01      	add	r3, sp, #4
 8010d8e:	466a      	mov	r2, sp
 8010d90:	f7ff ffc8 	bl	8010d24 <__swhatbuf_r>
 8010d94:	9900      	ldr	r1, [sp, #0]
 8010d96:	4605      	mov	r5, r0
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f7fe fa55 	bl	800f248 <_malloc_r>
 8010d9e:	b948      	cbnz	r0, 8010db4 <__smakebuf_r+0x44>
 8010da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da4:	059a      	lsls	r2, r3, #22
 8010da6:	d4ef      	bmi.n	8010d88 <__smakebuf_r+0x18>
 8010da8:	f023 0303 	bic.w	r3, r3, #3
 8010dac:	f043 0302 	orr.w	r3, r3, #2
 8010db0:	81a3      	strh	r3, [r4, #12]
 8010db2:	e7e3      	b.n	8010d7c <__smakebuf_r+0xc>
 8010db4:	4b0d      	ldr	r3, [pc, #52]	; (8010dec <__smakebuf_r+0x7c>)
 8010db6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	6020      	str	r0, [r4, #0]
 8010dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dc0:	81a3      	strh	r3, [r4, #12]
 8010dc2:	9b00      	ldr	r3, [sp, #0]
 8010dc4:	6163      	str	r3, [r4, #20]
 8010dc6:	9b01      	ldr	r3, [sp, #4]
 8010dc8:	6120      	str	r0, [r4, #16]
 8010dca:	b15b      	cbz	r3, 8010de4 <__smakebuf_r+0x74>
 8010dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f000 ff11 	bl	8011bf8 <_isatty_r>
 8010dd6:	b128      	cbz	r0, 8010de4 <__smakebuf_r+0x74>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	f023 0303 	bic.w	r3, r3, #3
 8010dde:	f043 0301 	orr.w	r3, r3, #1
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	89a0      	ldrh	r0, [r4, #12]
 8010de6:	4305      	orrs	r5, r0
 8010de8:	81a5      	strh	r5, [r4, #12]
 8010dea:	e7cd      	b.n	8010d88 <__smakebuf_r+0x18>
 8010dec:	0800efe9 	.word	0x0800efe9

08010df0 <malloc>:
 8010df0:	4b02      	ldr	r3, [pc, #8]	; (8010dfc <malloc+0xc>)
 8010df2:	4601      	mov	r1, r0
 8010df4:	6818      	ldr	r0, [r3, #0]
 8010df6:	f7fe ba27 	b.w	800f248 <_malloc_r>
 8010dfa:	bf00      	nop
 8010dfc:	2400001c 	.word	0x2400001c

08010e00 <__malloc_lock>:
 8010e00:	4801      	ldr	r0, [pc, #4]	; (8010e08 <__malloc_lock+0x8>)
 8010e02:	f7fe b9e8 	b.w	800f1d6 <__retarget_lock_acquire_recursive>
 8010e06:	bf00      	nop
 8010e08:	24001144 	.word	0x24001144

08010e0c <__malloc_unlock>:
 8010e0c:	4801      	ldr	r0, [pc, #4]	; (8010e14 <__malloc_unlock+0x8>)
 8010e0e:	f7fe b9e3 	b.w	800f1d8 <__retarget_lock_release_recursive>
 8010e12:	bf00      	nop
 8010e14:	24001144 	.word	0x24001144

08010e18 <_Balloc>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	460d      	mov	r5, r1
 8010e20:	b976      	cbnz	r6, 8010e40 <_Balloc+0x28>
 8010e22:	2010      	movs	r0, #16
 8010e24:	f7ff ffe4 	bl	8010df0 <malloc>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8010e2c:	b920      	cbnz	r0, 8010e38 <_Balloc+0x20>
 8010e2e:	4b18      	ldr	r3, [pc, #96]	; (8010e90 <_Balloc+0x78>)
 8010e30:	4818      	ldr	r0, [pc, #96]	; (8010e94 <_Balloc+0x7c>)
 8010e32:	2166      	movs	r1, #102	; 0x66
 8010e34:	f000 fe9e 	bl	8011b74 <__assert_func>
 8010e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e3c:	6006      	str	r6, [r0, #0]
 8010e3e:	60c6      	str	r6, [r0, #12]
 8010e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010e42:	68f3      	ldr	r3, [r6, #12]
 8010e44:	b183      	cbz	r3, 8010e68 <_Balloc+0x50>
 8010e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e4e:	b9b8      	cbnz	r0, 8010e80 <_Balloc+0x68>
 8010e50:	2101      	movs	r1, #1
 8010e52:	fa01 f605 	lsl.w	r6, r1, r5
 8010e56:	1d72      	adds	r2, r6, #5
 8010e58:	0092      	lsls	r2, r2, #2
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 fb60 	bl	8011520 <_calloc_r>
 8010e60:	b160      	cbz	r0, 8010e7c <_Balloc+0x64>
 8010e62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e66:	e00e      	b.n	8010e86 <_Balloc+0x6e>
 8010e68:	2221      	movs	r2, #33	; 0x21
 8010e6a:	2104      	movs	r1, #4
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 fb57 	bl	8011520 <_calloc_r>
 8010e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e74:	60f0      	str	r0, [r6, #12]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d1e4      	bne.n	8010e46 <_Balloc+0x2e>
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
 8010e80:	6802      	ldr	r2, [r0, #0]
 8010e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e86:	2300      	movs	r3, #0
 8010e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e8c:	e7f7      	b.n	8010e7e <_Balloc+0x66>
 8010e8e:	bf00      	nop
 8010e90:	0801226d 	.word	0x0801226d
 8010e94:	080122f0 	.word	0x080122f0

08010e98 <_Bfree>:
 8010e98:	b570      	push	{r4, r5, r6, lr}
 8010e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e9c:	4605      	mov	r5, r0
 8010e9e:	460c      	mov	r4, r1
 8010ea0:	b976      	cbnz	r6, 8010ec0 <_Bfree+0x28>
 8010ea2:	2010      	movs	r0, #16
 8010ea4:	f7ff ffa4 	bl	8010df0 <malloc>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	6268      	str	r0, [r5, #36]	; 0x24
 8010eac:	b920      	cbnz	r0, 8010eb8 <_Bfree+0x20>
 8010eae:	4b09      	ldr	r3, [pc, #36]	; (8010ed4 <_Bfree+0x3c>)
 8010eb0:	4809      	ldr	r0, [pc, #36]	; (8010ed8 <_Bfree+0x40>)
 8010eb2:	218a      	movs	r1, #138	; 0x8a
 8010eb4:	f000 fe5e 	bl	8011b74 <__assert_func>
 8010eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ebc:	6006      	str	r6, [r0, #0]
 8010ebe:	60c6      	str	r6, [r0, #12]
 8010ec0:	b13c      	cbz	r4, 8010ed2 <_Bfree+0x3a>
 8010ec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ec4:	6862      	ldr	r2, [r4, #4]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ecc:	6021      	str	r1, [r4, #0]
 8010ece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ed2:	bd70      	pop	{r4, r5, r6, pc}
 8010ed4:	0801226d 	.word	0x0801226d
 8010ed8:	080122f0 	.word	0x080122f0

08010edc <__multadd>:
 8010edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee0:	690d      	ldr	r5, [r1, #16]
 8010ee2:	4607      	mov	r7, r0
 8010ee4:	460c      	mov	r4, r1
 8010ee6:	461e      	mov	r6, r3
 8010ee8:	f101 0c14 	add.w	ip, r1, #20
 8010eec:	2000      	movs	r0, #0
 8010eee:	f8dc 3000 	ldr.w	r3, [ip]
 8010ef2:	b299      	uxth	r1, r3
 8010ef4:	fb02 6101 	mla	r1, r2, r1, r6
 8010ef8:	0c1e      	lsrs	r6, r3, #16
 8010efa:	0c0b      	lsrs	r3, r1, #16
 8010efc:	fb02 3306 	mla	r3, r2, r6, r3
 8010f00:	b289      	uxth	r1, r1
 8010f02:	3001      	adds	r0, #1
 8010f04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f08:	4285      	cmp	r5, r0
 8010f0a:	f84c 1b04 	str.w	r1, [ip], #4
 8010f0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f12:	dcec      	bgt.n	8010eee <__multadd+0x12>
 8010f14:	b30e      	cbz	r6, 8010f5a <__multadd+0x7e>
 8010f16:	68a3      	ldr	r3, [r4, #8]
 8010f18:	42ab      	cmp	r3, r5
 8010f1a:	dc19      	bgt.n	8010f50 <__multadd+0x74>
 8010f1c:	6861      	ldr	r1, [r4, #4]
 8010f1e:	4638      	mov	r0, r7
 8010f20:	3101      	adds	r1, #1
 8010f22:	f7ff ff79 	bl	8010e18 <_Balloc>
 8010f26:	4680      	mov	r8, r0
 8010f28:	b928      	cbnz	r0, 8010f36 <__multadd+0x5a>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	4b0c      	ldr	r3, [pc, #48]	; (8010f60 <__multadd+0x84>)
 8010f2e:	480d      	ldr	r0, [pc, #52]	; (8010f64 <__multadd+0x88>)
 8010f30:	21b5      	movs	r1, #181	; 0xb5
 8010f32:	f000 fe1f 	bl	8011b74 <__assert_func>
 8010f36:	6922      	ldr	r2, [r4, #16]
 8010f38:	3202      	adds	r2, #2
 8010f3a:	f104 010c 	add.w	r1, r4, #12
 8010f3e:	0092      	lsls	r2, r2, #2
 8010f40:	300c      	adds	r0, #12
 8010f42:	f7fe f94a 	bl	800f1da <memcpy>
 8010f46:	4621      	mov	r1, r4
 8010f48:	4638      	mov	r0, r7
 8010f4a:	f7ff ffa5 	bl	8010e98 <_Bfree>
 8010f4e:	4644      	mov	r4, r8
 8010f50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f54:	3501      	adds	r5, #1
 8010f56:	615e      	str	r6, [r3, #20]
 8010f58:	6125      	str	r5, [r4, #16]
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f60:	080122df 	.word	0x080122df
 8010f64:	080122f0 	.word	0x080122f0

08010f68 <__hi0bits>:
 8010f68:	0c03      	lsrs	r3, r0, #16
 8010f6a:	041b      	lsls	r3, r3, #16
 8010f6c:	b9d3      	cbnz	r3, 8010fa4 <__hi0bits+0x3c>
 8010f6e:	0400      	lsls	r0, r0, #16
 8010f70:	2310      	movs	r3, #16
 8010f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f76:	bf04      	itt	eq
 8010f78:	0200      	lsleq	r0, r0, #8
 8010f7a:	3308      	addeq	r3, #8
 8010f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f80:	bf04      	itt	eq
 8010f82:	0100      	lsleq	r0, r0, #4
 8010f84:	3304      	addeq	r3, #4
 8010f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f8a:	bf04      	itt	eq
 8010f8c:	0080      	lsleq	r0, r0, #2
 8010f8e:	3302      	addeq	r3, #2
 8010f90:	2800      	cmp	r0, #0
 8010f92:	db05      	blt.n	8010fa0 <__hi0bits+0x38>
 8010f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010f98:	f103 0301 	add.w	r3, r3, #1
 8010f9c:	bf08      	it	eq
 8010f9e:	2320      	moveq	r3, #32
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	4770      	bx	lr
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e7e4      	b.n	8010f72 <__hi0bits+0xa>

08010fa8 <__lo0bits>:
 8010fa8:	6803      	ldr	r3, [r0, #0]
 8010faa:	f013 0207 	ands.w	r2, r3, #7
 8010fae:	4601      	mov	r1, r0
 8010fb0:	d00b      	beq.n	8010fca <__lo0bits+0x22>
 8010fb2:	07da      	lsls	r2, r3, #31
 8010fb4:	d423      	bmi.n	8010ffe <__lo0bits+0x56>
 8010fb6:	0798      	lsls	r0, r3, #30
 8010fb8:	bf49      	itett	mi
 8010fba:	085b      	lsrmi	r3, r3, #1
 8010fbc:	089b      	lsrpl	r3, r3, #2
 8010fbe:	2001      	movmi	r0, #1
 8010fc0:	600b      	strmi	r3, [r1, #0]
 8010fc2:	bf5c      	itt	pl
 8010fc4:	600b      	strpl	r3, [r1, #0]
 8010fc6:	2002      	movpl	r0, #2
 8010fc8:	4770      	bx	lr
 8010fca:	b298      	uxth	r0, r3
 8010fcc:	b9a8      	cbnz	r0, 8010ffa <__lo0bits+0x52>
 8010fce:	0c1b      	lsrs	r3, r3, #16
 8010fd0:	2010      	movs	r0, #16
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	b90a      	cbnz	r2, 8010fda <__lo0bits+0x32>
 8010fd6:	3008      	adds	r0, #8
 8010fd8:	0a1b      	lsrs	r3, r3, #8
 8010fda:	071a      	lsls	r2, r3, #28
 8010fdc:	bf04      	itt	eq
 8010fde:	091b      	lsreq	r3, r3, #4
 8010fe0:	3004      	addeq	r0, #4
 8010fe2:	079a      	lsls	r2, r3, #30
 8010fe4:	bf04      	itt	eq
 8010fe6:	089b      	lsreq	r3, r3, #2
 8010fe8:	3002      	addeq	r0, #2
 8010fea:	07da      	lsls	r2, r3, #31
 8010fec:	d403      	bmi.n	8010ff6 <__lo0bits+0x4e>
 8010fee:	085b      	lsrs	r3, r3, #1
 8010ff0:	f100 0001 	add.w	r0, r0, #1
 8010ff4:	d005      	beq.n	8011002 <__lo0bits+0x5a>
 8010ff6:	600b      	str	r3, [r1, #0]
 8010ff8:	4770      	bx	lr
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	e7e9      	b.n	8010fd2 <__lo0bits+0x2a>
 8010ffe:	2000      	movs	r0, #0
 8011000:	4770      	bx	lr
 8011002:	2020      	movs	r0, #32
 8011004:	4770      	bx	lr
	...

08011008 <__i2b>:
 8011008:	b510      	push	{r4, lr}
 801100a:	460c      	mov	r4, r1
 801100c:	2101      	movs	r1, #1
 801100e:	f7ff ff03 	bl	8010e18 <_Balloc>
 8011012:	4602      	mov	r2, r0
 8011014:	b928      	cbnz	r0, 8011022 <__i2b+0x1a>
 8011016:	4b05      	ldr	r3, [pc, #20]	; (801102c <__i2b+0x24>)
 8011018:	4805      	ldr	r0, [pc, #20]	; (8011030 <__i2b+0x28>)
 801101a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801101e:	f000 fda9 	bl	8011b74 <__assert_func>
 8011022:	2301      	movs	r3, #1
 8011024:	6144      	str	r4, [r0, #20]
 8011026:	6103      	str	r3, [r0, #16]
 8011028:	bd10      	pop	{r4, pc}
 801102a:	bf00      	nop
 801102c:	080122df 	.word	0x080122df
 8011030:	080122f0 	.word	0x080122f0

08011034 <__multiply>:
 8011034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011038:	4691      	mov	r9, r2
 801103a:	690a      	ldr	r2, [r1, #16]
 801103c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011040:	429a      	cmp	r2, r3
 8011042:	bfb8      	it	lt
 8011044:	460b      	movlt	r3, r1
 8011046:	460c      	mov	r4, r1
 8011048:	bfbc      	itt	lt
 801104a:	464c      	movlt	r4, r9
 801104c:	4699      	movlt	r9, r3
 801104e:	6927      	ldr	r7, [r4, #16]
 8011050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011054:	68a3      	ldr	r3, [r4, #8]
 8011056:	6861      	ldr	r1, [r4, #4]
 8011058:	eb07 060a 	add.w	r6, r7, sl
 801105c:	42b3      	cmp	r3, r6
 801105e:	b085      	sub	sp, #20
 8011060:	bfb8      	it	lt
 8011062:	3101      	addlt	r1, #1
 8011064:	f7ff fed8 	bl	8010e18 <_Balloc>
 8011068:	b930      	cbnz	r0, 8011078 <__multiply+0x44>
 801106a:	4602      	mov	r2, r0
 801106c:	4b44      	ldr	r3, [pc, #272]	; (8011180 <__multiply+0x14c>)
 801106e:	4845      	ldr	r0, [pc, #276]	; (8011184 <__multiply+0x150>)
 8011070:	f240 115d 	movw	r1, #349	; 0x15d
 8011074:	f000 fd7e 	bl	8011b74 <__assert_func>
 8011078:	f100 0514 	add.w	r5, r0, #20
 801107c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011080:	462b      	mov	r3, r5
 8011082:	2200      	movs	r2, #0
 8011084:	4543      	cmp	r3, r8
 8011086:	d321      	bcc.n	80110cc <__multiply+0x98>
 8011088:	f104 0314 	add.w	r3, r4, #20
 801108c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011090:	f109 0314 	add.w	r3, r9, #20
 8011094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011098:	9202      	str	r2, [sp, #8]
 801109a:	1b3a      	subs	r2, r7, r4
 801109c:	3a15      	subs	r2, #21
 801109e:	f022 0203 	bic.w	r2, r2, #3
 80110a2:	3204      	adds	r2, #4
 80110a4:	f104 0115 	add.w	r1, r4, #21
 80110a8:	428f      	cmp	r7, r1
 80110aa:	bf38      	it	cc
 80110ac:	2204      	movcc	r2, #4
 80110ae:	9201      	str	r2, [sp, #4]
 80110b0:	9a02      	ldr	r2, [sp, #8]
 80110b2:	9303      	str	r3, [sp, #12]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d80c      	bhi.n	80110d2 <__multiply+0x9e>
 80110b8:	2e00      	cmp	r6, #0
 80110ba:	dd03      	ble.n	80110c4 <__multiply+0x90>
 80110bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d05a      	beq.n	801117a <__multiply+0x146>
 80110c4:	6106      	str	r6, [r0, #16]
 80110c6:	b005      	add	sp, #20
 80110c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110cc:	f843 2b04 	str.w	r2, [r3], #4
 80110d0:	e7d8      	b.n	8011084 <__multiply+0x50>
 80110d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80110d6:	f1ba 0f00 	cmp.w	sl, #0
 80110da:	d024      	beq.n	8011126 <__multiply+0xf2>
 80110dc:	f104 0e14 	add.w	lr, r4, #20
 80110e0:	46a9      	mov	r9, r5
 80110e2:	f04f 0c00 	mov.w	ip, #0
 80110e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80110ea:	f8d9 1000 	ldr.w	r1, [r9]
 80110ee:	fa1f fb82 	uxth.w	fp, r2
 80110f2:	b289      	uxth	r1, r1
 80110f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80110f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80110fc:	f8d9 2000 	ldr.w	r2, [r9]
 8011100:	4461      	add	r1, ip
 8011102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011106:	fb0a c20b 	mla	r2, sl, fp, ip
 801110a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801110e:	b289      	uxth	r1, r1
 8011110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011114:	4577      	cmp	r7, lr
 8011116:	f849 1b04 	str.w	r1, [r9], #4
 801111a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801111e:	d8e2      	bhi.n	80110e6 <__multiply+0xb2>
 8011120:	9a01      	ldr	r2, [sp, #4]
 8011122:	f845 c002 	str.w	ip, [r5, r2]
 8011126:	9a03      	ldr	r2, [sp, #12]
 8011128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801112c:	3304      	adds	r3, #4
 801112e:	f1b9 0f00 	cmp.w	r9, #0
 8011132:	d020      	beq.n	8011176 <__multiply+0x142>
 8011134:	6829      	ldr	r1, [r5, #0]
 8011136:	f104 0c14 	add.w	ip, r4, #20
 801113a:	46ae      	mov	lr, r5
 801113c:	f04f 0a00 	mov.w	sl, #0
 8011140:	f8bc b000 	ldrh.w	fp, [ip]
 8011144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011148:	fb09 220b 	mla	r2, r9, fp, r2
 801114c:	4492      	add	sl, r2
 801114e:	b289      	uxth	r1, r1
 8011150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011154:	f84e 1b04 	str.w	r1, [lr], #4
 8011158:	f85c 2b04 	ldr.w	r2, [ip], #4
 801115c:	f8be 1000 	ldrh.w	r1, [lr]
 8011160:	0c12      	lsrs	r2, r2, #16
 8011162:	fb09 1102 	mla	r1, r9, r2, r1
 8011166:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801116a:	4567      	cmp	r7, ip
 801116c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011170:	d8e6      	bhi.n	8011140 <__multiply+0x10c>
 8011172:	9a01      	ldr	r2, [sp, #4]
 8011174:	50a9      	str	r1, [r5, r2]
 8011176:	3504      	adds	r5, #4
 8011178:	e79a      	b.n	80110b0 <__multiply+0x7c>
 801117a:	3e01      	subs	r6, #1
 801117c:	e79c      	b.n	80110b8 <__multiply+0x84>
 801117e:	bf00      	nop
 8011180:	080122df 	.word	0x080122df
 8011184:	080122f0 	.word	0x080122f0

08011188 <__pow5mult>:
 8011188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801118c:	4615      	mov	r5, r2
 801118e:	f012 0203 	ands.w	r2, r2, #3
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	d007      	beq.n	80111a8 <__pow5mult+0x20>
 8011198:	4c25      	ldr	r4, [pc, #148]	; (8011230 <__pow5mult+0xa8>)
 801119a:	3a01      	subs	r2, #1
 801119c:	2300      	movs	r3, #0
 801119e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111a2:	f7ff fe9b 	bl	8010edc <__multadd>
 80111a6:	4607      	mov	r7, r0
 80111a8:	10ad      	asrs	r5, r5, #2
 80111aa:	d03d      	beq.n	8011228 <__pow5mult+0xa0>
 80111ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111ae:	b97c      	cbnz	r4, 80111d0 <__pow5mult+0x48>
 80111b0:	2010      	movs	r0, #16
 80111b2:	f7ff fe1d 	bl	8010df0 <malloc>
 80111b6:	4602      	mov	r2, r0
 80111b8:	6270      	str	r0, [r6, #36]	; 0x24
 80111ba:	b928      	cbnz	r0, 80111c8 <__pow5mult+0x40>
 80111bc:	4b1d      	ldr	r3, [pc, #116]	; (8011234 <__pow5mult+0xac>)
 80111be:	481e      	ldr	r0, [pc, #120]	; (8011238 <__pow5mult+0xb0>)
 80111c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80111c4:	f000 fcd6 	bl	8011b74 <__assert_func>
 80111c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111cc:	6004      	str	r4, [r0, #0]
 80111ce:	60c4      	str	r4, [r0, #12]
 80111d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80111d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111d8:	b94c      	cbnz	r4, 80111ee <__pow5mult+0x66>
 80111da:	f240 2171 	movw	r1, #625	; 0x271
 80111de:	4630      	mov	r0, r6
 80111e0:	f7ff ff12 	bl	8011008 <__i2b>
 80111e4:	2300      	movs	r3, #0
 80111e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80111ea:	4604      	mov	r4, r0
 80111ec:	6003      	str	r3, [r0, #0]
 80111ee:	f04f 0900 	mov.w	r9, #0
 80111f2:	07eb      	lsls	r3, r5, #31
 80111f4:	d50a      	bpl.n	801120c <__pow5mult+0x84>
 80111f6:	4639      	mov	r1, r7
 80111f8:	4622      	mov	r2, r4
 80111fa:	4630      	mov	r0, r6
 80111fc:	f7ff ff1a 	bl	8011034 <__multiply>
 8011200:	4639      	mov	r1, r7
 8011202:	4680      	mov	r8, r0
 8011204:	4630      	mov	r0, r6
 8011206:	f7ff fe47 	bl	8010e98 <_Bfree>
 801120a:	4647      	mov	r7, r8
 801120c:	106d      	asrs	r5, r5, #1
 801120e:	d00b      	beq.n	8011228 <__pow5mult+0xa0>
 8011210:	6820      	ldr	r0, [r4, #0]
 8011212:	b938      	cbnz	r0, 8011224 <__pow5mult+0x9c>
 8011214:	4622      	mov	r2, r4
 8011216:	4621      	mov	r1, r4
 8011218:	4630      	mov	r0, r6
 801121a:	f7ff ff0b 	bl	8011034 <__multiply>
 801121e:	6020      	str	r0, [r4, #0]
 8011220:	f8c0 9000 	str.w	r9, [r0]
 8011224:	4604      	mov	r4, r0
 8011226:	e7e4      	b.n	80111f2 <__pow5mult+0x6a>
 8011228:	4638      	mov	r0, r7
 801122a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801122e:	bf00      	nop
 8011230:	08012440 	.word	0x08012440
 8011234:	0801226d 	.word	0x0801226d
 8011238:	080122f0 	.word	0x080122f0

0801123c <__lshift>:
 801123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011240:	460c      	mov	r4, r1
 8011242:	6849      	ldr	r1, [r1, #4]
 8011244:	6923      	ldr	r3, [r4, #16]
 8011246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	4607      	mov	r7, r0
 801124e:	4691      	mov	r9, r2
 8011250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011254:	f108 0601 	add.w	r6, r8, #1
 8011258:	42b3      	cmp	r3, r6
 801125a:	db0b      	blt.n	8011274 <__lshift+0x38>
 801125c:	4638      	mov	r0, r7
 801125e:	f7ff fddb 	bl	8010e18 <_Balloc>
 8011262:	4605      	mov	r5, r0
 8011264:	b948      	cbnz	r0, 801127a <__lshift+0x3e>
 8011266:	4602      	mov	r2, r0
 8011268:	4b2a      	ldr	r3, [pc, #168]	; (8011314 <__lshift+0xd8>)
 801126a:	482b      	ldr	r0, [pc, #172]	; (8011318 <__lshift+0xdc>)
 801126c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011270:	f000 fc80 	bl	8011b74 <__assert_func>
 8011274:	3101      	adds	r1, #1
 8011276:	005b      	lsls	r3, r3, #1
 8011278:	e7ee      	b.n	8011258 <__lshift+0x1c>
 801127a:	2300      	movs	r3, #0
 801127c:	f100 0114 	add.w	r1, r0, #20
 8011280:	f100 0210 	add.w	r2, r0, #16
 8011284:	4618      	mov	r0, r3
 8011286:	4553      	cmp	r3, sl
 8011288:	db37      	blt.n	80112fa <__lshift+0xbe>
 801128a:	6920      	ldr	r0, [r4, #16]
 801128c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011290:	f104 0314 	add.w	r3, r4, #20
 8011294:	f019 091f 	ands.w	r9, r9, #31
 8011298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801129c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80112a0:	d02f      	beq.n	8011302 <__lshift+0xc6>
 80112a2:	f1c9 0e20 	rsb	lr, r9, #32
 80112a6:	468a      	mov	sl, r1
 80112a8:	f04f 0c00 	mov.w	ip, #0
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	fa02 f209 	lsl.w	r2, r2, r9
 80112b2:	ea42 020c 	orr.w	r2, r2, ip
 80112b6:	f84a 2b04 	str.w	r2, [sl], #4
 80112ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80112be:	4298      	cmp	r0, r3
 80112c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80112c4:	d8f2      	bhi.n	80112ac <__lshift+0x70>
 80112c6:	1b03      	subs	r3, r0, r4
 80112c8:	3b15      	subs	r3, #21
 80112ca:	f023 0303 	bic.w	r3, r3, #3
 80112ce:	3304      	adds	r3, #4
 80112d0:	f104 0215 	add.w	r2, r4, #21
 80112d4:	4290      	cmp	r0, r2
 80112d6:	bf38      	it	cc
 80112d8:	2304      	movcc	r3, #4
 80112da:	f841 c003 	str.w	ip, [r1, r3]
 80112de:	f1bc 0f00 	cmp.w	ip, #0
 80112e2:	d001      	beq.n	80112e8 <__lshift+0xac>
 80112e4:	f108 0602 	add.w	r6, r8, #2
 80112e8:	3e01      	subs	r6, #1
 80112ea:	4638      	mov	r0, r7
 80112ec:	612e      	str	r6, [r5, #16]
 80112ee:	4621      	mov	r1, r4
 80112f0:	f7ff fdd2 	bl	8010e98 <_Bfree>
 80112f4:	4628      	mov	r0, r5
 80112f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80112fe:	3301      	adds	r3, #1
 8011300:	e7c1      	b.n	8011286 <__lshift+0x4a>
 8011302:	3904      	subs	r1, #4
 8011304:	f853 2b04 	ldr.w	r2, [r3], #4
 8011308:	f841 2f04 	str.w	r2, [r1, #4]!
 801130c:	4298      	cmp	r0, r3
 801130e:	d8f9      	bhi.n	8011304 <__lshift+0xc8>
 8011310:	e7ea      	b.n	80112e8 <__lshift+0xac>
 8011312:	bf00      	nop
 8011314:	080122df 	.word	0x080122df
 8011318:	080122f0 	.word	0x080122f0

0801131c <__mcmp>:
 801131c:	b530      	push	{r4, r5, lr}
 801131e:	6902      	ldr	r2, [r0, #16]
 8011320:	690c      	ldr	r4, [r1, #16]
 8011322:	1b12      	subs	r2, r2, r4
 8011324:	d10e      	bne.n	8011344 <__mcmp+0x28>
 8011326:	f100 0314 	add.w	r3, r0, #20
 801132a:	3114      	adds	r1, #20
 801132c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801133c:	42a5      	cmp	r5, r4
 801133e:	d003      	beq.n	8011348 <__mcmp+0x2c>
 8011340:	d305      	bcc.n	801134e <__mcmp+0x32>
 8011342:	2201      	movs	r2, #1
 8011344:	4610      	mov	r0, r2
 8011346:	bd30      	pop	{r4, r5, pc}
 8011348:	4283      	cmp	r3, r0
 801134a:	d3f3      	bcc.n	8011334 <__mcmp+0x18>
 801134c:	e7fa      	b.n	8011344 <__mcmp+0x28>
 801134e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011352:	e7f7      	b.n	8011344 <__mcmp+0x28>

08011354 <__mdiff>:
 8011354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	460c      	mov	r4, r1
 801135a:	4606      	mov	r6, r0
 801135c:	4611      	mov	r1, r2
 801135e:	4620      	mov	r0, r4
 8011360:	4690      	mov	r8, r2
 8011362:	f7ff ffdb 	bl	801131c <__mcmp>
 8011366:	1e05      	subs	r5, r0, #0
 8011368:	d110      	bne.n	801138c <__mdiff+0x38>
 801136a:	4629      	mov	r1, r5
 801136c:	4630      	mov	r0, r6
 801136e:	f7ff fd53 	bl	8010e18 <_Balloc>
 8011372:	b930      	cbnz	r0, 8011382 <__mdiff+0x2e>
 8011374:	4b3a      	ldr	r3, [pc, #232]	; (8011460 <__mdiff+0x10c>)
 8011376:	4602      	mov	r2, r0
 8011378:	f240 2132 	movw	r1, #562	; 0x232
 801137c:	4839      	ldr	r0, [pc, #228]	; (8011464 <__mdiff+0x110>)
 801137e:	f000 fbf9 	bl	8011b74 <__assert_func>
 8011382:	2301      	movs	r3, #1
 8011384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138c:	bfa4      	itt	ge
 801138e:	4643      	movge	r3, r8
 8011390:	46a0      	movge	r8, r4
 8011392:	4630      	mov	r0, r6
 8011394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011398:	bfa6      	itte	ge
 801139a:	461c      	movge	r4, r3
 801139c:	2500      	movge	r5, #0
 801139e:	2501      	movlt	r5, #1
 80113a0:	f7ff fd3a 	bl	8010e18 <_Balloc>
 80113a4:	b920      	cbnz	r0, 80113b0 <__mdiff+0x5c>
 80113a6:	4b2e      	ldr	r3, [pc, #184]	; (8011460 <__mdiff+0x10c>)
 80113a8:	4602      	mov	r2, r0
 80113aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113ae:	e7e5      	b.n	801137c <__mdiff+0x28>
 80113b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80113b4:	6926      	ldr	r6, [r4, #16]
 80113b6:	60c5      	str	r5, [r0, #12]
 80113b8:	f104 0914 	add.w	r9, r4, #20
 80113bc:	f108 0514 	add.w	r5, r8, #20
 80113c0:	f100 0e14 	add.w	lr, r0, #20
 80113c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80113c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80113cc:	f108 0210 	add.w	r2, r8, #16
 80113d0:	46f2      	mov	sl, lr
 80113d2:	2100      	movs	r1, #0
 80113d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80113d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113dc:	fa1f f883 	uxth.w	r8, r3
 80113e0:	fa11 f18b 	uxtah	r1, r1, fp
 80113e4:	0c1b      	lsrs	r3, r3, #16
 80113e6:	eba1 0808 	sub.w	r8, r1, r8
 80113ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80113ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80113f2:	fa1f f888 	uxth.w	r8, r8
 80113f6:	1419      	asrs	r1, r3, #16
 80113f8:	454e      	cmp	r6, r9
 80113fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80113fe:	f84a 3b04 	str.w	r3, [sl], #4
 8011402:	d8e7      	bhi.n	80113d4 <__mdiff+0x80>
 8011404:	1b33      	subs	r3, r6, r4
 8011406:	3b15      	subs	r3, #21
 8011408:	f023 0303 	bic.w	r3, r3, #3
 801140c:	3304      	adds	r3, #4
 801140e:	3415      	adds	r4, #21
 8011410:	42a6      	cmp	r6, r4
 8011412:	bf38      	it	cc
 8011414:	2304      	movcc	r3, #4
 8011416:	441d      	add	r5, r3
 8011418:	4473      	add	r3, lr
 801141a:	469e      	mov	lr, r3
 801141c:	462e      	mov	r6, r5
 801141e:	4566      	cmp	r6, ip
 8011420:	d30e      	bcc.n	8011440 <__mdiff+0xec>
 8011422:	f10c 0203 	add.w	r2, ip, #3
 8011426:	1b52      	subs	r2, r2, r5
 8011428:	f022 0203 	bic.w	r2, r2, #3
 801142c:	3d03      	subs	r5, #3
 801142e:	45ac      	cmp	ip, r5
 8011430:	bf38      	it	cc
 8011432:	2200      	movcc	r2, #0
 8011434:	441a      	add	r2, r3
 8011436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801143a:	b17b      	cbz	r3, 801145c <__mdiff+0x108>
 801143c:	6107      	str	r7, [r0, #16]
 801143e:	e7a3      	b.n	8011388 <__mdiff+0x34>
 8011440:	f856 8b04 	ldr.w	r8, [r6], #4
 8011444:	fa11 f288 	uxtah	r2, r1, r8
 8011448:	1414      	asrs	r4, r2, #16
 801144a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801144e:	b292      	uxth	r2, r2
 8011450:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011454:	f84e 2b04 	str.w	r2, [lr], #4
 8011458:	1421      	asrs	r1, r4, #16
 801145a:	e7e0      	b.n	801141e <__mdiff+0xca>
 801145c:	3f01      	subs	r7, #1
 801145e:	e7ea      	b.n	8011436 <__mdiff+0xe2>
 8011460:	080122df 	.word	0x080122df
 8011464:	080122f0 	.word	0x080122f0

08011468 <__d2b>:
 8011468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801146c:	4689      	mov	r9, r1
 801146e:	2101      	movs	r1, #1
 8011470:	ec57 6b10 	vmov	r6, r7, d0
 8011474:	4690      	mov	r8, r2
 8011476:	f7ff fccf 	bl	8010e18 <_Balloc>
 801147a:	4604      	mov	r4, r0
 801147c:	b930      	cbnz	r0, 801148c <__d2b+0x24>
 801147e:	4602      	mov	r2, r0
 8011480:	4b25      	ldr	r3, [pc, #148]	; (8011518 <__d2b+0xb0>)
 8011482:	4826      	ldr	r0, [pc, #152]	; (801151c <__d2b+0xb4>)
 8011484:	f240 310a 	movw	r1, #778	; 0x30a
 8011488:	f000 fb74 	bl	8011b74 <__assert_func>
 801148c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011494:	bb35      	cbnz	r5, 80114e4 <__d2b+0x7c>
 8011496:	2e00      	cmp	r6, #0
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	d028      	beq.n	80114ee <__d2b+0x86>
 801149c:	4668      	mov	r0, sp
 801149e:	9600      	str	r6, [sp, #0]
 80114a0:	f7ff fd82 	bl	8010fa8 <__lo0bits>
 80114a4:	9900      	ldr	r1, [sp, #0]
 80114a6:	b300      	cbz	r0, 80114ea <__d2b+0x82>
 80114a8:	9a01      	ldr	r2, [sp, #4]
 80114aa:	f1c0 0320 	rsb	r3, r0, #32
 80114ae:	fa02 f303 	lsl.w	r3, r2, r3
 80114b2:	430b      	orrs	r3, r1
 80114b4:	40c2      	lsrs	r2, r0
 80114b6:	6163      	str	r3, [r4, #20]
 80114b8:	9201      	str	r2, [sp, #4]
 80114ba:	9b01      	ldr	r3, [sp, #4]
 80114bc:	61a3      	str	r3, [r4, #24]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	bf14      	ite	ne
 80114c2:	2202      	movne	r2, #2
 80114c4:	2201      	moveq	r2, #1
 80114c6:	6122      	str	r2, [r4, #16]
 80114c8:	b1d5      	cbz	r5, 8011500 <__d2b+0x98>
 80114ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114ce:	4405      	add	r5, r0
 80114d0:	f8c9 5000 	str.w	r5, [r9]
 80114d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114d8:	f8c8 0000 	str.w	r0, [r8]
 80114dc:	4620      	mov	r0, r4
 80114de:	b003      	add	sp, #12
 80114e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114e8:	e7d5      	b.n	8011496 <__d2b+0x2e>
 80114ea:	6161      	str	r1, [r4, #20]
 80114ec:	e7e5      	b.n	80114ba <__d2b+0x52>
 80114ee:	a801      	add	r0, sp, #4
 80114f0:	f7ff fd5a 	bl	8010fa8 <__lo0bits>
 80114f4:	9b01      	ldr	r3, [sp, #4]
 80114f6:	6163      	str	r3, [r4, #20]
 80114f8:	2201      	movs	r2, #1
 80114fa:	6122      	str	r2, [r4, #16]
 80114fc:	3020      	adds	r0, #32
 80114fe:	e7e3      	b.n	80114c8 <__d2b+0x60>
 8011500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011508:	f8c9 0000 	str.w	r0, [r9]
 801150c:	6918      	ldr	r0, [r3, #16]
 801150e:	f7ff fd2b 	bl	8010f68 <__hi0bits>
 8011512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011516:	e7df      	b.n	80114d8 <__d2b+0x70>
 8011518:	080122df 	.word	0x080122df
 801151c:	080122f0 	.word	0x080122f0

08011520 <_calloc_r>:
 8011520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011522:	fba1 2402 	umull	r2, r4, r1, r2
 8011526:	b94c      	cbnz	r4, 801153c <_calloc_r+0x1c>
 8011528:	4611      	mov	r1, r2
 801152a:	9201      	str	r2, [sp, #4]
 801152c:	f7fd fe8c 	bl	800f248 <_malloc_r>
 8011530:	9a01      	ldr	r2, [sp, #4]
 8011532:	4605      	mov	r5, r0
 8011534:	b930      	cbnz	r0, 8011544 <_calloc_r+0x24>
 8011536:	4628      	mov	r0, r5
 8011538:	b003      	add	sp, #12
 801153a:	bd30      	pop	{r4, r5, pc}
 801153c:	220c      	movs	r2, #12
 801153e:	6002      	str	r2, [r0, #0]
 8011540:	2500      	movs	r5, #0
 8011542:	e7f8      	b.n	8011536 <_calloc_r+0x16>
 8011544:	4621      	mov	r1, r4
 8011546:	f7fd fe56 	bl	800f1f6 <memset>
 801154a:	e7f4      	b.n	8011536 <_calloc_r+0x16>

0801154c <_free_r>:
 801154c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801154e:	2900      	cmp	r1, #0
 8011550:	d044      	beq.n	80115dc <_free_r+0x90>
 8011552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011556:	9001      	str	r0, [sp, #4]
 8011558:	2b00      	cmp	r3, #0
 801155a:	f1a1 0404 	sub.w	r4, r1, #4
 801155e:	bfb8      	it	lt
 8011560:	18e4      	addlt	r4, r4, r3
 8011562:	f7ff fc4d 	bl	8010e00 <__malloc_lock>
 8011566:	4a1e      	ldr	r2, [pc, #120]	; (80115e0 <_free_r+0x94>)
 8011568:	9801      	ldr	r0, [sp, #4]
 801156a:	6813      	ldr	r3, [r2, #0]
 801156c:	b933      	cbnz	r3, 801157c <_free_r+0x30>
 801156e:	6063      	str	r3, [r4, #4]
 8011570:	6014      	str	r4, [r2, #0]
 8011572:	b003      	add	sp, #12
 8011574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011578:	f7ff bc48 	b.w	8010e0c <__malloc_unlock>
 801157c:	42a3      	cmp	r3, r4
 801157e:	d908      	bls.n	8011592 <_free_r+0x46>
 8011580:	6825      	ldr	r5, [r4, #0]
 8011582:	1961      	adds	r1, r4, r5
 8011584:	428b      	cmp	r3, r1
 8011586:	bf01      	itttt	eq
 8011588:	6819      	ldreq	r1, [r3, #0]
 801158a:	685b      	ldreq	r3, [r3, #4]
 801158c:	1949      	addeq	r1, r1, r5
 801158e:	6021      	streq	r1, [r4, #0]
 8011590:	e7ed      	b.n	801156e <_free_r+0x22>
 8011592:	461a      	mov	r2, r3
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	b10b      	cbz	r3, 801159c <_free_r+0x50>
 8011598:	42a3      	cmp	r3, r4
 801159a:	d9fa      	bls.n	8011592 <_free_r+0x46>
 801159c:	6811      	ldr	r1, [r2, #0]
 801159e:	1855      	adds	r5, r2, r1
 80115a0:	42a5      	cmp	r5, r4
 80115a2:	d10b      	bne.n	80115bc <_free_r+0x70>
 80115a4:	6824      	ldr	r4, [r4, #0]
 80115a6:	4421      	add	r1, r4
 80115a8:	1854      	adds	r4, r2, r1
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	6011      	str	r1, [r2, #0]
 80115ae:	d1e0      	bne.n	8011572 <_free_r+0x26>
 80115b0:	681c      	ldr	r4, [r3, #0]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	6053      	str	r3, [r2, #4]
 80115b6:	4421      	add	r1, r4
 80115b8:	6011      	str	r1, [r2, #0]
 80115ba:	e7da      	b.n	8011572 <_free_r+0x26>
 80115bc:	d902      	bls.n	80115c4 <_free_r+0x78>
 80115be:	230c      	movs	r3, #12
 80115c0:	6003      	str	r3, [r0, #0]
 80115c2:	e7d6      	b.n	8011572 <_free_r+0x26>
 80115c4:	6825      	ldr	r5, [r4, #0]
 80115c6:	1961      	adds	r1, r4, r5
 80115c8:	428b      	cmp	r3, r1
 80115ca:	bf04      	itt	eq
 80115cc:	6819      	ldreq	r1, [r3, #0]
 80115ce:	685b      	ldreq	r3, [r3, #4]
 80115d0:	6063      	str	r3, [r4, #4]
 80115d2:	bf04      	itt	eq
 80115d4:	1949      	addeq	r1, r1, r5
 80115d6:	6021      	streq	r1, [r4, #0]
 80115d8:	6054      	str	r4, [r2, #4]
 80115da:	e7ca      	b.n	8011572 <_free_r+0x26>
 80115dc:	b003      	add	sp, #12
 80115de:	bd30      	pop	{r4, r5, pc}
 80115e0:	24001148 	.word	0x24001148

080115e4 <__ssputs_r>:
 80115e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115e8:	688e      	ldr	r6, [r1, #8]
 80115ea:	429e      	cmp	r6, r3
 80115ec:	4682      	mov	sl, r0
 80115ee:	460c      	mov	r4, r1
 80115f0:	4690      	mov	r8, r2
 80115f2:	461f      	mov	r7, r3
 80115f4:	d838      	bhi.n	8011668 <__ssputs_r+0x84>
 80115f6:	898a      	ldrh	r2, [r1, #12]
 80115f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115fc:	d032      	beq.n	8011664 <__ssputs_r+0x80>
 80115fe:	6825      	ldr	r5, [r4, #0]
 8011600:	6909      	ldr	r1, [r1, #16]
 8011602:	eba5 0901 	sub.w	r9, r5, r1
 8011606:	6965      	ldr	r5, [r4, #20]
 8011608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801160c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011610:	3301      	adds	r3, #1
 8011612:	444b      	add	r3, r9
 8011614:	106d      	asrs	r5, r5, #1
 8011616:	429d      	cmp	r5, r3
 8011618:	bf38      	it	cc
 801161a:	461d      	movcc	r5, r3
 801161c:	0553      	lsls	r3, r2, #21
 801161e:	d531      	bpl.n	8011684 <__ssputs_r+0xa0>
 8011620:	4629      	mov	r1, r5
 8011622:	f7fd fe11 	bl	800f248 <_malloc_r>
 8011626:	4606      	mov	r6, r0
 8011628:	b950      	cbnz	r0, 8011640 <__ssputs_r+0x5c>
 801162a:	230c      	movs	r3, #12
 801162c:	f8ca 3000 	str.w	r3, [sl]
 8011630:	89a3      	ldrh	r3, [r4, #12]
 8011632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011636:	81a3      	strh	r3, [r4, #12]
 8011638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011640:	6921      	ldr	r1, [r4, #16]
 8011642:	464a      	mov	r2, r9
 8011644:	f7fd fdc9 	bl	800f1da <memcpy>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	6126      	str	r6, [r4, #16]
 8011656:	6165      	str	r5, [r4, #20]
 8011658:	444e      	add	r6, r9
 801165a:	eba5 0509 	sub.w	r5, r5, r9
 801165e:	6026      	str	r6, [r4, #0]
 8011660:	60a5      	str	r5, [r4, #8]
 8011662:	463e      	mov	r6, r7
 8011664:	42be      	cmp	r6, r7
 8011666:	d900      	bls.n	801166a <__ssputs_r+0x86>
 8011668:	463e      	mov	r6, r7
 801166a:	6820      	ldr	r0, [r4, #0]
 801166c:	4632      	mov	r2, r6
 801166e:	4641      	mov	r1, r8
 8011670:	f000 fae4 	bl	8011c3c <memmove>
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	1b9b      	subs	r3, r3, r6
 8011678:	60a3      	str	r3, [r4, #8]
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	4433      	add	r3, r6
 801167e:	6023      	str	r3, [r4, #0]
 8011680:	2000      	movs	r0, #0
 8011682:	e7db      	b.n	801163c <__ssputs_r+0x58>
 8011684:	462a      	mov	r2, r5
 8011686:	f000 faf3 	bl	8011c70 <_realloc_r>
 801168a:	4606      	mov	r6, r0
 801168c:	2800      	cmp	r0, #0
 801168e:	d1e1      	bne.n	8011654 <__ssputs_r+0x70>
 8011690:	6921      	ldr	r1, [r4, #16]
 8011692:	4650      	mov	r0, sl
 8011694:	f7ff ff5a 	bl	801154c <_free_r>
 8011698:	e7c7      	b.n	801162a <__ssputs_r+0x46>
	...

0801169c <_svfiprintf_r>:
 801169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a0:	4698      	mov	r8, r3
 80116a2:	898b      	ldrh	r3, [r1, #12]
 80116a4:	061b      	lsls	r3, r3, #24
 80116a6:	b09d      	sub	sp, #116	; 0x74
 80116a8:	4607      	mov	r7, r0
 80116aa:	460d      	mov	r5, r1
 80116ac:	4614      	mov	r4, r2
 80116ae:	d50e      	bpl.n	80116ce <_svfiprintf_r+0x32>
 80116b0:	690b      	ldr	r3, [r1, #16]
 80116b2:	b963      	cbnz	r3, 80116ce <_svfiprintf_r+0x32>
 80116b4:	2140      	movs	r1, #64	; 0x40
 80116b6:	f7fd fdc7 	bl	800f248 <_malloc_r>
 80116ba:	6028      	str	r0, [r5, #0]
 80116bc:	6128      	str	r0, [r5, #16]
 80116be:	b920      	cbnz	r0, 80116ca <_svfiprintf_r+0x2e>
 80116c0:	230c      	movs	r3, #12
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116c8:	e0d1      	b.n	801186e <_svfiprintf_r+0x1d2>
 80116ca:	2340      	movs	r3, #64	; 0x40
 80116cc:	616b      	str	r3, [r5, #20]
 80116ce:	2300      	movs	r3, #0
 80116d0:	9309      	str	r3, [sp, #36]	; 0x24
 80116d2:	2320      	movs	r3, #32
 80116d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80116dc:	2330      	movs	r3, #48	; 0x30
 80116de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011888 <_svfiprintf_r+0x1ec>
 80116e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116e6:	f04f 0901 	mov.w	r9, #1
 80116ea:	4623      	mov	r3, r4
 80116ec:	469a      	mov	sl, r3
 80116ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116f2:	b10a      	cbz	r2, 80116f8 <_svfiprintf_r+0x5c>
 80116f4:	2a25      	cmp	r2, #37	; 0x25
 80116f6:	d1f9      	bne.n	80116ec <_svfiprintf_r+0x50>
 80116f8:	ebba 0b04 	subs.w	fp, sl, r4
 80116fc:	d00b      	beq.n	8011716 <_svfiprintf_r+0x7a>
 80116fe:	465b      	mov	r3, fp
 8011700:	4622      	mov	r2, r4
 8011702:	4629      	mov	r1, r5
 8011704:	4638      	mov	r0, r7
 8011706:	f7ff ff6d 	bl	80115e4 <__ssputs_r>
 801170a:	3001      	adds	r0, #1
 801170c:	f000 80aa 	beq.w	8011864 <_svfiprintf_r+0x1c8>
 8011710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011712:	445a      	add	r2, fp
 8011714:	9209      	str	r2, [sp, #36]	; 0x24
 8011716:	f89a 3000 	ldrb.w	r3, [sl]
 801171a:	2b00      	cmp	r3, #0
 801171c:	f000 80a2 	beq.w	8011864 <_svfiprintf_r+0x1c8>
 8011720:	2300      	movs	r3, #0
 8011722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801172a:	f10a 0a01 	add.w	sl, sl, #1
 801172e:	9304      	str	r3, [sp, #16]
 8011730:	9307      	str	r3, [sp, #28]
 8011732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011736:	931a      	str	r3, [sp, #104]	; 0x68
 8011738:	4654      	mov	r4, sl
 801173a:	2205      	movs	r2, #5
 801173c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011740:	4851      	ldr	r0, [pc, #324]	; (8011888 <_svfiprintf_r+0x1ec>)
 8011742:	f7ee fdd5 	bl	80002f0 <memchr>
 8011746:	9a04      	ldr	r2, [sp, #16]
 8011748:	b9d8      	cbnz	r0, 8011782 <_svfiprintf_r+0xe6>
 801174a:	06d0      	lsls	r0, r2, #27
 801174c:	bf44      	itt	mi
 801174e:	2320      	movmi	r3, #32
 8011750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011754:	0711      	lsls	r1, r2, #28
 8011756:	bf44      	itt	mi
 8011758:	232b      	movmi	r3, #43	; 0x2b
 801175a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801175e:	f89a 3000 	ldrb.w	r3, [sl]
 8011762:	2b2a      	cmp	r3, #42	; 0x2a
 8011764:	d015      	beq.n	8011792 <_svfiprintf_r+0xf6>
 8011766:	9a07      	ldr	r2, [sp, #28]
 8011768:	4654      	mov	r4, sl
 801176a:	2000      	movs	r0, #0
 801176c:	f04f 0c0a 	mov.w	ip, #10
 8011770:	4621      	mov	r1, r4
 8011772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011776:	3b30      	subs	r3, #48	; 0x30
 8011778:	2b09      	cmp	r3, #9
 801177a:	d94e      	bls.n	801181a <_svfiprintf_r+0x17e>
 801177c:	b1b0      	cbz	r0, 80117ac <_svfiprintf_r+0x110>
 801177e:	9207      	str	r2, [sp, #28]
 8011780:	e014      	b.n	80117ac <_svfiprintf_r+0x110>
 8011782:	eba0 0308 	sub.w	r3, r0, r8
 8011786:	fa09 f303 	lsl.w	r3, r9, r3
 801178a:	4313      	orrs	r3, r2
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	46a2      	mov	sl, r4
 8011790:	e7d2      	b.n	8011738 <_svfiprintf_r+0x9c>
 8011792:	9b03      	ldr	r3, [sp, #12]
 8011794:	1d19      	adds	r1, r3, #4
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	9103      	str	r1, [sp, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	bfbb      	ittet	lt
 801179e:	425b      	neglt	r3, r3
 80117a0:	f042 0202 	orrlt.w	r2, r2, #2
 80117a4:	9307      	strge	r3, [sp, #28]
 80117a6:	9307      	strlt	r3, [sp, #28]
 80117a8:	bfb8      	it	lt
 80117aa:	9204      	strlt	r2, [sp, #16]
 80117ac:	7823      	ldrb	r3, [r4, #0]
 80117ae:	2b2e      	cmp	r3, #46	; 0x2e
 80117b0:	d10c      	bne.n	80117cc <_svfiprintf_r+0x130>
 80117b2:	7863      	ldrb	r3, [r4, #1]
 80117b4:	2b2a      	cmp	r3, #42	; 0x2a
 80117b6:	d135      	bne.n	8011824 <_svfiprintf_r+0x188>
 80117b8:	9b03      	ldr	r3, [sp, #12]
 80117ba:	1d1a      	adds	r2, r3, #4
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	9203      	str	r2, [sp, #12]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	bfb8      	it	lt
 80117c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80117c8:	3402      	adds	r4, #2
 80117ca:	9305      	str	r3, [sp, #20]
 80117cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011898 <_svfiprintf_r+0x1fc>
 80117d0:	7821      	ldrb	r1, [r4, #0]
 80117d2:	2203      	movs	r2, #3
 80117d4:	4650      	mov	r0, sl
 80117d6:	f7ee fd8b 	bl	80002f0 <memchr>
 80117da:	b140      	cbz	r0, 80117ee <_svfiprintf_r+0x152>
 80117dc:	2340      	movs	r3, #64	; 0x40
 80117de:	eba0 000a 	sub.w	r0, r0, sl
 80117e2:	fa03 f000 	lsl.w	r0, r3, r0
 80117e6:	9b04      	ldr	r3, [sp, #16]
 80117e8:	4303      	orrs	r3, r0
 80117ea:	3401      	adds	r4, #1
 80117ec:	9304      	str	r3, [sp, #16]
 80117ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117f2:	4826      	ldr	r0, [pc, #152]	; (801188c <_svfiprintf_r+0x1f0>)
 80117f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117f8:	2206      	movs	r2, #6
 80117fa:	f7ee fd79 	bl	80002f0 <memchr>
 80117fe:	2800      	cmp	r0, #0
 8011800:	d038      	beq.n	8011874 <_svfiprintf_r+0x1d8>
 8011802:	4b23      	ldr	r3, [pc, #140]	; (8011890 <_svfiprintf_r+0x1f4>)
 8011804:	bb1b      	cbnz	r3, 801184e <_svfiprintf_r+0x1b2>
 8011806:	9b03      	ldr	r3, [sp, #12]
 8011808:	3307      	adds	r3, #7
 801180a:	f023 0307 	bic.w	r3, r3, #7
 801180e:	3308      	adds	r3, #8
 8011810:	9303      	str	r3, [sp, #12]
 8011812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011814:	4433      	add	r3, r6
 8011816:	9309      	str	r3, [sp, #36]	; 0x24
 8011818:	e767      	b.n	80116ea <_svfiprintf_r+0x4e>
 801181a:	fb0c 3202 	mla	r2, ip, r2, r3
 801181e:	460c      	mov	r4, r1
 8011820:	2001      	movs	r0, #1
 8011822:	e7a5      	b.n	8011770 <_svfiprintf_r+0xd4>
 8011824:	2300      	movs	r3, #0
 8011826:	3401      	adds	r4, #1
 8011828:	9305      	str	r3, [sp, #20]
 801182a:	4619      	mov	r1, r3
 801182c:	f04f 0c0a 	mov.w	ip, #10
 8011830:	4620      	mov	r0, r4
 8011832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011836:	3a30      	subs	r2, #48	; 0x30
 8011838:	2a09      	cmp	r2, #9
 801183a:	d903      	bls.n	8011844 <_svfiprintf_r+0x1a8>
 801183c:	2b00      	cmp	r3, #0
 801183e:	d0c5      	beq.n	80117cc <_svfiprintf_r+0x130>
 8011840:	9105      	str	r1, [sp, #20]
 8011842:	e7c3      	b.n	80117cc <_svfiprintf_r+0x130>
 8011844:	fb0c 2101 	mla	r1, ip, r1, r2
 8011848:	4604      	mov	r4, r0
 801184a:	2301      	movs	r3, #1
 801184c:	e7f0      	b.n	8011830 <_svfiprintf_r+0x194>
 801184e:	ab03      	add	r3, sp, #12
 8011850:	9300      	str	r3, [sp, #0]
 8011852:	462a      	mov	r2, r5
 8011854:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <_svfiprintf_r+0x1f8>)
 8011856:	a904      	add	r1, sp, #16
 8011858:	4638      	mov	r0, r7
 801185a:	f7fd fdf9 	bl	800f450 <_printf_float>
 801185e:	1c42      	adds	r2, r0, #1
 8011860:	4606      	mov	r6, r0
 8011862:	d1d6      	bne.n	8011812 <_svfiprintf_r+0x176>
 8011864:	89ab      	ldrh	r3, [r5, #12]
 8011866:	065b      	lsls	r3, r3, #25
 8011868:	f53f af2c 	bmi.w	80116c4 <_svfiprintf_r+0x28>
 801186c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801186e:	b01d      	add	sp, #116	; 0x74
 8011870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011874:	ab03      	add	r3, sp, #12
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	462a      	mov	r2, r5
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <_svfiprintf_r+0x1f8>)
 801187c:	a904      	add	r1, sp, #16
 801187e:	4638      	mov	r0, r7
 8011880:	f7fe f872 	bl	800f968 <_printf_i>
 8011884:	e7eb      	b.n	801185e <_svfiprintf_r+0x1c2>
 8011886:	bf00      	nop
 8011888:	0801244c 	.word	0x0801244c
 801188c:	08012456 	.word	0x08012456
 8011890:	0800f451 	.word	0x0800f451
 8011894:	080115e5 	.word	0x080115e5
 8011898:	08012452 	.word	0x08012452

0801189c <__sfputc_r>:
 801189c:	6893      	ldr	r3, [r2, #8]
 801189e:	3b01      	subs	r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	b410      	push	{r4}
 80118a4:	6093      	str	r3, [r2, #8]
 80118a6:	da08      	bge.n	80118ba <__sfputc_r+0x1e>
 80118a8:	6994      	ldr	r4, [r2, #24]
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	db01      	blt.n	80118b2 <__sfputc_r+0x16>
 80118ae:	290a      	cmp	r1, #10
 80118b0:	d103      	bne.n	80118ba <__sfputc_r+0x1e>
 80118b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118b6:	f7fe ba7f 	b.w	800fdb8 <__swbuf_r>
 80118ba:	6813      	ldr	r3, [r2, #0]
 80118bc:	1c58      	adds	r0, r3, #1
 80118be:	6010      	str	r0, [r2, #0]
 80118c0:	7019      	strb	r1, [r3, #0]
 80118c2:	4608      	mov	r0, r1
 80118c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118c8:	4770      	bx	lr

080118ca <__sfputs_r>:
 80118ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118cc:	4606      	mov	r6, r0
 80118ce:	460f      	mov	r7, r1
 80118d0:	4614      	mov	r4, r2
 80118d2:	18d5      	adds	r5, r2, r3
 80118d4:	42ac      	cmp	r4, r5
 80118d6:	d101      	bne.n	80118dc <__sfputs_r+0x12>
 80118d8:	2000      	movs	r0, #0
 80118da:	e007      	b.n	80118ec <__sfputs_r+0x22>
 80118dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118e0:	463a      	mov	r2, r7
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7ff ffda 	bl	801189c <__sfputc_r>
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d1f3      	bne.n	80118d4 <__sfputs_r+0xa>
 80118ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118f0 <_vfiprintf_r>:
 80118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f4:	460d      	mov	r5, r1
 80118f6:	b09d      	sub	sp, #116	; 0x74
 80118f8:	4614      	mov	r4, r2
 80118fa:	4698      	mov	r8, r3
 80118fc:	4606      	mov	r6, r0
 80118fe:	b118      	cbz	r0, 8011908 <_vfiprintf_r+0x18>
 8011900:	6983      	ldr	r3, [r0, #24]
 8011902:	b90b      	cbnz	r3, 8011908 <_vfiprintf_r+0x18>
 8011904:	f7fd fba4 	bl	800f050 <__sinit>
 8011908:	4b89      	ldr	r3, [pc, #548]	; (8011b30 <_vfiprintf_r+0x240>)
 801190a:	429d      	cmp	r5, r3
 801190c:	d11b      	bne.n	8011946 <_vfiprintf_r+0x56>
 801190e:	6875      	ldr	r5, [r6, #4]
 8011910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011912:	07d9      	lsls	r1, r3, #31
 8011914:	d405      	bmi.n	8011922 <_vfiprintf_r+0x32>
 8011916:	89ab      	ldrh	r3, [r5, #12]
 8011918:	059a      	lsls	r2, r3, #22
 801191a:	d402      	bmi.n	8011922 <_vfiprintf_r+0x32>
 801191c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801191e:	f7fd fc5a 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 8011922:	89ab      	ldrh	r3, [r5, #12]
 8011924:	071b      	lsls	r3, r3, #28
 8011926:	d501      	bpl.n	801192c <_vfiprintf_r+0x3c>
 8011928:	692b      	ldr	r3, [r5, #16]
 801192a:	b9eb      	cbnz	r3, 8011968 <_vfiprintf_r+0x78>
 801192c:	4629      	mov	r1, r5
 801192e:	4630      	mov	r0, r6
 8011930:	f7fe faa6 	bl	800fe80 <__swsetup_r>
 8011934:	b1c0      	cbz	r0, 8011968 <_vfiprintf_r+0x78>
 8011936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011938:	07dc      	lsls	r4, r3, #31
 801193a:	d50e      	bpl.n	801195a <_vfiprintf_r+0x6a>
 801193c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011940:	b01d      	add	sp, #116	; 0x74
 8011942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011946:	4b7b      	ldr	r3, [pc, #492]	; (8011b34 <_vfiprintf_r+0x244>)
 8011948:	429d      	cmp	r5, r3
 801194a:	d101      	bne.n	8011950 <_vfiprintf_r+0x60>
 801194c:	68b5      	ldr	r5, [r6, #8]
 801194e:	e7df      	b.n	8011910 <_vfiprintf_r+0x20>
 8011950:	4b79      	ldr	r3, [pc, #484]	; (8011b38 <_vfiprintf_r+0x248>)
 8011952:	429d      	cmp	r5, r3
 8011954:	bf08      	it	eq
 8011956:	68f5      	ldreq	r5, [r6, #12]
 8011958:	e7da      	b.n	8011910 <_vfiprintf_r+0x20>
 801195a:	89ab      	ldrh	r3, [r5, #12]
 801195c:	0598      	lsls	r0, r3, #22
 801195e:	d4ed      	bmi.n	801193c <_vfiprintf_r+0x4c>
 8011960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011962:	f7fd fc39 	bl	800f1d8 <__retarget_lock_release_recursive>
 8011966:	e7e9      	b.n	801193c <_vfiprintf_r+0x4c>
 8011968:	2300      	movs	r3, #0
 801196a:	9309      	str	r3, [sp, #36]	; 0x24
 801196c:	2320      	movs	r3, #32
 801196e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011972:	f8cd 800c 	str.w	r8, [sp, #12]
 8011976:	2330      	movs	r3, #48	; 0x30
 8011978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b3c <_vfiprintf_r+0x24c>
 801197c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011980:	f04f 0901 	mov.w	r9, #1
 8011984:	4623      	mov	r3, r4
 8011986:	469a      	mov	sl, r3
 8011988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801198c:	b10a      	cbz	r2, 8011992 <_vfiprintf_r+0xa2>
 801198e:	2a25      	cmp	r2, #37	; 0x25
 8011990:	d1f9      	bne.n	8011986 <_vfiprintf_r+0x96>
 8011992:	ebba 0b04 	subs.w	fp, sl, r4
 8011996:	d00b      	beq.n	80119b0 <_vfiprintf_r+0xc0>
 8011998:	465b      	mov	r3, fp
 801199a:	4622      	mov	r2, r4
 801199c:	4629      	mov	r1, r5
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ff ff93 	bl	80118ca <__sfputs_r>
 80119a4:	3001      	adds	r0, #1
 80119a6:	f000 80aa 	beq.w	8011afe <_vfiprintf_r+0x20e>
 80119aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119ac:	445a      	add	r2, fp
 80119ae:	9209      	str	r2, [sp, #36]	; 0x24
 80119b0:	f89a 3000 	ldrb.w	r3, [sl]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f000 80a2 	beq.w	8011afe <_vfiprintf_r+0x20e>
 80119ba:	2300      	movs	r3, #0
 80119bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119c4:	f10a 0a01 	add.w	sl, sl, #1
 80119c8:	9304      	str	r3, [sp, #16]
 80119ca:	9307      	str	r3, [sp, #28]
 80119cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119d0:	931a      	str	r3, [sp, #104]	; 0x68
 80119d2:	4654      	mov	r4, sl
 80119d4:	2205      	movs	r2, #5
 80119d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119da:	4858      	ldr	r0, [pc, #352]	; (8011b3c <_vfiprintf_r+0x24c>)
 80119dc:	f7ee fc88 	bl	80002f0 <memchr>
 80119e0:	9a04      	ldr	r2, [sp, #16]
 80119e2:	b9d8      	cbnz	r0, 8011a1c <_vfiprintf_r+0x12c>
 80119e4:	06d1      	lsls	r1, r2, #27
 80119e6:	bf44      	itt	mi
 80119e8:	2320      	movmi	r3, #32
 80119ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119ee:	0713      	lsls	r3, r2, #28
 80119f0:	bf44      	itt	mi
 80119f2:	232b      	movmi	r3, #43	; 0x2b
 80119f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119f8:	f89a 3000 	ldrb.w	r3, [sl]
 80119fc:	2b2a      	cmp	r3, #42	; 0x2a
 80119fe:	d015      	beq.n	8011a2c <_vfiprintf_r+0x13c>
 8011a00:	9a07      	ldr	r2, [sp, #28]
 8011a02:	4654      	mov	r4, sl
 8011a04:	2000      	movs	r0, #0
 8011a06:	f04f 0c0a 	mov.w	ip, #10
 8011a0a:	4621      	mov	r1, r4
 8011a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a10:	3b30      	subs	r3, #48	; 0x30
 8011a12:	2b09      	cmp	r3, #9
 8011a14:	d94e      	bls.n	8011ab4 <_vfiprintf_r+0x1c4>
 8011a16:	b1b0      	cbz	r0, 8011a46 <_vfiprintf_r+0x156>
 8011a18:	9207      	str	r2, [sp, #28]
 8011a1a:	e014      	b.n	8011a46 <_vfiprintf_r+0x156>
 8011a1c:	eba0 0308 	sub.w	r3, r0, r8
 8011a20:	fa09 f303 	lsl.w	r3, r9, r3
 8011a24:	4313      	orrs	r3, r2
 8011a26:	9304      	str	r3, [sp, #16]
 8011a28:	46a2      	mov	sl, r4
 8011a2a:	e7d2      	b.n	80119d2 <_vfiprintf_r+0xe2>
 8011a2c:	9b03      	ldr	r3, [sp, #12]
 8011a2e:	1d19      	adds	r1, r3, #4
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	9103      	str	r1, [sp, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	bfbb      	ittet	lt
 8011a38:	425b      	neglt	r3, r3
 8011a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011a3e:	9307      	strge	r3, [sp, #28]
 8011a40:	9307      	strlt	r3, [sp, #28]
 8011a42:	bfb8      	it	lt
 8011a44:	9204      	strlt	r2, [sp, #16]
 8011a46:	7823      	ldrb	r3, [r4, #0]
 8011a48:	2b2e      	cmp	r3, #46	; 0x2e
 8011a4a:	d10c      	bne.n	8011a66 <_vfiprintf_r+0x176>
 8011a4c:	7863      	ldrb	r3, [r4, #1]
 8011a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a50:	d135      	bne.n	8011abe <_vfiprintf_r+0x1ce>
 8011a52:	9b03      	ldr	r3, [sp, #12]
 8011a54:	1d1a      	adds	r2, r3, #4
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	9203      	str	r2, [sp, #12]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfb8      	it	lt
 8011a5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011a62:	3402      	adds	r4, #2
 8011a64:	9305      	str	r3, [sp, #20]
 8011a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b4c <_vfiprintf_r+0x25c>
 8011a6a:	7821      	ldrb	r1, [r4, #0]
 8011a6c:	2203      	movs	r2, #3
 8011a6e:	4650      	mov	r0, sl
 8011a70:	f7ee fc3e 	bl	80002f0 <memchr>
 8011a74:	b140      	cbz	r0, 8011a88 <_vfiprintf_r+0x198>
 8011a76:	2340      	movs	r3, #64	; 0x40
 8011a78:	eba0 000a 	sub.w	r0, r0, sl
 8011a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8011a80:	9b04      	ldr	r3, [sp, #16]
 8011a82:	4303      	orrs	r3, r0
 8011a84:	3401      	adds	r4, #1
 8011a86:	9304      	str	r3, [sp, #16]
 8011a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a8c:	482c      	ldr	r0, [pc, #176]	; (8011b40 <_vfiprintf_r+0x250>)
 8011a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a92:	2206      	movs	r2, #6
 8011a94:	f7ee fc2c 	bl	80002f0 <memchr>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d03f      	beq.n	8011b1c <_vfiprintf_r+0x22c>
 8011a9c:	4b29      	ldr	r3, [pc, #164]	; (8011b44 <_vfiprintf_r+0x254>)
 8011a9e:	bb1b      	cbnz	r3, 8011ae8 <_vfiprintf_r+0x1f8>
 8011aa0:	9b03      	ldr	r3, [sp, #12]
 8011aa2:	3307      	adds	r3, #7
 8011aa4:	f023 0307 	bic.w	r3, r3, #7
 8011aa8:	3308      	adds	r3, #8
 8011aaa:	9303      	str	r3, [sp, #12]
 8011aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aae:	443b      	add	r3, r7
 8011ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ab2:	e767      	b.n	8011984 <_vfiprintf_r+0x94>
 8011ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ab8:	460c      	mov	r4, r1
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7a5      	b.n	8011a0a <_vfiprintf_r+0x11a>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	3401      	adds	r4, #1
 8011ac2:	9305      	str	r3, [sp, #20]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	f04f 0c0a 	mov.w	ip, #10
 8011aca:	4620      	mov	r0, r4
 8011acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ad0:	3a30      	subs	r2, #48	; 0x30
 8011ad2:	2a09      	cmp	r2, #9
 8011ad4:	d903      	bls.n	8011ade <_vfiprintf_r+0x1ee>
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d0c5      	beq.n	8011a66 <_vfiprintf_r+0x176>
 8011ada:	9105      	str	r1, [sp, #20]
 8011adc:	e7c3      	b.n	8011a66 <_vfiprintf_r+0x176>
 8011ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e7f0      	b.n	8011aca <_vfiprintf_r+0x1da>
 8011ae8:	ab03      	add	r3, sp, #12
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	462a      	mov	r2, r5
 8011aee:	4b16      	ldr	r3, [pc, #88]	; (8011b48 <_vfiprintf_r+0x258>)
 8011af0:	a904      	add	r1, sp, #16
 8011af2:	4630      	mov	r0, r6
 8011af4:	f7fd fcac 	bl	800f450 <_printf_float>
 8011af8:	4607      	mov	r7, r0
 8011afa:	1c78      	adds	r0, r7, #1
 8011afc:	d1d6      	bne.n	8011aac <_vfiprintf_r+0x1bc>
 8011afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b00:	07d9      	lsls	r1, r3, #31
 8011b02:	d405      	bmi.n	8011b10 <_vfiprintf_r+0x220>
 8011b04:	89ab      	ldrh	r3, [r5, #12]
 8011b06:	059a      	lsls	r2, r3, #22
 8011b08:	d402      	bmi.n	8011b10 <_vfiprintf_r+0x220>
 8011b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b0c:	f7fd fb64 	bl	800f1d8 <__retarget_lock_release_recursive>
 8011b10:	89ab      	ldrh	r3, [r5, #12]
 8011b12:	065b      	lsls	r3, r3, #25
 8011b14:	f53f af12 	bmi.w	801193c <_vfiprintf_r+0x4c>
 8011b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b1a:	e711      	b.n	8011940 <_vfiprintf_r+0x50>
 8011b1c:	ab03      	add	r3, sp, #12
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	462a      	mov	r2, r5
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <_vfiprintf_r+0x258>)
 8011b24:	a904      	add	r1, sp, #16
 8011b26:	4630      	mov	r0, r6
 8011b28:	f7fd ff1e 	bl	800f968 <_printf_i>
 8011b2c:	e7e4      	b.n	8011af8 <_vfiprintf_r+0x208>
 8011b2e:	bf00      	nop
 8011b30:	080121e8 	.word	0x080121e8
 8011b34:	08012208 	.word	0x08012208
 8011b38:	080121c8 	.word	0x080121c8
 8011b3c:	0801244c 	.word	0x0801244c
 8011b40:	08012456 	.word	0x08012456
 8011b44:	0800f451 	.word	0x0800f451
 8011b48:	080118cb 	.word	0x080118cb
 8011b4c:	08012452 	.word	0x08012452

08011b50 <_read_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	4d07      	ldr	r5, [pc, #28]	; (8011b70 <_read_r+0x20>)
 8011b54:	4604      	mov	r4, r0
 8011b56:	4608      	mov	r0, r1
 8011b58:	4611      	mov	r1, r2
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	602a      	str	r2, [r5, #0]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	f7f1 fac0 	bl	80030e4 <_read>
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	d102      	bne.n	8011b6e <_read_r+0x1e>
 8011b68:	682b      	ldr	r3, [r5, #0]
 8011b6a:	b103      	cbz	r3, 8011b6e <_read_r+0x1e>
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	24001150 	.word	0x24001150

08011b74 <__assert_func>:
 8011b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b76:	4614      	mov	r4, r2
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4b09      	ldr	r3, [pc, #36]	; (8011ba0 <__assert_func+0x2c>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	4605      	mov	r5, r0
 8011b80:	68d8      	ldr	r0, [r3, #12]
 8011b82:	b14c      	cbz	r4, 8011b98 <__assert_func+0x24>
 8011b84:	4b07      	ldr	r3, [pc, #28]	; (8011ba4 <__assert_func+0x30>)
 8011b86:	9100      	str	r1, [sp, #0]
 8011b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b8c:	4906      	ldr	r1, [pc, #24]	; (8011ba8 <__assert_func+0x34>)
 8011b8e:	462b      	mov	r3, r5
 8011b90:	f000 f80e 	bl	8011bb0 <fiprintf>
 8011b94:	f000 f8a8 	bl	8011ce8 <abort>
 8011b98:	4b04      	ldr	r3, [pc, #16]	; (8011bac <__assert_func+0x38>)
 8011b9a:	461c      	mov	r4, r3
 8011b9c:	e7f3      	b.n	8011b86 <__assert_func+0x12>
 8011b9e:	bf00      	nop
 8011ba0:	2400001c 	.word	0x2400001c
 8011ba4:	0801245d 	.word	0x0801245d
 8011ba8:	0801246a 	.word	0x0801246a
 8011bac:	08012498 	.word	0x08012498

08011bb0 <fiprintf>:
 8011bb0:	b40e      	push	{r1, r2, r3}
 8011bb2:	b503      	push	{r0, r1, lr}
 8011bb4:	4601      	mov	r1, r0
 8011bb6:	ab03      	add	r3, sp, #12
 8011bb8:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <fiprintf+0x20>)
 8011bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bbe:	6800      	ldr	r0, [r0, #0]
 8011bc0:	9301      	str	r3, [sp, #4]
 8011bc2:	f7ff fe95 	bl	80118f0 <_vfiprintf_r>
 8011bc6:	b002      	add	sp, #8
 8011bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bcc:	b003      	add	sp, #12
 8011bce:	4770      	bx	lr
 8011bd0:	2400001c 	.word	0x2400001c

08011bd4 <_fstat_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4d07      	ldr	r5, [pc, #28]	; (8011bf4 <_fstat_r+0x20>)
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4604      	mov	r4, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	4611      	mov	r1, r2
 8011be0:	602b      	str	r3, [r5, #0]
 8011be2:	f7f1 fac4 	bl	800316e <_fstat>
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	d102      	bne.n	8011bf0 <_fstat_r+0x1c>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	b103      	cbz	r3, 8011bf0 <_fstat_r+0x1c>
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	bf00      	nop
 8011bf4:	24001150 	.word	0x24001150

08011bf8 <_isatty_r>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	4d06      	ldr	r5, [pc, #24]	; (8011c14 <_isatty_r+0x1c>)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	4604      	mov	r4, r0
 8011c00:	4608      	mov	r0, r1
 8011c02:	602b      	str	r3, [r5, #0]
 8011c04:	f7f1 fac3 	bl	800318e <_isatty>
 8011c08:	1c43      	adds	r3, r0, #1
 8011c0a:	d102      	bne.n	8011c12 <_isatty_r+0x1a>
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	b103      	cbz	r3, 8011c12 <_isatty_r+0x1a>
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	bd38      	pop	{r3, r4, r5, pc}
 8011c14:	24001150 	.word	0x24001150

08011c18 <__ascii_mbtowc>:
 8011c18:	b082      	sub	sp, #8
 8011c1a:	b901      	cbnz	r1, 8011c1e <__ascii_mbtowc+0x6>
 8011c1c:	a901      	add	r1, sp, #4
 8011c1e:	b142      	cbz	r2, 8011c32 <__ascii_mbtowc+0x1a>
 8011c20:	b14b      	cbz	r3, 8011c36 <__ascii_mbtowc+0x1e>
 8011c22:	7813      	ldrb	r3, [r2, #0]
 8011c24:	600b      	str	r3, [r1, #0]
 8011c26:	7812      	ldrb	r2, [r2, #0]
 8011c28:	1e10      	subs	r0, r2, #0
 8011c2a:	bf18      	it	ne
 8011c2c:	2001      	movne	r0, #1
 8011c2e:	b002      	add	sp, #8
 8011c30:	4770      	bx	lr
 8011c32:	4610      	mov	r0, r2
 8011c34:	e7fb      	b.n	8011c2e <__ascii_mbtowc+0x16>
 8011c36:	f06f 0001 	mvn.w	r0, #1
 8011c3a:	e7f8      	b.n	8011c2e <__ascii_mbtowc+0x16>

08011c3c <memmove>:
 8011c3c:	4288      	cmp	r0, r1
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	eb01 0402 	add.w	r4, r1, r2
 8011c44:	d902      	bls.n	8011c4c <memmove+0x10>
 8011c46:	4284      	cmp	r4, r0
 8011c48:	4623      	mov	r3, r4
 8011c4a:	d807      	bhi.n	8011c5c <memmove+0x20>
 8011c4c:	1e43      	subs	r3, r0, #1
 8011c4e:	42a1      	cmp	r1, r4
 8011c50:	d008      	beq.n	8011c64 <memmove+0x28>
 8011c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c5a:	e7f8      	b.n	8011c4e <memmove+0x12>
 8011c5c:	4402      	add	r2, r0
 8011c5e:	4601      	mov	r1, r0
 8011c60:	428a      	cmp	r2, r1
 8011c62:	d100      	bne.n	8011c66 <memmove+0x2a>
 8011c64:	bd10      	pop	{r4, pc}
 8011c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c6e:	e7f7      	b.n	8011c60 <memmove+0x24>

08011c70 <_realloc_r>:
 8011c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c74:	4680      	mov	r8, r0
 8011c76:	4614      	mov	r4, r2
 8011c78:	460e      	mov	r6, r1
 8011c7a:	b921      	cbnz	r1, 8011c86 <_realloc_r+0x16>
 8011c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c80:	4611      	mov	r1, r2
 8011c82:	f7fd bae1 	b.w	800f248 <_malloc_r>
 8011c86:	b92a      	cbnz	r2, 8011c94 <_realloc_r+0x24>
 8011c88:	f7ff fc60 	bl	801154c <_free_r>
 8011c8c:	4625      	mov	r5, r4
 8011c8e:	4628      	mov	r0, r5
 8011c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c94:	f000 f82f 	bl	8011cf6 <_malloc_usable_size_r>
 8011c98:	4284      	cmp	r4, r0
 8011c9a:	4607      	mov	r7, r0
 8011c9c:	d802      	bhi.n	8011ca4 <_realloc_r+0x34>
 8011c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ca2:	d812      	bhi.n	8011cca <_realloc_r+0x5a>
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	f7fd face 	bl	800f248 <_malloc_r>
 8011cac:	4605      	mov	r5, r0
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	d0ed      	beq.n	8011c8e <_realloc_r+0x1e>
 8011cb2:	42bc      	cmp	r4, r7
 8011cb4:	4622      	mov	r2, r4
 8011cb6:	4631      	mov	r1, r6
 8011cb8:	bf28      	it	cs
 8011cba:	463a      	movcs	r2, r7
 8011cbc:	f7fd fa8d 	bl	800f1da <memcpy>
 8011cc0:	4631      	mov	r1, r6
 8011cc2:	4640      	mov	r0, r8
 8011cc4:	f7ff fc42 	bl	801154c <_free_r>
 8011cc8:	e7e1      	b.n	8011c8e <_realloc_r+0x1e>
 8011cca:	4635      	mov	r5, r6
 8011ccc:	e7df      	b.n	8011c8e <_realloc_r+0x1e>

08011cce <__ascii_wctomb>:
 8011cce:	b149      	cbz	r1, 8011ce4 <__ascii_wctomb+0x16>
 8011cd0:	2aff      	cmp	r2, #255	; 0xff
 8011cd2:	bf85      	ittet	hi
 8011cd4:	238a      	movhi	r3, #138	; 0x8a
 8011cd6:	6003      	strhi	r3, [r0, #0]
 8011cd8:	700a      	strbls	r2, [r1, #0]
 8011cda:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011cde:	bf98      	it	ls
 8011ce0:	2001      	movls	r0, #1
 8011ce2:	4770      	bx	lr
 8011ce4:	4608      	mov	r0, r1
 8011ce6:	4770      	bx	lr

08011ce8 <abort>:
 8011ce8:	b508      	push	{r3, lr}
 8011cea:	2006      	movs	r0, #6
 8011cec:	f000 f834 	bl	8011d58 <raise>
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	f7f1 f9ed 	bl	80030d0 <_exit>

08011cf6 <_malloc_usable_size_r>:
 8011cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cfa:	1f18      	subs	r0, r3, #4
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	bfbc      	itt	lt
 8011d00:	580b      	ldrlt	r3, [r1, r0]
 8011d02:	18c0      	addlt	r0, r0, r3
 8011d04:	4770      	bx	lr

08011d06 <_raise_r>:
 8011d06:	291f      	cmp	r1, #31
 8011d08:	b538      	push	{r3, r4, r5, lr}
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	d904      	bls.n	8011d1a <_raise_r+0x14>
 8011d10:	2316      	movs	r3, #22
 8011d12:	6003      	str	r3, [r0, #0]
 8011d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d1c:	b112      	cbz	r2, 8011d24 <_raise_r+0x1e>
 8011d1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d22:	b94b      	cbnz	r3, 8011d38 <_raise_r+0x32>
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 f831 	bl	8011d8c <_getpid_r>
 8011d2a:	462a      	mov	r2, r5
 8011d2c:	4601      	mov	r1, r0
 8011d2e:	4620      	mov	r0, r4
 8011d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d34:	f000 b818 	b.w	8011d68 <_kill_r>
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d00a      	beq.n	8011d52 <_raise_r+0x4c>
 8011d3c:	1c59      	adds	r1, r3, #1
 8011d3e:	d103      	bne.n	8011d48 <_raise_r+0x42>
 8011d40:	2316      	movs	r3, #22
 8011d42:	6003      	str	r3, [r0, #0]
 8011d44:	2001      	movs	r0, #1
 8011d46:	e7e7      	b.n	8011d18 <_raise_r+0x12>
 8011d48:	2400      	movs	r4, #0
 8011d4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d4e:	4628      	mov	r0, r5
 8011d50:	4798      	blx	r3
 8011d52:	2000      	movs	r0, #0
 8011d54:	e7e0      	b.n	8011d18 <_raise_r+0x12>
	...

08011d58 <raise>:
 8011d58:	4b02      	ldr	r3, [pc, #8]	; (8011d64 <raise+0xc>)
 8011d5a:	4601      	mov	r1, r0
 8011d5c:	6818      	ldr	r0, [r3, #0]
 8011d5e:	f7ff bfd2 	b.w	8011d06 <_raise_r>
 8011d62:	bf00      	nop
 8011d64:	2400001c 	.word	0x2400001c

08011d68 <_kill_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4d07      	ldr	r5, [pc, #28]	; (8011d88 <_kill_r+0x20>)
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4604      	mov	r4, r0
 8011d70:	4608      	mov	r0, r1
 8011d72:	4611      	mov	r1, r2
 8011d74:	602b      	str	r3, [r5, #0]
 8011d76:	f7f1 f99b 	bl	80030b0 <_kill>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	d102      	bne.n	8011d84 <_kill_r+0x1c>
 8011d7e:	682b      	ldr	r3, [r5, #0]
 8011d80:	b103      	cbz	r3, 8011d84 <_kill_r+0x1c>
 8011d82:	6023      	str	r3, [r4, #0]
 8011d84:	bd38      	pop	{r3, r4, r5, pc}
 8011d86:	bf00      	nop
 8011d88:	24001150 	.word	0x24001150

08011d8c <_getpid_r>:
 8011d8c:	f7f1 b988 	b.w	80030a0 <_getpid>

08011d90 <_init>:
 8011d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d92:	bf00      	nop
 8011d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d96:	bc08      	pop	{r3}
 8011d98:	469e      	mov	lr, r3
 8011d9a:	4770      	bx	lr

08011d9c <_fini>:
 8011d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9e:	bf00      	nop
 8011da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011da2:	bc08      	pop	{r3}
 8011da4:	469e      	mov	lr, r3
 8011da6:	4770      	bx	lr
