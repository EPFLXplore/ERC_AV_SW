
EPFL_XPLORE_AVIONICS_MCU_ROCOROS_REMIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db4  080111e0  080111e0  000211e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f94  08011f94  00021f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011f9c  08011f9c  00021f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011fa4  08011fa4  00021fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  08011fac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a5a4  240001f4  080121a0  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400a798  080121a0  0003a798  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000b54fb  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000bbfa  00000000  00000000  000e571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000538ae  00000000  00000000  000f1317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bb0  00000000  00000000  00144bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00008338  00000000  00000000  00147778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004c9ab  00000000  00000000  0014fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a60c  00000000  00000000  0019c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001f744a  00000000  00000000  001f6a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  003edeb1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009a9c  00000000  00000000  003edf04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080111c8 	.word	0x080111c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	080111c8 	.word	0x080111c8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b500      	push	{lr}
 80006b6:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b8:	2300      	movs	r3, #0
 80006ba:	9307      	str	r3, [sp, #28]
 80006bc:	9308      	str	r3, [sp, #32]
 80006be:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	9304      	str	r3, [sp, #16]
 80006ca:	9305      	str	r3, [sp, #20]
 80006cc:	9306      	str	r3, [sp, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <MX_ADC1_Init+0x94>)
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_ADC1_Init+0x98>)
 80006d2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006d6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006da:	2204      	movs	r2, #4
 80006dc:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006de:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	2201      	movs	r2, #1
 80006e4:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ee:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f0:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	f002 f8d7 	bl	80028a8 <HAL_ADC_Init>
 80006fa:	b9d8      	cbnz	r0, 8000734 <MX_ADC1_Init+0x80>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000700:	a907      	add	r1, sp, #28
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_ADC1_Init+0x94>)
 8000704:	f002 f9e8 	bl	8002ad8 <HAL_ADCEx_MultiModeConfigChannel>
 8000708:	b9b8      	cbnz	r0, 800073a <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ADC1_Init+0x9c>)
 800070c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000712:	2300      	movs	r3, #0
 8000714:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_ADC1_Init+0xa0>)
 8000718:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2204      	movs	r2, #4
 800071c:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800071e:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000720:	f88d 3019 	strb.w	r3, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	4669      	mov	r1, sp
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_ADC1_Init+0x94>)
 8000728:	f001 fdd0 	bl	80022cc <HAL_ADC_ConfigChannel>
 800072c:	b940      	cbnz	r0, 8000740 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	b00b      	add	sp, #44	; 0x2c
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000734:	f000 fc88 	bl	8001048 <Error_Handler>
 8000738:	e7e0      	b.n	80006fc <MX_ADC1_Init+0x48>
    Error_Handler();
 800073a:	f000 fc85 	bl	8001048 <Error_Handler>
 800073e:	e7e4      	b.n	800070a <MX_ADC1_Init+0x56>
    Error_Handler();
 8000740:	f000 fc82 	bl	8001048 <Error_Handler>
}
 8000744:	e7f3      	b.n	800072e <MX_ADC1_Init+0x7a>
 8000746:	bf00      	nop
 8000748:	24000214 	.word	0x24000214
 800074c:	40022000 	.word	0x40022000
 8000750:	10c00010 	.word	0x10c00010
 8000754:	47ff0000 	.word	0x47ff0000

08000758 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000758:	b500      	push	{lr}
 800075a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075c:	2300      	movs	r3, #0
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	9304      	str	r3, [sp, #16]
 8000766:	9305      	str	r3, [sp, #20]
 8000768:	9306      	str	r3, [sp, #24]
 800076a:	9307      	str	r3, [sp, #28]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800076c:	4819      	ldr	r0, [pc, #100]	; (80007d4 <MX_ADC2_Init+0x7c>)
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <MX_ADC2_Init+0x80>)
 8000770:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000772:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000774:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	60c3      	str	r3, [r0, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000778:	2204      	movs	r2, #4
 800077a:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800077c:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800077e:	7543      	strb	r3, [r0, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000780:	2201      	movs	r2, #1
 8000782:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000784:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000786:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800078e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000790:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000794:	f002 f888 	bl	80028a8 <HAL_ADC_Init>
 8000798:	b9a8      	cbnz	r0, 80007c6 <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_ADC2_Init+0x84>)
 800079c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2306      	movs	r3, #6
 80007a0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a2:	2300      	movs	r3, #0
 80007a4:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <MX_ADC2_Init+0x88>)
 80007a8:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2204      	movs	r2, #4
 80007ac:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80007ae:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b0:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b4:	eb0d 0102 	add.w	r1, sp, r2
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_ADC2_Init+0x7c>)
 80007ba:	f001 fd87 	bl	80022cc <HAL_ADC_ConfigChannel>
 80007be:	b928      	cbnz	r0, 80007cc <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007c0:	b009      	add	sp, #36	; 0x24
 80007c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007c6:	f000 fc3f 	bl	8001048 <Error_Handler>
 80007ca:	e7e6      	b.n	800079a <MX_ADC2_Init+0x42>
    Error_Handler();
 80007cc:	f000 fc3c 	bl	8001048 <Error_Handler>
}
 80007d0:	e7f6      	b.n	80007c0 <MX_ADC2_Init+0x68>
 80007d2:	bf00      	nop
 80007d4:	24000278 	.word	0x24000278
 80007d8:	40022100 	.word	0x40022100
 80007dc:	10c00010 	.word	0x10c00010
 80007e0:	47ff0000 	.word	0x47ff0000

080007e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e4:	b530      	push	{r4, r5, lr}
 80007e6:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	2300      	movs	r3, #0
 80007ea:	9307      	str	r3, [sp, #28]
 80007ec:	9308      	str	r3, [sp, #32]
 80007ee:	9309      	str	r3, [sp, #36]	; 0x24
 80007f0:	930a      	str	r3, [sp, #40]	; 0x28
 80007f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(adcHandle->Instance==ADC1)
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	4a4c      	ldr	r2, [pc, #304]	; (8000928 <HAL_ADC_MspInit+0x144>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d004      	beq.n	8000806 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80007fc:	4a4b      	ldr	r2, [pc, #300]	; (800092c <HAL_ADC_MspInit+0x148>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d03f      	beq.n	8000882 <HAL_ADC_MspInit+0x9e>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000802:	b00d      	add	sp, #52	; 0x34
 8000804:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000806:	4a4a      	ldr	r2, [pc, #296]	; (8000930 <HAL_ADC_MspInit+0x14c>)
 8000808:	6813      	ldr	r3, [r2, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800080e:	2b01      	cmp	r3, #1
 8000810:	d029      	beq.n	8000866 <HAL_ADC_MspInit+0x82>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <HAL_ADC_MspInit+0x150>)
 8000814:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000818:	f042 0204 	orr.w	r2, r2, #4
 800081c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000820:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000824:	f002 0204 	and.w	r2, r2, #4
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000830:	f042 0202 	orr.w	r2, r2, #2
 8000834:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000844:	2330      	movs	r3, #48	; 0x30
 8000846:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000848:	2403      	movs	r4, #3
 800084a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	a907      	add	r1, sp, #28
 800084e:	483a      	ldr	r0, [pc, #232]	; (8000938 <HAL_ADC_MspInit+0x154>)
 8000850:	f004 f91c 	bl	8004a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000854:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	a907      	add	r1, sp, #28
 800085e:	4837      	ldr	r0, [pc, #220]	; (800093c <HAL_ADC_MspInit+0x158>)
 8000860:	f004 f914 	bl	8004a8c <HAL_GPIO_Init>
 8000864:	e7cd      	b.n	8000802 <HAL_ADC_MspInit+0x1e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_ADC_MspInit+0x150>)
 8000868:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800086c:	f042 0220 	orr.w	r2, r2, #32
 8000870:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	9b00      	ldr	r3, [sp, #0]
 8000880:	e7c7      	b.n	8000812 <HAL_ADC_MspInit+0x2e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000882:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <HAL_ADC_MspInit+0x14c>)
 8000884:	6813      	ldr	r3, [r2, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800088a:	2b01      	cmp	r3, #1
 800088c:	d03d      	beq.n	800090a <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <HAL_ADC_MspInit+0x150>)
 8000890:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000894:	f042 0201 	orr.w	r2, r2, #1
 8000898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800089c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008a0:	f002 0201 	and.w	r2, r2, #1
 80008a4:	9204      	str	r2, [sp, #16]
 80008a6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008ac:	f042 0204 	orr.w	r2, r2, #4
 80008b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008b8:	f002 0204 	and.w	r2, r2, #4
 80008bc:	9205      	str	r2, [sp, #20]
 80008be:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008c4:	f042 0202 	orr.w	r2, r2, #2
 80008c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	9306      	str	r3, [sp, #24]
 80008d6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d8:	2304      	movs	r3, #4
 80008da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008dc:	2403      	movs	r4, #3
 80008de:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	a907      	add	r1, sp, #28
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <HAL_ADC_MspInit+0x15c>)
 80008e4:	f004 f8d2 	bl	8004a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008e8:	2330      	movs	r3, #48	; 0x30
 80008ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2500      	movs	r5, #0
 80008f0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	a907      	add	r1, sp, #28
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <HAL_ADC_MspInit+0x154>)
 80008f6:	f004 f8c9 	bl	8004a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008fa:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	a907      	add	r1, sp, #28
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <HAL_ADC_MspInit+0x158>)
 8000904:	f004 f8c2 	bl	8004a8c <HAL_GPIO_Init>
}
 8000908:	e77b      	b.n	8000802 <HAL_ADC_MspInit+0x1e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_ADC_MspInit+0x150>)
 800090c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000910:	f042 0220 	orr.w	r2, r2, #32
 8000914:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800091c:	f003 0320 	and.w	r3, r3, #32
 8000920:	9303      	str	r3, [sp, #12]
 8000922:	9b03      	ldr	r3, [sp, #12]
 8000924:	e7b3      	b.n	800088e <HAL_ADC_MspInit+0xaa>
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000
 800092c:	40022100 	.word	0x40022100
 8000930:	24000210 	.word	0x24000210
 8000934:	58024400 	.word	0x58024400
 8000938:	58020800 	.word	0x58020800
 800093c:	58020400 	.word	0x58020400
 8000940:	58020000 	.word	0x58020000

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000944:	b500      	push	{lr}
 8000946:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_DMA_Init+0x64>)
 800094a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800094e:	f042 0201 	orr.w	r2, r2, #1
 8000952:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	200b      	movs	r0, #11
 8000968:	f002 f95a 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800096c:	200b      	movs	r0, #11
 800096e:	f002 f98b 	bl	8002c88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	200c      	movs	r0, #12
 8000978:	f002 f952 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800097c:	200c      	movs	r0, #12
 800097e:	f002 f983 	bl	8002c88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2105      	movs	r1, #5
 8000986:	200d      	movs	r0, #13
 8000988:	f002 f94a 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800098c:	200d      	movs	r0, #13
 800098e:	f002 f97b 	bl	8002c88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2105      	movs	r1, #5
 8000996:	200e      	movs	r0, #14
 8000998:	f002 f942 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800099c:	200e      	movs	r0, #14
 800099e:	f002 f973 	bl	8002c88 <HAL_NVIC_EnableIRQ>

}
 80009a2:	b003      	add	sp, #12
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	58024400 	.word	0x58024400

080009ac <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009ac:	b508      	push	{r3, lr}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GetAcc */
//  GetAccHandle = osThreadNew(GetAcceleration, NULL, &GetAcc_attributes);
  setupTelemetry();
 80009ae:	f00b fb9d 	bl	800c0ec <_Z14setupTelemetryv>
  initCortex();
 80009b2:	f00b fa53 	bl	800be5c <_Z10initCortexv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009b6:	bd08      	pop	{r3, pc}

080009b8 <MX_GPIO_Init>:
     PC11   ------> QUADSPI_BK2_NCS
     PC12   ------> UART5_TX
     PB3 (JTDO/TRACESWO)   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	2400      	movs	r4, #0
 80009c0:	9407      	str	r4, [sp, #28]
 80009c2:	9408      	str	r4, [sp, #32]
 80009c4:	9409      	str	r4, [sp, #36]	; 0x24
 80009c6:	940a      	str	r4, [sp, #40]	; 0x28
 80009c8:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	4b74      	ldr	r3, [pc, #464]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d0:	f042 0210 	orr.w	r2, r2, #16
 80009d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009dc:	f002 0210 	and.w	r2, r2, #16
 80009e0:	9201      	str	r2, [sp, #4]
 80009e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009e8:	f042 0204 	orr.w	r2, r2, #4
 80009ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009f4:	f002 0204 	and.w	r2, r2, #4
 80009f8:	9202      	str	r2, [sp, #8]
 80009fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a0c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a10:	9203      	str	r2, [sp, #12]
 8000a12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a18:	f042 0201 	orr.w	r2, r2, #1
 8000a1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a24:	f002 0201 	and.w	r2, r2, #1
 8000a28:	9204      	str	r2, [sp, #16]
 8000a2a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a30:	f042 0202 	orr.w	r2, r2, #2
 8000a34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a3c:	f002 0202 	and.w	r2, r2, #2
 8000a40:	9205      	str	r2, [sp, #20]
 8000a42:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a48:	f042 0208 	orr.w	r2, r2, #8
 8000a4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	9306      	str	r3, [sp, #24]
 8000a5a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000a5c:	f8df a148 	ldr.w	sl, [pc, #328]	; 8000ba8 <MX_GPIO_Init+0x1f0>
 8000a60:	4622      	mov	r2, r4
 8000a62:	f24f 0118 	movw	r1, #61464	; 0xf018
 8000a66:	4650      	mov	r0, sl
 8000a68:	f004 f9e4 	bl	8004e34 <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a6c:	4e4c      	ldr	r6, [pc, #304]	; (8000ba0 <MX_GPIO_Init+0x1e8>)
 8000a6e:	4622      	mov	r2, r4
 8000a70:	2101      	movs	r1, #1
 8000a72:	4630      	mov	r0, r6
 8000a74:	f004 f9de 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8000a78:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000bac <MX_GPIO_Init+0x1f4>
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	f647 0190 	movw	r1, #30864	; 0x7890
 8000a82:	4640      	mov	r0, r8
 8000a84:	f004 f9d6 	bl	8004e34 <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8000a88:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8000bb0 <MX_GPIO_Init+0x1f8>
 8000a8c:	4622      	mov	r2, r4
 8000a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a92:	4648      	mov	r0, r9
 8000a94:	f004 f9ce 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000a98:	f24f 0318 	movw	r3, #61464	; 0xf018
 8000a9c:	9307      	str	r3, [sp, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2701      	movs	r7, #1
 8000aa0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa6:	a907      	add	r1, sp, #28
 8000aa8:	4650      	mov	r0, sl
 8000aaa:	f003 ffef 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	a907      	add	r1, sp, #28
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f003 ffe7 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2502      	movs	r5, #2
 8000ac4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aca:	f04f 0b05 	mov.w	fp, #5
 8000ace:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	a907      	add	r1, sp, #28
 8000ad4:	4648      	mov	r0, r9
 8000ad6:	f003 ffd9 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	a907      	add	r1, sp, #28
 8000aea:	482e      	ldr	r0, [pc, #184]	; (8000ba4 <MX_GPIO_Init+0x1ec>)
 8000aec:	f003 ffce 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000af0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000af4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000afc:	230a      	movs	r3, #10
 8000afe:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b00:	a907      	add	r1, sp, #28
 8000b02:	4650      	mov	r0, sl
 8000b04:	f003 ffc2 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8000b08:	f647 0390 	movw	r3, #30864	; 0x7890
 8000b0c:	9307      	str	r3, [sp, #28]
                          |SPI3_CS0_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	a907      	add	r1, sp, #28
 8000b16:	4640      	mov	r0, r8
 8000b18:	f003 ffb8 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b20:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	a907      	add	r1, sp, #28
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f003 ffaf 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8000b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b32:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	a907      	add	r1, sp, #28
 8000b3c:	4648      	mov	r0, r9
 8000b3e:	f003 ffa5 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b4e:	2309      	movs	r3, #9
 8000b50:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	a907      	add	r1, sp, #28
 8000b54:	4630      	mov	r0, r6
 8000b56:	f003 ff99 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b66:	2708      	movs	r7, #8
 8000b68:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	a907      	add	r1, sp, #28
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f003 ff8d 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b72:	2304      	movs	r3, #4
 8000b74:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	a907      	add	r1, sp, #28
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	f003 ff85 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b82:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	a907      	add	r1, sp, #28
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0x1ec>)
 8000b92:	f003 ff7b 	bl	8004a8c <HAL_GPIO_Init>

}
 8000b96:	b00d      	add	sp, #52	; 0x34
 8000b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58020800 	.word	0x58020800
 8000ba4:	58020400 	.word	0x58020400
 8000ba8:	58021000 	.word	0x58021000
 8000bac:	58020c00 	.word	0x58020c00
 8000bb0:	58020000 	.word	0x58020000

08000bb4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bb4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_I2C1_Init+0x4c>)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bbe:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	f004 fb19 	bl	8005208 <HAL_I2C_Init>
 8000bd6:	b950      	cbnz	r0, 8000bee <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_I2C1_Init+0x4c>)
 8000bdc:	f004 fea3 	bl	8005926 <HAL_I2CEx_ConfigAnalogFilter>
 8000be0:	b940      	cbnz	r0, 8000bf4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_I2C1_Init+0x4c>)
 8000be6:	f004 fecc 	bl	8005982 <HAL_I2CEx_ConfigDigitalFilter>
 8000bea:	b930      	cbnz	r0, 8000bfa <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bee:	f000 fa2b 	bl	8001048 <Error_Handler>
 8000bf2:	e7f1      	b.n	8000bd8 <MX_I2C1_Init+0x24>
    Error_Handler();
 8000bf4:	f000 fa28 	bl	8001048 <Error_Handler>
 8000bf8:	e7f3      	b.n	8000be2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000bfa:	f000 fa25 	bl	8001048 <Error_Handler>
}
 8000bfe:	e7f5      	b.n	8000bec <MX_I2C1_Init+0x38>
 8000c00:	240002dc 	.word	0x240002dc
 8000c04:	40005400 	.word	0x40005400
 8000c08:	00707cbb 	.word	0x00707cbb

08000c0c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c0c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_I2C2_Init+0x4c>)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C2_Init+0x50>)
 8000c12:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_I2C2_Init+0x54>)
 8000c16:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c22:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2a:	f004 faed 	bl	8005208 <HAL_I2C_Init>
 8000c2e:	b950      	cbnz	r0, 8000c46 <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <MX_I2C2_Init+0x4c>)
 8000c34:	f004 fe77 	bl	8005926 <HAL_I2CEx_ConfigAnalogFilter>
 8000c38:	b940      	cbnz	r0, 8000c4c <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_I2C2_Init+0x4c>)
 8000c3e:	f004 fea0 	bl	8005982 <HAL_I2CEx_ConfigDigitalFilter>
 8000c42:	b930      	cbnz	r0, 8000c52 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c44:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c46:	f000 f9ff 	bl	8001048 <Error_Handler>
 8000c4a:	e7f1      	b.n	8000c30 <MX_I2C2_Init+0x24>
    Error_Handler();
 8000c4c:	f000 f9fc 	bl	8001048 <Error_Handler>
 8000c50:	e7f3      	b.n	8000c3a <MX_I2C2_Init+0x2e>
    Error_Handler();
 8000c52:	f000 f9f9 	bl	8001048 <Error_Handler>
}
 8000c56:	e7f5      	b.n	8000c44 <MX_I2C2_Init+0x38>
 8000c58:	24000328 	.word	0x24000328
 8000c5c:	40005800 	.word	0x40005800
 8000c60:	00707cbb 	.word	0x00707cbb

08000c64 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c64:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_I2C4_Init+0x4c>)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C4_Init+0x50>)
 8000c6a:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_I2C4_Init+0x54>)
 8000c6e:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	2201      	movs	r2, #1
 8000c76:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c7a:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7c:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c80:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c82:	f004 fac1 	bl	8005208 <HAL_I2C_Init>
 8000c86:	b950      	cbnz	r0, 8000c9e <MX_I2C4_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <MX_I2C4_Init+0x4c>)
 8000c8c:	f004 fe4b 	bl	8005926 <HAL_I2CEx_ConfigAnalogFilter>
 8000c90:	b940      	cbnz	r0, 8000ca4 <MX_I2C4_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_I2C4_Init+0x4c>)
 8000c96:	f004 fe74 	bl	8005982 <HAL_I2CEx_ConfigDigitalFilter>
 8000c9a:	b930      	cbnz	r0, 8000caa <MX_I2C4_Init+0x46>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c9c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c9e:	f000 f9d3 	bl	8001048 <Error_Handler>
 8000ca2:	e7f1      	b.n	8000c88 <MX_I2C4_Init+0x24>
    Error_Handler();
 8000ca4:	f000 f9d0 	bl	8001048 <Error_Handler>
 8000ca8:	e7f3      	b.n	8000c92 <MX_I2C4_Init+0x2e>
    Error_Handler();
 8000caa:	f000 f9cd 	bl	8001048 <Error_Handler>
}
 8000cae:	e7f5      	b.n	8000c9c <MX_I2C4_Init+0x38>
 8000cb0:	24000374 	.word	0x24000374
 8000cb4:	58001c00 	.word	0x58001c00
 8000cb8:	00707cbb 	.word	0x00707cbb

08000cbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	b0ba      	sub	sp, #232	; 0xe8
 8000cc0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	9135      	str	r1, [sp, #212]	; 0xd4
 8000cc6:	9136      	str	r1, [sp, #216]	; 0xd8
 8000cc8:	9137      	str	r1, [sp, #220]	; 0xdc
 8000cca:	9138      	str	r1, [sp, #224]	; 0xe0
 8000ccc:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cce:	22bc      	movs	r2, #188	; 0xbc
 8000cd0:	a806      	add	r0, sp, #24
 8000cd2:	f00d fe45 	bl	800e960 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <HAL_I2C_MspInit+0x158>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d007      	beq.n	8000cee <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8000cde:	4a4e      	ldr	r2, [pc, #312]	; (8000e18 <HAL_I2C_MspInit+0x15c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d034      	beq.n	8000d4e <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	; (8000e1c <HAL_I2C_MspInit+0x160>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d062      	beq.n	8000db0 <HAL_I2C_MspInit+0xf4>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cea:	b03a      	add	sp, #232	; 0xe8
 8000cec:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	a806      	add	r0, sp, #24
 8000cf4:	f005 fdae 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	bb30      	cbnz	r0, 8000d48 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4c49      	ldr	r4, [pc, #292]	; (8000e20 <HAL_I2C_MspInit+0x164>)
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	a935      	add	r1, sp, #212	; 0xd4
 8000d28:	483e      	ldr	r0, [pc, #248]	; (8000e24 <HAL_I2C_MspInit+0x168>)
 8000d2a:	f003 feaf 	bl	8004a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000d3a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	9b01      	ldr	r3, [sp, #4]
 8000d46:	e7d0      	b.n	8000cea <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000d48:	f000 f97e 	bl	8001048 <Error_Handler>
 8000d4c:	e7d5      	b.n	8000cfa <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	a806      	add	r0, sp, #24
 8000d54:	f005 fd7e 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	bb38      	cbnz	r0, 8000daa <HAL_I2C_MspInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4c31      	ldr	r4, [pc, #196]	; (8000e20 <HAL_I2C_MspInit+0x164>)
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d78:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d84:	2304      	movs	r3, #4
 8000d86:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	a935      	add	r1, sp, #212	; 0xd4
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <HAL_I2C_MspInit+0x168>)
 8000d8c:	f003 fe7e 	bl	8004a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d90:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d98:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000d9c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	9b03      	ldr	r3, [sp, #12]
 8000da8:	e79f      	b.n	8000cea <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000daa:	f000 f94d 	bl	8001048 <Error_Handler>
 8000dae:	e7d4      	b.n	8000d5a <HAL_I2C_MspInit+0x9e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000db0:	2310      	movs	r3, #16
 8000db2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db4:	a806      	add	r0, sp, #24
 8000db6:	f005 fd4d 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	bb38      	cbnz	r0, 8000e0c <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4c18      	ldr	r4, [pc, #96]	; (8000e20 <HAL_I2C_MspInit+0x164>)
 8000dbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000dca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	9304      	str	r3, [sp, #16]
 8000dd4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000de6:	2306      	movs	r3, #6
 8000de8:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	a935      	add	r1, sp, #212	; 0xd4
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <HAL_I2C_MspInit+0x168>)
 8000dee:	f003 fe4d 	bl	8004a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000df2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfa:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000dfe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	9305      	str	r3, [sp, #20]
 8000e08:	9b05      	ldr	r3, [sp, #20]
}
 8000e0a:	e76e      	b.n	8000cea <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000e0c:	f000 f91c 	bl	8001048 <Error_Handler>
 8000e10:	e7d4      	b.n	8000dbc <HAL_I2C_MspInit+0x100>
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40005800 	.word	0x40005800
 8000e1c:	58001c00 	.word	0x58001c00
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020400 	.word	0x58020400

08000e28 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e28:	b510      	push	{r4, lr}

  if(i2cHandle->Instance==I2C1)
 8000e2a:	6803      	ldr	r3, [r0, #0]
 8000e2c:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <HAL_I2C_MspDeInit+0x88>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d006      	beq.n	8000e40 <HAL_I2C_MspDeInit+0x18>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8000e32:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_I2C_MspDeInit+0x8c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d014      	beq.n	8000e62 <HAL_I2C_MspDeInit+0x3a>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_I2C_MspDeInit+0x90>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d024      	beq.n	8000e88 <HAL_I2C_MspDeInit+0x60>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8000e3e:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <HAL_I2C_MspDeInit+0x94>)
 8000e42:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000e4e:	4c1c      	ldr	r4, [pc, #112]	; (8000ec0 <HAL_I2C_MspDeInit+0x98>)
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	4620      	mov	r0, r4
 8000e54:	f003 ff38 	bl	8004cc8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f003 ff34 	bl	8004cc8 <HAL_GPIO_DeInit>
 8000e60:	e7ed      	b.n	8000e3e <HAL_I2C_MspDeInit+0x16>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_I2C_MspDeInit+0x94>)
 8000e64:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000e68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000e70:	4c13      	ldr	r4, [pc, #76]	; (8000ec0 <HAL_I2C_MspDeInit+0x98>)
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	4620      	mov	r0, r4
 8000e78:	f003 ff26 	bl	8004cc8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e80:	4620      	mov	r0, r4
 8000e82:	f003 ff21 	bl	8004cc8 <HAL_GPIO_DeInit>
 8000e86:	e7da      	b.n	8000e3e <HAL_I2C_MspDeInit+0x16>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000e88:	f502 320a 	add.w	r2, r2, #141312	; 0x22800
 8000e8c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8000e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000e98:	4c09      	ldr	r4, [pc, #36]	; (8000ec0 <HAL_I2C_MspDeInit+0x98>)
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f003 ff12 	bl	8004cc8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f003 ff0d 	bl	8004cc8 <HAL_GPIO_DeInit>
}
 8000eae:	e7c6      	b.n	8000e3e <HAL_I2C_MspDeInit+0x16>
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	58001c00 	.word	0x58001c00
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020400 	.word	0x58020400

08000ec4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b500      	push	{lr}
 8000ec6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec8:	224c      	movs	r2, #76	; 0x4c
 8000eca:	2100      	movs	r1, #0
 8000ecc:	a809      	add	r0, sp, #36	; 0x24
 8000ece:	f00d fd47 	bl	800e960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	a801      	add	r0, sp, #4
 8000ed8:	f00d fd42 	bl	800e960 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f004 fd95 	bl	8005a0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <_Z18SystemClock_Configv+0xac>)
 8000ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <_Z18SystemClock_Configv+0xb0>)
 8000efa:	6993      	ldr	r3, [r2, #24]
 8000efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	6993      	ldr	r3, [r2, #24]
 8000f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f10:	6993      	ldr	r3, [r2, #24]
 8000f12:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000f16:	d0fb      	beq.n	8000f10 <_Z18SystemClock_Configv+0x4c>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <_Z18SystemClock_Configv+0xb4>)
 8000f1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000f1c:	f023 0303 	bic.w	r3, r3, #3
 8000f20:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f22:	2302      	movs	r3, #2
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f32:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	a809      	add	r0, sp, #36	; 0x24
 8000f36:	f004 fd91 	bl	8005a5c <HAL_RCC_OscConfig>
 8000f3a:	b9a0      	cbnz	r0, 8000f66 <_Z18SystemClock_Configv+0xa2>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	233f      	movs	r3, #63	; 0x3f
 8000f3e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f46:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f4c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f54:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f56:	2101      	movs	r1, #1
 8000f58:	a801      	add	r0, sp, #4
 8000f5a:	f005 f9af 	bl	80062bc <HAL_RCC_ClockConfig>
 8000f5e:	b920      	cbnz	r0, 8000f6a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
  }
}
 8000f60:	b01d      	add	sp, #116	; 0x74
 8000f62:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f66:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <_Z18SystemClock_Configv+0xa4>
 8000f6a:	b672      	cpsid	i
 8000f6c:	e7fe      	b.n	8000f6c <_Z18SystemClock_Configv+0xa8>
 8000f6e:	bf00      	nop
 8000f70:	58000400 	.word	0x58000400
 8000f74:	58024800 	.word	0x58024800
 8000f78:	58024400 	.word	0x58024400

08000f7c <_Z24PeriphCommonClock_Configv>:
{
 8000f7c:	b500      	push	{lr}
 8000f7e:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	2298      	movs	r2, #152	; 0x98
 8000f82:	2100      	movs	r1, #0
 8000f84:	a80a      	add	r0, sp, #40	; 0x28
 8000f86:	f00d fceb 	bl	800e960 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f8e:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000f94:	2209      	movs	r2, #9
 8000f96:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f98:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f9e:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000fa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fac:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	a801      	add	r0, sp, #4
 8000fb0:	f005 fc50 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	b910      	cbnz	r0, 8000fbc <_Z24PeriphCommonClock_Configv+0x40>
}
 8000fb6:	b031      	add	sp, #196	; 0xc4
 8000fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fbc:	b672      	cpsid	i
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <_Z24PeriphCommonClock_Configv+0x42>

08000fc0 <main>:
{
 8000fc0:	b508      	push	{r3, lr}
  HAL_Init();
 8000fc2:	f001 f93d 	bl	8002240 <HAL_Init>
  SystemClock_Config();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 8000fca:	f7ff ffd7 	bl	8000f7c <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 8000fce:	f7ff fcf3 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd2:	f7ff fdef 	bl	8000bb4 <MX_I2C1_Init>
  MX_DMA_Init();
 8000fd6:	f7ff fcb5 	bl	8000944 <MX_DMA_Init>
  MX_I2C2_Init();
 8000fda:	f7ff fe17 	bl	8000c0c <MX_I2C2_Init>
  MX_I2C4_Init();
 8000fde:	f7ff fe41 	bl	8000c64 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 8000fe2:	f000 fc23 	bl	800182c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fe6:	f000 fc57 	bl	8001898 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fea:	f000 fc8b 	bl	8001904 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000fee:	f7ff fb61 	bl	80006b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ff2:	f7ff fbb1 	bl	8000758 <MX_ADC2_Init>
  MX_USART6_UART_Init();
 8000ff6:	f000 fcbb 	bl	8001970 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000ffa:	f000 fa81 	bl	8001500 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000ffe:	f000 fb9d 	bl	800173c <MX_TIM15_Init>
  MX_TIM4_Init();
 8001002:	f000 fb43 	bl	800168c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001006:	f000 fae1 	bl	80015cc <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800100a:	4c08      	ldr	r4, [pc, #32]	; (800102c <main+0x6c>)
 800100c:	2100      	movs	r1, #0
 800100e:	4620      	mov	r0, r4
 8001010:	f007 fc04 	bl	800881c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4620      	mov	r0, r4
 8001018:	f007 fc00 	bl	800881c <HAL_TIM_PWM_Start>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800101c:	f008 fe38 	bl	8009c90 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001020:	f7ff fcc4 	bl	80009ac <_Z16MX_FREERTOS_Initv>
  osKernelStart();
 8001024:	f008 fe46 	bl	8009cb4 <osKernelStart>
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x68>
 800102a:	bf00      	nop
 800102c:	240004a8 	.word	0x240004a8

08001030 <HAL_TIM_PeriodElapsedCallback>:
{
 8001030:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 8001032:	6802      	ldr	r2, [r0, #0]
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001036:	429a      	cmp	r2, r3
 8001038:	d000      	beq.n	800103c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800103a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800103c:	f001 f92e 	bl	800229c <HAL_IncTick>
}
 8001040:	e7fb      	b.n	800103a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
 8001048:	b672      	cpsid	i
  while (1)
 800104a:	e7fe      	b.n	800104a <Error_Handler+0x2>

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b500      	push	{lr}
 800104e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_MspInit+0x30>)
 8001052:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001056:	f042 0202 	orr.w	r2, r2, #2
 800105a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800105e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f001 fdd5 	bl	8002c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	b003      	add	sp, #12
 8001078:	f85d fb04 	ldr.w	pc, [sp], #4
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	280f      	cmp	r0, #15
 8001082:	d901      	bls.n	8001088 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001084:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001086:	4770      	bx	lr
{
 8001088:	b510      	push	{r4, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800108e:	2200      	movs	r2, #0
 8001090:	4601      	mov	r1, r0
 8001092:	2036      	movs	r0, #54	; 0x36
 8001094:	f001 fdc4 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001098:	2036      	movs	r0, #54	; 0x36
 800109a:	f001 fdf5 	bl	8002c88 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_InitTick+0x88>)
 80010a0:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_InitTick+0x8c>)
 80010a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010a8:	f042 0210 	orr.w	r2, r2, #16
 80010ac:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80010b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010bc:	a901      	add	r1, sp, #4
 80010be:	a802      	add	r0, sp, #8
 80010c0:	f005 fa9a 	bl	80065f8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010c4:	9b07      	ldr	r3, [sp, #28]
 80010c6:	b9bb      	cbnz	r3, 80010f8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c8:	f005 fa72 	bl	80065b0 <HAL_RCC_GetPCLK1Freq>
 80010cc:	4603      	mov	r3, r0
  htim6.Instance = TIM6;
 80010ce:	4810      	ldr	r0, [pc, #64]	; (8001110 <HAL_InitTick+0x90>)
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_InitTick+0x94>)
 80010d2:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d8:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_InitTick+0x98>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0c9b      	lsrs	r3, r3, #18
 80010e2:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80010e4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010ec:	f007 f968 	bl	80083c0 <HAL_TIM_Base_Init>
 80010f0:	b130      	cbz	r0, 8001100 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	b00a      	add	sp, #40	; 0x28
 80010f6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010f8:	f005 fa5a 	bl	80065b0 <HAL_RCC_GetPCLK1Freq>
 80010fc:	0043      	lsls	r3, r0, #1
 80010fe:	e7e6      	b.n	80010ce <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <HAL_InitTick+0x90>)
 8001102:	f006 ffc1 	bl	8008088 <HAL_TIM_Base_Start_IT>
 8001106:	e7f5      	b.n	80010f4 <HAL_InitTick+0x74>
 8001108:	24000014 	.word	0x24000014
 800110c:	58024400 	.word	0x58024400
 8001110:	240003c0 	.word	0x240003c0
 8001114:	40001000 	.word	0x40001000
 8001118:	431bde83 	.word	0x431bde83

0800111c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler>

0800111e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler>

08001120 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler>

08001122 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler>

08001124 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler>

08001126 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	4770      	bx	lr

08001128 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Stream0_IRQHandler+0xc>)
 800112c:	f002 fff2 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	24000630 	.word	0x24000630

08001138 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800113a:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA1_Stream1_IRQHandler+0xc>)
 800113c:	f002 ffea 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001140:	bd08      	pop	{r3, pc}
 8001142:	bf00      	nop
 8001144:	240006a8 	.word	0x240006a8

08001148 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA1_Stream2_IRQHandler+0xc>)
 800114c:	f002 ffe2 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001150:	bd08      	pop	{r3, pc}
 8001152:	bf00      	nop
 8001154:	240005b8 	.word	0x240005b8

08001158 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001158:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800115a:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream3_IRQHandler+0xc>)
 800115c:	f002 ffda 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001160:	bd08      	pop	{r3, pc}
 8001162:	bf00      	nop
 8001164:	24000540 	.word	0x24000540

08001168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800116a:	4802      	ldr	r0, [pc, #8]	; (8001174 <USART1_IRQHandler+0xc>)
 800116c:	f007 fd44 	bl	8008bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001170:	bd08      	pop	{r3, pc}
 8001172:	bf00      	nop
 8001174:	24000720 	.word	0x24000720

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800117a:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART2_IRQHandler+0xc>)
 800117c:	f007 fd3c 	bl	8008bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001180:	bd08      	pop	{r3, pc}
 8001182:	bf00      	nop
 8001184:	240007b0 	.word	0x240007b0

08001188 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <USART3_IRQHandler+0xc>)
 800118c:	f007 fd34 	bl	8008bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001190:	bd08      	pop	{r3, pc}
 8001192:	bf00      	nop
 8001194:	24000840 	.word	0x24000840

08001198 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800119a:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM6_DAC_IRQHandler+0xc>)
 800119c:	f006 ffd0 	bl	8008140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011a0:	bd08      	pop	{r3, pc}
 80011a2:	bf00      	nop
 80011a4:	240003c0 	.word	0x240003c0

080011a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <USART6_IRQHandler+0xc>)
 80011ac:	f007 fd24 	bl	8008bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011b0:	bd08      	pop	{r3, pc}
 80011b2:	bf00      	nop
 80011b4:	240008d0 	.word	0x240008d0

080011b8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011b8:	2001      	movs	r0, #1
 80011ba:	4770      	bx	lr

080011bc <_kill>:

int _kill(int pid, int sig)
{
 80011bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011be:	f00d fa83 	bl	800e6c8 <__errno>
 80011c2:	2316      	movs	r3, #22
 80011c4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	bd08      	pop	{r3, pc}

080011cc <_exit>:

void _exit (int status)
{
 80011cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011ce:	f00d fa7b 	bl	800e6c8 <__errno>
 80011d2:	2316      	movs	r3, #22
 80011d4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80011d6:	e7fe      	b.n	80011d6 <_exit+0xa>

080011d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	1e16      	subs	r6, r2, #0
 80011dc:	dd07      	ble.n	80011ee <_read+0x16>
 80011de:	460c      	mov	r4, r1
 80011e0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	42a5      	cmp	r5, r4
 80011ec:	d1f9      	bne.n	80011e2 <_read+0xa>
	}

return len;
}
 80011ee:	4630      	mov	r0, r6
 80011f0:	bd70      	pop	{r4, r5, r6, pc}

080011f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f2:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	1e16      	subs	r6, r2, #0
 80011f6:	dd07      	ble.n	8001208 <_write+0x16>
 80011f8:	460c      	mov	r4, r1
 80011fa:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80011fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001200:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	42a5      	cmp	r5, r4
 8001206:	d1f9      	bne.n	80011fc <_write+0xa>
	}
	return len;
}
 8001208:	4630      	mov	r0, r6
 800120a:	bd70      	pop	{r4, r5, r6, pc}

0800120c <_close>:

int _close(int file)
{
	return -1;
}
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001218:	2000      	movs	r0, #0
 800121a:	4770      	bx	lr

0800121c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800121c:	2001      	movs	r0, #1
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001220:	2000      	movs	r0, #0
 8001222:	4770      	bx	lr

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b508      	push	{r3, lr}
 8001226:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <_sbrk+0x38>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	b152      	cbz	r2, 8001244 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <_sbrk+0x38>)
 8001230:	6810      	ldr	r0, [r2, #0]
 8001232:	4403      	add	r3, r0
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <_sbrk+0x3c>)
 8001236:	490b      	ldr	r1, [pc, #44]	; (8001264 <_sbrk+0x40>)
 8001238:	1a52      	subs	r2, r2, r1
 800123a:	4293      	cmp	r3, r2
 800123c:	d806      	bhi.n	800124c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <_sbrk+0x38>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001242:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x38>)
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <_sbrk+0x44>)
 8001248:	6011      	str	r1, [r2, #0]
 800124a:	e7f0      	b.n	800122e <_sbrk+0xa>
    errno = ENOMEM;
 800124c:	f00d fa3c 	bl	800e6c8 <__errno>
 8001250:	230c      	movs	r3, #12
 8001252:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	e7f3      	b.n	8001242 <_sbrk+0x1e>
 800125a:	bf00      	nop
 800125c:	2400040c 	.word	0x2400040c
 8001260:	24080000 	.word	0x24080000
 8001264:	00000400 	.word	0x00000400
 8001268:	2400a798 	.word	0x2400a798

0800126c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <SystemInit+0xa8>)
 800126e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001272:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001276:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <SystemInit+0xac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	2b06      	cmp	r3, #6
 8001284:	d806      	bhi.n	8001294 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001286:	4a24      	ldr	r2, [pc, #144]	; (8001318 <SystemInit+0xac>)
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	f043 0307 	orr.w	r3, r3, #7
 8001292:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <SystemInit+0xb0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <SystemInit+0xb4>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <SystemInit+0xac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f013 0f08 	tst.w	r3, #8
 80012b2:	d006      	beq.n	80012c2 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <SystemInit+0xac>)
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f023 030f 	bic.w	r3, r3, #15
 80012bc:	f043 0307 	orr.w	r3, r3, #7
 80012c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <SystemInit+0xb0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012cc:	4915      	ldr	r1, [pc, #84]	; (8001324 <SystemInit+0xb8>)
 80012ce:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012d0:	4915      	ldr	r1, [pc, #84]	; (8001328 <SystemInit+0xbc>)
 80012d2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012d4:	4915      	ldr	r1, [pc, #84]	; (800132c <SystemInit+0xc0>)
 80012d6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012da:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012de:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80012e8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012ea:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <SystemInit+0xc4>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <SystemInit+0xc8>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f8:	d203      	bcs.n	8001302 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <SystemInit+0xcc>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <SystemInit+0xd0>)
 8001304:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001308:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <SystemInit+0xa8>)
 800130c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001310:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	52002000 	.word	0x52002000
 800131c:	58024400 	.word	0x58024400
 8001320:	eaf6ed7f 	.word	0xeaf6ed7f
 8001324:	02020200 	.word	0x02020200
 8001328:	01ff0000 	.word	0x01ff0000
 800132c:	01010280 	.word	0x01010280
 8001330:	5c001000 	.word	0x5c001000
 8001334:	ffff0000 	.word	0xffff0000
 8001338:	51008000 	.word	0x51008000
 800133c:	52004000 	.word	0x52004000

08001340 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_PWM_MspInit+0x2c>)
 8001344:	429a      	cmp	r2, r3
 8001346:	d000      	beq.n	800134a <HAL_TIM_PWM_MspInit+0xa>
 8001348:	4770      	bx	lr
{
 800134a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_TIM_PWM_MspInit+0x30>)
 800134e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800135a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001366:	b002      	add	sp, #8
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40010000 	.word	0x40010000
 8001370:	58024400 	.word	0x58024400

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM2)
 8001376:	6803      	ldr	r3, [r0, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d007      	beq.n	800138e <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_TIM_Base_MspInit+0x70>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d012      	beq.n	80013aa <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_TIM_Base_MspInit+0x74>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800138a:	b004      	add	sp, #16
 800138c:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_TIM_Base_MspInit+0x78>)
 8001390:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800139c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	e7ef      	b.n	800138a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_TIM_Base_MspInit+0x78>)
 80013ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	9b02      	ldr	r3, [sp, #8]
 80013c4:	e7e1      	b.n	800138a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x78>)
 80013c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80013cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013d0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80013d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	9b03      	ldr	r3, [sp, #12]
}
 80013e0:	e7d3      	b.n	800138a <HAL_TIM_Base_MspInit+0x16>
 80013e2:	bf00      	nop
 80013e4:	40000800 	.word	0x40000800
 80013e8:	40014000 	.word	0x40014000
 80013ec:	58024400 	.word	0x58024400

080013f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f0:	b500      	push	{lr}
 80013f2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	2300      	movs	r3, #0
 80013f6:	9305      	str	r3, [sp, #20]
 80013f8:	9306      	str	r3, [sp, #24]
 80013fa:	9307      	str	r3, [sp, #28]
 80013fc:	9308      	str	r3, [sp, #32]
 80013fe:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 8001400:	6803      	ldr	r3, [r0, #0]
 8001402:	4a38      	ldr	r2, [pc, #224]	; (80014e4 <HAL_TIM_MspPostInit+0xf4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00b      	beq.n	8001420 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d021      	beq.n	8001452 <HAL_TIM_MspPostInit+0x62>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 800140e:	4a36      	ldr	r2, [pc, #216]	; (80014e8 <HAL_TIM_MspPostInit+0xf8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d036      	beq.n	8001482 <HAL_TIM_MspPostInit+0x92>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 8001414:	4a35      	ldr	r2, [pc, #212]	; (80014ec <HAL_TIM_MspPostInit+0xfc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d04b      	beq.n	80014b2 <HAL_TIM_MspPostInit+0xc2>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800141a:	b00b      	add	sp, #44	; 0x2c
 800141c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 8001422:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001426:	f042 0210 	orr.w	r2, r2, #16
 800142a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800143a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800143e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001444:	2301      	movs	r3, #1
 8001446:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001448:	a905      	add	r1, sp, #20
 800144a:	482a      	ldr	r0, [pc, #168]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 800144c:	f003 fb1e 	bl	8004a8c <HAL_GPIO_Init>
 8001450:	e7e3      	b.n	800141a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 8001454:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800146c:	2303      	movs	r3, #3
 800146e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001474:	2301      	movs	r3, #1
 8001476:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	a905      	add	r1, sp, #20
 800147a:	481f      	ldr	r0, [pc, #124]	; (80014f8 <HAL_TIM_MspPostInit+0x108>)
 800147c:	f003 fb06 	bl	8004a8c <HAL_GPIO_Init>
 8001480:	e7cb      	b.n	800141a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 8001484:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001488:	f042 0208 	orr.w	r2, r2, #8
 800148c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800149c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a8:	a905      	add	r1, sp, #20
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <HAL_TIM_MspPostInit+0x10c>)
 80014ac:	f003 faee 	bl	8004a8c <HAL_GPIO_Init>
 80014b0:	e7b3      	b.n	800141a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 80014b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	9304      	str	r3, [sp, #16]
 80014ca:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014cc:	2308      	movs	r3, #8
 80014ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80014d4:	2304      	movs	r3, #4
 80014d6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	a905      	add	r1, sp, #20
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <HAL_TIM_MspPostInit+0x108>)
 80014dc:	f003 fad6 	bl	8004a8c <HAL_GPIO_Init>
}
 80014e0:	e79b      	b.n	800141a <HAL_TIM_MspPostInit+0x2a>
 80014e2:	bf00      	nop
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40000800 	.word	0x40000800
 80014ec:	40014000 	.word	0x40014000
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58021000 	.word	0x58021000
 80014f8:	58020000 	.word	0x58020000
 80014fc:	58020c00 	.word	0x58020c00

08001500 <MX_TIM1_Init>:
{
 8001500:	b510      	push	{r4, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	2400      	movs	r4, #0
 8001506:	9413      	str	r4, [sp, #76]	; 0x4c
 8001508:	9414      	str	r4, [sp, #80]	; 0x50
 800150a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	940c      	str	r4, [sp, #48]	; 0x30
 800150e:	940d      	str	r4, [sp, #52]	; 0x34
 8001510:	940e      	str	r4, [sp, #56]	; 0x38
 8001512:	940f      	str	r4, [sp, #60]	; 0x3c
 8001514:	9410      	str	r4, [sp, #64]	; 0x40
 8001516:	9411      	str	r4, [sp, #68]	; 0x44
 8001518:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	222c      	movs	r2, #44	; 0x2c
 800151c:	4621      	mov	r1, r4
 800151e:	a801      	add	r0, sp, #4
 8001520:	f00d fa1e 	bl	800e960 <memset>
  htim1.Instance = TIM1;
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_TIM1_Init+0xc4>)
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_TIM1_Init+0xc8>)
 8001528:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 64000-1;
 800152a:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800152e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 20-1;
 8001532:	2313      	movs	r3, #19
 8001534:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001538:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800153c:	f006 ff70 	bl	8008420 <HAL_TIM_PWM_Init>
 8001540:	2800      	cmp	r0, #0
 8001542:	d133      	bne.n	80015ac <MX_TIM1_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001548:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154c:	a913      	add	r1, sp, #76	; 0x4c
 800154e:	481d      	ldr	r0, [pc, #116]	; (80015c4 <MX_TIM1_Init+0xc4>)
 8001550:	f007 fa28 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	2800      	cmp	r0, #0
 8001556:	d12c      	bne.n	80015b2 <MX_TIM1_Init+0xb2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 15;
 800155c:	230f      	movs	r3, #15
 800155e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001564:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001566:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001568:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156c:	2204      	movs	r2, #4
 800156e:	a90c      	add	r1, sp, #48	; 0x30
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_TIM1_Init+0xc4>)
 8001572:	f006 ffc7 	bl	8008504 <HAL_TIM_PWM_ConfigChannel>
 8001576:	b9f8      	cbnz	r0, 80015b8 <MX_TIM1_Init+0xb8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800157c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800157e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001580:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001582:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001588:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800158a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800158c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800158e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001592:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001594:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001596:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001598:	a901      	add	r1, sp, #4
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <MX_TIM1_Init+0xc4>)
 800159c:	f007 fa60 	bl	8008a60 <HAL_TIMEx_ConfigBreakDeadTime>
 80015a0:	b968      	cbnz	r0, 80015be <MX_TIM1_Init+0xbe>
  HAL_TIM_MspPostInit(&htim1);
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_TIM1_Init+0xc4>)
 80015a4:	f7ff ff24 	bl	80013f0 <HAL_TIM_MspPostInit>
}
 80015a8:	b016      	add	sp, #88	; 0x58
 80015aa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015ac:	f7ff fd4c 	bl	8001048 <Error_Handler>
 80015b0:	e7c8      	b.n	8001544 <MX_TIM1_Init+0x44>
    Error_Handler();
 80015b2:	f7ff fd49 	bl	8001048 <Error_Handler>
 80015b6:	e7cf      	b.n	8001558 <MX_TIM1_Init+0x58>
    Error_Handler();
 80015b8:	f7ff fd46 	bl	8001048 <Error_Handler>
 80015bc:	e7dc      	b.n	8001578 <MX_TIM1_Init+0x78>
    Error_Handler();
 80015be:	f7ff fd43 	bl	8001048 <Error_Handler>
 80015c2:	e7ee      	b.n	80015a2 <MX_TIM1_Init+0xa2>
 80015c4:	24000410 	.word	0x24000410
 80015c8:	40010000 	.word	0x40010000

080015cc <MX_TIM2_Init>:
{
 80015cc:	b500      	push	{lr}
 80015ce:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	930a      	str	r3, [sp, #40]	; 0x28
 80015d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80015d6:	930c      	str	r3, [sp, #48]	; 0x30
 80015d8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	9307      	str	r3, [sp, #28]
 80015dc:	9308      	str	r3, [sp, #32]
 80015de:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	9305      	str	r3, [sp, #20]
 80015ec:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80015ee:	4826      	ldr	r0, [pc, #152]	; (8001688 <MX_TIM2_Init+0xbc>)
 80015f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 6400-1;
 80015f6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80015fa:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 200-1;
 80015fe:	22c7      	movs	r2, #199	; 0xc7
 8001600:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001606:	f006 fedb 	bl	80083c0 <HAL_TIM_Base_Init>
 800160a:	bb50      	cbnz	r0, 8001662 <MX_TIM2_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	a90a      	add	r1, sp, #40	; 0x28
 8001614:	481c      	ldr	r0, [pc, #112]	; (8001688 <MX_TIM2_Init+0xbc>)
 8001616:	f007 f81f 	bl	8008658 <HAL_TIM_ConfigClockSource>
 800161a:	bb28      	cbnz	r0, 8001668 <MX_TIM2_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161c:	481a      	ldr	r0, [pc, #104]	; (8001688 <MX_TIM2_Init+0xbc>)
 800161e:	f006 feff 	bl	8008420 <HAL_TIM_PWM_Init>
 8001622:	bb20      	cbnz	r0, 800166e <MX_TIM2_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	a907      	add	r1, sp, #28
 800162c:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_TIM2_Init+0xbc>)
 800162e:	f007 f9b9 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	b9f8      	cbnz	r0, 8001674 <MX_TIM2_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	; 0x60
 8001636:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001638:	2200      	movs	r2, #0
 800163a:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163e:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001640:	4669      	mov	r1, sp
 8001642:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_TIM2_Init+0xbc>)
 8001644:	f006 ff5e 	bl	8008504 <HAL_TIM_PWM_ConfigChannel>
 8001648:	b9b8      	cbnz	r0, 800167a <MX_TIM2_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164a:	2204      	movs	r2, #4
 800164c:	4669      	mov	r1, sp
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <MX_TIM2_Init+0xbc>)
 8001650:	f006 ff58 	bl	8008504 <HAL_TIM_PWM_ConfigChannel>
 8001654:	b9a0      	cbnz	r0, 8001680 <MX_TIM2_Init+0xb4>
  HAL_TIM_MspPostInit(&htim2);
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_TIM2_Init+0xbc>)
 8001658:	f7ff feca 	bl	80013f0 <HAL_TIM_MspPostInit>
}
 800165c:	b00f      	add	sp, #60	; 0x3c
 800165e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001662:	f7ff fcf1 	bl	8001048 <Error_Handler>
 8001666:	e7d1      	b.n	800160c <MX_TIM2_Init+0x40>
    Error_Handler();
 8001668:	f7ff fcee 	bl	8001048 <Error_Handler>
 800166c:	e7d6      	b.n	800161c <MX_TIM2_Init+0x50>
    Error_Handler();
 800166e:	f7ff fceb 	bl	8001048 <Error_Handler>
 8001672:	e7d7      	b.n	8001624 <MX_TIM2_Init+0x58>
    Error_Handler();
 8001674:	f7ff fce8 	bl	8001048 <Error_Handler>
 8001678:	e7dc      	b.n	8001634 <MX_TIM2_Init+0x68>
    Error_Handler();
 800167a:	f7ff fce5 	bl	8001048 <Error_Handler>
 800167e:	e7e4      	b.n	800164a <MX_TIM2_Init+0x7e>
    Error_Handler();
 8001680:	f7ff fce2 	bl	8001048 <Error_Handler>
 8001684:	e7e7      	b.n	8001656 <MX_TIM2_Init+0x8a>
 8001686:	bf00      	nop
 8001688:	240004a8 	.word	0x240004a8

0800168c <MX_TIM4_Init>:
{
 800168c:	b500      	push	{lr}
 800168e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001690:	2300      	movs	r3, #0
 8001692:	930a      	str	r3, [sp, #40]	; 0x28
 8001694:	930b      	str	r3, [sp, #44]	; 0x2c
 8001696:	930c      	str	r3, [sp, #48]	; 0x30
 8001698:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	9307      	str	r3, [sp, #28]
 800169c:	9308      	str	r3, [sp, #32]
 800169e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	9303      	str	r3, [sp, #12]
 80016a8:	9304      	str	r3, [sp, #16]
 80016aa:	9305      	str	r3, [sp, #20]
 80016ac:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 80016ae:	4821      	ldr	r0, [pc, #132]	; (8001734 <MX_TIM4_Init+0xa8>)
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <MX_TIM4_Init+0xac>)
 80016b2:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80016b4:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c2:	f006 fe7d 	bl	80083c0 <HAL_TIM_Base_Init>
 80016c6:	bb28      	cbnz	r0, 8001714 <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016ce:	a90a      	add	r1, sp, #40	; 0x28
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_TIM4_Init+0xa8>)
 80016d2:	f006 ffc1 	bl	8008658 <HAL_TIM_ConfigClockSource>
 80016d6:	bb00      	cbnz	r0, 800171a <MX_TIM4_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016d8:	4816      	ldr	r0, [pc, #88]	; (8001734 <MX_TIM4_Init+0xa8>)
 80016da:	f006 fea1 	bl	8008420 <HAL_TIM_PWM_Init>
 80016de:	b9f8      	cbnz	r0, 8001720 <MX_TIM4_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e6:	a907      	add	r1, sp, #28
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <MX_TIM4_Init+0xa8>)
 80016ea:	f007 f95b 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	b9d0      	cbnz	r0, 8001726 <MX_TIM4_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016fc:	220c      	movs	r2, #12
 80016fe:	4669      	mov	r1, sp
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM4_Init+0xa8>)
 8001702:	f006 feff 	bl	8008504 <HAL_TIM_PWM_ConfigChannel>
 8001706:	b988      	cbnz	r0, 800172c <MX_TIM4_Init+0xa0>
  HAL_TIM_MspPostInit(&htim4);
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <MX_TIM4_Init+0xa8>)
 800170a:	f7ff fe71 	bl	80013f0 <HAL_TIM_MspPostInit>
}
 800170e:	b00f      	add	sp, #60	; 0x3c
 8001710:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001714:	f7ff fc98 	bl	8001048 <Error_Handler>
 8001718:	e7d6      	b.n	80016c8 <MX_TIM4_Init+0x3c>
    Error_Handler();
 800171a:	f7ff fc95 	bl	8001048 <Error_Handler>
 800171e:	e7db      	b.n	80016d8 <MX_TIM4_Init+0x4c>
    Error_Handler();
 8001720:	f7ff fc92 	bl	8001048 <Error_Handler>
 8001724:	e7dc      	b.n	80016e0 <MX_TIM4_Init+0x54>
    Error_Handler();
 8001726:	f7ff fc8f 	bl	8001048 <Error_Handler>
 800172a:	e7e1      	b.n	80016f0 <MX_TIM4_Init+0x64>
    Error_Handler();
 800172c:	f7ff fc8c 	bl	8001048 <Error_Handler>
 8001730:	e7ea      	b.n	8001708 <MX_TIM4_Init+0x7c>
 8001732:	bf00      	nop
 8001734:	240004f4 	.word	0x240004f4
 8001738:	40000800 	.word	0x40000800

0800173c <MX_TIM15_Init>:
{
 800173c:	b510      	push	{r4, lr}
 800173e:	b09a      	sub	sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001740:	2400      	movs	r4, #0
 8001742:	9416      	str	r4, [sp, #88]	; 0x58
 8001744:	9417      	str	r4, [sp, #92]	; 0x5c
 8001746:	9418      	str	r4, [sp, #96]	; 0x60
 8001748:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	9413      	str	r4, [sp, #76]	; 0x4c
 800174c:	9414      	str	r4, [sp, #80]	; 0x50
 800174e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	940c      	str	r4, [sp, #48]	; 0x30
 8001752:	940d      	str	r4, [sp, #52]	; 0x34
 8001754:	940e      	str	r4, [sp, #56]	; 0x38
 8001756:	940f      	str	r4, [sp, #60]	; 0x3c
 8001758:	9410      	str	r4, [sp, #64]	; 0x40
 800175a:	9411      	str	r4, [sp, #68]	; 0x44
 800175c:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800175e:	222c      	movs	r2, #44	; 0x2c
 8001760:	4621      	mov	r1, r4
 8001762:	a801      	add	r0, sp, #4
 8001764:	f00d f8fc 	bl	800e960 <memset>
  htim15.Instance = TIM15;
 8001768:	482e      	ldr	r0, [pc, #184]	; (8001824 <MX_TIM15_Init+0xe8>)
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <MX_TIM15_Init+0xec>)
 800176c:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 6400;
 800176e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001772:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 200-1;
 8001776:	23c7      	movs	r3, #199	; 0xc7
 8001778:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 800177c:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001780:	f006 fe1e 	bl	80083c0 <HAL_TIM_Base_Init>
 8001784:	2800      	cmp	r0, #0
 8001786:	d13b      	bne.n	8001800 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800178e:	a916      	add	r1, sp, #88	; 0x58
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <MX_TIM15_Init+0xe8>)
 8001792:	f006 ff61 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8001796:	2800      	cmp	r0, #0
 8001798:	d135      	bne.n	8001806 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800179a:	4822      	ldr	r0, [pc, #136]	; (8001824 <MX_TIM15_Init+0xe8>)
 800179c:	f006 fe40 	bl	8008420 <HAL_TIM_PWM_Init>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d133      	bne.n	800180c <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017aa:	a913      	add	r1, sp, #76	; 0x4c
 80017ac:	481d      	ldr	r0, [pc, #116]	; (8001824 <MX_TIM15_Init+0xe8>)
 80017ae:	f007 f8f9 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d12d      	bne.n	8001812 <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 80017ba:	2363      	movs	r3, #99	; 0x63
 80017bc:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017c2:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c6:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	2204      	movs	r2, #4
 80017cc:	a90c      	add	r1, sp, #48	; 0x30
 80017ce:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_TIM15_Init+0xe8>)
 80017d0:	f006 fe98 	bl	8008504 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	bb00      	cbnz	r0, 8001818 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017da:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017dc:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017de:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e8:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ea:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017ec:	a901      	add	r1, sp, #4
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM15_Init+0xe8>)
 80017f0:	f007 f936 	bl	8008a60 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f4:	b998      	cbnz	r0, 800181e <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <MX_TIM15_Init+0xe8>)
 80017f8:	f7ff fdfa 	bl	80013f0 <HAL_TIM_MspPostInit>
}
 80017fc:	b01a      	add	sp, #104	; 0x68
 80017fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001800:	f7ff fc22 	bl	8001048 <Error_Handler>
 8001804:	e7c0      	b.n	8001788 <MX_TIM15_Init+0x4c>
    Error_Handler();
 8001806:	f7ff fc1f 	bl	8001048 <Error_Handler>
 800180a:	e7c6      	b.n	800179a <MX_TIM15_Init+0x5e>
    Error_Handler();
 800180c:	f7ff fc1c 	bl	8001048 <Error_Handler>
 8001810:	e7c8      	b.n	80017a4 <MX_TIM15_Init+0x68>
    Error_Handler();
 8001812:	f7ff fc19 	bl	8001048 <Error_Handler>
 8001816:	e7ce      	b.n	80017b6 <MX_TIM15_Init+0x7a>
    Error_Handler();
 8001818:	f7ff fc16 	bl	8001048 <Error_Handler>
 800181c:	e7db      	b.n	80017d6 <MX_TIM15_Init+0x9a>
    Error_Handler();
 800181e:	f7ff fc13 	bl	8001048 <Error_Handler>
 8001822:	e7e8      	b.n	80017f6 <MX_TIM15_Init+0xba>
 8001824:	2400045c 	.word	0x2400045c
 8001828:	40014000 	.word	0x40014000

0800182c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800182c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <MX_USART1_UART_Init+0x60>)
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_USART1_UART_Init+0x64>)
 8001832:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 576000;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_USART1_UART_Init+0x68>)
 8001836:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001838:	2300      	movs	r3, #0
 800183a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800183c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001840:	220c      	movs	r2, #12
 8001842:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001844:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001846:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001848:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184a:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184c:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184e:	f008 f8c7 	bl	80099e0 <HAL_UART_Init>
 8001852:	b970      	cbnz	r0, 8001872 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_USART1_UART_Init+0x60>)
 8001858:	f008 f998 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	b960      	cbnz	r0, 8001878 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185e:	2100      	movs	r1, #0
 8001860:	480a      	ldr	r0, [pc, #40]	; (800188c <MX_USART1_UART_Init+0x60>)
 8001862:	f008 f9b8 	bl	8009bd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001866:	b950      	cbnz	r0, 800187e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_USART1_UART_Init+0x60>)
 800186a:	f008 f970 	bl	8009b4e <HAL_UARTEx_DisableFifoMode>
 800186e:	b948      	cbnz	r0, 8001884 <MX_USART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001870:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001872:	f7ff fbe9 	bl	8001048 <Error_Handler>
 8001876:	e7ed      	b.n	8001854 <MX_USART1_UART_Init+0x28>
    Error_Handler();
 8001878:	f7ff fbe6 	bl	8001048 <Error_Handler>
 800187c:	e7ef      	b.n	800185e <MX_USART1_UART_Init+0x32>
    Error_Handler();
 800187e:	f7ff fbe3 	bl	8001048 <Error_Handler>
 8001882:	e7f1      	b.n	8001868 <MX_USART1_UART_Init+0x3c>
    Error_Handler();
 8001884:	f7ff fbe0 	bl	8001048 <Error_Handler>
}
 8001888:	e7f2      	b.n	8001870 <MX_USART1_UART_Init+0x44>
 800188a:	bf00      	nop
 800188c:	24000720 	.word	0x24000720
 8001890:	40011000 	.word	0x40011000
 8001894:	0008ca00 	.word	0x0008ca00

08001898 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001898:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189a:	4817      	ldr	r0, [pc, #92]	; (80018f8 <MX_USART2_UART_Init+0x60>)
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_USART2_UART_Init+0x64>)
 800189e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 576000;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_USART2_UART_Init+0x68>)
 80018a2:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a4:	2300      	movs	r3, #0
 80018a6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	220c      	movs	r2, #12
 80018ae:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b0:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b2:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b4:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b6:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b8:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ba:	f008 f891 	bl	80099e0 <HAL_UART_Init>
 80018be:	b970      	cbnz	r0, 80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_USART2_UART_Init+0x60>)
 80018c4:	f008 f962 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 80018c8:	b960      	cbnz	r0, 80018e4 <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <MX_USART2_UART_Init+0x60>)
 80018ce:	f008 f982 	bl	8009bd6 <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	b950      	cbnz	r0, 80018ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <MX_USART2_UART_Init+0x60>)
 80018d6:	f008 f93a 	bl	8009b4e <HAL_UARTEx_DisableFifoMode>
 80018da:	b948      	cbnz	r0, 80018f0 <MX_USART2_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018de:	f7ff fbb3 	bl	8001048 <Error_Handler>
 80018e2:	e7ed      	b.n	80018c0 <MX_USART2_UART_Init+0x28>
    Error_Handler();
 80018e4:	f7ff fbb0 	bl	8001048 <Error_Handler>
 80018e8:	e7ef      	b.n	80018ca <MX_USART2_UART_Init+0x32>
    Error_Handler();
 80018ea:	f7ff fbad 	bl	8001048 <Error_Handler>
 80018ee:	e7f1      	b.n	80018d4 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 80018f0:	f7ff fbaa 	bl	8001048 <Error_Handler>
}
 80018f4:	e7f2      	b.n	80018dc <MX_USART2_UART_Init+0x44>
 80018f6:	bf00      	nop
 80018f8:	240007b0 	.word	0x240007b0
 80018fc:	40004400 	.word	0x40004400
 8001900:	0008ca00 	.word	0x0008ca00

08001904 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001904:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001906:	4817      	ldr	r0, [pc, #92]	; (8001964 <MX_USART3_UART_Init+0x60>)
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_USART3_UART_Init+0x64>)
 800190a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 576000;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_USART3_UART_Init+0x68>)
 800190e:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001910:	2300      	movs	r3, #0
 8001912:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001916:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001918:	220c      	movs	r2, #12
 800191a:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191c:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800191e:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001920:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001922:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001924:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001926:	f008 f85b 	bl	80099e0 <HAL_UART_Init>
 800192a:	b970      	cbnz	r0, 800194a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_USART3_UART_Init+0x60>)
 8001930:	f008 f92c 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001934:	b960      	cbnz	r0, 8001950 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <MX_USART3_UART_Init+0x60>)
 800193a:	f008 f94c 	bl	8009bd6 <HAL_UARTEx_SetRxFifoThreshold>
 800193e:	b950      	cbnz	r0, 8001956 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <MX_USART3_UART_Init+0x60>)
 8001942:	f008 f904 	bl	8009b4e <HAL_UARTEx_DisableFifoMode>
 8001946:	b948      	cbnz	r0, 800195c <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001948:	bd08      	pop	{r3, pc}
    Error_Handler();
 800194a:	f7ff fb7d 	bl	8001048 <Error_Handler>
 800194e:	e7ed      	b.n	800192c <MX_USART3_UART_Init+0x28>
    Error_Handler();
 8001950:	f7ff fb7a 	bl	8001048 <Error_Handler>
 8001954:	e7ef      	b.n	8001936 <MX_USART3_UART_Init+0x32>
    Error_Handler();
 8001956:	f7ff fb77 	bl	8001048 <Error_Handler>
 800195a:	e7f1      	b.n	8001940 <MX_USART3_UART_Init+0x3c>
    Error_Handler();
 800195c:	f7ff fb74 	bl	8001048 <Error_Handler>
}
 8001960:	e7f2      	b.n	8001948 <MX_USART3_UART_Init+0x44>
 8001962:	bf00      	nop
 8001964:	24000840 	.word	0x24000840
 8001968:	40004800 	.word	0x40004800
 800196c:	0008ca00 	.word	0x0008ca00

08001970 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001970:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_USART6_UART_Init+0x60>)
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_USART6_UART_Init+0x64>)
 8001976:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 576000;
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_USART6_UART_Init+0x68>)
 800197a:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197c:	2300      	movs	r3, #0
 800197e:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001980:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001982:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001984:	220c      	movs	r2, #12
 8001986:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001988:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800198a:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198c:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800198e:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001990:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001992:	f008 f825 	bl	80099e0 <HAL_UART_Init>
 8001996:	b970      	cbnz	r0, 80019b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_USART6_UART_Init+0x60>)
 800199c:	f008 f8f6 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 80019a0:	b960      	cbnz	r0, 80019bc <MX_USART6_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <MX_USART6_UART_Init+0x60>)
 80019a6:	f008 f916 	bl	8009bd6 <HAL_UARTEx_SetRxFifoThreshold>
 80019aa:	b950      	cbnz	r0, 80019c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <MX_USART6_UART_Init+0x60>)
 80019ae:	f008 f8ce 	bl	8009b4e <HAL_UARTEx_DisableFifoMode>
 80019b2:	b948      	cbnz	r0, 80019c8 <MX_USART6_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019b6:	f7ff fb47 	bl	8001048 <Error_Handler>
 80019ba:	e7ed      	b.n	8001998 <MX_USART6_UART_Init+0x28>
    Error_Handler();
 80019bc:	f7ff fb44 	bl	8001048 <Error_Handler>
 80019c0:	e7ef      	b.n	80019a2 <MX_USART6_UART_Init+0x32>
    Error_Handler();
 80019c2:	f7ff fb41 	bl	8001048 <Error_Handler>
 80019c6:	e7f1      	b.n	80019ac <MX_USART6_UART_Init+0x3c>
    Error_Handler();
 80019c8:	f7ff fb3e 	bl	8001048 <Error_Handler>
}
 80019cc:	e7f2      	b.n	80019b4 <MX_USART6_UART_Init+0x44>
 80019ce:	bf00      	nop
 80019d0:	240008d0 	.word	0x240008d0
 80019d4:	40011400 	.word	0x40011400
 80019d8:	0008ca00 	.word	0x0008ca00

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b530      	push	{r4, r5, lr}
 80019de:	b0bd      	sub	sp, #244	; 0xf4
 80019e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	2100      	movs	r1, #0
 80019e4:	9137      	str	r1, [sp, #220]	; 0xdc
 80019e6:	9138      	str	r1, [sp, #224]	; 0xe0
 80019e8:	9139      	str	r1, [sp, #228]	; 0xe4
 80019ea:	913a      	str	r1, [sp, #232]	; 0xe8
 80019ec:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ee:	22bc      	movs	r2, #188	; 0xbc
 80019f0:	a808      	add	r0, sp, #32
 80019f2:	f00c ffb5 	bl	800e960 <memset>
  if(uartHandle->Instance==USART1)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	4a88      	ldr	r2, [pc, #544]	; (8001c1c <HAL_UART_MspInit+0x240>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00c      	beq.n	8001a18 <HAL_UART_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80019fe:	4a88      	ldr	r2, [pc, #544]	; (8001c20 <HAL_UART_MspInit+0x244>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d05f      	beq.n	8001ac4 <HAL_UART_MspInit+0xe8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8001a04:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <HAL_UART_MspInit+0x248>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f000 80b1 	beq.w	8001b6e <HAL_UART_MspInit+0x192>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8001a0c:	4a86      	ldr	r2, [pc, #536]	; (8001c28 <HAL_UART_MspInit+0x24c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	f000 811e 	beq.w	8001c50 <HAL_UART_MspInit+0x274>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a14:	b03d      	add	sp, #244	; 0xf4
 8001a16:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	a808      	add	r0, sp, #32
 8001a1e:	f004 ff19 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d148      	bne.n	8001ab8 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a26:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <HAL_UART_MspInit+0x250>)
 8001a28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a2c:	f042 0210 	orr.w	r2, r2, #16
 8001a30:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001a34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a38:	f002 0210 	and.w	r2, r2, #16
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a44:	f042 0202 	orr.w	r2, r2, #2
 8001a48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a5c:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2500      	movs	r5, #0
 8001a64:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	953a      	str	r5, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	a937      	add	r1, sp, #220	; 0xdc
 8001a6e:	4870      	ldr	r0, [pc, #448]	; (8001c30 <HAL_UART_MspInit+0x254>)
 8001a70:	f003 f80c 	bl	8004a8c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001a74:	486f      	ldr	r0, [pc, #444]	; (8001c34 <HAL_UART_MspInit+0x258>)
 8001a76:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <HAL_UART_MspInit+0x25c>)
 8001a78:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a7a:	2329      	movs	r3, #41	; 0x29
 8001a7c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a80:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a88:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a96:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a98:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a9a:	f001 fb61 	bl	8003160 <HAL_DMA_Init>
 8001a9e:	b970      	cbnz	r0, 8001abe <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001aa0:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <HAL_UART_MspInit+0x258>)
 8001aa2:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001aa4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	2025      	movs	r0, #37	; 0x25
 8001aac:	f001 f8b8 	bl	8002c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab0:	2025      	movs	r0, #37	; 0x25
 8001ab2:	f001 f8e9 	bl	8002c88 <HAL_NVIC_EnableIRQ>
 8001ab6:	e7ad      	b.n	8001a14 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001ab8:	f7ff fac6 	bl	8001048 <Error_Handler>
 8001abc:	e7b3      	b.n	8001a26 <HAL_UART_MspInit+0x4a>
      Error_Handler();
 8001abe:	f7ff fac3 	bl	8001048 <Error_Handler>
 8001ac2:	e7ed      	b.n	8001aa0 <HAL_UART_MspInit+0xc4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	a808      	add	r0, sp, #32
 8001aca:	f004 fec3 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d147      	bne.n	8001b62 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad2:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <HAL_UART_MspInit+0x250>)
 8001ad4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ad8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001adc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001ae0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ae4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ae8:	9202      	str	r2, [sp, #8]
 8001aea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001af0:	f042 0208 	orr.w	r2, r2, #8
 8001af4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	953a      	str	r5, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b12:	2307      	movs	r3, #7
 8001b14:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b16:	a937      	add	r1, sp, #220	; 0xdc
 8001b18:	4848      	ldr	r0, [pc, #288]	; (8001c3c <HAL_UART_MspInit+0x260>)
 8001b1a:	f002 ffb7 	bl	8004a8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001b1e:	4848      	ldr	r0, [pc, #288]	; (8001c40 <HAL_UART_MspInit+0x264>)
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_UART_MspInit+0x268>)
 8001b22:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001b24:	232b      	movs	r3, #43	; 0x2b
 8001b26:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b28:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b30:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b34:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b40:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b42:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b44:	f001 fb0c 	bl	8003160 <HAL_DMA_Init>
 8001b48:	b970      	cbnz	r0, 8001b68 <HAL_UART_MspInit+0x18c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_UART_MspInit+0x264>)
 8001b4c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001b4e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	2026      	movs	r0, #38	; 0x26
 8001b56:	f001 f863 	bl	8002c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b5a:	2026      	movs	r0, #38	; 0x26
 8001b5c:	f001 f894 	bl	8002c88 <HAL_NVIC_EnableIRQ>
 8001b60:	e758      	b.n	8001a14 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001b62:	f7ff fa71 	bl	8001048 <Error_Handler>
 8001b66:	e7b4      	b.n	8001ad2 <HAL_UART_MspInit+0xf6>
      Error_Handler();
 8001b68:	f7ff fa6e 	bl	8001048 <Error_Handler>
 8001b6c:	e7ed      	b.n	8001b4a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	a808      	add	r0, sp, #32
 8001b74:	f004 fe6e 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d148      	bne.n	8001c0e <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_UART_MspInit+0x250>)
 8001b7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001b82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b86:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001b8a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001b8e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001b92:	9204      	str	r2, [sp, #16]
 8001b94:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b9a:	f042 0208 	orr.w	r2, r2, #8
 8001b9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	9305      	str	r3, [sp, #20]
 8001bac:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb2:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2500      	movs	r5, #0
 8001bba:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	953a      	str	r5, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	a937      	add	r1, sp, #220	; 0xdc
 8001bc4:	481d      	ldr	r0, [pc, #116]	; (8001c3c <HAL_UART_MspInit+0x260>)
 8001bc6:	f002 ff61 	bl	8004a8c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <HAL_UART_MspInit+0x26c>)
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_UART_MspInit+0x270>)
 8001bce:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001bd0:	232d      	movs	r3, #45	; 0x2d
 8001bd2:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd4:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd6:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bdc:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bde:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be0:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be6:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bee:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001bf0:	f001 fab6 	bl	8003160 <HAL_DMA_Init>
 8001bf4:	b970      	cbnz	r0, 8001c14 <HAL_UART_MspInit+0x238>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_UART_MspInit+0x26c>)
 8001bf8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001bfa:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2105      	movs	r1, #5
 8001c00:	2027      	movs	r0, #39	; 0x27
 8001c02:	f001 f80d 	bl	8002c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c06:	2027      	movs	r0, #39	; 0x27
 8001c08:	f001 f83e 	bl	8002c88 <HAL_NVIC_EnableIRQ>
 8001c0c:	e702      	b.n	8001a14 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001c0e:	f7ff fa1b 	bl	8001048 <Error_Handler>
 8001c12:	e7b3      	b.n	8001b7c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001c14:	f7ff fa18 	bl	8001048 <Error_Handler>
 8001c18:	e7ed      	b.n	8001bf6 <HAL_UART_MspInit+0x21a>
 8001c1a:	bf00      	nop
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40004800 	.word	0x40004800
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	58020400 	.word	0x58020400
 8001c34:	24000540 	.word	0x24000540
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	58020c00 	.word	0x58020c00
 8001c40:	240005b8 	.word	0x240005b8
 8001c44:	40020040 	.word	0x40020040
 8001c48:	24000630 	.word	0x24000630
 8001c4c:	40020010 	.word	0x40020010
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001c50:	2301      	movs	r3, #1
 8001c52:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c54:	a808      	add	r0, sp, #32
 8001c56:	f004 fdfd 	bl	8006854 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d147      	bne.n	8001cee <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_UART_MspInit+0x320>)
 8001c60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001c6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001c70:	f002 0220 	and.w	r2, r2, #32
 8001c74:	9206      	str	r2, [sp, #24]
 8001c76:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c7c:	f042 0204 	orr.w	r2, r2, #4
 8001c80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	9307      	str	r3, [sp, #28]
 8001c8e:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2500      	movs	r5, #0
 8001c9a:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	953a      	str	r5, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	a937      	add	r1, sp, #220	; 0xdc
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <HAL_UART_MspInit+0x324>)
 8001ca6:	f002 fef1 	bl	8004a8c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream1;
 8001caa:	4816      	ldr	r0, [pc, #88]	; (8001d04 <HAL_UART_MspInit+0x328>)
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_UART_MspInit+0x32c>)
 8001cae:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001cb0:	2347      	movs	r3, #71	; 0x47
 8001cb2:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb4:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb6:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc0:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cce:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001cd0:	f001 fa46 	bl	8003160 <HAL_DMA_Init>
 8001cd4:	b970      	cbnz	r0, 8001cf4 <HAL_UART_MspInit+0x318>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_UART_MspInit+0x328>)
 8001cd8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001cda:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2105      	movs	r1, #5
 8001ce0:	2047      	movs	r0, #71	; 0x47
 8001ce2:	f000 ff9d 	bl	8002c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ce6:	2047      	movs	r0, #71	; 0x47
 8001ce8:	f000 ffce 	bl	8002c88 <HAL_NVIC_EnableIRQ>
}
 8001cec:	e692      	b.n	8001a14 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001cee:	f7ff f9ab 	bl	8001048 <Error_Handler>
 8001cf2:	e7b4      	b.n	8001c5e <HAL_UART_MspInit+0x282>
      Error_Handler();
 8001cf4:	f7ff f9a8 	bl	8001048 <Error_Handler>
 8001cf8:	e7ed      	b.n	8001cd6 <HAL_UART_MspInit+0x2fa>
 8001cfa:	bf00      	nop
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58020800 	.word	0x58020800
 8001d04:	240006a8 	.word	0x240006a8
 8001d08:	40020028 	.word	0x40020028

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d10:	f7ff faac 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	; (8001d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f00c fdc1 	bl	800e8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff f93f 	bl	8000fc0 <main>
  bx  lr
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d4c:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8001d50:	08011fac 	.word	0x08011fac
  ldr r2, =_sbss
 8001d54:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8001d58:	2400a798 	.word	0x2400a798

08001d5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC3_IRQHandler>

08001d5e <writeRegister>:
/*============================================================================*/
/* Local functions														      */
/*============================================================================*/

// Write the register
bool writeRegister(ads1113_t *i2c, uint8_t reg, uint16_t value) {
 8001d5e:	b530      	push	{r4, r5, lr}
 8001d60:	b087      	sub	sp, #28
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
//	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
//	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
	uint8_t pData[2];
	pData[0] = (value >> 8);
 8001d66:	0a13      	lsrs	r3, r2, #8
 8001d68:	f88d 3014 	strb.w	r3, [sp, #20]
	pData[1] = value & 0xff;
 8001d6c:	f88d 2015 	strb.w	r2, [sp, #21]

	if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK) {
 8001d70:	230a      	movs	r3, #10
 8001d72:	461a      	mov	r2, r3
 8001d74:	8801      	ldrh	r1, [r0, #0]
 8001d76:	6940      	ldr	r0, [r0, #20]
 8001d78:	f003 fd1a 	bl	80057b0 <HAL_I2C_IsDeviceReady>
 8001d7c:	b110      	cbz	r0, 8001d84 <writeRegister+0x26>
		return false;
 8001d7e:	2000      	movs	r0, #0
	}

	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
}
 8001d80:	b007      	add	sp, #28
 8001d82:	bd30      	pop	{r4, r5, pc}
	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
 8001d84:	230a      	movs	r3, #10
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2302      	movs	r3, #2
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	ab05      	add	r3, sp, #20
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2301      	movs	r3, #1
 8001d92:	462a      	mov	r2, r5
 8001d94:	8821      	ldrh	r1, [r4, #0]
 8001d96:	6960      	ldr	r0, [r4, #20]
 8001d98:	f003 fc32 	bl	8005600 <HAL_I2C_Mem_Write>
 8001d9c:	fab0 f080 	clz	r0, r0
 8001da0:	0940      	lsrs	r0, r0, #5
 8001da2:	e7ed      	b.n	8001d80 <writeRegister+0x22>

08001da4 <readRegister>:

// Read the register
uint16_t readRegister(ads1113_t *i2c, uint8_t reg) {
 8001da4:	b530      	push	{r4, r5, lr}
 8001da6:	b087      	sub	sp, #28
 8001da8:	4604      	mov	r4, r0
 8001daa:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 8001dae:	250a      	movs	r5, #10
 8001db0:	9500      	str	r5, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	f10d 020f 	add.w	r2, sp, #15
 8001db8:	8801      	ldrh	r1, [r0, #0]
 8001dba:	6940      	ldr	r0, [r0, #20]
 8001dbc:	f003 fa98 	bl	80052f0 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8ad 3014 	strh.w	r3, [sp, #20]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 8001dc6:	9500      	str	r5, [sp, #0]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	aa05      	add	r2, sp, #20
 8001dcc:	8821      	ldrh	r1, [r4, #0]
 8001dce:	6960      	ldr	r0, [r4, #20]
 8001dd0:	f003 fb52 	bl	8005478 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 8001dd4:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8001dd8:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8001ddc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001de0:	b007      	add	sp, #28
 8001de2:	bd30      	pop	{r4, r5, pc}

08001de4 <ADSbegin>:

// Check if we have correct connection.
bool ADSbegin(ads1113_t *i2c) {
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
//	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
	if (HAL_I2C_Init(i2c->hi2c) == HAL_OK){
 8001de8:	6940      	ldr	r0, [r0, #20]
 8001dea:	f003 fa0d 	bl	8005208 <HAL_I2C_Init>
 8001dee:	b108      	cbz	r0, 8001df4 <ADSbegin+0x10>
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
			return HAL_OK;
	}
	return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
}
 8001df2:	bd10      	pop	{r4, pc}
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	220a      	movs	r2, #10
 8001df8:	8821      	ldrh	r1, [r4, #0]
 8001dfa:	6960      	ldr	r0, [r4, #20]
 8001dfc:	f003 fcd8 	bl	80057b0 <HAL_I2C_IsDeviceReady>
 8001e00:	3800      	subs	r0, #0
 8001e02:	bf18      	it	ne
 8001e04:	2001      	movne	r0, #1
 8001e06:	e7f4      	b.n	8001df2 <ADSbegin+0xe>

08001e08 <ADS1113_init>:

// Declare an ADS1115 structure
bool ADS1113_init(ads1113_t *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
//	i2c->m_bitShift = 0;
//	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
//	i2c->full_scale = 4.096f;
//	ADSbegin(i2c);

	i2c->hi2c = hi2c;
 8001e0e:	6161      	str	r1, [r4, #20]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 8001e10:	0052      	lsls	r2, r2, #1
 8001e12:	8022      	strh	r2, [r4, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8001e14:	2308      	movs	r3, #8
 8001e16:	6063      	str	r3, [r4, #4]
	i2c->m_bitShift = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	7223      	strb	r3, [r4, #8]
	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
 8001e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e20:	8223      	strh	r3, [r4, #16]
	i2c->full_scale = 4.096f;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <ADS1113_init+0x90>)
 8001e24:	60e3      	str	r3, [r4, #12]

	//Deinit the port
	if (HAL_I2C_DeInit(i2c->hi2c) != HAL_OK){
 8001e26:	f003 fa49 	bl	80052bc <HAL_I2C_DeInit>
 8001e2a:	b108      	cbz	r0, 8001e30 <ADS1113_init+0x28>
		return false;
 8001e2c:	2000      	movs	r0, #0
		return false;
	}

	return true;

}
 8001e2e:	bd10      	pop	{r4, pc}
	i2c->hi2c->Instance = I2C1;
 8001e30:	6963      	ldr	r3, [r4, #20]
 8001e32:	4a1a      	ldr	r2, [pc, #104]	; (8001e9c <ADS1113_init+0x94>)
 8001e34:	601a      	str	r2, [r3, #0]
	i2c->hi2c->Init.Timing = 0x00401242;
 8001e36:	6963      	ldr	r3, [r4, #20]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <ADS1113_init+0x98>)
 8001e3a:	605a      	str	r2, [r3, #4]
	i2c->hi2c->Init.OwnAddress1 = 0;
 8001e3c:	6962      	ldr	r2, [r4, #20]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6093      	str	r3, [r2, #8]
	i2c->hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e42:	6962      	ldr	r2, [r4, #20]
 8001e44:	2101      	movs	r1, #1
 8001e46:	60d1      	str	r1, [r2, #12]
	i2c->hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	6962      	ldr	r2, [r4, #20]
 8001e4a:	6113      	str	r3, [r2, #16]
	i2c->hi2c->Init.OwnAddress2 = 0;
 8001e4c:	6962      	ldr	r2, [r4, #20]
 8001e4e:	6153      	str	r3, [r2, #20]
	i2c->hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e50:	6962      	ldr	r2, [r4, #20]
 8001e52:	6193      	str	r3, [r2, #24]
	i2c->hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e54:	6962      	ldr	r2, [r4, #20]
 8001e56:	61d3      	str	r3, [r2, #28]
	i2c->hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e58:	6962      	ldr	r2, [r4, #20]
 8001e5a:	6213      	str	r3, [r2, #32]
	if (HAL_I2C_Init(i2c->hi2c) != HAL_OK)
 8001e5c:	6960      	ldr	r0, [r4, #20]
 8001e5e:	f003 f9d3 	bl	8005208 <HAL_I2C_Init>
 8001e62:	b108      	cbz	r0, 8001e68 <ADS1113_init+0x60>
		return false;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e7e2      	b.n	8001e2e <ADS1113_init+0x26>
	if (HAL_I2CEx_ConfigAnalogFilter(i2c->hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e68:	2100      	movs	r1, #0
 8001e6a:	6960      	ldr	r0, [r4, #20]
 8001e6c:	f003 fd5b 	bl	8005926 <HAL_I2CEx_ConfigAnalogFilter>
 8001e70:	b108      	cbz	r0, 8001e76 <ADS1113_init+0x6e>
		return false;
 8001e72:	2000      	movs	r0, #0
 8001e74:	e7db      	b.n	8001e2e <ADS1113_init+0x26>
	if (HAL_I2CEx_ConfigDigitalFilter(i2c->hi2c, 0x0F) != HAL_OK)
 8001e76:	210f      	movs	r1, #15
 8001e78:	6960      	ldr	r0, [r4, #20]
 8001e7a:	f003 fd82 	bl	8005982 <HAL_I2CEx_ConfigDigitalFilter>
 8001e7e:	b108      	cbz	r0, 8001e84 <ADS1113_init+0x7c>
		return false;
 8001e80:	2000      	movs	r0, #0
 8001e82:	e7d4      	b.n	8001e2e <ADS1113_init+0x26>
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f003 fda9 	bl	80059dc <HAL_I2CEx_EnableFastModePlus>
	if (ADSbegin(i2c) != HAL_OK)
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff ffaa 	bl	8001de4 <ADSbegin>
 8001e90:	f080 0001 	eor.w	r0, r0, #1
 8001e94:	b2c0      	uxtb	r0, r0
 8001e96:	e7ca      	b.n	8001e2e <ADS1113_init+0x26>
 8001e98:	4083126f 	.word	0x4083126f
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	00401242 	.word	0x00401242

08001ea4 <ADSsetGain>:
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ads1113_t *i2c, adsGain_t gain) {
	i2c->m_gain = gain;
 8001ea4:	8201      	strh	r1, [r0, #16]
	switch(gain) {
 8001ea6:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8001eaa:	d01b      	beq.n	8001ee4 <ADSsetGain+0x40>
 8001eac:	d80d      	bhi.n	8001eca <ADSsetGain+0x26>
 8001eae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001eb2:	d014      	beq.n	8001ede <ADSsetGain+0x3a>
 8001eb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001eb8:	d102      	bne.n	8001ec0 <ADSsetGain+0x1c>
		break;
	case GAIN_ONE:
		i2c->full_scale = 4.096;
		break;
	case GAIN_TWO:
		i2c->full_scale = 2.048;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <ADSsetGain+0x4c>)
 8001ebc:	60c3      	str	r3, [r0, #12]
		break;
 8001ebe:	4770      	bx	lr
	switch(gain) {
 8001ec0:	b911      	cbnz	r1, 8001ec8 <ADSsetGain+0x24>
		i2c->full_scale = 6.6144;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <ADSsetGain+0x50>)
 8001ec4:	60c3      	str	r3, [r0, #12]
		break;
 8001ec6:	4770      	bx	lr
 8001ec8:	4770      	bx	lr
	switch(gain) {
 8001eca:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001ece:	d00c      	beq.n	8001eea <ADSsetGain+0x46>
 8001ed0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8001ed4:	d102      	bne.n	8001edc <ADSsetGain+0x38>
		break;
	case GAIN_EIGHT:
		i2c->full_scale = 0.512;
		break;
	case GAIN_SIXTEEN:
		i2c->full_scale = 0.256;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <ADSsetGain+0x54>)
 8001ed8:	60c3      	str	r3, [r0, #12]
		break;
	}
}
 8001eda:	4770      	bx	lr
 8001edc:	4770      	bx	lr
		i2c->full_scale = 4.096;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <ADSsetGain+0x58>)
 8001ee0:	60c3      	str	r3, [r0, #12]
		break;
 8001ee2:	4770      	bx	lr
		i2c->full_scale = 1.024;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <ADSsetGain+0x5c>)
 8001ee6:	60c3      	str	r3, [r0, #12]
		break;
 8001ee8:	4770      	bx	lr
		i2c->full_scale = 0.512;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <ADSsetGain+0x60>)
 8001eec:	60c3      	str	r3, [r0, #12]
		break;
 8001eee:	4770      	bx	lr
 8001ef0:	4003126f 	.word	0x4003126f
 8001ef4:	40d3a92a 	.word	0x40d3a92a
 8001ef8:	3e83126f 	.word	0x3e83126f
 8001efc:	4083126f 	.word	0x4083126f
 8001f00:	3f83126f 	.word	0x3f83126f
 8001f04:	3f03126f 	.word	0x3f03126f

08001f08 <ADSreadADC_Differential_0_1>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ads1113_t *i2c) {
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	4604      	mov	r4, r0

	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8001f0c:	8a03      	ldrh	r3, [r0, #16]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 8001f0e:	f248 1283 	movw	r2, #33155	; 0x8183
 8001f12:	431a      	orrs	r2, r3
 8001f14:	2101      	movs	r1, #1
 8001f16:	f7ff ff22 	bl	8001d5e <writeRegister>
  osDelay(time);
 8001f1a:	6860      	ldr	r0, [r4, #4]
 8001f1c:	f007 ff31 	bl	8009d82 <osDelay>

	// Wait for the conversion to complete
	ads_delay(i2c->m_conversionDelay);

	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8001f20:	2100      	movs	r1, #0
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff3e 	bl	8001da4 <readRegister>
 8001f28:	7a23      	ldrb	r3, [r4, #8]
 8001f2a:	4118      	asrs	r0, r3
	if (i2c->m_bitShift == 0) {
 8001f2c:	b90b      	cbnz	r3, 8001f32 <ADSreadADC_Differential_0_1+0x2a>
		return (int16_t) res;
 8001f2e:	b200      	sxth	r0, r0
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
		}
		return (int16_t) res;
	}
}
 8001f30:	bd10      	pop	{r4, pc}
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8001f32:	b280      	uxth	r0, r0
		if (res > 0x07FF) {
 8001f34:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
			res |= 0xF000;
 8001f38:	bf28      	it	cs
 8001f3a:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
		return (int16_t) res;
 8001f3e:	b200      	sxth	r0, r0
 8001f40:	e7f6      	b.n	8001f30 <ADSreadADC_Differential_0_1+0x28>
	...

08001f44 <ADSreadADC_Voltage>:


float ADSreadADC_Voltage(ads1113_t *i2c) {
 8001f44:	b508      	push	{r3, lr}
//	float coeff = i2c->full_scale/(ADS_MAX_VALUE*ADS_VOLTAGE_DIVIDER_RATIO);
//	return ADSreadADC_Differential_0_1(i2c) * coeff;
	float coeff = i2c->full_scale*ADS_VOLTAGE_DIVIDER_RATIO/ADS_MAX_VALUE;
	return ADSreadADC_Differential_0_1(i2c) * ADS_COEFF + ADS_OFFSET;
 8001f46:	f7ff ffdf 	bl	8001f08 <ADSreadADC_Differential_0_1>
 8001f4a:	ee07 0a90 	vmov	s15, r0
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001f64 <ADSreadADC_Voltage+0x20>
 8001f56:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8001f5a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001f68 <ADSreadADC_Voltage+0x24>
 8001f5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001f62:	bd08      	pop	{r3, pc}
 8001f64:	3b14fd53 	.word	0x3b14fd53
 8001f68:	41f5c011 	.word	0x41f5c011

08001f6c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001f6c:	b508      	push	{r3, lr}
 8001f6e:	4601      	mov	r1, r0
 8001f70:	2007      	movs	r0, #7
 8001f72:	f000 f929 	bl	80021c8 <bno055_writeData>
 8001f76:	bd08      	pop	{r3, pc}

08001f78 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	203d      	movs	r0, #61	; 0x3d
 8001f80:	f000 f922 	bl	80021c8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001f84:	b91c      	cbnz	r4, 8001f8e <bno055_setOperationMode+0x16>
    bno055_delay(19);
 8001f86:	2013      	movs	r0, #19
 8001f88:	f000 f91a 	bl	80021c0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001f8c:	bd10      	pop	{r4, pc}
    bno055_delay(7);
 8001f8e:	2007      	movs	r0, #7
 8001f90:	f000 f916 	bl	80021c0 <bno055_delay>
}
 8001f94:	e7fa      	b.n	8001f8c <bno055_setOperationMode+0x14>

08001f96 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001f96:	b508      	push	{r3, lr}
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff ffed 	bl	8001f78 <bno055_setOperationMode>
}
 8001f9e:	bd08      	pop	{r3, pc}

08001fa0 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001fa0:	b508      	push	{r3, lr}
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001fa2:	200c      	movs	r0, #12
 8001fa4:	f7ff ffe8 	bl	8001f78 <bno055_setOperationMode>
}
 8001fa8:	bd08      	pop	{r3, pc}

08001faa <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001faa:	b508      	push	{r3, lr}
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001fac:	2120      	movs	r1, #32
 8001fae:	203f      	movs	r0, #63	; 0x3f
 8001fb0:	f000 f90a 	bl	80021c8 <bno055_writeData>
  bno055_delay(700);
 8001fb4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001fb8:	f000 f902 	bl	80021c0 <bno055_delay>
}
 8001fbc:	bd08      	pop	{r3, pc}

08001fbe <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	b082      	sub	sp, #8
  bno055_reset();
 8001fc2:	f7ff fff2 	bl	8001faa <bno055_reset>

  uint8_t id = 0;
 8001fc6:	2400      	movs	r4, #0
 8001fc8:	f88d 4007 	strb.w	r4, [sp, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f10d 0107 	add.w	r1, sp, #7
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 f918 	bl	8002208 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ffc7 	bl	8001f6c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001fde:	4621      	mov	r1, r4
 8001fe0:	203f      	movs	r0, #63	; 0x3f
 8001fe2:	f000 f8f1 	bl	80021c8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001fe6:	f7ff ffd6 	bl	8001f96 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001fea:	200a      	movs	r0, #10
 8001fec:	f000 f8e8 	bl	80021c0 <bno055_delay>
}
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 8001ff4:	b500      	push	{lr}
 8001ff6:	b083      	sub	sp, #12
  bno055_setPage(0);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff ffb7 	bl	8001f6c <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f10d 0107 	add.w	r1, sp, #7
 8002004:	203a      	movs	r0, #58	; 0x3a
 8002006:	f000 f8ff 	bl	8002208 <bno055_readData>
  return tmp;
}
 800200a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800200e:	b003      	add	sp, #12
 8002010:	f85d fb04 	ldr.w	pc, [sp], #4
 8002014:	0000      	movs	r0, r0
	...

08002018 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002018:	b510      	push	{r4, lr}
 800201a:	b092      	sub	sp, #72	; 0x48
 800201c:	4604      	mov	r4, r0
  bno055_setPage(0);
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff ffa4 	bl	8001f6c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002024:	2c20      	cmp	r4, #32
 8002026:	d038      	beq.n	800209a <bno055_getVector+0x82>
    bno055_readData(vec, buffer, 8);
  else
    bno055_readData(vec, buffer, 6);
 8002028:	2206      	movs	r2, #6
 800202a:	a910      	add	r1, sp, #64	; 0x40
 800202c:	4620      	mov	r0, r4
 800202e:	f000 f8eb 	bl	8002208 <bno055_readData>

  double scale = 1;

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8002032:	2c0e      	cmp	r4, #14
 8002034:	f040 8086 	bne.w	8002144 <bno055_getVector+0x12c>
    scale = magScale;
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <bno055_getVector+0x158>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	ee06 3a10 	vmov	s12, r3
 8002040:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002044:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8002048:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800204c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002050:	b21b      	sxth	r3, r3
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800205a:	ee87 1b06 	vdiv.f64	d1, d7, d6
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800205e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8002062:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8002066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800206a:	b21b      	sxth	r3, r3
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002074:	ee87 2b06 	vdiv.f64	d2, d7, d6
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002078:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800207c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8002080:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002084:	b21b      	sxth	r3, r3
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800208e:	ee87 3b06 	vdiv.f64	d3, d7, d6
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002092:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8002168 <bno055_getVector+0x150>
  }

  return xyz;
}
 8002096:	b012      	add	sp, #72	; 0x48
 8002098:	bd10      	pop	{r4, pc}
    bno055_readData(vec, buffer, 8);
 800209a:	2208      	movs	r2, #8
 800209c:	a910      	add	r1, sp, #64	; 0x40
 800209e:	2020      	movs	r0, #32
 80020a0:	f000 f8b2 	bl	8002208 <bno055_readData>
    scale = quaScale;
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <bno055_getVector+0x15c>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	ee06 3a10 	vmov	s12, r3
 80020ac:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80020b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80020b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80020b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020bc:	b21b      	sxth	r3, r3
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020c6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80020ca:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80020ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80020d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020e0:	ee87 1b06 	vdiv.f64	d1, d7, d6
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80020e4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80020e8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80020ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020fa:	ee87 2b06 	vdiv.f64	d2, d7, d6
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80020fe:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8002102:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8002106:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800210a:	b21b      	sxth	r3, r3
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002114:	ee87 3b06 	vdiv.f64	d3, d7, d6
 8002118:	e7bd      	b.n	8002096 <bno055_getVector+0x7e>
    scale = angularRateScale;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <bno055_getVector+0x160>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	ee06 3a10 	vmov	s12, r3
 8002122:	eeb8 6b46 	vcvt.f64.u32	d6, s12
 8002126:	e78d      	b.n	8002044 <bno055_getVector+0x2c>
    scale = eulerScale;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <bno055_getVector+0x164>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	ee06 3a10 	vmov	s12, r3
 8002130:	eeb8 6b46 	vcvt.f64.u32	d6, s12
 8002134:	e786      	b.n	8002044 <bno055_getVector+0x2c>
    scale = accelScale;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <bno055_getVector+0x168>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	ee06 3a10 	vmov	s12, r3
 800213e:	eeb8 6b46 	vcvt.f64.u32	d6, s12
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002142:	e77f      	b.n	8002044 <bno055_getVector+0x2c>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002144:	f004 03df 	and.w	r3, r4, #223	; 0xdf
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002148:	2b08      	cmp	r3, #8
 800214a:	d0f4      	beq.n	8002136 <bno055_getVector+0x11e>
 800214c:	2c2e      	cmp	r4, #46	; 0x2e
 800214e:	d0f2      	beq.n	8002136 <bno055_getVector+0x11e>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002150:	2c14      	cmp	r4, #20
 8002152:	d0e2      	beq.n	800211a <bno055_getVector+0x102>
  } else if (vec == BNO055_VECTOR_EULER) {
 8002154:	2c1a      	cmp	r4, #26
 8002156:	d0e7      	beq.n	8002128 <bno055_getVector+0x110>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002158:	2c20      	cmp	r4, #32
 800215a:	d0a3      	beq.n	80020a4 <bno055_getVector+0x8c>
  double scale = 1;
 800215c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002160:	e770      	b.n	8002044 <bno055_getVector+0x2c>
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
	...
 8002170:	2400000e 	.word	0x2400000e
 8002174:	24000010 	.word	0x24000010
 8002178:	2400000a 	.word	0x2400000a
 800217c:	2400000c 	.word	0x2400000c
 8002180:	24000008 	.word	0x24000008

08002184 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8002184:	b500      	push	{lr}
 8002186:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8002188:	2008      	movs	r0, #8
 800218a:	f7ff ff45 	bl	8002018 <bno055_getVector>
}
 800218e:	b011      	add	sp, #68	; 0x44
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4

08002194 <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8002194:	b500      	push	{lr}
 8002196:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8002198:	200e      	movs	r0, #14
 800219a:	f7ff ff3d 	bl	8002018 <bno055_getVector>
}
 800219e:	b011      	add	sp, #68	; 0x44
 80021a0:	f85d fb04 	ldr.w	pc, [sp], #4

080021a4 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 80021a4:	b500      	push	{lr}
 80021a6:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80021a8:	2014      	movs	r0, #20
 80021aa:	f7ff ff35 	bl	8002018 <bno055_getVector>
}
 80021ae:	b011      	add	sp, #68	; 0x44
 80021b0:	f85d fb04 	ldr.w	pc, [sp], #4

080021b4 <bno055_assignI2C>:
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
  _bno055_i2c_port = hi2c_device;
 80021b4:	4b01      	ldr	r3, [pc, #4]	; (80021bc <bno055_assignI2C+0x8>)
 80021b6:	6018      	str	r0, [r3, #0]
}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	24000960 	.word	0x24000960

080021c0 <bno055_delay>:

void bno055_delay(int time) {
 80021c0:	b508      	push	{r3, lr}
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80021c2:	f007 fdde 	bl	8009d82 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80021c8:	b500      	push	{lr}
 80021ca:	b085      	sub	sp, #20
  uint8_t txdata[2] = {reg, data};
 80021cc:	f88d 000c 	strb.w	r0, [sp, #12]
 80021d0:	f88d 100d 	strb.w	r1, [sp, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80021d4:	230a      	movs	r3, #10
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	aa03      	add	r2, sp, #12
 80021dc:	2150      	movs	r1, #80	; 0x50
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <bno055_writeData+0x3c>)
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	f003 f885 	bl	80052f0 <HAL_I2C_Master_Transmit>
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 80021e6:	b910      	cbnz	r0, 80021ee <bno055_writeData+0x26>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
    //printf("HAL_I2C_STATE_TIMEOUT\r\n");
  } else if (state == HAL_I2C_STATE_ERROR) {
    //printf("HAL_I2C_STATE_ERROR\r\n");
  }
}
 80021e8:	b005      	add	sp, #20
 80021ea:	f85d fb04 	ldr.w	pc, [sp], #4
  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <bno055_writeData+0x3c>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f003 fb96 	bl	8005922 <HAL_I2C_GetError>
  if (error == HAL_I2C_ERROR_NONE) {
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d0f6      	beq.n	80021e8 <bno055_writeData+0x20>
  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80021fa:	4b02      	ldr	r3, [pc, #8]	; (8002204 <bno055_writeData+0x3c>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	f003 fb8d 	bl	800591c <HAL_I2C_GetState>
  }
 8002202:	e7f1      	b.n	80021e8 <bno055_writeData+0x20>
 8002204:	24000960 	.word	0x24000960

08002208 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	460c      	mov	r4, r1
 800220e:	4615      	mov	r5, r2
 8002210:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002214:	4e09      	ldr	r6, [pc, #36]	; (800223c <bno055_readData+0x34>)
 8002216:	2764      	movs	r7, #100	; 0x64
 8002218:	9700      	str	r7, [sp, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	f10d 020f 	add.w	r2, sp, #15
 8002220:	2150      	movs	r1, #80	; 0x50
 8002222:	6830      	ldr	r0, [r6, #0]
 8002224:	f003 f864 	bl	80052f0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002228:	9700      	str	r7, [sp, #0]
 800222a:	462b      	mov	r3, r5
 800222c:	4622      	mov	r2, r4
 800222e:	2150      	movs	r1, #80	; 0x50
 8002230:	6830      	ldr	r0, [r6, #0]
 8002232:	f003 f921 	bl	8005478 <HAL_I2C_Master_Receive>
                         100);
}
 8002236:	b005      	add	sp, #20
 8002238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223a:	bf00      	nop
 800223c:	24000960 	.word	0x24000960

08002240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002240:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002242:	2003      	movs	r0, #3
 8002244:	f000 fcda 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002248:	f003 ff40 	bl	80060cc <HAL_RCC_GetSysClockFreq>
 800224c:	490f      	ldr	r1, [pc, #60]	; (800228c <HAL_Init+0x4c>)
 800224e:	698b      	ldr	r3, [r1, #24]
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_Init+0x50>)
 8002252:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800225e:	698b      	ldr	r3, [r1, #24]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	fa20 f303 	lsr.w	r3, r0, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <HAL_Init+0x54>)
 8002270:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_Init+0x58>)
 8002274:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002276:	200f      	movs	r0, #15
 8002278:	f7fe ff02 	bl	8001080 <HAL_InitTick>
 800227c:	b110      	cbz	r0, 8002284 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800227e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002280:	4620      	mov	r0, r4
 8002282:	bd10      	pop	{r4, pc}
 8002284:	4604      	mov	r4, r0
  HAL_MspInit();
 8002286:	f7fe fee1 	bl	800104c <HAL_MspInit>
  return HAL_OK;
 800228a:	e7f9      	b.n	8002280 <HAL_Init+0x40>
 800228c:	58024400 	.word	0x58024400
 8002290:	08011200 	.word	0x08011200
 8002294:	24000004 	.word	0x24000004
 8002298:	24000000 	.word	0x24000000

0800229c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_IncTick+0x10>)
 800229e:	6811      	ldr	r1, [r2, #0]
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_IncTick+0x14>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	440b      	add	r3, r1
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	24000964 	.word	0x24000964
 80022b0:	24000012 	.word	0x24000012

080022b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022b4:	4b01      	ldr	r3, [pc, #4]	; (80022bc <HAL_GetTick+0x8>)
 80022b6:	6818      	ldr	r0, [r3, #0]
}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	24000964 	.word	0x24000964

080022c0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80022c0:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <HAL_GetREVID+0x8>)
 80022c2:	6818      	ldr	r0, [r3, #0]
}
 80022c4:	0c00      	lsrs	r0, r0, #16
 80022c6:	4770      	bx	lr
 80022c8:	5c001000 	.word	0x5c001000

080022cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022d0:	2200      	movs	r2, #0
 80022d2:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80022d8:	2a01      	cmp	r2, #1
 80022da:	f000 820e 	beq.w	80026fa <HAL_ADC_ConfigChannel+0x42e>
 80022de:	4603      	mov	r3, r0
 80022e0:	2201      	movs	r2, #1
 80022e2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e6:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022e8:	68a2      	ldr	r2, [r4, #8]
 80022ea:	f012 0f04 	tst.w	r2, #4
 80022ee:	d009      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80022f2:	f042 0220 	orr.w	r2, r2, #32
 80022f6:	6542      	str	r2, [r0, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002300:	b002      	add	sp, #8
 8002302:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002304:	680a      	ldr	r2, [r1, #0]
 8002306:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800230a:	2800      	cmp	r0, #0
 800230c:	d149      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0xd6>
 800230e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002312:	2001      	movs	r0, #1
 8002314:	4090      	lsls	r0, r2
 8002316:	69e2      	ldr	r2, [r4, #28]
 8002318:	4302      	orrs	r2, r0
 800231a:	61e2      	str	r2, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800231c:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800231e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8002322:	f00e 0e0c 	and.w	lr, lr, #12
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800232c:	f85e 400c 	ldr.w	r4, [lr, ip]
 8002330:	f000 001f 	and.w	r0, r0, #31
 8002334:	680a      	ldr	r2, [r1, #0]
 8002336:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800233a:	4082      	lsls	r2, r0
 800233c:	251f      	movs	r5, #31
 800233e:	fa05 f000 	lsl.w	r0, r5, r0
 8002342:	ea24 0000 	bic.w	r0, r4, r0
 8002346:	4302      	orrs	r2, r0
 8002348:	f84e 200c 	str.w	r2, [lr, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234c:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800234e:	68a2      	ldr	r2, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002350:	68a0      	ldr	r0, [r4, #8]
 8002352:	f000 0008 	and.w	r0, r0, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002356:	f002 0204 	and.w	r2, r2, #4
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800235a:	4302      	orrs	r2, r0
 800235c:	d02a      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0xe8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235e:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002360:	6882      	ldr	r2, [r0, #8]
 8002362:	f012 0f01 	tst.w	r2, #1
 8002366:	f040 81be 	bne.w	80026e6 <HAL_ADC_ConfigChannel+0x41a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800236a:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800236c:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
 8002370:	68ca      	ldr	r2, [r1, #12]
 8002372:	f002 0c18 	and.w	ip, r2, #24
 8002376:	4ab7      	ldr	r2, [pc, #732]	; (8002654 <HAL_ADC_ConfigChannel+0x388>)
 8002378:	fa22 f20c 	lsr.w	r2, r2, ip
 800237c:	4022      	ands	r2, r4
 800237e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002382:	ea25 0404 	bic.w	r4, r5, r4
 8002386:	4322      	orrs	r2, r4
 8002388:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800238c:	68c8      	ldr	r0, [r1, #12]
 800238e:	4ab2      	ldr	r2, [pc, #712]	; (8002658 <HAL_ADC_ConfigChannel+0x38c>)
 8002390:	4290      	cmp	r0, r2
 8002392:	f000 80b0 	beq.w	80024f6 <HAL_ADC_ConfigChannel+0x22a>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002396:	680a      	ldr	r2, [r1, #0]
 8002398:	2a00      	cmp	r2, #0
 800239a:	f2c0 812e 	blt.w	80025fa <HAL_ADC_ConfigChannel+0x32e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239e:	2000      	movs	r0, #0
 80023a0:	e7ab      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80023a6:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2001      	movs	r0, #1
 80023b0:	4090      	lsls	r0, r2
 80023b2:	e7b0      	b.n	8002316 <HAL_ADC_ConfigChannel+0x4a>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023b4:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023b6:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 80023ba:	f00c 0c04 	and.w	ip, ip, #4
 80023be:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 80023c0:	f85c 0004 	ldr.w	r0, [ip, r4]
 80023c4:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80023c8:	f04f 0e07 	mov.w	lr, #7
 80023cc:	fa0e fe05 	lsl.w	lr, lr, r5
 80023d0:	ea20 000e 	bic.w	r0, r0, lr
 80023d4:	688e      	ldr	r6, [r1, #8]
 80023d6:	fa06 f505 	lsl.w	r5, r6, r5
 80023da:	4328      	orrs	r0, r5
 80023dc:	f84c 0004 	str.w	r0, [ip, r4]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023e0:	489e      	ldr	r0, [pc, #632]	; (800265c <HAL_ADC_ConfigChannel+0x390>)
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80023e8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80023ec:	d00c      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x13c>
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	68c4      	ldr	r4, [r0, #12]
 80023f2:	f014 0f10 	tst.w	r4, #16
 80023f6:	d141      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1b0>
 80023f8:	68c4      	ldr	r4, [r0, #12]
 80023fa:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80023fe:	0064      	lsls	r4, r4, #1
 8002400:	6948      	ldr	r0, [r1, #20]
 8002402:	fa00 f404 	lsl.w	r4, r0, r4
 8002406:	e007      	b.n	8002418 <HAL_ADC_ConfigChannel+0x14c>
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	68c4      	ldr	r4, [r0, #12]
 800240c:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002410:	0064      	lsls	r4, r4, #1
 8002412:	6948      	ldr	r0, [r1, #20]
 8002414:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002418:	690d      	ldr	r5, [r1, #16]
 800241a:	2d04      	cmp	r5, #4
 800241c:	d036      	beq.n	800248c <HAL_ADC_ConfigChannel+0x1c0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f100 0c60 	add.w	ip, r0, #96	; 0x60
    MODIFY_REG(*preg,
 8002424:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8002428:	6808      	ldr	r0, [r1, #0]
 800242a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800242e:	f006 4e00 	and.w	lr, r6, #2147483648	; 0x80000000
 8002432:	ea40 000e 	orr.w	r0, r0, lr
 8002436:	4320      	orrs	r0, r4
 8002438:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	690d      	ldr	r5, [r1, #16]
 8002440:	7e48      	ldrb	r0, [r1, #25]
 8002442:	2801      	cmp	r0, #1
 8002444:	bf14      	ite	ne
 8002446:	4616      	movne	r6, r2
 8002448:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800244c:	3460      	adds	r4, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800244e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002452:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002456:	4330      	orrs	r0, r6
 8002458:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800245c:	681d      	ldr	r5, [r3, #0]
 800245e:	690c      	ldr	r4, [r1, #16]
 8002460:	7e08      	ldrb	r0, [r1, #24]
 8002462:	2801      	cmp	r0, #1
 8002464:	bf08      	it	eq
 8002466:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800246a:	6928      	ldr	r0, [r5, #16]
 800246c:	f004 041f 	and.w	r4, r4, #31
 8002470:	40a2      	lsls	r2, r4
 8002472:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002476:	4302      	orrs	r2, r0
 8002478:	612a      	str	r2, [r5, #16]
}
 800247a:	e770      	b.n	800235e <HAL_ADC_ConfigChannel+0x92>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800247c:	68c4      	ldr	r4, [r0, #12]
 800247e:	0864      	lsrs	r4, r4, #1
 8002480:	f004 0408 	and.w	r4, r4, #8
 8002484:	6948      	ldr	r0, [r1, #20]
 8002486:	fa00 f404 	lsl.w	r4, r0, r4
 800248a:	e7c5      	b.n	8002418 <HAL_ADC_ConfigChannel+0x14c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002490:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002494:	680c      	ldr	r4, [r1, #0]
 8002496:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800249a:	d01d      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x20c>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80024a0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80024a4:	680c      	ldr	r4, [r1, #0]
 80024a6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80024aa:	d01a      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80024b0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80024b4:	680c      	ldr	r4, [r1, #0]
 80024b6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80024ba:	d017      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x220>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80024c0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80024c4:	680c      	ldr	r4, [r1, #0]
 80024c6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80024ca:	f47f af48 	bne.w	800235e <HAL_ADC_ConfigChannel+0x92>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024ce:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80024d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024d4:	66c2      	str	r2, [r0, #108]	; 0x6c
 80024d6:	e742      	b.n	800235e <HAL_ADC_ConfigChannel+0x92>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024d8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80024da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024de:	6602      	str	r2, [r0, #96]	; 0x60
 80024e0:	e7dc      	b.n	800249c <HAL_ADC_ConfigChannel+0x1d0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024e2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80024e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e8:	6642      	str	r2, [r0, #100]	; 0x64
 80024ea:	e7df      	b.n	80024ac <HAL_ADC_ConfigChannel+0x1e0>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024ec:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80024ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	6682      	str	r2, [r0, #104]	; 0x68
 80024f4:	e7e2      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1f0>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f6:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f8:	680a      	ldr	r2, [r1, #0]
 80024fa:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80024fe:	b9b8      	cbnz	r0, 8002530 <HAL_ADC_ConfigChannel+0x264>
 8002500:	0e90      	lsrs	r0, r2, #26
 8002502:	3001      	adds	r0, #1
 8002504:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	2d09      	cmp	r5, #9
 800250a:	d93e      	bls.n	800258a <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800250c:	0e92      	lsrs	r2, r2, #26
 800250e:	3201      	adds	r2, #1
 8002510:	f002 001f 	and.w	r0, r2, #31
 8002514:	0692      	lsls	r2, r2, #26
 8002516:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800251a:	2501      	movs	r5, #1
 800251c:	4085      	lsls	r5, r0
 800251e:	4315      	orrs	r5, r2
 8002520:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002524:	3a1e      	subs	r2, #30
 8002526:	0512      	lsls	r2, r2, #20
 8002528:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	432a      	orrs	r2, r5
 800252e:	e036      	b.n	800259e <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002534:	2800      	cmp	r0, #0
 8002536:	d043      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x2f4>
  return __builtin_clz(value);
 8002538:	fab0 f080 	clz	r0, r0
 800253c:	3001      	adds	r0, #1
 800253e:	f000 001f 	and.w	r0, r0, #31
 8002542:	2809      	cmp	r0, #9
 8002544:	d93c      	bls.n	80025c0 <HAL_ADC_ConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 800254a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800254e:	3501      	adds	r5, #1
 8002550:	06ad      	lsls	r5, r5, #26
 8002552:	f005 40f8 	and.w	r0, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 800255a:	fab5 f585 	clz	r5, r5
 800255e:	3501      	adds	r5, #1
 8002560:	f005 051f 	and.w	r5, r5, #31
 8002564:	2601      	movs	r6, #1
 8002566:	fa06 f505 	lsl.w	r5, r6, r5
 800256a:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 8002570:	fab0 f080 	clz	r0, r0
 8002574:	4430      	add	r0, r6
 8002576:	f000 001f 	and.w	r0, r0, #31
 800257a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800257e:	f1a0 021e 	sub.w	r2, r0, #30
 8002582:	0512      	lsls	r2, r2, #20
 8002584:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002588:	e7d0      	b.n	800252c <HAL_ADC_ConfigChannel+0x260>
 800258a:	0680      	lsls	r0, r0, #26
 800258c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002590:	2201      	movs	r2, #1
 8002592:	40aa      	lsls	r2, r5
 8002594:	4310      	orrs	r0, r2
 8002596:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800259a:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259c:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800259e:	0dd5      	lsrs	r5, r2, #23
 80025a0:	f005 0504 	and.w	r5, r5, #4
 80025a4:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 80025a6:	5928      	ldr	r0, [r5, r4]
 80025a8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80025ac:	2607      	movs	r6, #7
 80025ae:	4096      	lsls	r6, r2
 80025b0:	ea20 0006 	bic.w	r0, r0, r6
 80025b4:	688e      	ldr	r6, [r1, #8]
 80025b6:	fa06 f202 	lsl.w	r2, r6, r2
 80025ba:	4302      	orrs	r2, r0
 80025bc:	512a      	str	r2, [r5, r4]
}
 80025be:	e6ea      	b.n	8002396 <HAL_ADC_ConfigChannel+0xca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 80025c4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c8:	3001      	adds	r0, #1
 80025ca:	0680      	lsls	r0, r0, #26
 80025cc:	f000 45f8 	and.w	r5, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 80025d4:	fab0 f080 	clz	r0, r0
 80025d8:	3001      	adds	r0, #1
 80025da:	f000 061f 	and.w	r6, r0, #31
 80025de:	2001      	movs	r0, #1
 80025e0:	40b0      	lsls	r0, r6
 80025e2:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80025e8:	fab2 f282 	clz	r2, r2
 80025ec:	3201      	adds	r2, #1
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025f6:	0512      	lsls	r2, r2, #20
 80025f8:	e7d0      	b.n	800259c <HAL_ADC_ConfigChannel+0x2d0>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	4818      	ldr	r0, [pc, #96]	; (8002660 <HAL_ADC_ConfigChannel+0x394>)
 80025fe:	4281      	cmp	r1, r0
 8002600:	d07d      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x432>
 8002602:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002606:	4281      	cmp	r1, r0
 8002608:	d079      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x432>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800260a:	4816      	ldr	r0, [pc, #88]	; (8002664 <HAL_ADC_ConfigChannel+0x398>)
 800260c:	6880      	ldr	r0, [r0, #8]
 800260e:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002612:	4c15      	ldr	r4, [pc, #84]	; (8002668 <HAL_ADC_ConfigChannel+0x39c>)
 8002614:	68a4      	ldr	r4, [r4, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002616:	f014 0f01 	tst.w	r4, #1
 800261a:	d17d      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x44c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	4e11      	ldr	r6, [pc, #68]	; (8002664 <HAL_ADC_ConfigChannel+0x398>)
 800261e:	e000      	b.n	8002622 <HAL_ADC_ConfigChannel+0x356>
 8002620:	4e12      	ldr	r6, [pc, #72]	; (800266c <HAL_ADC_ConfigChannel+0x3a0>)
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002622:	4c13      	ldr	r4, [pc, #76]	; (8002670 <HAL_ADC_ConfigChannel+0x3a4>)
 8002624:	42a2      	cmp	r2, r4
 8002626:	d00d      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x378>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002628:	4c12      	ldr	r4, [pc, #72]	; (8002674 <HAL_ADC_ConfigChannel+0x3a8>)
 800262a:	42a2      	cmp	r2, r4
 800262c:	d041      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x3e6>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800262e:	4c12      	ldr	r4, [pc, #72]	; (8002678 <HAL_ADC_ConfigChannel+0x3ac>)
 8002630:	42a2      	cmp	r2, r4
 8002632:	d160      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x42a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002634:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002638:	d102      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x374>
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_ADC_ConfigChannel+0x39c>)
 800263c:	4291      	cmp	r1, r2
 800263e:	d049      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x408>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2000      	movs	r0, #0
 8002642:	e65a      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002644:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002648:	d14f      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x41e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_ADC_ConfigChannel+0x39c>)
 800264c:	4291      	cmp	r1, r2
 800264e:	d015      	beq.n	800267c <HAL_ADC_ConfigChannel+0x3b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2000      	movs	r0, #0
 8002652:	e652      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 8002654:	000fffff 	.word	0x000fffff
 8002658:	47ff0000 	.word	0x47ff0000
 800265c:	5c001000 	.word	0x5c001000
 8002660:	40022000 	.word	0x40022000
 8002664:	58026300 	.word	0x58026300
 8002668:	58026000 	.word	0x58026000
 800266c:	40022300 	.word	0x40022300
 8002670:	cb840000 	.word	0xcb840000
 8002674:	c7520000 	.word	0xc7520000
 8002678:	cfb80000 	.word	0xcfb80000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800267c:	68b2      	ldr	r2, [r6, #8]
 800267e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002682:	432a      	orrs	r2, r5
 8002684:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002688:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_ADC_ConfigChannel+0x458>)
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	0992      	lsrs	r2, r2, #6
 8002690:	4925      	ldr	r1, [pc, #148]	; (8002728 <HAL_ADC_ConfigChannel+0x45c>)
 8002692:	fba1 1202 	umull	r1, r2, r1, r2
 8002696:	0992      	lsrs	r2, r2, #6
 8002698:	3201      	adds	r2, #1
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	b32a      	cbz	r2, 80026ee <HAL_ADC_ConfigChannel+0x422>
                wait_loop_index--;
 80026a2:	9a01      	ldr	r2, [sp, #4]
 80026a4:	3a01      	subs	r2, #1
 80026a6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80026a8:	9a01      	ldr	r2, [sp, #4]
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ae:	2000      	movs	r0, #0
 80026b0:	e623      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026b2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80026b6:	d11c      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x426>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b8:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_ADC_ConfigChannel+0x460>)
 80026ba:	4291      	cmp	r1, r2
 80026bc:	d001      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x3f6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2000      	movs	r0, #0
 80026c0:	e61b      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026c2:	68b2      	ldr	r2, [r6, #8]
 80026c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80026c8:	432a      	orrs	r2, r5
 80026ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80026ce:	60b2      	str	r2, [r6, #8]
 80026d0:	2000      	movs	r0, #0
}
 80026d2:	e612      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026d4:	68b2      	ldr	r2, [r6, #8]
 80026d6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80026da:	432a      	orrs	r2, r5
 80026dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026e0:	60b2      	str	r2, [r6, #8]
 80026e2:	2000      	movs	r0, #0
}
 80026e4:	e609      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026e6:	2000      	movs	r0, #0
 80026e8:	e607      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026ea:	2000      	movs	r0, #0
 80026ec:	e605      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026ee:	2000      	movs	r0, #0
 80026f0:	e603      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026f2:	2000      	movs	r0, #0
 80026f4:	e601      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 80026f6:	2000      	movs	r0, #0
 80026f8:	e5ff      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80026fa:	2002      	movs	r0, #2
 80026fc:	e600      	b.n	8002300 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <HAL_ADC_ConfigChannel+0x464>)
 8002700:	6880      	ldr	r0, [r0, #8]
 8002702:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002706:	4c0b      	ldr	r4, [pc, #44]	; (8002734 <HAL_ADC_ConfigChannel+0x468>)
 8002708:	68a6      	ldr	r6, [r4, #8]
 800270a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800270e:	68a4      	ldr	r4, [r4, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002710:	4334      	orrs	r4, r6
 8002712:	f014 0f01 	tst.w	r4, #1
 8002716:	d083      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x354>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e5ea      	b.n	80022fa <HAL_ADC_ConfigChannel+0x2e>
 8002724:	24000000 	.word	0x24000000
 8002728:	053e2d63 	.word	0x053e2d63
 800272c:	58026000 	.word	0x58026000
 8002730:	40022300 	.word	0x40022300
 8002734:	40022000 	.word	0x40022000

08002738 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800273c:	6803      	ldr	r3, [r0, #0]
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <ADC_ConfigureBoostMode+0x150>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00b      	beq.n	800275c <ADC_ConfigureBoostMode+0x24>
 8002744:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <ADC_ConfigureBoostMode+0x24>
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <ADC_ConfigureBoostMode+0x154>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	e006      	b.n	800276a <ADC_ConfigureBoostMode+0x32>
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <ADC_ConfigureBoostMode+0x158>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b993      	cbnz	r3, 8002792 <ADC_ConfigureBoostMode+0x5a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800276c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002770:	f005 f85c 	bl	800782c <HAL_RCCEx_GetPeriphCLKFreq>
 8002774:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800277c:	d057      	beq.n	800282e <ADC_ConfigureBoostMode+0xf6>
 800277e:	d842      	bhi.n	8002806 <ADC_ConfigureBoostMode+0xce>
 8002780:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002784:	d051      	beq.n	800282a <ADC_ConfigureBoostMode+0xf2>
 8002786:	d926      	bls.n	80027d6 <ADC_ConfigureBoostMode+0x9e>
 8002788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278c:	d10e      	bne.n	80027ac <ADC_ConfigureBoostMode+0x74>
        break;
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
        break;
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800278e:	0945      	lsrs	r5, r0, #5
        break;
 8002790:	e00c      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
    freq = HAL_RCC_GetHCLKFreq();
 8002792:	f003 feeb 	bl	800656c <HAL_RCC_GetHCLKFreq>
 8002796:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800279e:	d014      	beq.n	80027ca <ADC_ConfigureBoostMode+0x92>
 80027a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027a4:	d015      	beq.n	80027d2 <ADC_ConfigureBoostMode+0x9a>
 80027a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027aa:	d00e      	beq.n	80027ca <ADC_ConfigureBoostMode+0x92>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ac:	f7ff fd88 	bl	80022c0 <HAL_GetREVID>
 80027b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80027b4:	4298      	cmp	r0, r3
 80027b6:	d849      	bhi.n	800284c <ADC_ConfigureBoostMode+0x114>
  {
    if (freq > 20000000UL)
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <ADC_ConfigureBoostMode+0x15c>)
 80027ba:	429d      	cmp	r5, r3
 80027bc:	d92f      	bls.n	800281e <ADC_ConfigureBoostMode+0xe6>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	6893      	ldr	r3, [r2, #8]
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027c8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80027d0:	e7ec      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
        freq /= 4UL;
 80027d2:	0885      	lsrs	r5, r0, #2
        break;
 80027d4:	e7ea      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
    switch (hadc->Init.ClockPrescaler)
 80027d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027da:	d00f      	beq.n	80027fc <ADC_ConfigureBoostMode+0xc4>
 80027dc:	d906      	bls.n	80027ec <ADC_ConfigureBoostMode+0xb4>
 80027de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027e2:	d00b      	beq.n	80027fc <ADC_ConfigureBoostMode+0xc4>
 80027e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027e8:	d008      	beq.n	80027fc <ADC_ConfigureBoostMode+0xc4>
 80027ea:	e7df      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
 80027ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027f0:	d004      	beq.n	80027fc <ADC_ConfigureBoostMode+0xc4>
 80027f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80027f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80027fa:	d1d7      	bne.n	80027ac <ADC_ConfigureBoostMode+0x74>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002804:	e7d2      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
    switch (hadc->Init.ClockPrescaler)
 8002806:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800280a:	d012      	beq.n	8002832 <ADC_ConfigureBoostMode+0xfa>
 800280c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002810:	d1cc      	bne.n	80027ac <ADC_ConfigureBoostMode+0x74>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002812:	f7ff fd55 	bl	80022c0 <HAL_GetREVID>
 8002816:	f241 0303 	movw	r3, #4099	; 0x1003
 800281a:	4298      	cmp	r0, r3
 800281c:	d80b      	bhi.n	8002836 <ADC_ConfigureBoostMode+0xfe>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	6893      	ldr	r3, [r2, #8]
 8002822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	e7ce      	b.n	80027c8 <ADC_ConfigureBoostMode+0x90>
        freq /= 16UL;
 800282a:	0905      	lsrs	r5, r0, #4
        break;
 800282c:	e7be      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
        freq /= 64UL;
 800282e:	0985      	lsrs	r5, r0, #6
        break;
 8002830:	e7bc      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
        freq /= 128UL;
 8002832:	09c5      	lsrs	r5, r0, #7
        break;
 8002834:	e7ba      	b.n	80027ac <ADC_ConfigureBoostMode+0x74>
    if (freq <= 6250000UL)
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <ADC_ConfigureBoostMode+0x160>)
 8002838:	429d      	cmp	r5, r3
 800283a:	d90a      	bls.n	8002852 <ADC_ConfigureBoostMode+0x11a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	6893      	ldr	r3, [r2, #8]
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6093      	str	r3, [r2, #8]
 800284a:	e7bd      	b.n	80027c8 <ADC_ConfigureBoostMode+0x90>
    if (freq <= 6250000UL)
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <ADC_ConfigureBoostMode+0x164>)
 800284e:	429d      	cmp	r5, r3
 8002850:	d805      	bhi.n	800285e <ADC_ConfigureBoostMode+0x126>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002852:	6822      	ldr	r2, [r4, #0]
 8002854:	6893      	ldr	r3, [r2, #8]
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e7b4      	b.n	80027c8 <ADC_ConfigureBoostMode+0x90>
    else if (freq <= 12500000UL)
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <ADC_ConfigureBoostMode+0x168>)
 8002860:	429d      	cmp	r5, r3
 8002862:	d9eb      	bls.n	800283c <ADC_ConfigureBoostMode+0x104>
    else if (freq <= 25000000UL)
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <ADC_ConfigureBoostMode+0x16c>)
 8002866:	429d      	cmp	r5, r3
 8002868:	d807      	bhi.n	800287a <ADC_ConfigureBoostMode+0x142>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	6893      	ldr	r3, [r2, #8]
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	e7a6      	b.n	80027c8 <ADC_ConfigureBoostMode+0x90>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	6893      	ldr	r3, [r2, #8]
 800287e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002882:	6093      	str	r3, [r2, #8]
}
 8002884:	e7a0      	b.n	80027c8 <ADC_ConfigureBoostMode+0x90>
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	58026300 	.word	0x58026300
 8002890:	40022300 	.word	0x40022300
 8002894:	01312d00 	.word	0x01312d00
 8002898:	bebc21ff 	.word	0xbebc21ff
 800289c:	00bebc21 	.word	0x00bebc21
 80028a0:	017d7841 	.word	0x017d7841
 80028a4:	02faf081 	.word	0x02faf081

080028a8 <HAL_ADC_Init>:
{
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f000 80f8 	beq.w	8002aa6 <HAL_ADC_Init+0x1fe>
 80028b6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d042      	beq.n	8002944 <HAL_ADC_Init+0x9c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028be:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80028c6:	d003      	beq.n	80028d0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_ADC_Init+0x204>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80028d8:	d116      	bne.n	8002908 <HAL_ADC_Init+0x60>
  MODIFY_REG(ADCx->CR,
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	4a74      	ldr	r2, [pc, #464]	; (8002ab0 <HAL_ADC_Init+0x208>)
 80028de:	400a      	ands	r2, r1
 80028e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028e4:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_ADC_Init+0x20c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <HAL_ADC_Init+0x210>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	3301      	adds	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80028f8:	9b01      	ldr	r3, [sp, #4]
 80028fa:	b12b      	cbz	r3, 8002908 <HAL_ADC_Init+0x60>
      wait_loop_index--;
 80028fc:	9b01      	ldr	r3, [sp, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <HAL_ADC_Init+0x54>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002908:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800290a:	688b      	ldr	r3, [r1, #8]
 800290c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002910:	d11f      	bne.n	8002952 <HAL_ADC_Init+0xaa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002922:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002924:	688b      	ldr	r3, [r1, #8]
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002926:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002928:	f002 0210 	and.w	r2, r2, #16
 800292c:	f003 0304 	and.w	r3, r3, #4
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002930:	4313      	orrs	r3, r2
 8002932:	d010      	beq.n	8002956 <HAL_ADC_Init+0xae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800293c:	2501      	movs	r5, #1
}
 800293e:	4628      	mov	r0, r5
 8002940:	b002      	add	sp, #8
 8002942:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8002944:	f7fd ff4e 	bl	80007e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002948:	2300      	movs	r3, #0
 800294a:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800294c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002950:	e7b5      	b.n	80028be <HAL_ADC_Init+0x16>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2500      	movs	r5, #0
 8002954:	e7e6      	b.n	8002924 <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002958:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002962:	688b      	ldr	r3, [r1, #8]
 8002964:	f013 0f01 	tst.w	r3, #1
 8002968:	d112      	bne.n	8002990 <HAL_ADC_Init+0xe8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296a:	4b54      	ldr	r3, [pc, #336]	; (8002abc <HAL_ADC_Init+0x214>)
 800296c:	4299      	cmp	r1, r3
 800296e:	d065      	beq.n	8002a3c <HAL_ADC_Init+0x194>
 8002970:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002974:	4299      	cmp	r1, r3
 8002976:	d061      	beq.n	8002a3c <HAL_ADC_Init+0x194>
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_ADC_Init+0x218>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f013 0f01 	tst.w	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002982:	4a50      	ldr	r2, [pc, #320]	; (8002ac4 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002984:	6893      	ldr	r3, [r2, #8]
 8002986:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800298a:	6861      	ldr	r1, [r4, #4]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002990:	f7ff fc96 	bl	80022c0 <HAL_GetREVID>
 8002994:	f241 0303 	movw	r3, #4099	; 0x1003
 8002998:	4298      	cmp	r0, r3
 800299a:	d902      	bls.n	80029a2 <HAL_ADC_Init+0xfa>
 800299c:	68a3      	ldr	r3, [r4, #8]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d057      	beq.n	8002a52 <HAL_ADC_Init+0x1aa>
                  hadc->Init.Overrun                                                    |
 80029a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029a4:	68a2      	ldr	r2, [r4, #8]
 80029a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029a8:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80029aa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029ae:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b4:	7f22      	ldrb	r2, [r4, #28]
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	d055      	beq.n	8002a66 <HAL_ADC_Init+0x1be>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029bc:	b122      	cbz	r2, 80029c8 <HAL_ADC_Init+0x120>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029be:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80029c4:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c6:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029c8:	6821      	ldr	r1, [r4, #0]
 80029ca:	68c8      	ldr	r0, [r1, #12]
 80029cc:	4a3e      	ldr	r2, [pc, #248]	; (8002ac8 <HAL_ADC_Init+0x220>)
 80029ce:	4002      	ands	r2, r0
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d6:	688b      	ldr	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029d8:	688a      	ldr	r2, [r1, #8]
 80029da:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029de:	f003 0304 	and.w	r3, r3, #4
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	d11b      	bne.n	8002a1e <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029e6:	68c8      	ldr	r0, [r1, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e8:	7d22      	ldrb	r2, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_ADC_Init+0x224>)
 80029ec:	4003      	ands	r3, r0
 80029ee:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 80029f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80029f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d037      	beq.n	8002a70 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	6913      	ldr	r3, [r2, #16]
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	6913      	ldr	r3, [r2, #16]
 8002a0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fe8d 	bl	8002738 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d037      	beq.n	8002a94 <HAL_ADC_Init+0x1ec>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a30:	f023 0303 	bic.w	r3, r3, #3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6563      	str	r3, [r4, #84]	; 0x54
 8002a3a:	e780      	b.n	800293e <HAL_ADC_Init+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_ADC_Init+0x214>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a44:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f013 0f01 	tst.w	r3, #1
 8002a4c:	d1a0      	bne.n	8002990 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_ADC_Init+0x228>)
 8002a50:	e798      	b.n	8002984 <HAL_ADC_Init+0xdc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a52:	7d62      	ldrb	r2, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a54:	7f23      	ldrb	r3, [r4, #28]
 8002a56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a58:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002a5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f043 031c 	orr.w	r3, r3, #28
 8002a64:	e7a6      	b.n	80029b4 <HAL_ADC_Init+0x10c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a66:	6a22      	ldr	r2, [r4, #32]
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002a6e:	e7a4      	b.n	80029ba <HAL_ADC_Init+0x112>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a70:	6821      	ldr	r1, [r4, #0]
 8002a72:	6908      	ldr	r0, [r1, #16]
 8002a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a7a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002a7c:	4333      	orrs	r3, r6
 8002a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_ADC_Init+0x22c>)
 8002a88:	4002      	ands	r2, r0
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	610b      	str	r3, [r1, #16]
 8002a92:	e7ba      	b.n	8002a0a <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a94:	6821      	ldr	r1, [r4, #0]
 8002a96:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002a98:	69a3      	ldr	r3, [r4, #24]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f022 020f 	bic.w	r2, r2, #15
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	630b      	str	r3, [r1, #48]	; 0x30
 8002aa4:	e7c3      	b.n	8002a2e <HAL_ADC_Init+0x186>
    return HAL_ERROR;
 8002aa6:	2501      	movs	r5, #1
 8002aa8:	e749      	b.n	800293e <HAL_ADC_Init+0x96>
 8002aaa:	bf00      	nop
 8002aac:	5fffffc0 	.word	0x5fffffc0
 8002ab0:	6fffffc0 	.word	0x6fffffc0
 8002ab4:	24000000 	.word	0x24000000
 8002ab8:	053e2d63 	.word	0x053e2d63
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	58026000 	.word	0x58026000
 8002ac4:	58026300 	.word	0x58026300
 8002ac8:	fff0c003 	.word	0xfff0c003
 8002acc:	ffffbffc 	.word	0xffffbffc
 8002ad0:	40022300 	.word	0x40022300
 8002ad4:	fc00f81e 	.word	0xfc00f81e

08002ad8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002adc:	2a01      	cmp	r2, #1
 8002ade:	d06b      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
{
 8002ae0:	b410      	push	{r4}
 8002ae2:	b09b      	sub	sp, #108	; 0x6c
 8002ae4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002aec:	2200      	movs	r2, #0
 8002aee:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002af0:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002af2:	6800      	ldr	r0, [r0, #0]
 8002af4:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002af6:	4290      	cmp	r0, r2
 8002af8:	d060      	beq.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0xe4>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e068      	b.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0x106>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b0c:	680a      	ldr	r2, [r1, #0]
 8002b0e:	b352      	cbz	r2, 8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b10:	4836      	ldr	r0, [pc, #216]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002b12:	6882      	ldr	r2, [r0, #8]
 8002b14:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b18:	684c      	ldr	r4, [r1, #4]
 8002b1a:	4322      	orrs	r2, r4
 8002b1c:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8002b24:	4282      	cmp	r2, r0
 8002b26:	d013      	beq.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002b28:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	d00f      	beq.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002b30:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002b32:	6892      	ldr	r2, [r2, #8]
 8002b34:	f012 0f01 	tst.w	r2, #1
 8002b38:	d13a      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b3a:	482c      	ldr	r0, [pc, #176]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002b3c:	6884      	ldr	r4, [r0, #8]
 8002b3e:	680a      	ldr	r2, [r1, #0]
 8002b40:	6889      	ldr	r1, [r1, #8]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	492b      	ldr	r1, [pc, #172]	; (8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002b46:	4021      	ands	r1, r4
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	e043      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002b52:	6890      	ldr	r0, [r2, #8]
 8002b54:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002b58:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b5a:	4302      	orrs	r2, r0
 8002b5c:	f012 0f01 	tst.w	r2, #1
 8002b60:	d0eb      	beq.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x62>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b62:	2000      	movs	r0, #0
 8002b64:	e038      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b66:	4921      	ldr	r1, [pc, #132]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002b68:	688a      	ldr	r2, [r1, #8]
 8002b6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b6e:	608a      	str	r2, [r1, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f5a1 7140 	sub.w	r1, r1, #768	; 0x300
 8002b76:	428a      	cmp	r2, r1
 8002b78:	d00f      	beq.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002b7a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002b7e:	428a      	cmp	r2, r1
 8002b80:	d00b      	beq.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	f012 0f01 	tst.w	r2, #1
 8002b8a:	d113      	bne.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b8c:	4917      	ldr	r1, [pc, #92]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002b8e:	6888      	ldr	r0, [r1, #8]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002b92:	4002      	ands	r2, r0
 8002b94:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b96:	2000      	movs	r0, #0
 8002b98:	e01e      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002b9c:	6891      	ldr	r1, [r2, #8]
 8002b9e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002ba2:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	f012 0f01 	tst.w	r2, #1
 8002baa:	d0ef      	beq.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bac:	2000      	movs	r0, #0
 8002bae:	e013      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	e011      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e00f      	b.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  __HAL_LOCK(hadc);
 8002bb8:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002bba:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002bbe:	6890      	ldr	r0, [r2, #8]
 8002bc0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002bc4:	6892      	ldr	r2, [r2, #8]
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bc6:	4302      	orrs	r2, r0
 8002bc8:	f012 0f04 	tst.w	r2, #4
 8002bcc:	d09e      	beq.n	8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bd6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002bde:	b01b      	add	sp, #108	; 0x6c
 8002be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40022300 	.word	0x40022300
 8002bf0:	58026000 	.word	0x58026000
 8002bf4:	fffff0e0 	.word	0xfffff0e0
 8002bf8:	40022100 	.word	0x40022100

08002bfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002bfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	0200      	lsls	r0, r0, #8
 8002c02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002c14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00
 8002c1c:	05fa0000 	.word	0x05fa0000

08002c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_NVIC_SetPriority+0x5c>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2a:	f1c3 0c07 	rsb	ip, r3, #7
 8002c2e:	f1bc 0f04 	cmp.w	ip, #4
 8002c32:	bf28      	it	cs
 8002c34:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c38:	f103 0e04 	add.w	lr, r3, #4
 8002c3c:	f1be 0f06 	cmp.w	lr, #6
 8002c40:	bf8c      	ite	hi
 8002c42:	3b03      	subhi	r3, #3
 8002c44:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c46:	f04f 3eff 	mov.w	lr, #4294967295
 8002c4a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002c4e:	ea21 010c 	bic.w	r1, r1, ip
 8002c52:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c54:	fa0e f303 	lsl.w	r3, lr, r3
 8002c58:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	db05      	blt.n	8002c6e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	0109      	lsls	r1, r1, #4
 8002c64:	b2c9      	uxtb	r1, r1
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_NVIC_SetPriority+0x60>)
 8002c68:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c6a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	f000 000f 	and.w	r0, r0, #15
 8002c72:	0109      	lsls	r1, r1, #4
 8002c74:	b2c9      	uxtb	r1, r1
 8002c76:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_NVIC_SetPriority+0x64>)
 8002c78:	5419      	strb	r1, [r3, r0]
 8002c7a:	e7f6      	b.n	8002c6a <HAL_NVIC_SetPriority+0x4a>
 8002c7c:	e000ed00 	.word	0xe000ed00
 8002c80:	e000e400 	.word	0xe000e400
 8002c84:	e000ed14 	.word	0xe000ed14

08002c88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	db08      	blt.n	8002c9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8c:	0942      	lsrs	r2, r0, #5
 8002c8e:	f000 001f 	and.w	r0, r0, #31
 8002c92:	2301      	movs	r3, #1
 8002c94:	fa03 f000 	lsl.w	r0, r3, r0
 8002c98:	4b01      	ldr	r3, [pc, #4]	; (8002ca0 <HAL_NVIC_EnableIRQ+0x18>)
 8002c9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ca8:	6805      	ldr	r5, [r0, #0]
 8002caa:	4c91      	ldr	r4, [pc, #580]	; (8002ef0 <DMA_SetConfig+0x24c>)
 8002cac:	4f91      	ldr	r7, [pc, #580]	; (8002ef4 <DMA_SetConfig+0x250>)
 8002cae:	42bd      	cmp	r5, r7
 8002cb0:	bf18      	it	ne
 8002cb2:	42a5      	cmpne	r5, r4
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2401      	moveq	r4, #1
 8002cb8:	2400      	movne	r4, #0
 8002cba:	3718      	adds	r7, #24
 8002cbc:	42bd      	cmp	r5, r7
 8002cbe:	bf08      	it	eq
 8002cc0:	f044 0401 	orreq.w	r4, r4, #1
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	42bd      	cmp	r5, r7
 8002cc8:	bf08      	it	eq
 8002cca:	f044 0401 	orreq.w	r4, r4, #1
 8002cce:	3718      	adds	r7, #24
 8002cd0:	42bd      	cmp	r5, r7
 8002cd2:	bf08      	it	eq
 8002cd4:	f044 0401 	orreq.w	r4, r4, #1
 8002cd8:	3718      	adds	r7, #24
 8002cda:	42bd      	cmp	r5, r7
 8002cdc:	bf08      	it	eq
 8002cde:	f044 0401 	orreq.w	r4, r4, #1
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	42bd      	cmp	r5, r7
 8002ce6:	bf08      	it	eq
 8002ce8:	f044 0401 	orreq.w	r4, r4, #1
 8002cec:	3718      	adds	r7, #24
 8002cee:	42bd      	cmp	r5, r7
 8002cf0:	bf08      	it	eq
 8002cf2:	f044 0401 	orreq.w	r4, r4, #1
 8002cf6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002cfa:	42bd      	cmp	r5, r7
 8002cfc:	bf08      	it	eq
 8002cfe:	f044 0401 	orreq.w	r4, r4, #1
 8002d02:	3718      	adds	r7, #24
 8002d04:	42bd      	cmp	r5, r7
 8002d06:	bf08      	it	eq
 8002d08:	f044 0401 	orreq.w	r4, r4, #1
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	42bd      	cmp	r5, r7
 8002d10:	bf08      	it	eq
 8002d12:	f044 0401 	orreq.w	r4, r4, #1
 8002d16:	3718      	adds	r7, #24
 8002d18:	42bd      	cmp	r5, r7
 8002d1a:	bf08      	it	eq
 8002d1c:	f044 0401 	orreq.w	r4, r4, #1
 8002d20:	3718      	adds	r7, #24
 8002d22:	42bd      	cmp	r5, r7
 8002d24:	bf08      	it	eq
 8002d26:	f044 0401 	orreq.w	r4, r4, #1
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	42bd      	cmp	r5, r7
 8002d2e:	bf08      	it	eq
 8002d30:	f044 0401 	orreq.w	r4, r4, #1
 8002d34:	3718      	adds	r7, #24
 8002d36:	42bd      	cmp	r5, r7
 8002d38:	bf08      	it	eq
 8002d3a:	f044 0401 	orreq.w	r4, r4, #1
 8002d3e:	3718      	adds	r7, #24
 8002d40:	42bd      	cmp	r5, r7
 8002d42:	bf08      	it	eq
 8002d44:	f044 0401 	orreq.w	r4, r4, #1
 8002d48:	4f6b      	ldr	r7, [pc, #428]	; (8002ef8 <DMA_SetConfig+0x254>)
 8002d4a:	42bd      	cmp	r5, r7
 8002d4c:	bf08      	it	eq
 8002d4e:	f044 0401 	orreq.w	r4, r4, #1
 8002d52:	3714      	adds	r7, #20
 8002d54:	42bd      	cmp	r5, r7
 8002d56:	bf08      	it	eq
 8002d58:	f044 0401 	orreq.w	r4, r4, #1
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	42bd      	cmp	r5, r7
 8002d60:	bf08      	it	eq
 8002d62:	f044 0401 	orreq.w	r4, r4, #1
 8002d66:	3714      	adds	r7, #20
 8002d68:	42bd      	cmp	r5, r7
 8002d6a:	bf08      	it	eq
 8002d6c:	f044 0401 	orreq.w	r4, r4, #1
 8002d70:	3714      	adds	r7, #20
 8002d72:	42bd      	cmp	r5, r7
 8002d74:	bf08      	it	eq
 8002d76:	f044 0401 	orreq.w	r4, r4, #1
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	42bd      	cmp	r5, r7
 8002d7e:	bf08      	it	eq
 8002d80:	f044 0401 	orreq.w	r4, r4, #1
 8002d84:	3714      	adds	r7, #20
 8002d86:	42bd      	cmp	r5, r7
 8002d88:	bf08      	it	eq
 8002d8a:	f044 0401 	orreq.w	r4, r4, #1
 8002d8e:	b914      	cbnz	r4, 8002d96 <DMA_SetConfig+0xf2>
 8002d90:	4c5a      	ldr	r4, [pc, #360]	; (8002efc <DMA_SetConfig+0x258>)
 8002d92:	42a5      	cmp	r5, r4
 8002d94:	d107      	bne.n	8002da6 <DMA_SetConfig+0x102>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d96:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002d98:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8002d9a:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d9c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8002d9e:	b114      	cbz	r4, 8002da6 <DMA_SetConfig+0x102>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da0:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8002da2:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8002da4:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da6:	6805      	ldr	r5, [r0, #0]
 8002da8:	4c51      	ldr	r4, [pc, #324]	; (8002ef0 <DMA_SetConfig+0x24c>)
 8002daa:	4f52      	ldr	r7, [pc, #328]	; (8002ef4 <DMA_SetConfig+0x250>)
 8002dac:	42bd      	cmp	r5, r7
 8002dae:	bf18      	it	ne
 8002db0:	42a5      	cmpne	r5, r4
 8002db2:	bf0c      	ite	eq
 8002db4:	2401      	moveq	r4, #1
 8002db6:	2400      	movne	r4, #0
 8002db8:	3718      	adds	r7, #24
 8002dba:	42bd      	cmp	r5, r7
 8002dbc:	bf08      	it	eq
 8002dbe:	f044 0401 	orreq.w	r4, r4, #1
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	42bd      	cmp	r5, r7
 8002dc6:	bf08      	it	eq
 8002dc8:	f044 0401 	orreq.w	r4, r4, #1
 8002dcc:	3718      	adds	r7, #24
 8002dce:	42bd      	cmp	r5, r7
 8002dd0:	bf08      	it	eq
 8002dd2:	f044 0401 	orreq.w	r4, r4, #1
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	42bd      	cmp	r5, r7
 8002dda:	bf08      	it	eq
 8002ddc:	f044 0401 	orreq.w	r4, r4, #1
 8002de0:	3718      	adds	r7, #24
 8002de2:	42bd      	cmp	r5, r7
 8002de4:	bf08      	it	eq
 8002de6:	f044 0401 	orreq.w	r4, r4, #1
 8002dea:	3718      	adds	r7, #24
 8002dec:	42bd      	cmp	r5, r7
 8002dee:	bf08      	it	eq
 8002df0:	f044 0401 	orreq.w	r4, r4, #1
 8002df4:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002df8:	42bd      	cmp	r5, r7
 8002dfa:	bf08      	it	eq
 8002dfc:	f044 0401 	orreq.w	r4, r4, #1
 8002e00:	3718      	adds	r7, #24
 8002e02:	42bd      	cmp	r5, r7
 8002e04:	bf08      	it	eq
 8002e06:	f044 0401 	orreq.w	r4, r4, #1
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	42bd      	cmp	r5, r7
 8002e0e:	bf08      	it	eq
 8002e10:	f044 0401 	orreq.w	r4, r4, #1
 8002e14:	3718      	adds	r7, #24
 8002e16:	42bd      	cmp	r5, r7
 8002e18:	bf08      	it	eq
 8002e1a:	f044 0401 	orreq.w	r4, r4, #1
 8002e1e:	3718      	adds	r7, #24
 8002e20:	42bd      	cmp	r5, r7
 8002e22:	bf08      	it	eq
 8002e24:	f044 0401 	orreq.w	r4, r4, #1
 8002e28:	3718      	adds	r7, #24
 8002e2a:	42bd      	cmp	r5, r7
 8002e2c:	bf08      	it	eq
 8002e2e:	f044 0401 	orreq.w	r4, r4, #1
 8002e32:	3718      	adds	r7, #24
 8002e34:	42bd      	cmp	r5, r7
 8002e36:	bf08      	it	eq
 8002e38:	f044 0401 	orreq.w	r4, r4, #1
 8002e3c:	b914      	cbnz	r4, 8002e44 <DMA_SetConfig+0x1a0>
 8002e3e:	4c30      	ldr	r4, [pc, #192]	; (8002f00 <DMA_SetConfig+0x25c>)
 8002e40:	42a5      	cmp	r5, r4
 8002e42:	d115      	bne.n	8002e70 <DMA_SetConfig+0x1cc>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e44:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002e46:	f004 051f 	and.w	r5, r4, #31
 8002e4a:	243f      	movs	r4, #63	; 0x3f
 8002e4c:	40ac      	lsls	r4, r5
 8002e4e:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e50:	6805      	ldr	r5, [r0, #0]
 8002e52:	682c      	ldr	r4, [r5, #0]
 8002e54:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002e58:	602c      	str	r4, [r5, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e5a:	6804      	ldr	r4, [r0, #0]
 8002e5c:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5e:	6883      	ldr	r3, [r0, #8]
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d03a      	beq.n	8002eda <DMA_SetConfig+0x236>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	6099      	str	r1, [r3, #8]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002e6e:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e70:	4c21      	ldr	r4, [pc, #132]	; (8002ef8 <DMA_SetConfig+0x254>)
 8002e72:	4f24      	ldr	r7, [pc, #144]	; (8002f04 <DMA_SetConfig+0x260>)
 8002e74:	42bd      	cmp	r5, r7
 8002e76:	bf18      	it	ne
 8002e78:	42a5      	cmpne	r5, r4
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2401      	moveq	r4, #1
 8002e7e:	2400      	movne	r4, #0
 8002e80:	3714      	adds	r7, #20
 8002e82:	42bd      	cmp	r5, r7
 8002e84:	bf08      	it	eq
 8002e86:	f044 0401 	orreq.w	r4, r4, #1
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	42bd      	cmp	r5, r7
 8002e8e:	bf08      	it	eq
 8002e90:	f044 0401 	orreq.w	r4, r4, #1
 8002e94:	3714      	adds	r7, #20
 8002e96:	42bd      	cmp	r5, r7
 8002e98:	bf08      	it	eq
 8002e9a:	f044 0401 	orreq.w	r4, r4, #1
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	42bd      	cmp	r5, r7
 8002ea2:	bf08      	it	eq
 8002ea4:	f044 0401 	orreq.w	r4, r4, #1
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	42bd      	cmp	r5, r7
 8002eac:	bf08      	it	eq
 8002eae:	f044 0401 	orreq.w	r4, r4, #1
 8002eb2:	b914      	cbnz	r4, 8002eba <DMA_SetConfig+0x216>
 8002eb4:	4c11      	ldr	r4, [pc, #68]	; (8002efc <DMA_SetConfig+0x258>)
 8002eb6:	42a5      	cmp	r5, r4
 8002eb8:	d1d8      	bne.n	8002e6c <DMA_SetConfig+0x1c8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002eba:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002ebc:	f004 051f 	and.w	r5, r4, #31
 8002ec0:	2401      	movs	r4, #1
 8002ec2:	40ac      	lsls	r4, r5
 8002ec4:	6074      	str	r4, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002ec6:	6804      	ldr	r4, [r0, #0]
 8002ec8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eca:	6883      	ldr	r3, [r0, #8]
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d009      	beq.n	8002ee4 <DMA_SetConfig+0x240>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002ed4:	6803      	ldr	r3, [r0, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
}
 8002ed8:	e7c8      	b.n	8002e6c <DMA_SetConfig+0x1c8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	60d9      	str	r1, [r3, #12]
 8002ee2:	e7c3      	b.n	8002e6c <DMA_SetConfig+0x1c8>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	60d9      	str	r1, [r3, #12]
 8002eec:	e7be      	b.n	8002e6c <DMA_SetConfig+0x1c8>
 8002eee:	bf00      	nop
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	58025494 	.word	0x58025494
 8002f00:	400204b8 	.word	0x400204b8
 8002f04:	5802541c 	.word	0x5802541c

08002f08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f08:	6802      	ldr	r2, [r0, #0]
 8002f0a:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <DMA_CalcBaseAndBitshift+0xd4>)
 8002f0c:	4934      	ldr	r1, [pc, #208]	; (8002fe0 <DMA_CalcBaseAndBitshift+0xd8>)
 8002f0e:	428a      	cmp	r2, r1
 8002f10:	bf18      	it	ne
 8002f12:	429a      	cmpne	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	3118      	adds	r1, #24
 8002f1c:	428a      	cmp	r2, r1
 8002f1e:	bf08      	it	eq
 8002f20:	f043 0301 	orreq.w	r3, r3, #1
 8002f24:	3118      	adds	r1, #24
 8002f26:	428a      	cmp	r2, r1
 8002f28:	bf08      	it	eq
 8002f2a:	f043 0301 	orreq.w	r3, r3, #1
 8002f2e:	3118      	adds	r1, #24
 8002f30:	428a      	cmp	r2, r1
 8002f32:	bf08      	it	eq
 8002f34:	f043 0301 	orreq.w	r3, r3, #1
 8002f38:	3118      	adds	r1, #24
 8002f3a:	428a      	cmp	r2, r1
 8002f3c:	bf08      	it	eq
 8002f3e:	f043 0301 	orreq.w	r3, r3, #1
 8002f42:	3118      	adds	r1, #24
 8002f44:	428a      	cmp	r2, r1
 8002f46:	bf08      	it	eq
 8002f48:	f043 0301 	orreq.w	r3, r3, #1
 8002f4c:	3118      	adds	r1, #24
 8002f4e:	428a      	cmp	r2, r1
 8002f50:	bf08      	it	eq
 8002f52:	f043 0301 	orreq.w	r3, r3, #1
 8002f56:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002f5a:	428a      	cmp	r2, r1
 8002f5c:	bf08      	it	eq
 8002f5e:	f043 0301 	orreq.w	r3, r3, #1
 8002f62:	3118      	adds	r1, #24
 8002f64:	428a      	cmp	r2, r1
 8002f66:	bf08      	it	eq
 8002f68:	f043 0301 	orreq.w	r3, r3, #1
 8002f6c:	3118      	adds	r1, #24
 8002f6e:	428a      	cmp	r2, r1
 8002f70:	bf08      	it	eq
 8002f72:	f043 0301 	orreq.w	r3, r3, #1
 8002f76:	3118      	adds	r1, #24
 8002f78:	428a      	cmp	r2, r1
 8002f7a:	bf08      	it	eq
 8002f7c:	f043 0301 	orreq.w	r3, r3, #1
 8002f80:	3118      	adds	r1, #24
 8002f82:	428a      	cmp	r2, r1
 8002f84:	bf08      	it	eq
 8002f86:	f043 0301 	orreq.w	r3, r3, #1
 8002f8a:	3118      	adds	r1, #24
 8002f8c:	428a      	cmp	r2, r1
 8002f8e:	bf08      	it	eq
 8002f90:	f043 0301 	orreq.w	r3, r3, #1
 8002f94:	3118      	adds	r1, #24
 8002f96:	428a      	cmp	r2, r1
 8002f98:	bf08      	it	eq
 8002f9a:	f043 0301 	orreq.w	r3, r3, #1
 8002f9e:	b913      	cbnz	r3, 8002fa6 <DMA_CalcBaseAndBitshift+0x9e>
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <DMA_CalcBaseAndBitshift+0xdc>)
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d115      	bne.n	8002fd2 <DMA_CalcBaseAndBitshift+0xca>
{
 8002fa6:	b410      	push	{r4}
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fa8:	b2d1      	uxtb	r1, r2
 8002faa:	3910      	subs	r1, #16
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <DMA_CalcBaseAndBitshift+0xe0>)
 8002fae:	fba3 4301 	umull	r4, r3, r3, r1

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fb2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <DMA_CalcBaseAndBitshift+0xe4>)
 8002fb8:	5ce3      	ldrb	r3, [r4, r3]
 8002fba:	65c3      	str	r3, [r0, #92]	; 0x5c

    if (stream_number > 3U)
 8002fbc:	295f      	cmp	r1, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <DMA_CalcBaseAndBitshift+0xe8>)
 8002fc0:	ea03 0302 	and.w	r3, r3, r2
 8002fc4:	bf88      	it	hi
 8002fc6:	3304      	addhi	r3, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002fc8:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8002fca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fd6:	6582      	str	r2, [r0, #88]	; 0x58
}
 8002fd8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002fda:	4770      	bx	lr
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	400204b8 	.word	0x400204b8
 8002fe8:	aaaaaaab 	.word	0xaaaaaaab
 8002fec:	08011210 	.word	0x08011210
 8002ff0:	fffffc00 	.word	0xfffffc00

08002ff4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ff4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ff6:	4a28      	ldr	r2, [pc, #160]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002ff8:	4928      	ldr	r1, [pc, #160]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002ffa:	428b      	cmp	r3, r1
 8002ffc:	bf18      	it	ne
 8002ffe:	4293      	cmpne	r3, r2
 8003000:	bf0c      	ite	eq
 8003002:	2201      	moveq	r2, #1
 8003004:	2200      	movne	r2, #0
 8003006:	3114      	adds	r1, #20
 8003008:	428b      	cmp	r3, r1
 800300a:	bf08      	it	eq
 800300c:	f042 0201 	orreq.w	r2, r2, #1
 8003010:	3114      	adds	r1, #20
 8003012:	428b      	cmp	r3, r1
 8003014:	bf08      	it	eq
 8003016:	f042 0201 	orreq.w	r2, r2, #1
 800301a:	3114      	adds	r1, #20
 800301c:	428b      	cmp	r3, r1
 800301e:	bf08      	it	eq
 8003020:	f042 0201 	orreq.w	r2, r2, #1
 8003024:	3114      	adds	r1, #20
 8003026:	428b      	cmp	r3, r1
 8003028:	bf08      	it	eq
 800302a:	f042 0201 	orreq.w	r2, r2, #1
 800302e:	3114      	adds	r1, #20
 8003030:	428b      	cmp	r3, r1
 8003032:	bf08      	it	eq
 8003034:	f042 0201 	orreq.w	r2, r2, #1
 8003038:	b912      	cbnz	r2, 8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d112      	bne.n	8003066 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3b08      	subs	r3, #8
 8003044:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800304c:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003054:	4a15      	ldr	r2, [pc, #84]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8003056:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003058:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800305c:	2201      	movs	r2, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	6683      	str	r3, [r0, #104]	; 0x68
 8003064:	4770      	bx	lr
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003066:	b2da      	uxtb	r2, r3
 8003068:	3a10      	subs	r2, #16
 800306a:	4911      	ldr	r1, [pc, #68]	; (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800306c:	fba1 1202 	umull	r1, r2, r1, r2
 8003070:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003072:	4910      	ldr	r1, [pc, #64]	; (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8003074:	4419      	add	r1, r3
 8003076:	29a8      	cmp	r1, #168	; 0xa8
 8003078:	d90c      	bls.n	8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 8003084:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	2301      	movs	r3, #1
 800308c:	fa03 f202 	lsl.w	r2, r3, r2
 8003090:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8003092:	4770      	bx	lr
      stream_number += 8U;
 8003094:	3208      	adds	r2, #8
 8003096:	e7f0      	b.n	800307a <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
 8003098:	58025408 	.word	0x58025408
 800309c:	5802541c 	.word	0x5802541c
 80030a0:	58025494 	.word	0x58025494
 80030a4:	cccccccd 	.word	0xcccccccd
 80030a8:	16009600 	.word	0x16009600
 80030ac:	58025880 	.word	0x58025880
 80030b0:	aaaaaaab 	.word	0xaaaaaaab
 80030b4:	bffdfbf0 	.word	0xbffdfbf0
 80030b8:	10008200 	.word	0x10008200
 80030bc:	40020880 	.word	0x40020880

080030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030c0:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030c4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80030c8:	2907      	cmp	r1, #7
 80030ca:	d83a      	bhi.n	8003142 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x82>
{
 80030cc:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030ce:	6802      	ldr	r2, [r0, #0]
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80030d2:	4c1d      	ldr	r4, [pc, #116]	; (8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80030d4:	42a2      	cmp	r2, r4
 80030d6:	bf18      	it	ne
 80030d8:	429a      	cmpne	r2, r3
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	3414      	adds	r4, #20
 80030e2:	42a2      	cmp	r2, r4
 80030e4:	bf08      	it	eq
 80030e6:	f043 0301 	orreq.w	r3, r3, #1
 80030ea:	3414      	adds	r4, #20
 80030ec:	42a2      	cmp	r2, r4
 80030ee:	bf08      	it	eq
 80030f0:	f043 0301 	orreq.w	r3, r3, #1
 80030f4:	3414      	adds	r4, #20
 80030f6:	42a2      	cmp	r2, r4
 80030f8:	bf08      	it	eq
 80030fa:	f043 0301 	orreq.w	r3, r3, #1
 80030fe:	3414      	adds	r4, #20
 8003100:	42a2      	cmp	r2, r4
 8003102:	bf08      	it	eq
 8003104:	f043 0301 	orreq.w	r3, r3, #1
 8003108:	3414      	adds	r4, #20
 800310a:	42a2      	cmp	r2, r4
 800310c:	bf08      	it	eq
 800310e:	f043 0301 	orreq.w	r3, r3, #1
 8003112:	b913      	cbnz	r3, 800311a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5a>
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 8003116:	429a      	cmp	r2, r3
 8003118:	d10c      	bne.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
 800311c:	4463      	add	r3, ip
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 8003124:	6703      	str	r3, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003126:	2301      	movs	r3, #1
 8003128:	fa03 f101 	lsl.w	r1, r3, r1
 800312c:	6741      	str	r1, [r0, #116]	; 0x74
  }
}
 800312e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003132:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 8003136:	4463      	add	r3, ip
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x9c>)
 800313e:	6703      	str	r3, [r0, #112]	; 0x70
 8003140:	e7f1      	b.n	8003126 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x66>
 8003142:	4770      	bx	lr
 8003144:	58025408 	.word	0x58025408
 8003148:	5802541c 	.word	0x5802541c
 800314c:	58025494 	.word	0x58025494
 8003150:	1600963f 	.word	0x1600963f
 8003154:	58025940 	.word	0x58025940
 8003158:	1000823f 	.word	0x1000823f
 800315c:	40020940 	.word	0x40020940

08003160 <HAL_DMA_Init>:
{
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff f8a6 	bl	80022b4 <HAL_GetTick>
  if(hdma == NULL)
 8003168:	2c00      	cmp	r4, #0
 800316a:	f000 820c 	beq.w	8003586 <HAL_DMA_Init+0x426>
 800316e:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	4b64      	ldr	r3, [pc, #400]	; (8003304 <HAL_DMA_Init+0x1a4>)
 8003174:	4964      	ldr	r1, [pc, #400]	; (8003308 <HAL_DMA_Init+0x1a8>)
 8003176:	428a      	cmp	r2, r1
 8003178:	bf18      	it	ne
 800317a:	429a      	cmpne	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	3118      	adds	r1, #24
 8003184:	428a      	cmp	r2, r1
 8003186:	bf08      	it	eq
 8003188:	f043 0301 	orreq.w	r3, r3, #1
 800318c:	3118      	adds	r1, #24
 800318e:	428a      	cmp	r2, r1
 8003190:	bf08      	it	eq
 8003192:	f043 0301 	orreq.w	r3, r3, #1
 8003196:	3118      	adds	r1, #24
 8003198:	428a      	cmp	r2, r1
 800319a:	bf08      	it	eq
 800319c:	f043 0301 	orreq.w	r3, r3, #1
 80031a0:	3118      	adds	r1, #24
 80031a2:	428a      	cmp	r2, r1
 80031a4:	bf08      	it	eq
 80031a6:	f043 0301 	orreq.w	r3, r3, #1
 80031aa:	3118      	adds	r1, #24
 80031ac:	428a      	cmp	r2, r1
 80031ae:	bf08      	it	eq
 80031b0:	f043 0301 	orreq.w	r3, r3, #1
 80031b4:	3118      	adds	r1, #24
 80031b6:	428a      	cmp	r2, r1
 80031b8:	bf08      	it	eq
 80031ba:	f043 0301 	orreq.w	r3, r3, #1
 80031be:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80031c2:	428a      	cmp	r2, r1
 80031c4:	bf08      	it	eq
 80031c6:	f043 0301 	orreq.w	r3, r3, #1
 80031ca:	3118      	adds	r1, #24
 80031cc:	428a      	cmp	r2, r1
 80031ce:	bf08      	it	eq
 80031d0:	f043 0301 	orreq.w	r3, r3, #1
 80031d4:	3118      	adds	r1, #24
 80031d6:	428a      	cmp	r2, r1
 80031d8:	bf08      	it	eq
 80031da:	f043 0301 	orreq.w	r3, r3, #1
 80031de:	3118      	adds	r1, #24
 80031e0:	428a      	cmp	r2, r1
 80031e2:	bf08      	it	eq
 80031e4:	f043 0301 	orreq.w	r3, r3, #1
 80031e8:	3118      	adds	r1, #24
 80031ea:	428a      	cmp	r2, r1
 80031ec:	bf08      	it	eq
 80031ee:	f043 0301 	orreq.w	r3, r3, #1
 80031f2:	3118      	adds	r1, #24
 80031f4:	428a      	cmp	r2, r1
 80031f6:	bf08      	it	eq
 80031f8:	f043 0301 	orreq.w	r3, r3, #1
 80031fc:	3118      	adds	r1, #24
 80031fe:	428a      	cmp	r2, r1
 8003200:	bf08      	it	eq
 8003202:	f043 0301 	orreq.w	r3, r3, #1
 8003206:	b913      	cbnz	r3, 800320e <HAL_DMA_Init+0xae>
 8003208:	4b40      	ldr	r3, [pc, #256]	; (800330c <HAL_DMA_Init+0x1ac>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_DMA_Init+0xe4>
    hdma->State = HAL_DMA_STATE_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003214:	2300      	movs	r3, #0
 8003216:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f012 0f01 	tst.w	r2, #1
 800322a:	d07d      	beq.n	8003328 <HAL_DMA_Init+0x1c8>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322c:	f7ff f842 	bl	80022b4 <HAL_GetTick>
 8003230:	1b43      	subs	r3, r0, r5
 8003232:	2b05      	cmp	r3, #5
 8003234:	d9f5      	bls.n	8003222 <HAL_DMA_Init+0xc2>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003236:	2320      	movs	r3, #32
 8003238:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800323a:	2303      	movs	r3, #3
 800323c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8003240:	2001      	movs	r0, #1
}
 8003242:	bd38      	pop	{r3, r4, r5, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_DMA_Init+0x1b0>)
 8003246:	4933      	ldr	r1, [pc, #204]	; (8003314 <HAL_DMA_Init+0x1b4>)
 8003248:	428a      	cmp	r2, r1
 800324a:	bf18      	it	ne
 800324c:	429a      	cmpne	r2, r3
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	3114      	adds	r1, #20
 8003256:	428a      	cmp	r2, r1
 8003258:	bf08      	it	eq
 800325a:	f043 0301 	orreq.w	r3, r3, #1
 800325e:	3114      	adds	r1, #20
 8003260:	428a      	cmp	r2, r1
 8003262:	bf08      	it	eq
 8003264:	f043 0301 	orreq.w	r3, r3, #1
 8003268:	3114      	adds	r1, #20
 800326a:	428a      	cmp	r2, r1
 800326c:	bf08      	it	eq
 800326e:	f043 0301 	orreq.w	r3, r3, #1
 8003272:	3114      	adds	r1, #20
 8003274:	428a      	cmp	r2, r1
 8003276:	bf08      	it	eq
 8003278:	f043 0301 	orreq.w	r3, r3, #1
 800327c:	3114      	adds	r1, #20
 800327e:	428a      	cmp	r2, r1
 8003280:	bf08      	it	eq
 8003282:	f043 0301 	orreq.w	r3, r3, #1
 8003286:	b91b      	cbnz	r3, 8003290 <HAL_DMA_Init+0x130>
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_DMA_Init+0x1b8>)
 800328a:	429a      	cmp	r2, r3
 800328c:	f040 8165 	bne.w	800355a <HAL_DMA_Init+0x3fa>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003296:	2300      	movs	r3, #0
 8003298:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800329c:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800329e:	481f      	ldr	r0, [pc, #124]	; (800331c <HAL_DMA_Init+0x1bc>)
 80032a0:	4018      	ands	r0, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032a2:	68a3      	ldr	r3, [r4, #8]
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	f000 815f 	beq.w	8003568 <HAL_DMA_Init+0x408>
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	bf0c      	ite	eq
 80032ae:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 80032b2:	2100      	movne	r1, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032b4:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032be:	6965      	ldr	r5, [r4, #20]
 80032c0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032c4:	69a5      	ldr	r5, [r4, #24]
 80032c6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032ca:	69e5      	ldr	r5, [r4, #28]
 80032cc:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032d0:	6a25      	ldr	r5, [r4, #32]
 80032d2:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80032d6:	4303      	orrs	r3, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032d8:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032da:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_DMA_Init+0x1c0>)
 80032e0:	4413      	add	r3, r2
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_DMA_Init+0x1c4>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff fe0a 	bl	8002f08 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032f6:	f002 011f 	and.w	r1, r2, #31
 80032fa:	2201      	movs	r2, #1
 80032fc:	408a      	lsls	r2, r1
 80032fe:	6042      	str	r2, [r0, #4]
 8003300:	e05e      	b.n	80033c0 <HAL_DMA_Init+0x260>
 8003302:	bf00      	nop
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	400204b8 	.word	0x400204b8
 8003310:	58025408 	.word	0x58025408
 8003314:	5802541c 	.word	0x5802541c
 8003318:	58025494 	.word	0x58025494
 800331c:	fffe000f 	.word	0xfffe000f
 8003320:	a7fdabf8 	.word	0xa7fdabf8
 8003324:	cccccccd 	.word	0xcccccccd
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003328:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800332a:	489a      	ldr	r0, [pc, #616]	; (8003594 <HAL_DMA_Init+0x434>)
 800332c:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 800332e:	68a1      	ldr	r1, [r4, #8]
 8003330:	68e2      	ldr	r2, [r4, #12]
 8003332:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003334:	6921      	ldr	r1, [r4, #16]
 8003336:	430a      	orrs	r2, r1
 8003338:	6961      	ldr	r1, [r4, #20]
 800333a:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	69a1      	ldr	r1, [r4, #24]
 800333e:	430a      	orrs	r2, r1
 8003340:	69e1      	ldr	r1, [r4, #28]
 8003342:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8003344:	6a21      	ldr	r1, [r4, #32]
 8003346:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8003348:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800334a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800334c:	2904      	cmp	r1, #4
 800334e:	f000 80c8 	beq.w	80034e2 <HAL_DMA_Init+0x382>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003352:	4991      	ldr	r1, [pc, #580]	; (8003598 <HAL_DMA_Init+0x438>)
 8003354:	6808      	ldr	r0, [r1, #0]
 8003356:	4991      	ldr	r1, [pc, #580]	; (800359c <HAL_DMA_Init+0x43c>)
 8003358:	4001      	ands	r1, r0
 800335a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800335e:	d30d      	bcc.n	800337c <HAL_DMA_Init+0x21c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003360:	6861      	ldr	r1, [r4, #4]
 8003362:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8003366:	281f      	cmp	r0, #31
 8003368:	f200 810f 	bhi.w	800358a <HAL_DMA_Init+0x42a>
 800336c:	498c      	ldr	r1, [pc, #560]	; (80035a0 <HAL_DMA_Init+0x440>)
 800336e:	fa21 f000 	lsr.w	r0, r1, r0
 8003372:	f010 0f01 	tst.w	r0, #1
 8003376:	d001      	beq.n	800337c <HAL_DMA_Init+0x21c>
        registerValue |= DMA_SxCR_TRBUFF;
 8003378:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800337c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800337e:	6821      	ldr	r1, [r4, #0]
 8003380:	694a      	ldr	r2, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003382:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003388:	431a      	orrs	r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338a:	2b04      	cmp	r3, #4
 800338c:	d10e      	bne.n	80033ac <HAL_DMA_Init+0x24c>
      registerValue |= hdma->Init.FIFOThreshold;
 800338e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003390:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003394:	b153      	cbz	r3, 80033ac <HAL_DMA_Init+0x24c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003396:	69a5      	ldr	r5, [r4, #24]
 8003398:	2d00      	cmp	r5, #0
 800339a:	f040 80b8 	bne.w	800350e <HAL_DMA_Init+0x3ae>
    switch (hdma->Init.FIFOThreshold)
 800339e:	2801      	cmp	r0, #1
 80033a0:	f000 80af 	beq.w	8003502 <HAL_DMA_Init+0x3a2>
 80033a4:	f030 0002 	bics.w	r0, r0, #2
 80033a8:	f000 80a0 	beq.w	80034ec <HAL_DMA_Init+0x38c>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033ac:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff fdaa 	bl	8002f08 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033b6:	f003 021f 	and.w	r2, r3, #31
 80033ba:	233f      	movs	r3, #63	; 0x3f
 80033bc:	4093      	lsls	r3, r2
 80033be:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <HAL_DMA_Init+0x444>)
 80033c4:	4978      	ldr	r1, [pc, #480]	; (80035a8 <HAL_DMA_Init+0x448>)
 80033c6:	428a      	cmp	r2, r1
 80033c8:	bf18      	it	ne
 80033ca:	429a      	cmpne	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	3118      	adds	r1, #24
 80033d4:	428a      	cmp	r2, r1
 80033d6:	bf08      	it	eq
 80033d8:	f043 0301 	orreq.w	r3, r3, #1
 80033dc:	3118      	adds	r1, #24
 80033de:	428a      	cmp	r2, r1
 80033e0:	bf08      	it	eq
 80033e2:	f043 0301 	orreq.w	r3, r3, #1
 80033e6:	3118      	adds	r1, #24
 80033e8:	428a      	cmp	r2, r1
 80033ea:	bf08      	it	eq
 80033ec:	f043 0301 	orreq.w	r3, r3, #1
 80033f0:	3118      	adds	r1, #24
 80033f2:	428a      	cmp	r2, r1
 80033f4:	bf08      	it	eq
 80033f6:	f043 0301 	orreq.w	r3, r3, #1
 80033fa:	3118      	adds	r1, #24
 80033fc:	428a      	cmp	r2, r1
 80033fe:	bf08      	it	eq
 8003400:	f043 0301 	orreq.w	r3, r3, #1
 8003404:	3118      	adds	r1, #24
 8003406:	428a      	cmp	r2, r1
 8003408:	bf08      	it	eq
 800340a:	f043 0301 	orreq.w	r3, r3, #1
 800340e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003412:	428a      	cmp	r2, r1
 8003414:	bf08      	it	eq
 8003416:	f043 0301 	orreq.w	r3, r3, #1
 800341a:	3118      	adds	r1, #24
 800341c:	428a      	cmp	r2, r1
 800341e:	bf08      	it	eq
 8003420:	f043 0301 	orreq.w	r3, r3, #1
 8003424:	3118      	adds	r1, #24
 8003426:	428a      	cmp	r2, r1
 8003428:	bf08      	it	eq
 800342a:	f043 0301 	orreq.w	r3, r3, #1
 800342e:	3118      	adds	r1, #24
 8003430:	428a      	cmp	r2, r1
 8003432:	bf08      	it	eq
 8003434:	f043 0301 	orreq.w	r3, r3, #1
 8003438:	3118      	adds	r1, #24
 800343a:	428a      	cmp	r2, r1
 800343c:	bf08      	it	eq
 800343e:	f043 0301 	orreq.w	r3, r3, #1
 8003442:	3118      	adds	r1, #24
 8003444:	428a      	cmp	r2, r1
 8003446:	bf08      	it	eq
 8003448:	f043 0301 	orreq.w	r3, r3, #1
 800344c:	3118      	adds	r1, #24
 800344e:	428a      	cmp	r2, r1
 8003450:	bf08      	it	eq
 8003452:	f043 0301 	orreq.w	r3, r3, #1
 8003456:	3118      	adds	r1, #24
 8003458:	428a      	cmp	r2, r1
 800345a:	bf08      	it	eq
 800345c:	f043 0301 	orreq.w	r3, r3, #1
 8003460:	4952      	ldr	r1, [pc, #328]	; (80035ac <HAL_DMA_Init+0x44c>)
 8003462:	428a      	cmp	r2, r1
 8003464:	bf08      	it	eq
 8003466:	f043 0301 	orreq.w	r3, r3, #1
 800346a:	3114      	adds	r1, #20
 800346c:	428a      	cmp	r2, r1
 800346e:	bf08      	it	eq
 8003470:	f043 0301 	orreq.w	r3, r3, #1
 8003474:	3114      	adds	r1, #20
 8003476:	428a      	cmp	r2, r1
 8003478:	bf08      	it	eq
 800347a:	f043 0301 	orreq.w	r3, r3, #1
 800347e:	3114      	adds	r1, #20
 8003480:	428a      	cmp	r2, r1
 8003482:	bf08      	it	eq
 8003484:	f043 0301 	orreq.w	r3, r3, #1
 8003488:	3114      	adds	r1, #20
 800348a:	428a      	cmp	r2, r1
 800348c:	bf08      	it	eq
 800348e:	f043 0301 	orreq.w	r3, r3, #1
 8003492:	3114      	adds	r1, #20
 8003494:	428a      	cmp	r2, r1
 8003496:	bf08      	it	eq
 8003498:	f043 0301 	orreq.w	r3, r3, #1
 800349c:	3114      	adds	r1, #20
 800349e:	428a      	cmp	r2, r1
 80034a0:	bf08      	it	eq
 80034a2:	f043 0301 	orreq.w	r3, r3, #1
 80034a6:	b913      	cbnz	r3, 80034ae <HAL_DMA_Init+0x34e>
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_DMA_Init+0x450>)
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d113      	bne.n	80034d6 <HAL_DMA_Init+0x376>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff fda0 	bl	8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034b4:	68a3      	ldr	r3, [r4, #8]
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d058      	beq.n	800356c <HAL_DMA_Init+0x40c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034bc:	7922      	ldrb	r2, [r4, #4]
 80034be:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034c2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80034c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	2b07      	cmp	r3, #7
 80034cc:	d951      	bls.n	8003572 <HAL_DMA_Init+0x412>
      hdma->DMAmuxRequestGen = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80034d2:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034d4:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d6:	2000      	movs	r0, #0
 80034d8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80034da:	2301      	movs	r3, #1
 80034dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80034e0:	e6af      	b.n	8003242 <HAL_DMA_Init+0xe2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80034e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034e6:	4301      	orrs	r1, r0
 80034e8:	430a      	orrs	r2, r1
 80034ea:	e732      	b.n	8003352 <HAL_DMA_Init+0x1f2>
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f43f af5b 	beq.w	80033ac <HAL_DMA_Init+0x24c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f6:	2340      	movs	r3, #64	; 0x40
 80034f8:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80034fa:	2001      	movs	r0, #1
 80034fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8003500:	e69f      	b.n	8003242 <HAL_DMA_Init+0xe2>
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003506:	bf14      	ite	ne
 8003508:	2300      	movne	r3, #0
 800350a:	2301      	moveq	r3, #1
 800350c:	e7f0      	b.n	80034f0 <HAL_DMA_Init+0x390>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8003512:	d00a      	beq.n	800352a <HAL_DMA_Init+0x3ca>
    switch (hdma->Init.FIFOThreshold)
 8003514:	2802      	cmp	r0, #2
 8003516:	d9ee      	bls.n	80034f6 <HAL_DMA_Init+0x396>
 8003518:	2803      	cmp	r0, #3
 800351a:	f47f af47 	bne.w	80033ac <HAL_DMA_Init+0x24c>
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003522:	2b00      	cmp	r3, #0
 8003524:	f43f af42 	beq.w	80033ac <HAL_DMA_Init+0x24c>
 8003528:	e7e5      	b.n	80034f6 <HAL_DMA_Init+0x396>
    switch (hdma->Init.FIFOThreshold)
 800352a:	2803      	cmp	r0, #3
 800352c:	f63f af3e 	bhi.w	80033ac <HAL_DMA_Init+0x24c>
 8003530:	a501      	add	r5, pc, #4	; (adr r5, 8003538 <HAL_DMA_Init+0x3d8>)
 8003532:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8003536:	bf00      	nop
 8003538:	080034f7 	.word	0x080034f7
 800353c:	08003549 	.word	0x08003549
 8003540:	080034f7 	.word	0x080034f7
 8003544:	0800354f 	.word	0x0800354f
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800354c:	e7e9      	b.n	8003522 <HAL_DMA_Init+0x3c2>
 800354e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003552:	bf14      	ite	ne
 8003554:	2300      	movne	r3, #0
 8003556:	2301      	moveq	r3, #1
 8003558:	e7e3      	b.n	8003522 <HAL_DMA_Init+0x3c2>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800355e:	2303      	movs	r3, #3
 8003560:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e66c      	b.n	8003242 <HAL_DMA_Init+0xe2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003568:	2110      	movs	r1, #16
 800356a:	e6a3      	b.n	80032b4 <HAL_DMA_Init+0x154>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800356c:	2300      	movs	r3, #0
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	e7a3      	b.n	80034ba <HAL_DMA_Init+0x35a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003572:	4620      	mov	r0, r4
 8003574:	f7ff fda4 	bl	80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003578:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800357e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003580:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	e7a7      	b.n	80034d6 <HAL_DMA_Init+0x376>
    return HAL_ERROR;
 8003586:	2001      	movs	r0, #1
 8003588:	e65b      	b.n	8003242 <HAL_DMA_Init+0xe2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800358a:	394f      	subs	r1, #79	; 0x4f
 800358c:	2903      	cmp	r1, #3
 800358e:	f67f aef3 	bls.w	8003378 <HAL_DMA_Init+0x218>
 8003592:	e6f3      	b.n	800337c <HAL_DMA_Init+0x21c>
 8003594:	fe10803f 	.word	0xfe10803f
 8003598:	5c001000 	.word	0x5c001000
 800359c:	ffff0000 	.word	0xffff0000
 80035a0:	c3c0003f 	.word	0xc3c0003f
 80035a4:	40020010 	.word	0x40020010
 80035a8:	40020028 	.word	0x40020028
 80035ac:	58025408 	.word	0x58025408
 80035b0:	58025494 	.word	0x58025494

080035b4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80035b4:	2800      	cmp	r0, #0
 80035b6:	f000 81d2 	beq.w	800395e <HAL_DMA_Start_IT+0x3aa>
{
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80035be:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80035c2:	2801      	cmp	r0, #1
 80035c4:	f000 81cd 	beq.w	8003962 <HAL_DMA_Start_IT+0x3ae>
 80035c8:	2001      	movs	r0, #1
 80035ca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ce:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80035d2:	b2c0      	uxtb	r0, r0
 80035d4:	2801      	cmp	r0, #1
 80035d6:	d007      	beq.n	80035e8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80035d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035dc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80035de:	2300      	movs	r3, #0
 80035e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
}
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	2002      	movs	r0, #2
 80035ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	2000      	movs	r0, #0
 80035f0:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80035f2:	6825      	ldr	r5, [r4, #0]
 80035f4:	4895      	ldr	r0, [pc, #596]	; (800384c <HAL_DMA_Start_IT+0x298>)
 80035f6:	4e96      	ldr	r6, [pc, #600]	; (8003850 <HAL_DMA_Start_IT+0x29c>)
 80035f8:	42b5      	cmp	r5, r6
 80035fa:	bf18      	it	ne
 80035fc:	4285      	cmpne	r5, r0
 80035fe:	bf0c      	ite	eq
 8003600:	2001      	moveq	r0, #1
 8003602:	2000      	movne	r0, #0
 8003604:	3618      	adds	r6, #24
 8003606:	42b5      	cmp	r5, r6
 8003608:	bf08      	it	eq
 800360a:	f040 0001 	orreq.w	r0, r0, #1
 800360e:	3618      	adds	r6, #24
 8003610:	42b5      	cmp	r5, r6
 8003612:	bf08      	it	eq
 8003614:	f040 0001 	orreq.w	r0, r0, #1
 8003618:	3618      	adds	r6, #24
 800361a:	42b5      	cmp	r5, r6
 800361c:	bf08      	it	eq
 800361e:	f040 0001 	orreq.w	r0, r0, #1
 8003622:	3618      	adds	r6, #24
 8003624:	42b5      	cmp	r5, r6
 8003626:	bf08      	it	eq
 8003628:	f040 0001 	orreq.w	r0, r0, #1
 800362c:	3618      	adds	r6, #24
 800362e:	42b5      	cmp	r5, r6
 8003630:	bf08      	it	eq
 8003632:	f040 0001 	orreq.w	r0, r0, #1
 8003636:	3618      	adds	r6, #24
 8003638:	42b5      	cmp	r5, r6
 800363a:	bf08      	it	eq
 800363c:	f040 0001 	orreq.w	r0, r0, #1
 8003640:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8003644:	42b5      	cmp	r5, r6
 8003646:	bf08      	it	eq
 8003648:	f040 0001 	orreq.w	r0, r0, #1
 800364c:	3618      	adds	r6, #24
 800364e:	42b5      	cmp	r5, r6
 8003650:	bf08      	it	eq
 8003652:	f040 0001 	orreq.w	r0, r0, #1
 8003656:	3618      	adds	r6, #24
 8003658:	42b5      	cmp	r5, r6
 800365a:	bf08      	it	eq
 800365c:	f040 0001 	orreq.w	r0, r0, #1
 8003660:	3618      	adds	r6, #24
 8003662:	42b5      	cmp	r5, r6
 8003664:	bf08      	it	eq
 8003666:	f040 0001 	orreq.w	r0, r0, #1
 800366a:	3618      	adds	r6, #24
 800366c:	42b5      	cmp	r5, r6
 800366e:	bf08      	it	eq
 8003670:	f040 0001 	orreq.w	r0, r0, #1
 8003674:	3618      	adds	r6, #24
 8003676:	42b5      	cmp	r5, r6
 8003678:	bf08      	it	eq
 800367a:	f040 0001 	orreq.w	r0, r0, #1
 800367e:	3618      	adds	r6, #24
 8003680:	42b5      	cmp	r5, r6
 8003682:	bf08      	it	eq
 8003684:	f040 0001 	orreq.w	r0, r0, #1
 8003688:	b918      	cbnz	r0, 8003692 <HAL_DMA_Start_IT+0xde>
 800368a:	4872      	ldr	r0, [pc, #456]	; (8003854 <HAL_DMA_Start_IT+0x2a0>)
 800368c:	4285      	cmp	r5, r0
 800368e:	f040 814b 	bne.w	8003928 <HAL_DMA_Start_IT+0x374>
 8003692:	6828      	ldr	r0, [r5, #0]
 8003694:	f020 0001 	bic.w	r0, r0, #1
 8003698:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff fb02 	bl	8002ca4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_DMA_Start_IT+0x298>)
 80036a4:	496a      	ldr	r1, [pc, #424]	; (8003850 <HAL_DMA_Start_IT+0x29c>)
 80036a6:	428a      	cmp	r2, r1
 80036a8:	bf18      	it	ne
 80036aa:	429a      	cmpne	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	3118      	adds	r1, #24
 80036b4:	428a      	cmp	r2, r1
 80036b6:	bf08      	it	eq
 80036b8:	f043 0301 	orreq.w	r3, r3, #1
 80036bc:	3118      	adds	r1, #24
 80036be:	428a      	cmp	r2, r1
 80036c0:	bf08      	it	eq
 80036c2:	f043 0301 	orreq.w	r3, r3, #1
 80036c6:	3118      	adds	r1, #24
 80036c8:	428a      	cmp	r2, r1
 80036ca:	bf08      	it	eq
 80036cc:	f043 0301 	orreq.w	r3, r3, #1
 80036d0:	3118      	adds	r1, #24
 80036d2:	428a      	cmp	r2, r1
 80036d4:	bf08      	it	eq
 80036d6:	f043 0301 	orreq.w	r3, r3, #1
 80036da:	3118      	adds	r1, #24
 80036dc:	428a      	cmp	r2, r1
 80036de:	bf08      	it	eq
 80036e0:	f043 0301 	orreq.w	r3, r3, #1
 80036e4:	3118      	adds	r1, #24
 80036e6:	428a      	cmp	r2, r1
 80036e8:	bf08      	it	eq
 80036ea:	f043 0301 	orreq.w	r3, r3, #1
 80036ee:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80036f2:	428a      	cmp	r2, r1
 80036f4:	bf08      	it	eq
 80036f6:	f043 0301 	orreq.w	r3, r3, #1
 80036fa:	3118      	adds	r1, #24
 80036fc:	428a      	cmp	r2, r1
 80036fe:	bf08      	it	eq
 8003700:	f043 0301 	orreq.w	r3, r3, #1
 8003704:	3118      	adds	r1, #24
 8003706:	428a      	cmp	r2, r1
 8003708:	bf08      	it	eq
 800370a:	f043 0301 	orreq.w	r3, r3, #1
 800370e:	3118      	adds	r1, #24
 8003710:	428a      	cmp	r2, r1
 8003712:	bf08      	it	eq
 8003714:	f043 0301 	orreq.w	r3, r3, #1
 8003718:	3118      	adds	r1, #24
 800371a:	428a      	cmp	r2, r1
 800371c:	bf08      	it	eq
 800371e:	f043 0301 	orreq.w	r3, r3, #1
 8003722:	3118      	adds	r1, #24
 8003724:	428a      	cmp	r2, r1
 8003726:	bf08      	it	eq
 8003728:	f043 0301 	orreq.w	r3, r3, #1
 800372c:	3118      	adds	r1, #24
 800372e:	428a      	cmp	r2, r1
 8003730:	bf08      	it	eq
 8003732:	f043 0301 	orreq.w	r3, r3, #1
 8003736:	b91b      	cbnz	r3, 8003740 <HAL_DMA_Start_IT+0x18c>
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_DMA_Start_IT+0x2a0>)
 800373a:	429a      	cmp	r2, r3
 800373c:	f040 80f9 	bne.w	8003932 <HAL_DMA_Start_IT+0x37e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	f023 031e 	bic.w	r3, r3, #30
 8003746:	f043 0316 	orr.w	r3, r3, #22
 800374a:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800374c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800374e:	b123      	cbz	r3, 800375a <HAL_DMA_Start_IT+0x1a6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_DMA_Start_IT+0x298>)
 800375e:	493c      	ldr	r1, [pc, #240]	; (8003850 <HAL_DMA_Start_IT+0x29c>)
 8003760:	428a      	cmp	r2, r1
 8003762:	bf18      	it	ne
 8003764:	429a      	cmpne	r2, r3
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	3118      	adds	r1, #24
 800376e:	428a      	cmp	r2, r1
 8003770:	bf08      	it	eq
 8003772:	f043 0301 	orreq.w	r3, r3, #1
 8003776:	3118      	adds	r1, #24
 8003778:	428a      	cmp	r2, r1
 800377a:	bf08      	it	eq
 800377c:	f043 0301 	orreq.w	r3, r3, #1
 8003780:	3118      	adds	r1, #24
 8003782:	428a      	cmp	r2, r1
 8003784:	bf08      	it	eq
 8003786:	f043 0301 	orreq.w	r3, r3, #1
 800378a:	3118      	adds	r1, #24
 800378c:	428a      	cmp	r2, r1
 800378e:	bf08      	it	eq
 8003790:	f043 0301 	orreq.w	r3, r3, #1
 8003794:	3118      	adds	r1, #24
 8003796:	428a      	cmp	r2, r1
 8003798:	bf08      	it	eq
 800379a:	f043 0301 	orreq.w	r3, r3, #1
 800379e:	3118      	adds	r1, #24
 80037a0:	428a      	cmp	r2, r1
 80037a2:	bf08      	it	eq
 80037a4:	f043 0301 	orreq.w	r3, r3, #1
 80037a8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80037ac:	428a      	cmp	r2, r1
 80037ae:	bf08      	it	eq
 80037b0:	f043 0301 	orreq.w	r3, r3, #1
 80037b4:	3118      	adds	r1, #24
 80037b6:	428a      	cmp	r2, r1
 80037b8:	bf08      	it	eq
 80037ba:	f043 0301 	orreq.w	r3, r3, #1
 80037be:	3118      	adds	r1, #24
 80037c0:	428a      	cmp	r2, r1
 80037c2:	bf08      	it	eq
 80037c4:	f043 0301 	orreq.w	r3, r3, #1
 80037c8:	3118      	adds	r1, #24
 80037ca:	428a      	cmp	r2, r1
 80037cc:	bf08      	it	eq
 80037ce:	f043 0301 	orreq.w	r3, r3, #1
 80037d2:	3118      	adds	r1, #24
 80037d4:	428a      	cmp	r2, r1
 80037d6:	bf08      	it	eq
 80037d8:	f043 0301 	orreq.w	r3, r3, #1
 80037dc:	3118      	adds	r1, #24
 80037de:	428a      	cmp	r2, r1
 80037e0:	bf08      	it	eq
 80037e2:	f043 0301 	orreq.w	r3, r3, #1
 80037e6:	3118      	adds	r1, #24
 80037e8:	428a      	cmp	r2, r1
 80037ea:	bf08      	it	eq
 80037ec:	f043 0301 	orreq.w	r3, r3, #1
 80037f0:	3118      	adds	r1, #24
 80037f2:	428a      	cmp	r2, r1
 80037f4:	bf08      	it	eq
 80037f6:	f043 0301 	orreq.w	r3, r3, #1
 80037fa:	4917      	ldr	r1, [pc, #92]	; (8003858 <HAL_DMA_Start_IT+0x2a4>)
 80037fc:	428a      	cmp	r2, r1
 80037fe:	bf08      	it	eq
 8003800:	f043 0301 	orreq.w	r3, r3, #1
 8003804:	3114      	adds	r1, #20
 8003806:	428a      	cmp	r2, r1
 8003808:	bf08      	it	eq
 800380a:	f043 0301 	orreq.w	r3, r3, #1
 800380e:	3114      	adds	r1, #20
 8003810:	428a      	cmp	r2, r1
 8003812:	bf08      	it	eq
 8003814:	f043 0301 	orreq.w	r3, r3, #1
 8003818:	3114      	adds	r1, #20
 800381a:	428a      	cmp	r2, r1
 800381c:	bf08      	it	eq
 800381e:	f043 0301 	orreq.w	r3, r3, #1
 8003822:	3114      	adds	r1, #20
 8003824:	428a      	cmp	r2, r1
 8003826:	bf08      	it	eq
 8003828:	f043 0301 	orreq.w	r3, r3, #1
 800382c:	3114      	adds	r1, #20
 800382e:	428a      	cmp	r2, r1
 8003830:	bf08      	it	eq
 8003832:	f043 0301 	orreq.w	r3, r3, #1
 8003836:	3114      	adds	r1, #20
 8003838:	428a      	cmp	r2, r1
 800383a:	bf08      	it	eq
 800383c:	f043 0301 	orreq.w	r3, r3, #1
 8003840:	b973      	cbnz	r3, 8003860 <HAL_DMA_Start_IT+0x2ac>
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_DMA_Start_IT+0x2a8>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d11a      	bne.n	800387e <HAL_DMA_Start_IT+0x2ca>
 8003848:	e00a      	b.n	8003860 <HAL_DMA_Start_IT+0x2ac>
 800384a:	bf00      	nop
 800384c:	40020010 	.word	0x40020010
 8003850:	40020028 	.word	0x40020028
 8003854:	400204b8 	.word	0x400204b8
 8003858:	58025408 	.word	0x58025408
 800385c:	58025494 	.word	0x58025494
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003860:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003868:	d003      	beq.n	8003872 <HAL_DMA_Start_IT+0x2be>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003872:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003874:	b11b      	cbz	r3, 800387e <HAL_DMA_Start_IT+0x2ca>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_DMA_Start_IT+0x3b4>)
 8003882:	493a      	ldr	r1, [pc, #232]	; (800396c <HAL_DMA_Start_IT+0x3b8>)
 8003884:	428a      	cmp	r2, r1
 8003886:	bf18      	it	ne
 8003888:	429a      	cmpne	r2, r3
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	3118      	adds	r1, #24
 8003892:	428a      	cmp	r2, r1
 8003894:	bf08      	it	eq
 8003896:	f043 0301 	orreq.w	r3, r3, #1
 800389a:	3118      	adds	r1, #24
 800389c:	428a      	cmp	r2, r1
 800389e:	bf08      	it	eq
 80038a0:	f043 0301 	orreq.w	r3, r3, #1
 80038a4:	3118      	adds	r1, #24
 80038a6:	428a      	cmp	r2, r1
 80038a8:	bf08      	it	eq
 80038aa:	f043 0301 	orreq.w	r3, r3, #1
 80038ae:	3118      	adds	r1, #24
 80038b0:	428a      	cmp	r2, r1
 80038b2:	bf08      	it	eq
 80038b4:	f043 0301 	orreq.w	r3, r3, #1
 80038b8:	3118      	adds	r1, #24
 80038ba:	428a      	cmp	r2, r1
 80038bc:	bf08      	it	eq
 80038be:	f043 0301 	orreq.w	r3, r3, #1
 80038c2:	3118      	adds	r1, #24
 80038c4:	428a      	cmp	r2, r1
 80038c6:	bf08      	it	eq
 80038c8:	f043 0301 	orreq.w	r3, r3, #1
 80038cc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80038d0:	428a      	cmp	r2, r1
 80038d2:	bf08      	it	eq
 80038d4:	f043 0301 	orreq.w	r3, r3, #1
 80038d8:	3118      	adds	r1, #24
 80038da:	428a      	cmp	r2, r1
 80038dc:	bf08      	it	eq
 80038de:	f043 0301 	orreq.w	r3, r3, #1
 80038e2:	3118      	adds	r1, #24
 80038e4:	428a      	cmp	r2, r1
 80038e6:	bf08      	it	eq
 80038e8:	f043 0301 	orreq.w	r3, r3, #1
 80038ec:	3118      	adds	r1, #24
 80038ee:	428a      	cmp	r2, r1
 80038f0:	bf08      	it	eq
 80038f2:	f043 0301 	orreq.w	r3, r3, #1
 80038f6:	3118      	adds	r1, #24
 80038f8:	428a      	cmp	r2, r1
 80038fa:	bf08      	it	eq
 80038fc:	f043 0301 	orreq.w	r3, r3, #1
 8003900:	3118      	adds	r1, #24
 8003902:	428a      	cmp	r2, r1
 8003904:	bf08      	it	eq
 8003906:	f043 0301 	orreq.w	r3, r3, #1
 800390a:	3118      	adds	r1, #24
 800390c:	428a      	cmp	r2, r1
 800390e:	bf08      	it	eq
 8003910:	f043 0301 	orreq.w	r3, r3, #1
 8003914:	b913      	cbnz	r3, 800391c <HAL_DMA_Start_IT+0x368>
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_DMA_Start_IT+0x3bc>)
 8003918:	429a      	cmp	r2, r3
 800391a:	d11a      	bne.n	8003952 <HAL_DMA_Start_IT+0x39e>
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003926:	e65e      	b.n	80035e6 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_DISABLE(hdma);
 8003928:	6828      	ldr	r0, [r5, #0]
 800392a:	f020 0001 	bic.w	r0, r0, #1
 800392e:	6028      	str	r0, [r5, #0]
 8003930:	e6b3      	b.n	800369a <HAL_DMA_Start_IT+0xe6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	f023 030e 	bic.w	r3, r3, #14
 8003938:	f043 030a 	orr.w	r3, r3, #10
 800393c:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800393e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	f43f af0a 	beq.w	800375a <HAL_DMA_Start_IT+0x1a6>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	e703      	b.n	800375a <HAL_DMA_Start_IT+0x1a6>
    __HAL_DMA_ENABLE(hdma);
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2000      	movs	r0, #0
 800395c:	e643      	b.n	80035e6 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800395e:	2001      	movs	r0, #1
}
 8003960:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003962:	2002      	movs	r0, #2
 8003964:	e63f      	b.n	80035e6 <HAL_DMA_Start_IT+0x32>
 8003966:	bf00      	nop
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	400204b8 	.word	0x400204b8

08003974 <HAL_DMA_Abort>:
{
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7fe fc9c 	bl	80022b4 <HAL_GetTick>
  if(hdma == NULL)
 800397c:	2c00      	cmp	r4, #0
 800397e:	f000 8248 	beq.w	8003e12 <HAL_DMA_Abort+0x49e>
 8003982:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d006      	beq.n	800399c <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003992:	2300      	movs	r3, #0
 8003994:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003998:	2001      	movs	r0, #1
}
 800399a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <HAL_DMA_Abort+0x274>)
 80039a0:	4992      	ldr	r1, [pc, #584]	; (8003bec <HAL_DMA_Abort+0x278>)
 80039a2:	428a      	cmp	r2, r1
 80039a4:	bf18      	it	ne
 80039a6:	429a      	cmpne	r2, r3
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	3118      	adds	r1, #24
 80039b0:	428a      	cmp	r2, r1
 80039b2:	bf08      	it	eq
 80039b4:	f043 0301 	orreq.w	r3, r3, #1
 80039b8:	3118      	adds	r1, #24
 80039ba:	428a      	cmp	r2, r1
 80039bc:	bf08      	it	eq
 80039be:	f043 0301 	orreq.w	r3, r3, #1
 80039c2:	3118      	adds	r1, #24
 80039c4:	428a      	cmp	r2, r1
 80039c6:	bf08      	it	eq
 80039c8:	f043 0301 	orreq.w	r3, r3, #1
 80039cc:	3118      	adds	r1, #24
 80039ce:	428a      	cmp	r2, r1
 80039d0:	bf08      	it	eq
 80039d2:	f043 0301 	orreq.w	r3, r3, #1
 80039d6:	3118      	adds	r1, #24
 80039d8:	428a      	cmp	r2, r1
 80039da:	bf08      	it	eq
 80039dc:	f043 0301 	orreq.w	r3, r3, #1
 80039e0:	3118      	adds	r1, #24
 80039e2:	428a      	cmp	r2, r1
 80039e4:	bf08      	it	eq
 80039e6:	f043 0301 	orreq.w	r3, r3, #1
 80039ea:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80039ee:	428a      	cmp	r2, r1
 80039f0:	bf08      	it	eq
 80039f2:	f043 0301 	orreq.w	r3, r3, #1
 80039f6:	3118      	adds	r1, #24
 80039f8:	428a      	cmp	r2, r1
 80039fa:	bf08      	it	eq
 80039fc:	f043 0301 	orreq.w	r3, r3, #1
 8003a00:	3118      	adds	r1, #24
 8003a02:	428a      	cmp	r2, r1
 8003a04:	bf08      	it	eq
 8003a06:	f043 0301 	orreq.w	r3, r3, #1
 8003a0a:	3118      	adds	r1, #24
 8003a0c:	428a      	cmp	r2, r1
 8003a0e:	bf08      	it	eq
 8003a10:	f043 0301 	orreq.w	r3, r3, #1
 8003a14:	3118      	adds	r1, #24
 8003a16:	428a      	cmp	r2, r1
 8003a18:	bf08      	it	eq
 8003a1a:	f043 0301 	orreq.w	r3, r3, #1
 8003a1e:	3118      	adds	r1, #24
 8003a20:	428a      	cmp	r2, r1
 8003a22:	bf08      	it	eq
 8003a24:	f043 0301 	orreq.w	r3, r3, #1
 8003a28:	3118      	adds	r1, #24
 8003a2a:	428a      	cmp	r2, r1
 8003a2c:	bf08      	it	eq
 8003a2e:	f043 0301 	orreq.w	r3, r3, #1
 8003a32:	b91b      	cbnz	r3, 8003a3c <HAL_DMA_Abort+0xc8>
 8003a34:	4b6e      	ldr	r3, [pc, #440]	; (8003bf0 <HAL_DMA_Abort+0x27c>)
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f040 80f7 	bne.w	8003c2a <HAL_DMA_Abort+0x2b6>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	f023 031e 	bic.w	r3, r3, #30
 8003a42:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	6953      	ldr	r3, [r2, #20]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a4e:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_DMA_Abort+0x274>)
 8003a54:	4965      	ldr	r1, [pc, #404]	; (8003bec <HAL_DMA_Abort+0x278>)
 8003a56:	428a      	cmp	r2, r1
 8003a58:	bf18      	it	ne
 8003a5a:	429a      	cmpne	r2, r3
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	3118      	adds	r1, #24
 8003a64:	428a      	cmp	r2, r1
 8003a66:	bf08      	it	eq
 8003a68:	f043 0301 	orreq.w	r3, r3, #1
 8003a6c:	3118      	adds	r1, #24
 8003a6e:	428a      	cmp	r2, r1
 8003a70:	bf08      	it	eq
 8003a72:	f043 0301 	orreq.w	r3, r3, #1
 8003a76:	3118      	adds	r1, #24
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	bf08      	it	eq
 8003a7c:	f043 0301 	orreq.w	r3, r3, #1
 8003a80:	3118      	adds	r1, #24
 8003a82:	428a      	cmp	r2, r1
 8003a84:	bf08      	it	eq
 8003a86:	f043 0301 	orreq.w	r3, r3, #1
 8003a8a:	3118      	adds	r1, #24
 8003a8c:	428a      	cmp	r2, r1
 8003a8e:	bf08      	it	eq
 8003a90:	f043 0301 	orreq.w	r3, r3, #1
 8003a94:	3118      	adds	r1, #24
 8003a96:	428a      	cmp	r2, r1
 8003a98:	bf08      	it	eq
 8003a9a:	f043 0301 	orreq.w	r3, r3, #1
 8003a9e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003aa2:	428a      	cmp	r2, r1
 8003aa4:	bf08      	it	eq
 8003aa6:	f043 0301 	orreq.w	r3, r3, #1
 8003aaa:	3118      	adds	r1, #24
 8003aac:	428a      	cmp	r2, r1
 8003aae:	bf08      	it	eq
 8003ab0:	f043 0301 	orreq.w	r3, r3, #1
 8003ab4:	3118      	adds	r1, #24
 8003ab6:	428a      	cmp	r2, r1
 8003ab8:	bf08      	it	eq
 8003aba:	f043 0301 	orreq.w	r3, r3, #1
 8003abe:	3118      	adds	r1, #24
 8003ac0:	428a      	cmp	r2, r1
 8003ac2:	bf08      	it	eq
 8003ac4:	f043 0301 	orreq.w	r3, r3, #1
 8003ac8:	3118      	adds	r1, #24
 8003aca:	428a      	cmp	r2, r1
 8003acc:	bf08      	it	eq
 8003ace:	f043 0301 	orreq.w	r3, r3, #1
 8003ad2:	3118      	adds	r1, #24
 8003ad4:	428a      	cmp	r2, r1
 8003ad6:	bf08      	it	eq
 8003ad8:	f043 0301 	orreq.w	r3, r3, #1
 8003adc:	3118      	adds	r1, #24
 8003ade:	428a      	cmp	r2, r1
 8003ae0:	bf08      	it	eq
 8003ae2:	f043 0301 	orreq.w	r3, r3, #1
 8003ae6:	3118      	adds	r1, #24
 8003ae8:	428a      	cmp	r2, r1
 8003aea:	bf08      	it	eq
 8003aec:	f043 0301 	orreq.w	r3, r3, #1
 8003af0:	4940      	ldr	r1, [pc, #256]	; (8003bf4 <HAL_DMA_Abort+0x280>)
 8003af2:	428a      	cmp	r2, r1
 8003af4:	bf08      	it	eq
 8003af6:	f043 0301 	orreq.w	r3, r3, #1
 8003afa:	3114      	adds	r1, #20
 8003afc:	428a      	cmp	r2, r1
 8003afe:	bf08      	it	eq
 8003b00:	f043 0301 	orreq.w	r3, r3, #1
 8003b04:	3114      	adds	r1, #20
 8003b06:	428a      	cmp	r2, r1
 8003b08:	bf08      	it	eq
 8003b0a:	f043 0301 	orreq.w	r3, r3, #1
 8003b0e:	3114      	adds	r1, #20
 8003b10:	428a      	cmp	r2, r1
 8003b12:	bf08      	it	eq
 8003b14:	f043 0301 	orreq.w	r3, r3, #1
 8003b18:	3114      	adds	r1, #20
 8003b1a:	428a      	cmp	r2, r1
 8003b1c:	bf08      	it	eq
 8003b1e:	f043 0301 	orreq.w	r3, r3, #1
 8003b22:	3114      	adds	r1, #20
 8003b24:	428a      	cmp	r2, r1
 8003b26:	bf08      	it	eq
 8003b28:	f043 0301 	orreq.w	r3, r3, #1
 8003b2c:	3114      	adds	r1, #20
 8003b2e:	428a      	cmp	r2, r1
 8003b30:	bf08      	it	eq
 8003b32:	f043 0301 	orreq.w	r3, r3, #1
 8003b36:	b913      	cbnz	r3, 8003b3e <HAL_DMA_Abort+0x1ca>
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_DMA_Abort+0x284>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d104      	bne.n	8003b48 <HAL_DMA_Abort+0x1d4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b3e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b46:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_DMA_Abort+0x274>)
 8003b4c:	4927      	ldr	r1, [pc, #156]	; (8003bec <HAL_DMA_Abort+0x278>)
 8003b4e:	428a      	cmp	r2, r1
 8003b50:	bf18      	it	ne
 8003b52:	429a      	cmpne	r2, r3
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	3118      	adds	r1, #24
 8003b5c:	428a      	cmp	r2, r1
 8003b5e:	bf08      	it	eq
 8003b60:	f043 0301 	orreq.w	r3, r3, #1
 8003b64:	3118      	adds	r1, #24
 8003b66:	428a      	cmp	r2, r1
 8003b68:	bf08      	it	eq
 8003b6a:	f043 0301 	orreq.w	r3, r3, #1
 8003b6e:	3118      	adds	r1, #24
 8003b70:	428a      	cmp	r2, r1
 8003b72:	bf08      	it	eq
 8003b74:	f043 0301 	orreq.w	r3, r3, #1
 8003b78:	3118      	adds	r1, #24
 8003b7a:	428a      	cmp	r2, r1
 8003b7c:	bf08      	it	eq
 8003b7e:	f043 0301 	orreq.w	r3, r3, #1
 8003b82:	3118      	adds	r1, #24
 8003b84:	428a      	cmp	r2, r1
 8003b86:	bf08      	it	eq
 8003b88:	f043 0301 	orreq.w	r3, r3, #1
 8003b8c:	3118      	adds	r1, #24
 8003b8e:	428a      	cmp	r2, r1
 8003b90:	bf08      	it	eq
 8003b92:	f043 0301 	orreq.w	r3, r3, #1
 8003b96:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003b9a:	428a      	cmp	r2, r1
 8003b9c:	bf08      	it	eq
 8003b9e:	f043 0301 	orreq.w	r3, r3, #1
 8003ba2:	3118      	adds	r1, #24
 8003ba4:	428a      	cmp	r2, r1
 8003ba6:	bf08      	it	eq
 8003ba8:	f043 0301 	orreq.w	r3, r3, #1
 8003bac:	3118      	adds	r1, #24
 8003bae:	428a      	cmp	r2, r1
 8003bb0:	bf08      	it	eq
 8003bb2:	f043 0301 	orreq.w	r3, r3, #1
 8003bb6:	3118      	adds	r1, #24
 8003bb8:	428a      	cmp	r2, r1
 8003bba:	bf08      	it	eq
 8003bbc:	f043 0301 	orreq.w	r3, r3, #1
 8003bc0:	3118      	adds	r1, #24
 8003bc2:	428a      	cmp	r2, r1
 8003bc4:	bf08      	it	eq
 8003bc6:	f043 0301 	orreq.w	r3, r3, #1
 8003bca:	3118      	adds	r1, #24
 8003bcc:	428a      	cmp	r2, r1
 8003bce:	bf08      	it	eq
 8003bd0:	f043 0301 	orreq.w	r3, r3, #1
 8003bd4:	3118      	adds	r1, #24
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	bf08      	it	eq
 8003bda:	f043 0301 	orreq.w	r3, r3, #1
 8003bde:	b96b      	cbnz	r3, 8003bfc <HAL_DMA_Abort+0x288>
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_DMA_Abort+0x27c>)
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d127      	bne.n	8003c36 <HAL_DMA_Abort+0x2c2>
 8003be6:	e009      	b.n	8003bfc <HAL_DMA_Abort+0x288>
 8003be8:	40020010 	.word	0x40020010
 8003bec:	40020028 	.word	0x40020028
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	58025408 	.word	0x58025408
 8003bf8:	58025494 	.word	0x58025494
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6013      	str	r3, [r2, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	f013 0f01 	tst.w	r3, #1
 8003c0a:	d019      	beq.n	8003c40 <HAL_DMA_Abort+0x2cc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c0c:	f7fe fb52 	bl	80022b4 <HAL_GetTick>
 8003c10:	1b40      	subs	r0, r0, r5
 8003c12:	2805      	cmp	r0, #5
 8003c14:	d9f6      	bls.n	8003c04 <HAL_DMA_Abort+0x290>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c16:	2320      	movs	r3, #32
 8003c18:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003c20:	2300      	movs	r3, #0
 8003c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
 8003c28:	e6b7      	b.n	800399a <HAL_DMA_Abort+0x26>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	f023 030e 	bic.w	r3, r3, #14
 8003c30:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c32:	6826      	ldr	r6, [r4, #0]
 8003c34:	e70c      	b.n	8003a50 <HAL_DMA_Abort+0xdc>
    __HAL_DMA_DISABLE(hdma);
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e7e1      	b.n	8003c04 <HAL_DMA_Abort+0x290>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <HAL_DMA_Abort+0x4a4>)
 8003c44:	4975      	ldr	r1, [pc, #468]	; (8003e1c <HAL_DMA_Abort+0x4a8>)
 8003c46:	428a      	cmp	r2, r1
 8003c48:	bf18      	it	ne
 8003c4a:	429a      	cmpne	r2, r3
 8003c4c:	bf0c      	ite	eq
 8003c4e:	2301      	moveq	r3, #1
 8003c50:	2300      	movne	r3, #0
 8003c52:	3118      	adds	r1, #24
 8003c54:	428a      	cmp	r2, r1
 8003c56:	bf08      	it	eq
 8003c58:	f043 0301 	orreq.w	r3, r3, #1
 8003c5c:	3118      	adds	r1, #24
 8003c5e:	428a      	cmp	r2, r1
 8003c60:	bf08      	it	eq
 8003c62:	f043 0301 	orreq.w	r3, r3, #1
 8003c66:	3118      	adds	r1, #24
 8003c68:	428a      	cmp	r2, r1
 8003c6a:	bf08      	it	eq
 8003c6c:	f043 0301 	orreq.w	r3, r3, #1
 8003c70:	3118      	adds	r1, #24
 8003c72:	428a      	cmp	r2, r1
 8003c74:	bf08      	it	eq
 8003c76:	f043 0301 	orreq.w	r3, r3, #1
 8003c7a:	3118      	adds	r1, #24
 8003c7c:	428a      	cmp	r2, r1
 8003c7e:	bf08      	it	eq
 8003c80:	f043 0301 	orreq.w	r3, r3, #1
 8003c84:	3118      	adds	r1, #24
 8003c86:	428a      	cmp	r2, r1
 8003c88:	bf08      	it	eq
 8003c8a:	f043 0301 	orreq.w	r3, r3, #1
 8003c8e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003c92:	428a      	cmp	r2, r1
 8003c94:	bf08      	it	eq
 8003c96:	f043 0301 	orreq.w	r3, r3, #1
 8003c9a:	3118      	adds	r1, #24
 8003c9c:	428a      	cmp	r2, r1
 8003c9e:	bf08      	it	eq
 8003ca0:	f043 0301 	orreq.w	r3, r3, #1
 8003ca4:	3118      	adds	r1, #24
 8003ca6:	428a      	cmp	r2, r1
 8003ca8:	bf08      	it	eq
 8003caa:	f043 0301 	orreq.w	r3, r3, #1
 8003cae:	3118      	adds	r1, #24
 8003cb0:	428a      	cmp	r2, r1
 8003cb2:	bf08      	it	eq
 8003cb4:	f043 0301 	orreq.w	r3, r3, #1
 8003cb8:	3118      	adds	r1, #24
 8003cba:	428a      	cmp	r2, r1
 8003cbc:	bf08      	it	eq
 8003cbe:	f043 0301 	orreq.w	r3, r3, #1
 8003cc2:	3118      	adds	r1, #24
 8003cc4:	428a      	cmp	r2, r1
 8003cc6:	bf08      	it	eq
 8003cc8:	f043 0301 	orreq.w	r3, r3, #1
 8003ccc:	3118      	adds	r1, #24
 8003cce:	428a      	cmp	r2, r1
 8003cd0:	bf08      	it	eq
 8003cd2:	f043 0301 	orreq.w	r3, r3, #1
 8003cd6:	b91b      	cbnz	r3, 8003ce0 <HAL_DMA_Abort+0x36c>
 8003cd8:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <HAL_DMA_Abort+0x4ac>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f040 8091 	bne.w	8003e02 <HAL_DMA_Abort+0x48e>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce0:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ce2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	233f      	movs	r3, #63	; 0x3f
 8003cea:	4093      	lsls	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_DMA_Abort+0x4a4>)
 8003cf2:	494a      	ldr	r1, [pc, #296]	; (8003e1c <HAL_DMA_Abort+0x4a8>)
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	bf18      	it	ne
 8003cf8:	429a      	cmpne	r2, r3
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	3118      	adds	r1, #24
 8003d02:	428a      	cmp	r2, r1
 8003d04:	bf08      	it	eq
 8003d06:	f043 0301 	orreq.w	r3, r3, #1
 8003d0a:	3118      	adds	r1, #24
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	bf08      	it	eq
 8003d10:	f043 0301 	orreq.w	r3, r3, #1
 8003d14:	3118      	adds	r1, #24
 8003d16:	428a      	cmp	r2, r1
 8003d18:	bf08      	it	eq
 8003d1a:	f043 0301 	orreq.w	r3, r3, #1
 8003d1e:	3118      	adds	r1, #24
 8003d20:	428a      	cmp	r2, r1
 8003d22:	bf08      	it	eq
 8003d24:	f043 0301 	orreq.w	r3, r3, #1
 8003d28:	3118      	adds	r1, #24
 8003d2a:	428a      	cmp	r2, r1
 8003d2c:	bf08      	it	eq
 8003d2e:	f043 0301 	orreq.w	r3, r3, #1
 8003d32:	3118      	adds	r1, #24
 8003d34:	428a      	cmp	r2, r1
 8003d36:	bf08      	it	eq
 8003d38:	f043 0301 	orreq.w	r3, r3, #1
 8003d3c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003d40:	428a      	cmp	r2, r1
 8003d42:	bf08      	it	eq
 8003d44:	f043 0301 	orreq.w	r3, r3, #1
 8003d48:	3118      	adds	r1, #24
 8003d4a:	428a      	cmp	r2, r1
 8003d4c:	bf08      	it	eq
 8003d4e:	f043 0301 	orreq.w	r3, r3, #1
 8003d52:	3118      	adds	r1, #24
 8003d54:	428a      	cmp	r2, r1
 8003d56:	bf08      	it	eq
 8003d58:	f043 0301 	orreq.w	r3, r3, #1
 8003d5c:	3118      	adds	r1, #24
 8003d5e:	428a      	cmp	r2, r1
 8003d60:	bf08      	it	eq
 8003d62:	f043 0301 	orreq.w	r3, r3, #1
 8003d66:	3118      	adds	r1, #24
 8003d68:	428a      	cmp	r2, r1
 8003d6a:	bf08      	it	eq
 8003d6c:	f043 0301 	orreq.w	r3, r3, #1
 8003d70:	3118      	adds	r1, #24
 8003d72:	428a      	cmp	r2, r1
 8003d74:	bf08      	it	eq
 8003d76:	f043 0301 	orreq.w	r3, r3, #1
 8003d7a:	3118      	adds	r1, #24
 8003d7c:	428a      	cmp	r2, r1
 8003d7e:	bf08      	it	eq
 8003d80:	f043 0301 	orreq.w	r3, r3, #1
 8003d84:	3118      	adds	r1, #24
 8003d86:	428a      	cmp	r2, r1
 8003d88:	bf08      	it	eq
 8003d8a:	f043 0301 	orreq.w	r3, r3, #1
 8003d8e:	4925      	ldr	r1, [pc, #148]	; (8003e24 <HAL_DMA_Abort+0x4b0>)
 8003d90:	428a      	cmp	r2, r1
 8003d92:	bf08      	it	eq
 8003d94:	f043 0301 	orreq.w	r3, r3, #1
 8003d98:	3114      	adds	r1, #20
 8003d9a:	428a      	cmp	r2, r1
 8003d9c:	bf08      	it	eq
 8003d9e:	f043 0301 	orreq.w	r3, r3, #1
 8003da2:	3114      	adds	r1, #20
 8003da4:	428a      	cmp	r2, r1
 8003da6:	bf08      	it	eq
 8003da8:	f043 0301 	orreq.w	r3, r3, #1
 8003dac:	3114      	adds	r1, #20
 8003dae:	428a      	cmp	r2, r1
 8003db0:	bf08      	it	eq
 8003db2:	f043 0301 	orreq.w	r3, r3, #1
 8003db6:	3114      	adds	r1, #20
 8003db8:	428a      	cmp	r2, r1
 8003dba:	bf08      	it	eq
 8003dbc:	f043 0301 	orreq.w	r3, r3, #1
 8003dc0:	3114      	adds	r1, #20
 8003dc2:	428a      	cmp	r2, r1
 8003dc4:	bf08      	it	eq
 8003dc6:	f043 0301 	orreq.w	r3, r3, #1
 8003dca:	3114      	adds	r1, #20
 8003dcc:	428a      	cmp	r2, r1
 8003dce:	bf08      	it	eq
 8003dd0:	f043 0301 	orreq.w	r3, r3, #1
 8003dd4:	b913      	cbnz	r3, 8003ddc <HAL_DMA_Abort+0x468>
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_DMA_Abort+0x4b4>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10b      	bne.n	8003df4 <HAL_DMA_Abort+0x480>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dde:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003de0:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003de2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003de4:	b133      	cbz	r3, 8003df4 <HAL_DMA_Abort+0x480>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003df0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003df2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8003e00:	e5cb      	b.n	800399a <HAL_DMA_Abort+0x26>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e02:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4093      	lsls	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e76d      	b.n	8003cee <HAL_DMA_Abort+0x37a>
    return HAL_ERROR;
 8003e12:	2001      	movs	r0, #1
 8003e14:	e5c1      	b.n	800399a <HAL_DMA_Abort+0x26>
 8003e16:	bf00      	nop
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	400204b8 	.word	0x400204b8
 8003e24:	58025408 	.word	0x58025408
 8003e28:	58025494 	.word	0x58025494

08003e2c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f000 8162 	beq.w	80040f6 <HAL_DMA_Abort_IT+0x2ca>
{
 8003e32:	b508      	push	{r3, lr}
 8003e34:	4601      	mov	r1, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
}
 8003e46:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_DMA_Abort_IT+0xcc>)
 8003e4c:	482b      	ldr	r0, [pc, #172]	; (8003efc <HAL_DMA_Abort_IT+0xd0>)
 8003e4e:	4282      	cmp	r2, r0
 8003e50:	bf18      	it	ne
 8003e52:	429a      	cmpne	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	3018      	adds	r0, #24
 8003e5c:	4282      	cmp	r2, r0
 8003e5e:	bf08      	it	eq
 8003e60:	f043 0301 	orreq.w	r3, r3, #1
 8003e64:	3018      	adds	r0, #24
 8003e66:	4282      	cmp	r2, r0
 8003e68:	bf08      	it	eq
 8003e6a:	f043 0301 	orreq.w	r3, r3, #1
 8003e6e:	3018      	adds	r0, #24
 8003e70:	4282      	cmp	r2, r0
 8003e72:	bf08      	it	eq
 8003e74:	f043 0301 	orreq.w	r3, r3, #1
 8003e78:	3018      	adds	r0, #24
 8003e7a:	4282      	cmp	r2, r0
 8003e7c:	bf08      	it	eq
 8003e7e:	f043 0301 	orreq.w	r3, r3, #1
 8003e82:	3018      	adds	r0, #24
 8003e84:	4282      	cmp	r2, r0
 8003e86:	bf08      	it	eq
 8003e88:	f043 0301 	orreq.w	r3, r3, #1
 8003e8c:	3018      	adds	r0, #24
 8003e8e:	4282      	cmp	r2, r0
 8003e90:	bf08      	it	eq
 8003e92:	f043 0301 	orreq.w	r3, r3, #1
 8003e96:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003e9a:	4282      	cmp	r2, r0
 8003e9c:	bf08      	it	eq
 8003e9e:	f043 0301 	orreq.w	r3, r3, #1
 8003ea2:	3018      	adds	r0, #24
 8003ea4:	4282      	cmp	r2, r0
 8003ea6:	bf08      	it	eq
 8003ea8:	f043 0301 	orreq.w	r3, r3, #1
 8003eac:	3018      	adds	r0, #24
 8003eae:	4282      	cmp	r2, r0
 8003eb0:	bf08      	it	eq
 8003eb2:	f043 0301 	orreq.w	r3, r3, #1
 8003eb6:	3018      	adds	r0, #24
 8003eb8:	4282      	cmp	r2, r0
 8003eba:	bf08      	it	eq
 8003ebc:	f043 0301 	orreq.w	r3, r3, #1
 8003ec0:	3018      	adds	r0, #24
 8003ec2:	4282      	cmp	r2, r0
 8003ec4:	bf08      	it	eq
 8003ec6:	f043 0301 	orreq.w	r3, r3, #1
 8003eca:	3018      	adds	r0, #24
 8003ecc:	4282      	cmp	r2, r0
 8003ece:	bf08      	it	eq
 8003ed0:	f043 0301 	orreq.w	r3, r3, #1
 8003ed4:	3018      	adds	r0, #24
 8003ed6:	4282      	cmp	r2, r0
 8003ed8:	bf08      	it	eq
 8003eda:	f043 0301 	orreq.w	r3, r3, #1
 8003ede:	b913      	cbnz	r3, 8003ee6 <HAL_DMA_Abort_IT+0xba>
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_DMA_Abort_IT+0xd4>)
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10e      	bne.n	8003f04 <HAL_DMA_Abort_IT+0xd8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003ef4:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8003ef6:	e7a6      	b.n	8003e46 <HAL_DMA_Abort_IT+0x1a>
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	400204b8 	.word	0x400204b8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	f023 030e 	bic.w	r3, r3, #14
 8003f0a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8003f0c:	680a      	ldr	r2, [r1, #0]
 8003f0e:	4b7c      	ldr	r3, [pc, #496]	; (8004100 <HAL_DMA_Abort_IT+0x2d4>)
 8003f10:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 8003f14:	4282      	cmp	r2, r0
 8003f16:	bf18      	it	ne
 8003f18:	429a      	cmpne	r2, r3
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	3018      	adds	r0, #24
 8003f22:	4282      	cmp	r2, r0
 8003f24:	bf08      	it	eq
 8003f26:	f043 0301 	orreq.w	r3, r3, #1
 8003f2a:	3018      	adds	r0, #24
 8003f2c:	4282      	cmp	r2, r0
 8003f2e:	bf08      	it	eq
 8003f30:	f043 0301 	orreq.w	r3, r3, #1
 8003f34:	3018      	adds	r0, #24
 8003f36:	4282      	cmp	r2, r0
 8003f38:	bf08      	it	eq
 8003f3a:	f043 0301 	orreq.w	r3, r3, #1
 8003f3e:	3018      	adds	r0, #24
 8003f40:	4282      	cmp	r2, r0
 8003f42:	bf08      	it	eq
 8003f44:	f043 0301 	orreq.w	r3, r3, #1
 8003f48:	3018      	adds	r0, #24
 8003f4a:	4282      	cmp	r2, r0
 8003f4c:	bf08      	it	eq
 8003f4e:	f043 0301 	orreq.w	r3, r3, #1
 8003f52:	3018      	adds	r0, #24
 8003f54:	4282      	cmp	r2, r0
 8003f56:	bf08      	it	eq
 8003f58:	f043 0301 	orreq.w	r3, r3, #1
 8003f5c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003f60:	4282      	cmp	r2, r0
 8003f62:	bf08      	it	eq
 8003f64:	f043 0301 	orreq.w	r3, r3, #1
 8003f68:	3018      	adds	r0, #24
 8003f6a:	4282      	cmp	r2, r0
 8003f6c:	bf08      	it	eq
 8003f6e:	f043 0301 	orreq.w	r3, r3, #1
 8003f72:	3018      	adds	r0, #24
 8003f74:	4282      	cmp	r2, r0
 8003f76:	bf08      	it	eq
 8003f78:	f043 0301 	orreq.w	r3, r3, #1
 8003f7c:	3018      	adds	r0, #24
 8003f7e:	4282      	cmp	r2, r0
 8003f80:	bf08      	it	eq
 8003f82:	f043 0301 	orreq.w	r3, r3, #1
 8003f86:	3018      	adds	r0, #24
 8003f88:	4282      	cmp	r2, r0
 8003f8a:	bf08      	it	eq
 8003f8c:	f043 0301 	orreq.w	r3, r3, #1
 8003f90:	3018      	adds	r0, #24
 8003f92:	4282      	cmp	r2, r0
 8003f94:	bf08      	it	eq
 8003f96:	f043 0301 	orreq.w	r3, r3, #1
 8003f9a:	3018      	adds	r0, #24
 8003f9c:	4282      	cmp	r2, r0
 8003f9e:	bf08      	it	eq
 8003fa0:	f043 0301 	orreq.w	r3, r3, #1
 8003fa4:	b91b      	cbnz	r3, 8003fae <HAL_DMA_Abort_IT+0x182>
 8003fa6:	4b57      	ldr	r3, [pc, #348]	; (8004104 <HAL_DMA_Abort_IT+0x2d8>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 809f 	bne.w	80040ec <HAL_DMA_Abort_IT+0x2c0>
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fb6:	680a      	ldr	r2, [r1, #0]
 8003fb8:	4b51      	ldr	r3, [pc, #324]	; (8004100 <HAL_DMA_Abort_IT+0x2d4>)
 8003fba:	4853      	ldr	r0, [pc, #332]	; (8004108 <HAL_DMA_Abort_IT+0x2dc>)
 8003fbc:	4282      	cmp	r2, r0
 8003fbe:	bf18      	it	ne
 8003fc0:	429a      	cmpne	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	3018      	adds	r0, #24
 8003fca:	4282      	cmp	r2, r0
 8003fcc:	bf08      	it	eq
 8003fce:	f043 0301 	orreq.w	r3, r3, #1
 8003fd2:	3018      	adds	r0, #24
 8003fd4:	4282      	cmp	r2, r0
 8003fd6:	bf08      	it	eq
 8003fd8:	f043 0301 	orreq.w	r3, r3, #1
 8003fdc:	3018      	adds	r0, #24
 8003fde:	4282      	cmp	r2, r0
 8003fe0:	bf08      	it	eq
 8003fe2:	f043 0301 	orreq.w	r3, r3, #1
 8003fe6:	3018      	adds	r0, #24
 8003fe8:	4282      	cmp	r2, r0
 8003fea:	bf08      	it	eq
 8003fec:	f043 0301 	orreq.w	r3, r3, #1
 8003ff0:	3018      	adds	r0, #24
 8003ff2:	4282      	cmp	r2, r0
 8003ff4:	bf08      	it	eq
 8003ff6:	f043 0301 	orreq.w	r3, r3, #1
 8003ffa:	3018      	adds	r0, #24
 8003ffc:	4282      	cmp	r2, r0
 8003ffe:	bf08      	it	eq
 8004000:	f043 0301 	orreq.w	r3, r3, #1
 8004004:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004008:	4282      	cmp	r2, r0
 800400a:	bf08      	it	eq
 800400c:	f043 0301 	orreq.w	r3, r3, #1
 8004010:	3018      	adds	r0, #24
 8004012:	4282      	cmp	r2, r0
 8004014:	bf08      	it	eq
 8004016:	f043 0301 	orreq.w	r3, r3, #1
 800401a:	3018      	adds	r0, #24
 800401c:	4282      	cmp	r2, r0
 800401e:	bf08      	it	eq
 8004020:	f043 0301 	orreq.w	r3, r3, #1
 8004024:	3018      	adds	r0, #24
 8004026:	4282      	cmp	r2, r0
 8004028:	bf08      	it	eq
 800402a:	f043 0301 	orreq.w	r3, r3, #1
 800402e:	3018      	adds	r0, #24
 8004030:	4282      	cmp	r2, r0
 8004032:	bf08      	it	eq
 8004034:	f043 0301 	orreq.w	r3, r3, #1
 8004038:	3018      	adds	r0, #24
 800403a:	4282      	cmp	r2, r0
 800403c:	bf08      	it	eq
 800403e:	f043 0301 	orreq.w	r3, r3, #1
 8004042:	3018      	adds	r0, #24
 8004044:	4282      	cmp	r2, r0
 8004046:	bf08      	it	eq
 8004048:	f043 0301 	orreq.w	r3, r3, #1
 800404c:	3018      	adds	r0, #24
 800404e:	4282      	cmp	r2, r0
 8004050:	bf08      	it	eq
 8004052:	f043 0301 	orreq.w	r3, r3, #1
 8004056:	482d      	ldr	r0, [pc, #180]	; (800410c <HAL_DMA_Abort_IT+0x2e0>)
 8004058:	4282      	cmp	r2, r0
 800405a:	bf08      	it	eq
 800405c:	f043 0301 	orreq.w	r3, r3, #1
 8004060:	3014      	adds	r0, #20
 8004062:	4282      	cmp	r2, r0
 8004064:	bf08      	it	eq
 8004066:	f043 0301 	orreq.w	r3, r3, #1
 800406a:	3014      	adds	r0, #20
 800406c:	4282      	cmp	r2, r0
 800406e:	bf08      	it	eq
 8004070:	f043 0301 	orreq.w	r3, r3, #1
 8004074:	3014      	adds	r0, #20
 8004076:	4282      	cmp	r2, r0
 8004078:	bf08      	it	eq
 800407a:	f043 0301 	orreq.w	r3, r3, #1
 800407e:	3014      	adds	r0, #20
 8004080:	4282      	cmp	r2, r0
 8004082:	bf08      	it	eq
 8004084:	f043 0301 	orreq.w	r3, r3, #1
 8004088:	3014      	adds	r0, #20
 800408a:	4282      	cmp	r2, r0
 800408c:	bf08      	it	eq
 800408e:	f043 0301 	orreq.w	r3, r3, #1
 8004092:	3014      	adds	r0, #20
 8004094:	4282      	cmp	r2, r0
 8004096:	bf08      	it	eq
 8004098:	f043 0301 	orreq.w	r3, r3, #1
 800409c:	b913      	cbnz	r3, 80040a4 <HAL_DMA_Abort_IT+0x278>
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_DMA_Abort_IT+0x2e4>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d117      	bne.n	80040d4 <HAL_DMA_Abort_IT+0x2a8>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040a4:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	6d88      	ldr	r0, [r1, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040b0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	2301      	movs	r3, #1
 80040b8:	4093      	lsls	r3, r2
 80040ba:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80040be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80040c0:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80040c2:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 80040c4:	b133      	cbz	r3, 80040d4 <HAL_DMA_Abort_IT+0x2a8>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ce:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80040d0:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 80040d2:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80040da:	2300      	movs	r3, #0
 80040dc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80040e0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80040e2:	b153      	cbz	r3, 80040fa <HAL_DMA_Abort_IT+0x2ce>
        hdma->XferAbortCallback(hdma);
 80040e4:	4608      	mov	r0, r1
 80040e6:	4798      	blx	r3
  return HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e6ac      	b.n	8003e46 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e75f      	b.n	8003fb6 <HAL_DMA_Abort_IT+0x18a>
    return HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
}
 80040f8:	4770      	bx	lr
  return HAL_OK;
 80040fa:	2000      	movs	r0, #0
 80040fc:	e6a3      	b.n	8003e46 <HAL_DMA_Abort_IT+0x1a>
 80040fe:	bf00      	nop
 8004100:	40020010 	.word	0x40020010
 8004104:	400204b8 	.word	0x400204b8
 8004108:	40020028 	.word	0x40020028
 800410c:	58025408 	.word	0x58025408
 8004110:	58025494 	.word	0x58025494

08004114 <HAL_DMA_IRQHandler>:
{
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800411e:	4b95      	ldr	r3, [pc, #596]	; (8004374 <HAL_DMA_IRQHandler+0x260>)
 8004120:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004122:	6d86      	ldr	r6, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8004124:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8004126:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004128:	6802      	ldr	r2, [r0, #0]
 800412a:	4b93      	ldr	r3, [pc, #588]	; (8004378 <HAL_DMA_IRQHandler+0x264>)
 800412c:	4893      	ldr	r0, [pc, #588]	; (800437c <HAL_DMA_IRQHandler+0x268>)
 800412e:	4282      	cmp	r2, r0
 8004130:	bf18      	it	ne
 8004132:	429a      	cmpne	r2, r3
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	3018      	adds	r0, #24
 800413c:	4282      	cmp	r2, r0
 800413e:	bf08      	it	eq
 8004140:	f043 0301 	orreq.w	r3, r3, #1
 8004144:	3018      	adds	r0, #24
 8004146:	4282      	cmp	r2, r0
 8004148:	bf08      	it	eq
 800414a:	f043 0301 	orreq.w	r3, r3, #1
 800414e:	3018      	adds	r0, #24
 8004150:	4282      	cmp	r2, r0
 8004152:	bf08      	it	eq
 8004154:	f043 0301 	orreq.w	r3, r3, #1
 8004158:	3018      	adds	r0, #24
 800415a:	4282      	cmp	r2, r0
 800415c:	bf08      	it	eq
 800415e:	f043 0301 	orreq.w	r3, r3, #1
 8004162:	3018      	adds	r0, #24
 8004164:	4282      	cmp	r2, r0
 8004166:	bf08      	it	eq
 8004168:	f043 0301 	orreq.w	r3, r3, #1
 800416c:	3018      	adds	r0, #24
 800416e:	4282      	cmp	r2, r0
 8004170:	bf08      	it	eq
 8004172:	f043 0301 	orreq.w	r3, r3, #1
 8004176:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800417a:	4282      	cmp	r2, r0
 800417c:	bf08      	it	eq
 800417e:	f043 0301 	orreq.w	r3, r3, #1
 8004182:	3018      	adds	r0, #24
 8004184:	4282      	cmp	r2, r0
 8004186:	bf08      	it	eq
 8004188:	f043 0301 	orreq.w	r3, r3, #1
 800418c:	3018      	adds	r0, #24
 800418e:	4282      	cmp	r2, r0
 8004190:	bf08      	it	eq
 8004192:	f043 0301 	orreq.w	r3, r3, #1
 8004196:	3018      	adds	r0, #24
 8004198:	4282      	cmp	r2, r0
 800419a:	bf08      	it	eq
 800419c:	f043 0301 	orreq.w	r3, r3, #1
 80041a0:	3018      	adds	r0, #24
 80041a2:	4282      	cmp	r2, r0
 80041a4:	bf08      	it	eq
 80041a6:	f043 0301 	orreq.w	r3, r3, #1
 80041aa:	3018      	adds	r0, #24
 80041ac:	4282      	cmp	r2, r0
 80041ae:	bf08      	it	eq
 80041b0:	f043 0301 	orreq.w	r3, r3, #1
 80041b4:	3018      	adds	r0, #24
 80041b6:	4282      	cmp	r2, r0
 80041b8:	bf08      	it	eq
 80041ba:	f043 0301 	orreq.w	r3, r3, #1
 80041be:	b91b      	cbnz	r3, 80041c8 <HAL_DMA_IRQHandler+0xb4>
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_DMA_IRQHandler+0x26c>)
 80041c2:	429a      	cmp	r2, r3
 80041c4:	f040 8082 	bne.w	80042cc <HAL_DMA_IRQHandler+0x1b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2108      	movs	r1, #8
 80041d0:	4099      	lsls	r1, r3
 80041d2:	4229      	tst	r1, r5
 80041d4:	f000 83be 	beq.w	8004954 <HAL_DMA_IRQHandler+0x840>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041d8:	6811      	ldr	r1, [r2, #0]
 80041da:	f011 0f04 	tst.w	r1, #4
 80041de:	f000 83b9 	beq.w	8004954 <HAL_DMA_IRQHandler+0x840>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	6013      	str	r3, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	2308      	movs	r3, #8
 80041f2:	4093      	lsls	r3, r2
 80041f4:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa25 f203 	lsr.w	r2, r5, r3
 8004208:	f012 0f01 	tst.w	r2, #1
 800420c:	f000 80c8 	beq.w	80043a0 <HAL_DMA_IRQHandler+0x28c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	4959      	ldr	r1, [pc, #356]	; (8004378 <HAL_DMA_IRQHandler+0x264>)
 8004214:	4859      	ldr	r0, [pc, #356]	; (800437c <HAL_DMA_IRQHandler+0x268>)
 8004216:	4282      	cmp	r2, r0
 8004218:	bf18      	it	ne
 800421a:	428a      	cmpne	r2, r1
 800421c:	bf0c      	ite	eq
 800421e:	2101      	moveq	r1, #1
 8004220:	2100      	movne	r1, #0
 8004222:	3018      	adds	r0, #24
 8004224:	4282      	cmp	r2, r0
 8004226:	bf08      	it	eq
 8004228:	f041 0101 	orreq.w	r1, r1, #1
 800422c:	3018      	adds	r0, #24
 800422e:	4282      	cmp	r2, r0
 8004230:	bf08      	it	eq
 8004232:	f041 0101 	orreq.w	r1, r1, #1
 8004236:	3018      	adds	r0, #24
 8004238:	4282      	cmp	r2, r0
 800423a:	bf08      	it	eq
 800423c:	f041 0101 	orreq.w	r1, r1, #1
 8004240:	3018      	adds	r0, #24
 8004242:	4282      	cmp	r2, r0
 8004244:	bf08      	it	eq
 8004246:	f041 0101 	orreq.w	r1, r1, #1
 800424a:	3018      	adds	r0, #24
 800424c:	4282      	cmp	r2, r0
 800424e:	bf08      	it	eq
 8004250:	f041 0101 	orreq.w	r1, r1, #1
 8004254:	3018      	adds	r0, #24
 8004256:	4282      	cmp	r2, r0
 8004258:	bf08      	it	eq
 800425a:	f041 0101 	orreq.w	r1, r1, #1
 800425e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004262:	4282      	cmp	r2, r0
 8004264:	bf08      	it	eq
 8004266:	f041 0101 	orreq.w	r1, r1, #1
 800426a:	3018      	adds	r0, #24
 800426c:	4282      	cmp	r2, r0
 800426e:	bf08      	it	eq
 8004270:	f041 0101 	orreq.w	r1, r1, #1
 8004274:	3018      	adds	r0, #24
 8004276:	4282      	cmp	r2, r0
 8004278:	bf08      	it	eq
 800427a:	f041 0101 	orreq.w	r1, r1, #1
 800427e:	3018      	adds	r0, #24
 8004280:	4282      	cmp	r2, r0
 8004282:	bf08      	it	eq
 8004284:	f041 0101 	orreq.w	r1, r1, #1
 8004288:	3018      	adds	r0, #24
 800428a:	4282      	cmp	r2, r0
 800428c:	bf08      	it	eq
 800428e:	f041 0101 	orreq.w	r1, r1, #1
 8004292:	3018      	adds	r0, #24
 8004294:	4282      	cmp	r2, r0
 8004296:	bf08      	it	eq
 8004298:	f041 0101 	orreq.w	r1, r1, #1
 800429c:	3018      	adds	r0, #24
 800429e:	4282      	cmp	r2, r0
 80042a0:	bf08      	it	eq
 80042a2:	f041 0101 	orreq.w	r1, r1, #1
 80042a6:	b911      	cbnz	r1, 80042ae <HAL_DMA_IRQHandler+0x19a>
 80042a8:	4935      	ldr	r1, [pc, #212]	; (8004380 <HAL_DMA_IRQHandler+0x26c>)
 80042aa:	428a      	cmp	r2, r1
 80042ac:	d151      	bne.n	8004352 <HAL_DMA_IRQHandler+0x23e>
 80042ae:	6952      	ldr	r2, [r2, #20]
 80042b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042b4:	d16c      	bne.n	8004390 <HAL_DMA_IRQHandler+0x27c>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80042b8:	f001 011f 	and.w	r1, r1, #31
 80042bc:	2304      	movs	r3, #4
 80042be:	fa03 f101 	lsl.w	r1, r3, r1
 80042c2:	420d      	tst	r5, r1
 80042c4:	f000 80d9 	beq.w	800447a <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	e353      	b.n	8004974 <HAL_DMA_IRQHandler+0x860>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042cc:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <HAL_DMA_IRQHandler+0x270>)
 80042ce:	482e      	ldr	r0, [pc, #184]	; (8004388 <HAL_DMA_IRQHandler+0x274>)
 80042d0:	4282      	cmp	r2, r0
 80042d2:	bf18      	it	ne
 80042d4:	429a      	cmpne	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	3014      	adds	r0, #20
 80042de:	4282      	cmp	r2, r0
 80042e0:	bf08      	it	eq
 80042e2:	f043 0301 	orreq.w	r3, r3, #1
 80042e6:	3014      	adds	r0, #20
 80042e8:	4282      	cmp	r2, r0
 80042ea:	bf08      	it	eq
 80042ec:	f043 0301 	orreq.w	r3, r3, #1
 80042f0:	3014      	adds	r0, #20
 80042f2:	4282      	cmp	r2, r0
 80042f4:	bf08      	it	eq
 80042f6:	f043 0301 	orreq.w	r3, r3, #1
 80042fa:	3014      	adds	r0, #20
 80042fc:	4282      	cmp	r2, r0
 80042fe:	bf08      	it	eq
 8004300:	f043 0301 	orreq.w	r3, r3, #1
 8004304:	3014      	adds	r0, #20
 8004306:	4282      	cmp	r2, r0
 8004308:	bf08      	it	eq
 800430a:	f043 0301 	orreq.w	r3, r3, #1
 800430e:	b91b      	cbnz	r3, 8004318 <HAL_DMA_IRQHandler+0x204>
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_DMA_IRQHandler+0x278>)
 8004312:	429a      	cmp	r2, r3
 8004314:	f040 81fd 	bne.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004318:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800431a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800431c:	f000 001f 	and.w	r0, r0, #31
 8004320:	2504      	movs	r5, #4
 8004322:	4085      	lsls	r5, r0
 8004324:	420d      	tst	r5, r1
 8004326:	f000 8262 	beq.w	80047ee <HAL_DMA_IRQHandler+0x6da>
 800432a:	f013 0f04 	tst.w	r3, #4
 800432e:	f000 825e 	beq.w	80047ee <HAL_DMA_IRQHandler+0x6da>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004332:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004334:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004338:	f000 81f8 	beq.w	800472c <HAL_DMA_IRQHandler+0x618>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800433c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004340:	f040 81ee 	bne.w	8004720 <HAL_DMA_IRQHandler+0x60c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004344:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 81e3 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1HalfCpltCallback(hdma);
 800434c:	4620      	mov	r0, r4
 800434e:	4798      	blx	r3
 8004350:	e1df      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004352:	6811      	ldr	r1, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004354:	2104      	movs	r1, #4
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	422b      	tst	r3, r5
 800435c:	d17a      	bne.n	8004454 <HAL_DMA_IRQHandler+0x340>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800435e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2110      	movs	r1, #16
 8004366:	4099      	lsls	r1, r3
 8004368:	420d      	tst	r5, r1
 800436a:	f000 8310 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	e07a      	b.n	8004468 <HAL_DMA_IRQHandler+0x354>
 8004372:	bf00      	nop
 8004374:	24000000 	.word	0x24000000
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	400204b8 	.word	0x400204b8
 8004384:	58025408 	.word	0x58025408
 8004388:	5802541c 	.word	0x5802541c
 800438c:	58025494 	.word	0x58025494
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004390:	2201      	movs	r2, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80043a2:	f001 011f 	and.w	r1, r1, #31
 80043a6:	2304      	movs	r3, #4
 80043a8:	fa03 f101 	lsl.w	r1, r3, r1
 80043ac:	4229      	tst	r1, r5
 80043ae:	d064      	beq.n	800447a <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_DMA_IRQHandler+0x4d8>)
 80043b4:	488e      	ldr	r0, [pc, #568]	; (80045f0 <HAL_DMA_IRQHandler+0x4dc>)
 80043b6:	4282      	cmp	r2, r0
 80043b8:	bf18      	it	ne
 80043ba:	429a      	cmpne	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	3018      	adds	r0, #24
 80043c4:	4282      	cmp	r2, r0
 80043c6:	bf08      	it	eq
 80043c8:	f043 0301 	orreq.w	r3, r3, #1
 80043cc:	3018      	adds	r0, #24
 80043ce:	4282      	cmp	r2, r0
 80043d0:	bf08      	it	eq
 80043d2:	f043 0301 	orreq.w	r3, r3, #1
 80043d6:	3018      	adds	r0, #24
 80043d8:	4282      	cmp	r2, r0
 80043da:	bf08      	it	eq
 80043dc:	f043 0301 	orreq.w	r3, r3, #1
 80043e0:	3018      	adds	r0, #24
 80043e2:	4282      	cmp	r2, r0
 80043e4:	bf08      	it	eq
 80043e6:	f043 0301 	orreq.w	r3, r3, #1
 80043ea:	3018      	adds	r0, #24
 80043ec:	4282      	cmp	r2, r0
 80043ee:	bf08      	it	eq
 80043f0:	f043 0301 	orreq.w	r3, r3, #1
 80043f4:	3018      	adds	r0, #24
 80043f6:	4282      	cmp	r2, r0
 80043f8:	bf08      	it	eq
 80043fa:	f043 0301 	orreq.w	r3, r3, #1
 80043fe:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004402:	4282      	cmp	r2, r0
 8004404:	bf08      	it	eq
 8004406:	f043 0301 	orreq.w	r3, r3, #1
 800440a:	3018      	adds	r0, #24
 800440c:	4282      	cmp	r2, r0
 800440e:	bf08      	it	eq
 8004410:	f043 0301 	orreq.w	r3, r3, #1
 8004414:	3018      	adds	r0, #24
 8004416:	4282      	cmp	r2, r0
 8004418:	bf08      	it	eq
 800441a:	f043 0301 	orreq.w	r3, r3, #1
 800441e:	3018      	adds	r0, #24
 8004420:	4282      	cmp	r2, r0
 8004422:	bf08      	it	eq
 8004424:	f043 0301 	orreq.w	r3, r3, #1
 8004428:	3018      	adds	r0, #24
 800442a:	4282      	cmp	r2, r0
 800442c:	bf08      	it	eq
 800442e:	f043 0301 	orreq.w	r3, r3, #1
 8004432:	3018      	adds	r0, #24
 8004434:	4282      	cmp	r2, r0
 8004436:	bf08      	it	eq
 8004438:	f043 0301 	orreq.w	r3, r3, #1
 800443c:	3018      	adds	r0, #24
 800443e:	4282      	cmp	r2, r0
 8004440:	bf08      	it	eq
 8004442:	f043 0301 	orreq.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8294 	bne.w	8004974 <HAL_DMA_IRQHandler+0x860>
 800444c:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <HAL_DMA_IRQHandler+0x4e0>)
 800444e:	429a      	cmp	r2, r3
 8004450:	f000 8290 	beq.w	8004974 <HAL_DMA_IRQHandler+0x860>
 8004454:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004456:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2110      	movs	r1, #16
 800445e:	4099      	lsls	r1, r3
 8004460:	420d      	tst	r5, r1
 8004462:	f000 8294 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800446e:	e062      	b.n	8004536 <HAL_DMA_IRQHandler+0x422>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004470:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004472:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800447a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800447c:	f001 011f 	and.w	r1, r1, #31
 8004480:	2310      	movs	r3, #16
 8004482:	fa03 f101 	lsl.w	r1, r3, r1
 8004486:	4229      	tst	r1, r5
 8004488:	f000 8281 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004492:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004496:	4856      	ldr	r0, [pc, #344]	; (80045f0 <HAL_DMA_IRQHandler+0x4dc>)
 8004498:	4282      	cmp	r2, r0
 800449a:	bf18      	it	ne
 800449c:	429a      	cmpne	r2, r3
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	3018      	adds	r0, #24
 80044a6:	4282      	cmp	r2, r0
 80044a8:	bf08      	it	eq
 80044aa:	f043 0301 	orreq.w	r3, r3, #1
 80044ae:	3018      	adds	r0, #24
 80044b0:	4282      	cmp	r2, r0
 80044b2:	bf08      	it	eq
 80044b4:	f043 0301 	orreq.w	r3, r3, #1
 80044b8:	3018      	adds	r0, #24
 80044ba:	4282      	cmp	r2, r0
 80044bc:	bf08      	it	eq
 80044be:	f043 0301 	orreq.w	r3, r3, #1
 80044c2:	3018      	adds	r0, #24
 80044c4:	4282      	cmp	r2, r0
 80044c6:	bf08      	it	eq
 80044c8:	f043 0301 	orreq.w	r3, r3, #1
 80044cc:	3018      	adds	r0, #24
 80044ce:	4282      	cmp	r2, r0
 80044d0:	bf08      	it	eq
 80044d2:	f043 0301 	orreq.w	r3, r3, #1
 80044d6:	3018      	adds	r0, #24
 80044d8:	4282      	cmp	r2, r0
 80044da:	bf08      	it	eq
 80044dc:	f043 0301 	orreq.w	r3, r3, #1
 80044e0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80044e4:	4282      	cmp	r2, r0
 80044e6:	bf08      	it	eq
 80044e8:	f043 0301 	orreq.w	r3, r3, #1
 80044ec:	3018      	adds	r0, #24
 80044ee:	4282      	cmp	r2, r0
 80044f0:	bf08      	it	eq
 80044f2:	f043 0301 	orreq.w	r3, r3, #1
 80044f6:	3018      	adds	r0, #24
 80044f8:	4282      	cmp	r2, r0
 80044fa:	bf08      	it	eq
 80044fc:	f043 0301 	orreq.w	r3, r3, #1
 8004500:	3018      	adds	r0, #24
 8004502:	4282      	cmp	r2, r0
 8004504:	bf08      	it	eq
 8004506:	f043 0301 	orreq.w	r3, r3, #1
 800450a:	3018      	adds	r0, #24
 800450c:	4282      	cmp	r2, r0
 800450e:	bf08      	it	eq
 8004510:	f043 0301 	orreq.w	r3, r3, #1
 8004514:	3018      	adds	r0, #24
 8004516:	4282      	cmp	r2, r0
 8004518:	bf08      	it	eq
 800451a:	f043 0301 	orreq.w	r3, r3, #1
 800451e:	3018      	adds	r0, #24
 8004520:	4282      	cmp	r2, r0
 8004522:	bf08      	it	eq
 8004524:	f043 0301 	orreq.w	r3, r3, #1
 8004528:	b913      	cbnz	r3, 8004530 <HAL_DMA_IRQHandler+0x41c>
 800452a:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <HAL_DMA_IRQHandler+0x4e0>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d19b      	bne.n	8004468 <HAL_DMA_IRQHandler+0x354>
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8229 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800453c:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004546:	d011      	beq.n	800456c <HAL_DMA_IRQHandler+0x458>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800454e:	d106      	bne.n	800455e <HAL_DMA_IRQHandler+0x44a>
            if(hdma->XferHalfCpltCallback != NULL)
 8004550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 821b 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
              hdma->XferHalfCpltCallback(hdma);
 8004558:	4620      	mov	r0, r4
 800455a:	4798      	blx	r3
 800455c:	e217      	b.n	800498e <HAL_DMA_IRQHandler+0x87a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800455e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8214 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
              hdma->XferM1HalfCpltCallback(hdma);
 8004566:	4620      	mov	r0, r4
 8004568:	4798      	blx	r3
 800456a:	e210      	b.n	800498e <HAL_DMA_IRQHandler+0x87a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004572:	d103      	bne.n	800457c <HAL_DMA_IRQHandler+0x468>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f022 0208 	bic.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800457c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8205 	beq.w	800498e <HAL_DMA_IRQHandler+0x87a>
            hdma->XferHalfCpltCallback(hdma);
 8004584:	4620      	mov	r0, r4
 8004586:	4798      	blx	r3
 8004588:	e201      	b.n	800498e <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800458a:	680b      	ldr	r3, [r1, #0]
 800458c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004590:	e259      	b.n	8004a46 <HAL_DMA_IRQHandler+0x932>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f023 0316 	bic.w	r3, r3, #22
 800459a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	6953      	ldr	r3, [r2, #20]
 80045a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a8:	b1bb      	cbz	r3, 80045da <HAL_DMA_IRQHandler+0x4c6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	f023 0308 	bic.w	r3, r3, #8
 80045b2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80045b6:	f003 021f 	and.w	r2, r3, #31
 80045ba:	233f      	movs	r3, #63	; 0x3f
 80045bc:	4093      	lsls	r3, r2
 80045be:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80045c6:	2300      	movs	r3, #0
 80045c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80045cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809f 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferAbortCallback(hdma);
 80045d4:	4620      	mov	r0, r4
 80045d6:	4798      	blx	r3
 80045d8:	e09b      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e4      	bne.n	80045aa <HAL_DMA_IRQHandler+0x496>
 80045e0:	e7e8      	b.n	80045b4 <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferCpltCallback != NULL)
 80045e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045e4:	b1d3      	cbz	r3, 800461c <HAL_DMA_IRQHandler+0x508>
              hdma->XferCpltCallback(hdma);
 80045e6:	4620      	mov	r0, r4
 80045e8:	4798      	blx	r3
 80045ea:	e017      	b.n	800461c <HAL_DMA_IRQHandler+0x508>
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	400204b8 	.word	0x400204b8
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80045fe:	d109      	bne.n	8004614 <HAL_DMA_IRQHandler+0x500>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f022 0210 	bic.w	r2, r2, #16
 8004606:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004608:	2301      	movs	r3, #1
 800460a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800460e:	2300      	movs	r3, #0
 8004610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8004614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004616:	b10b      	cbz	r3, 800461c <HAL_DMA_IRQHandler+0x508>
            hdma->XferCpltCallback(hdma);
 8004618:	4620      	mov	r0, r4
 800461a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800461c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800461e:	2b00      	cmp	r3, #0
 8004620:	d077      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004624:	f013 0f01 	tst.w	r3, #1
 8004628:	d06f      	beq.n	800470a <HAL_DMA_IRQHandler+0x5f6>
        hdma->State = HAL_DMA_STATE_ABORT;
 800462a:	2304      	movs	r3, #4
 800462c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	4b7e      	ldr	r3, [pc, #504]	; (800482c <HAL_DMA_IRQHandler+0x718>)
 8004634:	497e      	ldr	r1, [pc, #504]	; (8004830 <HAL_DMA_IRQHandler+0x71c>)
 8004636:	428a      	cmp	r2, r1
 8004638:	bf18      	it	ne
 800463a:	429a      	cmpne	r2, r3
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	3118      	adds	r1, #24
 8004644:	428a      	cmp	r2, r1
 8004646:	bf08      	it	eq
 8004648:	f043 0301 	orreq.w	r3, r3, #1
 800464c:	3118      	adds	r1, #24
 800464e:	428a      	cmp	r2, r1
 8004650:	bf08      	it	eq
 8004652:	f043 0301 	orreq.w	r3, r3, #1
 8004656:	3118      	adds	r1, #24
 8004658:	428a      	cmp	r2, r1
 800465a:	bf08      	it	eq
 800465c:	f043 0301 	orreq.w	r3, r3, #1
 8004660:	3118      	adds	r1, #24
 8004662:	428a      	cmp	r2, r1
 8004664:	bf08      	it	eq
 8004666:	f043 0301 	orreq.w	r3, r3, #1
 800466a:	3118      	adds	r1, #24
 800466c:	428a      	cmp	r2, r1
 800466e:	bf08      	it	eq
 8004670:	f043 0301 	orreq.w	r3, r3, #1
 8004674:	3118      	adds	r1, #24
 8004676:	428a      	cmp	r2, r1
 8004678:	bf08      	it	eq
 800467a:	f043 0301 	orreq.w	r3, r3, #1
 800467e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004682:	428a      	cmp	r2, r1
 8004684:	bf08      	it	eq
 8004686:	f043 0301 	orreq.w	r3, r3, #1
 800468a:	3118      	adds	r1, #24
 800468c:	428a      	cmp	r2, r1
 800468e:	bf08      	it	eq
 8004690:	f043 0301 	orreq.w	r3, r3, #1
 8004694:	3118      	adds	r1, #24
 8004696:	428a      	cmp	r2, r1
 8004698:	bf08      	it	eq
 800469a:	f043 0301 	orreq.w	r3, r3, #1
 800469e:	3118      	adds	r1, #24
 80046a0:	428a      	cmp	r2, r1
 80046a2:	bf08      	it	eq
 80046a4:	f043 0301 	orreq.w	r3, r3, #1
 80046a8:	3118      	adds	r1, #24
 80046aa:	428a      	cmp	r2, r1
 80046ac:	bf08      	it	eq
 80046ae:	f043 0301 	orreq.w	r3, r3, #1
 80046b2:	3118      	adds	r1, #24
 80046b4:	428a      	cmp	r2, r1
 80046b6:	bf08      	it	eq
 80046b8:	f043 0301 	orreq.w	r3, r3, #1
 80046bc:	3118      	adds	r1, #24
 80046be:	428a      	cmp	r2, r1
 80046c0:	bf08      	it	eq
 80046c2:	f043 0301 	orreq.w	r3, r3, #1
 80046c6:	b913      	cbnz	r3, 80046ce <HAL_DMA_IRQHandler+0x5ba>
 80046c8:	4b5a      	ldr	r3, [pc, #360]	; (8004834 <HAL_DMA_IRQHandler+0x720>)
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d123      	bne.n	8004716 <HAL_DMA_IRQHandler+0x602>
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_DMA_IRQHandler+0x724>)
 80046d8:	fba3 3707 	umull	r3, r7, r3, r7
 80046dc:	0abf      	lsrs	r7, r7, #10
          if (++count > timeout)
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	42bb      	cmp	r3, r7
 80046e6:	d804      	bhi.n	80046f2 <HAL_DMA_IRQHandler+0x5de>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f013 0f01 	tst.w	r3, #1
 80046f0:	d1f5      	bne.n	80046de <HAL_DMA_IRQHandler+0x5ca>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f013 0f01 	tst.w	r3, #1
          hdma->State = HAL_DMA_STATE_ERROR;
 80046fa:	bf14      	ite	ne
 80046fc:	2303      	movne	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80046fe:	2301      	moveq	r3, #1
 8004700:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004704:	2300      	movs	r3, #0
 8004706:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800470a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800470c:	b10b      	cbz	r3, 8004712 <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 800470e:	4620      	mov	r0, r4
 8004710:	4798      	blx	r3
}
 8004712:	b003      	add	sp, #12
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e7da      	b.n	80046d6 <HAL_DMA_IRQHandler+0x5c2>
          if(hdma->XferHalfCpltCallback != NULL)
 8004720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f5      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferHalfCpltCallback(hdma);
 8004726:	4620      	mov	r0, r4
 8004728:	4798      	blx	r3
 800472a:	e7f2      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800472c:	f013 0f20 	tst.w	r3, #32
 8004730:	d152      	bne.n	80047d8 <HAL_DMA_IRQHandler+0x6c4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <HAL_DMA_IRQHandler+0x718>)
 8004736:	493e      	ldr	r1, [pc, #248]	; (8004830 <HAL_DMA_IRQHandler+0x71c>)
 8004738:	428a      	cmp	r2, r1
 800473a:	bf18      	it	ne
 800473c:	429a      	cmpne	r2, r3
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	3118      	adds	r1, #24
 8004746:	428a      	cmp	r2, r1
 8004748:	bf08      	it	eq
 800474a:	f043 0301 	orreq.w	r3, r3, #1
 800474e:	3118      	adds	r1, #24
 8004750:	428a      	cmp	r2, r1
 8004752:	bf08      	it	eq
 8004754:	f043 0301 	orreq.w	r3, r3, #1
 8004758:	3118      	adds	r1, #24
 800475a:	428a      	cmp	r2, r1
 800475c:	bf08      	it	eq
 800475e:	f043 0301 	orreq.w	r3, r3, #1
 8004762:	3118      	adds	r1, #24
 8004764:	428a      	cmp	r2, r1
 8004766:	bf08      	it	eq
 8004768:	f043 0301 	orreq.w	r3, r3, #1
 800476c:	3118      	adds	r1, #24
 800476e:	428a      	cmp	r2, r1
 8004770:	bf08      	it	eq
 8004772:	f043 0301 	orreq.w	r3, r3, #1
 8004776:	3118      	adds	r1, #24
 8004778:	428a      	cmp	r2, r1
 800477a:	bf08      	it	eq
 800477c:	f043 0301 	orreq.w	r3, r3, #1
 8004780:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004784:	428a      	cmp	r2, r1
 8004786:	bf08      	it	eq
 8004788:	f043 0301 	orreq.w	r3, r3, #1
 800478c:	3118      	adds	r1, #24
 800478e:	428a      	cmp	r2, r1
 8004790:	bf08      	it	eq
 8004792:	f043 0301 	orreq.w	r3, r3, #1
 8004796:	3118      	adds	r1, #24
 8004798:	428a      	cmp	r2, r1
 800479a:	bf08      	it	eq
 800479c:	f043 0301 	orreq.w	r3, r3, #1
 80047a0:	3118      	adds	r1, #24
 80047a2:	428a      	cmp	r2, r1
 80047a4:	bf08      	it	eq
 80047a6:	f043 0301 	orreq.w	r3, r3, #1
 80047aa:	3118      	adds	r1, #24
 80047ac:	428a      	cmp	r2, r1
 80047ae:	bf08      	it	eq
 80047b0:	f043 0301 	orreq.w	r3, r3, #1
 80047b4:	3118      	adds	r1, #24
 80047b6:	428a      	cmp	r2, r1
 80047b8:	bf08      	it	eq
 80047ba:	f043 0301 	orreq.w	r3, r3, #1
 80047be:	3118      	adds	r1, #24
 80047c0:	428a      	cmp	r2, r1
 80047c2:	bf08      	it	eq
 80047c4:	f043 0301 	orreq.w	r3, r3, #1
 80047c8:	b913      	cbnz	r3, 80047d0 <HAL_DMA_IRQHandler+0x6bc>
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_DMA_IRQHandler+0x720>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d109      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x6d0>
 80047d0:	6813      	ldr	r3, [r2, #0]
 80047d2:	f023 0308 	bic.w	r3, r3, #8
 80047d6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80047d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d099      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferHalfCpltCallback(hdma);
 80047de:	4620      	mov	r0, r4
 80047e0:	4798      	blx	r3
 80047e2:	e796      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	e7f4      	b.n	80047d8 <HAL_DMA_IRQHandler+0x6c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047ee:	2502      	movs	r5, #2
 80047f0:	4085      	lsls	r5, r0
 80047f2:	420d      	tst	r5, r1
 80047f4:	f000 808a 	beq.w	800490c <HAL_DMA_IRQHandler+0x7f8>
 80047f8:	f013 0f02 	tst.w	r3, #2
 80047fc:	f000 8086 	beq.w	800490c <HAL_DMA_IRQHandler+0x7f8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004800:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004802:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004806:	d019      	beq.n	800483c <HAL_DMA_IRQHandler+0x728>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004808:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800480c:	d106      	bne.n	800481c <HAL_DMA_IRQHandler+0x708>
          if(hdma->XferM1CpltCallback != NULL)
 800480e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004810:	2b00      	cmp	r3, #0
 8004812:	f43f af7e 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1CpltCallback(hdma);
 8004816:	4620      	mov	r0, r4
 8004818:	4798      	blx	r3
 800481a:	e77a      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
          if(hdma->XferCpltCallback != NULL)
 800481c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	f43f af77 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferCpltCallback(hdma);
 8004824:	4620      	mov	r0, r4
 8004826:	4798      	blx	r3
 8004828:	e773      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
 800482a:	bf00      	nop
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	400204b8 	.word	0x400204b8
 8004838:	1b4e81b5 	.word	0x1b4e81b5
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800483c:	f013 0f20 	tst.w	r3, #32
 8004840:	d158      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x7e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	4b8e      	ldr	r3, [pc, #568]	; (8004a80 <HAL_DMA_IRQHandler+0x96c>)
 8004846:	498f      	ldr	r1, [pc, #572]	; (8004a84 <HAL_DMA_IRQHandler+0x970>)
 8004848:	428a      	cmp	r2, r1
 800484a:	bf18      	it	ne
 800484c:	429a      	cmpne	r2, r3
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	3118      	adds	r1, #24
 8004856:	428a      	cmp	r2, r1
 8004858:	bf08      	it	eq
 800485a:	f043 0301 	orreq.w	r3, r3, #1
 800485e:	3118      	adds	r1, #24
 8004860:	428a      	cmp	r2, r1
 8004862:	bf08      	it	eq
 8004864:	f043 0301 	orreq.w	r3, r3, #1
 8004868:	3118      	adds	r1, #24
 800486a:	428a      	cmp	r2, r1
 800486c:	bf08      	it	eq
 800486e:	f043 0301 	orreq.w	r3, r3, #1
 8004872:	3118      	adds	r1, #24
 8004874:	428a      	cmp	r2, r1
 8004876:	bf08      	it	eq
 8004878:	f043 0301 	orreq.w	r3, r3, #1
 800487c:	3118      	adds	r1, #24
 800487e:	428a      	cmp	r2, r1
 8004880:	bf08      	it	eq
 8004882:	f043 0301 	orreq.w	r3, r3, #1
 8004886:	3118      	adds	r1, #24
 8004888:	428a      	cmp	r2, r1
 800488a:	bf08      	it	eq
 800488c:	f043 0301 	orreq.w	r3, r3, #1
 8004890:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004894:	428a      	cmp	r2, r1
 8004896:	bf08      	it	eq
 8004898:	f043 0301 	orreq.w	r3, r3, #1
 800489c:	3118      	adds	r1, #24
 800489e:	428a      	cmp	r2, r1
 80048a0:	bf08      	it	eq
 80048a2:	f043 0301 	orreq.w	r3, r3, #1
 80048a6:	3118      	adds	r1, #24
 80048a8:	428a      	cmp	r2, r1
 80048aa:	bf08      	it	eq
 80048ac:	f043 0301 	orreq.w	r3, r3, #1
 80048b0:	3118      	adds	r1, #24
 80048b2:	428a      	cmp	r2, r1
 80048b4:	bf08      	it	eq
 80048b6:	f043 0301 	orreq.w	r3, r3, #1
 80048ba:	3118      	adds	r1, #24
 80048bc:	428a      	cmp	r2, r1
 80048be:	bf08      	it	eq
 80048c0:	f043 0301 	orreq.w	r3, r3, #1
 80048c4:	3118      	adds	r1, #24
 80048c6:	428a      	cmp	r2, r1
 80048c8:	bf08      	it	eq
 80048ca:	f043 0301 	orreq.w	r3, r3, #1
 80048ce:	3118      	adds	r1, #24
 80048d0:	428a      	cmp	r2, r1
 80048d2:	bf08      	it	eq
 80048d4:	f043 0301 	orreq.w	r3, r3, #1
 80048d8:	b913      	cbnz	r3, 80048e0 <HAL_DMA_IRQHandler+0x7cc>
 80048da:	4b6b      	ldr	r3, [pc, #428]	; (8004a88 <HAL_DMA_IRQHandler+0x974>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d110      	bne.n	8004902 <HAL_DMA_IRQHandler+0x7ee>
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	f023 0314 	bic.w	r3, r3, #20
 80048e6:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80048f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f43f af0b 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferCpltCallback(hdma);
 80048fc:	4620      	mov	r0, r4
 80048fe:	4798      	blx	r3
 8004900:	e707      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	f023 030a 	bic.w	r3, r3, #10
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e7ed      	b.n	80048e8 <HAL_DMA_IRQHandler+0x7d4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800490c:	2508      	movs	r5, #8
 800490e:	fa05 f000 	lsl.w	r0, r5, r0
 8004912:	4208      	tst	r0, r1
 8004914:	f43f aefd 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
 8004918:	f013 0f08 	tst.w	r3, #8
 800491c:	f43f aef9 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	f023 030e 	bic.w	r3, r3, #14
 8004926:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004928:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	6073      	str	r3, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004936:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8004938:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800493c:	2300      	movs	r3, #0
 800493e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8004942:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004944:	2b00      	cmp	r3, #0
 8004946:	f43f aee4 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 800494a:	4620      	mov	r0, r4
 800494c:	4798      	blx	r3
  }
 800494e:	e6e0      	b.n	8004712 <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	e5ed      	b.n	8004530 <HAL_DMA_IRQHandler+0x41c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004954:	fa25 f103 	lsr.w	r1, r5, r3
 8004958:	f011 0f01 	tst.w	r1, #1
 800495c:	f47f aca7 	bne.w	80042ae <HAL_DMA_IRQHandler+0x19a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004960:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004962:	f001 011f 	and.w	r1, r1, #31
 8004966:	2304      	movs	r3, #4
 8004968:	fa03 f101 	lsl.w	r1, r3, r1
 800496c:	420d      	tst	r5, r1
 800496e:	f43f ad84 	beq.w	800447a <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	f013 0f02 	tst.w	r3, #2
 800497a:	f47f ad79 	bne.w	8004470 <HAL_DMA_IRQHandler+0x35c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800497e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004980:	f001 011f 	and.w	r1, r1, #31
 8004984:	2310      	movs	r3, #16
 8004986:	fa03 f101 	lsl.w	r1, r3, r1
 800498a:	420d      	tst	r5, r1
 800498c:	d1e0      	bne.n	8004950 <HAL_DMA_IRQHandler+0x83c>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800498e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004990:	f002 021f 	and.w	r2, r2, #31
 8004994:	2320      	movs	r3, #32
 8004996:	fa03 f202 	lsl.w	r2, r3, r2
 800499a:	422a      	tst	r2, r5
 800499c:	f43f ae3e 	beq.w	800461c <HAL_DMA_IRQHandler+0x508>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049a0:	6821      	ldr	r1, [r4, #0]
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_DMA_IRQHandler+0x96c>)
 80049a4:	4837      	ldr	r0, [pc, #220]	; (8004a84 <HAL_DMA_IRQHandler+0x970>)
 80049a6:	4281      	cmp	r1, r0
 80049a8:	bf18      	it	ne
 80049aa:	4299      	cmpne	r1, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	3018      	adds	r0, #24
 80049b4:	4281      	cmp	r1, r0
 80049b6:	bf08      	it	eq
 80049b8:	f043 0301 	orreq.w	r3, r3, #1
 80049bc:	3018      	adds	r0, #24
 80049be:	4281      	cmp	r1, r0
 80049c0:	bf08      	it	eq
 80049c2:	f043 0301 	orreq.w	r3, r3, #1
 80049c6:	3018      	adds	r0, #24
 80049c8:	4281      	cmp	r1, r0
 80049ca:	bf08      	it	eq
 80049cc:	f043 0301 	orreq.w	r3, r3, #1
 80049d0:	3018      	adds	r0, #24
 80049d2:	4281      	cmp	r1, r0
 80049d4:	bf08      	it	eq
 80049d6:	f043 0301 	orreq.w	r3, r3, #1
 80049da:	3018      	adds	r0, #24
 80049dc:	4281      	cmp	r1, r0
 80049de:	bf08      	it	eq
 80049e0:	f043 0301 	orreq.w	r3, r3, #1
 80049e4:	3018      	adds	r0, #24
 80049e6:	4281      	cmp	r1, r0
 80049e8:	bf08      	it	eq
 80049ea:	f043 0301 	orreq.w	r3, r3, #1
 80049ee:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80049f2:	4281      	cmp	r1, r0
 80049f4:	bf08      	it	eq
 80049f6:	f043 0301 	orreq.w	r3, r3, #1
 80049fa:	3018      	adds	r0, #24
 80049fc:	4281      	cmp	r1, r0
 80049fe:	bf08      	it	eq
 8004a00:	f043 0301 	orreq.w	r3, r3, #1
 8004a04:	3018      	adds	r0, #24
 8004a06:	4281      	cmp	r1, r0
 8004a08:	bf08      	it	eq
 8004a0a:	f043 0301 	orreq.w	r3, r3, #1
 8004a0e:	3018      	adds	r0, #24
 8004a10:	4281      	cmp	r1, r0
 8004a12:	bf08      	it	eq
 8004a14:	f043 0301 	orreq.w	r3, r3, #1
 8004a18:	3018      	adds	r0, #24
 8004a1a:	4281      	cmp	r1, r0
 8004a1c:	bf08      	it	eq
 8004a1e:	f043 0301 	orreq.w	r3, r3, #1
 8004a22:	3018      	adds	r0, #24
 8004a24:	4281      	cmp	r1, r0
 8004a26:	bf08      	it	eq
 8004a28:	f043 0301 	orreq.w	r3, r3, #1
 8004a2c:	3018      	adds	r0, #24
 8004a2e:	4281      	cmp	r1, r0
 8004a30:	bf08      	it	eq
 8004a32:	f043 0301 	orreq.w	r3, r3, #1
 8004a36:	b91b      	cbnz	r3, 8004a40 <HAL_DMA_IRQHandler+0x92c>
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_DMA_IRQHandler+0x974>)
 8004a3a:	4299      	cmp	r1, r3
 8004a3c:	f47f ada5 	bne.w	800458a <HAL_DMA_IRQHandler+0x476>
 8004a40:	680b      	ldr	r3, [r1, #0]
 8004a42:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f43f ade8 	beq.w	800461c <HAL_DMA_IRQHandler+0x508>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a4c:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a4e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	f43f ad9c 	beq.w	8004592 <HAL_DMA_IRQHandler+0x47e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004a62:	f43f adc9 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x4e4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004a6c:	f47f adb9 	bne.w	80045e2 <HAL_DMA_IRQHandler+0x4ce>
            if(hdma->XferM1CpltCallback != NULL)
 8004a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f43f add2 	beq.w	800461c <HAL_DMA_IRQHandler+0x508>
              hdma->XferM1CpltCallback(hdma);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4798      	blx	r3
 8004a7c:	e5ce      	b.n	800461c <HAL_DMA_IRQHandler+0x508>
 8004a7e:	bf00      	nop
 8004a80:	40020010 	.word	0x40020010
 8004a84:	40020028 	.word	0x40020028
 8004a88:	400204b8 	.word	0x400204b8

08004a8c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a8c:	680b      	ldr	r3, [r1, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 810f 	beq.w	8004cb2 <HAL_GPIO_Init+0x226>
{
 8004a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a98:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a9a:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 8004a9e:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa0:	4c84      	ldr	r4, [pc, #528]	; (8004cb4 <HAL_GPIO_Init+0x228>)
 8004aa2:	4d85      	ldr	r5, [pc, #532]	; (8004cb8 <HAL_GPIO_Init+0x22c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aa4:	4e85      	ldr	r6, [pc, #532]	; (8004cbc <HAL_GPIO_Init+0x230>)
 8004aa6:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8004cc4 <HAL_GPIO_Init+0x238>
 8004aaa:	e061      	b.n	8004b70 <HAL_GPIO_Init+0xe4>
        temp = GPIOx->OSPEEDR;
 8004aac:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aae:	f04f 0a03 	mov.w	sl, #3
 8004ab2:	fa0a fa0c 	lsl.w	sl, sl, ip
 8004ab6:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aba:	68cb      	ldr	r3, [r1, #12]
 8004abc:	fa03 f30c 	lsl.w	r3, r3, ip
 8004ac0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8004ac4:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8004ac6:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ac8:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004acc:	684b      	ldr	r3, [r1, #4]
 8004ace:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ad2:	4093      	lsls	r3, r2
 8004ad4:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->OTYPER = temp;
 8004ad8:	6043      	str	r3, [r0, #4]
 8004ada:	e056      	b.n	8004b8a <HAL_GPIO_Init+0xfe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004adc:	2300      	movs	r3, #0
 8004ade:	fa03 f30b 	lsl.w	r3, r3, fp
 8004ae2:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae6:	f8ce 3008 	str.w	r3, [lr, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8004af0:	ea6f 0e09 	mvn.w	lr, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af4:	684f      	ldr	r7, [r1, #4]
 8004af6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8004afa:	bf0c      	ite	eq
 8004afc:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004b00:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004b04:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004b08:	f8ca 3000 	str.w	r3, [sl]

        temp = EXTI->FTSR1;
 8004b0c:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b10:	684f      	ldr	r7, [r1, #4]
 8004b12:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004b16:	bf0c      	ite	eq
 8004b18:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004b1c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8004b20:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004b24:	f8ca 3004 	str.w	r3, [sl, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b28:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2c:	684f      	ldr	r7, [r1, #4]
 8004b2e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 8004b32:	bf0c      	ite	eq
 8004b34:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004b38:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b3c:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004b40:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b44:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b48:	684f      	ldr	r7, [r1, #4]
 8004b4a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 8004b4e:	bf0c      	ite	eq
 8004b50:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004b54:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b58:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 8004b5c:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
      }
    }

    position++;
 8004b60:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b62:	680b      	ldr	r3, [r1, #0]
 8004b64:	f10c 0c02 	add.w	ip, ip, #2
 8004b68:	fa33 f702 	lsrs.w	r7, r3, r2
 8004b6c:	f000 809e 	beq.w	8004cac <HAL_GPIO_Init+0x220>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b70:	f04f 0e01 	mov.w	lr, #1
 8004b74:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00U)
 8004b78:	ea1e 0903 	ands.w	r9, lr, r3
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b7e:	684b      	ldr	r3, [r1, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d990      	bls.n	8004aac <HAL_GPIO_Init+0x20>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b8a:	684b      	ldr	r3, [r1, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d027      	beq.n	8004be4 <HAL_GPIO_Init+0x158>
      temp = GPIOx->PUPDR;
 8004b94:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b96:	f04f 0e03 	mov.w	lr, #3
 8004b9a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004b9e:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba2:	688b      	ldr	r3, [r1, #8]
 8004ba4:	fa03 f30c 	lsl.w	r3, r3, ip
 8004ba8:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->PUPDR = temp;
 8004bac:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bae:	684b      	ldr	r3, [r1, #4]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d115      	bne.n	8004be4 <HAL_GPIO_Init+0x158>
        temp = GPIOx->AFR[position >> 3U];
 8004bb8:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 8004bbc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004bc0:	f8de a020 	ldr.w	sl, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bc4:	f002 0307 	and.w	r3, r2, #7
 8004bc8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004bcc:	230f      	movs	r3, #15
 8004bce:	fa03 f30b 	lsl.w	r3, r3, fp
 8004bd2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bd6:	690b      	ldr	r3, [r1, #16]
 8004bd8:	fa03 f30b 	lsl.w	r3, r3, fp
 8004bdc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004be0:	f8ce 3020 	str.w	r3, [lr, #32]
      temp = GPIOx->MODER;
 8004be4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004be6:	f04f 0e03 	mov.w	lr, #3
 8004bea:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004bee:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf2:	684b      	ldr	r3, [r1, #4]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	fa03 f30c 	lsl.w	r3, r3, ip
 8004bfc:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 8004c00:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c02:	684b      	ldr	r3, [r1, #4]
 8004c04:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004c08:	d0aa      	beq.n	8004b60 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004c16:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c22:	f022 0e03 	bic.w	lr, r2, #3
 8004c26:	44ae      	add	lr, r5
 8004c28:	f8de a008 	ldr.w	sl, [lr, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c2c:	f002 0303 	and.w	r3, r2, #3
 8004c30:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004c34:	230f      	movs	r3, #15
 8004c36:	fa03 f30b 	lsl.w	r3, r3, fp
 8004c3a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c3e:	42b0      	cmp	r0, r6
 8004c40:	f43f af4c 	beq.w	8004adc <HAL_GPIO_Init+0x50>
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <HAL_GPIO_Init+0x234>)
 8004c46:	4298      	cmp	r0, r3
 8004c48:	d020      	beq.n	8004c8c <HAL_GPIO_Init+0x200>
 8004c4a:	4540      	cmp	r0, r8
 8004c4c:	d020      	beq.n	8004c90 <HAL_GPIO_Init+0x204>
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	4298      	cmp	r0, r3
 8004c54:	d01e      	beq.n	8004c94 <HAL_GPIO_Init+0x208>
 8004c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5a:	4298      	cmp	r0, r3
 8004c5c:	d01c      	beq.n	8004c98 <HAL_GPIO_Init+0x20c>
 8004c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c62:	4298      	cmp	r0, r3
 8004c64:	d01a      	beq.n	8004c9c <HAL_GPIO_Init+0x210>
 8004c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c6a:	4298      	cmp	r0, r3
 8004c6c:	d018      	beq.n	8004ca0 <HAL_GPIO_Init+0x214>
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c72:	4298      	cmp	r0, r3
 8004c74:	d016      	beq.n	8004ca4 <HAL_GPIO_Init+0x218>
 8004c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7a:	4298      	cmp	r0, r3
 8004c7c:	d014      	beq.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c82:	4298      	cmp	r0, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2309      	moveq	r3, #9
 8004c88:	230a      	movne	r3, #10
 8004c8a:	e728      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e726      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e724      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004c94:	2303      	movs	r3, #3
 8004c96:	e722      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	e720      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004c9c:	2305      	movs	r3, #5
 8004c9e:	e71e      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	e71c      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	e71a      	b.n	8004ade <HAL_GPIO_Init+0x52>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	e718      	b.n	8004ade <HAL_GPIO_Init+0x52>
  }
}
 8004cac:	b003      	add	sp, #12
 8004cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb2:	4770      	bx	lr
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58000400 	.word	0x58000400
 8004cbc:	58020000 	.word	0x58020000
 8004cc0:	58020400 	.word	0x58020400
 8004cc4:	58020800 	.word	0x58020800

08004cc8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	f000 80a5 	beq.w	8004e18 <HAL_GPIO_DeInit+0x150>
{
 8004cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	468c      	mov	ip, r1
  uint32_t position = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8004e20 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cdc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004e24 <HAL_GPIO_DeInit+0x15c>
 8004ce0:	f8df a144 	ldr.w	sl, [pc, #324]	; 8004e28 <HAL_GPIO_DeInit+0x160>
 8004ce4:	f8df b144 	ldr.w	fp, [pc, #324]	; 8004e2c <HAL_GPIO_DeInit+0x164>
 8004ce8:	e02a      	b.n	8004d40 <HAL_GPIO_DeInit+0x78>
 8004cea:	f04f 0e00 	mov.w	lr, #0
 8004cee:	fa0e f101 	lsl.w	r1, lr, r1
 8004cf2:	9e01      	ldr	r6, [sp, #4]
 8004cf4:	42b1      	cmp	r1, r6
 8004cf6:	d071      	beq.n	8004ddc <HAL_GPIO_DeInit+0x114>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	6804      	ldr	r4, [r0, #0]
 8004cfa:	0059      	lsls	r1, r3, #1
 8004cfc:	2503      	movs	r5, #3
 8004cfe:	fa05 f101 	lsl.w	r1, r5, r1
 8004d02:	430c      	orrs	r4, r1
 8004d04:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d06:	fa23 f405 	lsr.w	r4, r3, r5
 8004d0a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004d0e:	6a25      	ldr	r5, [r4, #32]
 8004d10:	f003 0607 	and.w	r6, r3, #7
 8004d14:	00b7      	lsls	r7, r6, #2
 8004d16:	260f      	movs	r6, #15
 8004d18:	40be      	lsls	r6, r7
 8004d1a:	ea25 0506 	bic.w	r5, r5, r6
 8004d1e:	6225      	str	r5, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d20:	68c4      	ldr	r4, [r0, #12]
 8004d22:	ea24 0401 	bic.w	r4, r4, r1
 8004d26:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d28:	6844      	ldr	r4, [r0, #4]
 8004d2a:	ea24 0202 	bic.w	r2, r4, r2
 8004d2e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d30:	6882      	ldr	r2, [r0, #8]
 8004d32:	ea22 0101 	bic.w	r1, r2, r1
 8004d36:	6081      	str	r1, [r0, #8]
    }

    position++;
 8004d38:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8004d3a:	fa3c f203 	lsrs.w	r2, ip, r3
 8004d3e:	d068      	beq.n	8004e12 <HAL_GPIO_DeInit+0x14a>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8004d44:	ea12 070c 	ands.w	r7, r2, ip
 8004d48:	d0f6      	beq.n	8004d38 <HAL_GPIO_DeInit+0x70>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d4a:	f023 0403 	bic.w	r4, r3, #3
 8004d4e:	444c      	add	r4, r9
 8004d50:	68a6      	ldr	r6, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004d52:	f003 0103 	and.w	r1, r3, #3
 8004d56:	0089      	lsls	r1, r1, #2
 8004d58:	250f      	movs	r5, #15
 8004d5a:	408d      	lsls	r5, r1
 8004d5c:	402e      	ands	r6, r5
 8004d5e:	9601      	str	r6, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d60:	4540      	cmp	r0, r8
 8004d62:	d0c2      	beq.n	8004cea <HAL_GPIO_DeInit+0x22>
 8004d64:	4550      	cmp	r0, sl
 8004d66:	d021      	beq.n	8004dac <HAL_GPIO_DeInit+0xe4>
 8004d68:	4558      	cmp	r0, fp
 8004d6a:	d022      	beq.n	8004db2 <HAL_GPIO_DeInit+0xea>
 8004d6c:	4e2b      	ldr	r6, [pc, #172]	; (8004e1c <HAL_GPIO_DeInit+0x154>)
 8004d6e:	42b0      	cmp	r0, r6
 8004d70:	d022      	beq.n	8004db8 <HAL_GPIO_DeInit+0xf0>
 8004d72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d76:	42b0      	cmp	r0, r6
 8004d78:	d021      	beq.n	8004dbe <HAL_GPIO_DeInit+0xf6>
 8004d7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d7e:	42b0      	cmp	r0, r6
 8004d80:	d020      	beq.n	8004dc4 <HAL_GPIO_DeInit+0xfc>
 8004d82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d86:	42b0      	cmp	r0, r6
 8004d88:	d01f      	beq.n	8004dca <HAL_GPIO_DeInit+0x102>
 8004d8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d8e:	42b0      	cmp	r0, r6
 8004d90:	d01e      	beq.n	8004dd0 <HAL_GPIO_DeInit+0x108>
 8004d92:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8004e30 <HAL_GPIO_DeInit+0x168>
 8004d96:	4570      	cmp	r0, lr
 8004d98:	d01d      	beq.n	8004dd6 <HAL_GPIO_DeInit+0x10e>
 8004d9a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8004d9e:	4570      	cmp	r0, lr
 8004da0:	bf0c      	ite	eq
 8004da2:	f04f 0e09 	moveq.w	lr, #9
 8004da6:	f04f 0e0a 	movne.w	lr, #10
 8004daa:	e7a0      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dac:	f04f 0e01 	mov.w	lr, #1
 8004db0:	e79d      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004db2:	f04f 0e02 	mov.w	lr, #2
 8004db6:	e79a      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004db8:	f04f 0e03 	mov.w	lr, #3
 8004dbc:	e797      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dbe:	f04f 0e04 	mov.w	lr, #4
 8004dc2:	e794      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dc4:	f04f 0e05 	mov.w	lr, #5
 8004dc8:	e791      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dca:	f04f 0e06 	mov.w	lr, #6
 8004dce:	e78e      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dd0:	f04f 0e07 	mov.w	lr, #7
 8004dd4:	e78b      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
 8004dd6:	f04f 0e08 	mov.w	lr, #8
 8004dda:	e788      	b.n	8004cee <HAL_GPIO_DeInit+0x26>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de0:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 8004de4:	ea26 0607 	bic.w	r6, r6, r7
 8004de8:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004dec:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
 8004df0:	ea26 0607 	bic.w	r6, r6, r7
 8004df4:	f8c1 6084 	str.w	r6, [r1, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8004df8:	684e      	ldr	r6, [r1, #4]
 8004dfa:	ea26 0607 	bic.w	r6, r6, r7
 8004dfe:	604e      	str	r6, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004e00:	680e      	ldr	r6, [r1, #0]
 8004e02:	ea26 0707 	bic.w	r7, r6, r7
 8004e06:	600f      	str	r7, [r1, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e08:	68a1      	ldr	r1, [r4, #8]
 8004e0a:	ea21 0505 	bic.w	r5, r1, r5
 8004e0e:	60a5      	str	r5, [r4, #8]
 8004e10:	e772      	b.n	8004cf8 <HAL_GPIO_DeInit+0x30>
  }
}
 8004e12:	b003      	add	sp, #12
 8004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	58020c00 	.word	0x58020c00
 8004e20:	58000400 	.word	0x58000400
 8004e24:	58020000 	.word	0x58020000
 8004e28:	58020400 	.word	0x58020400
 8004e2c:	58020800 	.word	0x58020800
 8004e30:	58022000 	.word	0x58022000

08004e34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e34:	b10a      	cbz	r2, 8004e3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e36:	6181      	str	r1, [r0, #24]
 8004e38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e3a:	0409      	lsls	r1, r1, #16
 8004e3c:	6181      	str	r1, [r0, #24]
  }
}
 8004e3e:	4770      	bx	lr

08004e40 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e40:	6803      	ldr	r3, [r0, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	f012 0f02 	tst.w	r2, #2
 8004e48:	d001      	beq.n	8004e4e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4e:	6803      	ldr	r3, [r0, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	f012 0f01 	tst.w	r2, #1
 8004e56:	d103      	bne.n	8004e60 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	619a      	str	r2, [r3, #24]
  }
}
 8004e60:	4770      	bx	lr

08004e62 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e62:	b430      	push	{r4, r5}
 8004e64:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e66:	6805      	ldr	r5, [r0, #0]
 8004e68:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6a:	4323      	orrs	r3, r4
 8004e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e70:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e74:	430b      	orrs	r3, r1
 8004e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e7a:	0d64      	lsrs	r4, r4, #21
 8004e7c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004e80:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004e84:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004e88:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004e8c:	f044 0403 	orr.w	r4, r4, #3
 8004e90:	ea20 0404 	bic.w	r4, r0, r4
 8004e94:	4323      	orrs	r3, r4
 8004e96:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e98:	bc30      	pop	{r4, r5}
 8004e9a:	4770      	bx	lr

08004e9c <I2C_IsErrorOccurred>:
{
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ea2:	6803      	ldr	r3, [r0, #0]
 8004ea4:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ea6:	f017 0710 	ands.w	r7, r7, #16
 8004eaa:	d051      	beq.n	8004f50 <I2C_IsErrorOccurred+0xb4>
 8004eac:	460e      	mov	r6, r1
 8004eae:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	2210      	movs	r2, #16
 8004eb2:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2500      	movs	r5, #0
 8004eb6:	462f      	mov	r7, r5
              hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ebc:	6821      	ldr	r1, [r4, #0]
 8004ebe:	698b      	ldr	r3, [r1, #24]
 8004ec0:	f013 0f20 	tst.w	r3, #32
 8004ec4:	d13d      	bne.n	8004f42 <I2C_IsErrorOccurred+0xa6>
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	d13b      	bne.n	8004f42 <I2C_IsErrorOccurred+0xa6>
      if (Timeout != HAL_MAX_DELAY)
 8004eca:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004ece:	d0f6      	beq.n	8004ebe <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fd f9f0 	bl	80022b4 <HAL_GetTick>
 8004ed4:	463d      	mov	r5, r7
 8004ed6:	eba0 0008 	sub.w	r0, r0, r8
 8004eda:	42b0      	cmp	r0, r6
 8004edc:	d801      	bhi.n	8004ee2 <I2C_IsErrorOccurred+0x46>
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d1ec      	bne.n	8004ebc <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8004ee6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004eea:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004eec:	6991      	ldr	r1, [r2, #24]
 8004eee:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004ef2:	d004      	beq.n	8004efe <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8004ef4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004ef8:	d101      	bne.n	8004efe <I2C_IsErrorOccurred+0x62>
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d119      	bne.n	8004f32 <I2C_IsErrorOccurred+0x96>
{
 8004efe:	463d      	mov	r5, r7
              status = HAL_ERROR;
 8004f00:	f04f 0a01 	mov.w	sl, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f013 0f20 	tst.w	r3, #32
 8004f0c:	d1d6      	bne.n	8004ebc <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f0e:	f7fd f9d1 	bl	80022b4 <HAL_GetTick>
 8004f12:	eba0 0008 	sub.w	r0, r0, r8
 8004f16:	2819      	cmp	r0, #25
 8004f18:	d9f4      	bls.n	8004f04 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8004f2a:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8004f2e:	4655      	mov	r5, sl
 8004f30:	e7e8      	b.n	8004f04 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f32:	6853      	ldr	r3, [r2, #4]
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8004f3a:	f7fd f9bb 	bl	80022b4 <HAL_GetTick>
 8004f3e:	4680      	mov	r8, r0
 8004f40:	e7dd      	b.n	8004efe <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	d13f      	bne.n	8004fc6 <I2C_IsErrorOccurred+0x12a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f46:	2320      	movs	r3, #32
 8004f48:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004f4a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8004f4c:	2501      	movs	r5, #1
 8004f4e:	e000      	b.n	8004f52 <I2C_IsErrorOccurred+0xb6>
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f5a:	d005      	beq.n	8004f68 <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_BERR;
 8004f5c:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f64:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004f66:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f6c:	d02d      	beq.n	8004fca <I2C_IsErrorOccurred+0x12e>
    error_code |= HAL_I2C_ERROR_OVR;
 8004f6e:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f78:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f7a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f7e:	d005      	beq.n	8004f8c <I2C_IsErrorOccurred+0xf0>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f80:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8a:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7ff ff57 	bl	8004e40 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	6853      	ldr	r3, [r2, #4]
 8004f96:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004f9a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004f9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004faa:	431f      	orrs	r7, r3
 8004fac:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	2320      	movs	r3, #32
 8004fb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004fba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004fbe:	2501      	movs	r5, #1
}
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8004fc6:	2704      	movs	r7, #4
 8004fc8:	e7c3      	b.n	8004f52 <I2C_IsErrorOccurred+0xb6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fce:	d1d7      	bne.n	8004f80 <I2C_IsErrorOccurred+0xe4>
  if (status != HAL_OK)
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d0f5      	beq.n	8004fc0 <I2C_IsErrorOccurred+0x124>
 8004fd4:	e7da      	b.n	8004f8c <I2C_IsErrorOccurred+0xf0>

08004fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004fd6:	b570      	push	{r4, r5, r6, lr}
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f013 0f02 	tst.w	r3, #2
 8004fe6:	d11d      	bne.n	8005024 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4629      	mov	r1, r5
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7ff ff55 	bl	8004e9c <I2C_IsErrorOccurred>
 8004ff2:	b9c8      	cbnz	r0, 8005028 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ff8:	d0f1      	beq.n	8004fde <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fd f95b 	bl	80022b4 <HAL_GetTick>
 8004ffe:	1b80      	subs	r0, r0, r6
 8005000:	42a8      	cmp	r0, r5
 8005002:	d801      	bhi.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005004:	2d00      	cmp	r5, #0
 8005006:	d1ea      	bne.n	8004fde <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800500a:	f043 0320 	orr.w	r3, r3, #32
 800500e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005010:	2320      	movs	r3, #32
 8005012:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800501c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005020:	2001      	movs	r0, #1
 8005022:	e000      	b.n	8005026 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005024:	2000      	movs	r0, #0
}
 8005026:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005028:	2001      	movs	r0, #1
 800502a:	e7fc      	b.n	8005026 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800502c <I2C_WaitOnFlagUntilTimeout>:
{
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4680      	mov	r8, r0
 8005032:	460f      	mov	r7, r1
 8005034:	4616      	mov	r6, r2
 8005036:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	f8d8 3000 	ldr.w	r3, [r8]
 800503c:	699c      	ldr	r4, [r3, #24]
 800503e:	ea37 0204 	bics.w	r2, r7, r4
 8005042:	bf0c      	ite	eq
 8005044:	f04f 0c01 	moveq.w	ip, #1
 8005048:	f04f 0c00 	movne.w	ip, #0
 800504c:	45b4      	cmp	ip, r6
 800504e:	d11a      	bne.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005050:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005054:	d0f2      	beq.n	800503c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fd f92d 	bl	80022b4 <HAL_GetTick>
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	1ac0      	subs	r0, r0, r3
 800505e:	42a8      	cmp	r0, r5
 8005060:	d801      	bhi.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8005062:	2d00      	cmp	r5, #0
 8005064:	d1e8      	bne.n	8005038 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800506a:	f043 0320 	orr.w	r3, r3, #32
 800506e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005072:	2320      	movs	r3, #32
 8005074:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	2300      	movs	r3, #0
 800507a:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800507e:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8005082:	2001      	movs	r0, #1
 8005084:	e000      	b.n	8005088 <I2C_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8005086:	2000      	movs	r0, #0
}
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800508c <I2C_RequestMemoryWrite>:
{
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	4604      	mov	r4, r0
 8005094:	4690      	mov	r8, r2
 8005096:	461d      	mov	r5, r3
 8005098:	9e08      	ldr	r6, [sp, #32]
 800509a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <I2C_RequestMemoryWrite+0x78>)
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050a4:	b2ea      	uxtb	r2, r5
 80050a6:	f7ff fedc 	bl	8004e62 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050aa:	463a      	mov	r2, r7
 80050ac:	4631      	mov	r1, r6
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff ff91 	bl	8004fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 80050b4:	bb08      	cbnz	r0, 80050fa <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b6:	2d01      	cmp	r5, #1
 80050b8:	d110      	bne.n	80050dc <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	fa5f f288 	uxtb.w	r2, r8
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	9700      	str	r7, [sp, #0]
 80050c4:	4633      	mov	r3, r6
 80050c6:	2200      	movs	r2, #0
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7ff ffae 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80050d0:	3800      	subs	r0, #0
 80050d2:	bf18      	it	ne
 80050d4:	2001      	movne	r0, #1
}
 80050d6:	b002      	add	sp, #8
 80050d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e4:	463a      	mov	r2, r7
 80050e6:	4631      	mov	r1, r6
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7ff ff74 	bl	8004fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ee:	b930      	cbnz	r0, 80050fe <I2C_RequestMemoryWrite+0x72>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	fa5f f288 	uxtb.w	r2, r8
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
 80050f8:	e7e3      	b.n	80050c2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
 80050fc:	e7eb      	b.n	80050d6 <I2C_RequestMemoryWrite+0x4a>
      return HAL_ERROR;
 80050fe:	2001      	movs	r0, #1
 8005100:	e7e9      	b.n	80050d6 <I2C_RequestMemoryWrite+0x4a>
 8005102:	bf00      	nop
 8005104:	80002000 	.word	0x80002000

08005108 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	460c      	mov	r4, r1
 800510e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f013 0f20 	tst.w	r3, #32
 8005118:	d11a      	bne.n	8005150 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	4632      	mov	r2, r6
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f7ff febc 	bl	8004e9c <I2C_IsErrorOccurred>
 8005124:	b9b0      	cbnz	r0, 8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fd f8c5 	bl	80022b4 <HAL_GetTick>
 800512a:	1b80      	subs	r0, r0, r6
 800512c:	42a0      	cmp	r0, r4
 800512e:	d801      	bhi.n	8005134 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005130:	2c00      	cmp	r4, #0
 8005132:	d1ed      	bne.n	8005110 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005136:	f043 0320 	orr.w	r3, r3, #32
 800513a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800513c:	2320      	movs	r3, #32
 800513e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005142:	2300      	movs	r3, #0
 8005144:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005148:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800514c:	2001      	movs	r0, #1
}
 800514e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005150:	2000      	movs	r0, #0
 8005152:	e7fc      	b.n	800514e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005154:	2001      	movs	r0, #1
 8005156:	e7fa      	b.n	800514e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005158 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	460d      	mov	r5, r1
 800515e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f013 0f04 	tst.w	r3, #4
 8005168:	d149      	bne.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	4632      	mov	r2, r6
 800516c:	4629      	mov	r1, r5
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff fe94 	bl	8004e9c <I2C_IsErrorOccurred>
 8005174:	4601      	mov	r1, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d143      	bne.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	f012 0f20 	tst.w	r2, #32
 8005182:	d113      	bne.n	80051ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fd f896 	bl	80022b4 <HAL_GetTick>
 8005188:	1b80      	subs	r0, r0, r6
 800518a:	42a8      	cmp	r0, r5
 800518c:	d801      	bhi.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800518e:	2d00      	cmp	r5, #0
 8005190:	d1e6      	bne.n	8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005192:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800519a:	2320      	movs	r3, #32
 800519c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80051a0:	2300      	movs	r3, #0
 80051a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80051a6:	2101      	movs	r1, #1
}
 80051a8:	4608      	mov	r0, r1
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	f012 0f04 	tst.w	r2, #4
 80051b2:	d002      	beq.n	80051ba <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80051b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d1f6      	bne.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	f012 0f10 	tst.w	r2, #16
 80051c0:	d01a      	beq.n	80051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c2:	2210      	movs	r2, #16
 80051c4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80051c6:	2304      	movs	r3, #4
 80051c8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	2220      	movs	r2, #32
 80051ce:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80051d0:	6821      	ldr	r1, [r4, #0]
 80051d2:	684b      	ldr	r3, [r1, #4]
 80051d4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051d8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80051dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80051f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80051f4:	2101      	movs	r1, #1
 80051f6:	e7d7      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	6463      	str	r3, [r4, #68]	; 0x44
 80051fc:	e7e5      	b.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 80051fe:	2100      	movs	r1, #0
 8005200:	e7d2      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8005202:	2101      	movs	r1, #1
 8005204:	e7d0      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
	...

08005208 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005208:	2800      	cmp	r0, #0
 800520a:	d053      	beq.n	80052b4 <HAL_I2C_Init+0xac>
{
 800520c:	b510      	push	{r4, lr}
 800520e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005210:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005214:	2b00      	cmp	r3, #0
 8005216:	d043      	beq.n	80052a0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005218:	2324      	movs	r3, #36	; 0x24
 800521a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	6813      	ldr	r3, [r2, #0]
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005230:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	6893      	ldr	r3, [r2, #8]
 8005236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800523a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800523c:	68e3      	ldr	r3, [r4, #12]
 800523e:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	bf0c      	ite	eq
 8005246:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800524a:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800524e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005250:	68e3      	ldr	r3, [r4, #12]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d029      	beq.n	80052aa <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	6851      	ldr	r1, [r2, #4]
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_I2C_Init+0xb0>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	68d3      	ldr	r3, [r2, #12]
 8005264:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005268:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	6961      	ldr	r1, [r4, #20]
 8005270:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005272:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005274:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005278:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	69e3      	ldr	r3, [r4, #28]
 800527e:	6a21      	ldr	r1, [r4, #32]
 8005280:	430b      	orrs	r3, r1
 8005282:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800528e:	2000      	movs	r0, #0
 8005290:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005292:	2320      	movs	r3, #32
 8005294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005298:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800529e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80052a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80052a4:	f7fb fd0a 	bl	8000cbc <HAL_I2C_MspInit>
 80052a8:	e7b6      	b.n	8005218 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	e7d0      	b.n	8005256 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80052b4:	2001      	movs	r0, #1
}
 80052b6:	4770      	bx	lr
 80052b8:	02008000 	.word	0x02008000

080052bc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80052bc:	b1a8      	cbz	r0, 80052ea <HAL_I2C_DeInit+0x2e>
{
 80052be:	b510      	push	{r4, lr}
 80052c0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c2:	2324      	movs	r3, #36	; 0x24
 80052c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80052c8:	6802      	ldr	r2, [r0, #0]
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80052d2:	f7fb fda9 	bl	8000e28 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d6:	2000      	movs	r0, #0
 80052d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80052da:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80052e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80052e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052ea:	2001      	movs	r0, #1
}
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_I2C_Master_Transmit>:
{
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	460f      	mov	r7, r1
 80052f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80052fe:	b2c9      	uxtb	r1, r1
 8005300:	2920      	cmp	r1, #32
 8005302:	f040 80a8 	bne.w	8005456 <HAL_I2C_Master_Transmit+0x166>
 8005306:	4604      	mov	r4, r0
 8005308:	4690      	mov	r8, r2
 800530a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800530c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005310:	2b01      	cmp	r3, #1
 8005312:	f000 80a4 	beq.w	800545e <HAL_I2C_Master_Transmit+0x16e>
 8005316:	f04f 0a01 	mov.w	sl, #1
 800531a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800531e:	f7fc ffc9 	bl	80022b4 <HAL_GetTick>
 8005322:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005324:	9000      	str	r0, [sp, #0]
 8005326:	2319      	movs	r3, #25
 8005328:	4652      	mov	r2, sl
 800532a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800532e:	4620      	mov	r0, r4
 8005330:	f7ff fe7c 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 8094 	bne.w	8005462 <HAL_I2C_Master_Transmit+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800533a:	2321      	movs	r3, #33	; 0x21
 800533c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005340:	2310      	movs	r3, #16
 8005342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005346:	2300      	movs	r3, #0
 8005348:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800534a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800534e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005352:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	2bff      	cmp	r3, #255	; 0xff
 800535a:	d947      	bls.n	80053ec <HAL_I2C_Master_Transmit+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800535c:	22ff      	movs	r2, #255	; 0xff
 800535e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005360:	4b44      	ldr	r3, [pc, #272]	; (8005474 <HAL_I2C_Master_Transmit+0x184>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005368:	4639      	mov	r1, r7
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff fd79 	bl	8004e62 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005370:	f04f 0800 	mov.w	r8, #0
 8005374:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005378:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 800537c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d04c      	beq.n	800541e <HAL_I2C_Master_Transmit+0x12e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005384:	462a      	mov	r2, r5
 8005386:	4631      	mov	r1, r6
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff fe24 	bl	8004fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800538e:	2800      	cmp	r0, #0
 8005390:	d169      	bne.n	8005466 <HAL_I2C_Master_Transmit+0x176>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800539a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800539c:	3301      	adds	r3, #1
 800539e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80053a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80053a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80053b2:	b292      	uxth	r2, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e1      	bne.n	800537c <HAL_I2C_Master_Transmit+0x8c>
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	d0df      	beq.n	800537c <HAL_I2C_Master_Transmit+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053bc:	9500      	str	r5, [sp, #0]
 80053be:	4633      	mov	r3, r6
 80053c0:	4642      	mov	r2, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7ff fe31 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d14d      	bne.n	800546a <HAL_I2C_Master_Transmit+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2bff      	cmp	r3, #255	; 0xff
 80053d4:	d917      	bls.n	8005406 <HAL_I2C_Master_Transmit+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053da:	f8cd 8000 	str.w	r8, [sp]
 80053de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e2:	4639      	mov	r1, r7
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7ff fd3c 	bl	8004e62 <I2C_TransferConfig>
 80053ea:	e7c7      	b.n	800537c <HAL_I2C_Master_Transmit+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 80053ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80053ee:	b292      	uxth	r2, r2
 80053f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <HAL_I2C_Master_Transmit+0x184>)
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	4639      	mov	r1, r7
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff fd2f 	bl	8004e62 <I2C_TransferConfig>
 8005404:	e7b4      	b.n	8005370 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8005406:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005408:	b292      	uxth	r2, r2
 800540a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	4653      	mov	r3, sl
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4639      	mov	r1, r7
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fd23 	bl	8004e62 <I2C_TransferConfig>
 800541c:	e7ae      	b.n	800537c <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541e:	462a      	mov	r2, r5
 8005420:	4631      	mov	r1, r6
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff fe70 	bl	8005108 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005428:	bb08      	cbnz	r0, 800546e <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005430:	6821      	ldr	r1, [r4, #0]
 8005432:	684b      	ldr	r3, [r1, #4]
 8005434:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005438:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800543c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005446:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005450:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005454:	e000      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 8005456:	2002      	movs	r0, #2
}
 8005458:	b002      	add	sp, #8
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800545e:	2002      	movs	r0, #2
 8005460:	e7fa      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8005462:	2001      	movs	r0, #1
 8005464:	e7f8      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 8005466:	2001      	movs	r0, #1
 8005468:	e7f6      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 800546a:	2001      	movs	r0, #1
 800546c:	e7f4      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 800546e:	2001      	movs	r0, #1
 8005470:	e7f2      	b.n	8005458 <HAL_I2C_Master_Transmit+0x168>
 8005472:	bf00      	nop
 8005474:	80002000 	.word	0x80002000

08005478 <HAL_I2C_Master_Receive>:
{
 8005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	460f      	mov	r7, r1
 8005480:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005482:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005486:	b2c9      	uxtb	r1, r1
 8005488:	2920      	cmp	r1, #32
 800548a:	f040 80a8 	bne.w	80055de <HAL_I2C_Master_Receive+0x166>
 800548e:	4604      	mov	r4, r0
 8005490:	4690      	mov	r8, r2
 8005492:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005494:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005498:	2b01      	cmp	r3, #1
 800549a:	f000 80a4 	beq.w	80055e6 <HAL_I2C_Master_Receive+0x16e>
 800549e:	f04f 0a01 	mov.w	sl, #1
 80054a2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80054a6:	f7fc ff05 	bl	80022b4 <HAL_GetTick>
 80054aa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ac:	9000      	str	r0, [sp, #0]
 80054ae:	2319      	movs	r3, #25
 80054b0:	4652      	mov	r2, sl
 80054b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff fdb8 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f040 8094 	bne.w	80055ea <HAL_I2C_Master_Receive+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054c2:	2322      	movs	r3, #34	; 0x22
 80054c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054c8:	2310      	movs	r3, #16
 80054ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80054d2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80054d6:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054da:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2bff      	cmp	r3, #255	; 0xff
 80054e2:	d947      	bls.n	8005574 <HAL_I2C_Master_Receive+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054e8:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_I2C_Master_Receive+0x184>)
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f0:	4639      	mov	r1, r7
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff fcb5 	bl	8004e62 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054f8:	f04f 0800 	mov.w	r8, #0
 80054fc:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005500:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8005504:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d04c      	beq.n	80055a6 <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550c:	462a      	mov	r2, r5
 800550e:	4631      	mov	r1, r6
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff fe21 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005516:	2800      	cmp	r0, #0
 8005518:	d169      	bne.n	80055ee <HAL_I2C_Master_Receive+0x176>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005520:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005524:	3301      	adds	r3, #1
 8005526:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005528:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005530:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005532:	3a01      	subs	r2, #1
 8005534:	b292      	uxth	r2, r2
 8005536:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005538:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800553a:	b292      	uxth	r2, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e1      	bne.n	8005504 <HAL_I2C_Master_Receive+0x8c>
 8005540:	2a00      	cmp	r2, #0
 8005542:	d0df      	beq.n	8005504 <HAL_I2C_Master_Receive+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005544:	9500      	str	r5, [sp, #0]
 8005546:	4633      	mov	r3, r6
 8005548:	4642      	mov	r2, r8
 800554a:	4649      	mov	r1, r9
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff fd6d 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 8005552:	2800      	cmp	r0, #0
 8005554:	d14d      	bne.n	80055f2 <HAL_I2C_Master_Receive+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005556:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2bff      	cmp	r3, #255	; 0xff
 800555c:	d917      	bls.n	800558e <HAL_I2C_Master_Receive+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800555e:	22ff      	movs	r2, #255	; 0xff
 8005560:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005562:	f8cd 8000 	str.w	r8, [sp]
 8005566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800556a:	4639      	mov	r1, r7
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fc78 	bl	8004e62 <I2C_TransferConfig>
 8005572:	e7c7      	b.n	8005504 <HAL_I2C_Master_Receive+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8005574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005576:	b292      	uxth	r2, r2
 8005578:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_I2C_Master_Receive+0x184>)
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	4639      	mov	r1, r7
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fc6b 	bl	8004e62 <I2C_TransferConfig>
 800558c:	e7b4      	b.n	80054f8 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 800558e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005590:	b292      	uxth	r2, r2
 8005592:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005594:	f8cd 8000 	str.w	r8, [sp]
 8005598:	4653      	mov	r3, sl
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	4639      	mov	r1, r7
 800559e:	4620      	mov	r0, r4
 80055a0:	f7ff fc5f 	bl	8004e62 <I2C_TransferConfig>
 80055a4:	e7ae      	b.n	8005504 <HAL_I2C_Master_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a6:	462a      	mov	r2, r5
 80055a8:	4631      	mov	r1, r6
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff fdac 	bl	8005108 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055b0:	bb08      	cbnz	r0, 80055f6 <HAL_I2C_Master_Receive+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	2220      	movs	r2, #32
 80055b6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80055b8:	6821      	ldr	r1, [r4, #0]
 80055ba:	684b      	ldr	r3, [r1, #4]
 80055bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80055c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80055c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80055d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80055dc:	e000      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 80055de:	2002      	movs	r0, #2
}
 80055e0:	b002      	add	sp, #8
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80055e6:	2002      	movs	r0, #2
 80055e8:	e7fa      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 80055ea:	2001      	movs	r0, #1
 80055ec:	e7f8      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 80055ee:	2001      	movs	r0, #1
 80055f0:	e7f6      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 80055f2:	2001      	movs	r0, #1
 80055f4:	e7f4      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 80055f6:	2001      	movs	r0, #1
 80055f8:	e7f2      	b.n	80055e0 <HAL_I2C_Master_Receive+0x168>
 80055fa:	bf00      	nop
 80055fc:	80002400 	.word	0x80002400

08005600 <HAL_I2C_Mem_Write>:
{
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	b083      	sub	sp, #12
 8005606:	460d      	mov	r5, r1
 8005608:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800560c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005612:	b2c9      	uxtb	r1, r1
 8005614:	2920      	cmp	r1, #32
 8005616:	f040 80bf 	bne.w	8005798 <HAL_I2C_Mem_Write+0x198>
 800561a:	4604      	mov	r4, r0
 800561c:	4690      	mov	r8, r2
 800561e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005622:	b1cb      	cbz	r3, 8005658 <HAL_I2C_Mem_Write+0x58>
 8005624:	f1ba 0f00 	cmp.w	sl, #0
 8005628:	d016      	beq.n	8005658 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800562a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800562e:	2b01      	cmp	r3, #1
 8005630:	f000 80b6 	beq.w	80057a0 <HAL_I2C_Mem_Write+0x1a0>
 8005634:	f04f 0b01 	mov.w	fp, #1
 8005638:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800563c:	f7fc fe3a 	bl	80022b4 <HAL_GetTick>
 8005640:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005642:	9000      	str	r0, [sp, #0]
 8005644:	2319      	movs	r3, #25
 8005646:	465a      	mov	r2, fp
 8005648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff fced 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 8005652:	b130      	cbz	r0, 8005662 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8005654:	2001      	movs	r0, #1
 8005656:	e0a0      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800565c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800565e:	2001      	movs	r0, #1
 8005660:	e09b      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005662:	2321      	movs	r3, #33	; 0x21
 8005664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566e:	2300      	movs	r3, #0
 8005670:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005674:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005676:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800567a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800567c:	9601      	str	r6, [sp, #4]
 800567e:	9700      	str	r7, [sp, #0]
 8005680:	464b      	mov	r3, r9
 8005682:	4642      	mov	r2, r8
 8005684:	4629      	mov	r1, r5
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff fd00 	bl	800508c <I2C_RequestMemoryWrite>
 800568c:	b9a0      	cbnz	r0, 80056b8 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800568e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2bff      	cmp	r3, #255	; 0xff
 8005694:	d915      	bls.n	80056c2 <HAL_I2C_Mem_Write+0xc2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005696:	22ff      	movs	r2, #255	; 0xff
 8005698:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056a2:	4629      	mov	r1, r5
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff fbdc 	bl	8004e62 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056aa:	f04f 0800 	mov.w	r8, #0
 80056ae:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b2:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 80056b6:	e020      	b.n	80056fa <HAL_I2C_Mem_Write+0xfa>
      __HAL_UNLOCK(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80056be:	4658      	mov	r0, fp
 80056c0:	e06b      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 80056c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056c4:	b292      	uxth	r2, r2
 80056c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	4629      	mov	r1, r5
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7ff fbc4 	bl	8004e62 <I2C_TransferConfig>
 80056da:	e7e6      	b.n	80056aa <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80056dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056de:	b292      	uxth	r2, r2
 80056e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056e2:	f8cd 8000 	str.w	r8, [sp]
 80056e6:	4653      	mov	r3, sl
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	4629      	mov	r1, r5
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff fbb8 	bl	8004e62 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80056f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d032      	beq.n	8005760 <HAL_I2C_Mem_Write+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056fa:	4632      	mov	r2, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	4620      	mov	r0, r4
 8005700:	f7ff fc69 	bl	8004fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005704:	2800      	cmp	r0, #0
 8005706:	d14d      	bne.n	80057a4 <HAL_I2C_Mem_Write+0x1a4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005718:	3b01      	subs	r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800571e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005720:	3b01      	subs	r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005726:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005728:	b292      	uxth	r2, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e1      	bne.n	80056f2 <HAL_I2C_Mem_Write+0xf2>
 800572e:	2a00      	cmp	r2, #0
 8005730:	d0df      	beq.n	80056f2 <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005732:	9600      	str	r6, [sp, #0]
 8005734:	463b      	mov	r3, r7
 8005736:	4642      	mov	r2, r8
 8005738:	4649      	mov	r1, r9
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fc76 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 8005740:	bb90      	cbnz	r0, 80057a8 <HAL_I2C_Mem_Write+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2bff      	cmp	r3, #255	; 0xff
 8005748:	d9c8      	bls.n	80056dc <HAL_I2C_Mem_Write+0xdc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800574a:	22ff      	movs	r2, #255	; 0xff
 800574c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800574e:	f8cd 8000 	str.w	r8, [sp]
 8005752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005756:	4629      	mov	r1, r5
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fb82 	bl	8004e62 <I2C_TransferConfig>
 800575e:	e7c8      	b.n	80056f2 <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005760:	4632      	mov	r2, r6
 8005762:	4639      	mov	r1, r7
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fccf 	bl	8005108 <I2C_WaitOnSTOPFlagUntilTimeout>
 800576a:	b9f8      	cbnz	r0, 80057ac <HAL_I2C_Mem_Write+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	2220      	movs	r2, #32
 8005770:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005772:	6821      	ldr	r1, [r4, #0]
 8005774:	684b      	ldr	r3, [r1, #4]
 8005776:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800577a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800577e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005788:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800578c:	2300      	movs	r3, #0
 800578e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005792:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005796:	e000      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
    return HAL_BUSY;
 8005798:	2002      	movs	r0, #2
}
 800579a:	b003      	add	sp, #12
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80057a0:	2002      	movs	r0, #2
 80057a2:	e7fa      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
        return HAL_ERROR;
 80057a4:	2001      	movs	r0, #1
 80057a6:	e7f8      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
          return HAL_ERROR;
 80057a8:	2001      	movs	r0, #1
 80057aa:	e7f6      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>
      return HAL_ERROR;
 80057ac:	2001      	movs	r0, #1
 80057ae:	e7f4      	b.n	800579a <HAL_I2C_Mem_Write+0x19a>

080057b0 <HAL_I2C_IsDeviceReady>:
{
 80057b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057b4:	b085      	sub	sp, #20
 80057b6:	4617      	mov	r7, r2
 80057b8:	461c      	mov	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 80057ba:	2200      	movs	r2, #0
 80057bc:	9203      	str	r2, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	f040 809a 	bne.w	80058fe <HAL_I2C_IsDeviceReady+0x14e>
 80057ca:	4605      	mov	r5, r0
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80057cc:	6803      	ldr	r3, [r0, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80057d4:	f040 8095 	bne.w	8005902 <HAL_I2C_IsDeviceReady+0x152>
    __HAL_LOCK(hi2c);
 80057d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057dc:	2b01      	cmp	r3, #1
 80057de:	f000 8092 	beq.w	8005906 <HAL_I2C_IsDeviceReady+0x156>
 80057e2:	2301      	movs	r3, #1
 80057e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e8:	2324      	movs	r3, #36	; 0x24
 80057ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	6442      	str	r2, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057f0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80057f4:	f443 5920 	orr.w	r9, r3, #10240	; 0x2800
 80057f8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8005918 <HAL_I2C_IsDeviceReady+0x168>
 80057fc:	ea43 0808 	orr.w	r8, r3, r8
 8005800:	68eb      	ldr	r3, [r5, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	bf14      	ite	ne
 8005806:	464a      	movne	r2, r9
 8005808:	4642      	moveq	r2, r8
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 800580e:	f7fc fd51 	bl	80022b4 <HAL_GetTick>
 8005812:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005818:	699b      	ldr	r3, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800581a:	f002 0220 	and.w	r2, r2, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800581e:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005822:	4313      	orrs	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_I2C_IsDeviceReady+0xda>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f013 0f10 	tst.w	r3, #16
 800582e:	d044      	beq.n	80058ba <HAL_I2C_IsDeviceReady+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005830:	9600      	str	r6, [sp, #0]
 8005832:	4623      	mov	r3, r4
 8005834:	2200      	movs	r2, #0
 8005836:	2120      	movs	r1, #32
 8005838:	4628      	mov	r0, r5
 800583a:	f7ff fbf7 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 800583e:	2800      	cmp	r0, #0
 8005840:	d165      	bne.n	800590e <HAL_I2C_IsDeviceReady+0x15e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	2210      	movs	r2, #16
 8005846:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2220      	movs	r2, #32
 800584c:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	42bb      	cmp	r3, r7
 8005852:	d043      	beq.n	80058dc <HAL_I2C_IsDeviceReady+0x12c>
      I2C_Trials++;
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	42bb      	cmp	r3, r7
 800585e:	d3cf      	bcc.n	8005800 <HAL_I2C_IsDeviceReady+0x50>
    hi2c->State = HAL_I2C_STATE_READY;
 8005860:	2320      	movs	r3, #32
 8005862:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005866:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800586e:	2300      	movs	r3, #0
 8005870:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8005874:	2001      	movs	r0, #1
 8005876:	e01d      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005878:	682a      	ldr	r2, [r5, #0]
 800587a:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800587c:	6991      	ldr	r1, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800587e:	f003 0320 	and.w	r3, r3, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005882:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005886:	430b      	orrs	r3, r1
 8005888:	d1cd      	bne.n	8005826 <HAL_I2C_IsDeviceReady+0x76>
        if (Timeout != HAL_MAX_DELAY)
 800588a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800588e:	d0f3      	beq.n	8005878 <HAL_I2C_IsDeviceReady+0xc8>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fc fd10 	bl	80022b4 <HAL_GetTick>
 8005894:	1b80      	subs	r0, r0, r6
 8005896:	42a0      	cmp	r0, r4
 8005898:	d801      	bhi.n	800589e <HAL_I2C_IsDeviceReady+0xee>
 800589a:	2c00      	cmp	r4, #0
 800589c:	d1ec      	bne.n	8005878 <HAL_I2C_IsDeviceReady+0xc8>
            hi2c->State = HAL_I2C_STATE_READY;
 800589e:	2320      	movs	r3, #32
 80058a0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	646b      	str	r3, [r5, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 80058ac:	2300      	movs	r3, #0
 80058ae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
            return HAL_ERROR;
 80058b2:	2001      	movs	r0, #1
}
 80058b4:	b005      	add	sp, #20
 80058b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058ba:	9600      	str	r6, [sp, #0]
 80058bc:	4623      	mov	r3, r4
 80058be:	2200      	movs	r2, #0
 80058c0:	2120      	movs	r1, #32
 80058c2:	4628      	mov	r0, r5
 80058c4:	f7ff fbb2 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 80058c8:	b9f8      	cbnz	r0, 800590a <HAL_I2C_IsDeviceReady+0x15a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ca:	682a      	ldr	r2, [r5, #0]
 80058cc:	2320      	movs	r3, #32
 80058ce:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80058d0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80058d4:	2300      	movs	r3, #0
 80058d6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_OK;
 80058da:	e7eb      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058dc:	682a      	ldr	r2, [r5, #0]
 80058de:	6853      	ldr	r3, [r2, #4]
 80058e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e4:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058e6:	9600      	str	r6, [sp, #0]
 80058e8:	4623      	mov	r3, r4
 80058ea:	2200      	movs	r2, #0
 80058ec:	2120      	movs	r1, #32
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7ff fb9c 	bl	800502c <I2C_WaitOnFlagUntilTimeout>
 80058f4:	b968      	cbnz	r0, 8005912 <HAL_I2C_IsDeviceReady+0x162>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	2220      	movs	r2, #32
 80058fa:	61da      	str	r2, [r3, #28]
 80058fc:	e7aa      	b.n	8005854 <HAL_I2C_IsDeviceReady+0xa4>
    return HAL_BUSY;
 80058fe:	2002      	movs	r0, #2
 8005900:	e7d8      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
      return HAL_BUSY;
 8005902:	2002      	movs	r0, #2
 8005904:	e7d6      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
    __HAL_LOCK(hi2c);
 8005906:	2002      	movs	r0, #2
 8005908:	e7d4      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
 800590c:	e7d2      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 800590e:	2001      	movs	r0, #1
 8005910:	e7d0      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 8005912:	2001      	movs	r0, #1
 8005914:	e7ce      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x104>
 8005916:	bf00      	nop
 8005918:	02002000 	.word	0x02002000

0800591c <HAL_I2C_GetState>:
  return hi2c->State;
 800591c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005920:	4770      	bx	lr

08005922 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005922:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005924:	4770      	bx	lr

08005926 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005926:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b20      	cmp	r3, #32
 800592e:	d124      	bne.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005934:	2b01      	cmp	r3, #1
 8005936:	d022      	beq.n	800597e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005938:	2301      	movs	r3, #1
 800593a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800593e:	2324      	movs	r3, #36	; 0x24
 8005940:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005944:	6802      	ldr	r2, [r0, #0]
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800594e:	6802      	ldr	r2, [r0, #0]
 8005950:	6813      	ldr	r3, [r2, #0]
 8005952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005956:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005958:	6802      	ldr	r2, [r0, #0]
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	4319      	orrs	r1, r3
 800595e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005960:	6802      	ldr	r2, [r0, #0]
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	2320      	movs	r3, #32
 800596c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005976:	4618      	mov	r0, r3
 8005978:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800597a:	2002      	movs	r0, #2
 800597c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800597e:	2002      	movs	r0, #2
  }
}
 8005980:	4770      	bx	lr

08005982 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	d122      	bne.n	80059d2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005990:	2b01      	cmp	r3, #1
 8005992:	d020      	beq.n	80059d6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005994:	2301      	movs	r3, #1
 8005996:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800599a:	2324      	movs	r3, #36	; 0x24
 800599c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a0:	6802      	ldr	r2, [r0, #0]
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059aa:	6802      	ldr	r2, [r0, #0]
 80059ac:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059b6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059b8:	6802      	ldr	r2, [r0, #0]
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	2320      	movs	r3, #32
 80059c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c8:	2300      	movs	r3, #0
 80059ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80059ce:	4618      	mov	r0, r3
 80059d0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2002      	movs	r0, #2
 80059d4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80059d6:	2002      	movs	r0, #2
  }
}
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80059dc:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <HAL_I2CEx_EnableFastModePlus+0x28>)
 80059e0:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 80059e4:	f041 0102 	orr.w	r1, r1, #2
 80059e8:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
 80059ec:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 80059f0:	f002 0202 	and.w	r2, r2, #2
 80059f4:	9201      	str	r2, [sp, #4]
 80059f6:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80059f8:	4a03      	ldr	r2, [pc, #12]	; (8005a08 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 80059fa:	6853      	ldr	r3, [r2, #4]
 80059fc:	4303      	orrs	r3, r0
 80059fe:	6053      	str	r3, [r2, #4]
}
 8005a00:	b002      	add	sp, #8
 8005a02:	4770      	bx	lr
 8005a04:	58024400 	.word	0x58024400
 8005a08:	58000400 	.word	0x58000400

08005a0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <HAL_PWREx_ConfigSupply+0x4c>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f013 0f04 	tst.w	r3, #4
 8005a16:	d107      	bne.n	8005a28 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <HAL_PWREx_ConfigSupply+0x4c>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a20:	1a18      	subs	r0, r3, r0
 8005a22:	bf18      	it	ne
 8005a24:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a28:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <HAL_PWREx_ConfigSupply+0x4c>)
 8005a2a:	68d3      	ldr	r3, [r2, #12]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	4318      	orrs	r0, r3
 8005a32:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 8005a34:	f7fc fc3e 	bl	80022b4 <HAL_GetTick>
 8005a38:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a3a:	4d07      	ldr	r5, [pc, #28]	; (8005a58 <HAL_PWREx_ConfigSupply+0x4c>)
 8005a3c:	686b      	ldr	r3, [r5, #4]
 8005a3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005a42:	d107      	bne.n	8005a54 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a44:	f7fc fc36 	bl	80022b4 <HAL_GetTick>
 8005a48:	1b00      	subs	r0, r0, r4
 8005a4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005a4e:	d9f5      	bls.n	8005a3c <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 8005a50:	2001      	movs	r0, #1
 8005a52:	e7e8      	b.n	8005a26 <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7e6      	b.n	8005a26 <HAL_PWREx_ConfigSupply+0x1a>
 8005a58:	58024800 	.word	0x58024800

08005a5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	f000 8318 	beq.w	8006092 <HAL_RCC_OscConfig+0x636>
{
 8005a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a64:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	6803      	ldr	r3, [r0, #0]
 8005a68:	f013 0f01 	tst.w	r3, #1
 8005a6c:	d025      	beq.n	8005aba <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a6e:	4a94      	ldr	r2, [pc, #592]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005a70:	6913      	ldr	r3, [r2, #16]
 8005a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a76:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d015      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x4c>
 8005a7c:	2b18      	cmp	r3, #24
 8005a7e:	d00f      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a80:	6863      	ldr	r3, [r4, #4]
 8005a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a86:	d03f      	beq.n	8005b08 <HAL_RCC_OscConfig+0xac>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d153      	bne.n	8005b34 <HAL_RCC_OscConfig+0xd8>
 8005a8c:	4b8c      	ldr	r3, [pc, #560]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e038      	b.n	8005b12 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005aa0:	f002 0203 	and.w	r2, r2, #3
 8005aa4:	2a02      	cmp	r2, #2
 8005aa6:	d1eb      	bne.n	8005a80 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa8:	4b85      	ldr	r3, [pc, #532]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_OscConfig+0x5e>
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 82ee 	beq.w	8006096 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	f013 0f02 	tst.w	r3, #2
 8005ac0:	f000 80a1 	beq.w	8005c06 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ac4:	4a7e      	ldr	r2, [pc, #504]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005ac6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ac8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005aca:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005ace:	d05a      	beq.n	8005b86 <HAL_RCC_OscConfig+0x12a>
 8005ad0:	2b18      	cmp	r3, #24
 8005ad2:	d055      	beq.n	8005b80 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ad4:	68e2      	ldr	r2, [r4, #12]
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	f000 80de 	beq.w	8005c98 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005adc:	4978      	ldr	r1, [pc, #480]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005ade:	680b      	ldr	r3, [r1, #0]
 8005ae0:	f023 0319 	bic.w	r3, r3, #25
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fbe4 	bl	80022b4 <HAL_GetTick>
 8005aec:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aee:	4e74      	ldr	r6, [pc, #464]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	f013 0f04 	tst.w	r3, #4
 8005af6:	f040 80ad 	bne.w	8005c54 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005afa:	f7fc fbdb 	bl	80022b4 <HAL_GetTick>
 8005afe:	1b40      	subs	r0, r0, r5
 8005b00:	2802      	cmp	r0, #2
 8005b02:	d9f5      	bls.n	8005af0 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8005b04:	2003      	movs	r0, #3
 8005b06:	e2cd      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b08:	4a6d      	ldr	r2, [pc, #436]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	b32b      	cbz	r3, 8005b62 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8005b16:	f7fc fbcd 	bl	80022b4 <HAL_GetTick>
 8005b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b1c:	4e68      	ldr	r6, [pc, #416]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b1e:	6833      	ldr	r3, [r6, #0]
 8005b20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b24:	d1c9      	bne.n	8005aba <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b26:	f7fc fbc5 	bl	80022b4 <HAL_GetTick>
 8005b2a:	1b40      	subs	r0, r0, r5
 8005b2c:	2864      	cmp	r0, #100	; 0x64
 8005b2e:	d9f6      	bls.n	8005b1e <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8005b30:	2003      	movs	r0, #3
 8005b32:	e2b7      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_OscConfig+0xf2>
 8005b3a:	4b61      	ldr	r3, [pc, #388]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e7e1      	b.n	8005b12 <HAL_RCC_OscConfig+0xb6>
 8005b4e:	4b5c      	ldr	r3, [pc, #368]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e7d7      	b.n	8005b12 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8005b62:	f7fc fba7 	bl	80022b4 <HAL_GetTick>
 8005b66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b68:	4e55      	ldr	r6, [pc, #340]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b70:	d0a3      	beq.n	8005aba <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b72:	f7fc fb9f 	bl	80022b4 <HAL_GetTick>
 8005b76:	1b40      	subs	r0, r0, r5
 8005b78:	2864      	cmp	r0, #100	; 0x64
 8005b7a:	d9f6      	bls.n	8005b6a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	e291      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b80:	f012 0f03 	tst.w	r2, #3
 8005b84:	d1a6      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f013 0f04 	tst.w	r3, #4
 8005b8e:	d003      	beq.n	8005b98 <HAL_RCC_OscConfig+0x13c>
 8005b90:	68e3      	ldr	r3, [r4, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8281 	beq.w	800609a <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b98:	4a49      	ldr	r2, [pc, #292]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	f023 0319 	bic.w	r3, r3, #25
 8005ba0:	68e1      	ldr	r1, [r4, #12]
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8005ba6:	f7fc fb85 	bl	80022b4 <HAL_GetTick>
 8005baa:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bac:	4e44      	ldr	r6, [pc, #272]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005bae:	6833      	ldr	r3, [r6, #0]
 8005bb0:	f013 0f04 	tst.w	r3, #4
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb6:	f7fc fb7d 	bl	80022b4 <HAL_GetTick>
 8005bba:	1b40      	subs	r0, r0, r5
 8005bbc:	2802      	cmp	r0, #2
 8005bbe:	d9f6      	bls.n	8005bae <HAL_RCC_OscConfig+0x152>
              return HAL_TIMEOUT;
 8005bc0:	2003      	movs	r0, #3
 8005bc2:	e26f      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	f7fc fb7c 	bl	80022c0 <HAL_GetREVID>
 8005bc8:	f241 0303 	movw	r3, #4099	; 0x1003
 8005bcc:	4298      	cmp	r0, r3
 8005bce:	d812      	bhi.n	8005bf6 <HAL_RCC_OscConfig+0x19a>
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	2a40      	cmp	r2, #64	; 0x40
 8005bd4:	d007      	beq.n	8005be6 <HAL_RCC_OscConfig+0x18a>
 8005bd6:	493a      	ldr	r1, [pc, #232]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005bd8:	684b      	ldr	r3, [r1, #4]
 8005bda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bde:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005be2:	604b      	str	r3, [r1, #4]
 8005be4:	e00f      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
 8005be6:	4a36      	ldr	r2, [pc, #216]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005be8:	6853      	ldr	r3, [r2, #4]
 8005bea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e007      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
 8005bf6:	4a32      	ldr	r2, [pc, #200]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005bf8:	6853      	ldr	r3, [r2, #4]
 8005bfa:	6921      	ldr	r1, [r4, #16]
 8005bfc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c00:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c04:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	f013 0f10 	tst.w	r3, #16
 8005c0c:	f000 8088 	beq.w	8005d20 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c10:	4a2b      	ldr	r2, [pc, #172]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c12:	6913      	ldr	r3, [r2, #16]
 8005c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c18:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d056      	beq.n	8005ccc <HAL_RCC_OscConfig+0x270>
 8005c1e:	2b18      	cmp	r3, #24
 8005c20:	d050      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c22:	69e3      	ldr	r3, [r4, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80b8 	beq.w	8005d9a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c2a:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc fb3e 	bl	80022b4 <HAL_GetTick>
 8005c38:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c3a:	4e21      	ldr	r6, [pc, #132]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c42:	f040 8088 	bne.w	8005d56 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c46:	f7fc fb35 	bl	80022b4 <HAL_GetTick>
 8005c4a:	1b40      	subs	r0, r0, r5
 8005c4c:	2802      	cmp	r0, #2
 8005c4e:	d9f5      	bls.n	8005c3c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005c50:	2003      	movs	r0, #3
 8005c52:	e227      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c54:	f7fc fb34 	bl	80022c0 <HAL_GetREVID>
 8005c58:	f241 0303 	movw	r3, #4099	; 0x1003
 8005c5c:	4298      	cmp	r0, r3
 8005c5e:	d812      	bhi.n	8005c86 <HAL_RCC_OscConfig+0x22a>
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	2a40      	cmp	r2, #64	; 0x40
 8005c64:	d007      	beq.n	8005c76 <HAL_RCC_OscConfig+0x21a>
 8005c66:	4916      	ldr	r1, [pc, #88]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c68:	684b      	ldr	r3, [r1, #4]
 8005c6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005c72:	604b      	str	r3, [r1, #4]
 8005c74:	e7c7      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
 8005c76:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c78:	6853      	ldr	r3, [r2, #4]
 8005c7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c82:	6053      	str	r3, [r2, #4]
 8005c84:	e7bf      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
 8005c86:	4a0e      	ldr	r2, [pc, #56]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c88:	6853      	ldr	r3, [r2, #4]
 8005c8a:	6921      	ldr	r1, [r4, #16]
 8005c8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c94:	6053      	str	r3, [r2, #4]
 8005c96:	e7b6      	b.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8005c98:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ca2:	f7fc fb07 	bl	80022b4 <HAL_GetTick>
 8005ca6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ca8:	4e05      	ldr	r6, [pc, #20]	; (8005cc0 <HAL_RCC_OscConfig+0x264>)
 8005caa:	6833      	ldr	r3, [r6, #0]
 8005cac:	f013 0f04 	tst.w	r3, #4
 8005cb0:	d0a9      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb2:	f7fc faff 	bl	80022b4 <HAL_GetTick>
 8005cb6:	1b40      	subs	r0, r0, r5
 8005cb8:	2802      	cmp	r0, #2
 8005cba:	d9f6      	bls.n	8005caa <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	e1f1      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 8005cc0:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cc4:	f002 0203 	and.w	r2, r2, #3
 8005cc8:	2a01      	cmp	r2, #1
 8005cca:	d1aa      	bne.n	8005c22 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ccc:	4ba1      	ldr	r3, [pc, #644]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005cd4:	d003      	beq.n	8005cde <HAL_RCC_OscConfig+0x282>
 8005cd6:	69e3      	ldr	r3, [r4, #28]
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	f040 81e0 	bne.w	800609e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cde:	f7fc faef 	bl	80022c0 <HAL_GetREVID>
 8005ce2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	d812      	bhi.n	8005d10 <HAL_RCC_OscConfig+0x2b4>
 8005cea:	6a22      	ldr	r2, [r4, #32]
 8005cec:	2a20      	cmp	r2, #32
 8005cee:	d007      	beq.n	8005d00 <HAL_RCC_OscConfig+0x2a4>
 8005cf0:	4998      	ldr	r1, [pc, #608]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	684b      	ldr	r3, [r1, #4]
 8005cf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cf8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005cfc:	604b      	str	r3, [r1, #4]
 8005cfe:	e00f      	b.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
 8005d00:	4a94      	ldr	r2, [pc, #592]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d02:	6853      	ldr	r3, [r2, #4]
 8005d04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	e007      	b.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
 8005d10:	4a90      	ldr	r2, [pc, #576]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	68d3      	ldr	r3, [r2, #12]
 8005d14:	6a21      	ldr	r1, [r4, #32]
 8005d16:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005d1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d1e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	f013 0f08 	tst.w	r3, #8
 8005d26:	d060      	beq.n	8005dea <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d28:	6963      	ldr	r3, [r4, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d049      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2e:	4a89      	ldr	r2, [pc, #548]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d30:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fc fabc 	bl	80022b4 <HAL_GetTick>
 8005d3c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d3e:	4e85      	ldr	r6, [pc, #532]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d40:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005d42:	f013 0f02 	tst.w	r3, #2
 8005d46:	d150      	bne.n	8005dea <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d48:	f7fc fab4 	bl	80022b4 <HAL_GetTick>
 8005d4c:	1b40      	subs	r0, r0, r5
 8005d4e:	2802      	cmp	r0, #2
 8005d50:	d9f6      	bls.n	8005d40 <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8005d52:	2003      	movs	r0, #3
 8005d54:	e1a6      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d56:	f7fc fab3 	bl	80022c0 <HAL_GetREVID>
 8005d5a:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	d812      	bhi.n	8005d88 <HAL_RCC_OscConfig+0x32c>
 8005d62:	6a22      	ldr	r2, [r4, #32]
 8005d64:	2a20      	cmp	r2, #32
 8005d66:	d007      	beq.n	8005d78 <HAL_RCC_OscConfig+0x31c>
 8005d68:	497a      	ldr	r1, [pc, #488]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	684b      	ldr	r3, [r1, #4]
 8005d6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d70:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005d74:	604b      	str	r3, [r1, #4]
 8005d76:	e7d3      	b.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
 8005d78:	4a76      	ldr	r2, [pc, #472]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d7a:	6853      	ldr	r3, [r2, #4]
 8005d7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	6053      	str	r3, [r2, #4]
 8005d86:	e7cb      	b.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
 8005d88:	4a72      	ldr	r2, [pc, #456]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d8a:	68d3      	ldr	r3, [r2, #12]
 8005d8c:	6a21      	ldr	r1, [r4, #32]
 8005d8e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005d92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d96:	60d3      	str	r3, [r2, #12]
 8005d98:	e7c2      	b.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8005d9a:	4a6e      	ldr	r2, [pc, #440]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005d9c:	6813      	ldr	r3, [r2, #0]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005da4:	f7fc fa86 	bl	80022b4 <HAL_GetTick>
 8005da8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005daa:	4e6a      	ldr	r6, [pc, #424]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005db2:	d0b5      	beq.n	8005d20 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005db4:	f7fc fa7e 	bl	80022b4 <HAL_GetTick>
 8005db8:	1b40      	subs	r0, r0, r5
 8005dba:	2802      	cmp	r0, #2
 8005dbc:	d9f6      	bls.n	8005dac <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8005dbe:	2003      	movs	r0, #3
 8005dc0:	e170      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dc2:	4a64      	ldr	r2, [pc, #400]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005dc4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dcc:	f7fc fa72 	bl	80022b4 <HAL_GetTick>
 8005dd0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dd2:	4e60      	ldr	r6, [pc, #384]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005dd4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005dd6:	f013 0f02 	tst.w	r3, #2
 8005dda:	d006      	beq.n	8005dea <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ddc:	f7fc fa6a 	bl	80022b4 <HAL_GetTick>
 8005de0:	1b40      	subs	r0, r0, r5
 8005de2:	2802      	cmp	r0, #2
 8005de4:	d9f6      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8005de6:	2003      	movs	r0, #3
 8005de8:	e15c      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f013 0f20 	tst.w	r3, #32
 8005df0:	d029      	beq.n	8005e46 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005df2:	69a3      	ldr	r3, [r4, #24]
 8005df4:	b19b      	cbz	r3, 8005e1e <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005df6:	4a57      	ldr	r2, [pc, #348]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e00:	f7fc fa58 	bl	80022b4 <HAL_GetTick>
 8005e04:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e06:	4e53      	ldr	r6, [pc, #332]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005e0e:	d11a      	bne.n	8005e46 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e10:	f7fc fa50 	bl	80022b4 <HAL_GetTick>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	2802      	cmp	r0, #2
 8005e18:	d9f6      	bls.n	8005e08 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 8005e1a:	2003      	movs	r0, #3
 8005e1c:	e142      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e1e:	4a4d      	ldr	r2, [pc, #308]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e28:	f7fc fa44 	bl	80022b4 <HAL_GetTick>
 8005e2c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e2e:	4e49      	ldr	r6, [pc, #292]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005e36:	d006      	beq.n	8005e46 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e38:	f7fc fa3c 	bl	80022b4 <HAL_GetTick>
 8005e3c:	1b40      	subs	r0, r0, r5
 8005e3e:	2802      	cmp	r0, #2
 8005e40:	d9f6      	bls.n	8005e30 <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 8005e42:	2003      	movs	r0, #3
 8005e44:	e12e      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f013 0f04 	tst.w	r3, #4
 8005e4c:	d121      	bne.n	8005e92 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	f000 8126 	beq.w	80060a2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e56:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e5e:	2b18      	cmp	r3, #24
 8005e60:	f000 80ee 	beq.w	8006040 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e64:	2a02      	cmp	r2, #2
 8005e66:	d079      	beq.n	8005f5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fc fa1f 	bl	80022b4 <HAL_GetTick>
 8005e76:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e78:	4d36      	ldr	r5, [pc, #216]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005e7a:	682b      	ldr	r3, [r5, #0]
 8005e7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e80:	f000 80dc 	beq.w	800603c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fc fa16 	bl	80022b4 <HAL_GetTick>
 8005e88:	1b00      	subs	r0, r0, r4
 8005e8a:	2802      	cmp	r0, #2
 8005e8c:	d9f5      	bls.n	8005e7a <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8005e8e:	2003      	movs	r0, #3
 8005e90:	e108      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8005e92:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <HAL_RCC_OscConfig+0x4fc>)
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e9c:	f7fc fa0a 	bl	80022b4 <HAL_GetTick>
 8005ea0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea2:	4e2d      	ldr	r6, [pc, #180]	; (8005f58 <HAL_RCC_OscConfig+0x4fc>)
 8005ea4:	6833      	ldr	r3, [r6, #0]
 8005ea6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005eaa:	d106      	bne.n	8005eba <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eac:	f7fc fa02 	bl	80022b4 <HAL_GetTick>
 8005eb0:	1b40      	subs	r0, r0, r5
 8005eb2:	2864      	cmp	r0, #100	; 0x64
 8005eb4:	d9f6      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	e0f4      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x47a>
 8005ec0:	bb0b      	cbnz	r3, 8005f06 <HAL_RCC_OscConfig+0x4aa>
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	671a      	str	r2, [r3, #112]	; 0x70
 8005ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	671a      	str	r2, [r3, #112]	; 0x70
 8005ed4:	e004      	b.n	8005ee0 <HAL_RCC_OscConfig+0x484>
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005ed8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	b333      	cbz	r3, 8005f32 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8005ee4:	f7fc f9e6 	bl	80022b4 <HAL_GetTick>
 8005ee8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eea:	4e1a      	ldr	r6, [pc, #104]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005ef2:	f013 0f02 	tst.w	r3, #2
 8005ef6:	d1aa      	bne.n	8005e4e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fc f9dc 	bl	80022b4 <HAL_GetTick>
 8005efc:	1b40      	subs	r0, r0, r5
 8005efe:	42b8      	cmp	r0, r7
 8005f00:	d9f6      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 8005f02:	2003      	movs	r0, #3
 8005f04:	e0ce      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4c2>
 8005f0a:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	671a      	str	r2, [r3, #112]	; 0x70
 8005f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	671a      	str	r2, [r3, #112]	; 0x70
 8005f1c:	e7e0      	b.n	8005ee0 <HAL_RCC_OscConfig+0x484>
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
 8005f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f22:	f042 0204 	orr.w	r2, r2, #4
 8005f26:	671a      	str	r2, [r3, #112]	; 0x70
 8005f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	671a      	str	r2, [r3, #112]	; 0x70
 8005f30:	e7d6      	b.n	8005ee0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8005f32:	f7fc f9bf 	bl	80022b4 <HAL_GetTick>
 8005f36:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f38:	4e06      	ldr	r6, [pc, #24]	; (8005f54 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f3e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005f40:	f013 0f02 	tst.w	r3, #2
 8005f44:	d083      	beq.n	8005e4e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f46:	f7fc f9b5 	bl	80022b4 <HAL_GetTick>
 8005f4a:	1b40      	subs	r0, r0, r5
 8005f4c:	42b8      	cmp	r0, r7
 8005f4e:	d9f6      	bls.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 8005f50:	2003      	movs	r0, #3
 8005f52:	e0a7      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 8005f54:	58024400 	.word	0x58024400
 8005f58:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8005f5c:	4a58      	ldr	r2, [pc, #352]	; (80060c0 <HAL_RCC_OscConfig+0x664>)
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f66:	f7fc f9a5 	bl	80022b4 <HAL_GetTick>
 8005f6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f6c:	4e54      	ldr	r6, [pc, #336]	; (80060c0 <HAL_RCC_OscConfig+0x664>)
 8005f6e:	6833      	ldr	r3, [r6, #0]
 8005f70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f74:	d006      	beq.n	8005f84 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f76:	f7fc f99d 	bl	80022b4 <HAL_GetTick>
 8005f7a:	1b40      	subs	r0, r0, r5
 8005f7c:	2802      	cmp	r0, #2
 8005f7e:	d9f6      	bls.n	8005f6e <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 8005f80:	2003      	movs	r0, #3
 8005f82:	e08f      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f84:	4b4e      	ldr	r3, [pc, #312]	; (80060c0 <HAL_RCC_OscConfig+0x664>)
 8005f86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f88:	4a4e      	ldr	r2, [pc, #312]	; (80060c4 <HAL_RCC_OscConfig+0x668>)
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f92:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
 8005f98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	0252      	lsls	r2, r2, #9
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fa2:	3901      	subs	r1, #1
 8005fa4:	0409      	lsls	r1, r1, #16
 8005fa6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8005faa:	430a      	orrs	r2, r1
 8005fac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005fae:	3901      	subs	r1, #1
 8005fb0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fb8:	3901      	subs	r1, #1
 8005fba:	0609      	lsls	r1, r1, #24
 8005fbc:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fcc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005fd0:	4a3d      	ldr	r2, [pc, #244]	; (80060c8 <HAL_RCC_OscConfig+0x66c>)
 8005fd2:	4002      	ands	r2, r0
 8005fd4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	f022 020c 	bic.w	r2, r2, #12
 8005fe0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	f022 0202 	bic.w	r2, r2, #2
 8005fec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ff8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006018:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800601a:	f7fc f94b 	bl	80022b4 <HAL_GetTick>
 800601e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006020:	4d27      	ldr	r5, [pc, #156]	; (80060c0 <HAL_RCC_OscConfig+0x664>)
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006028:	d106      	bne.n	8006038 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602a:	f7fc f943 	bl	80022b4 <HAL_GetTick>
 800602e:	1b00      	subs	r0, r0, r4
 8006030:	2802      	cmp	r0, #2
 8006032:	d9f6      	bls.n	8006022 <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 8006034:	2003      	movs	r0, #3
 8006036:	e035      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006038:	2000      	movs	r0, #0
 800603a:	e033      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 800603c:	2000      	movs	r0, #0
 800603e:	e031      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006040:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <HAL_RCC_OscConfig+0x664>)
 8006042:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006046:	2a01      	cmp	r2, #1
 8006048:	d02d      	beq.n	80060a6 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604a:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006050:	4282      	cmp	r2, r0
 8006052:	d12a      	bne.n	80060aa <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006054:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006058:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800605a:	4291      	cmp	r1, r2
 800605c:	d127      	bne.n	80060ae <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800605e:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8006062:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006064:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006066:	4291      	cmp	r1, r2
 8006068:	d123      	bne.n	80060b2 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800606a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800606e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006070:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006072:	4291      	cmp	r1, r2
 8006074:	d11f      	bne.n	80060b6 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006076:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800607a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800607c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800607e:	4291      	cmp	r1, r2
 8006080:	d11b      	bne.n	80060ba <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006082:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006086:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006088:	3801      	subs	r0, #1
  return HAL_OK;
 800608a:	1a18      	subs	r0, r3, r0
 800608c:	bf18      	it	ne
 800608e:	2001      	movne	r0, #1
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8006092:	2001      	movs	r0, #1
}
 8006094:	4770      	bx	lr
        return HAL_ERROR;
 8006096:	2001      	movs	r0, #1
 8006098:	e004      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800609a:	2001      	movs	r0, #1
 800609c:	e002      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800609e:	2001      	movs	r0, #1
 80060a0:	e000      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 80060a2:	2000      	movs	r0, #0
}
 80060a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80060a6:	2001      	movs	r0, #1
 80060a8:	e7fc      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060aa:	2001      	movs	r0, #1
 80060ac:	e7fa      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060ae:	2001      	movs	r0, #1
 80060b0:	e7f8      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060b2:	2001      	movs	r0, #1
 80060b4:	e7f6      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060b6:	2001      	movs	r0, #1
 80060b8:	e7f4      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060ba:	2001      	movs	r0, #1
 80060bc:	e7f2      	b.n	80060a4 <HAL_RCC_OscConfig+0x648>
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	fffffc0c 	.word	0xfffffc0c
 80060c8:	ffff0007 	.word	0xffff0007

080060cc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060cc:	4b73      	ldr	r3, [pc, #460]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	f000 80dc 	beq.w	8006292 <HAL_RCC_GetSysClockFreq+0x1c6>
 80060da:	2b18      	cmp	r3, #24
 80060dc:	d010      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0x34>
 80060de:	b10b      	cbz	r3, 80060e4 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80060e0:	486f      	ldr	r0, [pc, #444]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80060e2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e4:	4b6d      	ldr	r3, [pc, #436]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f013 0f20 	tst.w	r3, #32
 80060ec:	f000 80d3 	beq.w	8006296 <HAL_RCC_GetSysClockFreq+0x1ca>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060f0:	4b6a      	ldr	r3, [pc, #424]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80060f8:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80060fa:	fa23 f000 	lsr.w	r0, r3, r0
 80060fe:	4770      	bx	lr
{
 8006100:	b430      	push	{r4, r5}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006102:	4a66      	ldr	r2, [pc, #408]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006104:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006106:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8006108:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800610c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800610e:	6b53      	ldr	r3, [r2, #52]	; 0x34

    if (pllm != 0U)
 8006110:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8006114:	f000 809e 	beq.w	8006254 <HAL_RCC_GetSysClockFreq+0x188>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006118:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800611c:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006120:	fb05 f303 	mul.w	r3, r5, r3
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800612c:	f001 0103 	and.w	r1, r1, #3
 8006130:	2901      	cmp	r1, #1
 8006132:	d064      	beq.n	80061fe <HAL_RCC_GetSysClockFreq+0x132>
 8006134:	2902      	cmp	r1, #2
 8006136:	f000 808f 	beq.w	8006258 <HAL_RCC_GetSysClockFreq+0x18c>
 800613a:	b1e1      	cbz	r1, 8006176 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800613c:	4b57      	ldr	r3, [pc, #348]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	ee07 3a10 	vmov	s14, r3
 8006148:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800614c:	eddf 6a56 	vldr	s13, [pc, #344]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8006150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800615c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006160:	ee07 0a10 	vmov	s14, r0
 8006164:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006168:	ed9f 6a50 	vldr	s12, [pc, #320]	; 80062ac <HAL_RCC_GetSysClockFreq+0x1e0>
 800616c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006170:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8006174:	e05f      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	f013 0f20 	tst.w	r3, #32
 800617c:	d022      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800617e:	6811      	ldr	r1, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006180:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006182:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006186:	4a47      	ldr	r2, [pc, #284]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8006188:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800618a:	ee07 2a10 	vmov	s14, r2
 800618e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006192:	ee07 0a10 	vmov	s14, r0
 8006196:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800619a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800619e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a2:	ee06 3a90 	vmov	s13, r3
 80061a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80061aa:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80061ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80061b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	e038      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061c4:	4b35      	ldr	r3, [pc, #212]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061cc:	ee07 3a10 	vmov	s14, r3
 80061d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80061d4:	eddf 6a34 	vldr	s13, [pc, #208]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80061d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061e8:	ee07 0a10 	vmov	s14, r0
 80061ec:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80061f0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80062b0 <HAL_RCC_GetSysClockFreq+0x1e4>
 80061f4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80061f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fc:	e01b      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fe:	4b27      	ldr	r3, [pc, #156]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a10 	vmov	s14, r3
 800620a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800620e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8006212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800621e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006222:	ee07 0a10 	vmov	s14, r0
 8006226:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800622a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80062ac <HAL_RCC_GetSysClockFreq+0x1e0>
 800622e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006232:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800623e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006240:	ee07 3a10 	vmov	s14, r3
 8006244:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006248:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800624c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006250:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006254:	bc30      	pop	{r4, r5}
 8006256:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	ee07 3a10 	vmov	s14, r3
 8006264:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006268:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80062a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 800626c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800627c:	ee07 0a10 	vmov	s14, r0
 8006280:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006284:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80062b4 <HAL_RCC_GetSysClockFreq+0x1e8>
 8006288:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800628c:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8006290:	e7d1      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0x16a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006292:	4809      	ldr	r0, [pc, #36]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8006294:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006296:	4803      	ldr	r0, [pc, #12]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x1d8>)
}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
 80062a0:	003d0900 	.word	0x003d0900
 80062a4:	03d09000 	.word	0x03d09000
 80062a8:	39000000 	.word	0x39000000
 80062ac:	4a742400 	.word	0x4a742400
 80062b0:	4c742400 	.word	0x4c742400
 80062b4:	4c371b00 	.word	0x4c371b00
 80062b8:	02dc6c00 	.word	0x02dc6c00

080062bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80062bc:	2800      	cmp	r0, #0
 80062be:	f000 80c3 	beq.w	8006448 <HAL_RCC_ClockConfig+0x18c>
{
 80062c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c6:	460d      	mov	r5, r1
 80062c8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062ca:	4b65      	ldr	r3, [pc, #404]	; (8006460 <HAL_RCC_ClockConfig+0x1a4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	428b      	cmp	r3, r1
 80062d4:	d20b      	bcs.n	80062ee <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4a62      	ldr	r2, [pc, #392]	; (8006460 <HAL_RCC_ClockConfig+0x1a4>)
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	f023 030f 	bic.w	r3, r3, #15
 80062de:	430b      	orrs	r3, r1
 80062e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	428b      	cmp	r3, r1
 80062ea:	f040 80af 	bne.w	800644c <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f013 0f04 	tst.w	r3, #4
 80062f4:	d00c      	beq.n	8006310 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062f6:	6922      	ldr	r2, [r4, #16]
 80062f8:	4b5a      	ldr	r3, [pc, #360]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006300:	429a      	cmp	r2, r3
 8006302:	d905      	bls.n	8006310 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006304:	4957      	ldr	r1, [pc, #348]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006306:	698b      	ldr	r3, [r1, #24]
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	4313      	orrs	r3, r2
 800630e:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	f013 0f08 	tst.w	r3, #8
 8006316:	d00c      	beq.n	8006332 <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006318:	6962      	ldr	r2, [r4, #20]
 800631a:	4b52      	ldr	r3, [pc, #328]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006322:	429a      	cmp	r2, r3
 8006324:	d905      	bls.n	8006332 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006326:	494f      	ldr	r1, [pc, #316]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006328:	69cb      	ldr	r3, [r1, #28]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	4313      	orrs	r3, r2
 8006330:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f013 0f10 	tst.w	r3, #16
 8006338:	d00c      	beq.n	8006354 <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800633a:	69a2      	ldr	r2, [r4, #24]
 800633c:	4b49      	ldr	r3, [pc, #292]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006344:	429a      	cmp	r2, r3
 8006346:	d905      	bls.n	8006354 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006348:	4946      	ldr	r1, [pc, #280]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800634a:	69cb      	ldr	r3, [r1, #28]
 800634c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006350:	4313      	orrs	r3, r2
 8006352:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	f013 0f20 	tst.w	r3, #32
 800635a:	d00c      	beq.n	8006376 <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800635c:	69e2      	ldr	r2, [r4, #28]
 800635e:	4b41      	ldr	r3, [pc, #260]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006366:	429a      	cmp	r2, r3
 8006368:	d905      	bls.n	8006376 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800636a:	493e      	ldr	r1, [pc, #248]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800636c:	6a0b      	ldr	r3, [r1, #32]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	4313      	orrs	r3, r2
 8006374:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f013 0f02 	tst.w	r3, #2
 800637c:	d074      	beq.n	8006468 <HAL_RCC_ClockConfig+0x1ac>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800637e:	68e1      	ldr	r1, [r4, #12]
 8006380:	4a38      	ldr	r2, [pc, #224]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006382:	6992      	ldr	r2, [r2, #24]
 8006384:	f002 020f 	and.w	r2, r2, #15
 8006388:	4291      	cmp	r1, r2
 800638a:	d965      	bls.n	8006458 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800638c:	4a35      	ldr	r2, [pc, #212]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800638e:	6993      	ldr	r3, [r2, #24]
 8006390:	f023 030f 	bic.w	r3, r3, #15
 8006394:	430b      	orrs	r3, r1
 8006396:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	f013 0f01 	tst.w	r3, #1
 800639e:	d041      	beq.n	8006424 <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063a0:	4a30      	ldr	r2, [pc, #192]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 80063a2:	6993      	ldr	r3, [r2, #24]
 80063a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063a8:	68a1      	ldr	r1, [r4, #8]
 80063aa:	430b      	orrs	r3, r1
 80063ac:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ae:	6862      	ldr	r2, [r4, #4]
 80063b0:	2a02      	cmp	r2, #2
 80063b2:	d00a      	beq.n	80063ca <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b4:	2a03      	cmp	r2, #3
 80063b6:	d027      	beq.n	8006408 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063b8:	2a01      	cmp	r2, #1
 80063ba:	d02c      	beq.n	8006416 <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063bc:	4b29      	ldr	r3, [pc, #164]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f013 0f04 	tst.w	r3, #4
 80063c4:	d106      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
 80063c8:	e0c1      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ca:	4b26      	ldr	r3, [pc, #152]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80063d2:	d03d      	beq.n	8006450 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d4:	4923      	ldr	r1, [pc, #140]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 80063d6:	690b      	ldr	r3, [r1, #16]
 80063d8:	f023 0307 	bic.w	r3, r3, #7
 80063dc:	4313      	orrs	r3, r2
 80063de:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80063e0:	f7fb ff68 	bl	80022b4 <HAL_GetTick>
 80063e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	4f1f      	ldr	r7, [pc, #124]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e8:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f2:	6862      	ldr	r2, [r4, #4]
 80063f4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80063f8:	d014      	beq.n	8006424 <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063fa:	f7fb ff5b 	bl	80022b4 <HAL_GetTick>
 80063fe:	1b80      	subs	r0, r0, r6
 8006400:	4540      	cmp	r0, r8
 8006402:	d9f3      	bls.n	80063ec <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 8006404:	2003      	movs	r0, #3
 8006406:	e0a2      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006408:	4b16      	ldr	r3, [pc, #88]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006410:	d1e0      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8006412:	2001      	movs	r0, #1
 8006414:	e09b      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006416:	4b13      	ldr	r3, [pc, #76]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800641e:	d1d9      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8006420:	2001      	movs	r0, #1
 8006422:	e094      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	f013 0f02 	tst.w	r3, #2
 800642a:	d020      	beq.n	800646e <HAL_RCC_ClockConfig+0x1b2>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800642c:	68e2      	ldr	r2, [r4, #12]
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	429a      	cmp	r2, r3
 8006438:	d219      	bcs.n	800646e <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800643a:	490a      	ldr	r1, [pc, #40]	; (8006464 <HAL_RCC_ClockConfig+0x1a8>)
 800643c:	698b      	ldr	r3, [r1, #24]
 800643e:	f023 030f 	bic.w	r3, r3, #15
 8006442:	4313      	orrs	r3, r2
 8006444:	618b      	str	r3, [r1, #24]
 8006446:	e012      	b.n	800646e <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8006448:	2001      	movs	r0, #1
}
 800644a:	4770      	bx	lr
      return HAL_ERROR;
 800644c:	2001      	movs	r0, #1
 800644e:	e07e      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
          return HAL_ERROR;
 8006450:	2001      	movs	r0, #1
 8006452:	e07c      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 8006454:	2001      	movs	r0, #1
 8006456:	e07a      	b.n	800654e <HAL_RCC_ClockConfig+0x292>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006458:	f013 0f01 	tst.w	r3, #1
 800645c:	d1a0      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xe4>
 800645e:	e7e5      	b.n	800642c <HAL_RCC_ClockConfig+0x170>
 8006460:	52002000 	.word	0x52002000
 8006464:	58024400 	.word	0x58024400
 8006468:	f013 0f01 	tst.w	r3, #1
 800646c:	d198      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800646e:	4b39      	ldr	r3, [pc, #228]	; (8006554 <HAL_RCC_ClockConfig+0x298>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	42ab      	cmp	r3, r5
 8006478:	d90a      	bls.n	8006490 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4a36      	ldr	r2, [pc, #216]	; (8006554 <HAL_RCC_ClockConfig+0x298>)
 800647c:	6813      	ldr	r3, [r2, #0]
 800647e:	f023 030f 	bic.w	r3, r3, #15
 8006482:	432b      	orrs	r3, r5
 8006484:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	42ab      	cmp	r3, r5
 800648e:	d1e1      	bne.n	8006454 <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	f013 0f04 	tst.w	r3, #4
 8006496:	d00c      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006498:	6922      	ldr	r2, [r4, #16]
 800649a:	4b2f      	ldr	r3, [pc, #188]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d205      	bcs.n	80064b2 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064a6:	492c      	ldr	r1, [pc, #176]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 80064a8:	698b      	ldr	r3, [r1, #24]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	4313      	orrs	r3, r2
 80064b0:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f013 0f08 	tst.w	r3, #8
 80064b8:	d00c      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ba:	6962      	ldr	r2, [r4, #20]
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d205      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064c8:	4923      	ldr	r1, [pc, #140]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 80064ca:	69cb      	ldr	r3, [r1, #28]
 80064cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	f013 0f10 	tst.w	r3, #16
 80064da:	d00c      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064dc:	69a2      	ldr	r2, [r4, #24]
 80064de:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d205      	bcs.n	80064f6 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064ea:	491b      	ldr	r1, [pc, #108]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 80064ec:	69cb      	ldr	r3, [r1, #28]
 80064ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f013 0f20 	tst.w	r3, #32
 80064fc:	d00c      	beq.n	8006518 <HAL_RCC_ClockConfig+0x25c>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064fe:	69e2      	ldr	r2, [r4, #28]
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006508:	429a      	cmp	r2, r3
 800650a:	d205      	bcs.n	8006518 <HAL_RCC_ClockConfig+0x25c>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800650c:	4912      	ldr	r1, [pc, #72]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 800650e:	6a0b      	ldr	r3, [r1, #32]
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	4313      	orrs	r3, r2
 8006516:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006518:	f7ff fdd8 	bl	80060cc <HAL_RCC_GetSysClockFreq>
 800651c:	490e      	ldr	r1, [pc, #56]	; (8006558 <HAL_RCC_ClockConfig+0x29c>)
 800651e:	698b      	ldr	r3, [r1, #24]
 8006520:	4a0e      	ldr	r2, [pc, #56]	; (800655c <HAL_RCC_ClockConfig+0x2a0>)
 8006522:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006526:	5cd3      	ldrb	r3, [r2, r3]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800652e:	698b      	ldr	r3, [r1, #24]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	5cd3      	ldrb	r3, [r2, r3]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	fa20 f303 	lsr.w	r3, r0, r3
 800653e:	4a08      	ldr	r2, [pc, #32]	; (8006560 <HAL_RCC_ClockConfig+0x2a4>)
 8006540:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_RCC_ClockConfig+0x2a8>)
 8006544:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <HAL_RCC_ClockConfig+0x2ac>)
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f7fa fd99 	bl	8001080 <HAL_InitTick>
}
 800654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006552:	bf00      	nop
 8006554:	52002000 	.word	0x52002000
 8006558:	58024400 	.word	0x58024400
 800655c:	08011200 	.word	0x08011200
 8006560:	24000004 	.word	0x24000004
 8006564:	24000000 	.word	0x24000000
 8006568:	24000014 	.word	0x24000014

0800656c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800656c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800656e:	f7ff fdad 	bl	80060cc <HAL_RCC_GetSysClockFreq>
 8006572:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <HAL_RCC_GetHCLKFreq+0x34>)
 8006574:	6993      	ldr	r3, [r2, #24]
 8006576:	490b      	ldr	r1, [pc, #44]	; (80065a4 <HAL_RCC_GetHCLKFreq+0x38>)
 8006578:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800657c:	5ccb      	ldrb	r3, [r1, r3]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006586:	6992      	ldr	r2, [r2, #24]
 8006588:	f002 020f 	and.w	r2, r2, #15
 800658c:	5c88      	ldrb	r0, [r1, r2]
 800658e:	f000 001f 	and.w	r0, r0, #31
 8006592:	fa23 f000 	lsr.w	r0, r3, r0
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006598:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800659a:	4a04      	ldr	r2, [pc, #16]	; (80065ac <HAL_RCC_GetHCLKFreq+0x40>)
 800659c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800659e:	bd08      	pop	{r3, pc}
 80065a0:	58024400 	.word	0x58024400
 80065a4:	08011200 	.word	0x08011200
 80065a8:	24000004 	.word	0x24000004
 80065ac:	24000000 	.word	0x24000000

080065b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80065b2:	f7ff ffdb 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c0:	5cd3      	ldrb	r3, [r2, r3]
 80065c2:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80065c6:	40d8      	lsrs	r0, r3
 80065c8:	bd08      	pop	{r3, pc}
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
 80065d0:	08011200 	.word	0x08011200

080065d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80065d6:	f7ff ffc9 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80065e2:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065e4:	5cd3      	ldrb	r3, [r2, r3]
 80065e6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065ea:	40d8      	lsrs	r0, r3
 80065ec:	bd08      	pop	{r3, pc}
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
 80065f4:	08011200 	.word	0x08011200

080065f8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80065f8:	233f      	movs	r3, #63	; 0x3f
 80065fa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_RCC_GetClockConfig+0x4c>)
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	f002 0207 	and.w	r2, r2, #7
 8006604:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800660c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	f002 020f 	and.w	r2, r2, #15
 8006614:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800661c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006624:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800662c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006634:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <HAL_RCC_GetClockConfig+0x50>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	600b      	str	r3, [r1, #0]
}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
 8006648:	52002000 	.word	0x52002000

0800664c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800664e:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d074      	beq.n	8006744 <RCCEx_PLL2_Config+0xf8>
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800665e:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006660:	6813      	ldr	r3, [r2, #0]
 8006662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006668:	f7fb fe24 	bl	80022b4 <HAL_GetTick>
 800666c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800666e:	4d36      	ldr	r5, [pc, #216]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006676:	d006      	beq.n	8006686 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006678:	f7fb fe1c 	bl	80022b4 <HAL_GetTick>
 800667c:	1b03      	subs	r3, r0, r4
 800667e:	2b02      	cmp	r3, #2
 8006680:	d9f6      	bls.n	8006670 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 8006682:	2003      	movs	r0, #3
 8006684:	e05f      	b.n	8006746 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668a:	6831      	ldr	r1, [r6, #0]
 800668c:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8006690:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
 8006696:	68b2      	ldr	r2, [r6, #8]
 8006698:	3a01      	subs	r2, #1
 800669a:	0252      	lsls	r2, r2, #9
 800669c:	b292      	uxth	r2, r2
 800669e:	68f1      	ldr	r1, [r6, #12]
 80066a0:	3901      	subs	r1, #1
 80066a2:	0409      	lsls	r1, r1, #16
 80066a4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80066a8:	430a      	orrs	r2, r1
 80066aa:	6871      	ldr	r1, [r6, #4]
 80066ac:	3901      	subs	r1, #1
 80066ae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80066b2:	430a      	orrs	r2, r1
 80066b4:	6931      	ldr	r1, [r6, #16]
 80066b6:	3901      	subs	r1, #1
 80066b8:	0609      	lsls	r1, r1, #24
 80066ba:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80066be:	430a      	orrs	r2, r1
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066c8:	6971      	ldr	r1, [r6, #20]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d0:	f022 0220 	bic.w	r2, r2, #32
 80066d4:	69b1      	ldr	r1, [r6, #24]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	f022 0210 	bic.w	r2, r2, #16
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066e2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066e4:	69f1      	ldr	r1, [r6, #28]
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <RCCEx_PLL2_Config+0x100>)
 80066e8:	4002      	ands	r2, r0
 80066ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	f042 0210 	orr.w	r2, r2, #16
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066f8:	b9c7      	cbnz	r7, 800672c <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066fa:	461a      	mov	r2, r3
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006702:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006704:	4a10      	ldr	r2, [pc, #64]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800670c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670e:	f7fb fdd1 	bl	80022b4 <HAL_GetTick>
 8006712:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006714:	4d0c      	ldr	r5, [pc, #48]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800671c:	d110      	bne.n	8006740 <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800671e:	f7fb fdc9 	bl	80022b4 <HAL_GetTick>
 8006722:	1b00      	subs	r0, r0, r4
 8006724:	2802      	cmp	r0, #2
 8006726:	d9f6      	bls.n	8006716 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8006728:	2003      	movs	r0, #3
 800672a:	e00c      	b.n	8006746 <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 800672c:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800672e:	4a06      	ldr	r2, [pc, #24]	; (8006748 <RCCEx_PLL2_Config+0xfc>)
 8006730:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006732:	bf0c      	ite	eq
 8006734:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006738:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800673c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800673e:	e7e1      	b.n	8006704 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8006740:	2000      	movs	r0, #0
 8006742:	e000      	b.n	8006746 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8006744:	2001      	movs	r0, #1
}
 8006746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006748:	58024400 	.word	0x58024400
 800674c:	ffff0007 	.word	0xffff0007

08006750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006752:	4b3e      	ldr	r3, [pc, #248]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b03      	cmp	r3, #3
 800675c:	d074      	beq.n	8006848 <RCCEx_PLL3_Config+0xf8>
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 8006764:	6813      	ldr	r3, [r2, #0]
 8006766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676c:	f7fb fda2 	bl	80022b4 <HAL_GetTick>
 8006770:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006772:	4d36      	ldr	r5, [pc, #216]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800677a:	d006      	beq.n	800678a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800677c:	f7fb fd9a 	bl	80022b4 <HAL_GetTick>
 8006780:	1b03      	subs	r3, r0, r4
 8006782:	2b02      	cmp	r3, #2
 8006784:	d9f6      	bls.n	8006774 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8006786:	2003      	movs	r0, #3
 8006788:	e05f      	b.n	800684a <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800678a:	4b30      	ldr	r3, [pc, #192]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 800678c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678e:	6831      	ldr	r1, [r6, #0]
 8006790:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8006794:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8006798:	629a      	str	r2, [r3, #40]	; 0x28
 800679a:	68b2      	ldr	r2, [r6, #8]
 800679c:	3a01      	subs	r2, #1
 800679e:	0252      	lsls	r2, r2, #9
 80067a0:	b292      	uxth	r2, r2
 80067a2:	68f1      	ldr	r1, [r6, #12]
 80067a4:	3901      	subs	r1, #1
 80067a6:	0409      	lsls	r1, r1, #16
 80067a8:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80067ac:	430a      	orrs	r2, r1
 80067ae:	6871      	ldr	r1, [r6, #4]
 80067b0:	3901      	subs	r1, #1
 80067b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80067b6:	430a      	orrs	r2, r1
 80067b8:	6931      	ldr	r1, [r6, #16]
 80067ba:	3901      	subs	r1, #1
 80067bc:	0609      	lsls	r1, r1, #24
 80067be:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80067c2:	430a      	orrs	r2, r1
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067cc:	6971      	ldr	r1, [r6, #20]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067d8:	69b1      	ldr	r1, [r6, #24]
 80067da:	430a      	orrs	r2, r1
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067e6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80067e8:	69f1      	ldr	r1, [r6, #28]
 80067ea:	4a19      	ldr	r2, [pc, #100]	; (8006850 <RCCEx_PLL3_Config+0x100>)
 80067ec:	4002      	ands	r2, r0
 80067ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80067f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067fc:	b9c7      	cbnz	r7, 8006830 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067fe:	461a      	mov	r2, r3
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006806:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006808:	4a10      	ldr	r2, [pc, #64]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 800680a:	6813      	ldr	r3, [r2, #0]
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fb fd4f 	bl	80022b4 <HAL_GetTick>
 8006816:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006818:	4d0c      	ldr	r5, [pc, #48]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006820:	d110      	bne.n	8006844 <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006822:	f7fb fd47 	bl	80022b4 <HAL_GetTick>
 8006826:	1b00      	subs	r0, r0, r4
 8006828:	2802      	cmp	r0, #2
 800682a:	d9f6      	bls.n	800681a <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 800682c:	2003      	movs	r0, #3
 800682e:	e00c      	b.n	800684a <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8006830:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006832:	4a06      	ldr	r2, [pc, #24]	; (800684c <RCCEx_PLL3_Config+0xfc>)
 8006834:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006836:	bf0c      	ite	eq
 8006838:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800683c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006840:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006842:	e7e1      	b.n	8006808 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8006844:	2000      	movs	r0, #0
 8006846:	e000      	b.n	800684a <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8006848:	2001      	movs	r0, #1
}
 800684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684c:	58024400 	.word	0x58024400
 8006850:	ffff0007 	.word	0xffff0007

08006854 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800685a:	6803      	ldr	r3, [r0, #0]
 800685c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006860:	d02b      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006862:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006868:	d021      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800686a:	d80c      	bhi.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800686c:	b1cb      	cbz	r3, 80068a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006872:	d106      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006874:	2102      	movs	r1, #2
 8006876:	3004      	adds	r0, #4
 8006878:	f7ff fee8 	bl	800664c <RCCEx_PLL2_Config>
 800687c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800687e:	b9ee      	cbnz	r6, 80068bc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006880:	e004      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006882:	2601      	movs	r6, #1
 8006884:	e01a      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688a:	d108      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800688c:	4a96      	ldr	r2, [pc, #600]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800688e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006890:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006894:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006896:	430b      	orrs	r3, r1
 8006898:	6513      	str	r3, [r2, #80]	; 0x50
 800689a:	2600      	movs	r6, #0
 800689c:	e00e      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800689e:	2601      	movs	r6, #1
 80068a0:	e00c      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4a91      	ldr	r2, [pc, #580]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80068a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80068ac:	e7ee      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068ae:	2102      	movs	r1, #2
 80068b0:	3024      	adds	r0, #36	; 0x24
 80068b2:	f7ff ff4d 	bl	8006750 <RCCEx_PLL3_Config>
 80068b6:	4606      	mov	r6, r0
      break;
 80068b8:	e7e1      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068ba:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80068c2:	d025      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 80068c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d834      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80068ca:	e8df f003 	tbb	[pc, r3]
 80068ce:	0a03      	.short	0x0a03
 80068d0:	1710      	.short	0x1710
 80068d2:	17          	.byte	0x17
 80068d3:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4a84      	ldr	r2, [pc, #528]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80068d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80068d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068dc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80068de:	4635      	mov	r5, r6
 80068e0:	e00d      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e2:	2100      	movs	r1, #0
 80068e4:	1d20      	adds	r0, r4, #4
 80068e6:	f7ff feb1 	bl	800664c <RCCEx_PLL2_Config>
 80068ea:	4605      	mov	r5, r0
      break;
 80068ec:	e007      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068ee:	2100      	movs	r1, #0
 80068f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068f4:	f7ff ff2c 	bl	8006750 <RCCEx_PLL3_Config>
 80068f8:	4605      	mov	r5, r0
      break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 80068fc:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80068fe:	b9e5      	cbnz	r5, 800693a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006900:	4a79      	ldr	r2, [pc, #484]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006902:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006904:	f023 0307 	bic.w	r3, r3, #7
 8006908:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800690a:	430b      	orrs	r3, r1
 800690c:	6513      	str	r3, [r2, #80]	; 0x50
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006910:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006918:	d021      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 800691a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d03b      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8006920:	d810      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8006922:	b39b      	cbz	r3, 800698c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d10a      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006928:	2100      	movs	r1, #0
 800692a:	1d20      	adds	r0, r4, #4
 800692c:	f7ff fe8e 	bl	800664c <RCCEx_PLL2_Config>
 8006930:	4605      	mov	r5, r0
      break;
 8006932:	e00c      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006934:	2601      	movs	r6, #1
 8006936:	4635      	mov	r5, r6
 8006938:	e7eb      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800693a:	462e      	mov	r6, r5
 800693c:	e7e9      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 800693e:	2601      	movs	r6, #1
 8006940:	4635      	mov	r5, r6
 8006942:	e00c      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8006944:	2bc0      	cmp	r3, #192	; 0xc0
 8006946:	d002      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694c:	d11b      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 800694e:	bb55      	cbnz	r5, 80069a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006950:	4a65      	ldr	r2, [pc, #404]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006952:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006954:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8006958:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800695a:	430b      	orrs	r3, r1
 800695c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006964:	d045      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006966:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800696a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800696e:	d038      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006970:	d81e      	bhi.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006972:	b383      	cbz	r3, 80069d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006978:	d117      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800697a:	2100      	movs	r1, #0
 800697c:	1d20      	adds	r0, r4, #4
 800697e:	f7ff fe65 	bl	800664c <RCCEx_PLL2_Config>
 8006982:	4605      	mov	r5, r0
      break;
 8006984:	e01a      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006986:	2601      	movs	r6, #1
 8006988:	4635      	mov	r5, r6
 800698a:	e7e8      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4a56      	ldr	r2, [pc, #344]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800698e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006994:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006996:	e7da      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006998:	2100      	movs	r1, #0
 800699a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800699e:	f7ff fed7 	bl	8006750 <RCCEx_PLL3_Config>
 80069a2:	4605      	mov	r5, r0
      break;
 80069a4:	e7d3      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80069a6:	462e      	mov	r6, r5
 80069a8:	e7d9      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 80069aa:	2601      	movs	r6, #1
 80069ac:	4635      	mov	r5, r6
 80069ae:	e020      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80069b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069b4:	d002      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80069b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 80069bc:	b9c5      	cbnz	r5, 80069f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069be:	4a4a      	ldr	r2, [pc, #296]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80069c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80069c2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80069c6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80069ca:	430b      	orrs	r3, r1
 80069cc:	6593      	str	r3, [r2, #88]	; 0x58
 80069ce:	e010      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 80069d0:	2601      	movs	r6, #1
 80069d2:	4635      	mov	r5, r6
 80069d4:	e00d      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d6:	4a44      	ldr	r2, [pc, #272]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80069d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80069e0:	e7ec      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x168>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069e2:	2100      	movs	r1, #0
 80069e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80069e8:	f7ff feb2 	bl	8006750 <RCCEx_PLL3_Config>
 80069ec:	4605      	mov	r5, r0
      break;
 80069ee:	e7e5      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80069f0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80069f8:	d023      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Sai4BClockSelection)
 80069fa:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80069fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a02:	d041      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006a04:	d80d      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d038      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a0e:	d105      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a10:	2100      	movs	r1, #0
 8006a12:	1d20      	adds	r0, r4, #4
 8006a14:	f7ff fe1a 	bl	800664c <RCCEx_PLL2_Config>
 8006a18:	4605      	mov	r5, r0
      break;
 8006a1a:	e008      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a1c:	2601      	movs	r6, #1
 8006a1e:	4635      	mov	r5, r6
 8006a20:	e00f      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a26:	d002      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d123      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x222>
    if(ret == HAL_OK)
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	d131      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a32:	4a2d      	ldr	r2, [pc, #180]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006a34:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006a36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006a3a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a48:	d02e      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->QspiClockSelection)
 8006a4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d03f      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a50:	d826      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006a52:	b133      	cbz	r3, 8006a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d120      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006a5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d13a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a66:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006a68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006a6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006a6e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a70:	430b      	orrs	r3, r1
 8006a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a74:	e018      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a76:	2601      	movs	r6, #1
 8006a78:	4635      	mov	r5, r6
 8006a7a:	e7e2      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7c:	4a1a      	ldr	r2, [pc, #104]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006a7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006a86:	e7d2      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a88:	2100      	movs	r1, #0
 8006a8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006a8e:	f7ff fe5f 	bl	8006750 <RCCEx_PLL3_Config>
 8006a92:	4605      	mov	r5, r0
      break;
 8006a94:	e7cb      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8006a96:	462e      	mov	r6, r5
 8006a98:	e7d3      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->QspiClockSelection)
 8006a9a:	2601      	movs	r6, #1
 8006a9c:	4635      	mov	r5, r6
 8006a9e:	e003      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006aa0:	2b30      	cmp	r3, #48	; 0x30
 8006aa2:	d0de      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006aa4:	2601      	movs	r6, #1
 8006aa6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006aae:	d02c      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ab0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d04d      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006ab8:	d818      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d044      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d10d      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	1d20      	adds	r0, r4, #4
 8006ac8:	f7ff fdc0 	bl	800664c <RCCEx_PLL2_Config>
 8006acc:	4605      	mov	r5, r0
      break;
 8006ace:	e013      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	1d20      	adds	r0, r4, #4
 8006ad4:	f7ff fdba 	bl	800664c <RCCEx_PLL2_Config>
 8006ad8:	4605      	mov	r5, r0
      break;
 8006ada:	e7c2      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006adc:	462e      	mov	r6, r5
 8006ade:	e7e3      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ae0:	2601      	movs	r6, #1
 8006ae2:	4635      	mov	r5, r6
 8006ae4:	e011      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006af0:	d002      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af6:	d124      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	d132      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006afc:	4a80      	ldr	r2, [pc, #512]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006afe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006b10:	d036      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006b12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b18:	d050      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006b1a:	d827      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006b1c:	b13b      	cbz	r3, 8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b22:	d120      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b24:	2101      	movs	r1, #1
 8006b26:	1d20      	adds	r0, r4, #4
 8006b28:	f7ff fd90 	bl	800664c <RCCEx_PLL2_Config>
 8006b2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d14b      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b32:	4a73      	ldr	r2, [pc, #460]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b34:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006b36:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006b3a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6513      	str	r3, [r2, #80]	; 0x50
 8006b40:	e01e      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b42:	2601      	movs	r6, #1
 8006b44:	4635      	mov	r5, r6
 8006b46:	e7e0      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006b52:	e7d1      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b54:	2100      	movs	r1, #0
 8006b56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b5a:	f7ff fdf9 	bl	8006750 <RCCEx_PLL3_Config>
 8006b5e:	4605      	mov	r5, r0
      break;
 8006b60:	e7ca      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006b62:	462e      	mov	r6, r5
 8006b64:	e7d1      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006b66:	2601      	movs	r6, #1
 8006b68:	4635      	mov	r5, r6
 8006b6a:	e009      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006b74:	d0db      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b7a:	d0d8      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b7c:	2601      	movs	r6, #1
 8006b7e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006b86:	d02f      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b88:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b90:	d043      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006b92:	d81f      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006b94:	b13b      	cbz	r3, 8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b9a:	d118      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	1d20      	adds	r0, r4, #4
 8006ba0:	f7ff fd54 	bl	800664c <RCCEx_PLL2_Config>
 8006ba4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	d13e      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006baa:	4a55      	ldr	r2, [pc, #340]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006bae:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006bb2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006bba:	e015      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006bc2:	f7ff fdc5 	bl	8006750 <RCCEx_PLL3_Config>
 8006bc6:	4605      	mov	r5, r0
      break;
 8006bc8:	e7b1      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006bca:	462e      	mov	r6, r5
 8006bcc:	e7d8      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006bce:	2601      	movs	r6, #1
 8006bd0:	4635      	mov	r5, r6
 8006bd2:	e009      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006bd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bd8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006bdc:	d0e3      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be2:	d0e0      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006be4:	2601      	movs	r6, #1
 8006be6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006bee:	d009      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8006bf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf6:	d019      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d024      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006bfe:	b1d3      	cbz	r3, 8006c36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006c00:	2601      	movs	r6, #1
 8006c02:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006c0a:	d032      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->FmcClockSelection)
 8006c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d859      	bhi.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x472>
 8006c12:	e8df f003 	tbb	[pc, r3]
 8006c16:	2126      	.short	0x2126
 8006c18:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c20:	f7ff fd96 	bl	8006750 <RCCEx_PLL3_Config>
 8006c24:	4605      	mov	r5, r0
      break;
 8006c26:	e7be      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006c28:	462e      	mov	r6, r5
 8006c2a:	e7dd      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2c:	4a34      	ldr	r2, [pc, #208]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c34:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006c36:	b96d      	cbnz	r5, 8006c54 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c38:	4a31      	ldr	r2, [pc, #196]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006c3c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006c40:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6513      	str	r3, [r2, #80]	; 0x50
 8006c46:	e7dd      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c48:	2101      	movs	r1, #1
 8006c4a:	1d20      	adds	r0, r4, #4
 8006c4c:	f7ff fcfe 	bl	800664c <RCCEx_PLL2_Config>
 8006c50:	4605      	mov	r5, r0
      break;
 8006c52:	e7f0      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006c54:	462e      	mov	r6, r5
 8006c56:	e7d5      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4a29      	ldr	r2, [pc, #164]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c60:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006c62:	bb9d      	cbnz	r5, 8006ccc <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c64:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006c68:	f023 0303 	bic.w	r3, r3, #3
 8006c6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006c78:	d12a      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f013 0f01 	tst.w	r3, #1
 8006c80:	f000 80aa 	beq.w	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c84:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006c86:	2b28      	cmp	r3, #40	; 0x28
 8006c88:	f200 80a4 	bhi.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8006c8c:	e8df f003 	tbb	[pc, r3]
 8006c90:	a2a2a292 	.word	0xa2a2a292
 8006c94:	a2a2a2a2 	.word	0xa2a2a2a2
 8006c98:	a2a2a28d 	.word	0xa2a2a28d
 8006c9c:	a2a2a2a2 	.word	0xa2a2a2a2
 8006ca0:	a2a2a29b 	.word	0xa2a2a29b
 8006ca4:	a2a2a2a2 	.word	0xa2a2a2a2
 8006ca8:	a2a2a292 	.word	0xa2a2a292
 8006cac:	a2a2a2a2 	.word	0xa2a2a2a2
 8006cb0:	a2a2a292 	.word	0xa2a2a292
 8006cb4:	a2a2a2a2 	.word	0xa2a2a2a2
 8006cb8:	92          	.byte	0x92
 8006cb9:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cba:	2102      	movs	r1, #2
 8006cbc:	1d20      	adds	r0, r4, #4
 8006cbe:	f7ff fcc5 	bl	800664c <RCCEx_PLL2_Config>
 8006cc2:	4605      	mov	r5, r0
      break;
 8006cc4:	e7cd      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 8006cc6:	2601      	movs	r6, #1
 8006cc8:	4635      	mov	r5, r6
 8006cca:	e7d2      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006ccc:	462e      	mov	r6, r5
 8006cce:	e7d0      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd0:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006cda:	f7fb faeb 	bl	80022b4 <HAL_GetTick>
 8006cde:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cee:	f7fb fae1 	bl	80022b4 <HAL_GetTick>
 8006cf2:	1bc0      	subs	r0, r0, r7
 8006cf4:	2864      	cmp	r0, #100	; 0x64
 8006cf6:	d9f5      	bls.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 8006cf8:	2603      	movs	r6, #3
 8006cfa:	4635      	mov	r5, r6
 8006cfc:	e7bd      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	58024800 	.word	0x58024800
    if(ret == HAL_OK)
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	d14c      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d0c:	4b9f      	ldr	r3, [pc, #636]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d10:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8006d14:	4053      	eors	r3, r2
 8006d16:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d1a:	d00c      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d1c:	4b9b      	ldr	r3, [pc, #620]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d26:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006d2a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d2e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006d32:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006d34:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d36:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d014      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d40:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006d44:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d48:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006d4c:	d021      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8006d4e:	4a8f      	ldr	r2, [pc, #572]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006d50:	6913      	ldr	r3, [r2, #16]
 8006d52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d56:	6113      	str	r3, [r2, #16]
 8006d58:	4a8c      	ldr	r2, [pc, #560]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006d5a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006d5c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6713      	str	r3, [r2, #112]	; 0x70
 8006d68:	e787      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x426>
        tickstart = HAL_GetTick();
 8006d6a:	f7fb faa3 	bl	80022b4 <HAL_GetTick>
 8006d6e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d70:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d74:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d78:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006d7c:	f013 0f02 	tst.w	r3, #2
 8006d80:	d1de      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fb fa97 	bl	80022b4 <HAL_GetTick>
 8006d86:	1bc0      	subs	r0, r0, r7
 8006d88:	4548      	cmp	r0, r9
 8006d8a:	d9f5      	bls.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x524>
            ret = HAL_TIMEOUT;
 8006d8c:	2603      	movs	r6, #3
 8006d8e:	4635      	mov	r5, r6
 8006d90:	e773      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x426>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d92:	487e      	ldr	r0, [pc, #504]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006d94:	6901      	ldr	r1, [r0, #16]
 8006d96:	4a7e      	ldr	r2, [pc, #504]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006d98:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8006d9c:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8006da0:	4313      	orrs	r3, r2
 8006da2:	6103      	str	r3, [r0, #16]
 8006da4:	e7d8      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006da6:	462e      	mov	r6, r5
 8006da8:	e767      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006daa:	2101      	movs	r1, #1
 8006dac:	1d20      	adds	r0, r4, #4
 8006dae:	f7ff fc4d 	bl	800664c <RCCEx_PLL2_Config>
 8006db2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006db4:	b9e5      	cbnz	r5, 8006df0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006db6:	4a75      	ldr	r2, [pc, #468]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006db8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006dba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006dbe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6553      	str	r3, [r2, #84]	; 0x54
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dcc:	f7ff fcc0 	bl	8006750 <RCCEx_PLL3_Config>
 8006dd0:	4605      	mov	r5, r0
      break;
 8006dd2:	e7ef      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006dd4:	2601      	movs	r6, #1
 8006dd6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	f013 0f02 	tst.w	r3, #2
 8006dde:	d016      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006de0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d827      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8006de6:	e8df f003 	tbb	[pc, r3]
 8006dea:	050a      	.short	0x050a
 8006dec:	0a0a0a1f 	.word	0x0a0a0a1f
 8006df0:	462e      	mov	r6, r5
 8006df2:	e7f1      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006df4:	2101      	movs	r1, #1
 8006df6:	1d20      	adds	r0, r4, #4
 8006df8:	f7ff fc28 	bl	800664c <RCCEx_PLL2_Config>
 8006dfc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006dfe:	b9ed      	cbnz	r5, 8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e00:	4a62      	ldr	r2, [pc, #392]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006e02:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f013 0f04 	tst.w	r3, #4
 8006e14:	d022      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d843      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006e1e:	e8df f003 	tbb	[pc, r3]
 8006e22:	0f14      	.short	0x0f14
 8006e24:	1414143b 	.word	0x1414143b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e28:	2101      	movs	r1, #1
 8006e2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006e2e:	f7ff fc8f 	bl	8006750 <RCCEx_PLL3_Config>
 8006e32:	4605      	mov	r5, r0
      break;
 8006e34:	e7e3      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e36:	2601      	movs	r6, #1
 8006e38:	4635      	mov	r5, r6
 8006e3a:	e7e8      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006e3c:	462e      	mov	r6, r5
 8006e3e:	e7e6      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e40:	2101      	movs	r1, #1
 8006e42:	1d20      	adds	r0, r4, #4
 8006e44:	f7ff fc02 	bl	800664c <RCCEx_PLL2_Config>
 8006e48:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e4a:	bb7d      	cbnz	r5, 8006eac <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e4c:	4a4f      	ldr	r2, [pc, #316]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006e4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	f013 0f20 	tst.w	r3, #32
 8006e62:	d032      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006e64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d04b      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8006e6e:	d822      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e70:	b13b      	cbz	r3, 8006e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e76:	d11b      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	1d20      	adds	r0, r4, #4
 8006e7c:	f7ff fbe6 	bl	800664c <RCCEx_PLL2_Config>
 8006e80:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	d146      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e86:	4a41      	ldr	r2, [pc, #260]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006e88:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006e8a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006e8e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6553      	str	r3, [r2, #84]	; 0x54
 8006e96:	e018      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x676>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e98:	2101      	movs	r1, #1
 8006e9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006e9e:	f7ff fc57 	bl	8006750 <RCCEx_PLL3_Config>
 8006ea2:	4605      	mov	r5, r0
      break;
 8006ea4:	e7d1      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ea6:	2601      	movs	r6, #1
 8006ea8:	4635      	mov	r5, r6
 8006eaa:	e7d7      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006eac:	462e      	mov	r6, r5
 8006eae:	e7d5      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006eb0:	2601      	movs	r6, #1
 8006eb2:	4635      	mov	r5, r6
 8006eb4:	e009      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006eb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006eba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006ebe:	d0e0      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8006ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ec4:	d0dd      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8006ec6:	2601      	movs	r6, #1
 8006ec8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ed0:	d02f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ed2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eda:	d04a      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006edc:	d81f      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 8006ede:	b13b      	cbz	r3, 8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8006ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee4:	d118      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	1d20      	adds	r0, r4, #4
 8006eea:	f7ff fbaf 	bl	800664c <RCCEx_PLL2_Config>
 8006eee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	d145      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006ef6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006ef8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006efc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6593      	str	r3, [r2, #88]	; 0x58
 8006f04:	e015      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f06:	2102      	movs	r1, #2
 8006f08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f0c:	f7ff fc20 	bl	8006750 <RCCEx_PLL3_Config>
 8006f10:	4605      	mov	r5, r0
      break;
 8006f12:	e7b6      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8006f14:	462e      	mov	r6, r5
 8006f16:	e7d8      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f18:	2601      	movs	r6, #1
 8006f1a:	4635      	mov	r5, r6
 8006f1c:	e009      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8006f1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f22:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006f26:	d0e3      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8006f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f2c:	d0e0      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8006f2e:	2601      	movs	r6, #1
 8006f30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f38:	d036      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f3a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f42:	f000 80e6 	beq.w	8007112 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8006f46:	d825      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006f48:	b13b      	cbz	r3, 8006f5a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8006f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4e:	d119      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x730>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f50:	2100      	movs	r1, #0
 8006f52:	1d20      	adds	r0, r4, #4
 8006f54:	f7ff fb7a 	bl	800664c <RCCEx_PLL2_Config>
 8006f58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	f040 80e0 	bne.w	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006f62:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006f64:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006f68:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f70:	e01a      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f72:	2102      	movs	r1, #2
 8006f74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f78:	f7ff fbea 	bl	8006750 <RCCEx_PLL3_Config>
 8006f7c:	4605      	mov	r5, r0
      break;
 8006f7e:	e7b7      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8006f80:	462e      	mov	r6, r5
 8006f82:	e7d6      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f84:	2601      	movs	r6, #1
 8006f86:	4635      	mov	r5, r6
 8006f88:	e00e      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8006f8a:	bf00      	nop
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	00ffffcf 	.word	0x00ffffcf
 8006f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f9c:	d0dd      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8006f9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006fa2:	d0da      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8006fa4:	2601      	movs	r6, #1
 8006fa6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	f013 0f08 	tst.w	r3, #8
 8006fae:	d00d      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x778>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006fb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	f000 80b4 	beq.w	8007124 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fbc:	4a97      	ldr	r2, [pc, #604]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006fbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006fc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fc4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	f013 0f10 	tst.w	r3, #16
 8006fd2:	d00d      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006fd4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fdc:	f000 80ab 	beq.w	8007136 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fe0:	4a8e      	ldr	r2, [pc, #568]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006fe2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006ff6:	d00e      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8006ff8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007000:	f000 80b1 	beq.w	8007166 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007008:	f000 80a3 	beq.w	8007152 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 809b 	beq.w	8007148 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007012:	2601      	movs	r6, #1
 8007014:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800701c:	d00f      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch(PeriphClkInit->UsbClockSelection)
 800701e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007026:	f000 80b6 	beq.w	8007196 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800702a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800702e:	f000 80a8 	beq.w	8007182 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8007032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007036:	f000 809f 	beq.w	8007178 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800703a:	2601      	movs	r6, #1
 800703c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007044:	d009      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007046:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80ad 	beq.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800704e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007052:	f000 80b7 	beq.w	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8007056:	2601      	movs	r6, #1
 8007058:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007060:	f040 80b8 	bne.w	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x980>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800706a:	d00d      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch(PeriphClkInit->RngClockSelection)
 800706c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800706e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007072:	f000 80bb 	beq.w	80071ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007076:	f240 80b6 	bls.w	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x992>
 800707a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800707e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007082:	f000 80b8 	beq.w	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007086:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800708e:	d006      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007090:	4a62      	ldr	r2, [pc, #392]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007092:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007098:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800709a:	430b      	orrs	r3, r1
 800709c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80070a4:	d007      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070a6:	4a5d      	ldr	r2, [pc, #372]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80070a8:	6913      	ldr	r3, [r2, #16]
 80070aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ae:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80070b2:	430b      	orrs	r3, r1
 80070b4:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80070bc:	d006      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070be:	4a57      	ldr	r2, [pc, #348]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80070c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80070c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070c6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070d2:	d009      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x894>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070d4:	4b51      	ldr	r3, [pc, #324]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070dc:	611a      	str	r2, [r3, #16]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80070e4:	430a      	orrs	r2, r1
 80070e6:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f2c0 808e 	blt.w	800720c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80070f6:	d007      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070f8:	4a48      	ldr	r2, [pc, #288]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80070fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007100:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007104:	430b      	orrs	r3, r1
 8007106:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007108:	1e30      	subs	r0, r6, #0
 800710a:	bf18      	it	ne
 800710c:	2001      	movne	r0, #1
 800710e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007112:	2102      	movs	r1, #2
 8007114:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007118:	f7ff fb1a 	bl	8006750 <RCCEx_PLL3_Config>
 800711c:	4605      	mov	r5, r0
      break;
 800711e:	e71c      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007120:	462e      	mov	r6, r5
 8007122:	e741      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007124:	2102      	movs	r1, #2
 8007126:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800712a:	f7ff fb11 	bl	8006750 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800712e:	2800      	cmp	r0, #0
 8007130:	bf18      	it	ne
 8007132:	2601      	movne	r6, #1
 8007134:	e742      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x768>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007136:	2102      	movs	r1, #2
 8007138:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800713c:	f7ff fb08 	bl	8006750 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007140:	2800      	cmp	r0, #0
 8007142:	bf18      	it	ne
 8007144:	2601      	movne	r6, #1
 8007146:	e74b      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007148:	2100      	movs	r1, #0
 800714a:	1d20      	adds	r0, r4, #4
 800714c:	f7ff fa7e 	bl	800664c <RCCEx_PLL2_Config>
 8007150:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007152:	b97d      	cbnz	r5, 8007174 <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007154:	4a31      	ldr	r2, [pc, #196]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007156:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007158:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800715c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007160:	430b      	orrs	r3, r1
 8007162:	6593      	str	r3, [r2, #88]	; 0x58
 8007164:	e757      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007166:	2102      	movs	r1, #2
 8007168:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800716c:	f7ff faf0 	bl	8006750 <RCCEx_PLL3_Config>
 8007170:	4605      	mov	r5, r0
      break;
 8007172:	e7ee      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007174:	462e      	mov	r6, r5
 8007176:	e74e      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007178:	4a28      	ldr	r2, [pc, #160]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800717a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800717c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007180:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007182:	b97d      	cbnz	r5, 80071a4 <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007184:	4a25      	ldr	r2, [pc, #148]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007186:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007188:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800718c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007190:	430b      	orrs	r3, r1
 8007192:	6553      	str	r3, [r2, #84]	; 0x54
 8007194:	e753      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007196:	2101      	movs	r1, #1
 8007198:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800719c:	f7ff fad8 	bl	8006750 <RCCEx_PLL3_Config>
 80071a0:	4605      	mov	r5, r0
      break;
 80071a2:	e7ee      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 80071a4:	462e      	mov	r6, r5
 80071a6:	e74a      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a8:	4a1c      	ldr	r2, [pc, #112]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80071aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80071b2:	b96d      	cbnz	r5, 80071d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071b4:	4a19      	ldr	r2, [pc, #100]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80071b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80071b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071be:	430b      	orrs	r3, r1
 80071c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071c2:	e74a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071c4:	2102      	movs	r1, #2
 80071c6:	1d20      	adds	r0, r4, #4
 80071c8:	f7ff fa40 	bl	800664c <RCCEx_PLL2_Config>
 80071cc:	4605      	mov	r5, r0
      break;
 80071ce:	e7f0      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 80071d0:	462e      	mov	r6, r5
 80071d2:	e742      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x806>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80071d4:	2102      	movs	r1, #2
 80071d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071da:	f7ff fab9 	bl	8006750 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80071de:	2800      	cmp	r0, #0
 80071e0:	bf18      	it	ne
 80071e2:	2601      	movne	r6, #1
 80071e4:	e73e      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch(PeriphClkInit->RngClockSelection)
 80071e6:	b133      	cbz	r3, 80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80071e8:	2601      	movs	r6, #1
 80071ea:	e74d      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ec:	4a0b      	ldr	r2, [pc, #44]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80071ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80071f6:	b93d      	cbnz	r5, 8007208 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071f8:	4a08      	ldr	r2, [pc, #32]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80071fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007200:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007202:	430b      	orrs	r3, r1
 8007204:	6553      	str	r3, [r2, #84]	; 0x54
 8007206:	e73f      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8007208:	462e      	mov	r6, r5
 800720a:	e73d      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x834>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800720c:	4a03      	ldr	r2, [pc, #12]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800720e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007210:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007214:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007216:	430b      	orrs	r3, r1
 8007218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800721a:	e769      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800721c:	58024400 	.word	0x58024400

08007220 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007220:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007222:	f7ff f9a3 	bl	800656c <HAL_RCC_GetHCLKFreq>
 8007226:	4b05      	ldr	r3, [pc, #20]	; (800723c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800722e:	4a04      	ldr	r2, [pc, #16]	; (8007240 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007230:	5cd3      	ldrb	r3, [r2, r3]
 8007232:	f003 031f 	and.w	r3, r3, #31
}
 8007236:	40d8      	lsrs	r0, r3
 8007238:	bd08      	pop	{r3, pc}
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
 8007240:	08011200 	.word	0x08011200

08007244 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8007244:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007246:	4a77      	ldr	r2, [pc, #476]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007248:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800724a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800724c:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007250:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007252:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8007254:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 8007258:	f000 80de 	beq.w	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800725c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007260:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007264:	fb06 f303 	mul.w	r3, r6, r3
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007270:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8007274:	2c01      	cmp	r4, #1
 8007276:	d064      	beq.n	8007342 <HAL_RCCEx_GetPLL2ClockFreq+0xfe>
 8007278:	2c02      	cmp	r4, #2
 800727a:	f000 80b0 	beq.w	80073de <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800727e:	b1e4      	cbz	r4, 80072ba <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007280:	4b68      	ldr	r3, [pc, #416]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007290:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8007294:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072a4:	ee07 1a10 	vmov	s14, r1
 80072a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80072ac:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80072b0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80072b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80072b8:	e05f      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	f013 0f20 	tst.w	r3, #32
 80072c0:	d022      	beq.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072c2:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072c6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80072ca:	4a59      	ldr	r2, [pc, #356]	; (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 80072cc:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072ce:	ee07 2a90 	vmov	s15, r2
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	ee07 1a10 	vmov	s14, r1
 80072da:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80072de:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80072f2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80072f6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80072fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	e038      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007308:	4b46      	ldr	r3, [pc, #280]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007318:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800731c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800732c:	ee07 1a10 	vmov	s14, r1
 8007330:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007334:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8007338:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800733c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007340:	e01b      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8007356:	ee66 6a87 	vmul.f32	s13, s13, s14
 800735a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007366:	ee07 1a10 	vmov	s14, r1
 800736a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800736e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8007372:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007376:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800737a:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800737c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800737e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007382:	ee06 3a90 	vmov	s13, r3
 8007386:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800738a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800738e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007392:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007396:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800739a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800739e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80073a0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80073a4:	ee06 3a90 	vmov	s13, r3
 80073a8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80073ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80073b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80073b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80073b8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80073be:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80073c2:	ee07 3a10 	vmov	s14, r3
 80073c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80073ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80073ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073d2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80073d6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80073da:	bc70      	pop	{r4, r5, r6}
 80073dc:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073de:	4b11      	ldr	r3, [pc, #68]	; (8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80073f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007402:	ee07 1a10 	vmov	s14, r1
 8007406:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800740a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800740e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007412:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8007416:	e7b0      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800741c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800741e:	6083      	str	r3, [r0, #8]
}
 8007420:	e7db      	b.n	80073da <HAL_RCCEx_GetPLL2ClockFreq+0x196>
 8007422:	bf00      	nop
 8007424:	58024400 	.word	0x58024400
 8007428:	39000000 	.word	0x39000000
 800742c:	4a742400 	.word	0x4a742400
 8007430:	03d09000 	.word	0x03d09000
 8007434:	4c742400 	.word	0x4c742400
 8007438:	4c371b00 	.word	0x4c371b00

0800743c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800743c:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743e:	4a77      	ldr	r2, [pc, #476]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007440:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007442:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8007444:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007448:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800744a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800744c:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 8007450:	f000 80de 	beq.w	8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007454:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007458:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800745c:	fb06 f303 	mul.w	r3, r6, r3
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007468:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800746c:	2c01      	cmp	r4, #1
 800746e:	d064      	beq.n	800753a <HAL_RCCEx_GetPLL3ClockFreq+0xfe>
 8007470:	2c02      	cmp	r4, #2
 8007472:	f000 80b0 	beq.w	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8007476:	b1e4      	cbz	r4, 80074b2 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007478:	4b68      	ldr	r3, [pc, #416]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800748c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800749c:	ee07 1a10 	vmov	s14, r1
 80074a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80074a4:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80074a8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80074ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80074b0:	e05f      	b.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	f013 0f20 	tst.w	r3, #32
 80074b8:	d022      	beq.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ba:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074be:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80074c2:	4a59      	ldr	r2, [pc, #356]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 80074c4:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c6:	ee07 2a90 	vmov	s15, r2
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	ee07 1a10 	vmov	s14, r1
 80074d2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80074d6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80074ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80074ee:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80074f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	e038      	b.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007500:	4b46      	ldr	r3, [pc, #280]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007510:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8007514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800751c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007524:	ee07 1a10 	vmov	s14, r1
 8007528:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800752c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800762c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8007530:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007538:	e01b      	b.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800753a:	4b38      	ldr	r3, [pc, #224]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800754e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800755e:	ee07 1a10 	vmov	s14, r1
 8007562:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007566:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800756a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800756e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007572:	4a2a      	ldr	r2, [pc, #168]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007574:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007576:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800757a:	ee06 3a90 	vmov	s13, r3
 800757e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007582:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007586:	ee76 6a86 	vadd.f32	s13, s13, s12
 800758a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800758e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007592:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007596:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007598:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800759c:	ee06 3a90 	vmov	s13, r3
 80075a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80075a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80075a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80075ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80075b0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80075b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80075ba:	ee07 3a10 	vmov	s14, r3
 80075be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80075c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80075ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80075ce:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80075d2:	bc70      	pop	{r4, r5, r6}
 80075d4:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80075ea:	ee66 6a87 	vmul.f32	s13, s13, s14
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075fa:	ee07 1a10 	vmov	s14, r1
 80075fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007602:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8007606:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800760a:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 800760e:	e7b0      	b.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007614:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007616:	6083      	str	r3, [r0, #8]
}
 8007618:	e7db      	b.n	80075d2 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
 8007620:	39000000 	.word	0x39000000
 8007624:	4a742400 	.word	0x4a742400
 8007628:	03d09000 	.word	0x03d09000
 800762c:	4c742400 	.word	0x4c742400
 8007630:	4c371b00 	.word	0x4c371b00

08007634 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8007634:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007636:	4a77      	ldr	r2, [pc, #476]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007638:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800763a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800763c:	f3c5 1105 	ubfx	r1, r5, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007640:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007642:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8007644:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
 8007648:	f000 80de 	beq.w	8007808 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800764c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007650:	f006 0601 	and.w	r6, r6, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007654:	fb06 f303 	mul.w	r3, r6, r3
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007660:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8007664:	2c01      	cmp	r4, #1
 8007666:	d064      	beq.n	8007732 <HAL_RCCEx_GetPLL1ClockFreq+0xfe>
 8007668:	2c02      	cmp	r4, #2
 800766a:	f000 80b0 	beq.w	80077ce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800766e:	b1e4      	cbz	r4, 80076aa <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007670:	4b68      	ldr	r3, [pc, #416]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8007684:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007694:	ee07 1a10 	vmov	s14, r1
 8007698:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800769c:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800781c <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80076a0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80076a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80076a8:	e05f      	b.n	800776a <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	f013 0f20 	tst.w	r3, #32
 80076b0:	d022      	beq.n	80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076b2:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076b6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80076ba:	4a59      	ldr	r2, [pc, #356]	; (8007820 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 80076bc:	40e2      	lsrs	r2, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076be:	ee07 2a90 	vmov	s15, r2
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	ee07 1a10 	vmov	s14, r1
 80076ca:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80076ce:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 80076e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80076e6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80076ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	e038      	b.n	800776a <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076f8:	4b46      	ldr	r3, [pc, #280]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007708:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 800770c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800771c:	ee07 1a10 	vmov	s14, r1
 8007720:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007724:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 800781c <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8007728:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800772c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007730:	e01b      	b.n	800776a <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8007746:	ee66 6a87 	vmul.f32	s13, s13, s14
 800774a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007756:	ee07 1a10 	vmov	s14, r1
 800775a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800775e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007824 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8007762:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007766:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800776a:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800776c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800776e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007772:	ee06 3a90 	vmov	s13, r3
 8007776:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800777a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800777e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007786:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800778a:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800778e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007790:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007794:	ee06 3a90 	vmov	s13, r3
 8007798:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800779c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80077a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80077a4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80077a8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80077ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80077ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80077b2:	ee07 3a10 	vmov	s14, r3
 80077b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80077ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80077be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80077c6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80077ca:	bc70      	pop	{r4, r5, r6}
 80077cc:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ce:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 80077e2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80077e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077f2:	ee07 1a10 	vmov	s14, r1
 80077f6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80077fa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007828 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80077fe:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007802:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8007806:	e7b0      	b.n	800776a <HAL_RCCEx_GetPLL1ClockFreq+0x136>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800780c:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800780e:	6083      	str	r3, [r0, #8]
}
 8007810:	e7db      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x196>
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
 8007818:	39000000 	.word	0x39000000
 800781c:	4c742400 	.word	0x4c742400
 8007820:	03d09000 	.word	0x03d09000
 8007824:	4a742400 	.word	0x4a742400
 8007828:	4c371b00 	.word	0x4c371b00

0800782c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800782c:	b500      	push	{lr}
 800782e:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007830:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007834:	d020      	beq.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007836:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800783a:	d071      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800783c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007840:	f000 80c8 	beq.w	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007844:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007848:	f000 8121 	beq.w	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800784c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007850:	f000 817e 	beq.w	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007854:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007858:	f000 81d7 	beq.w	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800785c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007860:	f000 821a 	beq.w	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007864:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007868:	f000 8234 	beq.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800786c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007870:	f000 8282 	beq.w	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
      frequency = 0;
 8007874:	2000      	movs	r0, #0
 8007876:	e2ae      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007878:	4b9b      	ldr	r3, [pc, #620]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8007880:	2b04      	cmp	r3, #4
 8007882:	d806      	bhi.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007884:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007888:	00120007 	.word	0x00120007
 800788c:	02a0001d 	.word	0x02a0001d
 8007890:	0028      	.short	0x0028
 8007892:	2000      	movs	r0, #0
 8007894:	e29f      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007896:	4b94      	ldr	r3, [pc, #592]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800789e:	f000 829a 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078a2:	a807      	add	r0, sp, #28
 80078a4:	f7ff fec6 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a8:	9808      	ldr	r0, [sp, #32]
 80078aa:	e294      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ac:	4b8e      	ldr	r3, [pc, #568]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80078b4:	f000 828f 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b8:	a804      	add	r0, sp, #16
 80078ba:	f7ff fcc3 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078be:	9804      	ldr	r0, [sp, #16]
 80078c0:	e289      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078c2:	4b89      	ldr	r3, [pc, #548]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80078ca:	f000 8284 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ce:	a801      	add	r0, sp, #4
 80078d0:	f7ff fdb4 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078d4:	9801      	ldr	r0, [sp, #4]
 80078d6:	e27e      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078d8:	4a83      	ldr	r2, [pc, #524]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80078dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	f012 0f04 	tst.w	r2, #4
 80078e6:	d000      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80078e8:	b19b      	cbz	r3, 8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ea:	4a7f      	ldr	r2, [pc, #508]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80078f2:	d003      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80078f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f8:	f000 8268 	beq.w	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078fc:	4a7a      	ldr	r2, [pc, #488]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007904:	d003      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8007906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790a:	f000 8261 	beq.w	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
            frequency = 0;
 800790e:	2000      	movs	r0, #0
 8007910:	e261      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007912:	4b75      	ldr	r3, [pc, #468]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800791a:	4874      	ldr	r0, [pc, #464]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800791c:	40d8      	lsrs	r0, r3
 800791e:	e25a      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007920:	4b71      	ldr	r3, [pc, #452]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007924:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d041      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800792c:	d923      	bls.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800792e:	2bc0      	cmp	r3, #192	; 0xc0
 8007930:	f000 8250 	beq.w	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007938:	d12d      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800793a:	4a6b      	ldr	r2, [pc, #428]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800793c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800793e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	f012 0f04 	tst.w	r2, #4
 8007948:	d001      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d03b      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800794e:	4a66      	ldr	r2, [pc, #408]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007956:	d003      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795c:	f000 823e 	beq.w	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007960:	4a61      	ldr	r2, [pc, #388]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007968:	d003      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800796a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800796e:	f000 8237 	beq.w	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
            frequency = 0;
 8007972:	2000      	movs	r0, #0
 8007974:	e22f      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007976:	b183      	cbz	r3, 800799a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d10a      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800797c:	4b5a      	ldr	r3, [pc, #360]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007984:	f000 8227 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007988:	a804      	add	r0, sp, #16
 800798a:	f7ff fc5b 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800798e:	9804      	ldr	r0, [sp, #16]
 8007990:	e221      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007992:	2000      	movs	r0, #0
 8007994:	e21f      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007996:	2000      	movs	r0, #0
 8007998:	e21d      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800799a:	4b53      	ldr	r3, [pc, #332]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80079a2:	f000 8218 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079a6:	a807      	add	r0, sp, #28
 80079a8:	f7ff fe44 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ac:	9808      	ldr	r0, [sp, #32]
 80079ae:	e212      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079b0:	4b4d      	ldr	r3, [pc, #308]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80079b8:	f000 820d 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079bc:	a801      	add	r0, sp, #4
 80079be:	f7ff fd3d 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079c2:	9801      	ldr	r0, [sp, #4]
 80079c4:	e207      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80079ce:	4847      	ldr	r0, [pc, #284]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079d0:	40d8      	lsrs	r0, r3
 80079d2:	e200      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80079d4:	4b44      	ldr	r3, [pc, #272]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80079dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e0:	d043      	beq.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80079e2:	d924      	bls.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80079e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079e8:	f000 81fc 	beq.w	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80079ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079f0:	d12e      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079f2:	4a3d      	ldr	r2, [pc, #244]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80079f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	f012 0f04 	tst.w	r2, #4
 8007a00:	d001      	beq.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d03c      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a06:	4a38      	ldr	r2, [pc, #224]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007a0e:	d003      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8007a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a14:	f000 81e8 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a18:	4a33      	ldr	r2, [pc, #204]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007a20:	d003      	beq.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8007a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a26:	f000 81e1 	beq.w	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e1d3      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007a2e:	b18b      	cbz	r3, 8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a34:	d10a      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007a3e:	f000 81ca 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a42:	a804      	add	r0, sp, #16
 8007a44:	f7ff fbfe 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a48:	9804      	ldr	r0, [sp, #16]
 8007a4a:	e1c4      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e1c2      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007a50:	2000      	movs	r0, #0
 8007a52:	e1c0      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a54:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007a5c:	f000 81bb 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a60:	a807      	add	r0, sp, #28
 8007a62:	f7ff fde7 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a66:	9808      	ldr	r0, [sp, #32]
 8007a68:	e1b5      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007a72:	f000 81b0 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a76:	a801      	add	r0, sp, #4
 8007a78:	f7ff fce0 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a7c:	9801      	ldr	r0, [sp, #4]
 8007a7e:	e1aa      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a80:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a88:	4818      	ldr	r0, [pc, #96]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a8a:	40d8      	lsrs	r0, r3
 8007a8c:	e1a3      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8007a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a9a:	d047      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8007a9c:	d928      	bls.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007aa2:	f000 81a5 	beq.w	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aaa:	d132      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007aac:	4a0e      	ldr	r2, [pc, #56]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007aae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	f012 0f04 	tst.w	r2, #4
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d040      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac0:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8007aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ace:	f000 8191 	beq.w	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ad2:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae0:	f000 818a 	beq.w	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            frequency = 0;
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e176      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8007af0:	b18b      	cbz	r3, 8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007af2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af6:	d10a      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007af8:	4b9b      	ldr	r3, [pc, #620]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007b00:	f000 8169 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b04:	a804      	add	r0, sp, #16
 8007b06:	f7ff fb9d 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0a:	9804      	ldr	r0, [sp, #16]
 8007b0c:	e163      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007b0e:	2000      	movs	r0, #0
 8007b10:	e161      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e15f      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b16:	4b94      	ldr	r3, [pc, #592]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007b1e:	f000 815a 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b22:	a807      	add	r0, sp, #28
 8007b24:	f7ff fd86 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b28:	9808      	ldr	r0, [sp, #32]
 8007b2a:	e154      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b2c:	4b8e      	ldr	r3, [pc, #568]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007b34:	f000 814f 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b38:	a801      	add	r0, sp, #4
 8007b3a:	f7ff fc7f 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b3e:	9801      	ldr	r0, [sp, #4]
 8007b40:	e149      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b42:	4b89      	ldr	r3, [pc, #548]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007b4a:	4888      	ldr	r0, [pc, #544]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b4c:	40d8      	lsrs	r0, r3
 8007b4e:	e142      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007b50:	4b85      	ldr	r3, [pc, #532]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8007b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b5c:	d043      	beq.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007b5e:	d924      	bls.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b64:	f000 814a 	beq.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8007b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b6c:	d12e      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b6e:	4a7e      	ldr	r2, [pc, #504]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	f012 0f04 	tst.w	r2, #4
 8007b7c:	d001      	beq.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d03c      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b82:	4a79      	ldr	r2, [pc, #484]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007b8a:	d003      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8007b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b90:	f000 8136 	beq.w	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b94:	4a74      	ldr	r2, [pc, #464]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007b9c:	d003      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba2:	f000 812f 	beq.w	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
            frequency = 0;
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e115      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007baa:	b18b      	cbz	r3, 8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	d10a      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bb2:	4b6d      	ldr	r3, [pc, #436]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007bba:	f000 810c 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bbe:	a804      	add	r0, sp, #16
 8007bc0:	f7ff fb40 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bc4:	9804      	ldr	r0, [sp, #16]
 8007bc6:	e106      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e104      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e102      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bd0:	4b65      	ldr	r3, [pc, #404]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007bd8:	f000 80fd 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bdc:	a807      	add	r0, sp, #28
 8007bde:	f7ff fd29 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be2:	9808      	ldr	r0, [sp, #32]
 8007be4:	e0f7      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007be6:	4b60      	ldr	r3, [pc, #384]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007bee:	f000 80f2 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf2:	a801      	add	r0, sp, #4
 8007bf4:	f7ff fc22 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bf8:	9801      	ldr	r0, [sp, #4]
 8007bfa:	e0ec      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bfc:	4b5a      	ldr	r3, [pc, #360]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c04:	4859      	ldr	r0, [pc, #356]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c06:	40d8      	lsrs	r0, r3
 8007c08:	e0e5      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007c0a:	4b57      	ldr	r3, [pc, #348]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c16:	d010      	beq.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c1c:	d018      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8007c1e:	b10b      	cbz	r3, 8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007c20:	2000      	movs	r0, #0
 8007c22:	e0d8      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c24:	4b50      	ldr	r3, [pc, #320]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007c2c:	f000 80d3 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c30:	a804      	add	r0, sp, #16
 8007c32:	f7ff fb07 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c36:	9804      	ldr	r0, [sp, #16]
 8007c38:	e0cd      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c3a:	4b4b      	ldr	r3, [pc, #300]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007c42:	f000 80c8 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c46:	a801      	add	r0, sp, #4
 8007c48:	f7ff fbf8 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c4c:	9803      	ldr	r0, [sp, #12]
 8007c4e:	e0c2      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c50:	4a45      	ldr	r2, [pc, #276]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c52:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c58:	6812      	ldr	r2, [r2, #0]
 8007c5a:	f012 0f04 	tst.w	r2, #4
 8007c5e:	d000      	beq.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c60:	b19b      	cbz	r3, 8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c62:	4a41      	ldr	r2, [pc, #260]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8007c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c70:	f000 80ca 	beq.w	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c74:	4a3c      	ldr	r2, [pc, #240]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
 8007c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c82:	f000 80c3 	beq.w	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8007c86:	2000      	movs	r0, #0
 8007c88:	e0a5      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c8a:	4b37      	ldr	r3, [pc, #220]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c92:	4836      	ldr	r0, [pc, #216]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c94:	40d8      	lsrs	r0, r3
 8007c96:	e09e      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c98:	4b33      	ldr	r3, [pc, #204]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 8007c9c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8007ca0:	d00d      	beq.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f000 8097 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ca8:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007cb0:	f000 8091 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb4:	a804      	add	r0, sp, #16
 8007cb6:	f7ff fac5 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cba:	9806      	ldr	r0, [sp, #24]
 8007cbc:	e08b      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007cc6:	f000 8086 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cca:	a807      	add	r0, sp, #28
 8007ccc:	f7ff fcb2 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cd0:	9808      	ldr	r0, [sp, #32]
 8007cd2:	e080      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ce0:	d02f      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007ce2:	d815      	bhi.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8007ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ce8:	d021      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cee:	d109      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007cf8:	d06d      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfa:	a801      	add	r0, sp, #4
 8007cfc:	f7ff fb9e 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d00:	9802      	ldr	r0, [sp, #8]
 8007d02:	e068      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007d04:	b913      	cbnz	r3, 8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d06:	f7ff fa8b 	bl	8007220 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8007d0a:	e064      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e062      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d020      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8007d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1a:	d106      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d1c:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007d24:	d057      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 8007d26:	4812      	ldr	r0, [pc, #72]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8007d28:	e055      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e053      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007d36:	d04e      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d38:	a804      	add	r0, sp, #16
 8007d3a:	f7ff fa83 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	e049      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f010 0004 	ands.w	r0, r0, #4
 8007d4a:	d044      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007d52:	4806      	ldr	r0, [pc, #24]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007d54:	40d8      	lsrs	r0, r3
 8007d56:	e03e      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d58:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007d60:	d039      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = CSI_VALUE;
 8007d62:	4804      	ldr	r0, [pc, #16]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8007d64:	e037      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	03d09000 	.word	0x03d09000
 8007d70:	02dc6c00 	.word	0x02dc6c00
 8007d74:	003d0900 	.word	0x003d0900
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8007d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d84:	d00c      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8007d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d8a:	d013      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8007d8c:	b10b      	cbz	r3, 8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e021      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007d9a:	d01c      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 8007d9c:	481d      	ldr	r0, [pc, #116]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
  return frequency;
 8007d9e:	e01a      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007da0:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007da8:	d015      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007daa:	a807      	add	r0, sp, #28
 8007dac:	f7ff fc42 	bl	8007634 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db0:	9808      	ldr	r0, [sp, #32]
 8007db2:	e010      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007db4:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	a804      	add	r0, sp, #16
 8007dc0:	f7ff fa40 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dc4:	9805      	ldr	r0, [sp, #20]
 8007dc6:	e006      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dc8:	4813      	ldr	r0, [pc, #76]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8007dca:	e004      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8007dcc:	4813      	ldr	r0, [pc, #76]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007dce:	e002      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007dd0:	4810      	ldr	r0, [pc, #64]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dd4:	4810      	ldr	r0, [pc, #64]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
}
 8007dd6:	b00b      	add	sp, #44	; 0x2c
 8007dd8:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8007ddc:	480f      	ldr	r0, [pc, #60]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007dde:	e7fa      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007de0:	480c      	ldr	r0, [pc, #48]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007de2:	e7f8      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007de4:	480c      	ldr	r0, [pc, #48]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8007de6:	e7f6      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8007de8:	480c      	ldr	r0, [pc, #48]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007dea:	e7f4      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007dec:	4809      	ldr	r0, [pc, #36]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007dee:	e7f2      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007df0:	4809      	ldr	r0, [pc, #36]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8007df2:	e7f0      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8007df4:	4809      	ldr	r0, [pc, #36]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007df6:	e7ee      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007df8:	4806      	ldr	r0, [pc, #24]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007dfa:	e7ec      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dfc:	4806      	ldr	r0, [pc, #24]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8007dfe:	e7ea      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8007e00:	4806      	ldr	r0, [pc, #24]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007e02:	e7e8      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007e04:	4803      	ldr	r0, [pc, #12]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007e06:	e7e6      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8007e0a:	e7e4      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007e0e:	e7e2      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007e10:	58024400 	.word	0x58024400
 8007e14:	02dc6c00 	.word	0x02dc6c00
 8007e18:	00bb8000 	.word	0x00bb8000
 8007e1c:	003d0900 	.word	0x003d0900

08007e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e22:	6a03      	ldr	r3, [r0, #32]
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e2e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e30:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <TIM_OC1_SetConfig+0x90>)
 8007e32:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e34:	680d      	ldr	r5, [r1, #0]
 8007e36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e38:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3c:	688d      	ldr	r5, [r1, #8]
 8007e3e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e40:	4d1c      	ldr	r5, [pc, #112]	; (8007eb4 <TIM_OC1_SetConfig+0x94>)
 8007e42:	42a8      	cmp	r0, r5
 8007e44:	d01f      	beq.n	8007e86 <TIM_OC1_SetConfig+0x66>
 8007e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e4a:	42a8      	cmp	r0, r5
 8007e4c:	d01b      	beq.n	8007e86 <TIM_OC1_SetConfig+0x66>
 8007e4e:	4e1a      	ldr	r6, [pc, #104]	; (8007eb8 <TIM_OC1_SetConfig+0x98>)
 8007e50:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8007e54:	42a8      	cmp	r0, r5
 8007e56:	bf18      	it	ne
 8007e58:	42b0      	cmpne	r0, r6
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC1_SetConfig+0x44>
 8007e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e60:	42a8      	cmp	r0, r5
 8007e62:	d11e      	bne.n	8007ea2 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e64:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e68:	68cd      	ldr	r5, [r1, #12]
 8007e6a:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6c:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e70:	4e11      	ldr	r6, [pc, #68]	; (8007eb8 <TIM_OC1_SetConfig+0x98>)
 8007e72:	4d12      	ldr	r5, [pc, #72]	; (8007ebc <TIM_OC1_SetConfig+0x9c>)
 8007e74:	42a8      	cmp	r0, r5
 8007e76:	bf18      	it	ne
 8007e78:	42b0      	cmpne	r0, r6
 8007e7a:	d00a      	beq.n	8007e92 <TIM_OC1_SetConfig+0x72>
 8007e7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e80:	42a8      	cmp	r0, r5
 8007e82:	d006      	beq.n	8007e92 <TIM_OC1_SetConfig+0x72>
 8007e84:	e00d      	b.n	8007ea2 <TIM_OC1_SetConfig+0x82>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e86:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007e8a:	68cd      	ldr	r5, [r1, #12]
 8007e8c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e8e:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e92:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e96:	698d      	ldr	r5, [r1, #24]
 8007e98:	694e      	ldr	r6, [r1, #20]
 8007e9a:	ea46 0c05 	orr.w	ip, r6, r5
 8007e9e:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ea6:	684a      	ldr	r2, [r1, #4]
 8007ea8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eaa:	6203      	str	r3, [r0, #32]
}
 8007eac:	bc70      	pop	{r4, r5, r6}
 8007eae:	4770      	bx	lr
 8007eb0:	fffeff8c 	.word	0xfffeff8c
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400

08007ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ec2:	6a03      	ldr	r3, [r0, #32]
 8007ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ecc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ece:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed0:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <TIM_OC3_SetConfig+0x74>)
 8007ed2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed4:	680d      	ldr	r5, [r1, #0]
 8007ed6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007edc:	688d      	ldr	r5, [r1, #8]
 8007ede:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ee2:	4d15      	ldr	r5, [pc, #84]	; (8007f38 <TIM_OC3_SetConfig+0x78>)
 8007ee4:	42a8      	cmp	r0, r5
 8007ee6:	d00e      	beq.n	8007f06 <TIM_OC3_SetConfig+0x46>
 8007ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007eec:	42a8      	cmp	r0, r5
 8007eee:	d00a      	beq.n	8007f06 <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef0:	4e12      	ldr	r6, [pc, #72]	; (8007f3c <TIM_OC3_SetConfig+0x7c>)
 8007ef2:	4d13      	ldr	r5, [pc, #76]	; (8007f40 <TIM_OC3_SetConfig+0x80>)
 8007ef4:	42a8      	cmp	r0, r5
 8007ef6:	bf18      	it	ne
 8007ef8:	42b0      	cmpne	r0, r6
 8007efa:	d00b      	beq.n	8007f14 <TIM_OC3_SetConfig+0x54>
 8007efc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f00:	42a8      	cmp	r0, r5
 8007f02:	d10f      	bne.n	8007f24 <TIM_OC3_SetConfig+0x64>
 8007f04:	e006      	b.n	8007f14 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0a:	68cd      	ldr	r5, [r1, #12]
 8007f0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f14:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f18:	698d      	ldr	r5, [r1, #24]
 8007f1a:	694e      	ldr	r6, [r1, #20]
 8007f1c:	ea46 0c05 	orr.w	ip, r6, r5
 8007f20:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f28:	684a      	ldr	r2, [r1, #4]
 8007f2a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2c:	6203      	str	r3, [r0, #32]
}
 8007f2e:	bc70      	pop	{r4, r5, r6}
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	fffeff8c 	.word	0xfffeff8c
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400

08007f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f44:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f46:	6a03      	ldr	r3, [r0, #32]
 8007f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f52:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f54:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <TIM_OC4_SetConfig+0x60>)
 8007f56:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f58:	680d      	ldr	r5, [r1, #0]
 8007f5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f62:	688d      	ldr	r5, [r1, #8]
 8007f64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f68:	4d0f      	ldr	r5, [pc, #60]	; (8007fa8 <TIM_OC4_SetConfig+0x64>)
 8007f6a:	42a8      	cmp	r0, r5
 8007f6c:	d00e      	beq.n	8007f8c <TIM_OC4_SetConfig+0x48>
 8007f6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f72:	42a8      	cmp	r0, r5
 8007f74:	d00a      	beq.n	8007f8c <TIM_OC4_SetConfig+0x48>
 8007f76:	4e0d      	ldr	r6, [pc, #52]	; (8007fac <TIM_OC4_SetConfig+0x68>)
 8007f78:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8007f7c:	42a8      	cmp	r0, r5
 8007f7e:	bf18      	it	ne
 8007f80:	42b0      	cmpne	r0, r6
 8007f82:	d003      	beq.n	8007f8c <TIM_OC4_SetConfig+0x48>
 8007f84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f88:	42a8      	cmp	r0, r5
 8007f8a:	d104      	bne.n	8007f96 <TIM_OC4_SetConfig+0x52>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f8c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f90:	694d      	ldr	r5, [r1, #20]
 8007f92:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f98:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f9a:	684a      	ldr	r2, [r1, #4]
 8007f9c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9e:	6203      	str	r3, [r0, #32]
}
 8007fa0:	bc70      	pop	{r4, r5, r6}
 8007fa2:	4770      	bx	lr
 8007fa4:	feff8cff 	.word	0xfeff8cff
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40014000 	.word	0x40014000

08007fb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fb2:	6a03      	ldr	r3, [r0, #32]
 8007fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fbe:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <TIM_OC5_SetConfig+0x60>)
 8007fc2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc4:	680d      	ldr	r5, [r1, #0]
 8007fc6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fcc:	688d      	ldr	r5, [r1, #8]
 8007fce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd2:	4d10      	ldr	r5, [pc, #64]	; (8008014 <TIM_OC5_SetConfig+0x64>)
 8007fd4:	42a8      	cmp	r0, r5
 8007fd6:	d00e      	beq.n	8007ff6 <TIM_OC5_SetConfig+0x46>
 8007fd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007fdc:	42a8      	cmp	r0, r5
 8007fde:	d00a      	beq.n	8007ff6 <TIM_OC5_SetConfig+0x46>
 8007fe0:	4e0d      	ldr	r6, [pc, #52]	; (8008018 <TIM_OC5_SetConfig+0x68>)
 8007fe2:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8007fe6:	42a8      	cmp	r0, r5
 8007fe8:	bf18      	it	ne
 8007fea:	42b0      	cmpne	r0, r6
 8007fec:	d003      	beq.n	8007ff6 <TIM_OC5_SetConfig+0x46>
 8007fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007ff2:	42a8      	cmp	r0, r5
 8007ff4:	d104      	bne.n	8008000 <TIM_OC5_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ff6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ffa:	694d      	ldr	r5, [r1, #20]
 8007ffc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008000:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008002:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008004:	684a      	ldr	r2, [r1, #4]
 8008006:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008008:	6203      	str	r3, [r0, #32]
}
 800800a:	bc70      	pop	{r4, r5, r6}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	fffeff8f 	.word	0xfffeff8f
 8008014:	40010000 	.word	0x40010000
 8008018:	40014000 	.word	0x40014000

0800801c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800801e:	6a03      	ldr	r3, [r0, #32]
 8008020:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008024:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800802a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800802c:	4a13      	ldr	r2, [pc, #76]	; (800807c <TIM_OC6_SetConfig+0x60>)
 800802e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008030:	680d      	ldr	r5, [r1, #0]
 8008032:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800803a:	688d      	ldr	r5, [r1, #8]
 800803c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008040:	4d0f      	ldr	r5, [pc, #60]	; (8008080 <TIM_OC6_SetConfig+0x64>)
 8008042:	42a8      	cmp	r0, r5
 8008044:	d00e      	beq.n	8008064 <TIM_OC6_SetConfig+0x48>
 8008046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800804a:	42a8      	cmp	r0, r5
 800804c:	d00a      	beq.n	8008064 <TIM_OC6_SetConfig+0x48>
 800804e:	4e0d      	ldr	r6, [pc, #52]	; (8008084 <TIM_OC6_SetConfig+0x68>)
 8008050:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8008054:	42a8      	cmp	r0, r5
 8008056:	bf18      	it	ne
 8008058:	42b0      	cmpne	r0, r6
 800805a:	d003      	beq.n	8008064 <TIM_OC6_SetConfig+0x48>
 800805c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008060:	42a8      	cmp	r0, r5
 8008062:	d104      	bne.n	800806e <TIM_OC6_SetConfig+0x52>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008064:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008068:	694d      	ldr	r5, [r1, #20]
 800806a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008070:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008072:	684a      	ldr	r2, [r1, #4]
 8008074:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	6203      	str	r3, [r0, #32]
}
 8008078:	bc70      	pop	{r4, r5, r6}
 800807a:	4770      	bx	lr
 800807c:	feff8fff 	.word	0xfeff8fff
 8008080:	40010000 	.word	0x40010000
 8008084:	40014000 	.word	0x40014000

08008088 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008088:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d145      	bne.n	800811e <HAL_TIM_Base_Start_IT+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 8008092:	2302      	movs	r3, #2
 8008094:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	68d3      	ldr	r3, [r2, #12]
 800809c:	f043 0301 	orr.w	r3, r3, #1
 80080a0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a2:	6802      	ldr	r2, [r0, #0]
 80080a4:	4b20      	ldr	r3, [pc, #128]	; (8008128 <HAL_TIM_Base_Start_IT+0xa0>)
 80080a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80080aa:	bf18      	it	ne
 80080ac:	429a      	cmpne	r2, r3
 80080ae:	bf0c      	ite	eq
 80080b0:	2301      	moveq	r3, #1
 80080b2:	2300      	movne	r3, #0
 80080b4:	491d      	ldr	r1, [pc, #116]	; (800812c <HAL_TIM_Base_Start_IT+0xa4>)
 80080b6:	428a      	cmp	r2, r1
 80080b8:	bf08      	it	eq
 80080ba:	f043 0301 	orreq.w	r3, r3, #1
 80080be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080c2:	428a      	cmp	r2, r1
 80080c4:	bf08      	it	eq
 80080c6:	f043 0301 	orreq.w	r3, r3, #1
 80080ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080ce:	428a      	cmp	r2, r1
 80080d0:	bf08      	it	eq
 80080d2:	f043 0301 	orreq.w	r3, r3, #1
 80080d6:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80080da:	428a      	cmp	r2, r1
 80080dc:	bf08      	it	eq
 80080de:	f043 0301 	orreq.w	r3, r3, #1
 80080e2:	f5a1 416c 	sub.w	r1, r1, #60416	; 0xec00
 80080e6:	428a      	cmp	r2, r1
 80080e8:	bf08      	it	eq
 80080ea:	f043 0301 	orreq.w	r3, r3, #1
 80080ee:	b913      	cbnz	r3, 80080f6 <HAL_TIM_Base_Start_IT+0x6e>
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <HAL_TIM_Base_Start_IT+0xa8>)
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d10d      	bne.n	8008112 <HAL_TIM_Base_Start_IT+0x8a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f6:	6891      	ldr	r1, [r2, #8]
 80080f8:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <HAL_TIM_Base_Start_IT+0xac>)
 80080fa:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fc:	2b06      	cmp	r3, #6
 80080fe:	d010      	beq.n	8008122 <HAL_TIM_Base_Start_IT+0x9a>
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008104:	d00d      	beq.n	8008122 <HAL_TIM_Base_Start_IT+0x9a>
      __HAL_TIM_ENABLE(htim);
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800810e:	2000      	movs	r0, #0
 8008110:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8008112:	6813      	ldr	r3, [r2, #0]
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800811a:	2000      	movs	r0, #0
 800811c:	4770      	bx	lr
    return HAL_ERROR;
 800811e:	2001      	movs	r0, #1
 8008120:	4770      	bx	lr
  return HAL_OK;
 8008122:	2000      	movs	r0, #0
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40014000 	.word	0x40014000
 8008134:	00010007 	.word	0x00010007

08008138 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_IC_CaptureCallback>:
}
 800813a:	4770      	bx	lr

0800813c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800813c:	4770      	bx	lr

0800813e <HAL_TIM_TriggerCallback>:
}
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_IRQHandler>:
{
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	6803      	ldr	r3, [r0, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	f012 0f02 	tst.w	r2, #2
 800814c:	d011      	beq.n	8008172 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	f012 0f02 	tst.w	r2, #2
 8008154:	d00d      	beq.n	8008172 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008156:	f06f 0202 	mvn.w	r2, #2
 800815a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800815c:	2301      	movs	r3, #1
 800815e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008160:	6803      	ldr	r3, [r0, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f013 0f03 	tst.w	r3, #3
 8008168:	d079      	beq.n	800825e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800816a:	f7ff ffe6 	bl	800813a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	2300      	movs	r3, #0
 8008170:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	f012 0f04 	tst.w	r2, #4
 800817a:	d012      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	f012 0f04 	tst.w	r2, #4
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008184:	f06f 0204 	mvn.w	r2, #4
 8008188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800818a:	2302      	movs	r3, #2
 800818c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008196:	d068      	beq.n	800826a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008198:	4620      	mov	r0, r4
 800819a:	f7ff ffce 	bl	800813a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	2300      	movs	r3, #0
 80081a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	f012 0f08 	tst.w	r2, #8
 80081aa:	d012      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	f012 0f08 	tst.w	r2, #8
 80081b2:	d00e      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081b4:	f06f 0208 	mvn.w	r2, #8
 80081b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ba:	2304      	movs	r3, #4
 80081bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f013 0f03 	tst.w	r3, #3
 80081c6:	d057      	beq.n	8008278 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80081c8:	4620      	mov	r0, r4
 80081ca:	f7ff ffb6 	bl	800813a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	2300      	movs	r3, #0
 80081d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	f012 0f10 	tst.w	r2, #16
 80081da:	d012      	beq.n	8008202 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	f012 0f10 	tst.w	r2, #16
 80081e2:	d00e      	beq.n	8008202 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081e4:	f06f 0210 	mvn.w	r2, #16
 80081e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ea:	2308      	movs	r3, #8
 80081ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80081f6:	d046      	beq.n	8008286 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff ff9e 	bl	800813a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	2300      	movs	r3, #0
 8008200:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	f012 0f01 	tst.w	r2, #1
 800820a:	d003      	beq.n	8008214 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	f012 0f01 	tst.w	r2, #1
 8008212:	d13f      	bne.n	8008294 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	f012 0f80 	tst.w	r2, #128	; 0x80
 800821c:	d003      	beq.n	8008226 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008224:	d13d      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800822e:	d003      	beq.n	8008238 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008236:	d13b      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008248:	d139      	bne.n	80082be <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	f012 0f20 	tst.w	r2, #32
 8008252:	d003      	beq.n	800825c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	f012 0f20 	tst.w	r2, #32
 800825a:	d137      	bne.n	80082cc <HAL_TIM_IRQHandler+0x18c>
}
 800825c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	f7ff ff6b 	bl	8008138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff ff6a 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
 8008268:	e781      	b.n	800816e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff ff64 	bl	8008138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	4620      	mov	r0, r4
 8008272:	f7ff ff63 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
 8008276:	e792      	b.n	800819e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008278:	4620      	mov	r0, r4
 800827a:	f7ff ff5d 	bl	8008138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff ff5c 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
 8008284:	e7a3      	b.n	80081ce <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff ff56 	bl	8008138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	4620      	mov	r0, r4
 800828e:	f7ff ff55 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
 8008292:	e7b4      	b.n	80081fe <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008294:	f06f 0201 	mvn.w	r2, #1
 8008298:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800829a:	4620      	mov	r0, r4
 800829c:	f7f8 fec8 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
 80082a0:	e7b8      	b.n	8008214 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fc22 	bl	8008af2 <HAL_TIMEx_BreakCallback>
 80082ae:	e7ba      	b.n	8008226 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fc1c 	bl	8008af4 <HAL_TIMEx_Break2Callback>
 80082bc:	e7bc      	b.n	8008238 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff ff3a 	bl	800813e <HAL_TIM_TriggerCallback>
 80082ca:	e7be      	b.n	800824a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082cc:	f06f 0220 	mvn.w	r2, #32
 80082d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fc0c 	bl	8008af0 <HAL_TIMEx_CommutCallback>
}
 80082d8:	e7c0      	b.n	800825c <HAL_TIM_IRQHandler+0x11c>
	...

080082dc <TIM_Base_SetConfig>:
{
 80082dc:	b430      	push	{r4, r5}
  tmpcr1 = TIMx->CR1;
 80082de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e0:	4a32      	ldr	r2, [pc, #200]	; (80083ac <TIM_Base_SetConfig+0xd0>)
 80082e2:	4290      	cmp	r0, r2
 80082e4:	bf14      	ite	ne
 80082e6:	2200      	movne	r2, #0
 80082e8:	2201      	moveq	r2, #1
 80082ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80082ee:	d037      	beq.n	8008360 <TIM_Base_SetConfig+0x84>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d135      	bne.n	8008360 <TIM_Base_SetConfig+0x84>
 80082f4:	4c2e      	ldr	r4, [pc, #184]	; (80083b0 <TIM_Base_SetConfig+0xd4>)
 80082f6:	42a0      	cmp	r0, r4
 80082f8:	d00b      	beq.n	8008312 <TIM_Base_SetConfig+0x36>
 80082fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80082fe:	42a0      	cmp	r0, r4
 8008300:	d007      	beq.n	8008312 <TIM_Base_SetConfig+0x36>
 8008302:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008306:	42a0      	cmp	r0, r4
 8008308:	d003      	beq.n	8008312 <TIM_Base_SetConfig+0x36>
 800830a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800830e:	42a0      	cmp	r0, r4
 8008310:	d10a      	bne.n	8008328 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008316:	684c      	ldr	r4, [r1, #4]
 8008318:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800831a:	4c25      	ldr	r4, [pc, #148]	; (80083b0 <TIM_Base_SetConfig+0xd4>)
 800831c:	42a0      	cmp	r0, r4
 800831e:	d023      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
 8008320:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008324:	42a0      	cmp	r0, r4
 8008326:	d01f      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
 8008328:	4c22      	ldr	r4, [pc, #136]	; (80083b4 <TIM_Base_SetConfig+0xd8>)
 800832a:	42a0      	cmp	r0, r4
 800832c:	d01c      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
 800832e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8008332:	42a0      	cmp	r0, r4
 8008334:	d018      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
 8008336:	4d20      	ldr	r5, [pc, #128]	; (80083b8 <TIM_Base_SetConfig+0xdc>)
 8008338:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 800833c:	42a0      	cmp	r0, r4
 800833e:	bf18      	it	ne
 8008340:	42a8      	cmpne	r0, r5
 8008342:	d011      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
 8008344:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008348:	42a0      	cmp	r0, r4
 800834a:	d00d      	beq.n	8008368 <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800834c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008350:	694a      	ldr	r2, [r1, #20]
 8008352:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008354:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008356:	688b      	ldr	r3, [r1, #8]
 8008358:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800835a:	680b      	ldr	r3, [r1, #0]
 800835c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835e:	e021      	b.n	80083a4 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008364:	684c      	ldr	r4, [r1, #4]
 8008366:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8008368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836c:	68cc      	ldr	r4, [r1, #12]
 800836e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008374:	694c      	ldr	r4, [r1, #20]
 8008376:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8008378:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800837a:	688b      	ldr	r3, [r1, #8]
 800837c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <TIM_Base_SetConfig+0xe0>)
 8008384:	4298      	cmp	r0, r3
 8008386:	d00b      	beq.n	80083a0 <TIM_Base_SetConfig+0xc4>
 8008388:	b952      	cbnz	r2, 80083a0 <TIM_Base_SetConfig+0xc4>
 800838a:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <TIM_Base_SetConfig+0xdc>)
 800838c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008390:	4298      	cmp	r0, r3
 8008392:	bf18      	it	ne
 8008394:	4290      	cmpne	r0, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0xc4>
 8008398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839c:	4298      	cmp	r0, r3
 800839e:	d101      	bne.n	80083a4 <TIM_Base_SetConfig+0xc8>
    TIMx->RCR = Structure->RepetitionCounter;
 80083a0:	690b      	ldr	r3, [r1, #16]
 80083a2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80083a4:	2301      	movs	r3, #1
 80083a6:	6143      	str	r3, [r0, #20]
}
 80083a8:	bc30      	pop	{r4, r5}
 80083aa:	4770      	bx	lr
 80083ac:	40010000 	.word	0x40010000
 80083b0:	40000400 	.word	0x40000400
 80083b4:	40000c00 	.word	0x40000c00
 80083b8:	40014000 	.word	0x40014000
 80083bc:	40010400 	.word	0x40010400

080083c0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80083c0:	b360      	cbz	r0, 800841c <HAL_TIM_Base_Init+0x5c>
{
 80083c2:	b510      	push	{r4, lr}
 80083c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80083c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083ca:	b313      	cbz	r3, 8008412 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80083cc:	2302      	movs	r3, #2
 80083ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083d2:	4621      	mov	r1, r4
 80083d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80083d8:	f7ff ff80 	bl	80082dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083dc:	2301      	movs	r3, #1
 80083de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80083e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80083ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80083ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80083f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80083fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008402:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008406:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800840a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800840e:	2000      	movs	r0, #0
}
 8008410:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008412:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008416:	f7f8 ffad 	bl	8001374 <HAL_TIM_Base_MspInit>
 800841a:	e7d7      	b.n	80083cc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800841c:	2001      	movs	r0, #1
}
 800841e:	4770      	bx	lr

08008420 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008420:	b360      	cbz	r0, 800847c <HAL_TIM_PWM_Init+0x5c>
{
 8008422:	b510      	push	{r4, lr}
 8008424:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008426:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800842a:	b313      	cbz	r3, 8008472 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800842c:	2302      	movs	r3, #2
 800842e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008432:	4621      	mov	r1, r4
 8008434:	f851 0b04 	ldr.w	r0, [r1], #4
 8008438:	f7ff ff50 	bl	80082dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800843c:	2301      	movs	r3, #1
 800843e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008442:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008446:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800844a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800844e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008452:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800845a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800845e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008462:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008466:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800846a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800846e:	2000      	movs	r0, #0
}
 8008470:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008472:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008476:	f7f8 ff63 	bl	8001340 <HAL_TIM_PWM_MspInit>
 800847a:	e7d7      	b.n	800842c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800847c:	2001      	movs	r0, #1
}
 800847e:	4770      	bx	lr

08008480 <TIM_OC2_SetConfig>:
{
 8008480:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008482:	6a03      	ldr	r3, [r0, #32]
 8008484:	f023 0310 	bic.w	r3, r3, #16
 8008488:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800848a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800848c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800848e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008490:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <TIM_OC2_SetConfig+0x74>)
 8008492:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008494:	680d      	ldr	r5, [r1, #0]
 8008496:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800849a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800849e:	688d      	ldr	r5, [r1, #8]
 80084a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084a4:	4d14      	ldr	r5, [pc, #80]	; (80084f8 <TIM_OC2_SetConfig+0x78>)
 80084a6:	42a8      	cmp	r0, r5
 80084a8:	d00e      	beq.n	80084c8 <TIM_OC2_SetConfig+0x48>
 80084aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084ae:	42a8      	cmp	r0, r5
 80084b0:	d00a      	beq.n	80084c8 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	4e12      	ldr	r6, [pc, #72]	; (80084fc <TIM_OC2_SetConfig+0x7c>)
 80084b4:	4d12      	ldr	r5, [pc, #72]	; (8008500 <TIM_OC2_SetConfig+0x80>)
 80084b6:	42a8      	cmp	r0, r5
 80084b8:	bf18      	it	ne
 80084ba:	42b0      	cmpne	r0, r6
 80084bc:	d00b      	beq.n	80084d6 <TIM_OC2_SetConfig+0x56>
 80084be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084c2:	42a8      	cmp	r0, r5
 80084c4:	d10f      	bne.n	80084e6 <TIM_OC2_SetConfig+0x66>
 80084c6:	e006      	b.n	80084d6 <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 80084c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084cc:	68cd      	ldr	r5, [r1, #12]
 80084ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80084d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084d6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084da:	698d      	ldr	r5, [r1, #24]
 80084dc:	694e      	ldr	r6, [r1, #20]
 80084de:	ea46 0c05 	orr.w	ip, r6, r5
 80084e2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80084e6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80084e8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80084ea:	684a      	ldr	r2, [r1, #4]
 80084ec:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80084ee:	6203      	str	r3, [r0, #32]
}
 80084f0:	bc70      	pop	{r4, r5, r6}
 80084f2:	4770      	bx	lr
 80084f4:	feff8cff 	.word	0xfeff8cff
 80084f8:	40010000 	.word	0x40010000
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400

08008504 <HAL_TIM_PWM_ConfigChannel>:
{
 8008504:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008506:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800850a:	2b01      	cmp	r3, #1
 800850c:	f000 8095 	beq.w	800863a <HAL_TIM_PWM_ConfigChannel+0x136>
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	2301      	movs	r3, #1
 8008516:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800851a:	2a14      	cmp	r2, #20
 800851c:	f200 8088 	bhi.w	8008630 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008520:	e8df f002 	tbb	[pc, r2]
 8008524:	8686860b 	.word	0x8686860b
 8008528:	8686861f 	.word	0x8686861f
 800852c:	86868634 	.word	0x86868634
 8008530:	86868648 	.word	0x86868648
 8008534:	8686865d 	.word	0x8686865d
 8008538:	71          	.byte	0x71
 8008539:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	f7ff fc70 	bl	8007e20 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	6993      	ldr	r3, [r2, #24]
 8008544:	f043 0308 	orr.w	r3, r3, #8
 8008548:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	6993      	ldr	r3, [r2, #24]
 800854e:	f023 0304 	bic.w	r3, r3, #4
 8008552:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008554:	6822      	ldr	r2, [r4, #0]
 8008556:	6993      	ldr	r3, [r2, #24]
 8008558:	6929      	ldr	r1, [r5, #16]
 800855a:	430b      	orrs	r3, r1
 800855c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800855e:	2000      	movs	r0, #0
      break;
 8008560:	e067      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008562:	6800      	ldr	r0, [r0, #0]
 8008564:	f7ff ff8c 	bl	8008480 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	6993      	ldr	r3, [r2, #24]
 800856c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008570:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	6993      	ldr	r3, [r2, #24]
 8008576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800857a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	6993      	ldr	r3, [r2, #24]
 8008580:	6929      	ldr	r1, [r5, #16]
 8008582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008586:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008588:	2000      	movs	r0, #0
      break;
 800858a:	e052      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f7ff fc97 	bl	8007ec0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	69d3      	ldr	r3, [r2, #28]
 8008596:	f043 0308 	orr.w	r3, r3, #8
 800859a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	69d3      	ldr	r3, [r2, #28]
 80085a0:	f023 0304 	bic.w	r3, r3, #4
 80085a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	69d3      	ldr	r3, [r2, #28]
 80085aa:	6929      	ldr	r1, [r5, #16]
 80085ac:	430b      	orrs	r3, r1
 80085ae:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80085b0:	2000      	movs	r0, #0
      break;
 80085b2:	e03e      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085b4:	6800      	ldr	r0, [r0, #0]
 80085b6:	f7ff fcc5 	bl	8007f44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ba:	6822      	ldr	r2, [r4, #0]
 80085bc:	69d3      	ldr	r3, [r2, #28]
 80085be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	69d3      	ldr	r3, [r2, #28]
 80085c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	69d3      	ldr	r3, [r2, #28]
 80085d2:	6929      	ldr	r1, [r5, #16]
 80085d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085d8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2000      	movs	r0, #0
      break;
 80085dc:	e029      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085de:	6800      	ldr	r0, [r0, #0]
 80085e0:	f7ff fce6 	bl	8007fb0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085f2:	f023 0304 	bic.w	r3, r3, #4
 80085f6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085f8:	6822      	ldr	r2, [r4, #0]
 80085fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085fc:	6929      	ldr	r1, [r5, #16]
 80085fe:	430b      	orrs	r3, r1
 8008600:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8008602:	2000      	movs	r0, #0
      break;
 8008604:	e015      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	f7ff fd08 	bl	800801c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008614:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008624:	6929      	ldr	r1, [r5, #16]
 8008626:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800862a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800862c:	2000      	movs	r0, #0
      break;
 800862e:	e000      	b.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8008630:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008632:	2300      	movs	r3, #0
 8008634:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008638:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800863a:	2002      	movs	r0, #2
 800863c:	e7fc      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x134>

0800863e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800863e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008640:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008642:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008646:	430a      	orrs	r2, r1
 8008648:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800864c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008650:	6082      	str	r2, [r0, #8]
}
 8008652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008658:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	f000 80c2 	beq.w	80087e6 <HAL_TIM_ConfigClockSource+0x18e>
{
 8008662:	b570      	push	{r4, r5, r6, lr}
 8008664:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008666:	2301      	movs	r3, #1
 8008668:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	2302      	movs	r3, #2
 800866e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008672:	6802      	ldr	r2, [r0, #0]
 8008674:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008676:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <HAL_TIM_ConfigClockSource+0x194>)
 8008678:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800867a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800867c:	680b      	ldr	r3, [r1, #0]
 800867e:	2b70      	cmp	r3, #112	; 0x70
 8008680:	d07a      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x120>
 8008682:	d84d      	bhi.n	8008720 <HAL_TIM_ConfigClockSource+0xc8>
 8008684:	2b50      	cmp	r3, #80	; 0x50
 8008686:	f000 8091 	beq.w	80087ac <HAL_TIM_ConfigClockSource+0x154>
 800868a:	d91d      	bls.n	80086c8 <HAL_TIM_ConfigClockSource+0x70>
 800868c:	2b60      	cmp	r3, #96	; 0x60
 800868e:	d145      	bne.n	800871c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	684d      	ldr	r5, [r1, #4]
 8008694:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008696:	6a18      	ldr	r0, [r3, #32]
 8008698:	f020 0010 	bic.w	r0, r0, #16
 800869c:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80086a0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086a6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80086b2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b4:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80086b8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ba:	4b4d      	ldr	r3, [pc, #308]	; (80087f0 <HAL_TIM_ConfigClockSource+0x198>)
 80086bc:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086be:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80086c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2000      	movs	r0, #0
}
 80086c6:	e047      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d11a      	bne.n	8008702 <HAL_TIM_ConfigClockSource+0xaa>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	6848      	ldr	r0, [r1, #4]
 80086d0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80086d2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	f022 0201 	bic.w	r2, r2, #1
 80086da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086dc:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086e6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80086ea:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80086ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ee:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80086f2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80086f4:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <HAL_TIM_ConfigClockSource+0x198>)
 80086f6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80086fc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2000      	movs	r0, #0
}
 8008700:	e02a      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 8008702:	d86e      	bhi.n	80087e2 <HAL_TIM_ConfigClockSource+0x18a>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d019      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 8008708:	d903      	bls.n	8008712 <HAL_TIM_ConfigClockSource+0xba>
 800870a:	2b30      	cmp	r3, #48	; 0x30
 800870c:	d016      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 800870e:	2001      	movs	r0, #1
 8008710:	e022      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
 8008712:	f033 0210 	bics.w	r2, r3, #16
 8008716:	d011      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 8008718:	2001      	movs	r0, #1
 800871a:	e01d      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
 800871c:	2001      	movs	r0, #1
 800871e:	e01b      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
 8008720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008724:	d035      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x13a>
 8008726:	d913      	bls.n	8008750 <HAL_TIM_ConfigClockSource+0xf8>
 8008728:	4a32      	ldr	r2, [pc, #200]	; (80087f4 <HAL_TIM_ConfigClockSource+0x19c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d006      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 800872e:	d91a      	bls.n	8008766 <HAL_TIM_ConfigClockSource+0x10e>
 8008730:	4a31      	ldr	r2, [pc, #196]	; (80087f8 <HAL_TIM_ConfigClockSource+0x1a0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d002      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 8008736:	3210      	adds	r2, #16
 8008738:	4293      	cmp	r3, r2
 800873a:	d11b      	bne.n	8008774 <HAL_TIM_ConfigClockSource+0x11c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800873c:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800873e:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008740:	4a2b      	ldr	r2, [pc, #172]	; (80087f0 <HAL_TIM_ConfigClockSource+0x198>)
 8008742:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008744:	4313      	orrs	r3, r2
 8008746:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800874a:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800874c:	2000      	movs	r0, #0
}
 800874e:	e003      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
  HAL_StatusTypeDef status = HAL_OK;
 8008750:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8008754:	bf18      	it	ne
 8008756:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8008758:	2301      	movs	r3, #1
 800875a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800875e:	2300      	movs	r3, #0
 8008760:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008764:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8008766:	f023 0210 	bic.w	r2, r3, #16
 800876a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800876e:	d0e5      	beq.n	800873c <HAL_TIM_ConfigClockSource+0xe4>
 8008770:	2001      	movs	r0, #1
 8008772:	e7f1      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
 8008774:	2001      	movs	r0, #1
 8008776:	e7ef      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8008778:	68cb      	ldr	r3, [r1, #12]
 800877a:	684a      	ldr	r2, [r1, #4]
 800877c:	6889      	ldr	r1, [r1, #8]
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	f7ff ff5d 	bl	800863e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800878c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2000      	movs	r0, #0
      break;
 8008790:	e7e2      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8008792:	68cb      	ldr	r3, [r1, #12]
 8008794:	684a      	ldr	r2, [r1, #4]
 8008796:	6889      	ldr	r1, [r1, #8]
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	f7ff ff50 	bl	800863e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	6893      	ldr	r3, [r2, #8]
 80087a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087a6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087a8:	2000      	movs	r0, #0
      break;
 80087aa:	e7d5      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	6848      	ldr	r0, [r1, #4]
 80087b0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80087b2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b4:	6a1a      	ldr	r2, [r3, #32]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087bc:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80087ca:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80087cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ce:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087d0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80087d2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <HAL_TIM_ConfigClockSource+0x198>)
 80087d6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087d8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80087dc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087de:	2000      	movs	r0, #0
}
 80087e0:	e7ba      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 80087e2:	2001      	movs	r0, #1
 80087e4:	e7b8      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
  __HAL_LOCK(htim);
 80087e6:	2002      	movs	r0, #2
}
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	ffce0088 	.word	0xffce0088
 80087f0:	ffcfff8f 	.word	0xffcfff8f
 80087f4:	00100020 	.word	0x00100020
 80087f8:	00100030 	.word	0x00100030

080087fc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087fc:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008800:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008802:	f04f 0c01 	mov.w	ip, #1
 8008806:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800880a:	ea23 030c 	bic.w	r3, r3, ip
 800880e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	408a      	lsls	r2, r1
 8008814:	431a      	orrs	r2, r3
 8008816:	6202      	str	r2, [r0, #32]
}
 8008818:	4770      	bx	lr
	...

0800881c <HAL_TIM_PWM_Start>:
{
 800881c:	b510      	push	{r4, lr}
 800881e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008820:	460b      	mov	r3, r1
 8008822:	2900      	cmp	r1, #0
 8008824:	d162      	bne.n	80088ec <HAL_TIM_PWM_Start+0xd0>
 8008826:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	2a01      	cmp	r2, #1
 800882e:	f040 80a4 	bne.w	800897a <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008832:	2202      	movs	r2, #2
 8008834:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008838:	2201      	movs	r2, #1
 800883a:	4619      	mov	r1, r3
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	f7ff ffdd 	bl	80087fc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	4b51      	ldr	r3, [pc, #324]	; (800898c <HAL_TIM_PWM_Start+0x170>)
 8008846:	4952      	ldr	r1, [pc, #328]	; (8008990 <HAL_TIM_PWM_Start+0x174>)
 8008848:	428a      	cmp	r2, r1
 800884a:	bf18      	it	ne
 800884c:	429a      	cmpne	r2, r3
 800884e:	bf0c      	ite	eq
 8008850:	2301      	moveq	r3, #1
 8008852:	2300      	movne	r3, #0
 8008854:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8008858:	428a      	cmp	r2, r1
 800885a:	bf08      	it	eq
 800885c:	f043 0301 	orreq.w	r3, r3, #1
 8008860:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008864:	428a      	cmp	r2, r1
 8008866:	bf08      	it	eq
 8008868:	f043 0301 	orreq.w	r3, r3, #1
 800886c:	b913      	cbnz	r3, 8008874 <HAL_TIM_PWM_Start+0x58>
 800886e:	4b49      	ldr	r3, [pc, #292]	; (8008994 <HAL_TIM_PWM_Start+0x178>)
 8008870:	429a      	cmp	r2, r3
 8008872:	d103      	bne.n	800887c <HAL_TIM_PWM_Start+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 8008874:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887a:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	4b43      	ldr	r3, [pc, #268]	; (800898c <HAL_TIM_PWM_Start+0x170>)
 8008880:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008884:	bf18      	it	ne
 8008886:	429a      	cmpne	r2, r3
 8008888:	bf0c      	ite	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	2300      	movne	r3, #0
 800888e:	4942      	ldr	r1, [pc, #264]	; (8008998 <HAL_TIM_PWM_Start+0x17c>)
 8008890:	428a      	cmp	r2, r1
 8008892:	bf08      	it	eq
 8008894:	f043 0301 	orreq.w	r3, r3, #1
 8008898:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800889c:	428a      	cmp	r2, r1
 800889e:	bf08      	it	eq
 80088a0:	f043 0301 	orreq.w	r3, r3, #1
 80088a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088a8:	428a      	cmp	r2, r1
 80088aa:	bf08      	it	eq
 80088ac:	f043 0301 	orreq.w	r3, r3, #1
 80088b0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80088b4:	428a      	cmp	r2, r1
 80088b6:	bf08      	it	eq
 80088b8:	f043 0301 	orreq.w	r3, r3, #1
 80088bc:	f5a1 416c 	sub.w	r1, r1, #60416	; 0xec00
 80088c0:	428a      	cmp	r2, r1
 80088c2:	bf08      	it	eq
 80088c4:	f043 0301 	orreq.w	r3, r3, #1
 80088c8:	b913      	cbnz	r3, 80088d0 <HAL_TIM_PWM_Start+0xb4>
 80088ca:	4b34      	ldr	r3, [pc, #208]	; (800899c <HAL_TIM_PWM_Start+0x180>)
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d14e      	bne.n	800896e <HAL_TIM_PWM_Start+0x152>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088d0:	6891      	ldr	r1, [r2, #8]
 80088d2:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <HAL_TIM_PWM_Start+0x184>)
 80088d4:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	2b06      	cmp	r3, #6
 80088d8:	d055      	beq.n	8008986 <HAL_TIM_PWM_Start+0x16a>
 80088da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088de:	d052      	beq.n	8008986 <HAL_TIM_PWM_Start+0x16a>
      __HAL_TIM_ENABLE(htim);
 80088e0:	6813      	ldr	r3, [r2, #0]
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80088e8:	2000      	movs	r0, #0
 80088ea:	e04d      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ec:	2904      	cmp	r1, #4
 80088ee:	d00e      	beq.n	800890e <HAL_TIM_PWM_Start+0xf2>
 80088f0:	2908      	cmp	r1, #8
 80088f2:	d015      	beq.n	8008920 <HAL_TIM_PWM_Start+0x104>
 80088f4:	290c      	cmp	r1, #12
 80088f6:	d01c      	beq.n	8008932 <HAL_TIM_PWM_Start+0x116>
 80088f8:	2910      	cmp	r1, #16
 80088fa:	d021      	beq.n	8008940 <HAL_TIM_PWM_Start+0x124>
 80088fc:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	3a01      	subs	r2, #1
 8008904:	bf18      	it	ne
 8008906:	2201      	movne	r2, #1
 8008908:	b30a      	cbz	r2, 800894e <HAL_TIM_PWM_Start+0x132>
    return HAL_ERROR;
 800890a:	2001      	movs	r0, #1
 800890c:	e03c      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	2a01      	cmp	r2, #1
 8008916:	d132      	bne.n	800897e <HAL_TIM_PWM_Start+0x162>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008918:	2202      	movs	r2, #2
 800891a:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 800891e:	e78b      	b.n	8008838 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008920:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	2a01      	cmp	r2, #1
 8008928:	d12b      	bne.n	8008982 <HAL_TIM_PWM_Start+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800892a:	2202      	movs	r2, #2
 800892c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8008930:	e782      	b.n	8008838 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008932:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	3a01      	subs	r2, #1
 800893a:	bf18      	it	ne
 800893c:	2201      	movne	r2, #1
 800893e:	e7e3      	b.n	8008908 <HAL_TIM_PWM_Start+0xec>
 8008940:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	3a01      	subs	r2, #1
 8008948:	bf18      	it	ne
 800894a:	2201      	movne	r2, #1
 800894c:	e7dc      	b.n	8008908 <HAL_TIM_PWM_Start+0xec>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800894e:	2b0c      	cmp	r3, #12
 8008950:	d005      	beq.n	800895e <HAL_TIM_PWM_Start+0x142>
 8008952:	2b10      	cmp	r3, #16
 8008954:	d007      	beq.n	8008966 <HAL_TIM_PWM_Start+0x14a>
 8008956:	2202      	movs	r2, #2
 8008958:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800895c:	e76c      	b.n	8008838 <HAL_TIM_PWM_Start+0x1c>
 800895e:	2202      	movs	r2, #2
 8008960:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8008964:	e768      	b.n	8008838 <HAL_TIM_PWM_Start+0x1c>
 8008966:	2202      	movs	r2, #2
 8008968:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800896c:	e764      	b.n	8008838 <HAL_TIM_PWM_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008976:	2000      	movs	r0, #0
 8008978:	e006      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
    return HAL_ERROR;
 800897a:	2001      	movs	r0, #1
 800897c:	e004      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
 800897e:	2001      	movs	r0, #1
 8008980:	e002      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
 8008982:	2001      	movs	r0, #1
 8008984:	e000      	b.n	8008988 <HAL_TIM_PWM_Start+0x16c>
  return HAL_OK;
 8008986:	2000      	movs	r0, #0
}
 8008988:	bd10      	pop	{r4, pc}
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40010400 	.word	0x40010400
 8008994:	40014800 	.word	0x40014800
 8008998:	40000400 	.word	0x40000400
 800899c:	40014000 	.word	0x40014000
 80089a0:	00010007 	.word	0x00010007

080089a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d051      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80089ac:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80089ae:	2301      	movs	r3, #1
 80089b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b4:	2302      	movs	r3, #2
 80089b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089ba:	6802      	ldr	r2, [r0, #0]
 80089bc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089be:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c0:	4d24      	ldr	r5, [pc, #144]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089c2:	42aa      	cmp	r2, r5
 80089c4:	d003      	beq.n	80089ce <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80089c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089ca:	42aa      	cmp	r2, r5
 80089cc:	d103      	bne.n	80089d6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089d2:	684d      	ldr	r5, [r1, #4]
 80089d4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089da:	680d      	ldr	r5, [r1, #0]
 80089dc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089de:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e0:	6802      	ldr	r2, [r0, #0]
 80089e2:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80089e8:	bf18      	it	ne
 80089ea:	429a      	cmpne	r2, r3
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	4d19      	ldr	r5, [pc, #100]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80089f4:	42aa      	cmp	r2, r5
 80089f6:	bf08      	it	eq
 80089f8:	f043 0301 	orreq.w	r3, r3, #1
 80089fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a00:	42aa      	cmp	r2, r5
 8008a02:	bf08      	it	eq
 8008a04:	f043 0301 	orreq.w	r3, r3, #1
 8008a08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a0c:	42aa      	cmp	r2, r5
 8008a0e:	bf08      	it	eq
 8008a10:	f043 0301 	orreq.w	r3, r3, #1
 8008a14:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8008a18:	42aa      	cmp	r2, r5
 8008a1a:	bf08      	it	eq
 8008a1c:	f043 0301 	orreq.w	r3, r3, #1
 8008a20:	f5a5 456c 	sub.w	r5, r5, #60416	; 0xec00
 8008a24:	42aa      	cmp	r2, r5
 8008a26:	bf08      	it	eq
 8008a28:	f043 0301 	orreq.w	r3, r3, #1
 8008a2c:	b913      	cbnz	r3, 8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d104      	bne.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a34:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a38:	688b      	ldr	r3, [r1, #8]
 8008a3a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a3c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a44:	2300      	movs	r3, #0
 8008a46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008a4a:	4618      	mov	r0, r3
}
 8008a4c:	bc30      	pop	{r4, r5}
 8008a4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008a50:	2002      	movs	r0, #2
}
 8008a52:	4770      	bx	lr
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40014000 	.word	0x40014000

08008a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d03e      	beq.n	8008ae6 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8008a68:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a70:	68cb      	ldr	r3, [r1, #12]
 8008a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a76:	688a      	ldr	r2, [r1, #8]
 8008a78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a7e:	684a      	ldr	r2, [r1, #4]
 8008a80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a86:	680a      	ldr	r2, [r1, #0]
 8008a88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a8e:	690a      	ldr	r2, [r1, #16]
 8008a90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a96:	694a      	ldr	r2, [r1, #20]
 8008a98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008aa0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008aa2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008aa6:	698a      	ldr	r2, [r1, #24]
 8008aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008aac:	6802      	ldr	r2, [r0, #0]
 8008aae:	4c0f      	ldr	r4, [pc, #60]	; (8008aec <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8008ab0:	42a2      	cmp	r2, r4
 8008ab2:	d003      	beq.n	8008abc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008ab4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ab8:	42a2      	cmp	r2, r4
 8008aba:	d10c      	bne.n	8008ad6 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008abc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ac0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008ac2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aca:	69cc      	ldr	r4, [r1, #28]
 8008acc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ace:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008ad2:	6a09      	ldr	r1, [r1, #32]
 8008ad4:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ad6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008ade:	4618      	mov	r0, r3
}
 8008ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008ae6:	2002      	movs	r0, #2
}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40010000 	.word	0x40010000

08008af0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008af0:	4770      	bx	lr

08008af2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008af4:	4770      	bx	lr

08008af6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008af6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	e852 3f00 	ldrex	r3, [r2]
 8008afc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	e842 3100 	strex	r1, r3, [r2]
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d1f6      	bne.n	8008af6 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	f102 0308 	add.w	r3, r2, #8
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	3208      	adds	r2, #8
 8008b18:	e842 3100 	strex	r1, r3, [r2]
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d1f3      	bne.n	8008b08 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b20:	2320      	movs	r3, #32
 8008b22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8008b26:	4770      	bx	lr

08008b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b28:	b410      	push	{r4}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	e852 3f00 	ldrex	r3, [r2]
 8008b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	e842 3100 	strex	r1, r3, [r2]
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	d1f6      	bne.n	8008b2a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b3c:	4c10      	ldr	r4, [pc, #64]	; (8008b80 <UART_EndRxTransfer+0x58>)
 8008b3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	f102 0308 	add.w	r3, r2, #8
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	3208      	adds	r2, #8
 8008b4c:	e842 3100 	strex	r1, r3, [r2]
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d1f4      	bne.n	8008b3e <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b54:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d008      	beq.n	8008b6c <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b5a:	2320      	movs	r3, #32
 8008b5c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	2300      	movs	r3, #0
 8008b62:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b64:	6703      	str	r3, [r0, #112]	; 0x70
}
 8008b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	e852 3f00 	ldrex	r3, [r2]
 8008b72:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	e842 3100 	strex	r1, r3, [r2]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d1f6      	bne.n	8008b6c <UART_EndRxTransfer+0x44>
 8008b7e:	e7ec      	b.n	8008b5a <UART_EndRxTransfer+0x32>
 8008b80:	effffffe 	.word	0xeffffffe

08008b84 <HAL_UART_TxCpltCallback>:
}
 8008b84:	4770      	bx	lr

08008b86 <HAL_UART_RxCpltCallback>:
}
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_RxHalfCpltCallback>:
}
 8008b88:	4770      	bx	lr

08008b8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b8a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b8c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b8e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b92:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b9e:	d001      	beq.n	8008ba4 <UART_DMAError+0x1a>
 8008ba0:	2a21      	cmp	r2, #33	; 0x21
 8008ba2:	d010      	beq.n	8008bc6 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008bac:	d001      	beq.n	8008bb2 <UART_DMAError+0x28>
 8008bae:	2d22      	cmp	r5, #34	; 0x22
 8008bb0:	d010      	beq.n	8008bd4 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008bb2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008bb6:	f043 0310 	orr.w	r3, r3, #16
 8008bba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f003 fa11 	bl	800bfe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7ff ff92 	bl	8008af6 <UART_EndTxTransfer>
 8008bd2:	e7e7      	b.n	8008ba4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7ff ffa4 	bl	8008b28 <UART_EndRxTransfer>
 8008be0:	e7e7      	b.n	8008bb2 <UART_DMAError+0x28>

08008be2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008be2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008be4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008bec:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bf0:	f003 f9f9 	bl	800bfe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf4:	bd08      	pop	{r3, pc}
	...

08008bf8 <HAL_UART_IRQHandler>:
{
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bfc:	6802      	ldr	r2, [r0, #0]
 8008bfe:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c00:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c02:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008c04:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8008c08:	ea13 0f0c 	tst.w	r3, ip
 8008c0c:	d10e      	bne.n	8008c2c <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c0e:	f013 0f20 	tst.w	r3, #32
 8008c12:	d014      	beq.n	8008c3e <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c14:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c18:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8008c1c:	ea55 050c 	orrs.w	r5, r5, ip
 8008c20:	d00d      	beq.n	8008c3e <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8008c22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008c24:	b3a3      	cbz	r3, 8008c90 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8008c26:	4620      	mov	r0, r4
 8008c28:	4798      	blx	r3
 8008c2a:	e031      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c2c:	4d66      	ldr	r5, [pc, #408]	; (8008dc8 <HAL_UART_IRQHandler+0x1d0>)
 8008c2e:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c30:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008dd0 <HAL_UART_IRQHandler+0x1d8>
 8008c34:	ea00 0c0c 	and.w	ip, r0, ip
 8008c38:	ea5c 0605 	orrs.w	r6, ip, r5
 8008c3c:	d129      	bne.n	8008c92 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c3e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8008c40:	2d01      	cmp	r5, #1
 8008c42:	f000 80c7 	beq.w	8008dd4 <HAL_UART_IRQHandler+0x1dc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c46:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008c4a:	d003      	beq.n	8008c54 <HAL_UART_IRQHandler+0x5c>
 8008c4c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8008c50:	f040 81a6 	bne.w	8008fa0 <HAL_UART_IRQHandler+0x3a8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c58:	d006      	beq.n	8008c68 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c5a:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c5e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8008c62:	430a      	orrs	r2, r1
 8008c64:	f040 81a3 	bne.w	8008fae <HAL_UART_IRQHandler+0x3b6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c6c:	d003      	beq.n	8008c76 <HAL_UART_IRQHandler+0x7e>
 8008c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c72:	f040 81a3 	bne.w	8008fbc <HAL_UART_IRQHandler+0x3c4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c76:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008c7a:	d003      	beq.n	8008c84 <HAL_UART_IRQHandler+0x8c>
 8008c7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c80:	f040 81ae 	bne.w	8008fe0 <HAL_UART_IRQHandler+0x3e8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_IRQHandler+0x98>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f2c0 81ac 	blt.w	8008fe8 <HAL_UART_IRQHandler+0x3f0>
}
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c92:	f013 0f01 	tst.w	r3, #1
 8008c96:	d009      	beq.n	8008cac <HAL_UART_IRQHandler+0xb4>
 8008c98:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008c9c:	d006      	beq.n	8008cac <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c9e:	2601      	movs	r6, #1
 8008ca0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008ca6:	4332      	orrs	r2, r6
 8008ca8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cac:	f013 0f02 	tst.w	r3, #2
 8008cb0:	d074      	beq.n	8008d9c <HAL_UART_IRQHandler+0x1a4>
 8008cb2:	f011 0f01 	tst.w	r1, #1
 8008cb6:	d014      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	2602      	movs	r6, #2
 8008cbc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cbe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008cc2:	f042 0204 	orr.w	r2, r2, #4
 8008cc6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cca:	f013 0f04 	tst.w	r3, #4
 8008cce:	d008      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	2604      	movs	r6, #4
 8008cd4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cd6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008cda:	f042 0202 	orr.w	r2, r2, #2
 8008cde:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ce2:	f013 0f08 	tst.w	r3, #8
 8008ce6:	d00b      	beq.n	8008d00 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ce8:	f000 0220 	and.w	r2, r0, #32
 8008cec:	432a      	orrs	r2, r5
 8008cee:	d007      	beq.n	8008d00 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	2508      	movs	r5, #8
 8008cf4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cf6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008cfa:	432a      	orrs	r2, r5
 8008cfc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d00:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008d04:	d00c      	beq.n	8008d20 <HAL_UART_IRQHandler+0x128>
 8008d06:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8008d0a:	d009      	beq.n	8008d20 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d0c:	6822      	ldr	r2, [r4, #0]
 8008d0e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008d12:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d14:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008d18:	f042 0220 	orr.w	r2, r2, #32
 8008d1c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d20:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	d0b3      	beq.n	8008c90 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d28:	f013 0f20 	tst.w	r3, #32
 8008d2c:	d00a      	beq.n	8008d44 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d2e:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d32:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8008d36:	ea50 0301 	orrs.w	r3, r0, r1
 8008d3a:	d003      	beq.n	8008d44 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8008d3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d3e:	b10b      	cbz	r3, 8008d44 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8008d40:	4620      	mov	r0, r4
 8008d42:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008d44:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	6892      	ldr	r2, [r2, #8]
 8008d4c:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d030      	beq.n	8008dba <HAL_UART_IRQHandler+0x1c2>
        UART_EndRxTransfer(huart);
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f7ff fee5 	bl	8008b28 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d66:	d024      	beq.n	8008db2 <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	f102 0308 	add.w	r3, r2, #8
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	3208      	adds	r2, #8
 8008d78:	e842 3100 	strex	r1, r3, [r2]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d1f3      	bne.n	8008d68 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8008d80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008d82:	b193      	cbz	r3, 8008daa <HAL_UART_IRQHandler+0x1b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <HAL_UART_IRQHandler+0x1d4>)
 8008d86:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d88:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008d8a:	f7fb f84f 	bl	8003e2c <HAL_DMA_Abort_IT>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f af7e 	beq.w	8008c90 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d94:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008d96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d98:	4798      	blx	r3
 8008d9a:	e779      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d9c:	f013 0f04 	tst.w	r3, #4
 8008da0:	d09f      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xea>
 8008da2:	f011 0f01 	tst.w	r1, #1
 8008da6:	d09c      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xea>
 8008da8:	e792      	b.n	8008cd0 <HAL_UART_IRQHandler+0xd8>
            HAL_UART_ErrorCallback(huart);
 8008daa:	4620      	mov	r0, r4
 8008dac:	f003 f91b 	bl	800bfe6 <HAL_UART_ErrorCallback>
 8008db0:	e76e      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8008db2:	4620      	mov	r0, r4
 8008db4:	f003 f917 	bl	800bfe6 <HAL_UART_ErrorCallback>
 8008db8:	e76a      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f003 f913 	bl	800bfe6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008dc6:	e763      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
 8008dc8:	10000001 	.word	0x10000001
 8008dcc:	08008be3 	.word	0x08008be3
 8008dd0:	04000120 	.word	0x04000120
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008dd4:	f013 0f10 	tst.w	r3, #16
 8008dd8:	f43f af35 	beq.w	8008c46 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ddc:	f010 0f10 	tst.w	r0, #16
 8008de0:	f43f af31 	beq.w	8008c46 <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008de4:	2310      	movs	r3, #16
 8008de6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008df0:	f000 809f 	beq.w	8008f32 <HAL_UART_IRQHandler+0x33a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008df4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008df6:	680a      	ldr	r2, [r1, #0]
 8008df8:	4b7d      	ldr	r3, [pc, #500]	; (8008ff0 <HAL_UART_IRQHandler+0x3f8>)
 8008dfa:	487e      	ldr	r0, [pc, #504]	; (8008ff4 <HAL_UART_IRQHandler+0x3fc>)
 8008dfc:	4282      	cmp	r2, r0
 8008dfe:	bf18      	it	ne
 8008e00:	429a      	cmpne	r2, r3
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	3018      	adds	r0, #24
 8008e0a:	4282      	cmp	r2, r0
 8008e0c:	bf08      	it	eq
 8008e0e:	f043 0301 	orreq.w	r3, r3, #1
 8008e12:	3018      	adds	r0, #24
 8008e14:	4282      	cmp	r2, r0
 8008e16:	bf08      	it	eq
 8008e18:	f043 0301 	orreq.w	r3, r3, #1
 8008e1c:	3018      	adds	r0, #24
 8008e1e:	4282      	cmp	r2, r0
 8008e20:	bf08      	it	eq
 8008e22:	f043 0301 	orreq.w	r3, r3, #1
 8008e26:	3018      	adds	r0, #24
 8008e28:	4282      	cmp	r2, r0
 8008e2a:	bf08      	it	eq
 8008e2c:	f043 0301 	orreq.w	r3, r3, #1
 8008e30:	3018      	adds	r0, #24
 8008e32:	4282      	cmp	r2, r0
 8008e34:	bf08      	it	eq
 8008e36:	f043 0301 	orreq.w	r3, r3, #1
 8008e3a:	3018      	adds	r0, #24
 8008e3c:	4282      	cmp	r2, r0
 8008e3e:	bf08      	it	eq
 8008e40:	f043 0301 	orreq.w	r3, r3, #1
 8008e44:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008e48:	4282      	cmp	r2, r0
 8008e4a:	bf08      	it	eq
 8008e4c:	f043 0301 	orreq.w	r3, r3, #1
 8008e50:	3018      	adds	r0, #24
 8008e52:	4282      	cmp	r2, r0
 8008e54:	bf08      	it	eq
 8008e56:	f043 0301 	orreq.w	r3, r3, #1
 8008e5a:	3018      	adds	r0, #24
 8008e5c:	4282      	cmp	r2, r0
 8008e5e:	bf08      	it	eq
 8008e60:	f043 0301 	orreq.w	r3, r3, #1
 8008e64:	3018      	adds	r0, #24
 8008e66:	4282      	cmp	r2, r0
 8008e68:	bf08      	it	eq
 8008e6a:	f043 0301 	orreq.w	r3, r3, #1
 8008e6e:	3018      	adds	r0, #24
 8008e70:	4282      	cmp	r2, r0
 8008e72:	bf08      	it	eq
 8008e74:	f043 0301 	orreq.w	r3, r3, #1
 8008e78:	3018      	adds	r0, #24
 8008e7a:	4282      	cmp	r2, r0
 8008e7c:	bf08      	it	eq
 8008e7e:	f043 0301 	orreq.w	r3, r3, #1
 8008e82:	3018      	adds	r0, #24
 8008e84:	4282      	cmp	r2, r0
 8008e86:	bf08      	it	eq
 8008e88:	f043 0301 	orreq.w	r3, r3, #1
 8008e8c:	b913      	cbnz	r3, 8008e94 <HAL_UART_IRQHandler+0x29c>
 8008e8e:	4b5a      	ldr	r3, [pc, #360]	; (8008ff8 <HAL_UART_IRQHandler+0x400>)
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d14b      	bne.n	8008f2c <HAL_UART_IRQHandler+0x334>
 8008e94:	6853      	ldr	r3, [r2, #4]
 8008e96:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f43f aef9 	beq.w	8008c90 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e9e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	f67f aef4 	bls.w	8008c90 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008eac:	69cb      	ldr	r3, [r1, #28]
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb2:	d031      	beq.n	8008f18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	e852 3f00 	ldrex	r3, [r2]
 8008eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	e842 3100 	strex	r1, r3, [r2]
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d1f6      	bne.n	8008eb4 <HAL_UART_IRQHandler+0x2bc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	f102 0308 	add.w	r3, r2, #8
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	3208      	adds	r2, #8
 8008ed6:	e842 3100 	strex	r1, r3, [r2]
 8008eda:	2900      	cmp	r1, #0
 8008edc:	d1f3      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x2ce>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ede:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	f102 0308 	add.w	r3, r2, #8
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	3208      	adds	r2, #8
 8008eee:	e842 3100 	strex	r1, r3, [r2]
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	d1f3      	bne.n	8008ede <HAL_UART_IRQHandler+0x2e6>
          huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	2320      	movs	r3, #32
 8008ef8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efc:	2300      	movs	r3, #0
 8008efe:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	e852 3f00 	ldrex	r3, [r2]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	e842 3100 	strex	r1, r3, [r2]
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d1f6      	bne.n	8008f00 <HAL_UART_IRQHandler+0x308>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f12:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008f14:	f7fa fd2e 	bl	8003974 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f18:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f1c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f20:	1ac9      	subs	r1, r1, r3
 8008f22:	b289      	uxth	r1, r1
 8008f24:	4620      	mov	r0, r4
 8008f26:	f003 f855 	bl	800bfd4 <HAL_UARTEx_RxEventCallback>
 8008f2a:	e6b1      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f2c:	6853      	ldr	r3, [r2, #4]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	e7b2      	b.n	8008e98 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f36:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f3a:	1ac9      	subs	r1, r1, r3
 8008f3c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008f3e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f42:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 8008f44:	2900      	cmp	r1, #0
 8008f46:	f43f aea3 	beq.w	8008c90 <HAL_UART_IRQHandler+0x98>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f43f aea0 	beq.w	8008c90 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f50:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	e852 3f00 	ldrex	r3, [r2]
 8008f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	e842 3000 	strex	r0, r3, [r2]
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1f6      	bne.n	8008f50 <HAL_UART_IRQHandler+0x358>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f62:	4d26      	ldr	r5, [pc, #152]	; (8008ffc <HAL_UART_IRQHandler+0x404>)
 8008f64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	f102 0308 	add.w	r3, r2, #8
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	402b      	ands	r3, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	3208      	adds	r2, #8
 8008f72:	e842 3000 	strex	r0, r3, [r2]
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d1f4      	bne.n	8008f64 <HAL_UART_IRQHandler+0x36c>
        huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f80:	2300      	movs	r3, #0
 8008f82:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8008f84:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	e852 3f00 	ldrex	r3, [r2]
 8008f8c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	e842 3000 	strex	r0, r3, [r2]
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d1f6      	bne.n	8008f86 <HAL_UART_IRQHandler+0x38e>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f003 f81b 	bl	800bfd4 <HAL_UARTEx_RxEventCallback>
 8008f9e:	e677      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fa4:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fdce 	bl	8009b48 <HAL_UARTEx_WakeupCallback>
    return;
 8008fac:	e670      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 8008fae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f43f ae6d 	beq.w	8008c90 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4798      	blx	r3
 8008fba:	e669      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	e852 3f00 	ldrex	r3, [r2]
 8008fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	e842 3100 	strex	r1, r3, [r2]
 8008fca:	2900      	cmp	r1, #0
 8008fcc:	d1f6      	bne.n	8008fbc <HAL_UART_IRQHandler+0x3c4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fce:	2320      	movs	r3, #32
 8008fd0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7ff fdd3 	bl	8008b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fde:	e657      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fdb3 	bl	8009b4c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8008fe6:	e653      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fdae 	bl	8009b4a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8008fee:	e64f      	b.n	8008c90 <HAL_UART_IRQHandler+0x98>
 8008ff0:	40020010 	.word	0x40020010
 8008ff4:	40020028 	.word	0x40020028
 8008ff8:	400204b8 	.word	0x400204b8
 8008ffc:	effffffe 	.word	0xeffffffe

08009000 <UART_DMARxHalfCplt>:
{
 8009000:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009002:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009004:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d002      	beq.n	8009010 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800900a:	f7ff fdbd 	bl	8008b88 <HAL_UART_RxHalfCpltCallback>
}
 800900e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009010:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009014:	0849      	lsrs	r1, r1, #1
 8009016:	f002 ffdd 	bl	800bfd4 <HAL_UARTEx_RxEventCallback>
 800901a:	e7f8      	b.n	800900e <UART_DMARxHalfCplt+0xe>

0800901c <UART_DMAReceiveCplt>:
{
 800901c:	b508      	push	{r3, lr}
 800901e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009020:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009028:	d029      	beq.n	800907e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009030:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	e852 3f00 	ldrex	r3, [r2]
 8009036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	e842 3100 	strex	r1, r3, [r2]
 800903e:	2900      	cmp	r1, #0
 8009040:	d1f6      	bne.n	8009030 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	f102 0308 	add.w	r3, r2, #8
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	3208      	adds	r2, #8
 8009052:	e842 3100 	strex	r1, r3, [r2]
 8009056:	2900      	cmp	r1, #0
 8009058:	d1f3      	bne.n	8009042 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	f102 0308 	add.w	r3, r2, #8
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	3208      	adds	r2, #8
 800906a:	e842 3100 	strex	r1, r3, [r2]
 800906e:	2900      	cmp	r1, #0
 8009070:	d1f3      	bne.n	800905a <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8009072:	2320      	movs	r3, #32
 8009074:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009078:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d005      	beq.n	800908a <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800907e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009080:	2b01      	cmp	r3, #1
 8009082:	d00c      	beq.n	800909e <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 8009084:	f7ff fd7f 	bl	8008b86 <HAL_UART_RxCpltCallback>
}
 8009088:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	e852 3f00 	ldrex	r3, [r2]
 8009090:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	e842 3100 	strex	r1, r3, [r2]
 8009098:	2900      	cmp	r1, #0
 800909a:	d1f6      	bne.n	800908a <UART_DMAReceiveCplt+0x6e>
 800909c:	e7ef      	b.n	800907e <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800909e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80090a2:	f002 ff97 	bl	800bfd4 <HAL_UARTEx_RxEventCallback>
 80090a6:	e7ef      	b.n	8009088 <UART_DMAReceiveCplt+0x6c>

080090a8 <UART_SetConfig>:
{
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80090ae:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b0:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	6922      	ldr	r2, [r4, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	6962      	ldr	r2, [r4, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	69e2      	ldr	r2, [r4, #28]
 80090be:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090c0:	4a84      	ldr	r2, [pc, #528]	; (80092d4 <UART_SetConfig+0x22c>)
 80090c2:	4002      	ands	r2, r0
 80090c4:	4313      	orrs	r3, r2
 80090c6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	6853      	ldr	r3, [r2, #4]
 80090cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80090d0:	68e1      	ldr	r1, [r4, #12]
 80090d2:	430b      	orrs	r3, r1
 80090d4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090d6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	4b7f      	ldr	r3, [pc, #508]	; (80092d8 <UART_SetConfig+0x230>)
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 80090e0:	6a23      	ldr	r3, [r4, #32]
 80090e2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090e4:	6890      	ldr	r0, [r2, #8]
 80090e6:	4b7d      	ldr	r3, [pc, #500]	; (80092dc <UART_SetConfig+0x234>)
 80090e8:	4003      	ands	r3, r0
 80090ea:	430b      	orrs	r3, r1
 80090ec:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090f2:	f023 030f 	bic.w	r3, r3, #15
 80090f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090f8:	430b      	orrs	r3, r1
 80090fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	4b78      	ldr	r3, [pc, #480]	; (80092e0 <UART_SetConfig+0x238>)
 8009100:	429a      	cmp	r2, r3
 8009102:	d021      	beq.n	8009148 <UART_SetConfig+0xa0>
 8009104:	4b77      	ldr	r3, [pc, #476]	; (80092e4 <UART_SetConfig+0x23c>)
 8009106:	429a      	cmp	r2, r3
 8009108:	f000 8084 	beq.w	8009214 <UART_SetConfig+0x16c>
 800910c:	4b76      	ldr	r3, [pc, #472]	; (80092e8 <UART_SetConfig+0x240>)
 800910e:	429a      	cmp	r2, r3
 8009110:	f000 8098 	beq.w	8009244 <UART_SetConfig+0x19c>
 8009114:	4b75      	ldr	r3, [pc, #468]	; (80092ec <UART_SetConfig+0x244>)
 8009116:	429a      	cmp	r2, r3
 8009118:	f000 80ac 	beq.w	8009274 <UART_SetConfig+0x1cc>
 800911c:	4b74      	ldr	r3, [pc, #464]	; (80092f0 <UART_SetConfig+0x248>)
 800911e:	429a      	cmp	r2, r3
 8009120:	f000 80c0 	beq.w	80092a4 <UART_SetConfig+0x1fc>
 8009124:	4b73      	ldr	r3, [pc, #460]	; (80092f4 <UART_SetConfig+0x24c>)
 8009126:	429a      	cmp	r2, r3
 8009128:	f000 80ec 	beq.w	8009304 <UART_SetConfig+0x25c>
 800912c:	4b72      	ldr	r3, [pc, #456]	; (80092f8 <UART_SetConfig+0x250>)
 800912e:	429a      	cmp	r2, r3
 8009130:	f000 8123 	beq.w	800937a <UART_SetConfig+0x2d2>
 8009134:	4b71      	ldr	r3, [pc, #452]	; (80092fc <UART_SetConfig+0x254>)
 8009136:	429a      	cmp	r2, r3
 8009138:	f000 8137 	beq.w	80093aa <UART_SetConfig+0x302>
 800913c:	4b66      	ldr	r3, [pc, #408]	; (80092d8 <UART_SetConfig+0x230>)
 800913e:	429a      	cmp	r2, r3
 8009140:	f000 814b 	beq.w	80093da <UART_SetConfig+0x332>
 8009144:	2380      	movs	r3, #128	; 0x80
 8009146:	e033      	b.n	80091b0 <UART_SetConfig+0x108>
 8009148:	4b6d      	ldr	r3, [pc, #436]	; (8009300 <UART_SetConfig+0x258>)
 800914a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009150:	2b28      	cmp	r3, #40	; 0x28
 8009152:	d85d      	bhi.n	8009210 <UART_SetConfig+0x168>
 8009154:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009158:	005c0151 	.word	0x005c0151
 800915c:	005c005c 	.word	0x005c005c
 8009160:	005c005c 	.word	0x005c005c
 8009164:	005c005c 	.word	0x005c005c
 8009168:	005c029f 	.word	0x005c029f
 800916c:	005c005c 	.word	0x005c005c
 8009170:	005c005c 	.word	0x005c005c
 8009174:	005c005c 	.word	0x005c005c
 8009178:	005c0029 	.word	0x005c0029
 800917c:	005c005c 	.word	0x005c005c
 8009180:	005c005c 	.word	0x005c005c
 8009184:	005c005c 	.word	0x005c005c
 8009188:	005c02a1 	.word	0x005c02a1
 800918c:	005c005c 	.word	0x005c005c
 8009190:	005c005c 	.word	0x005c005c
 8009194:	005c005c 	.word	0x005c005c
 8009198:	005c002b 	.word	0x005c002b
 800919c:	005c005c 	.word	0x005c005c
 80091a0:	005c005c 	.word	0x005c005c
 80091a4:	005c005c 	.word	0x005c005c
 80091a8:	005a      	.short	0x005a
 80091aa:	2308      	movs	r3, #8
 80091ac:	e000      	b.n	80091b0 <UART_SetConfig+0x108>
 80091ae:	2320      	movs	r3, #32
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b0:	69e0      	ldr	r0, [r4, #28]
 80091b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80091b6:	f000 81b7 	beq.w	8009528 <UART_SetConfig+0x480>
    switch (clocksource)
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	f200 820f 	bhi.w	80095de <UART_SetConfig+0x536>
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	f200 825b 	bhi.w	800967c <UART_SetConfig+0x5d4>
 80091c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80091ca:	0226      	.short	0x0226
 80091cc:	0259022c 	.word	0x0259022c
 80091d0:	022f0259 	.word	0x022f0259
 80091d4:	02590259 	.word	0x02590259
 80091d8:	02340259 	.word	0x02340259
 80091dc:	02590259 	.word	0x02590259
 80091e0:	02590259 	.word	0x02590259
 80091e4:	02590259 	.word	0x02590259
 80091e8:	02390259 	.word	0x02390259
 80091ec:	02590259 	.word	0x02590259
 80091f0:	02590259 	.word	0x02590259
 80091f4:	02590259 	.word	0x02590259
 80091f8:	02590259 	.word	0x02590259
 80091fc:	02590259 	.word	0x02590259
 8009200:	02590259 	.word	0x02590259
 8009204:	02590259 	.word	0x02590259
 8009208:	02450259 	.word	0x02450259
  UART_GETCLOCKSOURCE(huart, clocksource);
 800920c:	2340      	movs	r3, #64	; 0x40
 800920e:	e7cf      	b.n	80091b0 <UART_SetConfig+0x108>
 8009210:	2380      	movs	r3, #128	; 0x80
 8009212:	e7cd      	b.n	80091b0 <UART_SetConfig+0x108>
 8009214:	4b3a      	ldr	r3, [pc, #232]	; (8009300 <UART_SetConfig+0x258>)
 8009216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	2b05      	cmp	r3, #5
 800921e:	d80f      	bhi.n	8009240 <UART_SetConfig+0x198>
 8009220:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009224:	023d00ed 	.word	0x023d00ed
 8009228:	00080006 	.word	0x00080006
 800922c:	000c000a 	.word	0x000c000a
 8009230:	2308      	movs	r3, #8
 8009232:	e7bd      	b.n	80091b0 <UART_SetConfig+0x108>
 8009234:	2310      	movs	r3, #16
 8009236:	e7bb      	b.n	80091b0 <UART_SetConfig+0x108>
 8009238:	2320      	movs	r3, #32
 800923a:	e7b9      	b.n	80091b0 <UART_SetConfig+0x108>
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	e7b7      	b.n	80091b0 <UART_SetConfig+0x108>
 8009240:	2380      	movs	r3, #128	; 0x80
 8009242:	e7b5      	b.n	80091b0 <UART_SetConfig+0x108>
 8009244:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <UART_SetConfig+0x258>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b05      	cmp	r3, #5
 800924e:	d80f      	bhi.n	8009270 <UART_SetConfig+0x1c8>
 8009250:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009254:	02270104 	.word	0x02270104
 8009258:	00080006 	.word	0x00080006
 800925c:	000c000a 	.word	0x000c000a
 8009260:	2308      	movs	r3, #8
 8009262:	e7a5      	b.n	80091b0 <UART_SetConfig+0x108>
 8009264:	2310      	movs	r3, #16
 8009266:	e7a3      	b.n	80091b0 <UART_SetConfig+0x108>
 8009268:	2320      	movs	r3, #32
 800926a:	e7a1      	b.n	80091b0 <UART_SetConfig+0x108>
 800926c:	2340      	movs	r3, #64	; 0x40
 800926e:	e79f      	b.n	80091b0 <UART_SetConfig+0x108>
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	e79d      	b.n	80091b0 <UART_SetConfig+0x108>
 8009274:	4b22      	ldr	r3, [pc, #136]	; (8009300 <UART_SetConfig+0x258>)
 8009276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	2b05      	cmp	r3, #5
 800927e:	d80f      	bhi.n	80092a0 <UART_SetConfig+0x1f8>
 8009280:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009284:	021100ee 	.word	0x021100ee
 8009288:	00080006 	.word	0x00080006
 800928c:	000c000a 	.word	0x000c000a
 8009290:	2308      	movs	r3, #8
 8009292:	e78d      	b.n	80091b0 <UART_SetConfig+0x108>
 8009294:	2310      	movs	r3, #16
 8009296:	e78b      	b.n	80091b0 <UART_SetConfig+0x108>
 8009298:	2320      	movs	r3, #32
 800929a:	e789      	b.n	80091b0 <UART_SetConfig+0x108>
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	e787      	b.n	80091b0 <UART_SetConfig+0x108>
 80092a0:	2380      	movs	r3, #128	; 0x80
 80092a2:	e785      	b.n	80091b0 <UART_SetConfig+0x108>
 80092a4:	4b16      	ldr	r3, [pc, #88]	; (8009300 <UART_SetConfig+0x258>)
 80092a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	2b05      	cmp	r3, #5
 80092ae:	d80f      	bhi.n	80092d0 <UART_SetConfig+0x228>
 80092b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092b4:	01fb00d8 	.word	0x01fb00d8
 80092b8:	00080006 	.word	0x00080006
 80092bc:	000c000a 	.word	0x000c000a
 80092c0:	2308      	movs	r3, #8
 80092c2:	e775      	b.n	80091b0 <UART_SetConfig+0x108>
 80092c4:	2310      	movs	r3, #16
 80092c6:	e773      	b.n	80091b0 <UART_SetConfig+0x108>
 80092c8:	2320      	movs	r3, #32
 80092ca:	e771      	b.n	80091b0 <UART_SetConfig+0x108>
 80092cc:	2340      	movs	r3, #64	; 0x40
 80092ce:	e76f      	b.n	80091b0 <UART_SetConfig+0x108>
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	e76d      	b.n	80091b0 <UART_SetConfig+0x108>
 80092d4:	cfff69f3 	.word	0xcfff69f3
 80092d8:	58000c00 	.word	0x58000c00
 80092dc:	11fff4ff 	.word	0x11fff4ff
 80092e0:	40011000 	.word	0x40011000
 80092e4:	40004400 	.word	0x40004400
 80092e8:	40004800 	.word	0x40004800
 80092ec:	40004c00 	.word	0x40004c00
 80092f0:	40005000 	.word	0x40005000
 80092f4:	40011400 	.word	0x40011400
 80092f8:	40007800 	.word	0x40007800
 80092fc:	40007c00 	.word	0x40007c00
 8009300:	58024400 	.word	0x58024400
 8009304:	4b82      	ldr	r3, [pc, #520]	; (8009510 <UART_SetConfig+0x468>)
 8009306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800930c:	2b28      	cmp	r3, #40	; 0x28
 800930e:	d832      	bhi.n	8009376 <UART_SetConfig+0x2ce>
 8009310:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009314:	003100aa 	.word	0x003100aa
 8009318:	00310031 	.word	0x00310031
 800931c:	00310031 	.word	0x00310031
 8009320:	00310031 	.word	0x00310031
 8009324:	003101cd 	.word	0x003101cd
 8009328:	00310031 	.word	0x00310031
 800932c:	00310031 	.word	0x00310031
 8009330:	00310031 	.word	0x00310031
 8009334:	00310029 	.word	0x00310029
 8009338:	00310031 	.word	0x00310031
 800933c:	00310031 	.word	0x00310031
 8009340:	00310031 	.word	0x00310031
 8009344:	0031002b 	.word	0x0031002b
 8009348:	00310031 	.word	0x00310031
 800934c:	00310031 	.word	0x00310031
 8009350:	00310031 	.word	0x00310031
 8009354:	0031002d 	.word	0x0031002d
 8009358:	00310031 	.word	0x00310031
 800935c:	00310031 	.word	0x00310031
 8009360:	00310031 	.word	0x00310031
 8009364:	002f      	.short	0x002f
 8009366:	2308      	movs	r3, #8
 8009368:	e722      	b.n	80091b0 <UART_SetConfig+0x108>
 800936a:	2310      	movs	r3, #16
 800936c:	e720      	b.n	80091b0 <UART_SetConfig+0x108>
 800936e:	2320      	movs	r3, #32
 8009370:	e71e      	b.n	80091b0 <UART_SetConfig+0x108>
 8009372:	2340      	movs	r3, #64	; 0x40
 8009374:	e71c      	b.n	80091b0 <UART_SetConfig+0x108>
 8009376:	2380      	movs	r3, #128	; 0x80
 8009378:	e71a      	b.n	80091b0 <UART_SetConfig+0x108>
 800937a:	4b65      	ldr	r3, [pc, #404]	; (8009510 <UART_SetConfig+0x468>)
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	2b05      	cmp	r3, #5
 8009384:	d80f      	bhi.n	80093a6 <UART_SetConfig+0x2fe>
 8009386:	e8df f013 	tbh	[pc, r3, lsl #1]
 800938a:	0071      	.short	0x0071
 800938c:	00060194 	.word	0x00060194
 8009390:	000a0008 	.word	0x000a0008
 8009394:	000c      	.short	0x000c
 8009396:	2308      	movs	r3, #8
 8009398:	e70a      	b.n	80091b0 <UART_SetConfig+0x108>
 800939a:	2310      	movs	r3, #16
 800939c:	e708      	b.n	80091b0 <UART_SetConfig+0x108>
 800939e:	2320      	movs	r3, #32
 80093a0:	e706      	b.n	80091b0 <UART_SetConfig+0x108>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	e704      	b.n	80091b0 <UART_SetConfig+0x108>
 80093a6:	2380      	movs	r3, #128	; 0x80
 80093a8:	e702      	b.n	80091b0 <UART_SetConfig+0x108>
 80093aa:	4b59      	ldr	r3, [pc, #356]	; (8009510 <UART_SetConfig+0x468>)
 80093ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d80f      	bhi.n	80093d6 <UART_SetConfig+0x32e>
 80093b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093ba:	005b      	.short	0x005b
 80093bc:	0006017e 	.word	0x0006017e
 80093c0:	000a0008 	.word	0x000a0008
 80093c4:	000c      	.short	0x000c
 80093c6:	2308      	movs	r3, #8
 80093c8:	e6f2      	b.n	80091b0 <UART_SetConfig+0x108>
 80093ca:	2310      	movs	r3, #16
 80093cc:	e6f0      	b.n	80091b0 <UART_SetConfig+0x108>
 80093ce:	2320      	movs	r3, #32
 80093d0:	e6ee      	b.n	80091b0 <UART_SetConfig+0x108>
 80093d2:	2340      	movs	r3, #64	; 0x40
 80093d4:	e6ec      	b.n	80091b0 <UART_SetConfig+0x108>
 80093d6:	2380      	movs	r3, #128	; 0x80
 80093d8:	e6ea      	b.n	80091b0 <UART_SetConfig+0x108>
 80093da:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80093de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	2b05      	cmp	r3, #5
 80093e6:	f200 8139 	bhi.w	800965c <UART_SetConfig+0x5b4>
 80093ea:	e8df f003 	tbb	[pc, r3]
 80093ee:	4a43      	.short	0x4a43
 80093f0:	038a544f 	.word	0x038a544f
 80093f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80093f8:	e058      	b.n	80094ac <UART_SetConfig+0x404>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <UART_SetConfig+0x358>
 80093fe:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009400:	4944      	ldr	r1, [pc, #272]	; (8009514 <UART_SetConfig+0x46c>)
 8009402:	428a      	cmp	r2, r1
 8009404:	f040 8159 	bne.w	80096ba <UART_SetConfig+0x612>
    switch (clocksource)
 8009408:	1e9a      	subs	r2, r3, #2
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	2a1e      	cmp	r2, #30
 800940e:	f200 8127 	bhi.w	8009660 <UART_SetConfig+0x5b8>
 8009412:	3b02      	subs	r3, #2
 8009414:	2b1e      	cmp	r3, #30
 8009416:	f200 8125 	bhi.w	8009664 <UART_SetConfig+0x5bc>
 800941a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800941e:	002d      	.short	0x002d
 8009420:	00320123 	.word	0x00320123
 8009424:	01230123 	.word	0x01230123
 8009428:	00370123 	.word	0x00370123
 800942c:	01230123 	.word	0x01230123
 8009430:	01230123 	.word	0x01230123
 8009434:	01230123 	.word	0x01230123
 8009438:	003c0123 	.word	0x003c0123
 800943c:	01230123 	.word	0x01230123
 8009440:	01230123 	.word	0x01230123
 8009444:	01230123 	.word	0x01230123
 8009448:	01230123 	.word	0x01230123
 800944c:	01230123 	.word	0x01230123
 8009450:	01230123 	.word	0x01230123
 8009454:	01230123 	.word	0x01230123
 8009458:	00740123 	.word	0x00740123
  UART_GETCLOCKSOURCE(huart, clocksource);
 800945c:	2300      	movs	r3, #0
 800945e:	e7cf      	b.n	8009400 <UART_SetConfig+0x358>
 8009460:	2300      	movs	r3, #0
 8009462:	e7cd      	b.n	8009400 <UART_SetConfig+0x358>
 8009464:	2300      	movs	r3, #0
 8009466:	e7cb      	b.n	8009400 <UART_SetConfig+0x358>
 8009468:	2301      	movs	r3, #1
 800946a:	e7c9      	b.n	8009400 <UART_SetConfig+0x358>
 800946c:	2300      	movs	r3, #0
 800946e:	e7c7      	b.n	8009400 <UART_SetConfig+0x358>
 8009470:	2300      	movs	r3, #0
 8009472:	e7c5      	b.n	8009400 <UART_SetConfig+0x358>
 8009474:	2302      	movs	r3, #2
 8009476:	e7c3      	b.n	8009400 <UART_SetConfig+0x358>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009478:	f7fd fed2 	bl	8007220 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800947c:	b9b0      	cbnz	r0, 80094ac <UART_SetConfig+0x404>
 800947e:	2000      	movs	r0, #0
 8009480:	e0fd      	b.n	800967e <UART_SetConfig+0x5d6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009482:	a803      	add	r0, sp, #12
 8009484:	f7fd fede 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009488:	9804      	ldr	r0, [sp, #16]
        break;
 800948a:	e7f7      	b.n	800947c <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800948c:	4668      	mov	r0, sp
 800948e:	f7fd ffd5 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009492:	9801      	ldr	r0, [sp, #4]
        break;
 8009494:	e7f2      	b.n	800947c <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009496:	4b1e      	ldr	r3, [pc, #120]	; (8009510 <UART_SetConfig+0x468>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f013 0f20 	tst.w	r3, #32
 800949e:	d034      	beq.n	800950a <UART_SetConfig+0x462>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094a0:	4b1b      	ldr	r3, [pc, #108]	; (8009510 <UART_SetConfig+0x468>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80094a8:	481b      	ldr	r0, [pc, #108]	; (8009518 <UART_SetConfig+0x470>)
 80094aa:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094ae:	4b1b      	ldr	r3, [pc, #108]	; (800951c <UART_SetConfig+0x474>)
 80094b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80094b4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094b8:	6865      	ldr	r5, [r4, #4]
 80094ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80094be:	4299      	cmp	r1, r3
 80094c0:	f200 80d2 	bhi.w	8009668 <UART_SetConfig+0x5c0>
 80094c4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80094c8:	f200 80d0 	bhi.w	800966c <UART_SetConfig+0x5c4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094cc:	2600      	movs	r6, #0
 80094ce:	4633      	mov	r3, r6
 80094d0:	4631      	mov	r1, r6
 80094d2:	f7f6 ff6d 	bl	80003b0 <__aeabi_uldivmod>
 80094d6:	0209      	lsls	r1, r1, #8
 80094d8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80094dc:	0200      	lsls	r0, r0, #8
 80094de:	086b      	lsrs	r3, r5, #1
 80094e0:	18c0      	adds	r0, r0, r3
 80094e2:	462a      	mov	r2, r5
 80094e4:	4633      	mov	r3, r6
 80094e6:	f141 0100 	adc.w	r1, r1, #0
 80094ea:	f7f6 ff61 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ee:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80094f2:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <UART_SetConfig+0x478>)
 80094f4:	429a      	cmp	r2, r3
 80094f6:	f200 80bb 	bhi.w	8009670 <UART_SetConfig+0x5c8>
          huart->Instance->BRR = usartdiv;
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	60d8      	str	r0, [r3, #12]
 80094fe:	4630      	mov	r0, r6
 8009500:	e0bd      	b.n	800967e <UART_SetConfig+0x5d6>
        pclk = (uint32_t) CSI_VALUE;
 8009502:	4808      	ldr	r0, [pc, #32]	; (8009524 <UART_SetConfig+0x47c>)
 8009504:	e7d2      	b.n	80094ac <UART_SetConfig+0x404>
    switch (clocksource)
 8009506:	4807      	ldr	r0, [pc, #28]	; (8009524 <UART_SetConfig+0x47c>)
 8009508:	e7d0      	b.n	80094ac <UART_SetConfig+0x404>
          pclk = (uint32_t) HSI_VALUE;
 800950a:	4803      	ldr	r0, [pc, #12]	; (8009518 <UART_SetConfig+0x470>)
 800950c:	e7ce      	b.n	80094ac <UART_SetConfig+0x404>
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
 8009514:	58000c00 	.word	0x58000c00
 8009518:	03d09000 	.word	0x03d09000
 800951c:	08011218 	.word	0x08011218
 8009520:	000ffcff 	.word	0x000ffcff
 8009524:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8009528:	2b20      	cmp	r3, #32
 800952a:	d815      	bhi.n	8009558 <UART_SetConfig+0x4b0>
 800952c:	2b20      	cmp	r3, #32
 800952e:	f200 80a1 	bhi.w	8009674 <UART_SetConfig+0x5cc>
 8009532:	e8df f003 	tbb	[pc, r3]
 8009536:	3731      	.short	0x3731
 8009538:	9f3a9f9f 	.word	0x9f3a9f9f
 800953c:	9f3f9f9f 	.word	0x9f3f9f9f
 8009540:	9f9f9f9f 	.word	0x9f9f9f9f
 8009544:	9f449f9f 	.word	0x9f449f9f
 8009548:	9f9f9f9f 	.word	0x9f9f9f9f
 800954c:	9f9f9f9f 	.word	0x9f9f9f9f
 8009550:	9f9f9f9f 	.word	0x9f9f9f9f
 8009554:	9f9f      	.short	0x9f9f
 8009556:	50          	.byte	0x50
 8009557:	00          	.byte	0x00
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d11b      	bne.n	8009594 <UART_SetConfig+0x4ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800955c:	6862      	ldr	r2, [r4, #4]
 800955e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009560:	4b59      	ldr	r3, [pc, #356]	; (80096c8 <UART_SetConfig+0x620>)
 8009562:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009566:	fbb0 f0f3 	udiv	r0, r0, r3
 800956a:	0853      	lsrs	r3, r2, #1
 800956c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009570:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009574:	f1a0 0210 	sub.w	r2, r0, #16
 8009578:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800957c:	429a      	cmp	r2, r3
 800957e:	d87b      	bhi.n	8009678 <UART_SetConfig+0x5d0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009580:	f020 030f 	bic.w	r3, r0, #15
 8009584:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8009586:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009588:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800958c:	4318      	orrs	r0, r3
 800958e:	60d0      	str	r0, [r2, #12]
 8009590:	2000      	movs	r0, #0
 8009592:	e074      	b.n	800967e <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009594:	2001      	movs	r0, #1
 8009596:	e072      	b.n	800967e <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009598:	f7fd f80a 	bl	80065b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800959c:	2800      	cmp	r0, #0
 800959e:	d1dd      	bne.n	800955c <UART_SetConfig+0x4b4>
 80095a0:	2000      	movs	r0, #0
 80095a2:	e06c      	b.n	800967e <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80095a4:	f7fd f816 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
        break;
 80095a8:	e7f8      	b.n	800959c <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095aa:	a803      	add	r0, sp, #12
 80095ac:	f7fd fe4a 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095b0:	9804      	ldr	r0, [sp, #16]
        break;
 80095b2:	e7f3      	b.n	800959c <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b4:	4668      	mov	r0, sp
 80095b6:	f7fd ff41 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095ba:	9801      	ldr	r0, [sp, #4]
        break;
 80095bc:	e7ee      	b.n	800959c <UART_SetConfig+0x4f4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095be:	4b43      	ldr	r3, [pc, #268]	; (80096cc <UART_SetConfig+0x624>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f013 0f20 	tst.w	r3, #32
 80095c6:	d008      	beq.n	80095da <UART_SetConfig+0x532>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095c8:	4b40      	ldr	r3, [pc, #256]	; (80096cc <UART_SetConfig+0x624>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80095d0:	483f      	ldr	r0, [pc, #252]	; (80096d0 <UART_SetConfig+0x628>)
 80095d2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80095d4:	e7c2      	b.n	800955c <UART_SetConfig+0x4b4>
        pclk = (uint32_t) CSI_VALUE;
 80095d6:	483f      	ldr	r0, [pc, #252]	; (80096d4 <UART_SetConfig+0x62c>)
 80095d8:	e7c0      	b.n	800955c <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 80095da:	483d      	ldr	r0, [pc, #244]	; (80096d0 <UART_SetConfig+0x628>)
 80095dc:	e7be      	b.n	800955c <UART_SetConfig+0x4b4>
    switch (clocksource)
 80095de:	2b40      	cmp	r3, #64	; 0x40
 80095e0:	d117      	bne.n	8009612 <UART_SetConfig+0x56a>
 80095e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095ea:	4a37      	ldr	r2, [pc, #220]	; (80096c8 <UART_SetConfig+0x620>)
 80095ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80095f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80095f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80095f8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095fc:	f1a0 0210 	sub.w	r2, r0, #16
 8009600:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009604:	429a      	cmp	r2, r3
 8009606:	d844      	bhi.n	8009692 <UART_SetConfig+0x5ea>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	b280      	uxth	r0, r0
 800960c:	60d8      	str	r0, [r3, #12]
 800960e:	2000      	movs	r0, #0
 8009610:	e035      	b.n	800967e <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009612:	2001      	movs	r0, #1
 8009614:	e033      	b.n	800967e <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009616:	f7fc ffcb 	bl	80065b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800961a:	2800      	cmp	r0, #0
 800961c:	d1e3      	bne.n	80095e6 <UART_SetConfig+0x53e>
 800961e:	2000      	movs	r0, #0
 8009620:	e02d      	b.n	800967e <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009622:	f7fc ffd7 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
        break;
 8009626:	e7f8      	b.n	800961a <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009628:	a803      	add	r0, sp, #12
 800962a:	f7fd fe0b 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800962e:	9804      	ldr	r0, [sp, #16]
        break;
 8009630:	e7f3      	b.n	800961a <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009632:	4668      	mov	r0, sp
 8009634:	f7fd ff02 	bl	800743c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009638:	9801      	ldr	r0, [sp, #4]
        break;
 800963a:	e7ee      	b.n	800961a <UART_SetConfig+0x572>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800963c:	4b23      	ldr	r3, [pc, #140]	; (80096cc <UART_SetConfig+0x624>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f013 0f20 	tst.w	r3, #32
 8009644:	d008      	beq.n	8009658 <UART_SetConfig+0x5b0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <UART_SetConfig+0x624>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800964e:	4820      	ldr	r0, [pc, #128]	; (80096d0 <UART_SetConfig+0x628>)
 8009650:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009652:	e7c8      	b.n	80095e6 <UART_SetConfig+0x53e>
        pclk = (uint32_t) CSI_VALUE;
 8009654:	481f      	ldr	r0, [pc, #124]	; (80096d4 <UART_SetConfig+0x62c>)
 8009656:	e7c6      	b.n	80095e6 <UART_SetConfig+0x53e>
          pclk = (uint32_t) HSI_VALUE;
 8009658:	481d      	ldr	r0, [pc, #116]	; (80096d0 <UART_SetConfig+0x628>)
 800965a:	e7c4      	b.n	80095e6 <UART_SetConfig+0x53e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800965c:	2001      	movs	r0, #1
 800965e:	e00e      	b.n	800967e <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009660:	2001      	movs	r0, #1
 8009662:	e00c      	b.n	800967e <UART_SetConfig+0x5d6>
 8009664:	2001      	movs	r0, #1
 8009666:	e00a      	b.n	800967e <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 8009668:	2001      	movs	r0, #1
 800966a:	e008      	b.n	800967e <UART_SetConfig+0x5d6>
 800966c:	2001      	movs	r0, #1
 800966e:	e006      	b.n	800967e <UART_SetConfig+0x5d6>
          ret = HAL_ERROR;
 8009670:	2001      	movs	r0, #1
 8009672:	e004      	b.n	800967e <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009674:	2001      	movs	r0, #1
 8009676:	e002      	b.n	800967e <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 8009678:	2001      	movs	r0, #1
 800967a:	e000      	b.n	800967e <UART_SetConfig+0x5d6>
    switch (clocksource)
 800967c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800967e:	2301      	movs	r3, #1
 8009680:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009684:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800968c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800968e:	b006      	add	sp, #24
 8009690:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8009692:	2001      	movs	r0, #1
 8009694:	e7f3      	b.n	800967e <UART_SetConfig+0x5d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009696:	2304      	movs	r3, #4
 8009698:	e58a      	b.n	80091b0 <UART_SetConfig+0x108>
 800969a:	2310      	movs	r3, #16
 800969c:	e588      	b.n	80091b0 <UART_SetConfig+0x108>
 800969e:	2304      	movs	r3, #4
 80096a0:	e586      	b.n	80091b0 <UART_SetConfig+0x108>
 80096a2:	2304      	movs	r3, #4
 80096a4:	e584      	b.n	80091b0 <UART_SetConfig+0x108>
 80096a6:	2304      	movs	r3, #4
 80096a8:	e582      	b.n	80091b0 <UART_SetConfig+0x108>
 80096aa:	2304      	movs	r3, #4
 80096ac:	e580      	b.n	80091b0 <UART_SetConfig+0x108>
 80096ae:	2304      	movs	r3, #4
 80096b0:	e57e      	b.n	80091b0 <UART_SetConfig+0x108>
 80096b2:	2304      	movs	r3, #4
 80096b4:	e57c      	b.n	80091b0 <UART_SetConfig+0x108>
 80096b6:	2304      	movs	r3, #4
 80096b8:	e57a      	b.n	80091b0 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ba:	69e2      	ldr	r2, [r4, #28]
 80096bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80096c0:	f47f ad7b 	bne.w	80091ba <UART_SetConfig+0x112>
 80096c4:	e732      	b.n	800952c <UART_SetConfig+0x484>
 80096c6:	bf00      	nop
 80096c8:	08011218 	.word	0x08011218
 80096cc:	58024400 	.word	0x58024400
 80096d0:	03d09000 	.word	0x03d09000
 80096d4:	003d0900 	.word	0x003d0900

080096d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80096da:	f013 0f01 	tst.w	r3, #1
 80096de:	d006      	beq.n	80096ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096e0:	6802      	ldr	r2, [r0, #0]
 80096e2:	6853      	ldr	r3, [r2, #4]
 80096e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80096ea:	430b      	orrs	r3, r1
 80096ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80096f0:	f013 0f02 	tst.w	r3, #2
 80096f4:	d006      	beq.n	8009704 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096f6:	6802      	ldr	r2, [r0, #0]
 80096f8:	6853      	ldr	r3, [r2, #4]
 80096fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009700:	430b      	orrs	r3, r1
 8009702:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009704:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009706:	f013 0f04 	tst.w	r3, #4
 800970a:	d006      	beq.n	800971a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800970c:	6802      	ldr	r2, [r0, #0]
 800970e:	6853      	ldr	r3, [r2, #4]
 8009710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009714:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009716:	430b      	orrs	r3, r1
 8009718:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800971a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800971c:	f013 0f08 	tst.w	r3, #8
 8009720:	d006      	beq.n	8009730 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009722:	6802      	ldr	r2, [r0, #0]
 8009724:	6853      	ldr	r3, [r2, #4]
 8009726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800972a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800972c:	430b      	orrs	r3, r1
 800972e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009730:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009732:	f013 0f10 	tst.w	r3, #16
 8009736:	d006      	beq.n	8009746 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009738:	6802      	ldr	r2, [r0, #0]
 800973a:	6893      	ldr	r3, [r2, #8]
 800973c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009740:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009742:	430b      	orrs	r3, r1
 8009744:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009746:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009748:	f013 0f20 	tst.w	r3, #32
 800974c:	d006      	beq.n	800975c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800974e:	6802      	ldr	r2, [r0, #0]
 8009750:	6893      	ldr	r3, [r2, #8]
 8009752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009756:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009758:	430b      	orrs	r3, r1
 800975a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800975c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800975e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009762:	d00a      	beq.n	800977a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009764:	6802      	ldr	r2, [r0, #0]
 8009766:	6853      	ldr	r3, [r2, #4]
 8009768:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800976c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800976e:	430b      	orrs	r3, r1
 8009770:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009772:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009778:	d00b      	beq.n	8009792 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800977a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800977c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009780:	d006      	beq.n	8009790 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009782:	6802      	ldr	r2, [r0, #0]
 8009784:	6853      	ldr	r3, [r2, #4]
 8009786:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800978a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800978c:	430b      	orrs	r3, r1
 800978e:	6053      	str	r3, [r2, #4]
}
 8009790:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009792:	6802      	ldr	r2, [r0, #0]
 8009794:	6853      	ldr	r3, [r2, #4]
 8009796:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800979a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800979c:	430b      	orrs	r3, r1
 800979e:	6053      	str	r3, [r2, #4]
 80097a0:	e7eb      	b.n	800977a <UART_AdvFeatureConfig+0xa2>

080097a2 <UART_WaitOnFlagUntilTimeout>:
{
 80097a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a6:	4680      	mov	r8, r0
 80097a8:	460e      	mov	r6, r1
 80097aa:	4615      	mov	r5, r2
 80097ac:	4699      	mov	r9, r3
 80097ae:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b0:	f8d8 2000 	ldr.w	r2, [r8]
 80097b4:	69d4      	ldr	r4, [r2, #28]
 80097b6:	ea36 0304 	bics.w	r3, r6, r4
 80097ba:	bf0c      	ite	eq
 80097bc:	f04f 0c01 	moveq.w	ip, #1
 80097c0:	f04f 0c00 	movne.w	ip, #0
 80097c4:	45ac      	cmp	ip, r5
 80097c6:	d15a      	bne.n	800987e <UART_WaitOnFlagUntilTimeout+0xdc>
    if (Timeout != HAL_MAX_DELAY)
 80097c8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80097cc:	d0f2      	beq.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ce:	f7f8 fd71 	bl	80022b4 <HAL_GetTick>
 80097d2:	eba0 0009 	sub.w	r0, r0, r9
 80097d6:	42b8      	cmp	r0, r7
 80097d8:	d830      	bhi.n	800983c <UART_WaitOnFlagUntilTimeout+0x9a>
 80097da:	b37f      	cbz	r7, 800983c <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097dc:	f8d8 3000 	ldr.w	r3, [r8]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	f012 0f04 	tst.w	r2, #4
 80097e6:	d0e3      	beq.n	80097b0 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097e8:	69da      	ldr	r2, [r3, #28]
 80097ea:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80097ee:	d0df      	beq.n	80097b0 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097f4:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097f6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	e852 3f00 	ldrex	r3, [r2]
 80097fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	e842 3100 	strex	r1, r3, [r2]
 8009806:	2900      	cmp	r1, #0
 8009808:	d1f5      	bne.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	f102 0308 	add.w	r3, r2, #8
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	3208      	adds	r2, #8
 800981c:	e842 3100 	strex	r1, r3, [r2]
 8009820:	2900      	cmp	r1, #0
 8009822:	d1f2      	bne.n	800980a <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8009824:	2320      	movs	r3, #32
 8009826:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800982a:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800982e:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8009832:	2300      	movs	r3, #0
 8009834:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8009838:	2003      	movs	r0, #3
 800983a:	e021      	b.n	8009880 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800983c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	e852 3f00 	ldrex	r3, [r2]
 8009844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	e842 3100 	strex	r1, r3, [r2]
 800984c:	2900      	cmp	r1, #0
 800984e:	d1f5      	bne.n	800983c <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009850:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	f102 0308 	add.w	r3, r2, #8
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	3208      	adds	r2, #8
 8009862:	e842 3100 	strex	r1, r3, [r2]
 8009866:	2900      	cmp	r1, #0
 8009868:	d1f2      	bne.n	8009850 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 800986a:	2320      	movs	r3, #32
 800986c:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009870:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8009874:	2300      	movs	r3, #0
 8009876:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800987a:	2003      	movs	r0, #3
 800987c:	e000      	b.n	8009880 <UART_WaitOnFlagUntilTimeout+0xde>
  return HAL_OK;
 800987e:	2000      	movs	r0, #0
}
 8009880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009884 <HAL_UART_Transmit>:
{
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800988c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009890:	2b20      	cmp	r3, #32
 8009892:	d15f      	bne.n	8009954 <HAL_UART_Transmit+0xd0>
 8009894:	4604      	mov	r4, r0
 8009896:	460d      	mov	r5, r1
 8009898:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800989a:	2900      	cmp	r1, #0
 800989c:	d05e      	beq.n	800995c <HAL_UART_Transmit+0xd8>
 800989e:	2a00      	cmp	r2, #0
 80098a0:	d05c      	beq.n	800995c <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 80098a2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d05a      	beq.n	8009960 <HAL_UART_Transmit+0xdc>
 80098aa:	2301      	movs	r3, #1
 80098ac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098b6:	2321      	movs	r3, #33	; 0x21
 80098b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 80098bc:	f7f8 fcfa 	bl	80022b4 <HAL_GetTick>
 80098c0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80098c2:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 80098c6:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d0:	d00d      	beq.n	80098ee <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 80098d2:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80098d6:	2300      	movs	r3, #0
 80098d8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80098dc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	b35b      	cbz	r3, 800993c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098e4:	f04f 0900 	mov.w	r9, #0
 80098e8:	f04f 0880 	mov.w	r8, #128	; 0x80
 80098ec:	e015      	b.n	800991a <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	b913      	cbnz	r3, 80098f8 <HAL_UART_Transmit+0x74>
      pdata16bits = (const uint16_t *) pData;
 80098f2:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80098f4:	2500      	movs	r5, #0
 80098f6:	e7ee      	b.n	80098d6 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80098f8:	f04f 0a00 	mov.w	sl, #0
 80098fc:	e7eb      	b.n	80098d6 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009904:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8009906:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800990a:	3a01      	subs	r2, #1
 800990c:	b292      	uxth	r2, r2
 800990e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009912:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8009916:	b29b      	uxth	r3, r3
 8009918:	b183      	cbz	r3, 800993c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800991a:	9600      	str	r6, [sp, #0]
 800991c:	463b      	mov	r3, r7
 800991e:	464a      	mov	r2, r9
 8009920:	4641      	mov	r1, r8
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff ff3d 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 8009928:	b9e0      	cbnz	r0, 8009964 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 800992a:	2d00      	cmp	r5, #0
 800992c:	d1e7      	bne.n	80098fe <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8009934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009938:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800993a:	e7e4      	b.n	8009906 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800993c:	9600      	str	r6, [sp, #0]
 800993e:	463b      	mov	r3, r7
 8009940:	2200      	movs	r2, #0
 8009942:	2140      	movs	r1, #64	; 0x40
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff ff2c 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 800994a:	b968      	cbnz	r0, 8009968 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 800994c:	2320      	movs	r3, #32
 800994e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8009952:	e000      	b.n	8009956 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;
 8009954:	2002      	movs	r0, #2
}
 8009956:	b002      	add	sp, #8
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800995c:	2001      	movs	r0, #1
 800995e:	e7fa      	b.n	8009956 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8009960:	2002      	movs	r0, #2
 8009962:	e7f8      	b.n	8009956 <HAL_UART_Transmit+0xd2>
        return HAL_TIMEOUT;
 8009964:	2003      	movs	r0, #3
 8009966:	e7f6      	b.n	8009956 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8009968:	2003      	movs	r0, #3
 800996a:	e7f4      	b.n	8009956 <HAL_UART_Transmit+0xd2>

0800996c <UART_CheckIdleState>:
{
 800996c:	b530      	push	{r4, r5, lr}
 800996e:	b083      	sub	sp, #12
 8009970:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
 8009974:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009978:	f7f8 fc9c 	bl	80022b4 <HAL_GetTick>
 800997c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800997e:	6822      	ldr	r2, [r4, #0]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	f012 0f08 	tst.w	r2, #8
 8009986:	d10f      	bne.n	80099a8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f013 0f04 	tst.w	r3, #4
 8009990:	d118      	bne.n	80099c4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8009992:	2320      	movs	r3, #32
 8009994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009998:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999c:	2000      	movs	r0, #0
 800999e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80099a0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80099a4:	b003      	add	sp, #12
 80099a6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	4603      	mov	r3, r0
 80099b0:	2200      	movs	r2, #0
 80099b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fef3 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d0e3      	beq.n	8009988 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80099c0:	2003      	movs	r0, #3
 80099c2:	e7ef      	b.n	80099a4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	462b      	mov	r3, r5
 80099cc:	2200      	movs	r2, #0
 80099ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff fee5 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d0da      	beq.n	8009992 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80099dc:	2003      	movs	r0, #3
 80099de:	e7e1      	b.n	80099a4 <UART_CheckIdleState+0x38>

080099e0 <HAL_UART_Init>:
  if (huart == NULL)
 80099e0:	b378      	cbz	r0, 8009a42 <HAL_UART_Init+0x62>
{
 80099e2:	b510      	push	{r4, lr}
 80099e4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80099e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80099ea:	b30b      	cbz	r3, 8009a30 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80099ec:	2324      	movs	r3, #36	; 0x24
 80099ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	6813      	ldr	r3, [r2, #0]
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff fb53 	bl	80090a8 <UART_SetConfig>
 8009a02:	2801      	cmp	r0, #1
 8009a04:	d013      	beq.n	8009a2e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a08:	b9bb      	cbnz	r3, 8009a3a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	6853      	ldr	r3, [r2, #4]
 8009a0e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009a12:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	6893      	ldr	r3, [r2, #8]
 8009a18:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009a1c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	6813      	ldr	r3, [r2, #0]
 8009a22:	f043 0301 	orr.w	r3, r3, #1
 8009a26:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff ff9f 	bl	800996c <UART_CheckIdleState>
}
 8009a2e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009a30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009a34:	f7f7 ffd2 	bl	80019dc <HAL_UART_MspInit>
 8009a38:	e7d8      	b.n	80099ec <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff fe4c 	bl	80096d8 <UART_AdvFeatureConfig>
 8009a40:	e7e3      	b.n	8009a0a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009a42:	2001      	movs	r0, #1
}
 8009a44:	4770      	bx	lr
	...

08009a48 <UART_Start_Receive_DMA>:
{
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8009a4e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009a50:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a5a:	2222      	movs	r2, #34	; 0x22
 8009a5c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009a60:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009a62:	b18a      	cbz	r2, 8009a88 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a64:	4922      	ldr	r1, [pc, #136]	; (8009af0 <UART_Start_Receive_DMA+0xa8>)
 8009a66:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a68:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009a6a:	4922      	ldr	r1, [pc, #136]	; (8009af4 <UART_Start_Receive_DMA+0xac>)
 8009a6c:	6411      	str	r1, [r2, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a6e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009a70:	4921      	ldr	r1, [pc, #132]	; (8009af8 <UART_Start_Receive_DMA+0xb0>)
 8009a72:	64d1      	str	r1, [r2, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8009a74:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009a76:	2100      	movs	r1, #0
 8009a78:	6511      	str	r1, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a7a:	6801      	ldr	r1, [r0, #0]
 8009a7c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009a7e:	3124      	adds	r1, #36	; 0x24
 8009a80:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009a82:	f7f9 fd97 	bl	80035b4 <HAL_DMA_Start_IT>
 8009a86:	bb38      	cbnz	r0, 8009ad8 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	b143      	cbz	r3, 8009aa4 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a92:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	e852 3f00 	ldrex	r3, [r2]
 8009a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	e842 3100 	strex	r1, r3, [r2]
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d1f6      	bne.n	8009a92 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	f102 0308 	add.w	r3, r2, #8
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	3208      	adds	r2, #8
 8009ab4:	e842 3100 	strex	r1, r3, [r2]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d1f3      	bne.n	8009aa4 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009abc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	f102 0308 	add.w	r3, r2, #8
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	3208      	adds	r2, #8
 8009acc:	e842 3100 	strex	r1, r3, [r2]
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	d1f3      	bne.n	8009abc <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 8009ad4:	2000      	movs	r0, #0
}
 8009ad6:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ad8:	2310      	movs	r3, #16
 8009ada:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7f3      	b.n	8009ad6 <UART_Start_Receive_DMA+0x8e>
 8009aee:	bf00      	nop
 8009af0:	0800901d 	.word	0x0800901d
 8009af4:	08009001 	.word	0x08009001
 8009af8:	08008b8b 	.word	0x08008b8b

08009afc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009afc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009afe:	b92b      	cbnz	r3, 8009b0c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b06:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8009b0a:	4770      	bx	lr
{
 8009b0c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b0e:	6803      	ldr	r3, [r0, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b12:	6899      	ldr	r1, [r3, #8]
 8009b14:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b16:	4d0a      	ldr	r5, [pc, #40]	; (8009b40 <UARTEx_SetNbDataToProcess+0x44>)
 8009b18:	5c6b      	ldrb	r3, [r5, r1]
 8009b1a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b1c:	4c09      	ldr	r4, [pc, #36]	; (8009b44 <UARTEx_SetNbDataToProcess+0x48>)
 8009b1e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b20:	fb93 f3f1 	sdiv	r3, r3, r1
 8009b24:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b28:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8009b2c:	5cab      	ldrb	r3, [r5, r2]
 8009b2e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b30:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b36:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8009b3a:	bc30      	pop	{r4, r5}
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	08011238 	.word	0x08011238
 8009b44:	08011230 	.word	0x08011230

08009b48 <HAL_UARTEx_WakeupCallback>:
}
 8009b48:	4770      	bx	lr

08009b4a <HAL_UARTEx_RxFifoFullCallback>:
}
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009b4c:	4770      	bx	lr

08009b4e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009b4e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d018      	beq.n	8009b88 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009b56:	2301      	movs	r3, #1
 8009b58:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009b5c:	2324      	movs	r3, #36	; 0x24
 8009b5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b66:	6819      	ldr	r1, [r3, #0]
 8009b68:	f021 0101 	bic.w	r1, r1, #1
 8009b6c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b76:	6801      	ldr	r1, [r0, #0]
 8009b78:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009b80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8009b84:	4618      	mov	r0, r3
 8009b86:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009b88:	2002      	movs	r0, #2
}
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009b8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b8e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d01d      	beq.n	8009bd2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009b9e:	2324      	movs	r3, #36	; 0x24
 8009ba0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ba4:	6803      	ldr	r3, [r0, #0]
 8009ba6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	f022 0201 	bic.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bb0:	6802      	ldr	r2, [r0, #0]
 8009bb2:	6893      	ldr	r3, [r2, #8]
 8009bb4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009bb8:	4319      	orrs	r1, r3
 8009bba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009bbc:	f7ff ff9e 	bl	8009afc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009bca:	2000      	movs	r0, #0
 8009bcc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009bd2:	2002      	movs	r0, #2
 8009bd4:	e7fc      	b.n	8009bd0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009bd6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009bd6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009bd8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d01d      	beq.n	8009c1c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009be0:	4604      	mov	r4, r0
 8009be2:	2301      	movs	r3, #1
 8009be4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009be8:	2324      	movs	r3, #36	; 0x24
 8009bea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bfa:	6802      	ldr	r2, [r0, #0]
 8009bfc:	6893      	ldr	r3, [r2, #8]
 8009bfe:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8009c02:	4319      	orrs	r1, r3
 8009c04:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009c06:	f7ff ff79 	bl	8009afc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	2320      	movs	r3, #32
 8009c10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009c14:	2000      	movs	r0, #0
 8009c16:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009c1c:	2002      	movs	r0, #2
 8009c1e:	e7fc      	b.n	8009c1a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08009c20 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c20:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d120      	bne.n	8009c6a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
{
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8009c2c:	b1f9      	cbz	r1, 8009c6e <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 8009c2e:	b1f2      	cbz	r2, 8009c6e <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
    __HAL_LOCK(huart);
 8009c30:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d01c      	beq.n	8009c72 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c3e:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009c40:	f7ff ff02 	bl	8009a48 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8009c44:	b9a0      	cbnz	r0, 8009c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d001      	beq.n	8009c50 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
        status = HAL_ERROR;
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	e00f      	b.n	8009c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	2210      	movs	r2, #16
 8009c54:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	e852 3f00 	ldrex	r3, [r2]
 8009c5c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	e842 3100 	strex	r1, r3, [r2]
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d1f6      	bne.n	8009c56 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8009c68:	e002      	b.n	8009c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
    return HAL_BUSY;
 8009c6a:	2002      	movs	r0, #2
}
 8009c6c:	4770      	bx	lr
      return HAL_ERROR;
 8009c6e:	2001      	movs	r0, #1
}
 8009c70:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 8009c72:	2002      	movs	r0, #2
 8009c74:	e7fc      	b.n	8009c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>

08009c76 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009c76:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c7c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c7e:	f001 fb15 	bl	800b2ac <xTaskGetSchedulerState>
 8009c82:	2801      	cmp	r0, #1
 8009c84:	d100      	bne.n	8009c88 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009c86:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8009c88:	f001 fef4 	bl	800ba74 <xPortSysTickHandler>
}
 8009c8c:	e7fb      	b.n	8009c86 <SysTick_Handler+0x10>
	...

08009c90 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c90:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c94:	b92b      	cbnz	r3, 8009ca2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <osKernelInitialize+0x20>)
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	b928      	cbnz	r0, 8009ca8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ca0:	4770      	bx	lr
    stat = osErrorISR;
 8009ca2:	f06f 0005 	mvn.w	r0, #5
 8009ca6:	4770      	bx	lr
    } else {
      stat = osError;
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	24000c24 	.word	0x24000c24

08009cb4 <osKernelStart>:
 8009cb4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cb8:	b973      	cbnz	r3, 8009cd8 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009cba:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <osKernelStart+0x30>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10d      	bne.n	8009cde <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8009cc2:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cc4:	2400      	movs	r4, #0
 8009cc6:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <osKernelStart+0x34>)
 8009cc8:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <osKernelStart+0x30>)
 8009ccc:	2202      	movs	r2, #2
 8009cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cd0:	f001 f828 	bl	800ad24 <vTaskStartScheduler>
      stat = osOK;
 8009cd4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009cd6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009cd8:	f06f 0005 	mvn.w	r0, #5
 8009cdc:	4770      	bx	lr
      stat = osError;
 8009cde:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009ce2:	4770      	bx	lr
 8009ce4:	24000c24 	.word	0x24000c24
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	9205      	str	r2, [sp, #20]
 8009cf6:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009cfa:	b320      	cbz	r0, 8009d46 <osThreadNew+0x5a>
 8009cfc:	bb1b      	cbnz	r3, 8009d46 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009cfe:	2c00      	cmp	r4, #0
 8009d00:	d02e      	beq.n	8009d60 <osThreadNew+0x74>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009d02:	69a3      	ldr	r3, [r4, #24]
 8009d04:	b12b      	cbz	r3, 8009d12 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8009d06:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	2b37      	cmp	r3, #55	; 0x37
 8009d0c:	d902      	bls.n	8009d14 <osThreadNew+0x28>
        return (NULL);
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e01a      	b.n	8009d48 <osThreadNew+0x5c>
 8009d12:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	f013 0f01 	tst.w	r3, #1
 8009d1a:	d130      	bne.n	8009d7e <osThreadNew+0x92>
      }

      if (attr->stack_size > 0U) {
 8009d1c:	6963      	ldr	r3, [r4, #20]
 8009d1e:	b1ab      	cbz	r3, 8009d4c <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d20:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8009d22:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d26:	68a6      	ldr	r6, [r4, #8]
 8009d28:	b196      	cbz	r6, 8009d50 <osThreadNew+0x64>
 8009d2a:	68e7      	ldr	r7, [r4, #12]
 8009d2c:	2fbb      	cmp	r7, #187	; 0xbb
 8009d2e:	d90a      	bls.n	8009d46 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d30:	6924      	ldr	r4, [r4, #16]
 8009d32:	b143      	cbz	r3, 8009d46 <osThreadNew+0x5a>
 8009d34:	b13c      	cbz	r4, 8009d46 <osThreadNew+0x5a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d36:	9602      	str	r6, [sp, #8]
 8009d38:	9401      	str	r4, [sp, #4]
 8009d3a:	9500      	str	r5, [sp, #0]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4661      	mov	r1, ip
 8009d40:	f000 ff26 	bl	800ab90 <xTaskCreateStatic>
 8009d44:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d46:	9805      	ldr	r0, [sp, #20]
}
 8009d48:	b007      	add	sp, #28
 8009d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8009d4c:	2280      	movs	r2, #128	; 0x80
 8009d4e:	e7e8      	b.n	8009d22 <osThreadNew+0x36>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d50:	68e3      	ldr	r3, [r4, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1f7      	bne.n	8009d46 <osThreadNew+0x5a>
      if (mem == 0) {
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f4      	bne.n	8009d46 <osThreadNew+0x5a>
 8009d5c:	4664      	mov	r4, ip
 8009d5e:	e001      	b.n	8009d64 <osThreadNew+0x78>
    prio  = (UBaseType_t)osPriorityNormal;
 8009d60:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8009d62:	2280      	movs	r2, #128	; 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d64:	ab05      	add	r3, sp, #20
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	9500      	str	r5, [sp, #0]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	b292      	uxth	r2, r2
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f000 ff49 	bl	800ac06 <xTaskCreate>
 8009d74:	2801      	cmp	r0, #1
 8009d76:	d0e6      	beq.n	8009d46 <osThreadNew+0x5a>
            hTask = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	e7e3      	b.n	8009d46 <osThreadNew+0x5a>
        return (NULL);
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e7e2      	b.n	8009d48 <osThreadNew+0x5c>

08009d82 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d82:	b508      	push	{r3, lr}
 8009d84:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d88:	b933      	cbnz	r3, 8009d98 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009d8a:	b908      	cbnz	r0, 8009d90 <osDelay+0xe>
    stat = osOK;
 8009d8c:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009d8e:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8009d90:	f001 f940 	bl	800b014 <vTaskDelay>
    stat = osOK;
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7fa      	b.n	8009d8e <osDelay+0xc>
    stat = osErrorISR;
 8009d98:	f06f 0005 	mvn.w	r0, #5
 8009d9c:	e7f7      	b.n	8009d8e <osDelay+0xc>
	...

08009da0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009da0:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <vApplicationGetIdleTaskMemory+0x10>)
 8009da2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009da4:	4b03      	ldr	r3, [pc, #12]	; (8009db4 <vApplicationGetIdleTaskMemory+0x14>)
 8009da6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	6013      	str	r3, [r2, #0]
}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	24000b68 	.word	0x24000b68
 8009db4:	24000968 	.word	0x24000968

08009db8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009db8:	4b03      	ldr	r3, [pc, #12]	; (8009dc8 <vApplicationGetTimerTaskMemory+0x10>)
 8009dba:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dbc:	4b03      	ldr	r3, [pc, #12]	; (8009dcc <vApplicationGetTimerTaskMemory+0x14>)
 8009dbe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc4:	6013      	str	r3, [r2, #0]
}
 8009dc6:	4770      	bx	lr
 8009dc8:	24001028 	.word	0x24001028
 8009dcc:	24000c28 	.word	0x24000c28

08009dd0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd0:	f100 0308 	add.w	r3, r0, #8
 8009dd4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ddc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dde:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009de4:	4770      	bx	lr

08009de6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dea:	4770      	bx	lr

08009dec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009df4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009df6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009df8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009dfa:	6803      	ldr	r3, [r0, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	6003      	str	r3, [r0, #0]
}
 8009e00:	4770      	bx	lr

08009e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e02:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e04:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e06:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009e0a:	d011      	beq.n	8009e30 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e0c:	f100 0308 	add.w	r3, r0, #8
 8009e10:	461c      	mov	r4, r3
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	42aa      	cmp	r2, r5
 8009e18:	d9fa      	bls.n	8009e10 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e1e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e20:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e22:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009e26:	6803      	ldr	r3, [r0, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	6003      	str	r3, [r0, #0]
}
 8009e2c:	bc30      	pop	{r4, r5}
 8009e2e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e30:	6904      	ldr	r4, [r0, #16]
 8009e32:	e7f2      	b.n	8009e1a <vListInsert+0x18>

08009e34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e36:	6841      	ldr	r1, [r0, #4]
 8009e38:	6882      	ldr	r2, [r0, #8]
 8009e3a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e3c:	6841      	ldr	r1, [r0, #4]
 8009e3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	4282      	cmp	r2, r0
 8009e44:	d006      	beq.n	8009e54 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e46:	2200      	movs	r2, #0
 8009e48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	3a01      	subs	r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e50:	6818      	ldr	r0, [r3, #0]
}
 8009e52:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e54:	6882      	ldr	r2, [r0, #8]
 8009e56:	605a      	str	r2, [r3, #4]
 8009e58:	e7f5      	b.n	8009e46 <uxListRemove+0x12>

08009e5a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e5e:	f001 fd99 	bl	800b994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e62:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009e64:	f001 fdb8 	bl	800b9d8 <vPortExitCritical>

	return xReturn;
}
 8009e68:	fab4 f084 	clz	r0, r4
 8009e6c:	0940      	lsrs	r0, r0, #5
 8009e6e:	bd10      	pop	{r4, pc}

08009e70 <prvCopyDataToQueue>:
{
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4604      	mov	r4, r0
 8009e74:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e76:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e78:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009e7a:	b95a      	cbnz	r2, 8009e94 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e7c:	6803      	ldr	r3, [r0, #0]
 8009e7e:	b11b      	cbz	r3, 8009e88 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009e80:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e82:	3601      	adds	r6, #1
 8009e84:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e88:	6880      	ldr	r0, [r0, #8]
 8009e8a:	f001 fa69 	bl	800b360 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	e7f6      	b.n	8009e82 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009e94:	b96d      	cbnz	r5, 8009eb2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e96:	6840      	ldr	r0, [r0, #4]
 8009e98:	f004 fd3a 	bl	800e910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009ea0:	4413      	add	r3, r2
 8009ea2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ea4:	68a2      	ldr	r2, [r4, #8]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d319      	bcc.n	8009ede <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009eae:	4628      	mov	r0, r5
 8009eb0:	e7e7      	b.n	8009e82 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009eb2:	68c0      	ldr	r0, [r0, #12]
 8009eb4:	f004 fd2c 	bl	800e910 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009eb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009eba:	4251      	negs	r1, r2
 8009ebc:	68e3      	ldr	r3, [r4, #12]
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ec2:	6822      	ldr	r2, [r4, #0]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d202      	bcs.n	8009ece <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	440b      	add	r3, r1
 8009ecc:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ece:	b10e      	cbz	r6, 8009ed4 <prvCopyDataToQueue+0x64>
 8009ed0:	2d02      	cmp	r5, #2
 8009ed2:	d001      	beq.n	8009ed8 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e7d4      	b.n	8009e82 <prvCopyDataToQueue+0x12>
				--uxMessagesWaiting;
 8009ed8:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009eda:	2000      	movs	r0, #0
 8009edc:	e7d1      	b.n	8009e82 <prvCopyDataToQueue+0x12>
 8009ede:	4628      	mov	r0, r5
 8009ee0:	e7cf      	b.n	8009e82 <prvCopyDataToQueue+0x12>

08009ee2 <prvCopyDataFromQueue>:
{
 8009ee2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ee4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009ee6:	b16a      	cbz	r2, 8009f04 <prvCopyDataFromQueue+0x22>
{
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eec:	68d9      	ldr	r1, [r3, #12]
 8009eee:	4411      	add	r1, r2
 8009ef0:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ef2:	689c      	ldr	r4, [r3, #8]
 8009ef4:	42a1      	cmp	r1, r4
 8009ef6:	d301      	bcc.n	8009efc <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ef8:	6819      	ldr	r1, [r3, #0]
 8009efa:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009efc:	68d9      	ldr	r1, [r3, #12]
 8009efe:	f004 fd07 	bl	800e910 <memcpy>
}
 8009f02:	bd10      	pop	{r4, pc}
 8009f04:	4770      	bx	lr

08009f06 <prvUnlockQueue>:
{
 8009f06:	b570      	push	{r4, r5, r6, lr}
 8009f08:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009f0a:	f001 fd43 	bl	800b994 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009f0e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8009f12:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	dd0f      	ble.n	8009f38 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f18:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8009f1c:	e002      	b.n	8009f24 <prvUnlockQueue+0x1e>
			--cTxLock;
 8009f1e:	3c01      	subs	r4, #1
 8009f20:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f22:	b14c      	cbz	r4, 8009f38 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f26:	b13b      	cbz	r3, 8009f38 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f001 f925 	bl	800b178 <xTaskRemoveFromEventList>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d0f5      	beq.n	8009f1e <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8009f32:	f001 f9b5 	bl	800b2a0 <vTaskMissedYield>
 8009f36:	e7f2      	b.n	8009f1e <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8009f38:	23ff      	movs	r3, #255	; 0xff
 8009f3a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009f3e:	f001 fd4b 	bl	800b9d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009f42:	f001 fd27 	bl	800b994 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009f46:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8009f4a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	dd0f      	ble.n	8009f70 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f50:	f105 0610 	add.w	r6, r5, #16
 8009f54:	e002      	b.n	8009f5c <prvUnlockQueue+0x56>
				--cRxLock;
 8009f56:	3c01      	subs	r4, #1
 8009f58:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f5a:	b14c      	cbz	r4, 8009f70 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	b13b      	cbz	r3, 8009f70 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f60:	4630      	mov	r0, r6
 8009f62:	f001 f909 	bl	800b178 <xTaskRemoveFromEventList>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0f5      	beq.n	8009f56 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8009f6a:	f001 f999 	bl	800b2a0 <vTaskMissedYield>
 8009f6e:	e7f2      	b.n	8009f56 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8009f70:	23ff      	movs	r3, #255	; 0xff
 8009f72:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009f76:	f001 fd2f 	bl	800b9d8 <vPortExitCritical>
}
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}

08009f7c <xQueueGenericReset>:
{
 8009f7c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009f7e:	b1e0      	cbz	r0, 8009fba <xQueueGenericReset+0x3e>
 8009f80:	460d      	mov	r5, r1
 8009f82:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009f84:	f001 fd06 	bl	800b994 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f88:	6822      	ldr	r2, [r4, #0]
 8009f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f8e:	fb01 f303 	mul.w	r3, r1, r3
 8009f92:	18d0      	adds	r0, r2, r3
 8009f94:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f96:	2000      	movs	r0, #0
 8009f98:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f9a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f9c:	1a5b      	subs	r3, r3, r1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fa2:	23ff      	movs	r3, #255	; 0xff
 8009fa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009fac:	b9fd      	cbnz	r5, 8009fee <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	b963      	cbnz	r3, 8009fcc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009fb2:	f001 fd11 	bl	800b9d8 <vPortExitCritical>
}
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009fca:	e7fe      	b.n	8009fca <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fcc:	f104 0010 	add.w	r0, r4, #16
 8009fd0:	f001 f8d2 	bl	800b178 <xTaskRemoveFromEventList>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0ec      	beq.n	8009fb2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	e7e1      	b.n	8009fb2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fee:	f104 0010 	add.w	r0, r4, #16
 8009ff2:	f7ff feed 	bl	8009dd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ff6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ffa:	f7ff fee9 	bl	8009dd0 <vListInitialise>
 8009ffe:	e7d8      	b.n	8009fb2 <xQueueGenericReset+0x36>

0800a000 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a000:	b940      	cbnz	r0, 800a014 <xQueueGenericCreateStatic+0x14>
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	e7fe      	b.n	800a012 <xQueueGenericCreateStatic+0x12>
	{
 800a014:	b510      	push	{r4, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	461c      	mov	r4, r3
 800a01a:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 800a01c:	b154      	cbz	r4, 800a034 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a01e:	b192      	cbz	r2, 800a046 <xQueueGenericCreateStatic+0x46>
 800a020:	b989      	cbnz	r1, 800a046 <xQueueGenericCreateStatic+0x46>
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	e7fe      	b.n	800a032 <xQueueGenericCreateStatic+0x32>
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800a044:	e7fe      	b.n	800a044 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a046:	b94a      	cbnz	r2, 800a05c <xQueueGenericCreateStatic+0x5c>
 800a048:	b141      	cbz	r1, 800a05c <xQueueGenericCreateStatic+0x5c>
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	e7fe      	b.n	800a05a <xQueueGenericCreateStatic+0x5a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a05c:	2050      	movs	r0, #80	; 0x50
 800a05e:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	2850      	cmp	r0, #80	; 0x50
 800a064:	d008      	beq.n	800a078 <xQueueGenericCreateStatic+0x78>
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	e7fe      	b.n	800a076 <xQueueGenericCreateStatic+0x76>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a078:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a07a:	2001      	movs	r0, #1
 800a07c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a080:	2900      	cmp	r1, #0
 800a082:	bf08      	it	eq
 800a084:	4622      	moveq	r2, r4
 800a086:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a088:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a08a:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a08c:	4601      	mov	r1, r0
 800a08e:	4620      	mov	r0, r4
 800a090:	f7ff ff74 	bl	8009f7c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a094:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a098:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800a09c:	4620      	mov	r0, r4
 800a09e:	b002      	add	sp, #8
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <xQueueGenericCreate>:
	{
 800a0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0a4:	b940      	cbnz	r0, 800a0b8 <xQueueGenericCreate+0x16>
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	e7fe      	b.n	800a0b6 <xQueueGenericCreate+0x14>
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0be:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0c2:	3050      	adds	r0, #80	; 0x50
 800a0c4:	f001 fdec 	bl	800bca0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b170      	cbz	r0, 800a0ea <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0d2:	b165      	cbz	r5, 800a0ee <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0d8:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a0da:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0dc:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ff4b 	bl	8009f7c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a0e6:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	e7f2      	b.n	800a0d8 <xQueueGenericCreate+0x36>

0800a0f2 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800a0f2:	b940      	cbnz	r0, 800a106 <xQueueCreateCountingSemaphore+0x14>
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	e7fe      	b.n	800a104 <xQueueCreateCountingSemaphore+0x12>
	{
 800a106:	b510      	push	{r4, lr}
 800a108:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800a10a:	4288      	cmp	r0, r1
 800a10c:	d208      	bcs.n	800a120 <xQueueCreateCountingSemaphore+0x2e>
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	e7fe      	b.n	800a11e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a120:	2202      	movs	r2, #2
 800a122:	2100      	movs	r1, #0
 800a124:	f7ff ffbd 	bl	800a0a2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a128:	b100      	cbz	r0, 800a12c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a12a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a12c:	bd10      	pop	{r4, pc}

0800a12e <xQueueGenericSend>:
{
 800a12e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a132:	b085      	sub	sp, #20
 800a134:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a136:	b188      	cbz	r0, 800a15c <xQueueGenericSend+0x2e>
 800a138:	460e      	mov	r6, r1
 800a13a:	461d      	mov	r5, r3
 800a13c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a13e:	b1b1      	cbz	r1, 800a16e <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a140:	2d02      	cmp	r5, #2
 800a142:	d120      	bne.n	800a186 <xQueueGenericSend+0x58>
 800a144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d01d      	beq.n	800a186 <xQueueGenericSend+0x58>
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	e7fe      	b.n	800a15a <xQueueGenericSend+0x2c>
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a16c:	e7fe      	b.n	800a16c <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a16e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0e5      	beq.n	800a140 <xQueueGenericSend+0x12>
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	e7fe      	b.n	800a184 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a186:	f001 f891 	bl	800b2ac <xTaskGetSchedulerState>
 800a18a:	b950      	cbnz	r0, 800a1a2 <xQueueGenericSend+0x74>
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	b163      	cbz	r3, 800a1aa <xQueueGenericSend+0x7c>
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericSend+0x72>
 800a1a2:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800a1a6:	2700      	movs	r7, #0
 800a1a8:	e040      	b.n	800a22c <xQueueGenericSend+0xfe>
 800a1aa:	f04f 0800 	mov.w	r8, #0
 800a1ae:	e7fa      	b.n	800a1a6 <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7ff fe5b 	bl	8009e70 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1bc:	b983      	cbnz	r3, 800a1e0 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 800a1be:	b148      	cbz	r0, 800a1d4 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 800a1c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a1d4:	f001 fc00 	bl	800b9d8 <vPortExitCritical>
				return pdPASS;
 800a1d8:	2001      	movs	r0, #1
}
 800a1da:	b005      	add	sp, #20
 800a1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1e4:	f000 ffc8 	bl	800b178 <xTaskRemoveFromEventList>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d0f3      	beq.n	800a1d4 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 800a1ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	e7e8      	b.n	800a1d4 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 800a202:	f001 fbe9 	bl	800b9d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800a206:	2000      	movs	r0, #0
 800a208:	e7e7      	b.n	800a1da <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a20a:	a802      	add	r0, sp, #8
 800a20c:	f000 fffa 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a210:	e01a      	b.n	800a248 <xQueueGenericSend+0x11a>
		prvLockQueue( pxQueue );
 800a212:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a216:	e023      	b.n	800a260 <xQueueGenericSend+0x132>
 800a218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a21c:	e026      	b.n	800a26c <xQueueGenericSend+0x13e>
				prvUnlockQueue( pxQueue );
 800a21e:	4620      	mov	r0, r4
 800a220:	f7ff fe71 	bl	8009f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a224:	f000 fe74 	bl	800af10 <xTaskResumeAll>
 800a228:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800a22c:	f001 fbb2 	bl	800b994 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a230:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a232:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a234:	429a      	cmp	r2, r3
 800a236:	d3bb      	bcc.n	800a1b0 <xQueueGenericSend+0x82>
 800a238:	2d02      	cmp	r5, #2
 800a23a:	d0b9      	beq.n	800a1b0 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	9b01      	ldr	r3, [sp, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0df      	beq.n	800a202 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 800a242:	f1b8 0f00 	cmp.w	r8, #0
 800a246:	d0e0      	beq.n	800a20a <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800a248:	f001 fbc6 	bl	800b9d8 <vPortExitCritical>
		vTaskSuspendAll();
 800a24c:	f000 fdb8 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a250:	f001 fba0 	bl	800b994 <vPortEnterCritical>
 800a254:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800a258:	b252      	sxtb	r2, r2
 800a25a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a25e:	d0d8      	beq.n	800a212 <xQueueGenericSend+0xe4>
 800a260:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800a264:	b252      	sxtb	r2, r2
 800a266:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a26a:	d0d5      	beq.n	800a218 <xQueueGenericSend+0xea>
 800a26c:	f001 fbb4 	bl	800b9d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a270:	a901      	add	r1, sp, #4
 800a272:	a802      	add	r0, sp, #8
 800a274:	f000 ffd2 	bl	800b21c <xTaskCheckForTimeOut>
 800a278:	bb00      	cbnz	r0, 800a2bc <xQueueGenericSend+0x18e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a27a:	f001 fb8b 	bl	800b994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a27e:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800a282:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a286:	f001 fba7 	bl	800b9d8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a28a:	45c1      	cmp	r9, r8
 800a28c:	d1c7      	bne.n	800a21e <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a28e:	9901      	ldr	r1, [sp, #4]
 800a290:	f104 0010 	add.w	r0, r4, #16
 800a294:	f000 ff3a 	bl	800b10c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff fe34 	bl	8009f06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a29e:	f000 fe37 	bl	800af10 <xTaskResumeAll>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1c0      	bne.n	800a228 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800a2a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	e7b5      	b.n	800a228 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff fe22 	bl	8009f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2c2:	f000 fe25 	bl	800af10 <xTaskResumeAll>
			return errQUEUE_FULL;
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	e787      	b.n	800a1da <xQueueGenericSend+0xac>

0800a2ca <xQueueGenericSendFromISR>:
{
 800a2ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a2ce:	b190      	cbz	r0, 800a2f6 <xQueueGenericSendFromISR+0x2c>
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	4616      	mov	r6, r2
 800a2d4:	461c      	mov	r4, r3
 800a2d6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2d8:	b1b1      	cbz	r1, 800a308 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2da:	2c02      	cmp	r4, #2
 800a2dc:	d120      	bne.n	800a320 <xQueueGenericSendFromISR+0x56>
 800a2de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d01d      	beq.n	800a320 <xQueueGenericSendFromISR+0x56>
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSendFromISR+0x2a>
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a306:	e7fe      	b.n	800a306 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a308:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0e5      	beq.n	800a2da <xQueueGenericSendFromISR+0x10>
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	e7fe      	b.n	800a31e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a320:	f001 fc60 	bl	800bbe4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a324:	f3ef 8911 	mrs	r9, BASEPRI
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a338:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a33a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d306      	bcc.n	800a34e <xQueueGenericSendFromISR+0x84>
 800a340:	2c02      	cmp	r4, #2
 800a342:	d004      	beq.n	800a34e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800a344:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a346:	f389 8811 	msr	BASEPRI, r9
}
 800a34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800a34e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800a352:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a356:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a358:	4622      	mov	r2, r4
 800a35a:	4639      	mov	r1, r7
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7ff fd87 	bl	8009e70 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a362:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a366:	d006      	beq.n	800a376 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a368:	f108 0301 	add.w	r3, r8, #1
 800a36c:	b25b      	sxtb	r3, r3
 800a36e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800a372:	2001      	movs	r0, #1
 800a374:	e7e7      	b.n	800a346 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a378:	b90b      	cbnz	r3, 800a37e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800a37a:	2001      	movs	r0, #1
 800a37c:	e7e3      	b.n	800a346 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a37e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a382:	f000 fef9 	bl	800b178 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a386:	b11e      	cbz	r6, 800a390 <xQueueGenericSendFromISR+0xc6>
 800a388:	b110      	cbz	r0, 800a390 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a38a:	2001      	movs	r0, #1
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	e7da      	b.n	800a346 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800a390:	2001      	movs	r0, #1
 800a392:	e7d8      	b.n	800a346 <xQueueGenericSendFromISR+0x7c>

0800a394 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800a394:	b168      	cbz	r0, 800a3b2 <xQueueGiveFromISR+0x1e>
{
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	460c      	mov	r4, r1
 800a39a:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a39c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a39e:	b18b      	cbz	r3, 800a3c4 <xQueueGiveFromISR+0x30>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueGiveFromISR+0x1c>
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a3c2:	e7fe      	b.n	800a3c2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3c4:	6803      	ldr	r3, [r0, #0]
 800a3c6:	b1eb      	cbz	r3, 800a404 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3c8:	f001 fc0c 	bl	800bbe4 <vPortValidateInterruptPriority>
	__asm volatile
 800a3cc:	f3ef 8611 	mrs	r6, BASEPRI
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e0:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a3e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d926      	bls.n	800a436 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3e8:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800a3ec:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d011      	beq.n	800a41c <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800a400:	2001      	movs	r0, #1
 800a402:	e019      	b.n	800a438 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a404:	6883      	ldr	r3, [r0, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0de      	beq.n	800a3c8 <xQueueGiveFromISR+0x34>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	e7fe      	b.n	800a41a <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a41c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a41e:	b90b      	cbnz	r3, 800a424 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800a420:	2001      	movs	r0, #1
 800a422:	e009      	b.n	800a438 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a424:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a428:	f000 fea6 	bl	800b178 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a42c:	b13c      	cbz	r4, 800a43e <xQueueGiveFromISR+0xaa>
 800a42e:	b130      	cbz	r0, 800a43e <xQueueGiveFromISR+0xaa>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a430:	2001      	movs	r0, #1
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	e000      	b.n	800a438 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800a436:	2000      	movs	r0, #0
	__asm volatile
 800a438:	f386 8811 	msr	BASEPRI, r6
}
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800a43e:	2001      	movs	r0, #1
 800a440:	e7fa      	b.n	800a438 <xQueueGiveFromISR+0xa4>

0800a442 <xQueueReceive>:
{
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a44a:	b180      	cbz	r0, 800a46e <xQueueReceive+0x2c>
 800a44c:	460e      	mov	r6, r1
 800a44e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a450:	b1b1      	cbz	r1, 800a480 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a452:	f000 ff2b 	bl	800b2ac <xTaskGetSchedulerState>
 800a456:	b9f8      	cbnz	r0, 800a498 <xQueueReceive+0x56>
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	b30b      	cbz	r3, 800a4a0 <xQueueReceive+0x5e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	e7fe      	b.n	800a46c <xQueueReceive+0x2a>
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a47e:	e7fe      	b.n	800a47e <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a480:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0e5      	beq.n	800a452 <xQueueReceive+0x10>
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	e7fe      	b.n	800a496 <xQueueReceive+0x54>
 800a498:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800a49c:	2700      	movs	r7, #0
 800a49e:	e041      	b.n	800a524 <xQueueReceive+0xe2>
 800a4a0:	f04f 0800 	mov.w	r8, #0
 800a4a4:	e7fa      	b.n	800a49c <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff fd1a 	bl	8009ee2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ae:	3d01      	subs	r5, #1
 800a4b0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	b92b      	cbnz	r3, 800a4c2 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 800a4b6:	f001 fa8f 	bl	800b9d8 <vPortExitCritical>
				return pdPASS;
 800a4ba:	2001      	movs	r0, #1
}
 800a4bc:	b004      	add	sp, #16
 800a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c2:	f104 0010 	add.w	r0, r4, #16
 800a4c6:	f000 fe57 	bl	800b178 <xTaskRemoveFromEventList>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d0f3      	beq.n	800a4b6 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800a4ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	e7e8      	b.n	800a4b6 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800a4e4:	f001 fa78 	bl	800b9d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e7e7      	b.n	800a4bc <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ec:	a802      	add	r0, sp, #8
 800a4ee:	f000 fe89 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4f2:	e022      	b.n	800a53a <xQueueReceive+0xf8>
		prvLockQueue( pxQueue );
 800a4f4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a4f8:	e02b      	b.n	800a552 <xQueueReceive+0x110>
 800a4fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4fe:	e02e      	b.n	800a55e <xQueueReceive+0x11c>
				prvUnlockQueue( pxQueue );
 800a500:	4620      	mov	r0, r4
 800a502:	f7ff fd00 	bl	8009f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a506:	f000 fd03 	bl	800af10 <xTaskResumeAll>
 800a50a:	e009      	b.n	800a520 <xQueueReceive+0xde>
			prvUnlockQueue( pxQueue );
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7ff fcfa 	bl	8009f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a512:	f000 fcfd 	bl	800af10 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff fc9f 	bl	8009e5a <prvIsQueueEmpty>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d142      	bne.n	800a5a6 <xQueueReceive+0x164>
 800a520:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800a524:	f001 fa36 	bl	800b994 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a528:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	d1bb      	bne.n	800a4a6 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0d7      	beq.n	800a4e4 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800a534:	f1b8 0f00 	cmp.w	r8, #0
 800a538:	d0d8      	beq.n	800a4ec <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 800a53a:	f001 fa4d 	bl	800b9d8 <vPortExitCritical>
		vTaskSuspendAll();
 800a53e:	f000 fc3f 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a542:	f001 fa27 	bl	800b994 <vPortEnterCritical>
 800a546:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a54a:	b25b      	sxtb	r3, r3
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d0d0      	beq.n	800a4f4 <xQueueReceive+0xb2>
 800a552:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a556:	b25b      	sxtb	r3, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d0cd      	beq.n	800a4fa <xQueueReceive+0xb8>
 800a55e:	f001 fa3b 	bl	800b9d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a562:	a901      	add	r1, sp, #4
 800a564:	a802      	add	r0, sp, #8
 800a566:	f000 fe59 	bl	800b21c <xTaskCheckForTimeOut>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1ce      	bne.n	800a50c <xQueueReceive+0xca>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff fc73 	bl	8009e5a <prvIsQueueEmpty>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0c3      	beq.n	800a500 <xQueueReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a578:	9901      	ldr	r1, [sp, #4]
 800a57a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a57e:	f000 fdc5 	bl	800b10c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff fcbf 	bl	8009f06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a588:	f000 fcc2 	bl	800af10 <xTaskResumeAll>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1c7      	bne.n	800a520 <xQueueReceive+0xde>
					portYIELD_WITHIN_API();
 800a590:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a598:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	e7bc      	b.n	800a520 <xQueueReceive+0xde>
				return errQUEUE_EMPTY;
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e788      	b.n	800a4bc <xQueueReceive+0x7a>

0800a5aa <xQueueSemaphoreTake>:
{
 800a5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a5b0:	b158      	cbz	r0, 800a5ca <xQueueSemaphoreTake+0x20>
 800a5b2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a5b6:	b18b      	cbz	r3, 800a5dc <xQueueSemaphoreTake+0x32>
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	e7fe      	b.n	800a5c8 <xQueueSemaphoreTake+0x1e>
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a5da:	e7fe      	b.n	800a5da <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5dc:	f000 fe66 	bl	800b2ac <xTaskGetSchedulerState>
 800a5e0:	b950      	cbnz	r0, 800a5f8 <xQueueSemaphoreTake+0x4e>
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	b163      	cbz	r3, 800a600 <xQueueSemaphoreTake+0x56>
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	e7fe      	b.n	800a5f6 <xQueueSemaphoreTake+0x4c>
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	e054      	b.n	800a6aa <xQueueSemaphoreTake+0x100>
 800a600:	2600      	movs	r6, #0
 800a602:	4637      	mov	r7, r6
 800a604:	e7fa      	b.n	800a5fc <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a606:	3b01      	subs	r3, #1
 800a608:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	b13b      	cbz	r3, 800a61e <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b94b      	cbnz	r3, 800a626 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 800a612:	f001 f9e1 	bl	800b9d8 <vPortExitCritical>
				return pdPASS;
 800a616:	2601      	movs	r6, #1
}
 800a618:	4630      	mov	r0, r6
 800a61a:	b005      	add	sp, #20
 800a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a61e:	f000 ff35 	bl	800b48c <pvTaskIncrementMutexHeldCount>
 800a622:	60a0      	str	r0, [r4, #8]
 800a624:	e7f3      	b.n	800a60e <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a626:	f104 0010 	add.w	r0, r4, #16
 800a62a:	f000 fda5 	bl	800b178 <xTaskRemoveFromEventList>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d0ef      	beq.n	800a612 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800a632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	e7e4      	b.n	800a612 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a648:	b146      	cbz	r6, 800a65c <xQueueSemaphoreTake+0xb2>
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	e7fe      	b.n	800a65a <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 800a65c:	f001 f9bc 	bl	800b9d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a660:	e7da      	b.n	800a618 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a662:	a802      	add	r0, sp, #8
 800a664:	f000 fdce 	bl	800b204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a668:	e029      	b.n	800a6be <xQueueSemaphoreTake+0x114>
		prvLockQueue( pxQueue );
 800a66a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 800a66e:	e032      	b.n	800a6d6 <xQueueSemaphoreTake+0x12c>
 800a670:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a674:	e035      	b.n	800a6e2 <xQueueSemaphoreTake+0x138>
						taskENTER_CRITICAL();
 800a676:	f001 f98d 	bl	800b994 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a67a:	68a0      	ldr	r0, [r4, #8]
 800a67c:	f000 fe26 	bl	800b2cc <xTaskPriorityInherit>
 800a680:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800a682:	f001 f9a9 	bl	800b9d8 <vPortExitCritical>
 800a686:	e03c      	b.n	800a702 <xQueueSemaphoreTake+0x158>
				prvUnlockQueue( pxQueue );
 800a688:	4620      	mov	r0, r4
 800a68a:	f7ff fc3c 	bl	8009f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a68e:	f000 fc3f 	bl	800af10 <xTaskResumeAll>
 800a692:	e009      	b.n	800a6a8 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800a694:	4620      	mov	r0, r4
 800a696:	f7ff fc36 	bl	8009f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a69a:	f000 fc39 	bl	800af10 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff fbdb 	bl	8009e5a <prvIsQueueEmpty>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d143      	bne.n	800a730 <xQueueSemaphoreTake+0x186>
 800a6a8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800a6aa:	f001 f973 	bl	800b994 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1a8      	bne.n	800a606 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6b4:	9b01      	ldr	r3, [sp, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0c6      	beq.n	800a648 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800a6ba:	2f00      	cmp	r7, #0
 800a6bc:	d0d1      	beq.n	800a662 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 800a6be:	f001 f98b 	bl	800b9d8 <vPortExitCritical>
		vTaskSuspendAll();
 800a6c2:	f000 fb7d 	bl	800adc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6c6:	f001 f965 	bl	800b994 <vPortEnterCritical>
 800a6ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d0c9      	beq.n	800a66a <xQueueSemaphoreTake+0xc0>
 800a6d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a6da:	b25b      	sxtb	r3, r3
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d0c6      	beq.n	800a670 <xQueueSemaphoreTake+0xc6>
 800a6e2:	f001 f979 	bl	800b9d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6e6:	a901      	add	r1, sp, #4
 800a6e8:	a802      	add	r0, sp, #8
 800a6ea:	f000 fd97 	bl	800b21c <xTaskCheckForTimeOut>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1d0      	bne.n	800a694 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff fbb1 	bl	8009e5a <prvIsQueueEmpty>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0c5      	beq.n	800a688 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0b9      	beq.n	800a676 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a702:	9901      	ldr	r1, [sp, #4]
 800a704:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a708:	f000 fd00 	bl	800b10c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff fbfa 	bl	8009f06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a712:	f000 fbfd 	bl	800af10 <xTaskResumeAll>
 800a716:	2800      	cmp	r0, #0
 800a718:	d1c6      	bne.n	800a6a8 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800a71a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a722:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	e7bb      	b.n	800a6a8 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 800a730:	2e00      	cmp	r6, #0
 800a732:	f43f af71 	beq.w	800a618 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 800a736:	f001 f92d 	bl	800b994 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a73a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a73c:	b119      	cbz	r1, 800a746 <xQueueSemaphoreTake+0x19c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a73e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a740:	6819      	ldr	r1, [r3, #0]
 800a742:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a746:	68a0      	ldr	r0, [r4, #8]
 800a748:	f000 fe50 	bl	800b3ec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a74c:	f001 f944 	bl	800b9d8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a750:	2600      	movs	r6, #0
 800a752:	e761      	b.n	800a618 <xQueueSemaphoreTake+0x6e>

0800a754 <xQueueReceiveFromISR>:
{
 800a754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a758:	b1b0      	cbz	r0, 800a788 <xQueueReceiveFromISR+0x34>
 800a75a:	460d      	mov	r5, r1
 800a75c:	4616      	mov	r6, r2
 800a75e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a760:	b1d9      	cbz	r1, 800a79a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a762:	f001 fa3f 	bl	800bbe4 <vPortValidateInterruptPriority>
	__asm volatile
 800a766:	f3ef 8811 	mrs	r8, BASEPRI
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a77a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a77c:	b9cf      	cbnz	r7, 800a7b2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800a77e:	2000      	movs	r0, #0
	__asm volatile
 800a780:	f388 8811 	msr	BASEPRI, r8
}
 800a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a798:	e7fe      	b.n	800a798 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a79a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d0e0      	beq.n	800a762 <xQueueReceiveFromISR+0xe>
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a7b2:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800a7b6:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7ff fb90 	bl	8009ee2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7c2:	3f01      	subs	r7, #1
 800a7c4:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a7c6:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a7ca:	d006      	beq.n	800a7da <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7cc:	f109 0301 	add.w	r3, r9, #1
 800a7d0:	b25b      	sxtb	r3, r3
 800a7d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	e7d2      	b.n	800a780 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	b90b      	cbnz	r3, 800a7e2 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800a7de:	2001      	movs	r0, #1
 800a7e0:	e7ce      	b.n	800a780 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e2:	f104 0010 	add.w	r0, r4, #16
 800a7e6:	f000 fcc7 	bl	800b178 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800a7ea:	b11e      	cbz	r6, 800a7f4 <xQueueReceiveFromISR+0xa0>
 800a7ec:	b110      	cbz	r0, 800a7f4 <xQueueReceiveFromISR+0xa0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	6030      	str	r0, [r6, #0]
 800a7f2:	e7c5      	b.n	800a780 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7c3      	b.n	800a780 <xQueueReceiveFromISR+0x2c>

0800a7f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7f8:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7fa:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7fc:	4c08      	ldr	r4, [pc, #32]	; (800a820 <vQueueAddToRegistry+0x28>)
 800a7fe:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800a802:	b12a      	cbz	r2, 800a810 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a804:	3301      	adds	r3, #1
 800a806:	2b08      	cmp	r3, #8
 800a808:	d1f9      	bne.n	800a7fe <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a80e:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a810:	4a03      	ldr	r2, [pc, #12]	; (800a820 <vQueueAddToRegistry+0x28>)
 800a812:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a816:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a81a:	6058      	str	r0, [r3, #4]
				break;
 800a81c:	e7f5      	b.n	800a80a <vQueueAddToRegistry+0x12>
 800a81e:	bf00      	nop
 800a820:	240010e4 	.word	0x240010e4

0800a824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	4604      	mov	r4, r0
 800a828:	460d      	mov	r5, r1
 800a82a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a82c:	f001 f8b2 	bl	800b994 <vPortEnterCritical>
 800a830:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a834:	b25b      	sxtb	r3, r3
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d00d      	beq.n	800a858 <vQueueWaitForMessageRestricted+0x34>
 800a83c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d00b      	beq.n	800a860 <vQueueWaitForMessageRestricted+0x3c>
 800a848:	f001 f8c6 	bl	800b9d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a84c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a84e:	b15b      	cbz	r3, 800a868 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff fb58 	bl	8009f06 <prvUnlockQueue>
	}
 800a856:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a858:	2300      	movs	r3, #0
 800a85a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a85e:	e7ed      	b.n	800a83c <vQueueWaitForMessageRestricted+0x18>
 800a860:	2300      	movs	r3, #0
 800a862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a866:	e7ef      	b.n	800a848 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a868:	4632      	mov	r2, r6
 800a86a:	4629      	mov	r1, r5
 800a86c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a870:	f000 fc64 	bl	800b13c <vTaskPlaceOnEventListRestricted>
 800a874:	e7ec      	b.n	800a850 <vQueueWaitForMessageRestricted+0x2c>
	...

0800a878 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <prvResetNextTaskUnblockTime+0x24>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	b923      	cbnz	r3, 800a88a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <prvResetNextTaskUnblockTime+0x28>)
 800a882:	f04f 32ff 	mov.w	r2, #4294967295
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88a:	4b04      	ldr	r3, [pc, #16]	; (800a89c <prvResetNextTaskUnblockTime+0x24>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	4b02      	ldr	r3, [pc, #8]	; (800a8a0 <prvResetNextTaskUnblockTime+0x28>)
 800a896:	601a      	str	r2, [r3, #0]
	}
}
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	24001128 	.word	0x24001128
 800a8a0:	240015cc 	.word	0x240015cc

0800a8a4 <prvInitialiseNewTask>:
{
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	4689      	mov	r9, r1
 800a8ac:	461f      	mov	r7, r3
 800a8ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a8b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8b4:	0095      	lsls	r5, r2, #2
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	21a5      	movs	r1, #165	; 0xa5
 800a8ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a8bc:	f004 f850 	bl	800e960 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8c0:	3d04      	subs	r5, #4
 800a8c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8c4:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8c6:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800a8ca:	f1b9 0f00 	cmp.w	r9, #0
 800a8ce:	d043      	beq.n	800a958 <prvInitialiseNewTask+0xb4>
 800a8d0:	f109 3cff 	add.w	ip, r9, #4294967295
 800a8d4:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 800a8d8:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8dc:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800a8e0:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800a8e4:	b10a      	cbz	r2, 800a8ea <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8e6:	458c      	cmp	ip, r1
 800a8e8:	d1f8      	bne.n	800a8dc <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	2b37      	cmp	r3, #55	; 0x37
 800a8f4:	bf28      	it	cs
 800a8f6:	2337      	movcs	r3, #55	; 0x37
 800a8f8:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 800a8fa:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a8fc:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8fe:	f04f 0a00 	mov.w	sl, #0
 800a902:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a906:	1d20      	adds	r0, r4, #4
 800a908:	f7ff fa6d 	bl	8009de6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a90c:	f104 0018 	add.w	r0, r4, #24
 800a910:	f7ff fa69 	bl	8009de6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a914:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a916:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 800a91a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a91c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a91e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a922:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a926:	2260      	movs	r2, #96	; 0x60
 800a928:	4651      	mov	r1, sl
 800a92a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a92e:	f004 f817 	bl	800e960 <memset>
 800a932:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <prvInitialiseNewTask+0xbc>)
 800a934:	65a3      	str	r3, [r4, #88]	; 0x58
 800a936:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <prvInitialiseNewTask+0xc0>)
 800a938:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <prvInitialiseNewTask+0xc4>)
 800a93c:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a93e:	463a      	mov	r2, r7
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	f000 fffe 	bl	800b944 <pxPortInitialiseStack>
 800a948:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a94a:	f1b8 0f00 	cmp.w	r8, #0
 800a94e:	d001      	beq.n	800a954 <prvInitialiseNewTask+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a950:	f8c8 4000 	str.w	r4, [r8]
}
 800a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a958:	2300      	movs	r3, #0
 800a95a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a95e:	e7c7      	b.n	800a8f0 <prvInitialiseNewTask+0x4c>
 800a960:	08011bdc 	.word	0x08011bdc
 800a964:	08011bfc 	.word	0x08011bfc
 800a968:	08011bbc 	.word	0x08011bbc

0800a96c <prvAddNewTaskToReadyList>:
{
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a970:	f001 f810 	bl	800b994 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a974:	4a30      	ldr	r2, [pc, #192]	; (800aa38 <prvAddNewTaskToReadyList+0xcc>)
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a97c:	4b2f      	ldr	r3, [pc, #188]	; (800aa3c <prvAddNewTaskToReadyList+0xd0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	b15b      	cbz	r3, 800a99a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <prvAddNewTaskToReadyList+0xd4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	b96b      	cbnz	r3, 800a9a4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a988:	4b2c      	ldr	r3, [pc, #176]	; (800aa3c <prvAddNewTaskToReadyList+0xd0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a990:	429a      	cmp	r2, r3
 800a992:	d807      	bhi.n	800a9a4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a994:	4b29      	ldr	r3, [pc, #164]	; (800aa3c <prvAddNewTaskToReadyList+0xd0>)
 800a996:	601d      	str	r5, [r3, #0]
 800a998:	e004      	b.n	800a9a4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a99a:	4b28      	ldr	r3, [pc, #160]	; (800aa3c <prvAddNewTaskToReadyList+0xd0>)
 800a99c:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a99e:	6813      	ldr	r3, [r2, #0]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d029      	beq.n	800a9f8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800a9a4:	4a27      	ldr	r2, [pc, #156]	; (800aa44 <prvAddNewTaskToReadyList+0xd8>)
 800a9a6:	6813      	ldr	r3, [r2, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9ac:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a9ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a9b0:	4b25      	ldr	r3, [pc, #148]	; (800aa48 <prvAddNewTaskToReadyList+0xdc>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4298      	cmp	r0, r3
 800a9b6:	d901      	bls.n	800a9bc <prvAddNewTaskToReadyList+0x50>
 800a9b8:	4b23      	ldr	r3, [pc, #140]	; (800aa48 <prvAddNewTaskToReadyList+0xdc>)
 800a9ba:	6018      	str	r0, [r3, #0]
 800a9bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9c0:	1d29      	adds	r1, r5, #4
 800a9c2:	4b22      	ldr	r3, [pc, #136]	; (800aa4c <prvAddNewTaskToReadyList+0xe0>)
 800a9c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9c8:	f7ff fa10 	bl	8009dec <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a9cc:	f001 f804 	bl	800b9d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a9d0:	4b1b      	ldr	r3, [pc, #108]	; (800aa40 <prvAddNewTaskToReadyList+0xd4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	b17b      	cbz	r3, 800a9f6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9d6:	4b19      	ldr	r3, [pc, #100]	; (800aa3c <prvAddNewTaskToReadyList+0xd0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d209      	bcs.n	800a9f6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800a9e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	f3bf 8f6f 	isb	sy
}
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	4c14      	ldr	r4, [pc, #80]	; (800aa4c <prvAddNewTaskToReadyList+0xe0>)
 800a9fa:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff f9e6 	bl	8009dd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa04:	3414      	adds	r4, #20
 800aa06:	42b4      	cmp	r4, r6
 800aa08:	d1f9      	bne.n	800a9fe <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 800aa0a:	4e11      	ldr	r6, [pc, #68]	; (800aa50 <prvAddNewTaskToReadyList+0xe4>)
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff f9df 	bl	8009dd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa12:	4c10      	ldr	r4, [pc, #64]	; (800aa54 <prvAddNewTaskToReadyList+0xe8>)
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff f9db 	bl	8009dd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa1a:	480f      	ldr	r0, [pc, #60]	; (800aa58 <prvAddNewTaskToReadyList+0xec>)
 800aa1c:	f7ff f9d8 	bl	8009dd0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800aa20:	480e      	ldr	r0, [pc, #56]	; (800aa5c <prvAddNewTaskToReadyList+0xf0>)
 800aa22:	f7ff f9d5 	bl	8009dd0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800aa26:	480e      	ldr	r0, [pc, #56]	; (800aa60 <prvAddNewTaskToReadyList+0xf4>)
 800aa28:	f7ff f9d2 	bl	8009dd0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <prvAddNewTaskToReadyList+0xf8>)
 800aa2e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <prvAddNewTaskToReadyList+0xfc>)
 800aa32:	601c      	str	r4, [r3, #0]
}
 800aa34:	e7b6      	b.n	800a9a4 <prvAddNewTaskToReadyList+0x38>
 800aa36:	bf00      	nop
 800aa38:	24001590 	.word	0x24001590
 800aa3c:	24001124 	.word	0x24001124
 800aa40:	240015ec 	.word	0x240015ec
 800aa44:	2400159c 	.word	0x2400159c
 800aa48:	240015a0 	.word	0x240015a0
 800aa4c:	24001130 	.word	0x24001130
 800aa50:	240015a4 	.word	0x240015a4
 800aa54:	240015b8 	.word	0x240015b8
 800aa58:	240015d8 	.word	0x240015d8
 800aa5c:	24001604 	.word	0x24001604
 800aa60:	240015f0 	.word	0x240015f0
 800aa64:	24001128 	.word	0x24001128
 800aa68:	2400112c 	.word	0x2400112c

0800aa6c <prvDeleteTCB>:
	{
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa70:	3054      	adds	r0, #84	; 0x54
 800aa72:	f004 fc61 	bl	800f338 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa76:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800aa7a:	b163      	cbz	r3, 800aa96 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d011      	beq.n	800aaa4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d00e      	beq.n	800aaa2 <prvDeleteTCB+0x36>
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	e7fe      	b.n	800aa94 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800aa96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aa98:	f001 f99e 	bl	800bdd8 <vPortFree>
				vPortFree( pxTCB );
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f001 f99b 	bl	800bdd8 <vPortFree>
	}
 800aaa2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f001 f997 	bl	800bdd8 <vPortFree>
 800aaaa:	e7fa      	b.n	800aaa2 <prvDeleteTCB+0x36>

0800aaac <prvIdleTask>:
{
 800aaac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaae:	4c15      	ldr	r4, [pc, #84]	; (800ab04 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	4f15      	ldr	r7, [pc, #84]	; (800ab08 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800aab2:	4e16      	ldr	r6, [pc, #88]	; (800ab0c <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aab4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800ab10 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	b1a3      	cbz	r3, 800aae6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800aabc:	f000 ff6a 	bl	800b994 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac4:	1d28      	adds	r0, r5, #4
 800aac6:	f7ff f9b5 	bl	8009e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aaca:	6833      	ldr	r3, [r6, #0]
 800aacc:	3b01      	subs	r3, #1
 800aace:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800aad6:	f000 ff7f 	bl	800b9d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800aada:	4628      	mov	r0, r5
 800aadc:	f7ff ffc6 	bl	800aa6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1ea      	bne.n	800aabc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aae6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d9e4      	bls.n	800aab8 <prvIdleTask+0xc>
				taskYIELD();
 800aaee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	e7d9      	b.n	800aab8 <prvIdleTask+0xc>
 800ab04:	24001594 	.word	0x24001594
 800ab08:	24001604 	.word	0x24001604
 800ab0c:	24001590 	.word	0x24001590
 800ab10:	24001130 	.word	0x24001130

0800ab14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4604      	mov	r4, r0
 800ab18:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab1a:	4b17      	ldr	r3, [pc, #92]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x64>)
 800ab1c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab1e:	4b17      	ldr	r3, [pc, #92]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x68>)
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	3004      	adds	r0, #4
 800ab24:	f7ff f986 	bl	8009e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab28:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ab2c:	d100      	bne.n	800ab30 <prvAddCurrentTaskToDelayedList+0x1c>
 800ab2e:	b96d      	cbnz	r5, 800ab4c <prvAddCurrentTaskToDelayedList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab30:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab32:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x68>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	d90e      	bls.n	800ab5a <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab3c:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <prvAddCurrentTaskToDelayedList+0x6c>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x68>)
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	3104      	adds	r1, #4
 800ab46:	f7ff f95c 	bl	8009e02 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x68>)
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	3104      	adds	r1, #4
 800ab52:	480c      	ldr	r0, [pc, #48]	; (800ab84 <prvAddCurrentTaskToDelayedList+0x70>)
 800ab54:	f7ff f94a 	bl	8009dec <vListInsertEnd>
 800ab58:	e7f7      	b.n	800ab4a <prvAddCurrentTaskToDelayedList+0x36>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <prvAddCurrentTaskToDelayedList+0x74>)
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x68>)
 800ab60:	6819      	ldr	r1, [r3, #0]
 800ab62:	3104      	adds	r1, #4
 800ab64:	f7ff f94d 	bl	8009e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab68:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <prvAddCurrentTaskToDelayedList+0x78>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d9ec      	bls.n	800ab4a <prvAddCurrentTaskToDelayedList+0x36>
					xNextTaskUnblockTime = xTimeToWake;
 800ab70:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <prvAddCurrentTaskToDelayedList+0x78>)
 800ab72:	601c      	str	r4, [r3, #0]
}
 800ab74:	e7e9      	b.n	800ab4a <prvAddCurrentTaskToDelayedList+0x36>
 800ab76:	bf00      	nop
 800ab78:	24001618 	.word	0x24001618
 800ab7c:	24001124 	.word	0x24001124
 800ab80:	2400112c 	.word	0x2400112c
 800ab84:	240015f0 	.word	0x240015f0
 800ab88:	24001128 	.word	0x24001128
 800ab8c:	240015cc 	.word	0x240015cc

0800ab90 <xTaskCreateStatic>:
	{
 800ab90:	b530      	push	{r4, r5, lr}
 800ab92:	b087      	sub	sp, #28
 800ab94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800ab96:	b17c      	cbz	r4, 800abb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab9a:	b1b5      	cbz	r5, 800abca <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab9c:	25bc      	movs	r5, #188	; 0xbc
 800ab9e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aba0:	9d04      	ldr	r5, [sp, #16]
 800aba2:	2dbc      	cmp	r5, #188	; 0xbc
 800aba4:	d01a      	beq.n	800abdc <xTaskCreateStatic+0x4c>
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	e7fe      	b.n	800abb6 <xTaskCreateStatic+0x26>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800abc8:	e7fe      	b.n	800abc8 <xTaskCreateStatic+0x38>
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800abda:	e7fe      	b.n	800abda <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abdc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abe0:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abe2:	2402      	movs	r4, #2
 800abe4:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abe8:	2400      	movs	r4, #0
 800abea:	9403      	str	r4, [sp, #12]
 800abec:	9502      	str	r5, [sp, #8]
 800abee:	ac05      	add	r4, sp, #20
 800abf0:	9401      	str	r4, [sp, #4]
 800abf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abf4:	9400      	str	r4, [sp, #0]
 800abf6:	f7ff fe55 	bl	800a8a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800abfc:	f7ff feb6 	bl	800a96c <prvAddNewTaskToReadyList>
	}
 800ac00:	9805      	ldr	r0, [sp, #20]
 800ac02:	b007      	add	sp, #28
 800ac04:	bd30      	pop	{r4, r5, pc}

0800ac06 <xTaskCreate>:
	{
 800ac06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	4688      	mov	r8, r1
 800ac10:	4614      	mov	r4, r2
 800ac12:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac14:	0090      	lsls	r0, r2, #2
 800ac16:	f001 f843 	bl	800bca0 <pvPortMalloc>
			if( pxStack != NULL )
 800ac1a:	b308      	cbz	r0, 800ac60 <xTaskCreate+0x5a>
 800ac1c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac1e:	20bc      	movs	r0, #188	; 0xbc
 800ac20:	f001 f83e 	bl	800bca0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ac24:	4605      	mov	r5, r0
 800ac26:	b1a8      	cbz	r0, 800ac54 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800ac28:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	9002      	str	r0, [sp, #8]
 800ac36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	4633      	mov	r3, r6
 800ac40:	4622      	mov	r2, r4
 800ac42:	4641      	mov	r1, r8
 800ac44:	4638      	mov	r0, r7
 800ac46:	f7ff fe2d 	bl	800a8a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7ff fe8e 	bl	800a96c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac50:	2001      	movs	r0, #1
 800ac52:	e007      	b.n	800ac64 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800ac54:	4648      	mov	r0, r9
 800ac56:	f001 f8bf 	bl	800bdd8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	e001      	b.n	800ac64 <xTaskCreate+0x5e>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800ac64:	b005      	add	sp, #20
 800ac66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ac6c <vTaskDelete>:
	{
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800ac70:	f000 fe90 	bl	800b994 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ac74:	b324      	cbz	r4, 800acc0 <vTaskDelete+0x54>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac76:	1d25      	adds	r5, r4, #4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f7ff f8db 	bl	8009e34 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac80:	b11b      	cbz	r3, 800ac8a <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac82:	f104 0018 	add.w	r0, r4, #24
 800ac86:	f7ff f8d5 	bl	8009e34 <uxListRemove>
			uxTaskNumber++;
 800ac8a:	4a1f      	ldr	r2, [pc, #124]	; (800ad08 <vTaskDelete+0x9c>)
 800ac8c:	6813      	ldr	r3, [r2, #0]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800ac92:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <vTaskDelete+0xa0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	d015      	beq.n	800acc6 <vTaskDelete+0x5a>
				--uxCurrentNumberOfTasks;
 800ac9a:	4a1d      	ldr	r2, [pc, #116]	; (800ad10 <vTaskDelete+0xa4>)
 800ac9c:	6813      	ldr	r3, [r2, #0]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fee2 	bl	800aa6c <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800aca8:	f7ff fde6 	bl	800a878 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 800acac:	f000 fe94 	bl	800b9d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800acb0:	4b18      	ldr	r3, [pc, #96]	; (800ad14 <vTaskDelete+0xa8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	b11b      	cbz	r3, 800acbe <vTaskDelete+0x52>
			if( pxTCB == pxCurrentTCB )
 800acb6:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <vTaskDelete+0xa0>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	42a3      	cmp	r3, r4
 800acbc:	d00c      	beq.n	800acd8 <vTaskDelete+0x6c>
	}
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800acc0:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <vTaskDelete+0xa0>)
 800acc2:	681c      	ldr	r4, [r3, #0]
 800acc4:	e7d7      	b.n	800ac76 <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800acc6:	4629      	mov	r1, r5
 800acc8:	4813      	ldr	r0, [pc, #76]	; (800ad18 <vTaskDelete+0xac>)
 800acca:	f7ff f88f 	bl	8009dec <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800acce:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <vTaskDelete+0xb0>)
 800acd0:	6813      	ldr	r3, [r2, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800acd6:	e7e9      	b.n	800acac <vTaskDelete+0x40>
				configASSERT( uxSchedulerSuspended == 0 );
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <vTaskDelete+0xb4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	b143      	cbz	r3, 800acf0 <vTaskDelete+0x84>
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	e7fe      	b.n	800acee <vTaskDelete+0x82>
				portYIELD_WITHIN_API();
 800acf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800acf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
	}
 800ad04:	e7db      	b.n	800acbe <vTaskDelete+0x52>
 800ad06:	bf00      	nop
 800ad08:	2400159c 	.word	0x2400159c
 800ad0c:	24001124 	.word	0x24001124
 800ad10:	24001590 	.word	0x24001590
 800ad14:	240015ec 	.word	0x240015ec
 800ad18:	24001604 	.word	0x24001604
 800ad1c:	24001594 	.word	0x24001594
 800ad20:	24001598 	.word	0x24001598

0800ad24 <vTaskStartScheduler>:
{
 800ad24:	b510      	push	{r4, lr}
 800ad26:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad28:	2400      	movs	r4, #0
 800ad2a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad2c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad2e:	aa07      	add	r2, sp, #28
 800ad30:	a906      	add	r1, sp, #24
 800ad32:	a805      	add	r0, sp, #20
 800ad34:	f7ff f834 	bl	8009da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad38:	9b05      	ldr	r3, [sp, #20]
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	9b06      	ldr	r3, [sp, #24]
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	9400      	str	r4, [sp, #0]
 800ad42:	4623      	mov	r3, r4
 800ad44:	9a07      	ldr	r2, [sp, #28]
 800ad46:	4917      	ldr	r1, [pc, #92]	; (800ada4 <vTaskStartScheduler+0x80>)
 800ad48:	4817      	ldr	r0, [pc, #92]	; (800ada8 <vTaskStartScheduler+0x84>)
 800ad4a:	f7ff ff21 	bl	800ab90 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800ad4e:	b338      	cbz	r0, 800ada0 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 800ad50:	f000 fc06 	bl	800b560 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ad54:	2801      	cmp	r0, #1
 800ad56:	d00b      	beq.n	800ad70 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ad5c:	d120      	bne.n	800ada0 <vTaskStartScheduler+0x7c>
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	e7fe      	b.n	800ad6e <vTaskStartScheduler+0x4a>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad80:	4b0a      	ldr	r3, [pc, #40]	; (800adac <vTaskStartScheduler+0x88>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3354      	adds	r3, #84	; 0x54
 800ad86:	4a0a      	ldr	r2, [pc, #40]	; (800adb0 <vTaskStartScheduler+0x8c>)
 800ad88:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <vTaskStartScheduler+0x90>)
 800ad8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <vTaskStartScheduler+0x94>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad98:	4b08      	ldr	r3, [pc, #32]	; (800adbc <vTaskStartScheduler+0x98>)
 800ad9a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800ad9c:	f000 fe94 	bl	800bac8 <xPortStartScheduler>
}
 800ada0:	b008      	add	sp, #32
 800ada2:	bd10      	pop	{r4, pc}
 800ada4:	08011240 	.word	0x08011240
 800ada8:	0800aaad 	.word	0x0800aaad
 800adac:	24001124 	.word	0x24001124
 800adb0:	24000020 	.word	0x24000020
 800adb4:	240015cc 	.word	0x240015cc
 800adb8:	240015ec 	.word	0x240015ec
 800adbc:	24001618 	.word	0x24001618

0800adc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800adc0:	4a02      	ldr	r2, [pc, #8]	; (800adcc <vTaskSuspendAll+0xc>)
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	6013      	str	r3, [r2, #0]
}
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	24001598 	.word	0x24001598

0800add0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800add0:	4b01      	ldr	r3, [pc, #4]	; (800add8 <xTaskGetTickCount+0x8>)
 800add2:	6818      	ldr	r0, [r3, #0]
}
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	24001618 	.word	0x24001618

0800addc <xTaskIncrementTick>:
{
 800addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade0:	4b40      	ldr	r3, [pc, #256]	; (800aee4 <xTaskIncrementTick+0x108>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d174      	bne.n	800aed2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ade8:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <xTaskIncrementTick+0x10c>)
 800adea:	681e      	ldr	r6, [r3, #0]
 800adec:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800adee:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adf0:	b9c6      	cbnz	r6, 800ae24 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800adf2:	4b3e      	ldr	r3, [pc, #248]	; (800aeec <xTaskIncrementTick+0x110>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	b143      	cbz	r3, 800ae0c <xTaskIncrementTick+0x30>
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	e7fe      	b.n	800ae0a <xTaskIncrementTick+0x2e>
 800ae0c:	4a37      	ldr	r2, [pc, #220]	; (800aeec <xTaskIncrementTick+0x110>)
 800ae0e:	6811      	ldr	r1, [r2, #0]
 800ae10:	4b37      	ldr	r3, [pc, #220]	; (800aef0 <xTaskIncrementTick+0x114>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	6010      	str	r0, [r2, #0]
 800ae16:	6019      	str	r1, [r3, #0]
 800ae18:	4a36      	ldr	r2, [pc, #216]	; (800aef4 <xTaskIncrementTick+0x118>)
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	6013      	str	r3, [r2, #0]
 800ae20:	f7ff fd2a 	bl	800a878 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae24:	4b34      	ldr	r3, [pc, #208]	; (800aef8 <xTaskIncrementTick+0x11c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	42b3      	cmp	r3, r6
 800ae2a:	d840      	bhi.n	800aeae <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae2c:	4b2f      	ldr	r3, [pc, #188]	; (800aeec <xTaskIncrementTick+0x110>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	b13b      	cbz	r3, 800ae44 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800ae34:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae36:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800aeec <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 800ae3a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800af0c <xTaskIncrementTick+0x130>
 800ae3e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800af00 <xTaskIncrementTick+0x124>
 800ae42:	e01b      	b.n	800ae7c <xTaskIncrementTick+0xa0>
BaseType_t xSwitchRequired = pdFALSE;
 800ae44:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae46:	4b2c      	ldr	r3, [pc, #176]	; (800aef8 <xTaskIncrementTick+0x11c>)
 800ae48:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4c:	601a      	str	r2, [r3, #0]
					break;
 800ae4e:	e02f      	b.n	800aeb0 <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 800ae50:	4a29      	ldr	r2, [pc, #164]	; (800aef8 <xTaskIncrementTick+0x11c>)
 800ae52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae54:	e02c      	b.n	800aeb0 <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 800ae56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ae60:	f7fe ffc4 	bl	8009dec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae64:	4b25      	ldr	r3, [pc, #148]	; (800aefc <xTaskIncrementTick+0x120>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	bf28      	it	cs
 800ae70:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae72:	f8d8 3000 	ldr.w	r3, [r8]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0e4      	beq.n	800ae46 <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae84:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800ae86:	429e      	cmp	r6, r3
 800ae88:	d3e2      	bcc.n	800ae50 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae8a:	1d27      	adds	r7, r4, #4
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f7fe ffd1 	bl	8009e34 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae94:	b11b      	cbz	r3, 800ae9e <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae96:	f104 0018 	add.w	r0, r4, #24
 800ae9a:	f7fe ffcb 	bl	8009e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800aea0:	f8d9 3000 	ldr.w	r3, [r9]
 800aea4:	4298      	cmp	r0, r3
 800aea6:	d9d6      	bls.n	800ae56 <xTaskIncrementTick+0x7a>
 800aea8:	f8c9 0000 	str.w	r0, [r9]
 800aeac:	e7d3      	b.n	800ae56 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 800aeae:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aeb0:	4b12      	ldr	r3, [pc, #72]	; (800aefc <xTaskIncrementTick+0x120>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4a10      	ldr	r2, [pc, #64]	; (800af00 <xTaskIncrementTick+0x124>)
 800aebe:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	bf28      	it	cs
 800aec4:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 800aec6:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <xTaskIncrementTick+0x128>)
 800aec8:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bf18      	it	ne
 800aece:	2501      	movne	r5, #1
 800aed0:	e004      	b.n	800aedc <xTaskIncrementTick+0x100>
		++xPendedTicks;
 800aed2:	4a0d      	ldr	r2, [pc, #52]	; (800af08 <xTaskIncrementTick+0x12c>)
 800aed4:	6813      	ldr	r3, [r2, #0]
 800aed6:	3301      	adds	r3, #1
 800aed8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800aeda:	2500      	movs	r5, #0
}
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	bf00      	nop
 800aee4:	24001598 	.word	0x24001598
 800aee8:	24001618 	.word	0x24001618
 800aeec:	24001128 	.word	0x24001128
 800aef0:	2400112c 	.word	0x2400112c
 800aef4:	240015d0 	.word	0x240015d0
 800aef8:	240015cc 	.word	0x240015cc
 800aefc:	24001124 	.word	0x24001124
 800af00:	24001130 	.word	0x24001130
 800af04:	2400161c 	.word	0x2400161c
 800af08:	240015d4 	.word	0x240015d4
 800af0c:	240015a0 	.word	0x240015a0

0800af10 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800af10:	4b38      	ldr	r3, [pc, #224]	; (800aff4 <xTaskResumeAll+0xe4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	b943      	cbnz	r3, 800af28 <xTaskResumeAll+0x18>
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	e7fe      	b.n	800af26 <xTaskResumeAll+0x16>
{
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 800af2c:	f000 fd32 	bl	800b994 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800af30:	4b30      	ldr	r3, [pc, #192]	; (800aff4 <xTaskResumeAll+0xe4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	3a01      	subs	r2, #1
 800af36:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d149      	bne.n	800afd2 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af3e:	4b2e      	ldr	r3, [pc, #184]	; (800aff8 <xTaskResumeAll+0xe8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d04b      	beq.n	800afde <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af46:	4b2d      	ldr	r3, [pc, #180]	; (800affc <xTaskResumeAll+0xec>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d04b      	beq.n	800afe6 <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4e:	4e2b      	ldr	r6, [pc, #172]	; (800affc <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 800af50:	4f2b      	ldr	r7, [pc, #172]	; (800b000 <xTaskResumeAll+0xf0>)
 800af52:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b010 <xTaskResumeAll+0x100>
 800af56:	e002      	b.n	800af5e <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af58:	6833      	ldr	r3, [r6, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d041      	beq.n	800afe2 <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5e:	68f3      	ldr	r3, [r6, #12]
 800af60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af62:	f104 0018 	add.w	r0, r4, #24
 800af66:	f7fe ff65 	bl	8009e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af6a:	1d25      	adds	r5, r4, #4
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7fe ff61 	bl	8009e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	4298      	cmp	r0, r3
 800af78:	d900      	bls.n	800af7c <xTaskResumeAll+0x6c>
 800af7a:	6038      	str	r0, [r7, #0]
 800af7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800af80:	4629      	mov	r1, r5
 800af82:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800af86:	f7fe ff31 	bl	8009dec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af8a:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <xTaskResumeAll+0xf4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	429a      	cmp	r2, r3
 800af94:	d3e0      	bcc.n	800af58 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 800af96:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <xTaskResumeAll+0xf8>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	e7dc      	b.n	800af58 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af9e:	3c01      	subs	r4, #1
 800afa0:	d005      	beq.n	800afae <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 800afa2:	f7ff ff1b 	bl	800addc <xTaskIncrementTick>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d0f9      	beq.n	800af9e <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 800afaa:	6035      	str	r5, [r6, #0]
 800afac:	e7f7      	b.n	800af9e <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 800afae:	4b17      	ldr	r3, [pc, #92]	; (800b00c <xTaskResumeAll+0xfc>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800afb4:	4b14      	ldr	r3, [pc, #80]	; (800b008 <xTaskResumeAll+0xf8>)
 800afb6:	681c      	ldr	r4, [r3, #0]
 800afb8:	b164      	cbz	r4, 800afd4 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800afba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800afce:	2401      	movs	r4, #1
 800afd0:	e000      	b.n	800afd4 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 800afd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800afd4:	f000 fd00 	bl	800b9d8 <vPortExitCritical>
}
 800afd8:	4620      	mov	r0, r4
 800afda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800afde:	2400      	movs	r4, #0
 800afe0:	e7f8      	b.n	800afd4 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800afe2:	f7ff fc49 	bl	800a878 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afe6:	4b09      	ldr	r3, [pc, #36]	; (800b00c <xTaskResumeAll+0xfc>)
 800afe8:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800afea:	2c00      	cmp	r4, #0
 800afec:	d0e2      	beq.n	800afb4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800afee:	4e06      	ldr	r6, [pc, #24]	; (800b008 <xTaskResumeAll+0xf8>)
 800aff0:	2501      	movs	r5, #1
 800aff2:	e7d6      	b.n	800afa2 <xTaskResumeAll+0x92>
 800aff4:	24001598 	.word	0x24001598
 800aff8:	24001590 	.word	0x24001590
 800affc:	240015d8 	.word	0x240015d8
 800b000:	240015a0 	.word	0x240015a0
 800b004:	24001124 	.word	0x24001124
 800b008:	2400161c 	.word	0x2400161c
 800b00c:	240015d4 	.word	0x240015d4
 800b010:	24001130 	.word	0x24001130

0800b014 <vTaskDelay>:
	{
 800b014:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b016:	b1a8      	cbz	r0, 800b044 <vTaskDelay+0x30>
 800b018:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800b01a:	4b10      	ldr	r3, [pc, #64]	; (800b05c <vTaskDelay+0x48>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	b143      	cbz	r3, 800b032 <vTaskDelay+0x1e>
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	e7fe      	b.n	800b030 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b032:	f7ff fec5 	bl	800adc0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b036:	2100      	movs	r1, #0
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fd6b 	bl	800ab14 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b03e:	f7ff ff67 	bl	800af10 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b042:	b948      	cbnz	r0, 800b058 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800b044:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
	}
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	24001598 	.word	0x24001598

0800b060 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b060:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <vTaskSwitchContext+0x94>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	b11b      	cbz	r3, 800b06e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b066:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <vTaskSwitchContext+0x98>)
 800b068:	2201      	movs	r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b06e:	4b22      	ldr	r3, [pc, #136]	; (800b0f8 <vTaskSwitchContext+0x98>)
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b074:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <vTaskSwitchContext+0x9c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b07c:	0092      	lsls	r2, r2, #2
 800b07e:	4920      	ldr	r1, [pc, #128]	; (800b100 <vTaskSwitchContext+0xa0>)
 800b080:	588a      	ldr	r2, [r1, r2]
 800b082:	b98a      	cbnz	r2, 800b0a8 <vTaskSwitchContext+0x48>
 800b084:	b13b      	cbz	r3, 800b096 <vTaskSwitchContext+0x36>
 800b086:	3b01      	subs	r3, #1
 800b088:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b08c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b090:	b952      	cbnz	r2, 800b0a8 <vTaskSwitchContext+0x48>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1f7      	bne.n	800b086 <vTaskSwitchContext+0x26>
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	e7fe      	b.n	800b0a6 <vTaskSwitchContext+0x46>
 800b0a8:	4a15      	ldr	r2, [pc, #84]	; (800b100 <vTaskSwitchContext+0xa0>)
 800b0aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b0ae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b0b2:	6848      	ldr	r0, [r1, #4]
 800b0b4:	6840      	ldr	r0, [r0, #4]
 800b0b6:	6048      	str	r0, [r1, #4]
 800b0b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b0bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b0c0:	3208      	adds	r2, #8
 800b0c2:	4290      	cmp	r0, r2
 800b0c4:	d00f      	beq.n	800b0e6 <vTaskSwitchContext+0x86>
 800b0c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b0ca:	4a0d      	ldr	r2, [pc, #52]	; (800b100 <vTaskSwitchContext+0xa0>)
 800b0cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b0d0:	6852      	ldr	r2, [r2, #4]
 800b0d2:	68d1      	ldr	r1, [r2, #12]
 800b0d4:	4a0b      	ldr	r2, [pc, #44]	; (800b104 <vTaskSwitchContext+0xa4>)
 800b0d6:	6011      	str	r1, [r2, #0]
 800b0d8:	4908      	ldr	r1, [pc, #32]	; (800b0fc <vTaskSwitchContext+0x9c>)
 800b0da:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0dc:	6813      	ldr	r3, [r2, #0]
 800b0de:	3354      	adds	r3, #84	; 0x54
 800b0e0:	4a09      	ldr	r2, [pc, #36]	; (800b108 <vTaskSwitchContext+0xa8>)
 800b0e2:	6013      	str	r3, [r2, #0]
}
 800b0e4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e6:	6840      	ldr	r0, [r0, #4]
 800b0e8:	4a05      	ldr	r2, [pc, #20]	; (800b100 <vTaskSwitchContext+0xa0>)
 800b0ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b0ee:	6050      	str	r0, [r2, #4]
 800b0f0:	e7e9      	b.n	800b0c6 <vTaskSwitchContext+0x66>
 800b0f2:	bf00      	nop
 800b0f4:	24001598 	.word	0x24001598
 800b0f8:	2400161c 	.word	0x2400161c
 800b0fc:	240015a0 	.word	0x240015a0
 800b100:	24001130 	.word	0x24001130
 800b104:	24001124 	.word	0x24001124
 800b108:	24000020 	.word	0x24000020

0800b10c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b10c:	b158      	cbz	r0, 800b126 <vTaskPlaceOnEventList+0x1a>
{
 800b10e:	b510      	push	{r4, lr}
 800b110:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b112:	4a09      	ldr	r2, [pc, #36]	; (800b138 <vTaskPlaceOnEventList+0x2c>)
 800b114:	6811      	ldr	r1, [r2, #0]
 800b116:	3118      	adds	r1, #24
 800b118:	f7fe fe73 	bl	8009e02 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b11c:	2101      	movs	r1, #1
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff fcf8 	bl	800ab14 <prvAddCurrentTaskToDelayedList>
}
 800b124:	bd10      	pop	{r4, pc}
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800b136:	e7fe      	b.n	800b136 <vTaskPlaceOnEventList+0x2a>
 800b138:	24001124 	.word	0x24001124

0800b13c <vTaskPlaceOnEventListRestricted>:
	{
 800b13c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800b13e:	b178      	cbz	r0, 800b160 <vTaskPlaceOnEventListRestricted+0x24>
 800b140:	460d      	mov	r5, r1
 800b142:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b144:	4a0b      	ldr	r2, [pc, #44]	; (800b174 <vTaskPlaceOnEventListRestricted+0x38>)
 800b146:	6811      	ldr	r1, [r2, #0]
 800b148:	3118      	adds	r1, #24
 800b14a:	f7fe fe4f 	bl	8009dec <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800b14e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b150:	4621      	mov	r1, r4
 800b152:	bf0c      	ite	eq
 800b154:	4628      	moveq	r0, r5
 800b156:	f04f 30ff 	movne.w	r0, #4294967295
 800b15a:	f7ff fcdb 	bl	800ab14 <prvAddCurrentTaskToDelayedList>
	}
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800b170:	e7fe      	b.n	800b170 <vTaskPlaceOnEventListRestricted+0x34>
 800b172:	bf00      	nop
 800b174:	24001124 	.word	0x24001124

0800b178 <xTaskRemoveFromEventList>:
{
 800b178:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17a:	68c3      	ldr	r3, [r0, #12]
 800b17c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b17e:	b324      	cbz	r4, 800b1ca <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b180:	f104 0518 	add.w	r5, r4, #24
 800b184:	4628      	mov	r0, r5
 800b186:	f7fe fe55 	bl	8009e34 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <xTaskRemoveFromEventList+0x74>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	bb2b      	cbnz	r3, 800b1dc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b190:	1d25      	adds	r5, r4, #4
 800b192:	4628      	mov	r0, r5
 800b194:	f7fe fe4e 	bl	8009e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b198:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b19a:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <xTaskRemoveFromEventList+0x78>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4298      	cmp	r0, r3
 800b1a0:	d901      	bls.n	800b1a6 <xTaskRemoveFromEventList+0x2e>
 800b1a2:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <xTaskRemoveFromEventList+0x78>)
 800b1a4:	6018      	str	r0, [r3, #0]
 800b1a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	4b11      	ldr	r3, [pc, #68]	; (800b1f4 <xTaskRemoveFromEventList+0x7c>)
 800b1ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1b2:	f7fe fe1b 	bl	8009dec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1b6:	4b10      	ldr	r3, [pc, #64]	; (800b1f8 <xTaskRemoveFromEventList+0x80>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d911      	bls.n	800b1e6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <xTaskRemoveFromEventList+0x84>)
 800b1c6:	6018      	str	r0, [r3, #0]
}
 800b1c8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800b1da:	e7fe      	b.n	800b1da <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4808      	ldr	r0, [pc, #32]	; (800b200 <xTaskRemoveFromEventList+0x88>)
 800b1e0:	f7fe fe04 	bl	8009dec <vListInsertEnd>
 800b1e4:	e7e7      	b.n	800b1b6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800b1e6:	2000      	movs	r0, #0
	return xReturn;
 800b1e8:	e7ee      	b.n	800b1c8 <xTaskRemoveFromEventList+0x50>
 800b1ea:	bf00      	nop
 800b1ec:	24001598 	.word	0x24001598
 800b1f0:	240015a0 	.word	0x240015a0
 800b1f4:	24001130 	.word	0x24001130
 800b1f8:	24001124 	.word	0x24001124
 800b1fc:	2400161c 	.word	0x2400161c
 800b200:	240015d8 	.word	0x240015d8

0800b204 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b204:	4b03      	ldr	r3, [pc, #12]	; (800b214 <vTaskInternalSetTimeOutState+0x10>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b20a:	4b03      	ldr	r3, [pc, #12]	; (800b218 <vTaskInternalSetTimeOutState+0x14>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6043      	str	r3, [r0, #4]
}
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	240015d0 	.word	0x240015d0
 800b218:	24001618 	.word	0x24001618

0800b21c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800b21c:	b1d0      	cbz	r0, 800b254 <xTaskCheckForTimeOut+0x38>
{
 800b21e:	b570      	push	{r4, r5, r6, lr}
 800b220:	460c      	mov	r4, r1
 800b222:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800b224:	b1f9      	cbz	r1, 800b266 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800b226:	f000 fbb5 	bl	800b994 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b22a:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <xTaskCheckForTimeOut+0x7c>)
 800b22c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b234:	d028      	beq.n	800b288 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b236:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b238:	4818      	ldr	r0, [pc, #96]	; (800b29c <xTaskCheckForTimeOut+0x80>)
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	682e      	ldr	r6, [r5, #0]
 800b23e:	4286      	cmp	r6, r0
 800b240:	d001      	beq.n	800b246 <xTaskCheckForTimeOut+0x2a>
 800b242:	4291      	cmp	r1, r2
 800b244:	d925      	bls.n	800b292 <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b246:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b248:	4283      	cmp	r3, r0
 800b24a:	d815      	bhi.n	800b278 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b250:	2401      	movs	r4, #1
 800b252:	e01a      	b.n	800b28a <xTaskCheckForTimeOut+0x6e>
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800b264:	e7fe      	b.n	800b264 <xTaskCheckForTimeOut+0x48>
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800b276:	e7fe      	b.n	800b276 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	440b      	add	r3, r1
 800b27c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b27e:	4628      	mov	r0, r5
 800b280:	f7ff ffc0 	bl	800b204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b284:	2400      	movs	r4, #0
 800b286:	e000      	b.n	800b28a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800b288:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b28a:	f000 fba5 	bl	800b9d8 <vPortExitCritical>
}
 800b28e:	4620      	mov	r0, r4
 800b290:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800b292:	2401      	movs	r4, #1
 800b294:	e7f9      	b.n	800b28a <xTaskCheckForTimeOut+0x6e>
 800b296:	bf00      	nop
 800b298:	24001618 	.word	0x24001618
 800b29c:	240015d0 	.word	0x240015d0

0800b2a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b2a0:	4b01      	ldr	r3, [pc, #4]	; (800b2a8 <vTaskMissedYield+0x8>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
}
 800b2a6:	4770      	bx	lr
 800b2a8:	2400161c 	.word	0x2400161c

0800b2ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b2ac:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <xTaskGetSchedulerState+0x18>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	b133      	cbz	r3, 800b2c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <xTaskGetSchedulerState+0x1c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	bf0c      	ite	eq
 800b2ba:	2002      	moveq	r0, #2
 800b2bc:	2000      	movne	r0, #0
 800b2be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2c0:	2001      	movs	r0, #1
	}
 800b2c2:	4770      	bx	lr
 800b2c4:	240015ec 	.word	0x240015ec
 800b2c8:	24001598 	.word	0x24001598

0800b2cc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d03f      	beq.n	800b350 <xTaskPriorityInherit+0x84>
	{
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b2d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b2d6:	4a1f      	ldr	r2, [pc, #124]	; (800b354 <xTaskPriorityInherit+0x88>)
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d22e      	bcs.n	800b33e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2e0:	6982      	ldr	r2, [r0, #24]
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	db05      	blt.n	800b2f2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e6:	4a1b      	ldr	r2, [pc, #108]	; (800b354 <xTaskPriorityInherit+0x88>)
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b2ec:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b2f0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b2f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b2f6:	4a18      	ldr	r2, [pc, #96]	; (800b358 <xTaskPriorityInherit+0x8c>)
 800b2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2fc:	6962      	ldr	r2, [r4, #20]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d005      	beq.n	800b30e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b302:	4b14      	ldr	r3, [pc, #80]	; (800b354 <xTaskPriorityInherit+0x88>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800b30a:	2001      	movs	r0, #1
 800b30c:	e01f      	b.n	800b34e <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b30e:	1d25      	adds	r5, r4, #4
 800b310:	4628      	mov	r0, r5
 800b312:	f7fe fd8f 	bl	8009e34 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b316:	4b0f      	ldr	r3, [pc, #60]	; (800b354 <xTaskPriorityInherit+0x88>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b31c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <xTaskPriorityInherit+0x90>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4298      	cmp	r0, r3
 800b324:	d901      	bls.n	800b32a <xTaskPriorityInherit+0x5e>
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <xTaskPriorityInherit+0x90>)
 800b328:	6018      	str	r0, [r3, #0]
 800b32a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b32e:	4629      	mov	r1, r5
 800b330:	4b09      	ldr	r3, [pc, #36]	; (800b358 <xTaskPriorityInherit+0x8c>)
 800b332:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b336:	f7fe fd59 	bl	8009dec <vListInsertEnd>
				xReturn = pdTRUE;
 800b33a:	2001      	movs	r0, #1
 800b33c:	e007      	b.n	800b34e <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <xTaskPriorityInherit+0x88>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b346:	4298      	cmp	r0, r3
 800b348:	bf2c      	ite	cs
 800b34a:	2000      	movcs	r0, #0
 800b34c:	2001      	movcc	r0, #1
	}
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800b350:	2000      	movs	r0, #0
	}
 800b352:	4770      	bx	lr
 800b354:	24001124 	.word	0x24001124
 800b358:	24001130 	.word	0x24001130
 800b35c:	240015a0 	.word	0x240015a0

0800b360 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800b360:	2800      	cmp	r0, #0
 800b362:	d03b      	beq.n	800b3dc <xTaskPriorityDisinherit+0x7c>
	{
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800b368:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <xTaskPriorityDisinherit+0x80>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4283      	cmp	r3, r0
 800b36e:	d008      	beq.n	800b382 <xTaskPriorityDisinherit+0x22>
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	e7fe      	b.n	800b380 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800b382:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b384:	b943      	cbnz	r3, 800b398 <xTaskPriorityDisinherit+0x38>
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	e7fe      	b.n	800b396 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800b398:	3b01      	subs	r3, #1
 800b39a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b39c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b39e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b3a0:	4291      	cmp	r1, r2
 800b3a2:	d000      	beq.n	800b3a6 <xTaskPriorityDisinherit+0x46>
 800b3a4:	b10b      	cbz	r3, 800b3aa <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800b3a6:	2000      	movs	r0, #0
	}
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3aa:	1d05      	adds	r5, r0, #4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	f7fe fd41 	bl	8009e34 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b3b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b3b4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b6:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800b3ba:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <xTaskPriorityDisinherit+0x84>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4298      	cmp	r0, r3
 800b3c2:	d901      	bls.n	800b3c8 <xTaskPriorityDisinherit+0x68>
 800b3c4:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <xTaskPriorityDisinherit+0x84>)
 800b3c6:	6018      	str	r0, [r3, #0]
 800b3c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <xTaskPriorityDisinherit+0x88>)
 800b3d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3d4:	f7fe fd0a 	bl	8009dec <vListInsertEnd>
					xReturn = pdTRUE;
 800b3d8:	2001      	movs	r0, #1
 800b3da:	e7e5      	b.n	800b3a8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800b3dc:	2000      	movs	r0, #0
	}
 800b3de:	4770      	bx	lr
 800b3e0:	24001124 	.word	0x24001124
 800b3e4:	240015a0 	.word	0x240015a0
 800b3e8:	24001130 	.word	0x24001130

0800b3ec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d046      	beq.n	800b47e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800b3f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3f6:	b943      	cbnz	r3, 800b40a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	e7fe      	b.n	800b408 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b40a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b40c:	4291      	cmp	r1, r2
 800b40e:	bf38      	it	cc
 800b410:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b412:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b418:	428a      	cmp	r2, r1
 800b41a:	d100      	bne.n	800b41e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800b41e:	4b18      	ldr	r3, [pc, #96]	; (800b480 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4283      	cmp	r3, r0
 800b424:	d022      	beq.n	800b46c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800b426:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b428:	6983      	ldr	r3, [r0, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	db02      	blt.n	800b434 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b42e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800b432:	6181      	str	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b434:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b438:	4b12      	ldr	r3, [pc, #72]	; (800b484 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b43a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b43e:	6963      	ldr	r3, [r4, #20]
 800b440:	4293      	cmp	r3, r2
 800b442:	d1eb      	bne.n	800b41c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b444:	1d25      	adds	r5, r4, #4
 800b446:	4628      	mov	r0, r5
 800b448:	f7fe fcf4 	bl	8009e34 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800b44c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4298      	cmp	r0, r3
 800b454:	d901      	bls.n	800b45a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b458:	6018      	str	r0, [r3, #0]
 800b45a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b45e:	4629      	mov	r1, r5
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b462:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b466:	f7fe fcc1 	bl	8009dec <vListInsertEnd>
	}
 800b46a:	e7d7      	b.n	800b41c <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800b47c:	e7fe      	b.n	800b47c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800b47e:	4770      	bx	lr
 800b480:	24001124 	.word	0x24001124
 800b484:	24001130 	.word	0x24001130
 800b488:	240015a0 	.word	0x240015a0

0800b48c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	b123      	cbz	r3, 800b49c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b498:	3301      	adds	r3, #1
 800b49a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800b49c:	4b01      	ldr	r3, [pc, #4]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800b49e:	6818      	ldr	r0, [r3, #0]
	}
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	24001124 	.word	0x24001124

0800b4a8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4a8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4ac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	d80c      	bhi.n	800b4cc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	6983      	ldr	r3, [r0, #24]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d301      	bcc.n	800b4be <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b4ba:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800b4bc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4be:	1d01      	adds	r1, r0, #4
 800b4c0:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <prvInsertTimerInActiveList+0x40>)
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	f7fe fc9d 	bl	8009e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	e7f7      	b.n	800b4bc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d203      	bcs.n	800b4d8 <prvInsertTimerInActiveList+0x30>
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	d301      	bcc.n	800b4d8 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800b4d4:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b4d6:	e7f1      	b.n	800b4bc <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4d8:	1d01      	adds	r1, r0, #4
 800b4da:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <prvInsertTimerInActiveList+0x44>)
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7fe fc90 	bl	8009e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	e7ea      	b.n	800b4bc <prvInsertTimerInActiveList+0x14>
 800b4e6:	bf00      	nop
 800b4e8:	24001624 	.word	0x24001624
 800b4ec:	24001620 	.word	0x24001620

0800b4f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b4f0:	b530      	push	{r4, r5, lr}
 800b4f2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b4f4:	f000 fa4e 	bl	800b994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b4f8:	4b11      	ldr	r3, [pc, #68]	; (800b540 <prvCheckForValidListAndQueue+0x50>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	b11b      	cbz	r3, 800b506 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4fe:	f000 fa6b 	bl	800b9d8 <vPortExitCritical>
}
 800b502:	b003      	add	sp, #12
 800b504:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b506:	4d0f      	ldr	r5, [pc, #60]	; (800b544 <prvCheckForValidListAndQueue+0x54>)
 800b508:	4628      	mov	r0, r5
 800b50a:	f7fe fc61 	bl	8009dd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b50e:	4c0e      	ldr	r4, [pc, #56]	; (800b548 <prvCheckForValidListAndQueue+0x58>)
 800b510:	4620      	mov	r0, r4
 800b512:	f7fe fc5d 	bl	8009dd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b516:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <prvCheckForValidListAndQueue+0x5c>)
 800b518:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b51a:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <prvCheckForValidListAndQueue+0x60>)
 800b51c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b51e:	2300      	movs	r3, #0
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4b0c      	ldr	r3, [pc, #48]	; (800b554 <prvCheckForValidListAndQueue+0x64>)
 800b524:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <prvCheckForValidListAndQueue+0x68>)
 800b526:	2110      	movs	r1, #16
 800b528:	200a      	movs	r0, #10
 800b52a:	f7fe fd69 	bl	800a000 <xQueueGenericCreateStatic>
 800b52e:	4b04      	ldr	r3, [pc, #16]	; (800b540 <prvCheckForValidListAndQueue+0x50>)
 800b530:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b532:	2800      	cmp	r0, #0
 800b534:	d0e3      	beq.n	800b4fe <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b536:	4909      	ldr	r1, [pc, #36]	; (800b55c <prvCheckForValidListAndQueue+0x6c>)
 800b538:	f7ff f95e 	bl	800a7f8 <vQueueAddToRegistry>
 800b53c:	e7df      	b.n	800b4fe <prvCheckForValidListAndQueue+0xe>
 800b53e:	bf00      	nop
 800b540:	24001744 	.word	0x24001744
 800b544:	240016c8 	.word	0x240016c8
 800b548:	240016dc 	.word	0x240016dc
 800b54c:	24001620 	.word	0x24001620
 800b550:	24001624 	.word	0x24001624
 800b554:	240016f4 	.word	0x240016f4
 800b558:	24001628 	.word	0x24001628
 800b55c:	08011248 	.word	0x08011248

0800b560 <xTimerCreateTimerTask>:
{
 800b560:	b510      	push	{r4, lr}
 800b562:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b564:	f7ff ffc4 	bl	800b4f0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b568:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <xTimerCreateTimerTask+0x54>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	b1cb      	cbz	r3, 800b5a2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b56e:	2400      	movs	r4, #0
 800b570:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b572:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b574:	aa07      	add	r2, sp, #28
 800b576:	a906      	add	r1, sp, #24
 800b578:	a805      	add	r0, sp, #20
 800b57a:	f7fe fc1d 	bl	8009db8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b57e:	9b05      	ldr	r3, [sp, #20]
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	2302      	movs	r3, #2
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4623      	mov	r3, r4
 800b58c:	9a07      	ldr	r2, [sp, #28]
 800b58e:	490a      	ldr	r1, [pc, #40]	; (800b5b8 <xTimerCreateTimerTask+0x58>)
 800b590:	480a      	ldr	r0, [pc, #40]	; (800b5bc <xTimerCreateTimerTask+0x5c>)
 800b592:	f7ff fafd 	bl	800ab90 <xTaskCreateStatic>
 800b596:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <xTimerCreateTimerTask+0x60>)
 800b598:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b59a:	b110      	cbz	r0, 800b5a2 <xTimerCreateTimerTask+0x42>
}
 800b59c:	2001      	movs	r0, #1
 800b59e:	b008      	add	sp, #32
 800b5a0:	bd10      	pop	{r4, pc}
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800b5b2:	e7fe      	b.n	800b5b2 <xTimerCreateTimerTask+0x52>
 800b5b4:	24001744 	.word	0x24001744
 800b5b8:	08011250 	.word	0x08011250
 800b5bc:	0800b6d5 	.word	0x0800b6d5
 800b5c0:	24001748 	.word	0x24001748

0800b5c4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b5c4:	b1d8      	cbz	r0, 800b5fe <xTimerGenericCommand+0x3a>
 800b5c6:	469c      	mov	ip, r3
 800b5c8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800b5ca:	4815      	ldr	r0, [pc, #84]	; (800b620 <xTimerGenericCommand+0x5c>)
 800b5cc:	6800      	ldr	r0, [r0, #0]
 800b5ce:	b328      	cbz	r0, 800b61c <xTimerGenericCommand+0x58>
{
 800b5d0:	b500      	push	{lr}
 800b5d2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800b5d4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5d6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5d8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5da:	2905      	cmp	r1, #5
 800b5dc:	dc18      	bgt.n	800b610 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5de:	f7ff fe65 	bl	800b2ac <xTaskGetSchedulerState>
 800b5e2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	bf0c      	ite	eq
 800b5ea:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5ec:	461a      	movne	r2, r3
 800b5ee:	4669      	mov	r1, sp
 800b5f0:	480b      	ldr	r0, [pc, #44]	; (800b620 <xTimerGenericCommand+0x5c>)
 800b5f2:	6800      	ldr	r0, [r0, #0]
 800b5f4:	f7fe fd9b 	bl	800a12e <xQueueGenericSend>
}
 800b5f8:	b005      	add	sp, #20
 800b5fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800b60e:	e7fe      	b.n	800b60e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b610:	2300      	movs	r3, #0
 800b612:	4662      	mov	r2, ip
 800b614:	4669      	mov	r1, sp
 800b616:	f7fe fe58 	bl	800a2ca <xQueueGenericSendFromISR>
 800b61a:	e7ed      	b.n	800b5f8 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800b61c:	2000      	movs	r0, #0
}
 800b61e:	4770      	bx	lr
 800b620:	24001744 	.word	0x24001744

0800b624 <prvSampleTimeNow>:
{
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 800b62c:	f7ff fbd0 	bl	800add0 <xTaskGetTickCount>
 800b630:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 800b632:	4b25      	ldr	r3, [pc, #148]	; (800b6c8 <prvSampleTimeNow+0xa4>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4283      	cmp	r3, r0
 800b638:	d808      	bhi.n	800b64c <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 800b640:	4b21      	ldr	r3, [pc, #132]	; (800b6c8 <prvSampleTimeNow+0xa4>)
 800b642:	601e      	str	r6, [r3, #0]
}
 800b644:	4630      	mov	r0, r6
 800b646:	b002      	add	sp, #8
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b64c:	4d1f      	ldr	r5, [pc, #124]	; (800b6cc <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b64e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	b36a      	cbz	r2, 800b6b4 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b65e:	f104 0904 	add.w	r9, r4, #4
 800b662:	4648      	mov	r0, r9
 800b664:	f7fe fbe6 	bl	8009e34 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b668:	6a23      	ldr	r3, [r4, #32]
 800b66a:	4620      	mov	r0, r4
 800b66c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b66e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b672:	f013 0f04 	tst.w	r3, #4
 800b676:	d0ec      	beq.n	800b652 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b678:	69a3      	ldr	r3, [r4, #24]
 800b67a:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800b67c:	429f      	cmp	r7, r3
 800b67e:	d206      	bcs.n	800b68e <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b680:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b682:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b684:	4649      	mov	r1, r9
 800b686:	6828      	ldr	r0, [r5, #0]
 800b688:	f7fe fbbb 	bl	8009e02 <vListInsert>
 800b68c:	e7e1      	b.n	800b652 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b68e:	f8cd 8000 	str.w	r8, [sp]
 800b692:	4643      	mov	r3, r8
 800b694:	463a      	mov	r2, r7
 800b696:	4641      	mov	r1, r8
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff ff93 	bl	800b5c4 <xTimerGenericCommand>
				configASSERT( xResult );
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1d7      	bne.n	800b652 <prvSampleTimeNow+0x2e>
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	e7fe      	b.n	800b6b2 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800b6b4:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <prvSampleTimeNow+0xac>)
 800b6b6:	6810      	ldr	r0, [r2, #0]
 800b6b8:	4904      	ldr	r1, [pc, #16]	; (800b6cc <prvSampleTimeNow+0xa8>)
 800b6ba:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800b6bc:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f8ca 3000 	str.w	r3, [sl]
 800b6c4:	e7bc      	b.n	800b640 <prvSampleTimeNow+0x1c>
 800b6c6:	bf00      	nop
 800b6c8:	240016f0 	.word	0x240016f0
 800b6cc:	24001620 	.word	0x24001620
 800b6d0:	24001624 	.word	0x24001624

0800b6d4 <prvTimerTask>:
{
 800b6d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6da:	4e78      	ldr	r6, [pc, #480]	; (800b8bc <prvTimerTask+0x1e8>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6dc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800b8c4 <prvTimerTask+0x1f0>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6e0:	4d77      	ldr	r5, [pc, #476]	; (800b8c0 <prvTimerTask+0x1ec>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6e2:	6833      	ldr	r3, [r6, #0]
 800b6e4:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	f000 80da 	beq.w	800b8a0 <prvTimerTask+0x1cc>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800b6f0:	f7ff fb66 	bl	800adc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6f4:	a804      	add	r0, sp, #16
 800b6f6:	f7ff ff95 	bl	800b624 <prvSampleTimeNow>
 800b6fa:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b6fc:	9a04      	ldr	r2, [sp, #16]
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	f040 80d8 	bne.w	800b8b4 <prvTimerTask+0x1e0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b704:	42b8      	cmp	r0, r7
 800b706:	d213      	bcs.n	800b730 <prvTimerTask+0x5c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b708:	1b39      	subs	r1, r7, r4
 800b70a:	6828      	ldr	r0, [r5, #0]
 800b70c:	f7ff f88a 	bl	800a824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b710:	f7ff fbfe 	bl	800af10 <xTaskResumeAll>
 800b714:	2800      	cmp	r0, #0
 800b716:	f040 80cf 	bne.w	800b8b8 <prvTimerTask+0x1e4>
					portYIELD_WITHIN_API();
 800b71a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	e0c3      	b.n	800b8b8 <prvTimerTask+0x1e4>
				( void ) xTaskResumeAll();
 800b730:	f7ff fbee 	bl	800af10 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b734:	6833      	ldr	r3, [r6, #0]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b73c:	f109 0004 	add.w	r0, r9, #4
 800b740:	f7fe fb78 	bl	8009e34 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b744:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800b748:	f013 0f04 	tst.w	r3, #4
 800b74c:	d108      	bne.n	800b760 <prvTimerTask+0x8c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b74e:	f023 0301 	bic.w	r3, r3, #1
 800b752:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b756:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b75a:	4648      	mov	r0, r9
 800b75c:	4798      	blx	r3
}
 800b75e:	e0ab      	b.n	800b8b8 <prvTimerTask+0x1e4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b760:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800b764:	463b      	mov	r3, r7
 800b766:	4622      	mov	r2, r4
 800b768:	4439      	add	r1, r7
 800b76a:	4648      	mov	r0, r9
 800b76c:	f7ff fe9c 	bl	800b4a8 <prvInsertTimerInActiveList>
 800b770:	2800      	cmp	r0, #0
 800b772:	d0f0      	beq.n	800b756 <prvTimerTask+0x82>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b774:	2100      	movs	r1, #0
 800b776:	9100      	str	r1, [sp, #0]
 800b778:	460b      	mov	r3, r1
 800b77a:	463a      	mov	r2, r7
 800b77c:	4648      	mov	r0, r9
 800b77e:	f7ff ff21 	bl	800b5c4 <xTimerGenericCommand>
			configASSERT( xResult );
 800b782:	2800      	cmp	r0, #0
 800b784:	d1e7      	bne.n	800b756 <prvTimerTask+0x82>
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	e7fe      	b.n	800b796 <prvTimerTask+0xc2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b798:	f8d8 3000 	ldr.w	r3, [r8]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	fab2 f282 	clz	r2, r2
 800b7a2:	0952      	lsrs	r2, r2, #5
 800b7a4:	e7b0      	b.n	800b708 <prvTimerTask+0x34>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7a6:	9907      	ldr	r1, [sp, #28]
 800b7a8:	9806      	ldr	r0, [sp, #24]
 800b7aa:	9b05      	ldr	r3, [sp, #20]
 800b7ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	da09      	bge.n	800b7c8 <prvTimerTask+0xf4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	a904      	add	r1, sp, #16
 800b7b8:	6828      	ldr	r0, [r5, #0]
 800b7ba:	f7fe fe42 	bl	800a442 <xQueueReceive>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d08f      	beq.n	800b6e2 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dbee      	blt.n	800b7a6 <prvTimerTask+0xd2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7c8:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	b113      	cbz	r3, 800b7d4 <prvTimerTask+0x100>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7ce:	1d38      	adds	r0, r7, #4
 800b7d0:	f7fe fb30 	bl	8009e34 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7d4:	a803      	add	r0, sp, #12
 800b7d6:	f7ff ff25 	bl	800b624 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b7da:	9b04      	ldr	r3, [sp, #16]
 800b7dc:	2b09      	cmp	r3, #9
 800b7de:	d8e9      	bhi.n	800b7b4 <prvTimerTask+0xe0>
 800b7e0:	e8df f003 	tbb	[pc, r3]
 800b7e4:	30050505 	.word	0x30050505
 800b7e8:	05055037 	.word	0x05055037
 800b7ec:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7f2:	f043 0301 	orr.w	r3, r3, #1
 800b7f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7fa:	9b05      	ldr	r3, [sp, #20]
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	4602      	mov	r2, r0
 800b800:	4419      	add	r1, r3
 800b802:	4638      	mov	r0, r7
 800b804:	f7ff fe50 	bl	800b4a8 <prvInsertTimerInActiveList>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0d3      	beq.n	800b7b4 <prvTimerTask+0xe0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	4638      	mov	r0, r7
 800b810:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b816:	f013 0f04 	tst.w	r3, #4
 800b81a:	d0cb      	beq.n	800b7b4 <prvTimerTask+0xe0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	9400      	str	r4, [sp, #0]
 800b820:	4623      	mov	r3, r4
 800b822:	9905      	ldr	r1, [sp, #20]
 800b824:	440a      	add	r2, r1
 800b826:	4621      	mov	r1, r4
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff fecb 	bl	800b5c4 <xTimerGenericCommand>
							configASSERT( xResult );
 800b82e:	2800      	cmp	r0, #0
 800b830:	d1c0      	bne.n	800b7b4 <prvTimerTask+0xe0>
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	e7fe      	b.n	800b842 <prvTimerTask+0x16e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b844:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b848:	f023 0301 	bic.w	r3, r3, #1
 800b84c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 800b850:	e7b0      	b.n	800b7b4 <prvTimerTask+0xe0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b85e:	9905      	ldr	r1, [sp, #20]
 800b860:	61b9      	str	r1, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b862:	b131      	cbz	r1, 800b872 <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b864:	4603      	mov	r3, r0
 800b866:	4602      	mov	r2, r0
 800b868:	4401      	add	r1, r0
 800b86a:	4638      	mov	r0, r7
 800b86c:	f7ff fe1c 	bl	800b4a8 <prvInsertTimerInActiveList>
					break;
 800b870:	e7a0      	b.n	800b7b4 <prvTimerTask+0xe0>
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b882:	e7fe      	b.n	800b882 <prvTimerTask+0x1ae>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b888:	f013 0f02 	tst.w	r3, #2
 800b88c:	d004      	beq.n	800b898 <prvTimerTask+0x1c4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800b896:	e78d      	b.n	800b7b4 <prvTimerTask+0xe0>
							vPortFree( pxTimer );
 800b898:	4638      	mov	r0, r7
 800b89a:	f000 fa9d 	bl	800bdd8 <vPortFree>
 800b89e:	e789      	b.n	800b7b4 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 800b8a0:	f7ff fa8e 	bl	800adc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8a4:	a804      	add	r0, sp, #16
 800b8a6:	f7ff febd 	bl	800b624 <prvSampleTimeNow>
 800b8aa:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f43f af72 	beq.w	800b798 <prvTimerTask+0xc4>
			( void ) xTaskResumeAll();
 800b8b4:	f7ff fb2c 	bl	800af10 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8b8:	2400      	movs	r4, #0
}
 800b8ba:	e77b      	b.n	800b7b4 <prvTimerTask+0xe0>
 800b8bc:	24001620 	.word	0x24001620
 800b8c0:	24001744 	.word	0x24001744
 800b8c4:	24001624 	.word	0x24001624

0800b8c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <prvTaskExitError+0x3c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d6:	d008      	beq.n	800b8ea <prvTaskExitError+0x22>
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	e7fe      	b.n	800b8e8 <prvTaskExitError+0x20>
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8fa:	9b01      	ldr	r3, [sp, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0fc      	beq.n	800b8fa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b900:	b002      	add	sp, #8
 800b902:	4770      	bx	lr
 800b904:	24000018 	.word	0x24000018

0800b908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b908:	4808      	ldr	r0, [pc, #32]	; (800b92c <prvPortStartFirstTask+0x24>)
 800b90a:	6800      	ldr	r0, [r0, #0]
 800b90c:	6800      	ldr	r0, [r0, #0]
 800b90e:	f380 8808 	msr	MSP, r0
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f380 8814 	msr	CONTROL, r0
 800b91a:	b662      	cpsie	i
 800b91c:	b661      	cpsie	f
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	df00      	svc	0
 800b928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b92a:	0000      	.short	0x0000
 800b92c:	e000ed08 	.word	0xe000ed08

0800b930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b940 <vPortEnableVFP+0x10>
 800b934:	6801      	ldr	r1, [r0, #0]
 800b936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b93a:	6001      	str	r1, [r0, #0]
 800b93c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b93e:	0000      	.short	0x0000
 800b940:	e000ed88 	.word	0xe000ed88

0800b944 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b948:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b94c:	f021 0101 	bic.w	r1, r1, #1
 800b950:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <pxPortInitialiseStack+0x28>)
 800b956:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b95a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b95e:	f06f 0302 	mvn.w	r3, #2
 800b962:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b966:	3844      	subs	r0, #68	; 0x44
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	0800b8c9 	.word	0x0800b8c9

0800b970 <SVC_Handler>:
	__asm volatile (
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <pxCurrentTCBConst2>)
 800b972:	6819      	ldr	r1, [r3, #0]
 800b974:	6808      	ldr	r0, [r1, #0]
 800b976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97a:	f380 8809 	msr	PSP, r0
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f380 8811 	msr	BASEPRI, r0
 800b98a:	4770      	bx	lr
 800b98c:	f3af 8000 	nop.w

0800b990 <pxCurrentTCBConst2>:
 800b990:	24001124 	.word	0x24001124

0800b994 <vPortEnterCritical>:
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b9a4:	4a0b      	ldr	r2, [pc, #44]	; (800b9d4 <vPortEnterCritical+0x40>)
 800b9a6:	6813      	ldr	r3, [r2, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d000      	beq.n	800b9b2 <vPortEnterCritical+0x1e>
}
 800b9b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b9b6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b9ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9be:	d0f7      	beq.n	800b9b0 <vPortEnterCritical+0x1c>
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	e7fe      	b.n	800b9d0 <vPortEnterCritical+0x3c>
 800b9d2:	bf00      	nop
 800b9d4:	24000018 	.word	0x24000018

0800b9d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <vPortExitCritical+0x28>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	b943      	cbnz	r3, 800b9f0 <vPortExitCritical+0x18>
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	e7fe      	b.n	800b9ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	4a03      	ldr	r2, [pc, #12]	; (800ba00 <vPortExitCritical+0x28>)
 800b9f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b9f6:	b90b      	cbnz	r3, 800b9fc <vPortExitCritical+0x24>
	__asm volatile
 800b9f8:	f383 8811 	msr	BASEPRI, r3
}
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	24000018 	.word	0x24000018
	...

0800ba10 <PendSV_Handler>:
	__asm volatile
 800ba10:	f3ef 8009 	mrs	r0, PSP
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <pxCurrentTCBConst>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	f01e 0f10 	tst.w	lr, #16
 800ba20:	bf08      	it	eq
 800ba22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2a:	6010      	str	r0, [r2, #0]
 800ba2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba34:	f380 8811 	msr	BASEPRI, r0
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f7ff fb0e 	bl	800b060 <vTaskSwitchContext>
 800ba44:	f04f 0000 	mov.w	r0, #0
 800ba48:	f380 8811 	msr	BASEPRI, r0
 800ba4c:	bc09      	pop	{r0, r3}
 800ba4e:	6819      	ldr	r1, [r3, #0]
 800ba50:	6808      	ldr	r0, [r1, #0]
 800ba52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba56:	f01e 0f10 	tst.w	lr, #16
 800ba5a:	bf08      	it	eq
 800ba5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba60:	f380 8809 	msr	PSP, r0
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	f3af 8000 	nop.w

0800ba70 <pxCurrentTCBConst>:
 800ba70:	24001124 	.word	0x24001124

0800ba74 <xPortSysTickHandler>:
{
 800ba74:	b508      	push	{r3, lr}
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ba86:	f7ff f9a9 	bl	800addc <xTaskIncrementTick>
 800ba8a:	b128      	cbz	r0, 800ba98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f383 8811 	msr	BASEPRI, r3
}
 800ba9e:	bd08      	pop	{r3, pc}

0800baa0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800baa4:	2300      	movs	r3, #0
 800baa6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baa8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800baaa:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <vPortSetupTimerInterrupt+0x20>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4905      	ldr	r1, [pc, #20]	; (800bac4 <vPortSetupTimerInterrupt+0x24>)
 800bab0:	fba1 1303 	umull	r1, r3, r1, r3
 800bab4:	099b      	lsrs	r3, r3, #6
 800bab6:	3b01      	subs	r3, #1
 800bab8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800baba:	2307      	movs	r3, #7
 800babc:	6113      	str	r3, [r2, #16]
}
 800babe:	4770      	bx	lr
 800bac0:	24000000 	.word	0x24000000
 800bac4:	10624dd3 	.word	0x10624dd3

0800bac8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bac8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bacc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800bad0:	4b3e      	ldr	r3, [pc, #248]	; (800bbcc <xPortStartScheduler+0x104>)
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d03b      	beq.n	800bb4e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bada:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800bade:	4b3c      	ldr	r3, [pc, #240]	; (800bbd0 <xPortStartScheduler+0x108>)
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d03d      	beq.n	800bb60 <xPortStartScheduler+0x98>
{
 800bae4:	b530      	push	{r4, r5, lr}
 800bae6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bae8:	4b3a      	ldr	r3, [pc, #232]	; (800bbd4 <xPortStartScheduler+0x10c>)
 800baea:	781a      	ldrb	r2, [r3, #0]
 800baec:	b2d2      	uxtb	r2, r2
 800baee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800baf0:	22ff      	movs	r2, #255	; 0xff
 800baf2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bafc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb04:	4a34      	ldr	r2, [pc, #208]	; (800bbd8 <xPortStartScheduler+0x110>)
 800bb06:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb08:	4b34      	ldr	r3, [pc, #208]	; (800bbdc <xPortStartScheduler+0x114>)
 800bb0a:	2207      	movs	r2, #7
 800bb0c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb12:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb16:	d011      	beq.n	800bb3c <xPortStartScheduler+0x74>
 800bb18:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	3a01      	subs	r2, #1
 800bb2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb32:	d1f2      	bne.n	800bb1a <xPortStartScheduler+0x52>
 800bb34:	4b29      	ldr	r3, [pc, #164]	; (800bbdc <xPortStartScheduler+0x114>)
 800bb36:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb38:	2903      	cmp	r1, #3
 800bb3a:	d01a      	beq.n	800bb72 <xPortStartScheduler+0xaa>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	e7fe      	b.n	800bb4c <xPortStartScheduler+0x84>
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb5e:	e7fe      	b.n	800bb5e <xPortStartScheduler+0x96>
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb70:	e7fe      	b.n	800bb70 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb72:	4b1a      	ldr	r3, [pc, #104]	; (800bbdc <xPortStartScheduler+0x114>)
 800bb74:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bb78:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	4a15      	ldr	r2, [pc, #84]	; (800bbd4 <xPortStartScheduler+0x10c>)
 800bb80:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb82:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800bb86:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800bb8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb8e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb92:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800bb96:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb9a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800bb9e:	f7ff ff7f 	bl	800baa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bba2:	2500      	movs	r5, #0
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <xPortStartScheduler+0x118>)
 800bba6:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800bba8:	f7ff fec2 	bl	800b930 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbac:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800bbb0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbb4:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800bbb8:	f7ff fea6 	bl	800b908 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bbbc:	f7ff fa50 	bl	800b060 <vTaskSwitchContext>
	prvTaskExitError();
 800bbc0:	f7ff fe82 	bl	800b8c8 <prvTaskExitError>
}
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	b003      	add	sp, #12
 800bbc8:	bd30      	pop	{r4, r5, pc}
 800bbca:	bf00      	nop
 800bbcc:	410fc271 	.word	0x410fc271
 800bbd0:	410fc270 	.word	0x410fc270
 800bbd4:	e000e400 	.word	0xe000e400
 800bbd8:	2400174c 	.word	0x2400174c
 800bbdc:	24001750 	.word	0x24001750
 800bbe0:	24000018 	.word	0x24000018

0800bbe4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbe4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbe8:	2b0f      	cmp	r3, #15
 800bbea:	d90f      	bls.n	800bc0c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbec:	4a11      	ldr	r2, [pc, #68]	; (800bc34 <vPortValidateInterruptPriority+0x50>)
 800bbee:	5c9b      	ldrb	r3, [r3, r2]
 800bbf0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbf2:	4a11      	ldr	r2, [pc, #68]	; (800bc38 <vPortValidateInterruptPriority+0x54>)
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d908      	bls.n	800bc0c <vPortValidateInterruptPriority+0x28>
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	e7fe      	b.n	800bc0a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bc10:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bc14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc18:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <vPortValidateInterruptPriority+0x58>)
 800bc1a:	6812      	ldr	r2, [r2, #0]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d908      	bls.n	800bc32 <vPortValidateInterruptPriority+0x4e>
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	e7fe      	b.n	800bc30 <vPortValidateInterruptPriority+0x4c>
	}
 800bc32:	4770      	bx	lr
 800bc34:	e000e3f0 	.word	0xe000e3f0
 800bc38:	2400174c 	.word	0x2400174c
 800bc3c:	24001750 	.word	0x24001750

0800bc40 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc40:	4b15      	ldr	r3, [pc, #84]	; (800bc98 <prvInsertBlockIntoFreeList+0x58>)
 800bc42:	461a      	mov	r2, r3
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4283      	cmp	r3, r0
 800bc48:	d3fb      	bcc.n	800bc42 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc4a:	6851      	ldr	r1, [r2, #4]
 800bc4c:	eb02 0c01 	add.w	ip, r2, r1
 800bc50:	4560      	cmp	r0, ip
 800bc52:	d009      	beq.n	800bc68 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc54:	6841      	ldr	r1, [r0, #4]
 800bc56:	eb00 0c01 	add.w	ip, r0, r1
 800bc5a:	4563      	cmp	r3, ip
 800bc5c:	d009      	beq.n	800bc72 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc5e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc60:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc62:	bf18      	it	ne
 800bc64:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800bc66:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc68:	6840      	ldr	r0, [r0, #4]
 800bc6a:	4401      	add	r1, r0
 800bc6c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800bc6e:	4610      	mov	r0, r2
 800bc70:	e7f0      	b.n	800bc54 <prvInsertBlockIntoFreeList+0x14>
{
 800bc72:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc74:	4c09      	ldr	r4, [pc, #36]	; (800bc9c <prvInsertBlockIntoFreeList+0x5c>)
 800bc76:	6824      	ldr	r4, [r4, #0]
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d00b      	beq.n	800bc94 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4419      	add	r1, r3
 800bc80:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800bc88:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc8a:	bf18      	it	ne
 800bc8c:	6010      	strne	r0, [r2, #0]
	}
}
 800bc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc92:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc94:	6004      	str	r4, [r0, #0]
 800bc96:	e7f7      	b.n	800bc88 <prvInsertBlockIntoFreeList+0x48>
 800bc98:	2400536c 	.word	0x2400536c
 800bc9c:	24001754 	.word	0x24001754

0800bca0 <pvPortMalloc>:
{
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bca4:	f7ff f88c 	bl	800adc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bca8:	4b44      	ldr	r3, [pc, #272]	; (800bdbc <pvPortMalloc+0x11c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	b1b3      	cbz	r3, 800bcdc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcae:	4b44      	ldr	r3, [pc, #272]	; (800bdc0 <pvPortMalloc+0x120>)
 800bcb0:	681d      	ldr	r5, [r3, #0]
 800bcb2:	4225      	tst	r5, r4
 800bcb4:	d17d      	bne.n	800bdb2 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 800bcb6:	2c00      	cmp	r4, #0
 800bcb8:	d07b      	beq.n	800bdb2 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 800bcba:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcbe:	f014 0f07 	tst.w	r4, #7
 800bcc2:	d002      	beq.n	800bcca <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcc4:	f022 0207 	bic.w	r2, r2, #7
 800bcc8:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcca:	2a00      	cmp	r2, #0
 800bccc:	d071      	beq.n	800bdb2 <pvPortMalloc+0x112>
 800bcce:	4b3d      	ldr	r3, [pc, #244]	; (800bdc4 <pvPortMalloc+0x124>)
 800bcd0:	681e      	ldr	r6, [r3, #0]
 800bcd2:	4296      	cmp	r6, r2
 800bcd4:	d36d      	bcc.n	800bdb2 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 800bcd6:	493c      	ldr	r1, [pc, #240]	; (800bdc8 <pvPortMalloc+0x128>)
 800bcd8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcda:	e027      	b.n	800bd2c <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 800bcdc:	4a3b      	ldr	r2, [pc, #236]	; (800bdcc <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcde:	f012 0f07 	tst.w	r2, #7
 800bce2:	d007      	beq.n	800bcf4 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bce4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bce6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcea:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 800bcee:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcf0:	460a      	mov	r2, r1
 800bcf2:	e001      	b.n	800bcf8 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcf4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcf8:	4833      	ldr	r0, [pc, #204]	; (800bdc8 <pvPortMalloc+0x128>)
 800bcfa:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd00:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800bd02:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd04:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800bd08:	482c      	ldr	r0, [pc, #176]	; (800bdbc <pvPortMalloc+0x11c>)
 800bd0a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800bd0c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd0e:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd10:	1a99      	subs	r1, r3, r2
 800bd12:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd14:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd16:	4b2e      	ldr	r3, [pc, #184]	; (800bdd0 <pvPortMalloc+0x130>)
 800bd18:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd1a:	4b2a      	ldr	r3, [pc, #168]	; (800bdc4 <pvPortMalloc+0x124>)
 800bd1c:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd1e:	4b28      	ldr	r3, [pc, #160]	; (800bdc0 <pvPortMalloc+0x120>)
 800bd20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	e7c2      	b.n	800bcae <pvPortMalloc+0xe>
 800bd28:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd2a:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d202      	bcs.n	800bd38 <pvPortMalloc+0x98>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1f7      	bne.n	800bd28 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 800bd38:	4b20      	ldr	r3, [pc, #128]	; (800bdbc <pvPortMalloc+0x11c>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d038      	beq.n	800bdb2 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd40:	680f      	ldr	r7, [r1, #0]
 800bd42:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	2b10      	cmp	r3, #16
 800bd4e:	d910      	bls.n	800bd72 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd50:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd52:	f010 0f07 	tst.w	r0, #7
 800bd56:	d008      	beq.n	800bd6a <pvPortMalloc+0xca>
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	e7fe      	b.n	800bd68 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd6a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd6c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd6e:	f7ff ff67 	bl	800bc40 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd72:	6863      	ldr	r3, [r4, #4]
 800bd74:	1af6      	subs	r6, r6, r3
 800bd76:	4a13      	ldr	r2, [pc, #76]	; (800bdc4 <pvPortMalloc+0x124>)
 800bd78:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd7a:	4a15      	ldr	r2, [pc, #84]	; (800bdd0 <pvPortMalloc+0x130>)
 800bd7c:	6812      	ldr	r2, [r2, #0]
 800bd7e:	4296      	cmp	r6, r2
 800bd80:	d201      	bcs.n	800bd86 <pvPortMalloc+0xe6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd82:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <pvPortMalloc+0x130>)
 800bd84:	6016      	str	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd86:	431d      	orrs	r5, r3
 800bd88:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800bd8e:	4a11      	ldr	r2, [pc, #68]	; (800bdd4 <pvPortMalloc+0x134>)
 800bd90:	6813      	ldr	r3, [r2, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800bd96:	f7ff f8bb 	bl	800af10 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd9a:	f017 0f07 	tst.w	r7, #7
 800bd9e:	d00b      	beq.n	800bdb8 <pvPortMalloc+0x118>
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	e7fe      	b.n	800bdb0 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 800bdb2:	f7ff f8ad 	bl	800af10 <xTaskResumeAll>
 800bdb6:	2700      	movs	r7, #0
}
 800bdb8:	4638      	mov	r0, r7
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdbc:	24001754 	.word	0x24001754
 800bdc0:	24005358 	.word	0x24005358
 800bdc4:	2400535c 	.word	0x2400535c
 800bdc8:	2400536c 	.word	0x2400536c
 800bdcc:	24001758 	.word	0x24001758
 800bdd0:	24005360 	.word	0x24005360
 800bdd4:	24005364 	.word	0x24005364

0800bdd8 <vPortFree>:
	if( pv != NULL )
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d033      	beq.n	800be44 <vPortFree+0x6c>
{
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bde0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bde4:	4a18      	ldr	r2, [pc, #96]	; (800be48 <vPortFree+0x70>)
 800bde6:	6812      	ldr	r2, [r2, #0]
 800bde8:	4213      	tst	r3, r2
 800bdea:	d108      	bne.n	800bdfe <vPortFree+0x26>
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	e7fe      	b.n	800bdfc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdfe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800be02:	b141      	cbz	r1, 800be16 <vPortFree+0x3e>
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	e7fe      	b.n	800be14 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be16:	ea23 0302 	bic.w	r3, r3, r2
 800be1a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800be1e:	f7fe ffcf 	bl	800adc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be22:	4a0a      	ldr	r2, [pc, #40]	; (800be4c <vPortFree+0x74>)
 800be24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800be28:	6811      	ldr	r1, [r2, #0]
 800be2a:	440b      	add	r3, r1
 800be2c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be2e:	f1a4 0008 	sub.w	r0, r4, #8
 800be32:	f7ff ff05 	bl	800bc40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be36:	4a06      	ldr	r2, [pc, #24]	; (800be50 <vPortFree+0x78>)
 800be38:	6813      	ldr	r3, [r2, #0]
 800be3a:	3301      	adds	r3, #1
 800be3c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800be3e:	f7ff f867 	bl	800af10 <xTaskResumeAll>
}
 800be42:	bd10      	pop	{r4, pc}
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	24005358 	.word	0x24005358
 800be4c:	2400535c 	.word	0x2400535c
 800be50:	24005368 	.word	0x24005368

0800be54 <__tcf_0>:



void initCortex() {
//	static WatchdogThread watchdog(&hiwdg1);
	static ProberThread prober1(&hi2c1);
 800be54:	4770      	bx	lr

0800be56 <__tcf_1>:
	static ProberThread prober2(&hi2c2);
 800be56:	4770      	bx	lr

0800be58 <__tcf_2>:
	static ProberThread prober3(&hi2c4);
 800be58:	4770      	bx	lr
	...

0800be5c <_Z10initCortexv>:
void initCortex() {
 800be5c:	b510      	push	{r4, lr}
	static ProberThread prober1(&hi2c1);
 800be5e:	4b33      	ldr	r3, [pc, #204]	; (800bf2c <_Z10initCortexv+0xd0>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f3bf 8f5b 	dmb	ish
 800be66:	f013 0f01 	tst.w	r3, #1
 800be6a:	d00e      	beq.n	800be8a <_Z10initCortexv+0x2e>
	static ProberThread prober2(&hi2c2);
 800be6c:	4b30      	ldr	r3, [pc, #192]	; (800bf30 <_Z10initCortexv+0xd4>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	f3bf 8f5b 	dmb	ish
 800be74:	f013 0f01 	tst.w	r3, #1
 800be78:	d022      	beq.n	800bec0 <_Z10initCortexv+0x64>
	static ProberThread prober3(&hi2c4);
 800be7a:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <_Z10initCortexv+0xd8>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f3bf 8f5b 	dmb	ish
 800be82:	f013 0f01 	tst.w	r3, #1
 800be86:	d036      	beq.n	800bef6 <_Z10initCortexv+0x9a>
}
 800be88:	bd10      	pop	{r4, pc}
	static ProberThread prober1(&hi2c1);
 800be8a:	4828      	ldr	r0, [pc, #160]	; (800bf2c <_Z10initCortexv+0xd0>)
 800be8c:	f002 f80a 	bl	800dea4 <__cxa_guard_acquire>
 800be90:	2800      	cmp	r0, #0
 800be92:	d0eb      	beq.n	800be6c <_Z10initCortexv+0x10>
#include <stdio.h>
#include <string.h>

class ProberThread : Thread {
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
 800be94:	4c28      	ldr	r4, [pc, #160]	; (800bf38 <_Z10initCortexv+0xdc>)
 800be96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be9a:	4928      	ldr	r1, [pc, #160]	; (800bf3c <_Z10initCortexv+0xe0>)
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fa48 	bl	800c332 <_ZN6ThreadC1EPKcm>
 800bea2:	4b27      	ldr	r3, [pc, #156]	; (800bf40 <_Z10initCortexv+0xe4>)
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	4b27      	ldr	r3, [pc, #156]	; (800bf44 <_Z10initCortexv+0xe8>)
 800bea8:	6363      	str	r3, [r4, #52]	; 0x34
 800beaa:	2300      	movs	r3, #0
 800beac:	63e3      	str	r3, [r4, #60]	; 0x3c
 800beae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800beb2:	4825      	ldr	r0, [pc, #148]	; (800bf48 <_Z10initCortexv+0xec>)
 800beb4:	f002 fc02 	bl	800e6bc <atexit>
 800beb8:	481c      	ldr	r0, [pc, #112]	; (800bf2c <_Z10initCortexv+0xd0>)
 800beba:	f001 ffff 	bl	800debc <__cxa_guard_release>
 800bebe:	e7d5      	b.n	800be6c <_Z10initCortexv+0x10>
	static ProberThread prober2(&hi2c2);
 800bec0:	481b      	ldr	r0, [pc, #108]	; (800bf30 <_Z10initCortexv+0xd4>)
 800bec2:	f001 ffef 	bl	800dea4 <__cxa_guard_acquire>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0d7      	beq.n	800be7a <_Z10initCortexv+0x1e>
 800beca:	4c20      	ldr	r4, [pc, #128]	; (800bf4c <_Z10initCortexv+0xf0>)
 800becc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bed0:	491a      	ldr	r1, [pc, #104]	; (800bf3c <_Z10initCortexv+0xe0>)
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 fa2d 	bl	800c332 <_ZN6ThreadC1EPKcm>
 800bed8:	4b19      	ldr	r3, [pc, #100]	; (800bf40 <_Z10initCortexv+0xe4>)
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	4b1c      	ldr	r3, [pc, #112]	; (800bf50 <_Z10initCortexv+0xf4>)
 800bede:	6363      	str	r3, [r4, #52]	; 0x34
 800bee0:	2300      	movs	r3, #0
 800bee2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bee4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bee8:	481a      	ldr	r0, [pc, #104]	; (800bf54 <_Z10initCortexv+0xf8>)
 800beea:	f002 fbe7 	bl	800e6bc <atexit>
 800beee:	4810      	ldr	r0, [pc, #64]	; (800bf30 <_Z10initCortexv+0xd4>)
 800bef0:	f001 ffe4 	bl	800debc <__cxa_guard_release>
 800bef4:	e7c1      	b.n	800be7a <_Z10initCortexv+0x1e>
	static ProberThread prober3(&hi2c4);
 800bef6:	480f      	ldr	r0, [pc, #60]	; (800bf34 <_Z10initCortexv+0xd8>)
 800bef8:	f001 ffd4 	bl	800dea4 <__cxa_guard_acquire>
 800befc:	2800      	cmp	r0, #0
 800befe:	d0c3      	beq.n	800be88 <_Z10initCortexv+0x2c>
 800bf00:	4c15      	ldr	r4, [pc, #84]	; (800bf58 <_Z10initCortexv+0xfc>)
 800bf02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf06:	490d      	ldr	r1, [pc, #52]	; (800bf3c <_Z10initCortexv+0xe0>)
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fa12 	bl	800c332 <_ZN6ThreadC1EPKcm>
 800bf0e:	4b0c      	ldr	r3, [pc, #48]	; (800bf40 <_Z10initCortexv+0xe4>)
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <_Z10initCortexv+0x100>)
 800bf14:	6363      	str	r3, [r4, #52]	; 0x34
 800bf16:	2300      	movs	r3, #0
 800bf18:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bf1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bf1e:	4810      	ldr	r0, [pc, #64]	; (800bf60 <_Z10initCortexv+0x104>)
 800bf20:	f002 fbcc 	bl	800e6bc <atexit>
 800bf24:	4803      	ldr	r0, [pc, #12]	; (800bf34 <_Z10initCortexv+0xd8>)
 800bf26:	f001 ffc9 	bl	800debc <__cxa_guard_release>
}
 800bf2a:	e7ad      	b.n	800be88 <_Z10initCortexv+0x2c>
 800bf2c:	24005374 	.word	0x24005374
 800bf30:	24005378 	.word	0x24005378
 800bf34:	2400537c 	.word	0x2400537c
 800bf38:	24005380 	.word	0x24005380
 800bf3c:	08011258 	.word	0x08011258
 800bf40:	08011890 	.word	0x08011890
 800bf44:	240002dc 	.word	0x240002dc
 800bf48:	0800be55 	.word	0x0800be55
 800bf4c:	240053c4 	.word	0x240053c4
 800bf50:	24000328 	.word	0x24000328
 800bf54:	0800be57 	.word	0x0800be57
 800bf58:	24005408 	.word	0x24005408
 800bf5c:	24000374 	.word	0x24000374
 800bf60:	0800be59 	.word	0x0800be59

0800bf64 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800bf64:	b508      	push	{r3, lr}
 800bf66:	468c      	mov	ip, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bf68:	6803      	ldr	r3, [r0, #0]
 800bf6a:	6811      	ldr	r1, [r2, #0]
 800bf6c:	f89c 0000 	ldrb.w	r0, [ip]
 800bf70:	4798      	blx	r3
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 800bf72:	bd08      	pop	{r3, pc}

0800bf74 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 800bf74:	b132      	cbz	r2, 800bf84 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
 800bf76:	2a01      	cmp	r2, #1
 800bf78:	d008      	beq.n	800bf8c <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x18>
	  switch (__op)
 800bf7a:	2a02      	cmp	r2, #2
 800bf7c:	d104      	bne.n	800bf88 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800bf7e:	680b      	ldr	r3, [r1, #0]
 800bf80:	6003      	str	r3, [r0, #0]
	      break;
 800bf82:	e001      	b.n	800bf88 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800bf86:	6003      	str	r3, [r0, #0]
      }
 800bf88:	2000      	movs	r0, #0
 800bf8a:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800bf8c:	6001      	str	r1, [r0, #0]
	    break;
 800bf8e:	e7fb      	b.n	800bf88 <_ZNSt17_Function_handlerIFvhP22sc_trap_success_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 800bf90:	080112c4 	.word	0x080112c4

0800bf94 <_Z11test_handlehP22sc_trap_success_packet>:
}


//static STMUARTDriver{&UART2_driver};

void test_handle(uint8_t sender_id, sc_trap_success_packet* packet) {
 800bf94:	b500      	push	{lr}
 800bf96:	b083      	sub	sp, #12
	volatile bool test = packet->status;
 800bf98:	780b      	ldrb	r3, [r1, #0]
 800bf9a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (test) {
 800bf9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfa2:	b913      	cbnz	r3, 800bfaa <_Z11test_handlehP22sc_trap_success_packet+0x16>
		osDelay(1);
	}
}
 800bfa4:	b003      	add	sp, #12
 800bfa6:	f85d fb04 	ldr.w	pc, [sp], #4
		osDelay(1);
 800bfaa:	2001      	movs	r0, #1
 800bfac:	f7fd fee9 	bl	8009d82 <osDelay>
}
 800bfb0:	e7f8      	b.n	800bfa4 <_Z11test_handlehP22sc_trap_success_packet+0x10>
	...

0800bfb4 <_Z11getInstanceP20__UART_HandleTypeDef>:
STMUARTDriver* getInstance(UART_HandleTypeDef* huart) {
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	4606      	mov	r6, r0
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_Z11getInstanceP20__UART_HandleTypeDef+0x1c>)
 800bfba:	681c      	ldr	r4, [r3, #0]
 800bfbc:	4625      	mov	r5, r4
		if (driver->getHuart() == huart)
 800bfbe:	3404      	adds	r4, #4
 800bfc0:	6828      	ldr	r0, [r5, #0]
 800bfc2:	f001 fcb9 	bl	800d938 <_ZN13STMUARTDriver8getHuartEv>
 800bfc6:	4286      	cmp	r6, r0
 800bfc8:	d1f8      	bne.n	800bfbc <_Z11getInstanceP20__UART_HandleTypeDef+0x8>
}
 800bfca:	6828      	ldr	r0, [r5, #0]
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	bf00      	nop
 800bfd0:	24009280 	.word	0x24009280

0800bfd4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size) {
 800bfd4:	b508      	push	{r3, lr}
	STMUARTDriver* driver = getInstance(huart);
 800bfd6:	f7ff ffed 	bl	800bfb4 <_Z11getInstanceP20__UART_HandleTypeDef>
	xSemaphoreGiveFromISR(driver->getSemaphore(), nullptr);
 800bfda:	f001 fcab 	bl	800d934 <_ZN13STMUARTDriver12getSemaphoreEv>
 800bfde:	2100      	movs	r1, #0
 800bfe0:	f7fe f9d8 	bl	800a394 <xQueueGiveFromISR>
}
 800bfe4:	bd08      	pop	{r3, pc}

0800bfe6 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 800bfe6:	b538      	push	{r3, r4, r5, lr}
	STMUARTDriver* driver = getInstance(huart);
 800bfe8:	f7ff ffe4 	bl	800bfb4 <_Z11getInstanceP20__UART_HandleTypeDef>
 800bfec:	4604      	mov	r4, r0
	while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
 800bfee:	2500      	movs	r5, #0
 800bff0:	4620      	mov	r0, r4
 800bff2:	f001 fc9f 	bl	800d934 <_ZN13STMUARTDriver12getSemaphoreEv>
 800bff6:	462a      	mov	r2, r5
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7fe fbab 	bl	800a754 <xQueueReceiveFromISR>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d1f6      	bne.n	800bff0 <HAL_UART_ErrorCallback+0xa>
	driver->init();
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	4620      	mov	r0, r4
 800c008:	4798      	blx	r3
}
 800c00a:	bd38      	pop	{r3, r4, r5, pc}

0800c00c <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800c00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	468a      	mov	sl, r1
 800c012:	4693      	mov	fp, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c014:	6847      	ldr	r7, [r0, #4]
 800c016:	f8d0 8000 	ldr.w	r8, [r0]
 800c01a:	eba7 0208 	sub.w	r2, r7, r8

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800c01e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 800c022:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 800c026:	d011      	beq.n	800c04c <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x40>
 800c028:	4605      	mov	r5, r0
 800c02a:	1093      	asrs	r3, r2, #2
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	bf2c      	ite	cs
 800c030:	18da      	addcs	r2, r3, r3
 800c032:	1c5a      	addcc	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c034:	4293      	cmp	r3, r2
 800c036:	d81c      	bhi.n	800c072 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
 800c038:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 800c03c:	4591      	cmp	r9, r2
 800c03e:	bf28      	it	cs
 800c040:	4691      	movcs	r9, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c042:	ebaa 0408 	sub.w	r4, sl, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c046:	b9c2      	cbnz	r2, 800c07a <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 800c048:	2600      	movs	r6, #0
 800c04a:	e01b      	b.n	800c084 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __throw_length_error(__N(__s));
 800c04c:	481e      	ldr	r0, [pc, #120]	; (800c0c8 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
 800c04e:	f002 fa79 	bl	800e544 <_ZSt20__throw_length_errorPKc>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800c052:	4622      	mov	r2, r4
 800c054:	4641      	mov	r1, r8
 800c056:	4630      	mov	r0, r6
 800c058:	f002 fc68 	bl	800e92c <memmove>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 800c05c:	3404      	adds	r4, #4
 800c05e:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 800c060:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
 800c064:	2f00      	cmp	r7, #0
 800c066:	dc18      	bgt.n	800c09a <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
      return __result + __count;
 800c068:	443c      	add	r4, r7
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800c06a:	68a9      	ldr	r1, [r5, #8]
 800c06c:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
 800c070:	e01f      	b.n	800c0b2 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
 800c072:	ebaa 0408 	sub.w	r4, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c076:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c07a:	ea4f 0089 	mov.w	r0, r9, lsl #2
 800c07e:	f000 f963 	bl	800c348 <_Znwj>
 800c082:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c084:	f8db 3000 	ldr.w	r3, [fp]
 800c088:	5133      	str	r3, [r6, r4]
      if (__count > 0)
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	dce1      	bgt.n	800c052 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	      ++__new_finish;
 800c08e:	3404      	adds	r4, #4
 800c090:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 800c092:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
 800c096:	2f00      	cmp	r7, #0
 800c098:	dd04      	ble.n	800c0a4 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800c09a:	463a      	mov	r2, r7
 800c09c:	4651      	mov	r1, sl
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f002 fc36 	bl	800e910 <memcpy>
      return __result + __count;
 800c0a4:	443c      	add	r4, r7
	if (__p)
 800c0a6:	f1b8 0f00 	cmp.w	r8, #0
 800c0aa:	d005      	beq.n	800c0b8 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 800c0ac:	68a9      	ldr	r1, [r5, #8]
 800c0ae:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	f001 fede 	bl	800de74 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800c0b8:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 800c0ba:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c0bc:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800c0c0:	60ae      	str	r6, [r5, #8]
    }
 800c0c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c6:	bf00      	nop
 800c0c8:	08011260 	.word	0x08011260

0800c0cc <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800c0cc:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c0ce:	6843      	ldr	r3, [r0, #4]
 800c0d0:	6882      	ldr	r2, [r0, #8]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d005      	beq.n	800c0e2 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c0d6:	680a      	ldr	r2, [r1, #0]
 800c0d8:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 800c0da:	6843      	ldr	r3, [r0, #4]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	6043      	str	r3, [r0, #4]
      }
 800c0e0:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f7ff ff91 	bl	800c00c <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800c0ea:	e7f9      	b.n	800c0e0 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>

0800c0ec <_Z14setupTelemetryv>:

void setupTelemetry() {
 800c0ec:	b530      	push	{r4, r5, lr}
 800c0ee:	b089      	sub	sp, #36	; 0x24
#if defined(BUILD_FOR_NAVIGATION)
	STMUARTDriver_list.push_back(&UART2_driver);
 800c0f0:	4b1f      	ldr	r3, [pc, #124]	; (800c170 <_Z14setupTelemetryv+0x84>)
 800c0f2:	9300      	str	r3, [sp, #0]
      { emplace_back(std::move(__x)); }
 800c0f4:	4c1f      	ldr	r4, [pc, #124]	; (800c174 <_Z14setupTelemetryv+0x88>)
 800c0f6:	4669      	mov	r1, sp
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7ff ffe7 	bl	800c0cc <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	STMUARTDriver_list.push_back(&UART1_driver);
 800c0fe:	4b1e      	ldr	r3, [pc, #120]	; (800c178 <_Z14setupTelemetryv+0x8c>)
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	a901      	add	r1, sp, #4
 800c104:	4620      	mov	r0, r4
 800c106:	f7ff ffe1 	bl	800c0cc <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	STMUARTDriver_list.push_back(&UART3_driver);
 800c10a:	4b1c      	ldr	r3, [pc, #112]	; (800c17c <_Z14setupTelemetryv+0x90>)
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	a902      	add	r1, sp, #8
 800c110:	4620      	mov	r0, r4
 800c112:	f7ff ffdb 	bl	800c0cc <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	STMUARTDriver_list.push_back(&UART6_driver);
 800c116:	4b1a      	ldr	r3, [pc, #104]	; (800c180 <_Z14setupTelemetryv+0x94>)
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	a903      	add	r1, sp, #12
 800c11c:	4620      	mov	r0, r4
 800c11e:	f7ff ffd5 	bl	800c0cc <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	network.forward<sc_LED_packet>(&UART1_network);
 800c122:	4c18      	ldr	r4, [pc, #96]	; (800c184 <_Z14setupTelemetryv+0x98>)
 800c124:	4d18      	ldr	r5, [pc, #96]	; (800c188 <_Z14setupTelemetryv+0x9c>)
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 fd67 	bl	800cbfc <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_>
	network.forward<sc_trap_packet>(&UART1_network);
 800c12e:	4621      	mov	r1, r4
 800c130:	4628      	mov	r0, r5
 800c132:	f000 fcaf 	bl	800ca94 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_>
	UART1_network.forward<sc_trap_success_packet>(&network);
 800c136:	4629      	mov	r1, r5
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fd05 	bl	800cb48 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_>
	UART1_network.forward<sc_caching_success_packet>(&network);
 800c13e:	4629      	mov	r1, r5
 800c140:	4620      	mov	r0, r4
 800c142:	f000 fc4d 	bl	800c9e0 <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_>
	osDelay(100);
 800c146:	2064      	movs	r0, #100	; 0x64
 800c148:	f7fd fe1b 	bl	8009d82 <osDelay>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c14c:	4b0f      	ldr	r3, [pc, #60]	; (800c18c <_Z14setupTelemetryv+0xa0>)
 800c14e:	9304      	str	r3, [sp, #16]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 800c150:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <_Z14setupTelemetryv+0xa4>)
 800c152:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <_Z14setupTelemetryv+0xa8>)
 800c156:	9306      	str	r3, [sp, #24]
	UART1_network.handle<sc_trap_success_packet>(&test_handle);
 800c158:	a904      	add	r1, sp, #16
 800c15a:	4620      	mov	r0, r4
 800c15c:	f001 f9ca 	bl	800d4f4 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE>
      if (_M_manager)
 800c160:	9b06      	ldr	r3, [sp, #24]
 800c162:	b11b      	cbz	r3, 800c16c <_Z14setupTelemetryv+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c164:	2203      	movs	r2, #3
 800c166:	a904      	add	r1, sp, #16
 800c168:	4608      	mov	r0, r1
 800c16a:	4798      	blx	r3

//	network.handle<sc_LED_packet>(&handle_led);
////	network.forward<sc_LED_packet>(&UART6_network);
//	network.forward<sc_LED_packet>(&UART1_network);

}
 800c16c:	b009      	add	sp, #36	; 0x24
 800c16e:	bd30      	pop	{r4, r5, pc}
 800c170:	240068e0 	.word	0x240068e0
 800c174:	24009280 	.word	0x24009280
 800c178:	2400544c 	.word	0x2400544c
 800c17c:	24006958 	.word	0x24006958
 800c180:	24007dec 	.word	0x24007dec
 800c184:	240054c4 	.word	0x240054c4
 800c188:	2400928c 	.word	0x2400928c
 800c18c:	0800bf95 	.word	0x0800bf95
 800c190:	0800bf65 	.word	0x0800bf65
 800c194:	0800bf75 	.word	0x0800bf75

0800c198 <_GLOBAL__sub_I_UART2_driver>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STMUARTDriver UART2_driver(&huart2);
 800c19a:	4c15      	ldr	r4, [pc, #84]	; (800c1f0 <_GLOBAL__sub_I_UART2_driver+0x58>)
 800c19c:	4915      	ldr	r1, [pc, #84]	; (800c1f4 <_GLOBAL__sub_I_UART2_driver+0x5c>)
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f001 fb96 	bl	800d8d0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
	STMUARTDriver UART1_driver(&huart1);
 800c1a4:	4e14      	ldr	r6, [pc, #80]	; (800c1f8 <_GLOBAL__sub_I_UART2_driver+0x60>)
 800c1a6:	4915      	ldr	r1, [pc, #84]	; (800c1fc <_GLOBAL__sub_I_UART2_driver+0x64>)
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f001 fb91 	bl	800d8d0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
	STMUARTDriver UART3_driver(&huart3);
 800c1ae:	4d14      	ldr	r5, [pc, #80]	; (800c200 <_GLOBAL__sub_I_UART2_driver+0x68>)
 800c1b0:	4914      	ldr	r1, [pc, #80]	; (800c204 <_GLOBAL__sub_I_UART2_driver+0x6c>)
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f001 fb8c 	bl	800d8d0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
	STMUARTDriver UART6_driver(&huart6);
 800c1b8:	4f13      	ldr	r7, [pc, #76]	; (800c208 <_GLOBAL__sub_I_UART2_driver+0x70>)
 800c1ba:	4914      	ldr	r1, [pc, #80]	; (800c20c <_GLOBAL__sub_I_UART2_driver+0x74>)
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f001 fb87 	bl	800d8d0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
	NetworkBus UART6_network(&UART6_driver);
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	4812      	ldr	r0, [pc, #72]	; (800c210 <_GLOBAL__sub_I_UART2_driver+0x78>)
 800c1c6:	f001 fa95 	bl	800d6f4 <_ZN10NetworkBusC1EP8IODriver>
	NetworkBus UART1_network(&UART1_driver);
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4811      	ldr	r0, [pc, #68]	; (800c214 <_GLOBAL__sub_I_UART2_driver+0x7c>)
 800c1ce:	f001 fa91 	bl	800d6f4 <_ZN10NetworkBusC1EP8IODriver>
	NetworkBus UART3_network(&UART3_driver);
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4810      	ldr	r0, [pc, #64]	; (800c218 <_GLOBAL__sub_I_UART2_driver+0x80>)
 800c1d6:	f001 fa8d 	bl	800d6f4 <_ZN10NetworkBusC1EP8IODriver>
	NetworkBus network(&UART2_driver);
 800c1da:	4621      	mov	r1, r4
 800c1dc:	480f      	ldr	r0, [pc, #60]	; (800c21c <_GLOBAL__sub_I_UART2_driver+0x84>)
 800c1de:	f001 fa89 	bl	800d6f4 <_ZN10NetworkBusC1EP8IODriver>
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <_GLOBAL__sub_I_UART2_driver+0x88>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]
 800c1e8:	605a      	str	r2, [r3, #4]
 800c1ea:	609a      	str	r2, [r3, #8]
}
 800c1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	240068e0 	.word	0x240068e0
 800c1f4:	240007b0 	.word	0x240007b0
 800c1f8:	2400544c 	.word	0x2400544c
 800c1fc:	24000720 	.word	0x24000720
 800c200:	24006958 	.word	0x24006958
 800c204:	24000840 	.word	0x24000840
 800c208:	24007dec 	.word	0x24007dec
 800c20c:	240008d0 	.word	0x240008d0
 800c210:	24007e64 	.word	0x24007e64
 800c214:	240054c4 	.word	0x240054c4
 800c218:	240069d0 	.word	0x240069d0
 800c21c:	2400928c 	.word	0x2400928c
 800c220:	24009280 	.word	0x24009280

0800c224 <_GLOBAL__sub_D_UART2_driver>:
 800c224:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <_GLOBAL__sub_D_UART2_driver+0x44>)
 800c228:	6818      	ldr	r0, [r3, #0]
	if (__p)
 800c22a:	b118      	cbz	r0, 800c234 <_GLOBAL__sub_D_UART2_driver+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c22c:	6899      	ldr	r1, [r3, #8]
	::operator delete(__p
 800c22e:	1a09      	subs	r1, r1, r0
 800c230:	f001 fe20 	bl	800de74 <_ZdlPvj>
	NetworkBus network(&UART2_driver);
 800c234:	480d      	ldr	r0, [pc, #52]	; (800c26c <_GLOBAL__sub_D_UART2_driver+0x48>)
 800c236:	f001 fa47 	bl	800d6c8 <_ZN10NetworkBusD1Ev>
	NetworkBus UART3_network(&UART3_driver);
 800c23a:	480d      	ldr	r0, [pc, #52]	; (800c270 <_GLOBAL__sub_D_UART2_driver+0x4c>)
 800c23c:	f001 fa44 	bl	800d6c8 <_ZN10NetworkBusD1Ev>
	NetworkBus UART1_network(&UART1_driver);
 800c240:	480c      	ldr	r0, [pc, #48]	; (800c274 <_GLOBAL__sub_D_UART2_driver+0x50>)
 800c242:	f001 fa41 	bl	800d6c8 <_ZN10NetworkBusD1Ev>
	NetworkBus UART6_network(&UART6_driver);
 800c246:	480c      	ldr	r0, [pc, #48]	; (800c278 <_GLOBAL__sub_D_UART2_driver+0x54>)
 800c248:	f001 fa3e 	bl	800d6c8 <_ZN10NetworkBusD1Ev>
	STMUARTDriver UART6_driver(&huart6);
 800c24c:	480b      	ldr	r0, [pc, #44]	; (800c27c <_GLOBAL__sub_D_UART2_driver+0x58>)
 800c24e:	f001 fb17 	bl	800d880 <_ZN13STMUARTDriverD1Ev>
	STMUARTDriver UART3_driver(&huart3);
 800c252:	480b      	ldr	r0, [pc, #44]	; (800c280 <_GLOBAL__sub_D_UART2_driver+0x5c>)
 800c254:	f001 fb14 	bl	800d880 <_ZN13STMUARTDriverD1Ev>
	STMUARTDriver UART1_driver(&huart1);
 800c258:	480a      	ldr	r0, [pc, #40]	; (800c284 <_GLOBAL__sub_D_UART2_driver+0x60>)
 800c25a:	f001 fb11 	bl	800d880 <_ZN13STMUARTDriverD1Ev>
	STMUARTDriver UART2_driver(&huart2);
 800c25e:	480a      	ldr	r0, [pc, #40]	; (800c288 <_GLOBAL__sub_D_UART2_driver+0x64>)
 800c260:	f001 fb0e 	bl	800d880 <_ZN13STMUARTDriverD1Ev>
}
 800c264:	bd08      	pop	{r3, pc}
 800c266:	bf00      	nop
 800c268:	24009280 	.word	0x24009280
 800c26c:	2400928c 	.word	0x2400928c
 800c270:	240069d0 	.word	0x240069d0
 800c274:	240054c4 	.word	0x240054c4
 800c278:	24007e64 	.word	0x24007e64
 800c27c:	24007dec 	.word	0x24007dec
 800c280:	24006958 	.word	0x24006958
 800c284:	2400544c 	.word	0x2400544c
 800c288:	240068e0 	.word	0x240068e0

0800c28c <_Z10__task_runPv>:

#define DEFAULT_STACK_SIZE (1024) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(void* arg) {
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4604      	mov	r4, r0
	Thread* thread = (Thread*) arg;

	osDelay(100 / portTICK_PERIOD_MS);
 800c290:	2064      	movs	r0, #100	; 0x64
 800c292:	f7fd fd76 	bl	8009d82 <osDelay>

	thread->init();
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	4620      	mov	r0, r4
 800c29c:	4798      	blx	r3

	while(thread->isRunning()) {
 800c29e:	7b23      	ldrb	r3, [r4, #12]
 800c2a0:	b153      	cbz	r3, 800c2b8 <_Z10__task_runPv+0x2c>
		thread->loop();
		osDelay(1 / portTICK_PERIOD_MS);
 800c2a2:	2501      	movs	r5, #1
		thread->loop();
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4798      	blx	r3
		osDelay(1 / portTICK_PERIOD_MS);
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fd fd68 	bl	8009d82 <osDelay>
	while(thread->isRunning()) {
 800c2b2:	7b23      	ldrb	r3, [r4, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f5      	bne.n	800c2a4 <_Z10__task_runPv+0x18>
	}

	delete thread;
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4798      	blx	r3

	vTaskDelete(nullptr);
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f7fe fcd3 	bl	800ac6c <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 800c2c6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7fd fd59 	bl	8009d82 <osDelay>
	while(true) {
 800c2d0:	e7fb      	b.n	800c2ca <_Z10__task_runPv+0x3e>
	...

0800c2d4 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 800c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d6:	b08b      	sub	sp, #44	; 0x2c
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	4616      	mov	r6, r2
 800c2de:	461f      	mov	r7, r3
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <_ZN6ThreadC1EPKc12osPriority_tm+0x38>)
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	7303      	strb	r3, [r0, #12]
//	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
	const osThreadAttr_t thread_attributes = {
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	a802      	add	r0, sp, #8
 800c2ee:	f002 fb37 	bl	800e960 <memset>
	  .name = (char*) name,
	  .stack_size = stackSize,
	  .priority = (osPriority_t) priority,
	};
 800c2f2:	9501      	str	r5, [sp, #4]
 800c2f4:	9706      	str	r7, [sp, #24]
 800c2f6:	9607      	str	r6, [sp, #28]
	this->handle = (osThreadId) osThreadNew(&__task_run, this, &thread_attributes);
 800c2f8:	aa01      	add	r2, sp, #4
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4804      	ldr	r0, [pc, #16]	; (800c310 <_ZN6ThreadC1EPKc12osPriority_tm+0x3c>)
 800c2fe:	f7fd fcf5 	bl	8009cec <osThreadNew>
 800c302:	6060      	str	r0, [r4, #4]
//	this->handle = osThreadCreate(&thread, this);
	this->name = name;
 800c304:	60a5      	str	r5, [r4, #8]
}
 800c306:	4620      	mov	r0, r4
 800c308:	b00b      	add	sp, #44	; 0x2c
 800c30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30c:	080112ec 	.word	0x080112ec
 800c310:	0800c28d 	.word	0x0800c28d

0800c314 <_ZN6ThreadC1EPKc12osPriority_t>:
Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 800c314:	b510      	push	{r4, lr}
 800c316:	4604      	mov	r4, r0
 800c318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c31c:	f7ff ffda 	bl	800c2d4 <_ZN6ThreadC1EPKc12osPriority_tm>
}
 800c320:	4620      	mov	r0, r4
 800c322:	bd10      	pop	{r4, pc}

0800c324 <_ZN6ThreadC1EPKc>:
Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 800c324:	b510      	push	{r4, lr}
 800c326:	4604      	mov	r4, r0
 800c328:	2218      	movs	r2, #24
 800c32a:	f7ff fff3 	bl	800c314 <_ZN6ThreadC1EPKc12osPriority_t>
}
 800c32e:	4620      	mov	r0, r4
 800c330:	bd10      	pop	{r4, pc}

0800c332 <_ZN6ThreadC1EPKcm>:
Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 800c332:	b510      	push	{r4, lr}
 800c334:	4604      	mov	r4, r0
 800c336:	4613      	mov	r3, r2
 800c338:	2218      	movs	r2, #24
 800c33a:	f7ff ffcb 	bl	800c2d4 <_ZN6ThreadC1EPKc12osPriority_tm>
}
 800c33e:	4620      	mov	r0, r4
 800c340:	bd10      	pop	{r4, pc}

0800c342 <_ZN6Thread9terminateEv>:
osThreadId Thread::getHandle() {
	return handle;
}

void Thread::terminate() {
	this->running = false;
 800c342:	2300      	movs	r3, #0
 800c344:	7303      	strb	r3, [r0, #12]
}
 800c346:	4770      	bx	lr

0800c348 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 800c348:	b508      	push	{r3, lr}
    return pvPortMalloc(size);
 800c34a:	f7ff fca9 	bl	800bca0 <pvPortMalloc>
}
 800c34e:	bd08      	pop	{r3, pc}

0800c350 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 800c350:	b508      	push	{r3, lr}
    vPortFree(ptr);
 800c352:	f7ff fd41 	bl	800bdd8 <vPortFree>
}
 800c356:	bd08      	pop	{r3, pc}

0800c358 <_ZN5IOBus8transmitEv>:


	return length;
}

void IOBus::transmit() {
 800c358:	b510      	push	{r4, lr}
	driver->transmit(packet_buffer, buffer_index);
 800c35a:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800c35e:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
 800c362:	6803      	ldr	r3, [r0, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
 800c36a:	f8d4 1310 	ldr.w	r1, [r4, #784]	; 0x310
 800c36e:	4798      	blx	r3
	buffer_index = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	f884 3318 	strb.w	r3, [r4, #792]	; 0x318
}
 800c376:	bd10      	pop	{r4, pc}

0800c378 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c378:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 800c37a:	6804      	ldr	r4, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800c37c:	6865      	ldr	r5, [r4, #4]
 800c37e:	68a6      	ldr	r6, [r4, #8]
 800c380:	eb06 0065 	add.w	r0, r6, r5, asr #1
 800c384:	f015 0f01 	tst.w	r5, #1
 800c388:	d105      	bne.n	800c396 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om+0x1e>
 800c38a:	6824      	ldr	r4, [r4, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	7809      	ldrb	r1, [r1, #0]
 800c392:	47a0      	blx	r4
      }
 800c394:	bd70      	pop	{r4, r5, r6, pc}
 800c396:	ea4f 0c65 	mov.w	ip, r5, asr #1
 800c39a:	f856 500c 	ldr.w	r5, [r6, ip]
 800c39e:	6824      	ldr	r4, [r4, #0]
 800c3a0:	592c      	ldr	r4, [r5, r4]
 800c3a2:	e7f3      	b.n	800c38c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om+0x14>

0800c3a4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4604      	mov	r4, r0
	switch (__op)
 800c3a8:	b142      	cbz	r2, 800c3bc <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	2a01      	cmp	r2, #1
 800c3ae:	d009      	beq.n	800c3c4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
	  switch (__op)
 800c3b0:	2b03      	cmp	r3, #3
 800c3b2:	d805      	bhi.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800c3b4:	e8df f003 	tbb	[pc, r3]
 800c3b8:	1a0f0c09 	.word	0x1a0f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x58>)
 800c3be:	6003      	str	r3, [r0, #0]
      }
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
	    return __source._M_access<_Functor*>();
 800c3c4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c3c6:	6003      	str	r3, [r0, #0]
	    break;
 800c3c8:	e7fa      	b.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x58>)
 800c3cc:	6003      	str	r3, [r0, #0]
	      break;
 800c3ce:	e7f7      	b.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800c3d0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c3d2:	6003      	str	r3, [r0, #0]
	      break;
 800c3d4:	e7f4      	b.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800c3d6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c3d8:	200c      	movs	r0, #12
 800c3da:	f7ff ffb5 	bl	800c348 <_Znwj>
 800c3de:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c3e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c3e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3e8:	6023      	str	r3, [r4, #0]
	      break;
 800c3ea:	e7e9      	b.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800c3ec:	6800      	ldr	r0, [r0, #0]
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d0e6      	beq.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800c3f2:	210c      	movs	r1, #12
 800c3f4:	f001 fd3e 	bl	800de74 <_ZdlPvj>
 800c3f8:	e7e2      	b.n	800c3c0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800c3fa:	bf00      	nop
 800c3fc:	080113b4 	.word	0x080113b4

0800c400 <_ZN5IOBus7receiveEhPhm>:
void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4606      	mov	r6, r0
 800c406:	460f      	mov	r7, r1
 800c408:	4615      	mov	r5, r2
 800c40a:	461c      	mov	r4, r3
	while(length > buffer_length) {
 800c40c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800c410:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800c414:	429c      	cmp	r4, r3
 800c416:	d90c      	bls.n	800c432 <_ZN5IOBus7receiveEhPhm+0x32>
		length -= buffer_length;
 800c418:	f500 5880 	add.w	r8, r0, #4096	; 0x1000
		MessageBus::receive(sender_id, buffer, buffer_length);
 800c41c:	462a      	mov	r2, r5
 800c41e:	4639      	mov	r1, r7
 800c420:	4630      	mov	r0, r6
 800c422:	f000 ff80 	bl	800d326 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 800c426:	f8d8 3314 	ldr.w	r3, [r8, #788]	; 0x314
 800c42a:	1ae4      	subs	r4, r4, r3
		buffer += buffer_length;
 800c42c:	441d      	add	r5, r3
	while(length > buffer_length) {
 800c42e:	42a3      	cmp	r3, r4
 800c430:	d3f4      	bcc.n	800c41c <_ZN5IOBus7receiveEhPhm+0x1c>
	MessageBus::receive(sender_id, buffer, length);
 800c432:	4623      	mov	r3, r4
 800c434:	462a      	mov	r2, r5
 800c436:	4639      	mov	r1, r7
 800c438:	4630      	mov	r0, r6
 800c43a:	f000 ff74 	bl	800d326 <_ZN10MessageBus7receiveEhPhm>
}
 800c43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c442 <_ZN5IOBus6appendEPhm>:
uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 800c442:	b538      	push	{r3, r4, r5, lr}
	uint32_t remaining_length = buffer_length - buffer_index;
 800c444:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 800c448:	f895 c318 	ldrb.w	ip, [r5, #792]	; 0x318
 800c44c:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
 800c450:	eba3 040c 	sub.w	r4, r3, ip
 800c454:	4294      	cmp	r4, r2
 800c456:	bf28      	it	cs
 800c458:	4614      	movcs	r4, r2
	memcpy(packet_buffer + buffer_index, buffer, length);
 800c45a:	f8d5 0310 	ldr.w	r0, [r5, #784]	; 0x310
 800c45e:	4622      	mov	r2, r4
 800c460:	4460      	add	r0, ip
 800c462:	f002 fa55 	bl	800e910 <memcpy>
	buffer_index += length;
 800c466:	b2e0      	uxtb	r0, r4
 800c468:	f895 3318 	ldrb.w	r3, [r5, #792]	; 0x318
 800c46c:	4403      	add	r3, r0
 800c46e:	f885 3318 	strb.w	r3, [r5, #792]	; 0x318
}
 800c472:	bd38      	pop	{r3, r4, r5, pc}

0800c474 <_ZN5IOBusD1Ev>:
IOBus::~IOBus(){}
 800c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c476:	4607      	mov	r7, r0
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <_ZN5IOBusD1Ev+0x30>)
 800c47a:	6003      	str	r3, [r0, #0]
 800c47c:	f241 240c 	movw	r4, #4620	; 0x120c
 800c480:	4404      	add	r4, r0
 800c482:	f600 650c 	addw	r5, r0, #3596	; 0xe0c
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c486:	2603      	movs	r6, #3
 800c488:	e005      	b.n	800c496 <_ZN5IOBusD1Ev+0x22>
 800c48a:	4632      	mov	r2, r6
 800c48c:	4621      	mov	r1, r4
 800c48e:	4620      	mov	r0, r4
 800c490:	4798      	blx	r3
 800c492:	42a5      	cmp	r5, r4
 800c494:	d004      	beq.n	800c4a0 <_ZN5IOBusD1Ev+0x2c>
 800c496:	3c10      	subs	r4, #16
      if (_M_manager)
 800c498:	68a3      	ldr	r3, [r4, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1f5      	bne.n	800c48a <_ZN5IOBusD1Ev+0x16>
 800c49e:	e7f8      	b.n	800c492 <_ZN5IOBusD1Ev+0x1e>
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a4:	08011728 	.word	0x08011728

0800c4a8 <_ZN5IOBusD0Ev>:
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	f7ff ffe2 	bl	800c474 <_ZN5IOBusD1Ev>
 800c4b0:	f241 311c 	movw	r1, #4892	; 0x131c
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f001 fcdd 	bl	800de74 <_ZdlPvj>
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	bd10      	pop	{r4, pc}
	...

0800c4c0 <_ZN5IOBusC1EP8IODriverPhm>:
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 800c4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	4618      	mov	r0, r3
class MessageBus {
 800c4ca:	f604 6c0c 	addw	ip, r4, #3596	; 0xe0c
 800c4ce:	f241 2e0c 	movw	lr, #4620	; 0x120c
 800c4d2:	44a6      	add	lr, r4
    _Function_base() : _M_manager(nullptr) { }
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f8cc 3008 	str.w	r3, [ip, #8]
 800c4da:	f10c 0c10 	add.w	ip, ip, #16
 800c4de:	45f4      	cmp	ip, lr
 800c4e0:	d1f9      	bne.n	800c4d6 <_ZN5IOBusC1EP8IODriverPhm+0x16>
 800c4e2:	4b14      	ldr	r3, [pc, #80]	; (800c534 <_ZN5IOBusC1EP8IODriverPhm+0x74>)
 800c4e4:	6023      	str	r3, [r4, #0]
	this->driver = driver;
 800c4e6:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 800c4ea:	f8c1 530c 	str.w	r5, [r1, #780]	; 0x30c
	this->packet_buffer = buffer;
 800c4ee:	f8c1 2310 	str.w	r2, [r1, #784]	; 0x310
	this->buffer_length = length;
 800c4f2:	f8c1 0314 	str.w	r0, [r1, #788]	; 0x314
	this->buffer_index = 0;
 800c4f6:	2600      	movs	r6, #0
 800c4f8:	f881 6318 	strb.w	r6, [r1, #792]	; 0x318
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	689f      	ldr	r7, [r3, #8]
 800c500:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c502:	200c      	movs	r0, #12
 800c504:	f7ff ff20 	bl	800c348 <_Znwj>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 800c508:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <_ZN5IOBusC1EP8IODriverPhm+0x78>)
 800c50a:	6003      	str	r3, [r0, #0]
 800c50c:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800c50e:	6084      	str	r4, [r0, #8]
 800c510:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <_ZN5IOBusC1EP8IODriverPhm+0x7c>)
 800c514:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c516:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <_ZN5IOBusC1EP8IODriverPhm+0x80>)
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	4669      	mov	r1, sp
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b8      	blx	r7
      if (_M_manager)
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	b11b      	cbz	r3, 800c52c <_ZN5IOBusC1EP8IODriverPhm+0x6c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c524:	2203      	movs	r2, #3
 800c526:	4669      	mov	r1, sp
 800c528:	4668      	mov	r0, sp
 800c52a:	4798      	blx	r3
}
 800c52c:	4620      	mov	r0, r4
 800c52e:	b005      	add	sp, #20
 800c530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c532:	bf00      	nop
 800c534:	080113dc 	.word	0x080113dc
 800c538:	0800c401 	.word	0x0800c401
 800c53c:	0800c379 	.word	0x0800c379
 800c540:	0800c3a5 	.word	0x0800c3a5

0800c544 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
	if(def != nullptr) {
 800c544:	b311      	cbz	r1, 800c58c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x48>
bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 800c546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	4605      	mov	r5, r0
 800c54c:	4617      	mov	r7, r2
 800c54e:	460e      	mov	r6, r1
		uint32_t data_bytes_written = 0;
//		append(&def->id, 1);
		while(data_bytes_written < def->size) {
 800c550:	784b      	ldrb	r3, [r1, #1]
 800c552:	b1a3      	cbz	r3, 800c57e <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x3a>
		uint32_t data_bytes_written = 0;
 800c554:	2400      	movs	r4, #0
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 800c556:	f04f 0801 	mov.w	r8, #1
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	4642      	mov	r2, r8
 800c560:	4631      	mov	r1, r6
 800c562:	4628      	mov	r0, r5
 800c564:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 800c566:	7872      	ldrb	r2, [r6, #1]
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	1b12      	subs	r2, r2, r4
 800c56e:	1939      	adds	r1, r7, r4
 800c570:	4628      	mov	r0, r5
 800c572:	4798      	blx	r3

			if(new_bytes == 0) {
 800c574:	b160      	cbz	r0, 800c590 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x4c>
				return false;
			} else {
				data_bytes_written += new_bytes;
 800c576:	4404      	add	r4, r0
		while(data_bytes_written < def->size) {
 800c578:	7873      	ldrb	r3, [r6, #1]
 800c57a:	42a3      	cmp	r3, r4
 800c57c:	d8ed      	bhi.n	800c55a <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		transmit();
 800c57e:	682b      	ldr	r3, [r5, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	4628      	mov	r0, r5
 800c584:	4798      	blx	r3

		return true;
 800c586:	2001      	movs	r0, #1
	}

	return false;
}
 800c588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return false;
 800c58c:	2000      	movs	r0, #0
}
 800c58e:	4770      	bx	lr
				return false;
 800c590:	2000      	movs	r0, #0
 800c592:	e7f9      	b.n	800c588 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x44>

0800c594 <_ZN10MessageBus8retrieveEj>:
}

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 800c594:	b500      	push	{lr}
 800c596:	4684      	mov	ip, r0
	uint32_t searchPoint = hash % 256;
 800c598:	fa5f fe81 	uxtb.w	lr, r1
 800c59c:	4673      	mov	r3, lr
	uint32_t searchStart = searchPoint;

	while(definitions_by_type[searchPoint] != nullptr) {
 800c59e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800c5a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c5a6:	b150      	cbz	r0, 800c5be <_ZN10MessageBus8retrieveEj+0x2a>
		if(definitions_by_type[searchPoint]->hash == hash) {
 800c5a8:	6842      	ldr	r2, [r0, #4]
 800c5aa:	428a      	cmp	r2, r1
 800c5ac:	d007      	beq.n	800c5be <_ZN10MessageBus8retrieveEj+0x2a>
			return definitions_by_type[searchPoint];
		}

		searchPoint++;
 800c5ae:	3301      	adds	r3, #1

		if(searchPoint == 256) {
			searchPoint = 0;
 800c5b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b4:	bf08      	it	eq
 800c5b6:	2300      	moveq	r3, #0
		}

		if(searchStart == searchPoint) {
 800c5b8:	4573      	cmp	r3, lr
 800c5ba:	d1f0      	bne.n	800c59e <_ZN10MessageBus8retrieveEj+0xa>
			break; // No packet definition matching the given template type
		}
	}

	return nullptr;
 800c5bc:	2000      	movs	r0, #0
}
 800c5be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c5c4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4604      	mov	r4, r0
	switch (__op)
 800c5c8:	b142      	cbz	r2, 800c5dc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	2a01      	cmp	r2, #1
 800c5ce:	d009      	beq.n	800c5e4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x20>
	  switch (__op)
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d805      	bhi.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c5d4:	e8df f003 	tbb	[pc, r3]
 800c5d8:	1a0f0c09 	.word	0x1a0f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>)
 800c5de:	6003      	str	r3, [r0, #0]
      }
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
	    return __source._M_access<_Functor*>();
 800c5e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c5e6:	6003      	str	r3, [r0, #0]
	    break;
 800c5e8:	e7fa      	b.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>)
 800c5ec:	6003      	str	r3, [r0, #0]
	      break;
 800c5ee:	e7f7      	b.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800c5f0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c5f2:	6003      	str	r3, [r0, #0]
	      break;
 800c5f4:	e7f4      	b.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800c5f6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c5f8:	200c      	movs	r0, #12
 800c5fa:	f7ff fea5 	bl	800c348 <_Znwj>
 800c5fe:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c608:	6023      	str	r3, [r4, #0]
	      break;
 800c60a:	e7e9      	b.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800c60c:	6800      	ldr	r0, [r0, #0]
 800c60e:	2800      	cmp	r0, #0
 800c610:	d0e6      	beq.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c612:	210c      	movs	r1, #12
 800c614:	f001 fc2e 	bl	800de74 <_ZdlPvj>
 800c618:	e7e2      	b.n	800c5e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c61a:	bf00      	nop
 800c61c:	080116a8 	.word	0x080116a8

0800c620 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 800c626:	4a17      	ldr	r2, [pc, #92]	; (800c684 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x64>)
 800c628:	2115      	movs	r1, #21
 800c62a:	4817      	ldr	r0, [pc, #92]	; (800c688 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x68>)
 800c62c:	f001 fc4a 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c630:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c634:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c638:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c63c:	688e      	ldr	r6, [r1, #8]
 800c63e:	b9e6      	cbnz	r6, 800c67a <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c640:	b2c3      	uxtb	r3, r0
 800c642:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c646:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c64a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c64e:	b142      	cbz	r2, 800c662 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c650:	6852      	ldr	r2, [r2, #4]
 800c652:	4282      	cmp	r2, r0
 800c654:	d013      	beq.n	800c67e <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5e>
		insertion_point++;
 800c656:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c65c:	d1f5      	bne.n	800c64a <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x2a>
			insertion_point = 0;
 800c65e:	4633      	mov	r3, r6
 800c660:	e7ef      	b.n	800c642 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x22>
	def->id = identifier;
 800c662:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c664:	2204      	movs	r2, #4
 800c666:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c668:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c66a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c66e:	4496      	add	lr, r2
 800c670:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c672:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c676:	2001      	movs	r0, #1
 800c678:	e000      	b.n	800c67c <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c67a:	2000      	movs	r0, #0
}
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c67e:	2000      	movs	r0, #0
 800c680:	e7fc      	b.n	800c67c <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5c>
 800c682:	bf00      	nop
 800c684:	c70f6907 	.word	0xc70f6907
 800c688:	080113f4 	.word	0x080113f4

0800c68c <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	4604      	mov	r4, r0
 800c690:	460d      	mov	r5, r1
 800c692:	4a17      	ldr	r2, [pc, #92]	; (800c6f0 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x64>)
 800c694:	2115      	movs	r1, #21
 800c696:	4817      	ldr	r0, [pc, #92]	; (800c6f4 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x68>)
 800c698:	f001 fc14 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c69c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c6a0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c6a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c6a8:	688e      	ldr	r6, [r1, #8]
 800c6aa:	b9ee      	cbnz	r6, 800c6e8 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c6ac:	b2c3      	uxtb	r3, r0
 800c6ae:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c6b2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c6b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6ba:	b142      	cbz	r2, 800c6ce <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c6bc:	6852      	ldr	r2, [r2, #4]
 800c6be:	4282      	cmp	r2, r0
 800c6c0:	d014      	beq.n	800c6ec <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x60>
		insertion_point++;
 800c6c2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c6c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6c8:	d1f5      	bne.n	800c6b6 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x2a>
			insertion_point = 0;
 800c6ca:	4633      	mov	r3, r6
 800c6cc:	e7ef      	b.n	800c6ae <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x22>
	def->id = identifier;
 800c6ce:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c6d0:	2224      	movs	r2, #36	; 0x24
 800c6d2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c6d4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c6d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c6da:	f10e 0e04 	add.w	lr, lr, #4
 800c6de:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c6e0:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c6e4:	2001      	movs	r0, #1
 800c6e6:	e000      	b.n	800c6ea <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c6e8:	2000      	movs	r0, #0
}
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7fc      	b.n	800c6ea <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5e>
 800c6f0:	c70f6907 	.word	0xc70f6907
 800c6f4:	0801140c 	.word	0x0801140c

0800c6f8 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	460d      	mov	r5, r1
 800c6fe:	4a08      	ldr	r2, [pc, #32]	; (800c720 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_+0x28>)
 800c700:	2115      	movs	r1, #21
 800c702:	4808      	ldr	r0, [pc, #32]	; (800c724 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_+0x2c>)
 800c704:	f001 fbde 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c708:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	4620      	mov	r0, r4
 800c710:	4798      	blx	r3
 800c712:	4601      	mov	r1, r0
	return send(def, (uint8_t*) message);
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	462a      	mov	r2, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	4798      	blx	r3
}
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	c70f6907 	.word	0xc70f6907
 800c724:	0801140c 	.word	0x0801140c

0800c728 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	4604      	mov	r4, r0
 800c72c:	460d      	mov	r5, r1
 800c72e:	4a17      	ldr	r2, [pc, #92]	; (800c78c <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x64>)
 800c730:	211a      	movs	r1, #26
 800c732:	4817      	ldr	r0, [pc, #92]	; (800c790 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x68>)
 800c734:	f001 fbc6 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c738:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c73c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c740:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c744:	688e      	ldr	r6, [r1, #8]
 800c746:	b9e6      	cbnz	r6, 800c782 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c748:	b2c3      	uxtb	r3, r0
 800c74a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c74e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c752:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c756:	b142      	cbz	r2, 800c76a <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c758:	6852      	ldr	r2, [r2, #4]
 800c75a:	4282      	cmp	r2, r0
 800c75c:	d013      	beq.n	800c786 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5e>
		insertion_point++;
 800c75e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c764:	d1f5      	bne.n	800c752 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x2a>
			insertion_point = 0;
 800c766:	4633      	mov	r3, r6
 800c768:	e7ef      	b.n	800c74a <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x22>
	def->id = identifier;
 800c76a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c76c:	2204      	movs	r2, #4
 800c76e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c770:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c776:	4496      	add	lr, r2
 800c778:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c77a:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c77e:	2001      	movs	r0, #1
 800c780:	e000      	b.n	800c784 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c782:	2000      	movs	r0, #0
}
 800c784:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c786:	2000      	movs	r0, #0
 800c788:	e7fc      	b.n	800c784 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5c>
 800c78a:	bf00      	nop
 800c78c:	c70f6907 	.word	0xc70f6907
 800c790:	08011424 	.word	0x08011424

0800c794 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	4604      	mov	r4, r0
 800c798:	460d      	mov	r5, r1
 800c79a:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x64>)
 800c79c:	211a      	movs	r1, #26
 800c79e:	4817      	ldr	r0, [pc, #92]	; (800c7fc <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x68>)
 800c7a0:	f001 fb90 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c7a4:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c7a8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c7ac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c7b0:	688e      	ldr	r6, [r1, #8]
 800c7b2:	b9e6      	cbnz	r6, 800c7ee <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c7b4:	b2c3      	uxtb	r3, r0
 800c7b6:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c7ba:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c7be:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7c2:	b142      	cbz	r2, 800c7d6 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c7c4:	6852      	ldr	r2, [r2, #4]
 800c7c6:	4282      	cmp	r2, r0
 800c7c8:	d013      	beq.n	800c7f2 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5e>
		insertion_point++;
 800c7ca:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d0:	d1f5      	bne.n	800c7be <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x2a>
			insertion_point = 0;
 800c7d2:	4633      	mov	r3, r6
 800c7d4:	e7ef      	b.n	800c7b6 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x22>
	def->id = identifier;
 800c7d6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c7d8:	2204      	movs	r2, #4
 800c7da:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c7dc:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c7de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c7e2:	4496      	add	lr, r2
 800c7e4:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c7e6:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	e000      	b.n	800c7f0 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c7ee:	2000      	movs	r0, #0
}
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	e7fc      	b.n	800c7f0 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5c>
 800c7f6:	bf00      	nop
 800c7f8:	c70f6907 	.word	0xc70f6907
 800c7fc:	08011440 	.word	0x08011440

0800c800 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	4a17      	ldr	r2, [pc, #92]	; (800c864 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x64>)
 800c808:	211f      	movs	r1, #31
 800c80a:	4817      	ldr	r0, [pc, #92]	; (800c868 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x68>)
 800c80c:	f001 fb5a 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c810:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c814:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c818:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c81c:	688e      	ldr	r6, [r1, #8]
 800c81e:	b9e6      	cbnz	r6, 800c85a <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c820:	b2c3      	uxtb	r3, r0
 800c822:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c826:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c82a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c82e:	b142      	cbz	r2, 800c842 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c830:	6852      	ldr	r2, [r2, #4]
 800c832:	4282      	cmp	r2, r0
 800c834:	d013      	beq.n	800c85e <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5e>
		insertion_point++;
 800c836:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c83c:	d1f5      	bne.n	800c82a <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x2a>
			insertion_point = 0;
 800c83e:	4633      	mov	r3, r6
 800c840:	e7ef      	b.n	800c822 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x22>
	def->id = identifier;
 800c842:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c844:	2204      	movs	r2, #4
 800c846:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c848:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c84a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c84e:	4496      	add	lr, r2
 800c850:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c852:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c856:	2001      	movs	r0, #1
 800c858:	e000      	b.n	800c85c <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c85a:	2000      	movs	r0, #0
}
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c85e:	2000      	movs	r0, #0
 800c860:	e7fc      	b.n	800c85c <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5c>
 800c862:	bf00      	nop
 800c864:	c70f6907 	.word	0xc70f6907
 800c868:	0801145c 	.word	0x0801145c

0800c86c <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	460d      	mov	r5, r1
 800c872:	4a17      	ldr	r2, [pc, #92]	; (800c8d0 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x64>)
 800c874:	211b      	movs	r1, #27
 800c876:	4817      	ldr	r0, [pc, #92]	; (800c8d4 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x68>)
 800c878:	f001 fb24 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c87c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c880:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c884:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c888:	688e      	ldr	r6, [r1, #8]
 800c88a:	b9e6      	cbnz	r6, 800c8c6 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c88c:	b2c3      	uxtb	r3, r0
 800c88e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c892:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c896:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c89a:	b142      	cbz	r2, 800c8ae <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c89c:	6852      	ldr	r2, [r2, #4]
 800c89e:	4282      	cmp	r2, r0
 800c8a0:	d013      	beq.n	800c8ca <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5e>
		insertion_point++;
 800c8a2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a8:	d1f5      	bne.n	800c896 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x2a>
			insertion_point = 0;
 800c8aa:	4633      	mov	r3, r6
 800c8ac:	e7ef      	b.n	800c88e <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x22>
	def->id = identifier;
 800c8ae:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c8b0:	2204      	movs	r2, #4
 800c8b2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c8b4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c8b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c8ba:	4496      	add	lr, r2
 800c8bc:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c8be:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	e000      	b.n	800c8c8 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c8c6:	2000      	movs	r0, #0
}
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e7fc      	b.n	800c8c8 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5c>
 800c8ce:	bf00      	nop
 800c8d0:	c70f6907 	.word	0xc70f6907
 800c8d4:	0801147c 	.word	0x0801147c

0800c8d8 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	4a08      	ldr	r2, [pc, #32]	; (800c900 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_+0x28>)
 800c8e0:	211b      	movs	r1, #27
 800c8e2:	4808      	ldr	r0, [pc, #32]	; (800c904 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_+0x2c>)
 800c8e4:	f001 faee 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c8e8:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4798      	blx	r3
 800c8f2:	4601      	mov	r1, r0
	return send(def, (uint8_t*) message);
 800c8f4:	6823      	ldr	r3, [r4, #0]
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	4798      	blx	r3
}
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	c70f6907 	.word	0xc70f6907
 800c904:	0801147c 	.word	0x0801147c

0800c908 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	4604      	mov	r4, r0
 800c90c:	460d      	mov	r5, r1
 800c90e:	4a17      	ldr	r2, [pc, #92]	; (800c96c <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x64>)
 800c910:	2113      	movs	r1, #19
 800c912:	4817      	ldr	r0, [pc, #92]	; (800c970 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x68>)
 800c914:	f001 fad6 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c918:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c91c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c920:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c924:	688e      	ldr	r6, [r1, #8]
 800c926:	b9ee      	cbnz	r6, 800c964 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c928:	b2c3      	uxtb	r3, r0
 800c92a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c92e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c932:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c936:	b142      	cbz	r2, 800c94a <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c938:	6852      	ldr	r2, [r2, #4]
 800c93a:	4282      	cmp	r2, r0
 800c93c:	d014      	beq.n	800c968 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x60>
		insertion_point++;
 800c93e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c944:	d1f5      	bne.n	800c932 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x2a>
			insertion_point = 0;
 800c946:	4633      	mov	r3, r6
 800c948:	e7ef      	b.n	800c92a <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x22>
	def->id = identifier;
 800c94a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c94c:	2201      	movs	r2, #1
 800c94e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c950:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c952:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c956:	f10e 0e04 	add.w	lr, lr, #4
 800c95a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c95c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c960:	4610      	mov	r0, r2
 800c962:	e000      	b.n	800c966 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c964:	2000      	movs	r0, #0
}
 800c966:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c968:	2000      	movs	r0, #0
 800c96a:	e7fc      	b.n	800c966 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5e>
 800c96c:	c70f6907 	.word	0xc70f6907
 800c970:	08011498 	.word	0x08011498

0800c974 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	4604      	mov	r4, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x64>)
 800c97c:	211b      	movs	r1, #27
 800c97e:	4817      	ldr	r0, [pc, #92]	; (800c9dc <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x68>)
 800c980:	f001 faa0 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800c984:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c988:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c98c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c990:	688e      	ldr	r6, [r1, #8]
 800c992:	b9ee      	cbnz	r6, 800c9d0 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c994:	b2c3      	uxtb	r3, r0
 800c996:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c99a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c99e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9a2:	b142      	cbz	r2, 800c9b6 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c9a4:	6852      	ldr	r2, [r2, #4]
 800c9a6:	4282      	cmp	r2, r0
 800c9a8:	d014      	beq.n	800c9d4 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x60>
		insertion_point++;
 800c9aa:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b0:	d1f5      	bne.n	800c99e <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x2a>
			insertion_point = 0;
 800c9b2:	4633      	mov	r3, r6
 800c9b4:	e7ef      	b.n	800c996 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x22>
	def->id = identifier;
 800c9b6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c9bc:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c9be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c9c2:	f10e 0e04 	add.w	lr, lr, #4
 800c9c6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c9c8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	e000      	b.n	800c9d2 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c9d0:	2000      	movs	r0, #0
}
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e7fc      	b.n	800c9d2 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5e>
 800c9d8:	c70f6907 	.word	0xc70f6907
 800c9dc:	080114ac 	.word	0x080114ac

0800c9e0 <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4a0e      	ldr	r2, [pc, #56]	; (800ca20 <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x40>)
 800c9e8:	211b      	movs	r1, #27
 800c9ea:	480e      	ldr	r0, [pc, #56]	; (800ca24 <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x44>)
 800c9ec:	f001 fa6a 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
	PacketDefinition* def = retrieve(hash);
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4798      	blx	r3
	if(def != nullptr) {
 800c9fa:	b178      	cbz	r0, 800ca1c <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x3c>
 800c9fc:	7800      	ldrb	r0, [r0, #0]
 800c9fe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 800ca02:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800ca06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca0a:	b10b      	cbz	r3, 800ca10 <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x30>
			return false; // A forwarder is already registered for this packet type
 800ca0c:	2000      	movs	r0, #0
}
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
		forwarders[packetID] = bus;
 800ca10:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800ca14:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
		return true;
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e7f8      	b.n	800ca0e <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x2e>
	return false;
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e7f6      	b.n	800ca0e <_ZN10MessageBus7forwardI25sc_caching_success_packetEEbPS_+0x2e>
 800ca20:	c70f6907 	.word	0xc70f6907
 800ca24:	080114ac 	.word	0x080114ac

0800ca28 <_ZN10MessageBus6defineI14sc_trap_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	4a17      	ldr	r2, [pc, #92]	; (800ca8c <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x64>)
 800ca30:	2110      	movs	r1, #16
 800ca32:	4817      	ldr	r0, [pc, #92]	; (800ca90 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x68>)
 800ca34:	f001 fa46 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800ca38:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800ca3c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ca40:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800ca44:	688e      	ldr	r6, [r1, #8]
 800ca46:	b9ee      	cbnz	r6, 800ca84 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ca48:	b2c3      	uxtb	r3, r0
 800ca4a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ca4e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ca52:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca56:	b142      	cbz	r2, 800ca6a <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800ca58:	6852      	ldr	r2, [r2, #4]
 800ca5a:	4282      	cmp	r2, r0
 800ca5c:	d014      	beq.n	800ca88 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x60>
		insertion_point++;
 800ca5e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800ca60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca64:	d1f5      	bne.n	800ca52 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x2a>
			insertion_point = 0;
 800ca66:	4633      	mov	r3, r6
 800ca68:	e7ef      	b.n	800ca4a <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x22>
	def->id = identifier;
 800ca6a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800ca70:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ca72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800ca76:	f10e 0e04 	add.w	lr, lr, #4
 800ca7a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800ca7c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800ca80:	4610      	mov	r0, r2
 800ca82:	e000      	b.n	800ca86 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800ca84:	2000      	movs	r0, #0
}
 800ca86:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7fc      	b.n	800ca86 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5e>
 800ca8c:	c70f6907 	.word	0xc70f6907
 800ca90:	080114c8 	.word	0x080114c8

0800ca94 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x40>)
 800ca9c:	2110      	movs	r1, #16
 800ca9e:	480e      	ldr	r0, [pc, #56]	; (800cad8 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x44>)
 800caa0:	f001 fa10 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
	PacketDefinition* def = retrieve(hash);
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	4601      	mov	r1, r0
 800caaa:	4620      	mov	r0, r4
 800caac:	4798      	blx	r3
	if(def != nullptr) {
 800caae:	b178      	cbz	r0, 800cad0 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x3c>
 800cab0:	7800      	ldrb	r0, [r0, #0]
 800cab2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 800cab6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800caba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cabe:	b10b      	cbz	r3, 800cac4 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x30>
			return false; // A forwarder is already registered for this packet type
 800cac0:	2000      	movs	r0, #0
}
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
		forwarders[packetID] = bus;
 800cac4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800cac8:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
		return true;
 800cacc:	2001      	movs	r0, #1
 800cace:	e7f8      	b.n	800cac2 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x2e>
	return false;
 800cad0:	2000      	movs	r0, #0
 800cad2:	e7f6      	b.n	800cac2 <_ZN10MessageBus7forwardI14sc_trap_packetEEbPS_+0x2e>
 800cad4:	c70f6907 	.word	0xc70f6907
 800cad8:	080114c8 	.word	0x080114c8

0800cadc <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	4604      	mov	r4, r0
 800cae0:	460d      	mov	r5, r1
 800cae2:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x64>)
 800cae4:	2118      	movs	r1, #24
 800cae6:	4817      	ldr	r0, [pc, #92]	; (800cb44 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x68>)
 800cae8:	f001 f9ec 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800caec:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800caf0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800caf4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800caf8:	688e      	ldr	r6, [r1, #8]
 800cafa:	b9ee      	cbnz	r6, 800cb38 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cafc:	b2c3      	uxtb	r3, r0
 800cafe:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cb02:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cb06:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb0a:	b142      	cbz	r2, 800cb1e <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cb0c:	6852      	ldr	r2, [r2, #4]
 800cb0e:	4282      	cmp	r2, r0
 800cb10:	d014      	beq.n	800cb3c <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x60>
		insertion_point++;
 800cb12:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cb14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb18:	d1f5      	bne.n	800cb06 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x2a>
			insertion_point = 0;
 800cb1a:	4633      	mov	r3, r6
 800cb1c:	e7ef      	b.n	800cafe <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x22>
	def->id = identifier;
 800cb1e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cb20:	2201      	movs	r2, #1
 800cb22:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cb24:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cb26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cb2a:	f10e 0e04 	add.w	lr, lr, #4
 800cb2e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cb30:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cb34:	4610      	mov	r0, r2
 800cb36:	e000      	b.n	800cb3a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800cb38:	2000      	movs	r0, #0
}
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	e7fc      	b.n	800cb3a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5e>
 800cb40:	c70f6907 	.word	0xc70f6907
 800cb44:	080114dc 	.word	0x080114dc

0800cb48 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	4a0e      	ldr	r2, [pc, #56]	; (800cb88 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x40>)
 800cb50:	2118      	movs	r1, #24
 800cb52:	480e      	ldr	r0, [pc, #56]	; (800cb8c <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x44>)
 800cb54:	f001 f9b6 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
	PacketDefinition* def = retrieve(hash);
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	4601      	mov	r1, r0
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4798      	blx	r3
	if(def != nullptr) {
 800cb62:	b178      	cbz	r0, 800cb84 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x3c>
 800cb64:	7800      	ldrb	r0, [r0, #0]
 800cb66:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 800cb6a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cb6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cb72:	b10b      	cbz	r3, 800cb78 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x30>
			return false; // A forwarder is already registered for this packet type
 800cb74:	2000      	movs	r0, #0
}
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
		forwarders[packetID] = bus;
 800cb78:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800cb7c:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
		return true;
 800cb80:	2001      	movs	r0, #1
 800cb82:	e7f8      	b.n	800cb76 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x2e>
	return false;
 800cb84:	2000      	movs	r0, #0
 800cb86:	e7f6      	b.n	800cb76 <_ZN10MessageBus7forwardI22sc_trap_success_packetEEbPS_+0x2e>
 800cb88:	c70f6907 	.word	0xc70f6907
 800cb8c:	080114dc 	.word	0x080114dc

0800cb90 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	4604      	mov	r4, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	4a17      	ldr	r2, [pc, #92]	; (800cbf4 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x64>)
 800cb98:	210f      	movs	r1, #15
 800cb9a:	4817      	ldr	r0, [pc, #92]	; (800cbf8 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x68>)
 800cb9c:	f001 f992 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cba0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cba4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cba8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cbac:	688e      	ldr	r6, [r1, #8]
 800cbae:	b9ee      	cbnz	r6, 800cbec <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cbb0:	b2c3      	uxtb	r3, r0
 800cbb2:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cbb6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cbba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cbbe:	b142      	cbz	r2, 800cbd2 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cbc0:	6852      	ldr	r2, [r2, #4]
 800cbc2:	4282      	cmp	r2, r0
 800cbc4:	d014      	beq.n	800cbf0 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x60>
		insertion_point++;
 800cbc6:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cbc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbcc:	d1f5      	bne.n	800cbba <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x2a>
			insertion_point = 0;
 800cbce:	4633      	mov	r3, r6
 800cbd0:	e7ef      	b.n	800cbb2 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x22>
	def->id = identifier;
 800cbd2:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cbd8:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cbda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cbde:	f10e 0e04 	add.w	lr, lr, #4
 800cbe2:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cbe4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cbe8:	4610      	mov	r0, r2
 800cbea:	e000      	b.n	800cbee <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800cbec:	2000      	movs	r0, #0
}
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	e7fc      	b.n	800cbee <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5e>
 800cbf4:	c70f6907 	.word	0xc70f6907
 800cbf8:	080114f8 	.word	0x080114f8

0800cbfc <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	4a0e      	ldr	r2, [pc, #56]	; (800cc3c <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x40>)
 800cc04:	210f      	movs	r1, #15
 800cc06:	480e      	ldr	r0, [pc, #56]	; (800cc40 <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x44>)
 800cc08:	f001 f95c 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
	PacketDefinition* def = retrieve(hash);
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	695b      	ldr	r3, [r3, #20]
 800cc10:	4601      	mov	r1, r0
 800cc12:	4620      	mov	r0, r4
 800cc14:	4798      	blx	r3
	if(def != nullptr) {
 800cc16:	b178      	cbz	r0, 800cc38 <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x3c>
 800cc18:	7800      	ldrb	r0, [r0, #0]
 800cc1a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 800cc1e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cc22:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cc26:	b10b      	cbz	r3, 800cc2c <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x30>
			return false; // A forwarder is already registered for this packet type
 800cc28:	2000      	movs	r0, #0
}
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
		forwarders[packetID] = bus;
 800cc2c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800cc30:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
		return true;
 800cc34:	2001      	movs	r0, #1
 800cc36:	e7f8      	b.n	800cc2a <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x2e>
	return false;
 800cc38:	2000      	movs	r0, #0
 800cc3a:	e7f6      	b.n	800cc2a <_ZN10MessageBus7forwardI13sc_LED_packetEEbPS_+0x2e>
 800cc3c:	c70f6907 	.word	0xc70f6907
 800cc40:	080114f8 	.word	0x080114f8

0800cc44 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	4604      	mov	r4, r0
 800cc48:	460d      	mov	r5, r1
 800cc4a:	4a17      	ldr	r2, [pc, #92]	; (800cca8 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x64>)
 800cc4c:	2114      	movs	r1, #20
 800cc4e:	4817      	ldr	r0, [pc, #92]	; (800ccac <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x68>)
 800cc50:	f001 f938 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cc54:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cc58:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cc5c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cc60:	688e      	ldr	r6, [r1, #8]
 800cc62:	b9ee      	cbnz	r6, 800cca0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cc64:	b2c3      	uxtb	r3, r0
 800cc66:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cc6a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cc6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc72:	b142      	cbz	r2, 800cc86 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cc74:	6852      	ldr	r2, [r2, #4]
 800cc76:	4282      	cmp	r2, r0
 800cc78:	d014      	beq.n	800cca4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x60>
		insertion_point++;
 800cc7a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cc7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc80:	d1f5      	bne.n	800cc6e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x2a>
			insertion_point = 0;
 800cc82:	4633      	mov	r3, r6
 800cc84:	e7ef      	b.n	800cc66 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x22>
	def->id = identifier;
 800cc86:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cc88:	2205      	movs	r2, #5
 800cc8a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cc8c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cc8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cc92:	f10e 0e04 	add.w	lr, lr, #4
 800cc96:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cc98:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	e000      	b.n	800cca2 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cca0:	2000      	movs	r0, #0
}
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cca4:	2000      	movs	r0, #0
 800cca6:	e7fc      	b.n	800cca2 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5e>
 800cca8:	c70f6907 	.word	0xc70f6907
 800ccac:	08011508 	.word	0x08011508

0800ccb0 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	4a17      	ldr	r2, [pc, #92]	; (800cd14 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x64>)
 800ccb8:	2115      	movs	r1, #21
 800ccba:	4817      	ldr	r0, [pc, #92]	; (800cd18 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x68>)
 800ccbc:	f001 f902 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800ccc0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800ccc4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ccc8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cccc:	688e      	ldr	r6, [r1, #8]
 800ccce:	b9ee      	cbnz	r6, 800cd0c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ccd0:	b2c3      	uxtb	r3, r0
 800ccd2:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ccd6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ccda:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccde:	b142      	cbz	r2, 800ccf2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cce0:	6852      	ldr	r2, [r2, #4]
 800cce2:	4282      	cmp	r2, r0
 800cce4:	d014      	beq.n	800cd10 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x60>
		insertion_point++;
 800cce6:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccec:	d1f5      	bne.n	800ccda <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x2a>
			insertion_point = 0;
 800ccee:	4633      	mov	r3, r6
 800ccf0:	e7ef      	b.n	800ccd2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x22>
	def->id = identifier;
 800ccf2:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800ccf4:	2210      	movs	r2, #16
 800ccf6:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800ccf8:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ccfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800ccfe:	f10e 0e04 	add.w	lr, lr, #4
 800cd02:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cd04:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cd08:	2001      	movs	r0, #1
 800cd0a:	e000      	b.n	800cd0e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cd0c:	2000      	movs	r0, #0
}
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cd10:	2000      	movs	r0, #0
 800cd12:	e7fc      	b.n	800cd0e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5e>
 800cd14:	c70f6907 	.word	0xc70f6907
 800cd18:	08011520 	.word	0x08011520

0800cd1c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	4a17      	ldr	r2, [pc, #92]	; (800cd80 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x64>)
 800cd24:	2115      	movs	r1, #21
 800cd26:	4817      	ldr	r0, [pc, #92]	; (800cd84 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x68>)
 800cd28:	f001 f8cc 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cd2c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cd30:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cd34:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cd38:	688e      	ldr	r6, [r1, #8]
 800cd3a:	b9ee      	cbnz	r6, 800cd78 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cd3c:	b2c3      	uxtb	r3, r0
 800cd3e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cd42:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cd46:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd4a:	b142      	cbz	r2, 800cd5e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cd4c:	6852      	ldr	r2, [r2, #4]
 800cd4e:	4282      	cmp	r2, r0
 800cd50:	d014      	beq.n	800cd7c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x60>
		insertion_point++;
 800cd52:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cd54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd58:	d1f5      	bne.n	800cd46 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x2a>
			insertion_point = 0;
 800cd5a:	4633      	mov	r3, r6
 800cd5c:	e7ef      	b.n	800cd3e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x22>
	def->id = identifier;
 800cd5e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cd60:	2210      	movs	r2, #16
 800cd62:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cd64:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cd66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cd6a:	f10e 0e04 	add.w	lr, lr, #4
 800cd6e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cd70:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cd74:	2001      	movs	r0, #1
 800cd76:	e000      	b.n	800cd7a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cd78:	2000      	movs	r0, #0
}
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e7fc      	b.n	800cd7a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5e>
 800cd80:	c70f6907 	.word	0xc70f6907
 800cd84:	08011538 	.word	0x08011538

0800cd88 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	4a17      	ldr	r2, [pc, #92]	; (800cdec <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x64>)
 800cd90:	2119      	movs	r1, #25
 800cd92:	4817      	ldr	r0, [pc, #92]	; (800cdf0 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x68>)
 800cd94:	f001 f896 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cd98:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cd9c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cda0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cda4:	688e      	ldr	r6, [r1, #8]
 800cda6:	b9ee      	cbnz	r6, 800cde4 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cda8:	b2c3      	uxtb	r3, r0
 800cdaa:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cdae:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cdb2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdb6:	b142      	cbz	r2, 800cdca <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cdb8:	6852      	ldr	r2, [r2, #4]
 800cdba:	4282      	cmp	r2, r0
 800cdbc:	d014      	beq.n	800cde8 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x60>
		insertion_point++;
 800cdbe:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cdc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdc4:	d1f5      	bne.n	800cdb2 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x2a>
			insertion_point = 0;
 800cdc6:	4633      	mov	r3, r6
 800cdc8:	e7ef      	b.n	800cdaa <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x22>
	def->id = identifier;
 800cdca:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cdcc:	2201      	movs	r2, #1
 800cdce:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cdd0:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cdd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cdd6:	f10e 0e04 	add.w	lr, lr, #4
 800cdda:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cddc:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cde0:	4610      	mov	r0, r2
 800cde2:	e000      	b.n	800cde6 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cde4:	2000      	movs	r0, #0
}
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cde8:	2000      	movs	r0, #0
 800cdea:	e7fc      	b.n	800cde6 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5e>
 800cdec:	c70f6907 	.word	0xc70f6907
 800cdf0:	08011550 	.word	0x08011550

0800cdf4 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	4a17      	ldr	r2, [pc, #92]	; (800ce58 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x64>)
 800cdfc:	2117      	movs	r1, #23
 800cdfe:	4817      	ldr	r0, [pc, #92]	; (800ce5c <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x68>)
 800ce00:	f001 f860 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800ce04:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800ce08:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ce0c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800ce10:	688e      	ldr	r6, [r1, #8]
 800ce12:	b9ee      	cbnz	r6, 800ce50 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ce14:	b2c3      	uxtb	r3, r0
 800ce16:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ce1a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ce1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce22:	b142      	cbz	r2, 800ce36 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800ce24:	6852      	ldr	r2, [r2, #4]
 800ce26:	4282      	cmp	r2, r0
 800ce28:	d014      	beq.n	800ce54 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x60>
		insertion_point++;
 800ce2a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800ce2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce30:	d1f5      	bne.n	800ce1e <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x2a>
			insertion_point = 0;
 800ce32:	4633      	mov	r3, r6
 800ce34:	e7ef      	b.n	800ce16 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x22>
	def->id = identifier;
 800ce36:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800ce38:	2201      	movs	r2, #1
 800ce3a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800ce3c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ce3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800ce42:	f10e 0e04 	add.w	lr, lr, #4
 800ce46:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800ce48:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	e000      	b.n	800ce52 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800ce50:	2000      	movs	r0, #0
}
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800ce54:	2000      	movs	r0, #0
 800ce56:	e7fc      	b.n	800ce52 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5e>
 800ce58:	c70f6907 	.word	0xc70f6907
 800ce5c:	0801156c 	.word	0x0801156c

0800ce60 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	460d      	mov	r5, r1
 800ce66:	4a17      	ldr	r2, [pc, #92]	; (800cec4 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x64>)
 800ce68:	2114      	movs	r1, #20
 800ce6a:	4817      	ldr	r0, [pc, #92]	; (800cec8 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x68>)
 800ce6c:	f001 f82a 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800ce70:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800ce74:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ce78:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800ce7c:	688e      	ldr	r6, [r1, #8]
 800ce7e:	b9ee      	cbnz	r6, 800cebc <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ce80:	b2c3      	uxtb	r3, r0
 800ce82:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ce86:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ce8a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce8e:	b142      	cbz	r2, 800cea2 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800ce90:	6852      	ldr	r2, [r2, #4]
 800ce92:	4282      	cmp	r2, r0
 800ce94:	d014      	beq.n	800cec0 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x60>
		insertion_point++;
 800ce96:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800ce98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce9c:	d1f5      	bne.n	800ce8a <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x2a>
			insertion_point = 0;
 800ce9e:	4633      	mov	r3, r6
 800cea0:	e7ef      	b.n	800ce82 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x22>
	def->id = identifier;
 800cea2:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cea4:	2201      	movs	r2, #1
 800cea6:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cea8:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ceaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800ceae:	f10e 0e04 	add.w	lr, lr, #4
 800ceb2:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800ceb4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800ceb8:	4610      	mov	r0, r2
 800ceba:	e000      	b.n	800cebe <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cebc:	2000      	movs	r0, #0
}
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cec0:	2000      	movs	r0, #0
 800cec2:	e7fc      	b.n	800cebe <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5e>
 800cec4:	c70f6907 	.word	0xc70f6907
 800cec8:	08011584 	.word	0x08011584

0800cecc <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	4a17      	ldr	r2, [pc, #92]	; (800cf30 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x64>)
 800ced4:	2115      	movs	r1, #21
 800ced6:	4817      	ldr	r0, [pc, #92]	; (800cf34 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x68>)
 800ced8:	f000 fff4 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cedc:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cee0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cee4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cee8:	688e      	ldr	r6, [r1, #8]
 800ceea:	b9ee      	cbnz	r6, 800cf28 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ceec:	b2c3      	uxtb	r3, r0
 800ceee:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cef2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cef6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cefa:	b142      	cbz	r2, 800cf0e <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cefc:	6852      	ldr	r2, [r2, #4]
 800cefe:	4282      	cmp	r2, r0
 800cf00:	d014      	beq.n	800cf2c <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x60>
		insertion_point++;
 800cf02:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf08:	d1f5      	bne.n	800cef6 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x2a>
			insertion_point = 0;
 800cf0a:	4633      	mov	r3, r6
 800cf0c:	e7ef      	b.n	800ceee <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x22>
	def->id = identifier;
 800cf0e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cf10:	2201      	movs	r2, #1
 800cf12:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cf14:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cf16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cf1a:	f10e 0e04 	add.w	lr, lr, #4
 800cf1e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cf20:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cf24:	4610      	mov	r0, r2
 800cf26:	e000      	b.n	800cf2a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cf28:	2000      	movs	r0, #0
}
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	e7fc      	b.n	800cf2a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5e>
 800cf30:	c70f6907 	.word	0xc70f6907
 800cf34:	0801159c 	.word	0x0801159c

0800cf38 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	460d      	mov	r5, r1
 800cf3e:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x64>)
 800cf40:	2114      	movs	r1, #20
 800cf42:	4817      	ldr	r0, [pc, #92]	; (800cfa0 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x68>)
 800cf44:	f000 ffbe 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cf48:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cf4c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cf50:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cf54:	688e      	ldr	r6, [r1, #8]
 800cf56:	b9ee      	cbnz	r6, 800cf94 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cf58:	b2c3      	uxtb	r3, r0
 800cf5a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cf5e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cf62:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf66:	b142      	cbz	r2, 800cf7a <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cf68:	6852      	ldr	r2, [r2, #4]
 800cf6a:	4282      	cmp	r2, r0
 800cf6c:	d014      	beq.n	800cf98 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x60>
		insertion_point++;
 800cf6e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cf70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf74:	d1f5      	bne.n	800cf62 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x2a>
			insertion_point = 0;
 800cf76:	4633      	mov	r3, r6
 800cf78:	e7ef      	b.n	800cf5a <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x22>
	def->id = identifier;
 800cf7a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cf80:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cf82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cf86:	f10e 0e04 	add.w	lr, lr, #4
 800cf8a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cf8c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cf90:	4610      	mov	r0, r2
 800cf92:	e000      	b.n	800cf96 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cf94:	2000      	movs	r0, #0
}
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e7fc      	b.n	800cf96 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5e>
 800cf9c:	c70f6907 	.word	0xc70f6907
 800cfa0:	080115b4 	.word	0x080115b4

0800cfa4 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x64>)
 800cfac:	2117      	movs	r1, #23
 800cfae:	4817      	ldr	r0, [pc, #92]	; (800d00c <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x68>)
 800cfb0:	f000 ff88 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800cfb4:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cfb8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cfbc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cfc0:	688e      	ldr	r6, [r1, #8]
 800cfc2:	b9ee      	cbnz	r6, 800d000 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cfc4:	b2c3      	uxtb	r3, r0
 800cfc6:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cfca:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cfce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfd2:	b142      	cbz	r2, 800cfe6 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cfd4:	6852      	ldr	r2, [r2, #4]
 800cfd6:	4282      	cmp	r2, r0
 800cfd8:	d014      	beq.n	800d004 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x60>
		insertion_point++;
 800cfda:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe0:	d1f5      	bne.n	800cfce <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x2a>
			insertion_point = 0;
 800cfe2:	4633      	mov	r3, r6
 800cfe4:	e7ef      	b.n	800cfc6 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x22>
	def->id = identifier;
 800cfe6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cfe8:	2201      	movs	r2, #1
 800cfea:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cfec:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cfee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cff2:	f10e 0e04 	add.w	lr, lr, #4
 800cff6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cff8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cffc:	4610      	mov	r0, r2
 800cffe:	e000      	b.n	800d002 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d000:	2000      	movs	r0, #0
}
 800d002:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d004:	2000      	movs	r0, #0
 800d006:	e7fc      	b.n	800d002 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5e>
 800d008:	c70f6907 	.word	0xc70f6907
 800d00c:	080115cc 	.word	0x080115cc

0800d010 <_ZN10MessageBus6defineI9FsmPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	460d      	mov	r5, r1
 800d016:	4a17      	ldr	r2, [pc, #92]	; (800d074 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x64>)
 800d018:	210a      	movs	r1, #10
 800d01a:	4817      	ldr	r0, [pc, #92]	; (800d078 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x68>)
 800d01c:	f000 ff52 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d020:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d024:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d028:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d02c:	688e      	ldr	r6, [r1, #8]
 800d02e:	b9ee      	cbnz	r6, 800d06c <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d030:	b2c3      	uxtb	r3, r0
 800d032:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d036:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d03a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d03e:	b142      	cbz	r2, 800d052 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d040:	6852      	ldr	r2, [r2, #4]
 800d042:	4282      	cmp	r2, r0
 800d044:	d014      	beq.n	800d070 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x60>
		insertion_point++;
 800d046:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d04c:	d1f5      	bne.n	800d03a <_ZN10MessageBus6defineI9FsmPacketEEbh+0x2a>
			insertion_point = 0;
 800d04e:	4633      	mov	r3, r6
 800d050:	e7ef      	b.n	800d032 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x22>
	def->id = identifier;
 800d052:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d054:	2202      	movs	r2, #2
 800d056:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d058:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d05a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d05e:	f10e 0e04 	add.w	lr, lr, #4
 800d062:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d064:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d068:	2001      	movs	r0, #1
 800d06a:	e000      	b.n	800d06e <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d06c:	2000      	movs	r0, #0
}
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d070:	2000      	movs	r0, #0
 800d072:	e7fc      	b.n	800d06e <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5e>
 800d074:	c70f6907 	.word	0xc70f6907
 800d078:	080115e4 	.word	0x080115e4

0800d07c <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	460d      	mov	r5, r1
 800d082:	4a17      	ldr	r2, [pc, #92]	; (800d0e0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x64>)
 800d084:	210c      	movs	r1, #12
 800d086:	4817      	ldr	r0, [pc, #92]	; (800d0e4 <_ZN10MessageBus6defineI10DataPacketEEbh+0x68>)
 800d088:	f000 ff1c 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d08c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d090:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d094:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d098:	688e      	ldr	r6, [r1, #8]
 800d09a:	b9e6      	cbnz	r6, 800d0d6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800d09c:	b2c3      	uxtb	r3, r0
 800d09e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d0a2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d0a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0aa:	b142      	cbz	r2, 800d0be <_ZN10MessageBus6defineI10DataPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d0ac:	6852      	ldr	r2, [r2, #4]
 800d0ae:	4282      	cmp	r2, r0
 800d0b0:	d013      	beq.n	800d0da <_ZN10MessageBus6defineI10DataPacketEEbh+0x5e>
		insertion_point++;
 800d0b2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d0b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0b8:	d1f5      	bne.n	800d0a6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x2a>
			insertion_point = 0;
 800d0ba:	4633      	mov	r3, r6
 800d0bc:	e7ef      	b.n	800d09e <_ZN10MessageBus6defineI10DataPacketEEbh+0x22>
	def->id = identifier;
 800d0be:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d0c0:	2204      	movs	r2, #4
 800d0c2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d0c4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d0c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d0ca:	4496      	add	lr, r2
 800d0cc:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d0ce:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e000      	b.n	800d0d8 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5c>
		return false; // Packet ID already in use
 800d0d6:	2000      	movs	r0, #0
}
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e7fc      	b.n	800d0d8 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5c>
 800d0de:	bf00      	nop
 800d0e0:	c70f6907 	.word	0xc70f6907
 800d0e4:	080115f0 	.word	0x080115f0

0800d0e8 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	4a17      	ldr	r2, [pc, #92]	; (800d14c <_ZN10MessageBus6defineI10PingPacketEEbh+0x64>)
 800d0f0:	210c      	movs	r1, #12
 800d0f2:	4817      	ldr	r0, [pc, #92]	; (800d150 <_ZN10MessageBus6defineI10PingPacketEEbh+0x68>)
 800d0f4:	f000 fee6 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d0f8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d0fc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d100:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d104:	688e      	ldr	r6, [r1, #8]
 800d106:	b9ee      	cbnz	r6, 800d144 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d108:	b2c3      	uxtb	r3, r0
 800d10a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d10e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d112:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d116:	b142      	cbz	r2, 800d12a <_ZN10MessageBus6defineI10PingPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d118:	6852      	ldr	r2, [r2, #4]
 800d11a:	4282      	cmp	r2, r0
 800d11c:	d014      	beq.n	800d148 <_ZN10MessageBus6defineI10PingPacketEEbh+0x60>
		insertion_point++;
 800d11e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d124:	d1f5      	bne.n	800d112 <_ZN10MessageBus6defineI10PingPacketEEbh+0x2a>
			insertion_point = 0;
 800d126:	4633      	mov	r3, r6
 800d128:	e7ef      	b.n	800d10a <_ZN10MessageBus6defineI10PingPacketEEbh+0x22>
	def->id = identifier;
 800d12a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d12c:	2208      	movs	r2, #8
 800d12e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d130:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d136:	f10e 0e04 	add.w	lr, lr, #4
 800d13a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d13c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d140:	2001      	movs	r0, #1
 800d142:	e000      	b.n	800d146 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d144:	2000      	movs	r0, #0
}
 800d146:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d148:	2000      	movs	r0, #0
 800d14a:	e7fc      	b.n	800d146 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
 800d14c:	c70f6907 	.word	0xc70f6907
 800d150:	08011600 	.word	0x08011600

0800d154 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	4604      	mov	r4, r0
 800d158:	460d      	mov	r5, r1
 800d15a:	4a17      	ldr	r2, [pc, #92]	; (800d1b8 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x64>)
 800d15c:	210d      	movs	r1, #13
 800d15e:	4817      	ldr	r0, [pc, #92]	; (800d1bc <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x68>)
 800d160:	f000 feb0 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d164:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d168:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d16c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d170:	688e      	ldr	r6, [r1, #8]
 800d172:	b9ee      	cbnz	r6, 800d1b0 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d174:	b2c3      	uxtb	r3, r0
 800d176:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d17a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d17e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d182:	b142      	cbz	r2, 800d196 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d184:	6852      	ldr	r2, [r2, #4]
 800d186:	4282      	cmp	r2, r0
 800d188:	d014      	beq.n	800d1b4 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x60>
		insertion_point++;
 800d18a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d190:	d1f5      	bne.n	800d17e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x2a>
			insertion_point = 0;
 800d192:	4633      	mov	r3, r6
 800d194:	e7ef      	b.n	800d176 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x22>
	def->id = identifier;
 800d196:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d198:	2201      	movs	r2, #1
 800d19a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d19c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d19e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d1a2:	f10e 0e04 	add.w	lr, lr, #4
 800d1a6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d1a8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	e000      	b.n	800d1b2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d1b0:	2000      	movs	r0, #0
}
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	e7fc      	b.n	800d1b2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
 800d1b8:	c70f6907 	.word	0xc70f6907
 800d1bc:	08011610 	.word	0x08011610

0800d1c0 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	4a17      	ldr	r2, [pc, #92]	; (800d224 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x64>)
 800d1c8:	210f      	movs	r1, #15
 800d1ca:	4817      	ldr	r0, [pc, #92]	; (800d228 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x68>)
 800d1cc:	f000 fe7a 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d1d0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d1d4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d1d8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d1dc:	688e      	ldr	r6, [r1, #8]
 800d1de:	b9ee      	cbnz	r6, 800d21c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d1e0:	b2c3      	uxtb	r3, r0
 800d1e2:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d1e6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d1ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1ee:	b142      	cbz	r2, 800d202 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d1f0:	6852      	ldr	r2, [r2, #4]
 800d1f2:	4282      	cmp	r2, r0
 800d1f4:	d014      	beq.n	800d220 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x60>
		insertion_point++;
 800d1f6:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1fc:	d1f5      	bne.n	800d1ea <_ZN10MessageBus6defineI13RequestPacketEEbh+0x2a>
			insertion_point = 0;
 800d1fe:	4633      	mov	r3, r6
 800d200:	e7ef      	b.n	800d1e2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x22>
	def->id = identifier;
 800d202:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d204:	2208      	movs	r2, #8
 800d206:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d208:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d20a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d20e:	f10e 0e04 	add.w	lr, lr, #4
 800d212:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d214:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d218:	2001      	movs	r0, #1
 800d21a:	e000      	b.n	800d21e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d21c:	2000      	movs	r0, #0
}
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d220:	2000      	movs	r0, #0
 800d222:	e7fc      	b.n	800d21e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
 800d224:	c70f6907 	.word	0xc70f6907
 800d228:	08011620 	.word	0x08011620

0800d22c <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	460d      	mov	r5, r1
 800d232:	4a17      	ldr	r2, [pc, #92]	; (800d290 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x64>)
 800d234:	2110      	movs	r1, #16
 800d236:	4817      	ldr	r0, [pc, #92]	; (800d294 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x68>)
 800d238:	f000 fe44 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d23c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d240:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d244:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d248:	688e      	ldr	r6, [r1, #8]
 800d24a:	b9ee      	cbnz	r6, 800d288 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d24c:	b2c3      	uxtb	r3, r0
 800d24e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d252:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d256:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d25a:	b142      	cbz	r2, 800d26e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d25c:	6852      	ldr	r2, [r2, #4]
 800d25e:	4282      	cmp	r2, r0
 800d260:	d014      	beq.n	800d28c <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x60>
		insertion_point++;
 800d262:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d268:	d1f5      	bne.n	800d256 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x2a>
			insertion_point = 0;
 800d26a:	4633      	mov	r3, r6
 800d26c:	e7ef      	b.n	800d24e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x22>
	def->id = identifier;
 800d26e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d270:	2208      	movs	r2, #8
 800d272:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d274:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d276:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d27a:	f10e 0e04 	add.w	lr, lr, #4
 800d27e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d280:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d284:	2001      	movs	r0, #1
 800d286:	e000      	b.n	800d28a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d288:	2000      	movs	r0, #0
}
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d28c:	2000      	movs	r0, #0
 800d28e:	e7fc      	b.n	800d28a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
 800d290:	c70f6907 	.word	0xc70f6907
 800d294:	08011630 	.word	0x08011630

0800d298 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	4604      	mov	r4, r0
 800d29c:	460d      	mov	r5, r1
 800d29e:	4a17      	ldr	r2, [pc, #92]	; (800d2fc <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x64>)
 800d2a0:	2110      	movs	r1, #16
 800d2a2:	4817      	ldr	r0, [pc, #92]	; (800d300 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x68>)
 800d2a4:	f000 fe0e 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d2a8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800d2ac:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d2b0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800d2b4:	688e      	ldr	r6, [r1, #8]
 800d2b6:	b9ee      	cbnz	r6, 800d2f4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800d2b8:	b2c3      	uxtb	r3, r0
 800d2ba:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800d2be:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800d2c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2c6:	b142      	cbz	r2, 800d2da <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800d2c8:	6852      	ldr	r2, [r2, #4]
 800d2ca:	4282      	cmp	r2, r0
 800d2cc:	d014      	beq.n	800d2f8 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x60>
		insertion_point++;
 800d2ce:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800d2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d4:	d1f5      	bne.n	800d2c2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x2a>
			insertion_point = 0;
 800d2d6:	4633      	mov	r3, r6
 800d2d8:	e7ef      	b.n	800d2ba <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x22>
	def->id = identifier;
 800d2da:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800d2dc:	2205      	movs	r2, #5
 800d2de:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800d2e0:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800d2e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800d2e6:	f10e 0e04 	add.w	lr, lr, #4
 800d2ea:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800d2ec:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	e000      	b.n	800d2f6 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800d2f4:	2000      	movs	r0, #0
}
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7fc      	b.n	800d2f6 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
 800d2fc:	c70f6907 	.word	0xc70f6907
 800d300:	08011644 	.word	0x08011644

0800d304 <_ZNKSt8functionIFvhPvEEclEhS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800d304:	b500      	push	{lr}
 800d306:	b083      	sub	sp, #12
 800d308:	9200      	str	r2, [sp, #0]
 800d30a:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800d30e:	6883      	ldr	r3, [r0, #8]
 800d310:	b13b      	cbz	r3, 800d322 <_ZNKSt8functionIFvhPvEEclEhS0_+0x1e>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800d312:	68c3      	ldr	r3, [r0, #12]
 800d314:	466a      	mov	r2, sp
 800d316:	f10d 0107 	add.w	r1, sp, #7
 800d31a:	4798      	blx	r3
    }
 800d31c:	b003      	add	sp, #12
 800d31e:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 800d322:	f001 f912 	bl	800e54a <_ZSt25__throw_bad_function_callv>

0800d326 <_ZN10MessageBus7receiveEhPhm>:
	if(length > 0) {
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 80a7 	beq.w	800d47a <_ZN10MessageBus7receiveEhPhm+0x154>
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 800d32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d330:	4605      	mov	r5, r0
 800d332:	4699      	mov	r9, r3
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 800d334:	f001 043f 	and.w	r4, r1, #63	; 0x3f
		if(indexable_buffer->index == 0) {
 800d338:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800d33c:	4403      	add	r3, r0
 800d33e:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800d342:	2b00      	cmp	r3, #0
 800d344:	f040 8085 	bne.w	800d452 <_ZN10MessageBus7receiveEhPhm+0x12c>
			packet_id = *pointer++; // Packet ID is the first element in a frame
 800d348:	f812 3b01 	ldrb.w	r3, [r2], #1
			indexable_buffer->current_packet_id = packet_id;
 800d34c:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800d350:	4428      	add	r0, r5
 800d352:	f880 3604 	strb.w	r3, [r0, #1540]	; 0x604
			indexable_buffer->index++;
 800d356:	2601      	movs	r6, #1
 800d358:	f880 6704 	strb.w	r6, [r0, #1796]	; 0x704
			length--;
 800d35c:	f109 39ff 	add.w	r9, r9, #4294967295
		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 800d360:	f003 063f 	and.w	r6, r3, #63	; 0x3f
		if(def->id != packet_id || indexable_buffer->index + length > max_packet_size) {
 800d364:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 800d368:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
 800d36c:	7938      	ldrb	r0, [r7, #4]
 800d36e:	4298      	cmp	r0, r3
 800d370:	d175      	bne.n	800d45e <_ZN10MessageBus7receiveEhPhm+0x138>
 800d372:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800d376:	442b      	add	r3, r5
 800d378:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800d37c:	444b      	add	r3, r9
 800d37e:	2bff      	cmp	r3, #255	; 0xff
 800d380:	d86d      	bhi.n	800d45e <_ZN10MessageBus7receiveEhPhm+0x138>
		for(uint16_t i = 0; i < length; i++) {
 800d382:	f1b9 0f00 	cmp.w	r9, #0
 800d386:	d015      	beq.n	800d3b4 <_ZN10MessageBus7receiveEhPhm+0x8e>
 800d388:	f04f 0c00 	mov.w	ip, #0
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 800d38c:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800d390:	4428      	add	r0, r5
 800d392:	f890 e704 	ldrb.w	lr, [r0, #1796]	; 0x704
 800d396:	f10e 0301 	add.w	r3, lr, #1
 800d39a:	f880 3704 	strb.w	r3, [r0, #1796]	; 0x704
 800d39e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d3a2:	4486      	add	lr, r0
 800d3a4:	f88e 3605 	strb.w	r3, [lr, #1541]	; 0x605
		for(uint16_t i = 0; i < length; i++) {
 800d3a8:	f10c 0c01 	add.w	ip, ip, #1
 800d3ac:	fa1f fc8c 	uxth.w	ip, ip
 800d3b0:	45cc      	cmp	ip, r9
 800d3b2:	d3ee      	bcc.n	800d392 <_ZN10MessageBus7receiveEhPhm+0x6c>
		int16_t excess = indexable_buffer->index - (def->size + 1);
 800d3b4:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800d3b8:	442b      	add	r3, r5
 800d3ba:	f893 a704 	ldrb.w	sl, [r3, #1796]	; 0x704
 800d3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3c2:	797b      	ldrb	r3, [r7, #5]
 800d3c4:	ebaa 0a03 	sub.w	sl, sl, r3
 800d3c8:	fa1f f98a 	uxth.w	r9, sl
		if(excess >= 0) {
 800d3cc:	f1ba 0f00 	cmp.w	sl, #0
 800d3d0:	db51      	blt.n	800d476 <_ZN10MessageBus7receiveEhPhm+0x150>
			if(handlers[packet_id & 0b00111111] != nullptr) {
 800d3d2:	eb05 1006 	add.w	r0, r5, r6, lsl #4
 800d3d6:	f600 600c 	addw	r0, r0, #3596	; 0xe0c
 800d3da:	6883      	ldr	r3, [r0, #8]
 800d3dc:	b133      	cbz	r3, 800d3ec <_ZN10MessageBus7receiveEhPhm+0xc6>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer + 1);
 800d3de:	eb04 2204 	add.w	r2, r4, r4, lsl #8
 800d3e2:	f202 6206 	addw	r2, r2, #1542	; 0x606
 800d3e6:	442a      	add	r2, r5
 800d3e8:	f7ff ff8c 	bl	800d304 <_ZNKSt8functionIFvhPvEEclEhS0_>
			if(forwarders[packet_id & 0b00111111] != nullptr) {
 800d3ec:	f206 4682 	addw	r6, r6, #1154	; 0x482
 800d3f0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800d3f4:	6870      	ldr	r0, [r6, #4]
 800d3f6:	b150      	cbz	r0, 800d40e <_ZN10MessageBus7receiveEhPhm+0xe8>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer + 1);
 800d3f8:	eb04 2204 	add.w	r2, r4, r4, lsl #8
 800d3fc:	f202 6206 	addw	r2, r2, #1542	; 0x606
		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 800d400:	f108 0104 	add.w	r1, r8, #4
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer + 1);
 800d404:	6803      	ldr	r3, [r0, #0]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	442a      	add	r2, r5
 800d40a:	4429      	add	r1, r5
 800d40c:	4798      	blx	r3
			if(excess > 0) {
 800d40e:	f1ba 0f00 	cmp.w	sl, #0
 800d412:	dd18      	ble.n	800d446 <_ZN10MessageBus7receiveEhPhm+0x120>
					indexable_buffer->buffer[i] = indexable_buffer->buffer[i + (def->size + 1)];
 800d414:	797e      	ldrb	r6, [r7, #5]
 800d416:	3601      	adds	r6, #1
				for(uint16_t i = 0; i < excess; i++) {
 800d418:	2300      	movs	r3, #0
 800d41a:	461a      	mov	r2, r3
					indexable_buffer->buffer[i] = indexable_buffer->buffer[i + (def->size + 1)];
 800d41c:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800d420:	4428      	add	r0, r5
 800d422:	4402      	add	r2, r0
 800d424:	1991      	adds	r1, r2, r6
 800d426:	f891 1605 	ldrb.w	r1, [r1, #1541]	; 0x605
 800d42a:	f882 1605 	strb.w	r1, [r2, #1541]	; 0x605
				for(uint16_t i = 0; i < excess; i++) {
 800d42e:	3301      	adds	r3, #1
 800d430:	b29b      	uxth	r3, r3
 800d432:	461a      	mov	r2, r3
 800d434:	4553      	cmp	r3, sl
 800d436:	dbf4      	blt.n	800d422 <_ZN10MessageBus7receiveEhPhm+0xfc>
				indexable_buffer->current_packet_id = indexable_buffer->buffer[0];
 800d438:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800d43c:	442b      	add	r3, r5
 800d43e:	f893 2605 	ldrb.w	r2, [r3, #1541]	; 0x605
 800d442:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
			indexable_buffer->index = excess;
 800d446:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 800d44a:	442c      	add	r4, r5
 800d44c:	f884 9704 	strb.w	r9, [r4, #1796]	; 0x704
 800d450:	e011      	b.n	800d476 <_ZN10MessageBus7receiveEhPhm+0x150>
			packet_id = indexable_buffer->current_packet_id;
 800d452:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800d456:	4403      	add	r3, r0
 800d458:	f893 3604 	ldrb.w	r3, [r3, #1540]	; 0x604
 800d45c:	e780      	b.n	800d360 <_ZN10MessageBus7receiveEhPhm+0x3a>
			indexable_buffer->index = 0; // Corrupted packet
 800d45e:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 800d462:	442c      	add	r4, r5
 800d464:	2300      	movs	r3, #0
 800d466:	f884 3704 	strb.w	r3, [r4, #1796]	; 0x704
			indexable_buffer->current_packet_id = 0;
 800d46a:	f884 3604 	strb.w	r3, [r4, #1540]	; 0x604
			receive(sender_id, pointer, length);
 800d46e:	464b      	mov	r3, r9
 800d470:	4628      	mov	r0, r5
 800d472:	f7ff ff58 	bl	800d326 <_ZN10MessageBus7receiveEhPhm>
}
 800d476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47a:	4770      	bx	lr

0800d47c <_ZNKSt8functionIFvhP22sc_trap_success_packetEEclEhS1_>:
    function<_Res(_ArgTypes...)>::
 800d47c:	b500      	push	{lr}
 800d47e:	b083      	sub	sp, #12
 800d480:	9200      	str	r2, [sp, #0]
 800d482:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
 800d486:	6883      	ldr	r3, [r0, #8]
 800d488:	b13b      	cbz	r3, 800d49a <_ZNKSt8functionIFvhP22sc_trap_success_packetEEclEhS1_+0x1e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800d48a:	68c3      	ldr	r3, [r0, #12]
 800d48c:	466a      	mov	r2, sp
 800d48e:	f10d 0107 	add.w	r1, sp, #7
 800d492:	4798      	blx	r3
    }
 800d494:	b003      	add	sp, #12
 800d496:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 800d49a:	f001 f856 	bl	800e54a <_ZSt25__throw_bad_function_callv>

0800d49e <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d49e:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 800d4a0:	6804      	ldr	r4, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d4a2:	780d      	ldrb	r5, [r1, #0]
 800d4a4:	6816      	ldr	r6, [r2, #0]
				handlers[packetID](sender, (T*) packet);
 800d4a6:	7923      	ldrb	r3, [r4, #4]
 800d4a8:	011b      	lsls	r3, r3, #4
 800d4aa:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 800d4ae:	6820      	ldr	r0, [r4, #0]
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4418      	add	r0, r3
 800d4b6:	f7ff ff25 	bl	800d304 <_ZNKSt8functionIFvhPvEEclEhS0_>
				handler(sender, (T*) packet);
 800d4ba:	4632      	mov	r2, r6
 800d4bc:	4629      	mov	r1, r5
 800d4be:	68a0      	ldr	r0, [r4, #8]
 800d4c0:	f7ff ffdc 	bl	800d47c <_ZNKSt8functionIFvhP22sc_trap_success_packetEEclEhS1_>
      }
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}

0800d4c6 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d4c6:	b508      	push	{r3, lr}
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800d4c8:	6812      	ldr	r2, [r2, #0]
 800d4ca:	7809      	ldrb	r1, [r1, #0]
 800d4cc:	6800      	ldr	r0, [r0, #0]
 800d4ce:	f7ff ffd5 	bl	800d47c <_ZNKSt8functionIFvhP22sc_trap_success_packetEEclEhS1_>
      }
 800d4d2:	bd08      	pop	{r3, pc}

0800d4d4 <_ZNSt8functionIFvhP22sc_trap_success_packetEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 800d4d8:	2300      	movs	r3, #0
 800d4da:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 800d4dc:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 800d4de:	b133      	cbz	r3, 800d4ee <_ZNSt8functionIFvhP22sc_trap_success_packetEEC1ERKS3_+0x1a>
 800d4e0:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800d4e6:	68eb      	ldr	r3, [r5, #12]
 800d4e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 800d4ea:	68ab      	ldr	r3, [r5, #8]
 800d4ec:	60a3      	str	r3, [r4, #8]
    }
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d4f4 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 800d4f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	b093      	sub	sp, #76	; 0x4c
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	460f      	mov	r7, r1
 800d4fe:	4a52      	ldr	r2, [pc, #328]	; (800d648 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x154>)
 800d500:	2118      	movs	r1, #24
 800d502:	4852      	ldr	r0, [pc, #328]	; (800d64c <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x158>)
 800d504:	f000 fcde 	bl	800dec4 <_ZSt11_Hash_bytesPKvjj>
 800d508:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	4620      	mov	r0, r4
 800d510:	4798      	blx	r3
	if(def != nullptr) {
 800d512:	2800      	cmp	r0, #0
 800d514:	f000 8093 	beq.w	800d63e <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x14a>
		uint8_t packetID = def->id;
 800d518:	7805      	ldrb	r5, [r0, #0]
		if(handlers[packetID] != nullptr) {
 800d51a:	eb04 1605 	add.w	r6, r4, r5, lsl #4
 800d51e:	f606 660c 	addw	r6, r6, #3596	; 0xe0c
 800d522:	68b3      	ldr	r3, [r6, #8]
 800d524:	b32b      	cbz	r3, 800d572 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x7e>
    _Function_base() : _M_manager(nullptr) { }
 800d526:	2300      	movs	r3, #0
 800d528:	9308      	str	r3, [sp, #32]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d52a:	200c      	movs	r0, #12
 800d52c:	f7fe ff0c 	bl	800c348 <_Znwj>
 800d530:	6004      	str	r4, [r0, #0]
 800d532:	7105      	strb	r5, [r0, #4]
 800d534:	6087      	str	r7, [r0, #8]
 800d536:	9006      	str	r0, [sp, #24]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d538:	466b      	mov	r3, sp
 800d53a:	aa06      	add	r2, sp, #24
 800d53c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d540:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d544:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d548:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d54c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d550:	e9c6 0100 	strd	r0, r1, [r6]
      __a = _GLIBCXX_MOVE(__b);
 800d554:	68b3      	ldr	r3, [r6, #8]
 800d556:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 800d558:	4a3d      	ldr	r2, [pc, #244]	; (800d650 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x15c>)
 800d55a:	60b2      	str	r2, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
 800d55c:	68f2      	ldr	r2, [r6, #12]
 800d55e:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 800d560:	4a3c      	ldr	r2, [pc, #240]	; (800d654 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x160>)
 800d562:	60f2      	str	r2, [r6, #12]
      if (_M_manager)
 800d564:	b11b      	cbz	r3, 800d56e <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x7a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d566:	2203      	movs	r2, #3
 800d568:	a906      	add	r1, sp, #24
 800d56a:	4608      	mov	r0, r1
 800d56c:	4798      	blx	r3
		return true;
 800d56e:	2001      	movs	r0, #1
 800d570:	e066      	b.n	800d640 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x14c>
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800d572:	f10d 0908 	add.w	r9, sp, #8
 800d576:	4639      	mov	r1, r7
 800d578:	4648      	mov	r0, r9
 800d57a:	f7ff ffab 	bl	800d4d4 <_ZNSt8functionIFvhP22sc_trap_success_packetEEC1ERKS3_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d57e:	466f      	mov	r7, sp
 800d580:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d584:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d588:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d58c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d590:	e889 0003 	stmia.w	r9, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d594:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d598:	e888 0003 	stmia.w	r8, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d59c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 800d59e:	f04f 0900 	mov.w	r9, #0
 800d5a2:	f8cd 9010 	str.w	r9, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800d5a6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d5a8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800d5aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5ac:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800d5ae:	930d      	str	r3, [sp, #52]	; 0x34
    _Function_base() : _M_manager(nullptr) { }
 800d5b0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d5b4:	2010      	movs	r0, #16
 800d5b6:	f7fe fec7 	bl	800c348 <_Znwj>
 800d5ba:	4603      	mov	r3, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d5bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d5c0:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d5c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5c8:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d5cc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d5d0:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d5d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
 800d5d6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 800d5da:	609a      	str	r2, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __a = _GLIBCXX_MOVE(__b);
 800d5de:	68d9      	ldr	r1, [r3, #12]
 800d5e0:	910d      	str	r1, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 800d5e2:	60da      	str	r2, [r3, #12]
 800d5e4:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d5e6:	ab0e      	add	r3, sp, #56	; 0x38
 800d5e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5ec:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d5f0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800d5f4:	f604 640c 	addw	r4, r4, #3596	; 0xe0c
 800d5f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d5fc:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d600:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d604:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d608:	68b3      	ldr	r3, [r6, #8]
 800d60a:	9310      	str	r3, [sp, #64]	; 0x40
      __b = _GLIBCXX_MOVE(__tmp);
 800d60c:	4a12      	ldr	r2, [pc, #72]	; (800d658 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x164>)
 800d60e:	60b2      	str	r2, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
 800d610:	68f2      	ldr	r2, [r6, #12]
 800d612:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
 800d614:	4a11      	ldr	r2, [pc, #68]	; (800d65c <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x168>)
 800d616:	60f2      	str	r2, [r6, #12]
      if (_M_manager)
 800d618:	b11b      	cbz	r3, 800d622 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x12e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d61a:	2203      	movs	r2, #3
 800d61c:	a90e      	add	r1, sp, #56	; 0x38
 800d61e:	4608      	mov	r0, r1
 800d620:	4798      	blx	r3
      if (_M_manager)
 800d622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d624:	b11b      	cbz	r3, 800d62e <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x13a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d626:	2203      	movs	r2, #3
 800d628:	a90a      	add	r1, sp, #40	; 0x28
 800d62a:	4608      	mov	r0, r1
 800d62c:	4798      	blx	r3
      if (_M_manager)
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	b11b      	cbz	r3, 800d63a <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x146>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d632:	2203      	movs	r2, #3
 800d634:	a902      	add	r1, sp, #8
 800d636:	4608      	mov	r0, r1
 800d638:	4798      	blx	r3
		return true;
 800d63a:	2001      	movs	r0, #1
 800d63c:	e000      	b.n	800d640 <_ZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EE+0x14c>
	return false;
 800d63e:	2000      	movs	r0, #0
}
 800d640:	b013      	add	sp, #76	; 0x4c
 800d642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d646:	bf00      	nop
 800d648:	c70f6907 	.word	0xc70f6907
 800d64c:	080114dc 	.word	0x080114dc
 800d650:	0800c5c5 	.word	0x0800c5c5
 800d654:	0800d49f 	.word	0x0800d49f
 800d658:	0800d661 	.word	0x0800d661
 800d65c:	0800d4c7 	.word	0x0800d4c7

0800d660 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	4604      	mov	r4, r0
	switch (__op)
 800d664:	b142      	cbz	r2, 800d678 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 800d666:	4613      	mov	r3, r2
 800d668:	2a01      	cmp	r2, #1
 800d66a:	d009      	beq.n	800d680 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x20>
	  switch (__op)
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d805      	bhi.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800d670:	e8df f003 	tbb	[pc, r3]
 800d674:	190f0c09 	.word	0x190f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800d678:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>)
 800d67a:	6003      	str	r3, [r0, #0]
      }
 800d67c:	2000      	movs	r0, #0
 800d67e:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800d680:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d682:	6003      	str	r3, [r0, #0]
	    break;
 800d684:	e7fa      	b.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800d686:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>)
 800d688:	6003      	str	r3, [r0, #0]
	      break;
 800d68a:	e7f7      	b.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800d68c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800d68e:	6003      	str	r3, [r0, #0]
	      break;
 800d690:	e7f4      	b.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800d692:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800d694:	2010      	movs	r0, #16
 800d696:	f7fe fe57 	bl	800c348 <_Znwj>
 800d69a:	4605      	mov	r5, r0
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800d69c:	4631      	mov	r1, r6
 800d69e:	f7ff ff19 	bl	800d4d4 <_ZNSt8functionIFvhP22sc_trap_success_packetEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 800d6a2:	6025      	str	r5, [r4, #0]
	      break;
 800d6a4:	e7ea      	b.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800d6a6:	6804      	ldr	r4, [r0, #0]
 800d6a8:	2c00      	cmp	r4, #0
 800d6aa:	d0e7      	beq.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
      if (_M_manager)
 800d6ac:	68a3      	ldr	r3, [r4, #8]
 800d6ae:	b11b      	cbz	r3, 800d6b8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d6b0:	2203      	movs	r2, #3
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	4798      	blx	r3
	  delete __victim._M_access<_Functor*>();
 800d6b8:	2110      	movs	r1, #16
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 fbda 	bl	800de74 <_ZdlPvj>
	      break;
 800d6c0:	e7dc      	b.n	800d67c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI22sc_trap_success_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800d6c2:	bf00      	nop
 800d6c4:	08011700 	.word	0x08011700

0800d6c8 <_ZN10NetworkBusD1Ev>:

	//-------------Sussy_packets------
//	define<PollosHermanos_packet>(69);
}

NetworkBus::~NetworkBus(){};
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <_ZN10NetworkBusD1Ev+0x10>)
 800d6ce:	6003      	str	r3, [r0, #0]
 800d6d0:	f7fe fed0 	bl	800c474 <_ZN5IOBusD1Ev>
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	bd10      	pop	{r4, pc}
 800d6d8:	08011764 	.word	0x08011764

0800d6dc <_ZN10NetworkBusD0Ev>:
 800d6dc:	b510      	push	{r4, lr}
 800d6de:	4604      	mov	r4, r0
 800d6e0:	f7ff fff2 	bl	800d6c8 <_ZN10NetworkBusD1Ev>
 800d6e4:	f241 411c 	movw	r1, #5148	; 0x141c
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 fbc3 	bl	800de74 <_ZdlPvj>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	bd10      	pop	{r4, pc}
	...

0800d6f4 <_ZN10NetworkBusC1EP8IODriver>:
NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6fc:	f241 3219 	movw	r2, #4889	; 0x1319
 800d700:	4402      	add	r2, r0
 800d702:	f7fe fedd 	bl	800c4c0 <_ZN5IOBusC1EP8IODriverPhm>
 800d706:	4b38      	ldr	r3, [pc, #224]	; (800d7e8 <_ZN10NetworkBusC1EP8IODriver+0xf4>)
 800d708:	6023      	str	r3, [r4, #0]
	define<avionics_ToF_packet>(0);
 800d70a:	2100      	movs	r1, #0
 800d70c:	4620      	mov	r0, r4
 800d70e:	f7fe ff87 	bl	800c620 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>
	define<avionics_IMU_packet>(1);
 800d712:	2101      	movs	r1, #1
 800d714:	4620      	mov	r0, r4
 800d716:	f7fe ffb9 	bl	800c68c <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>
	define<avionics_potentiometer_packet>(2);
 800d71a:	2102      	movs	r1, #2
 800d71c:	4620      	mov	r0, r4
 800d71e:	f7ff f86f 	bl	800c800 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>
	define<avionics_massload_packet>(3);
 800d722:	2103      	movs	r1, #3
 800d724:	4620      	mov	r0, r4
 800d726:	f7fe ffff 	bl	800c728 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>
	define<avionics_moisture_packet>(4);
 800d72a:	2104      	movs	r1, #4
 800d72c:	4620      	mov	r0, r4
 800d72e:	f7ff f831 	bl	800c794 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>
	define<avionics_voltmeter_packet>(5);
 800d732:	2105      	movs	r1, #5
 800d734:	4620      	mov	r0, r4
 800d736:	f7ff f899 	bl	800c86c <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>
	define<sc_LED_packet>(6);
 800d73a:	2106      	movs	r1, #6
 800d73c:	4620      	mov	r0, r4
 800d73e:	f7ff fa27 	bl	800cb90 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>
	define<sc_trap_packet>(7);
 800d742:	2107      	movs	r1, #7
 800d744:	4620      	mov	r0, r4
 800d746:	f7ff f96f 	bl	800ca28 <_ZN10MessageBus6defineI14sc_trap_packetEEbh>
	define<sc_caching_packet>(8);
 800d74a:	2108      	movs	r1, #8
 800d74c:	4620      	mov	r0, r4
 800d74e:	f7ff f8db 	bl	800c908 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>
	define<sc_trap_success_packet>(9);
 800d752:	2109      	movs	r1, #9
 800d754:	4620      	mov	r0, r4
 800d756:	f7ff f9c1 	bl	800cadc <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>
	define<sc_caching_success_packet>(10);
 800d75a:	210a      	movs	r1, #10
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7ff f909 	bl	800c974 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>
	define<Power_SystemPacket>(11);
 800d762:	210b      	movs	r1, #11
 800d764:	4620      	mov	r0, r4
 800d766:	f7ff fa6d 	bl	800cc44 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Power_VoltagePacket>(12);
 800d76a:	210c      	movs	r1, #12
 800d76c:	4620      	mov	r0, r4
 800d76e:	f7ff fa9f 	bl	800ccb0 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(13);
 800d772:	210d      	movs	r1, #13
 800d774:	4620      	mov	r0, r4
 800d776:	f7ff fad1 	bl	800cd1c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Reset_PowerSupplyPacket>(14);
 800d77a:	210e      	movs	r1, #14
 800d77c:	4620      	mov	r0, r4
 800d77e:	f7ff fb03 	bl	800cd88 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>
	define<Switch_AvionicsPacket>(15);
 800d782:	210f      	movs	r1, #15
 800d784:	4620      	mov	r0, r4
 800d786:	f7ff fb35 	bl	800cdf4 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>
	define<Switch_RamanPacket>(16);
 800d78a:	2110      	movs	r1, #16
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7ff fb67 	bl	800ce60 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>
	define<Switch_JetsonPacket>(17);
 800d792:	2111      	movs	r1, #17
 800d794:	4620      	mov	r0, r4
 800d796:	f7ff fb99 	bl	800cecc <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>
	define<Switch_LidarPacket>(18);
 800d79a:	2112      	movs	r1, #18
 800d79c:	4620      	mov	r0, r4
 800d79e:	f7ff fbcb 	bl	800cf38 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>
	define<Switch_EthernetPacket>(19);
 800d7a2:	2113      	movs	r1, #19
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7ff fbfd 	bl	800cfa4 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>
	define<FsmPacket>(20);
 800d7aa:	2114      	movs	r1, #20
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f7ff fc2f 	bl	800d010 <_ZN10MessageBus6defineI9FsmPacketEEbh>
	define<DataPacket>(21);
 800d7b2:	2115      	movs	r1, #21
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f7ff fc61 	bl	800d07c <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<PingPacket>(22);
 800d7ba:	2116      	movs	r1, #22
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f7ff fc93 	bl	800d0e8 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ErrorPacket>(23);
 800d7c2:	2117      	movs	r1, #23
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7ff fcc5 	bl	800d154 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
	define<RequestPacket>(24);
 800d7ca:	2118      	movs	r1, #24
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7ff fcf7 	bl	800d1c0 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(25);
 800d7d2:	2119      	movs	r1, #25
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f7ff fd29 	bl	800d22c <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(26);
 800d7da:	211a      	movs	r1, #26
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f7ff fd5b 	bl	800d298 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
}
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	bf00      	nop
 800d7e8:	08011764 	.word	0x08011764

0800d7ec <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE>:
			this->last_dma_index = end_dma_index;
		}
	}
}

void STMUARTDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 800d7ec:	b530      	push	{r4, r5, lr}
 800d7ee:	b087      	sub	sp, #28
 800d7f0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9304      	str	r3, [sp, #16]
    bool _M_empty() const { return !_M_manager; }
 800d7f6:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 800d7f8:	b13b      	cbz	r3, 800d80a <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x1e>
 800d7fa:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	a802      	add	r0, sp, #8
 800d800:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800d802:	68eb      	ldr	r3, [r5, #12]
 800d804:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
 800d806:	68ab      	ldr	r3, [r5, #8]
 800d808:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d80a:	466a      	mov	r2, sp
 800d80c:	ad02      	add	r5, sp, #8
 800d80e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d812:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d816:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800d81a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d81e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d822:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d826:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d82a:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 800d82c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d82e:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800d830:	66e2      	str	r2, [r4, #108]	; 0x6c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d832:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800d834:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800d836:	9105      	str	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800d838:	6722      	str	r2, [r4, #112]	; 0x70
      if (_M_manager)
 800d83a:	b11b      	cbz	r3, 800d844 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d83c:	2203      	movs	r2, #3
 800d83e:	4629      	mov	r1, r5
 800d840:	4628      	mov	r0, r5
 800d842:	4798      	blx	r3
    this->receiver_func = receiver;
}
 800d844:	b007      	add	sp, #28
 800d846:	bd30      	pop	{r4, r5, pc}

0800d848 <_ZN13STMUARTDriver4initEv>:
void STMUARTDriver::init() {
 800d848:	b508      	push	{r3, lr}
	this->last_dma_index = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	63c3      	str	r3, [r0, #60]	; 0x3c
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d84e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	6993      	ldr	r3, [r2, #24]
 800d854:	f043 0308 	orr.w	r3, r3, #8
 800d858:	6193      	str	r3, [r2, #24]
	HAL_StatusTypeDef temp = HAL_UARTEx_ReceiveToIdle_DMA(huart, buffer, UART_BUFFER_SIZE);
 800d85a:	22ff      	movs	r2, #255	; 0xff
 800d85c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800d85e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d860:	f7fc f9de 	bl	8009c20 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800d864:	bd08      	pop	{r3, pc}

0800d866 <_ZThn4_N13STMUARTDriver4initEv>:
        uint8_t* getBuffer();
        xSemaphoreHandle getSemaphore();
        UART_HandleTypeDef* getHuart();
        uint8_t getSenderID(UART_HandleTypeDef* huart);

        void init();
 800d866:	f1a0 0004 	sub.w	r0, r0, #4
 800d86a:	f7ff bfed 	b.w	800d848 <_ZN13STMUARTDriver4initEv>

0800d86e <_ZN13STMUARTDriver8transmitEPhm>:

void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length) {
 800d86e:	b508      	push	{r3, lr}
    if(HAL_UART_Transmit(huart, buffer, length, portMAX_DELAY) != HAL_OK){
 800d870:	f04f 33ff 	mov.w	r3, #4294967295
 800d874:	b292      	uxth	r2, r2
 800d876:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d878:	f7fc f804 	bl	8009884 <HAL_UART_Transmit>
//        console.printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }
}
 800d87c:	bd08      	pop	{r3, pc}
	...

0800d880 <_ZN13STMUARTDriverD1Ev>:
STMUARTDriver::~STMUARTDriver() {
 800d880:	b510      	push	{r4, lr}
 800d882:	4604      	mov	r4, r0
 800d884:	4b08      	ldr	r3, [pc, #32]	; (800d8a8 <_ZN13STMUARTDriverD1Ev+0x28>)
 800d886:	f103 0208 	add.w	r2, r3, #8
 800d88a:	6002      	str	r2, [r0, #0]
 800d88c:	3328      	adds	r3, #40	; 0x28
 800d88e:	6043      	str	r3, [r0, #4]
    vPortFree(buffer);
 800d890:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d892:	f7fe faa1 	bl	800bdd8 <vPortFree>
      if (_M_manager)
 800d896:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d898:	b123      	cbz	r3, 800d8a4 <_ZN13STMUARTDriverD1Ev+0x24>
    class function<_Res(_ArgTypes...)>
 800d89a:	f104 0064 	add.w	r0, r4, #100	; 0x64
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d89e:	2203      	movs	r2, #3
 800d8a0:	4601      	mov	r1, r0
 800d8a2:	4798      	blx	r3
}
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	bd10      	pop	{r4, pc}
 800d8a8:	080117e8 	.word	0x080117e8

0800d8ac <_ZThn4_N13STMUARTDriverD1Ev>:
        virtual ~STMUARTDriver(); // Destructor
 800d8ac:	f1a0 0004 	sub.w	r0, r0, #4
 800d8b0:	f7ff bfe6 	b.w	800d880 <_ZN13STMUARTDriverD1Ev>

0800d8b4 <_ZN13STMUARTDriverD0Ev>:
STMUARTDriver::~STMUARTDriver() {
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	4604      	mov	r4, r0
}
 800d8b8:	f7ff ffe2 	bl	800d880 <_ZN13STMUARTDriverD1Ev>
 800d8bc:	2178      	movs	r1, #120	; 0x78
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 fad8 	bl	800de74 <_ZdlPvj>
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	bd10      	pop	{r4, pc}

0800d8c8 <_ZThn4_N13STMUARTDriverD0Ev>:
 800d8c8:	f1a0 0004 	sub.w	r0, r0, #4
 800d8cc:	f7ff bff2 	b.w	800d8b4 <_ZN13STMUARTDriverD0Ev>

0800d8d0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>:
STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): Thread("STMUARTDriver", osPriorityHigh), huart(huart), last_dma_index(0) {
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	460d      	mov	r5, r1

#include <cstdint>
#include <functional>


class IODriver {
 800d8d6:	4b13      	ldr	r3, [pc, #76]	; (800d924 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x54>)
 800d8d8:	f840 3b04 	str.w	r3, [r0], #4
 800d8dc:	2228      	movs	r2, #40	; 0x28
 800d8de:	4912      	ldr	r1, [pc, #72]	; (800d928 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x58>)
 800d8e0:	f7fe fd18 	bl	800c314 <_ZN6ThreadC1EPKc12osPriority_t>
 800d8e4:	4b11      	ldr	r3, [pc, #68]	; (800d92c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x5c>)
 800d8e6:	f103 0208 	add.w	r2, r3, #8
 800d8ea:	6022      	str	r2, [r4, #0]
 800d8ec:	3328      	adds	r3, #40	; 0x28
 800d8ee:	6063      	str	r3, [r4, #4]
 800d8f0:	63a5      	str	r5, [r4, #56]	; 0x38
 800d8f2:	2600      	movs	r6, #0
 800d8f4:	63e6      	str	r6, [r4, #60]	; 0x3c
 800d8f6:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800d8fa:	4d0d      	ldr	r5, [pc, #52]	; (800d930 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x60>)
 800d8fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d902:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d906:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _Function_base() : _M_manager(nullptr) { }
 800d90a:	66e6      	str	r6, [r4, #108]	; 0x6c
	this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 800d90c:	20ff      	movs	r0, #255	; 0xff
 800d90e:	f7fe f9c7 	bl	800bca0 <pvPortMalloc>
 800d912:	6620      	str	r0, [r4, #96]	; 0x60
    this->semaphore = xSemaphoreCreateCounting(16, 0);
 800d914:	4631      	mov	r1, r6
 800d916:	2010      	movs	r0, #16
 800d918:	f7fc fbeb 	bl	800a0f2 <xQueueCreateCountingSemaphore>
 800d91c:	6760      	str	r0, [r4, #116]	; 0x74
}
 800d91e:	4620      	mov	r0, r4
 800d920:	bd70      	pop	{r4, r5, r6, pc}
 800d922:	bf00      	nop
 800d924:	080117a8 	.word	0x080117a8
 800d928:	0801177c 	.word	0x0801177c
 800d92c:	080117e8 	.word	0x080117e8
 800d930:	080111e0 	.word	0x080111e0

0800d934 <_ZN13STMUARTDriver12getSemaphoreEv>:
}


xSemaphoreHandle STMUARTDriver::getSemaphore() {
	return this->semaphore;
}
 800d934:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d936:	4770      	bx	lr

0800d938 <_ZN13STMUARTDriver8getHuartEv>:

UART_HandleTypeDef* STMUARTDriver::getHuart() {
	return this->huart;
}
 800d938:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d93a:	4770      	bx	lr

0800d93c <_ZN13STMUARTDriver11receiveUARTEhPhm>:
 *
 * @param sender_id the ID of the MCU
 * @param buffer the buffer to provide to the user-defined callback function
 * @param length the size of the data in the buffer to provide
 */
void STMUARTDriver::receiveUART(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 800d93c:	b510      	push	{r4, lr}
 800d93e:	b084      	sub	sp, #16
	this->receiver_func(sender_id, buffer, length);
 800d940:	f88d 1007 	strb.w	r1, [sp, #7]
 800d944:	9202      	str	r2, [sp, #8]
 800d946:	9303      	str	r3, [sp, #12]
      if (_M_empty())
 800d948:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d94a:	b143      	cbz	r3, 800d95e <_ZN13STMUARTDriver11receiveUARTEhPhm+0x22>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800d94c:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800d94e:	ab03      	add	r3, sp, #12
 800d950:	aa02      	add	r2, sp, #8
 800d952:	f10d 0107 	add.w	r1, sp, #7
 800d956:	3064      	adds	r0, #100	; 0x64
 800d958:	47a0      	blx	r4
}
 800d95a:	b004      	add	sp, #16
 800d95c:	bd10      	pop	{r4, pc}
	__throw_bad_function_call();
 800d95e:	f000 fdf4 	bl	800e54a <_ZSt25__throw_bad_function_callv>

0800d962 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>:
 * @param huart the USART port to get
 * @return uint8_t the sender_id
 */
uint8_t STMUARTDriver::getSenderID(UART_HandleTypeDef* huart) {
    for(int i = 0; i < NB_UART_PORTS; ++i){
        if(this->mapper[i] == huart->Instance){
 800d962:	6809      	ldr	r1, [r1, #0]
 800d964:	3040      	adds	r0, #64	; 0x40
    for(int i = 0; i < NB_UART_PORTS; ++i){
 800d966:	2300      	movs	r3, #0
        if(this->mapper[i] == huart->Instance){
 800d968:	f850 2b04 	ldr.w	r2, [r0], #4
 800d96c:	428a      	cmp	r2, r1
 800d96e:	d004      	beq.n	800d97a <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x18>
    for(int i = 0; i < NB_UART_PORTS; ++i){
 800d970:	3301      	adds	r3, #1
 800d972:	2b08      	cmp	r3, #8
 800d974:	d1f8      	bne.n	800d968 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x6>
            return i+1;
        }
    }
    return 0;
 800d976:	2000      	movs	r0, #0
}
 800d978:	4770      	bx	lr
            return i+1;
 800d97a:	3301      	adds	r3, #1
 800d97c:	b2d8      	uxtb	r0, r3
 800d97e:	4770      	bx	lr

0800d980 <_ZN13STMUARTDriver4loopEv>:
void STMUARTDriver::loop() {
 800d980:	b510      	push	{r4, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	4604      	mov	r4, r0
	if(xSemaphoreTake(semaphore, portMAX_DELAY)) {
 800d986:	f04f 31ff 	mov.w	r1, #4294967295
 800d98a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d98c:	f7fc fe0d 	bl	800a5aa <xQueueSemaphoreTake>
 800d990:	2800      	cmp	r0, #0
 800d992:	d061      	beq.n	800da58 <_ZN13STMUARTDriver4loopEv+0xd8>
		volatile uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d994:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d996:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b3e      	ldr	r3, [pc, #248]	; (800da94 <_ZN13STMUARTDriver4loopEv+0x114>)
 800d99c:	483e      	ldr	r0, [pc, #248]	; (800da98 <_ZN13STMUARTDriver4loopEv+0x118>)
 800d99e:	4282      	cmp	r2, r0
 800d9a0:	bf18      	it	ne
 800d9a2:	429a      	cmpne	r2, r3
 800d9a4:	bf0c      	ite	eq
 800d9a6:	2301      	moveq	r3, #1
 800d9a8:	2300      	movne	r3, #0
 800d9aa:	3018      	adds	r0, #24
 800d9ac:	4282      	cmp	r2, r0
 800d9ae:	bf08      	it	eq
 800d9b0:	f043 0301 	orreq.w	r3, r3, #1
 800d9b4:	3018      	adds	r0, #24
 800d9b6:	4282      	cmp	r2, r0
 800d9b8:	bf08      	it	eq
 800d9ba:	f043 0301 	orreq.w	r3, r3, #1
 800d9be:	3018      	adds	r0, #24
 800d9c0:	4282      	cmp	r2, r0
 800d9c2:	bf08      	it	eq
 800d9c4:	f043 0301 	orreq.w	r3, r3, #1
 800d9c8:	3018      	adds	r0, #24
 800d9ca:	4282      	cmp	r2, r0
 800d9cc:	bf08      	it	eq
 800d9ce:	f043 0301 	orreq.w	r3, r3, #1
 800d9d2:	3018      	adds	r0, #24
 800d9d4:	4282      	cmp	r2, r0
 800d9d6:	bf08      	it	eq
 800d9d8:	f043 0301 	orreq.w	r3, r3, #1
 800d9dc:	3018      	adds	r0, #24
 800d9de:	4282      	cmp	r2, r0
 800d9e0:	bf08      	it	eq
 800d9e2:	f043 0301 	orreq.w	r3, r3, #1
 800d9e6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800d9ea:	4282      	cmp	r2, r0
 800d9ec:	bf08      	it	eq
 800d9ee:	f043 0301 	orreq.w	r3, r3, #1
 800d9f2:	3018      	adds	r0, #24
 800d9f4:	4282      	cmp	r2, r0
 800d9f6:	bf08      	it	eq
 800d9f8:	f043 0301 	orreq.w	r3, r3, #1
 800d9fc:	3018      	adds	r0, #24
 800d9fe:	4282      	cmp	r2, r0
 800da00:	bf08      	it	eq
 800da02:	f043 0301 	orreq.w	r3, r3, #1
 800da06:	3018      	adds	r0, #24
 800da08:	4282      	cmp	r2, r0
 800da0a:	bf08      	it	eq
 800da0c:	f043 0301 	orreq.w	r3, r3, #1
 800da10:	3018      	adds	r0, #24
 800da12:	4282      	cmp	r2, r0
 800da14:	bf08      	it	eq
 800da16:	f043 0301 	orreq.w	r3, r3, #1
 800da1a:	3018      	adds	r0, #24
 800da1c:	4282      	cmp	r2, r0
 800da1e:	bf08      	it	eq
 800da20:	f043 0301 	orreq.w	r3, r3, #1
 800da24:	3018      	adds	r0, #24
 800da26:	4282      	cmp	r2, r0
 800da28:	bf08      	it	eq
 800da2a:	f043 0301 	orreq.w	r3, r3, #1
 800da2e:	b913      	cbnz	r3, 800da36 <_ZN13STMUARTDriver4loopEv+0xb6>
 800da30:	4b1a      	ldr	r3, [pc, #104]	; (800da9c <_ZN13STMUARTDriver4loopEv+0x11c>)
 800da32:	429a      	cmp	r2, r3
 800da34:	d112      	bne.n	800da5c <_ZN13STMUARTDriver4loopEv+0xdc>
 800da36:	6853      	ldr	r3, [r2, #4]
 800da38:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800da3c:	9301      	str	r3, [sp, #4]
		volatile uint8_t sender = getSenderID(huart);
 800da3e:	4620      	mov	r0, r4
 800da40:	f7ff ff8f 	bl	800d962 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 800da44:	f88d 0003 	strb.w	r0, [sp, #3]
		if(end_dma_index < last_dma_index) { // Finish buffer
 800da48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800da4a:	9b01      	ldr	r3, [sp, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d809      	bhi.n	800da64 <_ZN13STMUARTDriver4loopEv+0xe4>
		if(end_dma_index > last_dma_index) {
 800da50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800da52:	9b01      	ldr	r3, [sp, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d311      	bcc.n	800da7c <_ZN13STMUARTDriver4loopEv+0xfc>
}
 800da58:	b002      	add	sp, #8
 800da5a:	bd10      	pop	{r4, pc}
		volatile uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da5c:	6853      	ldr	r3, [r2, #4]
 800da5e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800da62:	e7eb      	b.n	800da3c <_ZN13STMUARTDriver4loopEv+0xbc>
			receiveUART(sender, buffer + last_dma_index, UART_BUFFER_SIZE - last_dma_index);
 800da64:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800da68:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800da6a:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800da6e:	4402      	add	r2, r0
 800da70:	4620      	mov	r0, r4
 800da72:	f7ff ff63 	bl	800d93c <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	63e3      	str	r3, [r4, #60]	; 0x3c
 800da7a:	e7e9      	b.n	800da50 <_ZN13STMUARTDriver4loopEv+0xd0>
			receiveUART(sender, buffer + last_dma_index, end_dma_index - last_dma_index);
 800da7c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800da80:	9b01      	ldr	r3, [sp, #4]
 800da82:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800da84:	1a9b      	subs	r3, r3, r2
 800da86:	4402      	add	r2, r0
 800da88:	4620      	mov	r0, r4
 800da8a:	f7ff ff57 	bl	800d93c <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = end_dma_index;
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800da92:	e7e1      	b.n	800da58 <_ZN13STMUARTDriver4loopEv+0xd8>
 800da94:	40020010 	.word	0x40020010
 800da98:	40020028 	.word	0x40020028
 800da9c:	400204b8 	.word	0x400204b8

0800daa0 <_ZThn4_N13STMUARTDriver4loopEv>:
        void loop();
 800daa0:	f1a0 0004 	sub.w	r0, r0, #4
 800daa4:	f7ff bf6c 	b.w	800d980 <_ZN13STMUARTDriver4loopEv>

0800daa8 <_ZN9IMUThreadD1Ev>:
#include "Prober.h"
#include "DataStructures.h"

#include "bno055_stm32.h"

class IMUThread : public Thread {
 800daa8:	4770      	bx	lr

0800daaa <_ZN9IMUThread4initEv>:

#include "Telemetry.h"

//static char cbuf[256];

void IMUThread::init() {
 800daaa:	b510      	push	{r4, lr}
 800daac:	4604      	mov	r4, r0
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
	void init();
	void loop();
	void resetProber();
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 800daae:	6b43      	ldr	r3, [r0, #52]	; 0x34
	bno055_assignI2C(parent->getI2C());
 800dab0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dab2:	f7f4 fb7f 	bl	80021b4 <bno055_assignI2C>
	bno055_setup();
 800dab6:	f7f4 fa82 	bl	8001fbe <bno055_setup>
	bno055_setOperationModeNDOF();
 800daba:	f7f4 fa71 	bl	8001fa0 <bno055_setOperationModeNDOF>

	if(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 800dabe:	f7f4 fa99 	bl	8001ff4 <bno055_getSystemError>
 800dac2:	b900      	cbnz	r0, 800dac6 <_ZN9IMUThread4initEv+0x1c>
		parent->resetProber();
		return;
	}

//	println("[%d] BNO055 initialized", portNum);
}
 800dac4:	bd10      	pop	{r4, pc}
		terminate();
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7fe fc3b 	bl	800c342 <_ZN6Thread9terminateEv>
		parent->resetProber();
 800dacc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800dace:	f000 f8db 	bl	800dc88 <_ZN12ProberThread11resetProberEv>
		return;
 800dad2:	e7f7      	b.n	800dac4 <_ZN9IMUThread4initEv+0x1a>

0800dad4 <_ZN9IMUThreadD0Ev>:
 800dad4:	b510      	push	{r4, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	213c      	movs	r1, #60	; 0x3c
 800dada:	f000 f9cb 	bl	800de74 <_ZdlPvj>
 800dade:	4620      	mov	r0, r4
 800dae0:	bd10      	pop	{r4, pc}
	...

0800dae4 <_ZN9IMUThread4loopEv>:

static IMUData data;
static avionics_IMU_packet packet;
void IMUThread::loop() {
 800dae4:	b530      	push	{r4, r5, lr}
 800dae6:	b099      	sub	sp, #100	; 0x64
 800dae8:	4605      	mov	r5, r0
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800daea:	f7f4 fb4b 	bl	8002184 <bno055_getVectorAccelerometer>
 800daee:	ed8d 0b00 	vstr	d0, [sp]
 800daf2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800daf6:	ed8d 2b04 	vstr	d2, [sp, #16]
 800dafa:	ed8d 3b06 	vstr	d3, [sp, #24]

Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
	Vector vector;

	vector.x = v.x;
	vector.y = v.y;
 800dafe:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800db02:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800db06:	4c31      	ldr	r4, [pc, #196]	; (800dbcc <_ZN9IMUThread4loopEv+0xe8>)
	vector.x = v.x;
 800db08:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800db0c:	ed84 1a00 	vstr	s2, [r4]
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800db10:	ed84 2a01 	vstr	s4, [r4, #4]
 800db14:	ed84 3a02 	vstr	s6, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorGyroscope());
 800db18:	f7f4 fb44 	bl	80021a4 <bno055_getVectorGyroscope>
 800db1c:	ed8d 0b08 	vstr	d0, [sp, #32]
 800db20:	ed8d 1b0a 	vstr	d1, [sp, #40]	; 0x28
 800db24:	ed8d 2b0c 	vstr	d2, [sp, #48]	; 0x30
 800db28:	ed8d 3b0e 	vstr	d3, [sp, #56]	; 0x38
	vector.y = v.y;
 800db2c:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800db30:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	vector.x = v.x;
 800db34:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800db38:	ed84 1a03 	vstr	s2, [r4, #12]
	data.gyro = bnoVectorToVector(bno055_getVectorGyroscope());
 800db3c:	ed84 2a04 	vstr	s4, [r4, #16]
 800db40:	ed84 3a05 	vstr	s6, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorMagnetometer());
 800db44:	f7f4 fb26 	bl	8002194 <bno055_getVectorMagnetometer>
 800db48:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 800db4c:	ed8d 1b12 	vstr	d1, [sp, #72]	; 0x48
 800db50:	ed8d 2b14 	vstr	d2, [sp, #80]	; 0x50
 800db54:	ed8d 3b16 	vstr	d3, [sp, #88]	; 0x58
	vector.y = v.y;
 800db58:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800db5c:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	vector.x = v.x;
 800db60:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800db64:	ed84 1a06 	vstr	s2, [r4, #24]
	data.mag = bnoVectorToVector(bno055_getVectorMagnetometer());
 800db68:	ed84 2a07 	vstr	s4, [r4, #28]
 800db6c:	ed84 3a08 	vstr	s6, [r4, #32]
 800db70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 800db72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800db74:	f7f7 fed5 	bl	8005922 <HAL_I2C_GetError>
 800db78:	bb08      	cbnz	r0, 800dbbe <_ZN9IMUThread4loopEv+0xda>
		sprintf(buffer, "[%f %f %f]", x, y, z);
		return buffer;
	}

	uint8_t* toArray(uint8_t* buffer) {
		*(float*)(buffer + 0) = x;
 800db7a:	4915      	ldr	r1, [pc, #84]	; (800dbd0 <_ZN9IMUThread4loopEv+0xec>)
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	600a      	str	r2, [r1, #0]
		*(float*)(buffer + 1*4) = y;
 800db80:	6862      	ldr	r2, [r4, #4]
 800db82:	604a      	str	r2, [r1, #4]
		*(float*)(buffer + 2*4) = z;
 800db84:	68a2      	ldr	r2, [r4, #8]
 800db86:	608a      	str	r2, [r1, #8]
		*(float*)(buffer + 0) = x;
 800db88:	68e2      	ldr	r2, [r4, #12]
 800db8a:	60ca      	str	r2, [r1, #12]
		*(float*)(buffer + 1*4) = y;
 800db8c:	6922      	ldr	r2, [r4, #16]
 800db8e:	610a      	str	r2, [r1, #16]
		*(float*)(buffer + 2*4) = z;
 800db90:	6962      	ldr	r2, [r4, #20]
 800db92:	614a      	str	r2, [r1, #20]
		*(float*)(buffer + 0) = x;
 800db94:	69a2      	ldr	r2, [r4, #24]
 800db96:	618a      	str	r2, [r1, #24]
		*(float*)(buffer + 1*4) = y;
 800db98:	69e2      	ldr	r2, [r4, #28]
 800db9a:	61ca      	str	r2, [r1, #28]
		*(float*)(buffer + 2*4) = z;
 800db9c:	6a23      	ldr	r3, [r4, #32]
 800db9e:	620b      	str	r3, [r1, #32]
		network.send(&packet);
 800dba0:	480c      	ldr	r0, [pc, #48]	; (800dbd4 <_ZN9IMUThread4loopEv+0xf0>)
 800dba2:	f7fe fda9 	bl	800c6f8 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_>
		portYIELD();
 800dba6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	f3bf 8f6f 	isb	sy
}
 800dbba:	b019      	add	sp, #100	; 0x64
 800dbbc:	bd30      	pop	{r4, r5, pc}
		terminate();
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f7fe fbbf 	bl	800c342 <_ZN6Thread9terminateEv>
		parent->resetProber();
 800dbc4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800dbc6:	f000 f85f 	bl	800dc88 <_ZN12ProberThread11resetProberEv>
}
 800dbca:	e7f6      	b.n	800dbba <_ZN9IMUThread4loopEv+0xd6>
 800dbcc:	2400a6a8 	.word	0x2400a6a8
 800dbd0:	2400a6cc 	.word	0x2400a6cc
 800dbd4:	2400928c 	.word	0x2400928c

0800dbd8 <_ZN12ProberThreadD1Ev>:
class ProberThread : Thread {
 800dbd8:	4770      	bx	lr

0800dbda <_ZN12ProberThreadD0Ev>:
 800dbda:	b510      	push	{r4, lr}
 800dbdc:	4604      	mov	r4, r0
 800dbde:	2144      	movs	r1, #68	; 0x44
 800dbe0:	f000 f948 	bl	800de74 <_ZdlPvj>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	bd10      	pop	{r4, pc}

0800dbe8 <_ZN12ProberThread8probeI2CEh>:
	this->semaphore = xSemaphoreCreateBinary();
	vTaskDelay(100 / portTICK_PERIOD_MS);
	this->i2cNum = checkI2CPort(hi2c);
}

bool ProberThread::probeI2C(uint8_t address) {
 800dbe8:	b508      	push	{r3, lr}
	return HAL_I2C_IsDeviceReady(hi2c, address << 1, 3, 100) == HAL_OK;
 800dbea:	2364      	movs	r3, #100	; 0x64
 800dbec:	2203      	movs	r2, #3
 800dbee:	0049      	lsls	r1, r1, #1
 800dbf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800dbf2:	f7f7 fddd 	bl	80057b0 <HAL_I2C_IsDeviceReady>
}
 800dbf6:	fab0 f080 	clz	r0, r0
 800dbfa:	0940      	lsrs	r0, r0, #5
 800dbfc:	bd08      	pop	{r3, pc}
	...

0800dc00 <_ZN12ProberThread4loopEv>:
//	HX711_init(hx711a);
//	HX711_init(hx711b);
//	return HX711_checkReadiness(hx711a) && HX711_checkReadiness(hx711b);
}

void ProberThread::loop() {
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4604      	mov	r4, r0
	if(probeI2C(BNO055_I2C_ADDR)) {
 800dc04:	2128      	movs	r1, #40	; 0x28
 800dc06:	f7ff ffef 	bl	800dbe8 <_ZN12ProberThread8probeI2CEh>
 800dc0a:	b1d0      	cbz	r0, 800dc42 <_ZN12ProberThread4loopEv+0x42>
//	if(true) {
//		println("[i2c%u] Accelerometer detected", getI2CNum());
		this->instance = new IMUThread(this);
 800dc0c:	203c      	movs	r0, #60	; 0x3c
 800dc0e:	f7fe fb9b 	bl	800c348 <_Znwj>
 800dc12:	4605      	mov	r5, r0
public:
	IMUThread(ProberThread* parent) : Thread("IMU"), parent(parent), portNum(parent->getI2CNum()) {}
 800dc14:	4918      	ldr	r1, [pc, #96]	; (800dc78 <_ZN12ProberThread4loopEv+0x78>)
 800dc16:	f7fe fb85 	bl	800c324 <_ZN6ThreadC1EPKc>
 800dc1a:	4b18      	ldr	r3, [pc, #96]	; (800dc7c <_ZN12ProberThread4loopEv+0x7c>)
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	636c      	str	r4, [r5, #52]	; 0x34
 800dc20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dc24:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800dc28:	63e5      	str	r5, [r4, #60]	; 0x3c
		xSemaphoreTake(semaphore, portMAX_DELAY);
 800dc2a:	f04f 31ff 	mov.w	r1, #4294967295
 800dc2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800dc30:	f7fc fcbb 	bl	800a5aa <xQueueSemaphoreTake>
		xSemaphoreTake(semaphore, portMAX_DELAY);
	} else {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}

	HAL_I2C_DeInit(hi2c);
 800dc34:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800dc36:	f7f7 fb41 	bl	80052bc <HAL_I2C_DeInit>
	HAL_I2C_Init(hi2c);
 800dc3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800dc3c:	f7f7 fae4 	bl	8005208 <HAL_I2C_Init>
}
 800dc40:	bd38      	pop	{r3, r4, r5, pc}
		bool status = probeI2C(ADS_ADDR_GND); // writing this in the else if statement doesn't work for some reason
 800dc42:	2148      	movs	r1, #72	; 0x48
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7ff ffcf 	bl	800dbe8 <_ZN12ProberThread8probeI2CEh>
		if (status) {
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d0f2      	beq.n	800dc34 <_ZN12ProberThread4loopEv+0x34>
		this->instance = new VoltmeterThread(this);
 800dc4e:	2054      	movs	r0, #84	; 0x54
 800dc50:	f7fe fb7a 	bl	800c348 <_Znwj>
 800dc54:	4605      	mov	r5, r0

#include "ADS1113.h"

class VoltmeterThread : public Thread {
public:
	VoltmeterThread(ProberThread* parent) : Thread("Voltmeter"), parent(parent), portNum(parent->getI2CNum()) {}
 800dc56:	490a      	ldr	r1, [pc, #40]	; (800dc80 <_ZN12ProberThread4loopEv+0x80>)
 800dc58:	f7fe fb64 	bl	800c324 <_ZN6ThreadC1EPKc>
 800dc5c:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <_ZN12ProberThread4loopEv+0x84>)
 800dc5e:	602b      	str	r3, [r5, #0]
 800dc60:	64ec      	str	r4, [r5, #76]	; 0x4c
 800dc62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dc66:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 800dc6a:	63e5      	str	r5, [r4, #60]	; 0x3c
		xSemaphoreTake(semaphore, portMAX_DELAY);}
 800dc6c:	f04f 31ff 	mov.w	r1, #4294967295
 800dc70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800dc72:	f7fc fc9a 	bl	800a5aa <xQueueSemaphoreTake>
 800dc76:	e7dd      	b.n	800dc34 <_ZN12ProberThread4loopEv+0x34>
 800dc78:	08011850 	.word	0x08011850
 800dc7c:	08011840 	.word	0x08011840
 800dc80:	08011854 	.word	0x08011854
 800dc84:	080118c8 	.word	0x080118c8

0800dc88 <_ZN12ProberThread11resetProberEv>:

void ProberThread::resetProber() {
 800dc88:	b508      	push	{r3, lr}
	xSemaphoreGive(semaphore);
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800dc92:	f7fc fa4c 	bl	800a12e <xQueueGenericSend>
}
 800dc96:	bd08      	pop	{r3, pc}

0800dc98 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>:
		return NULL;
	}
}

uint8_t ProberThread::checkI2CPort(I2C_HandleTypeDef* hi2c){
	if(hi2c->Instance==I2C1)
 800dc98:	6808      	ldr	r0, [r1, #0]
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x30>)
 800dc9c:	4298      	cmp	r0, r3
 800dc9e:	d00d      	beq.n	800dcbc <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x24>
		return 1;
	else if(hi2c->Instance==I2C2)
 800dca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dca4:	4298      	cmp	r0, r3
 800dca6:	d00b      	beq.n	800dcc0 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x28>
		return 2;
	else if(hi2c->Instance==I2C3)
 800dca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcac:	4298      	cmp	r0, r3
 800dcae:	d009      	beq.n	800dcc4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x2c>
		return 3;
	else if(hi2c->Instance==I2C4)
		return 4;
	else
		return -1;
 800dcb0:	4b06      	ldr	r3, [pc, #24]	; (800dccc <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x34>)
 800dcb2:	4298      	cmp	r0, r3
 800dcb4:	bf0c      	ite	eq
 800dcb6:	2004      	moveq	r0, #4
 800dcb8:	20ff      	movne	r0, #255	; 0xff
 800dcba:	4770      	bx	lr
		return 1;
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	4770      	bx	lr
		return 2;
 800dcc0:	2002      	movs	r0, #2
 800dcc2:	4770      	bx	lr
		return 3;
 800dcc4:	2003      	movs	r0, #3
}
 800dcc6:	4770      	bx	lr
 800dcc8:	40005400 	.word	0x40005400
 800dccc:	58001c00 	.word	0x58001c00

0800dcd0 <_ZN12ProberThread4initEv>:
void ProberThread::init() {
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	4604      	mov	r4, r0
	this->semaphore = xSemaphoreCreateBinary();
 800dcd4:	2203      	movs	r2, #3
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	2001      	movs	r0, #1
 800dcda:	f7fc f9e2 	bl	800a0a2 <xQueueGenericCreate>
 800dcde:	63a0      	str	r0, [r4, #56]	; 0x38
	vTaskDelay(100 / portTICK_PERIOD_MS);
 800dce0:	2064      	movs	r0, #100	; 0x64
 800dce2:	f7fd f997 	bl	800b014 <vTaskDelay>
	this->i2cNum = checkI2CPort(hi2c);
 800dce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7ff ffd5 	bl	800dc98 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>
 800dcee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800dcf2:	bd10      	pop	{r4, pc}

0800dcf4 <_ZN15VoltmeterThreadD1Ev>:
class VoltmeterThread : public Thread {
 800dcf4:	4770      	bx	lr

0800dcf6 <_ZN15VoltmeterThread4initEv>:
#include "Voltmeter_thread.h"

#include "Telemetry.h"


void VoltmeterThread::init() {
 800dcf6:	b538      	push	{r3, r4, r5, lr}
 800dcf8:	4604      	mov	r4, r0

	// Declare the structure where we using GND as address.
	// Look at the top of the header file for addresses.
	bool success = ADS1113_init(&voltmeter, parent->getI2C(), ADS_ADDR_GND); // Or ADS1015(&i2c, &hi2c1, ADS_ADDR_GND);
 800dcfa:	f100 0534 	add.w	r5, r0, #52	; 0x34
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 800dcfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800dd00:	2248      	movs	r2, #72	; 0x48
 800dd02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dd04:	4628      	mov	r0, r5
 800dd06:	f7f4 f87f 	bl	8001e08 <ADS1113_init>
	if(!success) {
 800dd0a:	b128      	cbz	r0, 800dd18 <_ZN15VoltmeterThread4initEv+0x22>
//		println("[%d] BNO055 initialization failed", portNum);
		terminate();
		parent->resetProber();
		return;
	}
	ADSsetGain(&voltmeter, GAIN_ONE);
 800dd0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd10:	4628      	mov	r0, r5
 800dd12:	f7f4 f8c7 	bl	8001ea4 <ADSsetGain>
}
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
		terminate();
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f7fe fb12 	bl	800c342 <_ZN6Thread9terminateEv>
		parent->resetProber();
 800dd1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dd20:	f7ff ffb2 	bl	800dc88 <_ZN12ProberThread11resetProberEv>
		return;
 800dd24:	e7f7      	b.n	800dd16 <_ZN15VoltmeterThread4initEv+0x20>
	...

0800dd28 <_ZN15VoltmeterThread4loopEv>:


static VoltmeterData data;
static avionics_voltmeter_packet packet;
void VoltmeterThread::loop() {
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	4604      	mov	r4, r0
	data.voltage = ADSreadADC_Voltage(&voltmeter);
 800dd2c:	3034      	adds	r0, #52	; 0x34
 800dd2e:	f7f4 f909 	bl	8001f44 <ADSreadADC_Voltage>
 800dd32:	4b10      	ldr	r3, [pc, #64]	; (800dd74 <_ZN15VoltmeterThread4loopEv+0x4c>)
 800dd34:	ed83 0a00 	vstr	s0, [r3]
 800dd38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 800dd3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dd3c:	f7f7 fdf1 	bl	8005922 <HAL_I2C_GetError>
 800dd40:	b988      	cbnz	r0, 800dd66 <_ZN15VoltmeterThread4loopEv+0x3e>
		sprintf(buffer, "Voltage(V): %f", voltage);
		return buffer;
	}

	uint8_t* toArray(uint8_t* buffer){
		*(float*)(buffer) = voltage;
 800dd42:	490d      	ldr	r1, [pc, #52]	; (800dd78 <_ZN15VoltmeterThread4loopEv+0x50>)
 800dd44:	4b0b      	ldr	r3, [pc, #44]	; (800dd74 <_ZN15VoltmeterThread4loopEv+0x4c>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	600b      	str	r3, [r1, #0]
//		println("[i2c%d] %s", portNum, data.toString(cbuf));
		data.toArray((uint8_t*) &packet);
		network.send(&packet);
 800dd4a:	480c      	ldr	r0, [pc, #48]	; (800dd7c <_ZN15VoltmeterThread4loopEv+0x54>)
 800dd4c:	f7fe fdc4 	bl	800c8d8 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_>
		portYIELD();
 800dd50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dd54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	f3bf 8f6f 	isb	sy
	} else {
//		println("[i2c%d] BNO055 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 800dd64:	bd10      	pop	{r4, pc}
		terminate();
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7fe faeb 	bl	800c342 <_ZN6Thread9terminateEv>
		parent->resetProber();
 800dd6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dd6e:	f7ff ff8b 	bl	800dc88 <_ZN12ProberThread11resetProberEv>
}
 800dd72:	e7f7      	b.n	800dd64 <_ZN15VoltmeterThread4loopEv+0x3c>
 800dd74:	2400a6f0 	.word	0x2400a6f0
 800dd78:	2400a6f4 	.word	0x2400a6f4
 800dd7c:	2400928c 	.word	0x2400928c

0800dd80 <_ZN15VoltmeterThreadD0Ev>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	4604      	mov	r4, r0
 800dd84:	2154      	movs	r1, #84	; 0x54
 800dd86:	f000 f875 	bl	800de74 <_ZdlPvj>
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	bd10      	pop	{r4, pc}

0800dd8e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800dd8e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd90:	2400      	movs	r4, #0
 800dd92:	2310      	movs	r3, #16
 800dd94:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dd98:	6803      	ldr	r3, [r0, #0]
 800dd9a:	4615      	mov	r5, r2
 800dd9c:	699e      	ldr	r6, [r3, #24]
 800dd9e:	6812      	ldr	r2, [r2, #0]
 800dda0:	466b      	mov	r3, sp
 800dda2:	e9cd 4400 	strd	r4, r4, [sp]
 800dda6:	47b0      	blx	r6
 800dda8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ddac:	f003 0306 	and.w	r3, r3, #6
 800ddb0:	2b06      	cmp	r3, #6
 800ddb2:	bf03      	ittte	eq
 800ddb4:	9b00      	ldreq	r3, [sp, #0]
 800ddb6:	602b      	streq	r3, [r5, #0]
 800ddb8:	2001      	moveq	r0, #1
 800ddba:	4620      	movne	r0, r4
 800ddbc:	b004      	add	sp, #16
 800ddbe:	bd70      	pop	{r4, r5, r6, pc}

0800ddc0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800ddc0:	9800      	ldr	r0, [sp, #0]
 800ddc2:	4290      	cmp	r0, r2
 800ddc4:	bf14      	ite	ne
 800ddc6:	2001      	movne	r0, #1
 800ddc8:	2006      	moveq	r0, #6
 800ddca:	4770      	bx	lr

0800ddcc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	4b03      	ldr	r3, [pc, #12]	; (800dddc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800ddd0:	6003      	str	r3, [r0, #0]
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f000 f965 	bl	800e0a2 <_ZNSt9type_infoD1Ev>
 800ddd8:	4620      	mov	r0, r4
 800ddda:	bd10      	pop	{r4, pc}
 800dddc:	08011910 	.word	0x08011910

0800dde0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4604      	mov	r4, r0
 800dde4:	f7ff fff2 	bl	800ddcc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800dde8:	4620      	mov	r0, r4
 800ddea:	2108      	movs	r1, #8
 800ddec:	f000 f842 	bl	800de74 <_ZdlPvj>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	bd10      	pop	{r4, pc}

0800ddf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf8:	461f      	mov	r7, r3
 800ddfa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800ddfe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800de02:	4598      	cmp	r8, r3
 800de04:	4606      	mov	r6, r0
 800de06:	4615      	mov	r5, r2
 800de08:	d107      	bne.n	800de1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800de0a:	9907      	ldr	r1, [sp, #28]
 800de0c:	f000 f94e 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800de10:	b118      	cbz	r0, 800de1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800de12:	7165      	strb	r5, [r4, #5]
 800de14:	2000      	movs	r0, #0
 800de16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1a:	4639      	mov	r1, r7
 800de1c:	4630      	mov	r0, r6
 800de1e:	f000 f945 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800de22:	2800      	cmp	r0, #0
 800de24:	d0f6      	beq.n	800de14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800de26:	2301      	movs	r3, #1
 800de28:	f8c4 8000 	str.w	r8, [r4]
 800de2c:	7125      	strb	r5, [r4, #4]
 800de2e:	71a3      	strb	r3, [r4, #6]
 800de30:	e7f0      	b.n	800de14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800de32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800de32:	b538      	push	{r3, r4, r5, lr}
 800de34:	4615      	mov	r5, r2
 800de36:	461c      	mov	r4, r3
 800de38:	f000 f938 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800de3c:	b120      	cbz	r0, 800de48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800de3e:	2308      	movs	r3, #8
 800de40:	60e3      	str	r3, [r4, #12]
 800de42:	2306      	movs	r3, #6
 800de44:	6025      	str	r5, [r4, #0]
 800de46:	7123      	strb	r3, [r4, #4]
 800de48:	bd38      	pop	{r3, r4, r5, pc}

0800de4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800de4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de4c:	4605      	mov	r5, r0
 800de4e:	460c      	mov	r4, r1
 800de50:	9201      	str	r2, [sp, #4]
 800de52:	461e      	mov	r6, r3
 800de54:	f000 f92a 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800de58:	b950      	cbnz	r0, 800de70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800de5a:	2e03      	cmp	r6, #3
 800de5c:	d808      	bhi.n	800de70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800de5e:	6823      	ldr	r3, [r4, #0]
 800de60:	9a01      	ldr	r2, [sp, #4]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	4629      	mov	r1, r5
 800de66:	4620      	mov	r0, r4
 800de68:	b002      	add	sp, #8
 800de6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de6e:	4718      	bx	r3
 800de70:	b002      	add	sp, #8
 800de72:	bd70      	pop	{r4, r5, r6, pc}

0800de74 <_ZdlPvj>:
 800de74:	f7fe ba6c 	b.w	800c350 <_ZdlPv>

0800de78 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
 800de78:	2001      	movs	r0, #1
 800de7a:	4770      	bx	lr

0800de7c <_ZN10__cxxabiv120__function_type_infoD1Ev>:
 800de7c:	b510      	push	{r4, lr}
 800de7e:	4b03      	ldr	r3, [pc, #12]	; (800de8c <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
 800de80:	6003      	str	r3, [r0, #0]
 800de82:	4604      	mov	r4, r0
 800de84:	f000 f90d 	bl	800e0a2 <_ZNSt9type_infoD1Ev>
 800de88:	4620      	mov	r0, r4
 800de8a:	bd10      	pop	{r4, pc}
 800de8c:	08011970 	.word	0x08011970

0800de90 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
 800de90:	b510      	push	{r4, lr}
 800de92:	4604      	mov	r4, r0
 800de94:	f7ff fff2 	bl	800de7c <_ZN10__cxxabiv120__function_type_infoD1Ev>
 800de98:	4620      	mov	r0, r4
 800de9a:	2108      	movs	r1, #8
 800de9c:	f7ff ffea 	bl	800de74 <_ZdlPvj>
 800dea0:	4620      	mov	r0, r4
 800dea2:	bd10      	pop	{r4, pc}

0800dea4 <__cxa_guard_acquire>:
 800dea4:	6803      	ldr	r3, [r0, #0]
 800dea6:	07db      	lsls	r3, r3, #31
 800dea8:	d406      	bmi.n	800deb8 <__cxa_guard_acquire+0x14>
 800deaa:	7843      	ldrb	r3, [r0, #1]
 800deac:	b103      	cbz	r3, 800deb0 <__cxa_guard_acquire+0xc>
 800deae:	deff      	udf	#255	; 0xff
 800deb0:	2301      	movs	r3, #1
 800deb2:	7043      	strb	r3, [r0, #1]
 800deb4:	4618      	mov	r0, r3
 800deb6:	4770      	bx	lr
 800deb8:	2000      	movs	r0, #0
 800deba:	4770      	bx	lr

0800debc <__cxa_guard_release>:
 800debc:	2301      	movs	r3, #1
 800debe:	6003      	str	r3, [r0, #0]
 800dec0:	4770      	bx	lr
	...

0800dec4 <_ZSt11_Hash_bytesPKvjj>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	4c18      	ldr	r4, [pc, #96]	; (800df28 <_ZSt11_Hash_bytesPKvjj+0x64>)
 800dec8:	404a      	eors	r2, r1
 800deca:	460d      	mov	r5, r1
 800decc:	1846      	adds	r6, r0, r1
 800dece:	2d03      	cmp	r5, #3
 800ded0:	eba6 0305 	sub.w	r3, r6, r5
 800ded4:	d908      	bls.n	800dee8 <_ZSt11_Hash_bytesPKvjj+0x24>
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4363      	muls	r3, r4
 800deda:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 800dede:	4362      	muls	r2, r4
 800dee0:	4363      	muls	r3, r4
 800dee2:	405a      	eors	r2, r3
 800dee4:	3d04      	subs	r5, #4
 800dee6:	e7f2      	b.n	800dece <_ZSt11_Hash_bytesPKvjj+0xa>
 800dee8:	088b      	lsrs	r3, r1, #2
 800deea:	f06f 0503 	mvn.w	r5, #3
 800deee:	fb05 1103 	mla	r1, r5, r3, r1
 800def2:	2902      	cmp	r1, #2
 800def4:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800def8:	d011      	beq.n	800df1e <_ZSt11_Hash_bytesPKvjj+0x5a>
 800defa:	2903      	cmp	r1, #3
 800defc:	d00c      	beq.n	800df18 <_ZSt11_Hash_bytesPKvjj+0x54>
 800defe:	2901      	cmp	r1, #1
 800df00:	d103      	bne.n	800df0a <_ZSt11_Hash_bytesPKvjj+0x46>
 800df02:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 800df06:	4042      	eors	r2, r0
 800df08:	4362      	muls	r2, r4
 800df0a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 800df0e:	fb04 f002 	mul.w	r0, r4, r2
 800df12:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	78a9      	ldrb	r1, [r5, #2]
 800df1a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 800df1e:	7869      	ldrb	r1, [r5, #1]
 800df20:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 800df24:	e7ed      	b.n	800df02 <_ZSt11_Hash_bytesPKvjj+0x3e>
 800df26:	bf00      	nop
 800df28:	5bd1e995 	.word	0x5bd1e995

0800df2c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800df2c:	2001      	movs	r0, #1
 800df2e:	4770      	bx	lr

0800df30 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800df30:	b510      	push	{r4, lr}
 800df32:	4b03      	ldr	r3, [pc, #12]	; (800df40 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	4604      	mov	r4, r0
 800df38:	f000 fb3a 	bl	800e5b0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800df3c:	4620      	mov	r0, r4
 800df3e:	bd10      	pop	{r4, pc}
 800df40:	080119c0 	.word	0x080119c0

0800df44 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	f7ff fff2 	bl	800df30 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800df4c:	4620      	mov	r0, r4
 800df4e:	2110      	movs	r1, #16
 800df50:	f7ff ff90 	bl	800de74 <_ZdlPvj>
 800df54:	4620      	mov	r0, r4
 800df56:	bd10      	pop	{r4, pc}

0800df58 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800df58:	2b01      	cmp	r3, #1
 800df5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df5c:	4606      	mov	r6, r0
 800df5e:	460c      	mov	r4, r1
 800df60:	461d      	mov	r5, r3
 800df62:	d806      	bhi.n	800df72 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 800df64:	490c      	ldr	r1, [pc, #48]	; (800df98 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800df66:	68c0      	ldr	r0, [r0, #12]
 800df68:	9201      	str	r2, [sp, #4]
 800df6a:	f000 f89f 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800df6e:	9a01      	ldr	r2, [sp, #4]
 800df70:	b948      	cbnz	r0, 800df86 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 800df72:	68f0      	ldr	r0, [r6, #12]
 800df74:	68e1      	ldr	r1, [r4, #12]
 800df76:	6803      	ldr	r3, [r0, #0]
 800df78:	691e      	ldr	r6, [r3, #16]
 800df7a:	1cab      	adds	r3, r5, #2
 800df7c:	46b4      	mov	ip, r6
 800df7e:	b002      	add	sp, #8
 800df80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df84:	4760      	bx	ip
 800df86:	68e0      	ldr	r0, [r4, #12]
 800df88:	6803      	ldr	r3, [r0, #0]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	4798      	blx	r3
 800df8e:	f080 0001 	eor.w	r0, r0, #1
 800df92:	b2c0      	uxtb	r0, r0
 800df94:	b002      	add	sp, #8
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	08011ac4 	.word	0x08011ac4

0800df9c <__cxa_pure_virtual>:
 800df9c:	b508      	push	{r3, lr}
 800df9e:	f000 fae3 	bl	800e568 <_ZSt9terminatev>
	...

0800dfa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	4604      	mov	r4, r0
 800dfac:	f7ff ff0e 	bl	800ddcc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	bd10      	pop	{r4, pc}
 800dfb4:	08011a18 	.word	0x08011a18

0800dfb8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800dfb8:	b510      	push	{r4, lr}
 800dfba:	4604      	mov	r4, r0
 800dfbc:	f7ff fff2 	bl	800dfa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	210c      	movs	r1, #12
 800dfc4:	f7ff ff56 	bl	800de74 <_ZdlPvj>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	bd10      	pop	{r4, pc}

0800dfcc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800dfcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfce:	9f08      	ldr	r7, [sp, #32]
 800dfd0:	4297      	cmp	r7, r2
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	460e      	mov	r6, r1
 800dfd6:	4614      	mov	r4, r2
 800dfd8:	d00a      	beq.n	800dff0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800dfda:	68a8      	ldr	r0, [r5, #8]
 800dfdc:	6802      	ldr	r2, [r0, #0]
 800dfde:	9708      	str	r7, [sp, #32]
 800dfe0:	6a15      	ldr	r5, [r2, #32]
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	46ac      	mov	ip, r5
 800dfe8:	b003      	add	sp, #12
 800dfea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfee:	4760      	bx	ip
 800dff0:	4619      	mov	r1, r3
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	f000 f85a 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800dff8:	9b01      	ldr	r3, [sp, #4]
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d0ed      	beq.n	800dfda <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800dffe:	2006      	movs	r0, #6
 800e000:	b003      	add	sp, #12
 800e002:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e004 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800e004:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	460d      	mov	r5, r1
 800e00a:	4619      	mov	r1, r3
 800e00c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800e010:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800e014:	4681      	mov	r9, r0
 800e016:	4617      	mov	r7, r2
 800e018:	4698      	mov	r8, r3
 800e01a:	f000 f847 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e01e:	b190      	cbz	r0, 800e046 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800e020:	2d00      	cmp	r5, #0
 800e022:	6034      	str	r4, [r6, #0]
 800e024:	7137      	strb	r7, [r6, #4]
 800e026:	db09      	blt.n	800e03c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800e028:	1961      	adds	r1, r4, r5
 800e02a:	458a      	cmp	sl, r1
 800e02c:	bf0c      	ite	eq
 800e02e:	2106      	moveq	r1, #6
 800e030:	2101      	movne	r1, #1
 800e032:	71b1      	strb	r1, [r6, #6]
 800e034:	2000      	movs	r0, #0
 800e036:	b001      	add	sp, #4
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	3502      	adds	r5, #2
 800e03e:	d1f9      	bne.n	800e034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800e040:	2301      	movs	r3, #1
 800e042:	71b3      	strb	r3, [r6, #6]
 800e044:	e7f6      	b.n	800e034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800e046:	4554      	cmp	r4, sl
 800e048:	d106      	bne.n	800e058 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800e04a:	4659      	mov	r1, fp
 800e04c:	4648      	mov	r0, r9
 800e04e:	f000 f82d 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e052:	b108      	cbz	r0, 800e058 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800e054:	7177      	strb	r7, [r6, #5]
 800e056:	e7ed      	b.n	800e034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800e058:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800e05c:	6803      	ldr	r3, [r0, #0]
 800e05e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800e062:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800e066:	69dc      	ldr	r4, [r3, #28]
 800e068:	463a      	mov	r2, r7
 800e06a:	4643      	mov	r3, r8
 800e06c:	4629      	mov	r1, r5
 800e06e:	46a4      	mov	ip, r4
 800e070:	b001      	add	sp, #4
 800e072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e076:	4760      	bx	ip

0800e078 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800e078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e07c:	4607      	mov	r7, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	4615      	mov	r5, r2
 800e082:	461e      	mov	r6, r3
 800e084:	f7ff fed5 	bl	800de32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800e088:	b948      	cbnz	r0, 800e09e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800e08a:	68b8      	ldr	r0, [r7, #8]
 800e08c:	6803      	ldr	r3, [r0, #0]
 800e08e:	699f      	ldr	r7, [r3, #24]
 800e090:	462a      	mov	r2, r5
 800e092:	4633      	mov	r3, r6
 800e094:	4621      	mov	r1, r4
 800e096:	46bc      	mov	ip, r7
 800e098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	4760      	bx	ip
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0a2 <_ZNSt9type_infoD1Ev>:
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZNKSt9type_info14__is_pointer_pEv>:
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	4770      	bx	lr

0800e0a8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	4770      	bx	lr

0800e0ac <_ZNKSt9type_infoeqERKS_>:
 800e0ac:	4281      	cmp	r1, r0
 800e0ae:	b508      	push	{r3, lr}
 800e0b0:	d00e      	beq.n	800e0d0 <_ZNKSt9type_infoeqERKS_+0x24>
 800e0b2:	6840      	ldr	r0, [r0, #4]
 800e0b4:	7803      	ldrb	r3, [r0, #0]
 800e0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e0b8:	d00c      	beq.n	800e0d4 <_ZNKSt9type_infoeqERKS_+0x28>
 800e0ba:	6849      	ldr	r1, [r1, #4]
 800e0bc:	780b      	ldrb	r3, [r1, #0]
 800e0be:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c0:	bf08      	it	eq
 800e0c2:	3101      	addeq	r1, #1
 800e0c4:	f7f2 f90c 	bl	80002e0 <strcmp>
 800e0c8:	fab0 f080 	clz	r0, r0
 800e0cc:	0940      	lsrs	r0, r0, #5
 800e0ce:	bd08      	pop	{r3, pc}
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	e7fc      	b.n	800e0ce <_ZNKSt9type_infoeqERKS_+0x22>
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	e7fa      	b.n	800e0ce <_ZNKSt9type_infoeqERKS_+0x22>

0800e0d8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800e0d8:	f7ff bfe8 	b.w	800e0ac <_ZNKSt9type_infoeqERKS_>

0800e0dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	4b03      	ldr	r3, [pc, #12]	; (800e0ec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 800e0e0:	6003      	str	r3, [r0, #0]
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	f7ff fe72 	bl	800ddcc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	bd10      	pop	{r4, pc}
 800e0ec:	08011a90 	.word	0x08011a90

0800e0f0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	f7ff fff2 	bl	800e0dc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	2118      	movs	r1, #24
 800e0fc:	f7ff feba 	bl	800de74 <_ZdlPvj>
 800e100:	4620      	mov	r0, r4
 800e102:	bd10      	pop	{r4, pc}

0800e104 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800e104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800e10c:	454a      	cmp	r2, r9
 800e10e:	4604      	mov	r4, r0
 800e110:	460f      	mov	r7, r1
 800e112:	4616      	mov	r6, r2
 800e114:	469a      	mov	sl, r3
 800e116:	d024      	beq.n	800e162 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 800e118:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800e11c:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 800e120:	f1b8 0f00 	cmp.w	r8, #0
 800e124:	d028      	beq.n	800e178 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 800e126:	68e5      	ldr	r5, [r4, #12]
 800e128:	07aa      	lsls	r2, r5, #30
 800e12a:	d521      	bpl.n	800e170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800e12c:	122a      	asrs	r2, r5, #8
 800e12e:	f015 0501 	ands.w	r5, r5, #1
 800e132:	d003      	beq.n	800e13c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 800e134:	1cfb      	adds	r3, r7, #3
 800e136:	d01b      	beq.n	800e170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800e138:	6833      	ldr	r3, [r6, #0]
 800e13a:	589a      	ldr	r2, [r3, r2]
 800e13c:	68a0      	ldr	r0, [r4, #8]
 800e13e:	6803      	ldr	r3, [r0, #0]
 800e140:	f8cd 9000 	str.w	r9, [sp]
 800e144:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800e148:	4432      	add	r2, r6
 800e14a:	4653      	mov	r3, sl
 800e14c:	4639      	mov	r1, r7
 800e14e:	47d8      	blx	fp
 800e150:	2803      	cmp	r0, #3
 800e152:	d90d      	bls.n	800e170 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800e154:	b115      	cbz	r5, 800e15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800e156:	f040 0001 	orr.w	r0, r0, #1
 800e15a:	b2c0      	uxtb	r0, r0
 800e15c:	b003      	add	sp, #12
 800e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e162:	4619      	mov	r1, r3
 800e164:	f7ff ffa2 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d0d5      	beq.n	800e118 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 800e16c:	2006      	movs	r0, #6
 800e16e:	e7f5      	b.n	800e15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800e170:	f108 38ff 	add.w	r8, r8, #4294967295
 800e174:	3c08      	subs	r4, #8
 800e176:	e7d3      	b.n	800e120 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 800e178:	2001      	movs	r0, #1
 800e17a:	e7ef      	b.n	800e15c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0800e17c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 800e17c:	b4f0      	push	{r4, r5, r6, r7}
 800e17e:	1e0d      	subs	r5, r1, #0
 800e180:	9c04      	ldr	r4, [sp, #16]
 800e182:	db06      	blt.n	800e192 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 800e184:	1950      	adds	r0, r2, r5
 800e186:	4284      	cmp	r4, r0
 800e188:	bf14      	ite	ne
 800e18a:	2001      	movne	r0, #1
 800e18c:	2006      	moveq	r0, #6
 800e18e:	bcf0      	pop	{r4, r5, r6, r7}
 800e190:	4770      	bx	lr
 800e192:	3502      	adds	r5, #2
 800e194:	d005      	beq.n	800e1a2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 800e196:	6805      	ldr	r5, [r0, #0]
 800e198:	9404      	str	r4, [sp, #16]
 800e19a:	6a2c      	ldr	r4, [r5, #32]
 800e19c:	46a4      	mov	ip, r4
 800e19e:	bcf0      	pop	{r4, r5, r6, r7}
 800e1a0:	4760      	bx	ip
 800e1a2:	2001      	movs	r0, #1
 800e1a4:	e7f3      	b.n	800e18e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0800e1a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800e1a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1aa:	b091      	sub	sp, #68	; 0x44
 800e1ac:	469a      	mov	sl, r3
 800e1ae:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800e1b0:	9206      	str	r2, [sp, #24]
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e1b6:	4688      	mov	r8, r1
 800e1b8:	06d9      	lsls	r1, r3, #27
 800e1ba:	bf44      	itt	mi
 800e1bc:	6883      	ldrmi	r3, [r0, #8]
 800e1be:	60a3      	strmi	r3, [r4, #8]
 800e1c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	4681      	mov	r9, r0
 800e1c6:	d107      	bne.n	800e1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 800e1c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e1ca:	f7ff ff6f 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e1ce:	b118      	cbz	r0, 800e1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 800e1d0:	9b06      	ldr	r3, [sp, #24]
 800e1d2:	7163      	strb	r3, [r4, #5]
 800e1d4:	2700      	movs	r7, #0
 800e1d6:	e07f      	b.n	800e2d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800e1d8:	4651      	mov	r1, sl
 800e1da:	4648      	mov	r0, r9
 800e1dc:	f7ff ff66 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e1e0:	b1c0      	cbz	r0, 800e214 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 800e1e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e1e4:	6023      	str	r3, [r4, #0]
 800e1e6:	f1b8 0f00 	cmp.w	r8, #0
 800e1ea:	9b06      	ldr	r3, [sp, #24]
 800e1ec:	7123      	strb	r3, [r4, #4]
 800e1ee:	db0b      	blt.n	800e208 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 800e1f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e1f2:	4498      	add	r8, r3
 800e1f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e1f6:	4543      	cmp	r3, r8
 800e1f8:	bf0c      	ite	eq
 800e1fa:	f04f 0806 	moveq.w	r8, #6
 800e1fe:	f04f 0801 	movne.w	r8, #1
 800e202:	f884 8006 	strb.w	r8, [r4, #6]
 800e206:	e7e5      	b.n	800e1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800e208:	f118 0f02 	cmn.w	r8, #2
 800e20c:	d1e2      	bne.n	800e1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800e20e:	2301      	movs	r3, #1
 800e210:	71a3      	strb	r3, [r4, #6]
 800e212:	e7df      	b.n	800e1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800e214:	f1b8 0f00 	cmp.w	r8, #0
 800e218:	bfa9      	itett	ge
 800e21a:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 800e21c:	9007      	strlt	r0, [sp, #28]
 800e21e:	eba3 0308 	subge.w	r3, r3, r8
 800e222:	9307      	strge	r3, [sp, #28]
 800e224:	2700      	movs	r7, #0
 800e226:	2302      	movs	r3, #2
 800e228:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 800e22c:	2301      	movs	r3, #1
 800e22e:	9308      	str	r3, [sp, #32]
 800e230:	9b06      	ldr	r3, [sp, #24]
 800e232:	f043 0301 	orr.w	r3, r3, #1
 800e236:	930b      	str	r3, [sp, #44]	; 0x2c
 800e238:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800e23c:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 800e240:	9305      	str	r3, [sp, #20]
 800e242:	f1bb 0f00 	cmp.w	fp, #0
 800e246:	f000 80d4 	beq.w	800e3f2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 800e24a:	2300      	movs	r3, #0
 800e24c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800e250:	9b05      	ldr	r3, [sp, #20]
 800e252:	68a5      	ldr	r5, [r4, #8]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	950f      	str	r5, [sp, #60]	; 0x3c
 800e258:	07da      	lsls	r2, r3, #31
 800e25a:	bf43      	ittte	mi
 800e25c:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 800e25e:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 800e260:	6800      	ldrmi	r0, [r0, #0]
 800e262:	9a06      	ldrpl	r2, [sp, #24]
 800e264:	ea4f 2123 	mov.w	r1, r3, asr #8
 800e268:	bf48      	it	mi
 800e26a:	5841      	ldrmi	r1, [r0, r1]
 800e26c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e26e:	4401      	add	r1, r0
 800e270:	9807      	ldr	r0, [sp, #28]
 800e272:	b138      	cbz	r0, 800e284 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xde>
 800e274:	4288      	cmp	r0, r1
 800e276:	9e08      	ldr	r6, [sp, #32]
 800e278:	bf2c      	ite	cs
 800e27a:	2000      	movcs	r0, #0
 800e27c:	2001      	movcc	r0, #1
 800e27e:	42b0      	cmp	r0, r6
 800e280:	f000 80b3 	beq.w	800e3ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 800e284:	079b      	lsls	r3, r3, #30
 800e286:	d407      	bmi.n	800e298 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf2>
 800e288:	f118 0f02 	cmn.w	r8, #2
 800e28c:	d102      	bne.n	800e294 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xee>
 800e28e:	07ae      	lsls	r6, r5, #30
 800e290:	f000 80ad 	beq.w	800e3ee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 800e294:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800e298:	9b05      	ldr	r3, [sp, #20]
 800e29a:	6898      	ldr	r0, [r3, #8]
 800e29c:	ad0d      	add	r5, sp, #52	; 0x34
 800e29e:	6803      	ldr	r3, [r0, #0]
 800e2a0:	9503      	str	r5, [sp, #12]
 800e2a2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e2a4:	9502      	str	r5, [sp, #8]
 800e2a6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e2a8:	e9cd 1500 	strd	r1, r5, [sp]
 800e2ac:	4641      	mov	r1, r8
 800e2ae:	69dd      	ldr	r5, [r3, #28]
 800e2b0:	4653      	mov	r3, sl
 800e2b2:	47a8      	blx	r5
 800e2b4:	7963      	ldrb	r3, [r4, #5]
 800e2b6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800e2ba:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 800e2be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	2d06      	cmp	r5, #6
 800e2c4:	7163      	strb	r3, [r4, #5]
 800e2c6:	d001      	beq.n	800e2cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x126>
 800e2c8:	2d02      	cmp	r5, #2
 800e2ca:	d109      	bne.n	800e2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 800e2cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e2d0:	6021      	str	r1, [r4, #0]
 800e2d2:	7123      	strb	r3, [r4, #4]
 800e2d4:	71a5      	strb	r5, [r4, #6]
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	4638      	mov	r0, r7
 800e2da:	b011      	add	sp, #68	; 0x44
 800e2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e0:	6822      	ldr	r2, [r4, #0]
 800e2e2:	b9a7      	cbnz	r7, 800e30e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 800e2e4:	b9aa      	cbnz	r2, 800e312 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 800e2e6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e2ea:	6021      	str	r1, [r4, #0]
 800e2ec:	7122      	strb	r2, [r4, #4]
 800e2ee:	b121      	cbz	r1, 800e2fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e2f0:	b11b      	cbz	r3, 800e2fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e2f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e2f6:	07dd      	lsls	r5, r3, #31
 800e2f8:	d5ed      	bpl.n	800e2d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e2fa:	7963      	ldrb	r3, [r4, #5]
 800e2fc:	2b04      	cmp	r3, #4
 800e2fe:	d0ea      	beq.n	800e2d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e300:	9b05      	ldr	r3, [sp, #20]
 800e302:	3b08      	subs	r3, #8
 800e304:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e308:	9305      	str	r3, [sp, #20]
 800e30a:	4607      	mov	r7, r0
 800e30c:	e799      	b.n	800e242 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 800e30e:	2a00      	cmp	r2, #0
 800e310:	d037      	beq.n	800e382 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 800e312:	4291      	cmp	r1, r2
 800e314:	d106      	bne.n	800e324 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17e>
 800e316:	7923      	ldrb	r3, [r4, #4]
 800e318:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e31c:	4313      	orrs	r3, r2
 800e31e:	7123      	strb	r3, [r4, #4]
 800e320:	4638      	mov	r0, r7
 800e322:	e7ea      	b.n	800e2fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e324:	b909      	cbnz	r1, 800e32a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 800e326:	2800      	cmp	r0, #0
 800e328:	d0fa      	beq.n	800e320 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	79a6      	ldrb	r6, [r4, #6]
 800e32e:	d904      	bls.n	800e33a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
 800e330:	07d9      	lsls	r1, r3, #31
 800e332:	d529      	bpl.n	800e388 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 800e334:	68a3      	ldr	r3, [r4, #8]
 800e336:	079b      	lsls	r3, r3, #30
 800e338:	d526      	bpl.n	800e388 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 800e33a:	b97e      	cbnz	r6, 800e35c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
 800e33c:	2d03      	cmp	r5, #3
 800e33e:	d905      	bls.n	800e34c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a6>
 800e340:	07ee      	lsls	r6, r5, #31
 800e342:	d541      	bpl.n	800e3c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 800e344:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e348:	0798      	lsls	r0, r3, #30
 800e34a:	d53d      	bpl.n	800e3c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 800e34c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	4641      	mov	r1, r8
 800e352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e354:	4650      	mov	r0, sl
 800e356:	f7ff ff11 	bl	800e17c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800e35a:	4606      	mov	r6, r0
 800e35c:	b9e5      	cbnz	r5, 800e398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e35e:	2e03      	cmp	r6, #3
 800e360:	d905      	bls.n	800e36e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
 800e362:	07f1      	lsls	r1, r6, #31
 800e364:	d532      	bpl.n	800e3cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 800e366:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e36a:	079a      	lsls	r2, r3, #30
 800e36c:	d52e      	bpl.n	800e3cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 800e36e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e376:	4641      	mov	r1, r8
 800e378:	4650      	mov	r0, sl
 800e37a:	f7ff feff 	bl	800e17c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800e37e:	4605      	mov	r5, r0
 800e380:	e00a      	b.n	800e398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e382:	2900      	cmp	r1, #0
 800e384:	d1d1      	bne.n	800e32a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 800e386:	e7cb      	b.n	800e320 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 800e388:	2e01      	cmp	r6, #1
 800e38a:	bf38      	it	cc
 800e38c:	2601      	movcc	r6, #1
 800e38e:	2d01      	cmp	r5, #1
 800e390:	bf38      	it	cc
 800e392:	2501      	movcc	r5, #1
 800e394:	b2f6      	uxtb	r6, r6
 800e396:	b2ed      	uxtb	r5, r5
 800e398:	ea85 0306 	eor.w	r3, r5, r6
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d916      	bls.n	800e3d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22a>
 800e3a2:	2d03      	cmp	r5, #3
 800e3a4:	bf81      	itttt	hi
 800e3a6:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 800e3a8:	6023      	strhi	r3, [r4, #0]
 800e3aa:	462e      	movhi	r6, r5
 800e3ac:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 800e3b0:	bf86      	itte	hi
 800e3b2:	7123      	strbhi	r3, [r4, #4]
 800e3b4:	2000      	movhi	r0, #0
 800e3b6:	4638      	movls	r0, r7
 800e3b8:	07b3      	lsls	r3, r6, #30
 800e3ba:	71a6      	strb	r6, [r4, #6]
 800e3bc:	d402      	bmi.n	800e3c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21e>
 800e3be:	f016 0601 	ands.w	r6, r6, #1
 800e3c2:	d19a      	bne.n	800e2fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	e786      	b.n	800e2d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e3c8:	2601      	movs	r6, #1
 800e3ca:	e7e5      	b.n	800e398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e3cc:	2501      	movs	r5, #1
 800e3ce:	e7e3      	b.n	800e398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e3d0:	4035      	ands	r5, r6
 800e3d2:	b2ed      	uxtb	r5, r5
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2d03      	cmp	r5, #3
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	d903      	bls.n	800e3e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 800e3dc:	2302      	movs	r3, #2
 800e3de:	71a3      	strb	r3, [r4, #6]
 800e3e0:	2001      	movs	r0, #1
 800e3e2:	e778      	b.n	800e2d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	71a0      	strb	r0, [r4, #6]
 800e3e8:	e787      	b.n	800e2fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	e786      	b.n	800e300 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 800e3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f43f af6f 	beq.w	800e2d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	f43f af6b 	beq.w	800e2d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800e402:	2301      	movs	r3, #1
 800e404:	930a      	str	r3, [sp, #40]	; 0x28
 800e406:	f8cd b020 	str.w	fp, [sp, #32]
 800e40a:	e715      	b.n	800e238 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

0800e40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	ed2d 8b02 	vpush	{d8}
 800e414:	b089      	sub	sp, #36	; 0x24
 800e416:	ee08 1a10 	vmov	s16, r1
 800e41a:	4606      	mov	r6, r0
 800e41c:	4617      	mov	r7, r2
 800e41e:	461c      	mov	r4, r3
 800e420:	f7ff fd07 	bl	800de32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800e424:	4605      	mov	r5, r0
 800e426:	2800      	cmp	r0, #0
 800e428:	d15f      	bne.n	800e4ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e42a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e42e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e432:	f019 0f10 	tst.w	r9, #16
 800e436:	bf18      	it	ne
 800e438:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 800e43c:	f009 0301 	and.w	r3, r9, #1
 800e440:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 800e444:	9303      	str	r3, [sp, #12]
 800e446:	f10d 0b10 	add.w	fp, sp, #16
 800e44a:	f1ba 0f00 	cmp.w	sl, #0
 800e44e:	d074      	beq.n	800e53a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 800e450:	2300      	movs	r3, #0
 800e452:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e456:	9304      	str	r3, [sp, #16]
 800e458:	f88d 3014 	strb.w	r3, [sp, #20]
 800e45c:	2300      	movs	r3, #0
 800e45e:	9307      	str	r3, [sp, #28]
 800e460:	f002 0301 	and.w	r3, r2, #1
 800e464:	9301      	str	r3, [sp, #4]
 800e466:	f002 0302 	and.w	r3, r2, #2
 800e46a:	9302      	str	r3, [sp, #8]
 800e46c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800e470:	430b      	orrs	r3, r1
 800e472:	f8cd 9018 	str.w	r9, [sp, #24]
 800e476:	d104      	bne.n	800e482 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 800e478:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e47c:	f1a8 0808 	sub.w	r8, r8, #8
 800e480:	e7e3      	b.n	800e44a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 800e482:	2f00      	cmp	r7, #0
 800e484:	d037      	beq.n	800e4f6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 800e486:	9b01      	ldr	r3, [sp, #4]
 800e488:	1212      	asrs	r2, r2, #8
 800e48a:	b10b      	cbz	r3, 800e490 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	589a      	ldr	r2, [r3, r2]
 800e490:	443a      	add	r2, r7
 800e492:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800e496:	6803      	ldr	r3, [r0, #0]
 800e498:	ee18 1a10 	vmov	r1, s16
 800e49c:	699d      	ldr	r5, [r3, #24]
 800e49e:	465b      	mov	r3, fp
 800e4a0:	47a8      	blx	r5
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	d0e7      	beq.n	800e478 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e4a8:	9b07      	ldr	r3, [sp, #28]
 800e4aa:	2b08      	cmp	r3, #8
 800e4ac:	d104      	bne.n	800e4b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 800e4ae:	9b01      	ldr	r3, [sp, #4]
 800e4b0:	b113      	cbz	r3, 800e4b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 800e4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d905      	bls.n	800e4cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 800e4c0:	9a02      	ldr	r2, [sp, #8]
 800e4c2:	b91a      	cbnz	r2, 800e4cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 800e4c4:	f023 0302 	bic.w	r3, r3, #2
 800e4c8:	f88d 3014 	strb.w	r3, [sp, #20]
 800e4cc:	68e1      	ldr	r1, [r4, #12]
 800e4ce:	b9d1      	cbnz	r1, 800e506 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 800e4d0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800e4d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e4d8:	7923      	ldrb	r3, [r4, #4]
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d905      	bls.n	800e4ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e4de:	079a      	lsls	r2, r3, #30
 800e4e0:	d50b      	bpl.n	800e4fa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 800e4e2:	68b3      	ldr	r3, [r6, #8]
 800e4e4:	f013 0f01 	tst.w	r3, #1
 800e4e8:	d1c6      	bne.n	800e478 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	b009      	add	sp, #36	; 0x24
 800e4ee:	ecbd 8b02 	vpop	{d8}
 800e4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f6:	463a      	mov	r2, r7
 800e4f8:	e7cb      	b.n	800e492 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 800e4fa:	07db      	lsls	r3, r3, #31
 800e4fc:	d5f5      	bpl.n	800e4ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e4fe:	68b3      	ldr	r3, [r6, #8]
 800e500:	f013 0f02 	tst.w	r3, #2
 800e504:	e7f0      	b.n	800e4e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	9a04      	ldr	r2, [sp, #16]
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d004      	beq.n	800e518 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 800e50e:	2300      	movs	r3, #0
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	2302      	movs	r3, #2
 800e514:	7123      	strb	r3, [r4, #4]
 800e516:	e7e8      	b.n	800e4ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e518:	b12b      	cbz	r3, 800e526 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 800e51a:	7923      	ldrb	r3, [r4, #4]
 800e51c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e520:	4313      	orrs	r3, r2
 800e522:	7123      	strb	r3, [r4, #4]
 800e524:	e7a8      	b.n	800e478 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e526:	9807      	ldr	r0, [sp, #28]
 800e528:	2808      	cmp	r0, #8
 800e52a:	d0f2      	beq.n	800e512 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e52c:	2908      	cmp	r1, #8
 800e52e:	d0f0      	beq.n	800e512 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e530:	f7ff fdbc 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e534:	2800      	cmp	r0, #0
 800e536:	d1f0      	bne.n	800e51a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 800e538:	e7eb      	b.n	800e512 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e53a:	7925      	ldrb	r5, [r4, #4]
 800e53c:	3d00      	subs	r5, #0
 800e53e:	bf18      	it	ne
 800e540:	2501      	movne	r5, #1
 800e542:	e7d2      	b.n	800e4ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

0800e544 <_ZSt20__throw_length_errorPKc>:
 800e544:	b508      	push	{r3, lr}
 800e546:	f000 f8b2 	bl	800e6ae <abort>

0800e54a <_ZSt25__throw_bad_function_callv>:
 800e54a:	b508      	push	{r3, lr}
 800e54c:	f000 f8af 	bl	800e6ae <abort>

0800e550 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e550:	b508      	push	{r3, lr}
 800e552:	4780      	blx	r0
 800e554:	f000 f8ab 	bl	800e6ae <abort>

0800e558 <_ZSt13get_terminatev>:
 800e558:	4b02      	ldr	r3, [pc, #8]	; (800e564 <_ZSt13get_terminatev+0xc>)
 800e55a:	6818      	ldr	r0, [r3, #0]
 800e55c:	f3bf 8f5b 	dmb	ish
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	2400001c 	.word	0x2400001c

0800e568 <_ZSt9terminatev>:
 800e568:	b508      	push	{r3, lr}
 800e56a:	f7ff fff5 	bl	800e558 <_ZSt13get_terminatev>
 800e56e:	f7ff ffef 	bl	800e550 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e574 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800e574:	b510      	push	{r4, lr}
 800e576:	4b03      	ldr	r3, [pc, #12]	; (800e584 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800e578:	6003      	str	r3, [r0, #0]
 800e57a:	4604      	mov	r4, r0
 800e57c:	f7ff fd91 	bl	800e0a2 <_ZNSt9type_infoD1Ev>
 800e580:	4620      	mov	r0, r4
 800e582:	bd10      	pop	{r4, pc}
 800e584:	08011b08 	.word	0x08011b08

0800e588 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800e588:	b510      	push	{r4, lr}
 800e58a:	4604      	mov	r4, r0
 800e58c:	f7ff fff2 	bl	800e574 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800e590:	4620      	mov	r0, r4
 800e592:	2108      	movs	r1, #8
 800e594:	f7ff fc6e 	bl	800de74 <_ZdlPvj>
 800e598:	4620      	mov	r0, r4
 800e59a:	bd10      	pop	{r4, pc}

0800e59c <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800e59c:	68c0      	ldr	r0, [r0, #12]
 800e59e:	68c9      	ldr	r1, [r1, #12]
 800e5a0:	b410      	push	{r4}
 800e5a2:	6804      	ldr	r4, [r0, #0]
 800e5a4:	6924      	ldr	r4, [r4, #16]
 800e5a6:	3302      	adds	r3, #2
 800e5a8:	46a4      	mov	ip, r4
 800e5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ae:	4760      	bx	ip

0800e5b0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4b03      	ldr	r3, [pc, #12]	; (800e5c0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800e5b4:	6003      	str	r3, [r0, #0]
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	f7ff fd73 	bl	800e0a2 <_ZNSt9type_infoD1Ev>
 800e5bc:	4620      	mov	r0, r4
 800e5be:	bd10      	pop	{r4, pc}
 800e5c0:	08011b58 	.word	0x08011b58

0800e5c4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	f7ff fff2 	bl	800e5b0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	2110      	movs	r1, #16
 800e5d0:	f7ff fc50 	bl	800de74 <_ZdlPvj>
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	bd10      	pop	{r4, pc}

0800e5d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800e5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	4605      	mov	r5, r0
 800e5de:	460e      	mov	r6, r1
 800e5e0:	4617      	mov	r7, r2
 800e5e2:	4698      	mov	r8, r3
 800e5e4:	f7ff fd62 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	b9f0      	cbnz	r0, 800e62a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e5ec:	4929      	ldr	r1, [pc, #164]	; (800e694 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f7ff fd5c 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e5f4:	b300      	cbz	r0, 800e638 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800e5f6:	682b      	ldr	r3, [r5, #0]
 800e5f8:	4927      	ldr	r1, [pc, #156]	; (800e698 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800e5fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5fe:	f7ff fd55 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e602:	b110      	cbz	r0, 800e60a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800e604:	603c      	str	r4, [r7, #0]
 800e606:	4604      	mov	r4, r0
 800e608:	e00f      	b.n	800e62a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e60a:	682b      	ldr	r3, [r5, #0]
 800e60c:	4923      	ldr	r1, [pc, #140]	; (800e69c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800e60e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e612:	f7ff fd4b 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e616:	4681      	mov	r9, r0
 800e618:	b170      	cbz	r0, 800e638 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800e61a:	68e8      	ldr	r0, [r5, #12]
 800e61c:	6803      	ldr	r3, [r0, #0]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	4798      	blx	r3
 800e622:	4604      	mov	r4, r0
 800e624:	b120      	cbz	r0, 800e630 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800e626:	4b1e      	ldr	r3, [pc, #120]	; (800e6a0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800e628:	603b      	str	r3, [r7, #0]
 800e62a:	4620      	mov	r0, r4
 800e62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e630:	4b1c      	ldr	r3, [pc, #112]	; (800e6a4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	464c      	mov	r4, r9
 800e636:	e7f8      	b.n	800e62a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e63e:	b33e      	cbz	r6, 800e690 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e646:	f7ff fd31 	bl	800e0ac <_ZNKSt9type_infoeqERKS_>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d0db      	beq.n	800e606 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800e64e:	f018 0f01 	tst.w	r8, #1
 800e652:	d0ea      	beq.n	800e62a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e654:	68b3      	ldr	r3, [r6, #8]
 800e656:	68a9      	ldr	r1, [r5, #8]
 800e658:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800e65c:	f001 0260 	and.w	r2, r1, #96	; 0x60
 800e660:	ea30 0c02 	bics.w	ip, r0, r2
 800e664:	bf18      	it	ne
 800e666:	4013      	andne	r3, r2
 800e668:	ea23 0301 	bic.w	r3, r3, r1
 800e66c:	ea22 0200 	bic.w	r2, r2, r0
 800e670:	4313      	orrs	r3, r2
 800e672:	d1da      	bne.n	800e62a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e674:	07cb      	lsls	r3, r1, #31
 800e676:	682b      	ldr	r3, [r5, #0]
 800e678:	699c      	ldr	r4, [r3, #24]
 800e67a:	bf58      	it	pl
 800e67c:	f028 0801 	bicpl.w	r8, r8, #1
 800e680:	4643      	mov	r3, r8
 800e682:	463a      	mov	r2, r7
 800e684:	4631      	mov	r1, r6
 800e686:	4628      	mov	r0, r5
 800e688:	46a4      	mov	ip, r4
 800e68a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e68e:	4760      	bx	ip
 800e690:	f000 f80a 	bl	800e6a8 <__cxa_bad_typeid>
 800e694:	08011abc 	.word	0x08011abc
 800e698:	08011988 	.word	0x08011988
 800e69c:	08011b80 	.word	0x08011b80
 800e6a0:	08011b78 	.word	0x08011b78
 800e6a4:	08011b74 	.word	0x08011b74

0800e6a8 <__cxa_bad_typeid>:
 800e6a8:	b508      	push	{r3, lr}
 800e6aa:	f000 f800 	bl	800e6ae <abort>

0800e6ae <abort>:
 800e6ae:	b508      	push	{r3, lr}
 800e6b0:	2006      	movs	r0, #6
 800e6b2:	f000 fed5 	bl	800f460 <raise>
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	f7f2 fd88 	bl	80011cc <_exit>

0800e6bc <atexit>:
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4601      	mov	r1, r0
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 bf3e 	b.w	800f544 <__register_exitproc>

0800e6c8 <__errno>:
 800e6c8:	4b01      	ldr	r3, [pc, #4]	; (800e6d0 <__errno+0x8>)
 800e6ca:	6818      	ldr	r0, [r3, #0]
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	24000020 	.word	0x24000020

0800e6d4 <std>:
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	b510      	push	{r4, lr}
 800e6d8:	4604      	mov	r4, r0
 800e6da:	e9c0 3300 	strd	r3, r3, [r0]
 800e6de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6e2:	6083      	str	r3, [r0, #8]
 800e6e4:	8181      	strh	r1, [r0, #12]
 800e6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e6e8:	81c2      	strh	r2, [r0, #14]
 800e6ea:	6183      	str	r3, [r0, #24]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	2208      	movs	r2, #8
 800e6f0:	305c      	adds	r0, #92	; 0x5c
 800e6f2:	f000 f935 	bl	800e960 <memset>
 800e6f6:	4b05      	ldr	r3, [pc, #20]	; (800e70c <std+0x38>)
 800e6f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <std+0x3c>)
 800e6fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6fe:	4b05      	ldr	r3, [pc, #20]	; (800e714 <std+0x40>)
 800e700:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e702:	4b05      	ldr	r3, [pc, #20]	; (800e718 <std+0x44>)
 800e704:	6224      	str	r4, [r4, #32]
 800e706:	6323      	str	r3, [r4, #48]	; 0x30
 800e708:	bd10      	pop	{r4, pc}
 800e70a:	bf00      	nop
 800e70c:	0800f499 	.word	0x0800f499
 800e710:	0800f4bb 	.word	0x0800f4bb
 800e714:	0800f4f3 	.word	0x0800f4f3
 800e718:	0800f517 	.word	0x0800f517

0800e71c <_cleanup_r>:
 800e71c:	4901      	ldr	r1, [pc, #4]	; (800e724 <_cleanup_r+0x8>)
 800e71e:	f000 b8af 	b.w	800e880 <_fwalk_reent>
 800e722:	bf00      	nop
 800e724:	08010329 	.word	0x08010329

0800e728 <__sfmoreglue>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	2268      	movs	r2, #104	; 0x68
 800e72c:	1e4d      	subs	r5, r1, #1
 800e72e:	4355      	muls	r5, r2
 800e730:	460e      	mov	r6, r1
 800e732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e736:	f000 f93b 	bl	800e9b0 <_malloc_r>
 800e73a:	4604      	mov	r4, r0
 800e73c:	b140      	cbz	r0, 800e750 <__sfmoreglue+0x28>
 800e73e:	2100      	movs	r1, #0
 800e740:	e9c0 1600 	strd	r1, r6, [r0]
 800e744:	300c      	adds	r0, #12
 800e746:	60a0      	str	r0, [r4, #8]
 800e748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e74c:	f000 f908 	bl	800e960 <memset>
 800e750:	4620      	mov	r0, r4
 800e752:	bd70      	pop	{r4, r5, r6, pc}

0800e754 <__sfp_lock_acquire>:
 800e754:	4801      	ldr	r0, [pc, #4]	; (800e75c <__sfp_lock_acquire+0x8>)
 800e756:	f000 b8d8 	b.w	800e90a <__retarget_lock_acquire_recursive>
 800e75a:	bf00      	nop
 800e75c:	2400a6fa 	.word	0x2400a6fa

0800e760 <__sfp_lock_release>:
 800e760:	4801      	ldr	r0, [pc, #4]	; (800e768 <__sfp_lock_release+0x8>)
 800e762:	f000 b8d4 	b.w	800e90e <__retarget_lock_release_recursive>
 800e766:	bf00      	nop
 800e768:	2400a6fa 	.word	0x2400a6fa

0800e76c <__sinit_lock_acquire>:
 800e76c:	4801      	ldr	r0, [pc, #4]	; (800e774 <__sinit_lock_acquire+0x8>)
 800e76e:	f000 b8cc 	b.w	800e90a <__retarget_lock_acquire_recursive>
 800e772:	bf00      	nop
 800e774:	2400a6fb 	.word	0x2400a6fb

0800e778 <__sinit_lock_release>:
 800e778:	4801      	ldr	r0, [pc, #4]	; (800e780 <__sinit_lock_release+0x8>)
 800e77a:	f000 b8c8 	b.w	800e90e <__retarget_lock_release_recursive>
 800e77e:	bf00      	nop
 800e780:	2400a6fb 	.word	0x2400a6fb

0800e784 <__sinit>:
 800e784:	b510      	push	{r4, lr}
 800e786:	4604      	mov	r4, r0
 800e788:	f7ff fff0 	bl	800e76c <__sinit_lock_acquire>
 800e78c:	69a3      	ldr	r3, [r4, #24]
 800e78e:	b11b      	cbz	r3, 800e798 <__sinit+0x14>
 800e790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e794:	f7ff bff0 	b.w	800e778 <__sinit_lock_release>
 800e798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e79c:	6523      	str	r3, [r4, #80]	; 0x50
 800e79e:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <__sinit+0x68>)
 800e7a0:	4a13      	ldr	r2, [pc, #76]	; (800e7f0 <__sinit+0x6c>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e7a6:	42a3      	cmp	r3, r4
 800e7a8:	bf04      	itt	eq
 800e7aa:	2301      	moveq	r3, #1
 800e7ac:	61a3      	streq	r3, [r4, #24]
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f000 f820 	bl	800e7f4 <__sfp>
 800e7b4:	6060      	str	r0, [r4, #4]
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f000 f81c 	bl	800e7f4 <__sfp>
 800e7bc:	60a0      	str	r0, [r4, #8]
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f000 f818 	bl	800e7f4 <__sfp>
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	60e0      	str	r0, [r4, #12]
 800e7c8:	2104      	movs	r1, #4
 800e7ca:	6860      	ldr	r0, [r4, #4]
 800e7cc:	f7ff ff82 	bl	800e6d4 <std>
 800e7d0:	68a0      	ldr	r0, [r4, #8]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	2109      	movs	r1, #9
 800e7d6:	f7ff ff7d 	bl	800e6d4 <std>
 800e7da:	68e0      	ldr	r0, [r4, #12]
 800e7dc:	2202      	movs	r2, #2
 800e7de:	2112      	movs	r1, #18
 800e7e0:	f7ff ff78 	bl	800e6d4 <std>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	61a3      	str	r3, [r4, #24]
 800e7e8:	e7d2      	b.n	800e790 <__sinit+0xc>
 800e7ea:	bf00      	nop
 800e7ec:	08011c1c 	.word	0x08011c1c
 800e7f0:	0800e71d 	.word	0x0800e71d

0800e7f4 <__sfp>:
 800e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	f7ff ffac 	bl	800e754 <__sfp_lock_acquire>
 800e7fc:	4b1e      	ldr	r3, [pc, #120]	; (800e878 <__sfp+0x84>)
 800e7fe:	681e      	ldr	r6, [r3, #0]
 800e800:	69b3      	ldr	r3, [r6, #24]
 800e802:	b913      	cbnz	r3, 800e80a <__sfp+0x16>
 800e804:	4630      	mov	r0, r6
 800e806:	f7ff ffbd 	bl	800e784 <__sinit>
 800e80a:	3648      	adds	r6, #72	; 0x48
 800e80c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e810:	3b01      	subs	r3, #1
 800e812:	d503      	bpl.n	800e81c <__sfp+0x28>
 800e814:	6833      	ldr	r3, [r6, #0]
 800e816:	b30b      	cbz	r3, 800e85c <__sfp+0x68>
 800e818:	6836      	ldr	r6, [r6, #0]
 800e81a:	e7f7      	b.n	800e80c <__sfp+0x18>
 800e81c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e820:	b9d5      	cbnz	r5, 800e858 <__sfp+0x64>
 800e822:	4b16      	ldr	r3, [pc, #88]	; (800e87c <__sfp+0x88>)
 800e824:	60e3      	str	r3, [r4, #12]
 800e826:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e82a:	6665      	str	r5, [r4, #100]	; 0x64
 800e82c:	f000 f86c 	bl	800e908 <__retarget_lock_init_recursive>
 800e830:	f7ff ff96 	bl	800e760 <__sfp_lock_release>
 800e834:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e838:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e83c:	6025      	str	r5, [r4, #0]
 800e83e:	61a5      	str	r5, [r4, #24]
 800e840:	2208      	movs	r2, #8
 800e842:	4629      	mov	r1, r5
 800e844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e848:	f000 f88a 	bl	800e960 <memset>
 800e84c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e854:	4620      	mov	r0, r4
 800e856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e858:	3468      	adds	r4, #104	; 0x68
 800e85a:	e7d9      	b.n	800e810 <__sfp+0x1c>
 800e85c:	2104      	movs	r1, #4
 800e85e:	4638      	mov	r0, r7
 800e860:	f7ff ff62 	bl	800e728 <__sfmoreglue>
 800e864:	4604      	mov	r4, r0
 800e866:	6030      	str	r0, [r6, #0]
 800e868:	2800      	cmp	r0, #0
 800e86a:	d1d5      	bne.n	800e818 <__sfp+0x24>
 800e86c:	f7ff ff78 	bl	800e760 <__sfp_lock_release>
 800e870:	230c      	movs	r3, #12
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	e7ee      	b.n	800e854 <__sfp+0x60>
 800e876:	bf00      	nop
 800e878:	08011c1c 	.word	0x08011c1c
 800e87c:	ffff0001 	.word	0xffff0001

0800e880 <_fwalk_reent>:
 800e880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e884:	4606      	mov	r6, r0
 800e886:	4688      	mov	r8, r1
 800e888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e88c:	2700      	movs	r7, #0
 800e88e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e892:	f1b9 0901 	subs.w	r9, r9, #1
 800e896:	d505      	bpl.n	800e8a4 <_fwalk_reent+0x24>
 800e898:	6824      	ldr	r4, [r4, #0]
 800e89a:	2c00      	cmp	r4, #0
 800e89c:	d1f7      	bne.n	800e88e <_fwalk_reent+0xe>
 800e89e:	4638      	mov	r0, r7
 800e8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a4:	89ab      	ldrh	r3, [r5, #12]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d907      	bls.n	800e8ba <_fwalk_reent+0x3a>
 800e8aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	d003      	beq.n	800e8ba <_fwalk_reent+0x3a>
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	47c0      	blx	r8
 800e8b8:	4307      	orrs	r7, r0
 800e8ba:	3568      	adds	r5, #104	; 0x68
 800e8bc:	e7e9      	b.n	800e892 <_fwalk_reent+0x12>
	...

0800e8c0 <__libc_init_array>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	4d0d      	ldr	r5, [pc, #52]	; (800e8f8 <__libc_init_array+0x38>)
 800e8c4:	4c0d      	ldr	r4, [pc, #52]	; (800e8fc <__libc_init_array+0x3c>)
 800e8c6:	1b64      	subs	r4, r4, r5
 800e8c8:	10a4      	asrs	r4, r4, #2
 800e8ca:	2600      	movs	r6, #0
 800e8cc:	42a6      	cmp	r6, r4
 800e8ce:	d109      	bne.n	800e8e4 <__libc_init_array+0x24>
 800e8d0:	4d0b      	ldr	r5, [pc, #44]	; (800e900 <__libc_init_array+0x40>)
 800e8d2:	4c0c      	ldr	r4, [pc, #48]	; (800e904 <__libc_init_array+0x44>)
 800e8d4:	f002 fc78 	bl	80111c8 <_init>
 800e8d8:	1b64      	subs	r4, r4, r5
 800e8da:	10a4      	asrs	r4, r4, #2
 800e8dc:	2600      	movs	r6, #0
 800e8de:	42a6      	cmp	r6, r4
 800e8e0:	d105      	bne.n	800e8ee <__libc_init_array+0x2e>
 800e8e2:	bd70      	pop	{r4, r5, r6, pc}
 800e8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8e8:	4798      	blx	r3
 800e8ea:	3601      	adds	r6, #1
 800e8ec:	e7ee      	b.n	800e8cc <__libc_init_array+0xc>
 800e8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8f2:	4798      	blx	r3
 800e8f4:	3601      	adds	r6, #1
 800e8f6:	e7f2      	b.n	800e8de <__libc_init_array+0x1e>
 800e8f8:	08011f9c 	.word	0x08011f9c
 800e8fc:	08011f9c 	.word	0x08011f9c
 800e900:	08011f9c 	.word	0x08011f9c
 800e904:	08011fa4 	.word	0x08011fa4

0800e908 <__retarget_lock_init_recursive>:
 800e908:	4770      	bx	lr

0800e90a <__retarget_lock_acquire_recursive>:
 800e90a:	4770      	bx	lr

0800e90c <__retarget_lock_release>:
 800e90c:	4770      	bx	lr

0800e90e <__retarget_lock_release_recursive>:
 800e90e:	4770      	bx	lr

0800e910 <memcpy>:
 800e910:	440a      	add	r2, r1
 800e912:	4291      	cmp	r1, r2
 800e914:	f100 33ff 	add.w	r3, r0, #4294967295
 800e918:	d100      	bne.n	800e91c <memcpy+0xc>
 800e91a:	4770      	bx	lr
 800e91c:	b510      	push	{r4, lr}
 800e91e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e922:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e926:	4291      	cmp	r1, r2
 800e928:	d1f9      	bne.n	800e91e <memcpy+0xe>
 800e92a:	bd10      	pop	{r4, pc}

0800e92c <memmove>:
 800e92c:	4288      	cmp	r0, r1
 800e92e:	b510      	push	{r4, lr}
 800e930:	eb01 0402 	add.w	r4, r1, r2
 800e934:	d902      	bls.n	800e93c <memmove+0x10>
 800e936:	4284      	cmp	r4, r0
 800e938:	4623      	mov	r3, r4
 800e93a:	d807      	bhi.n	800e94c <memmove+0x20>
 800e93c:	1e43      	subs	r3, r0, #1
 800e93e:	42a1      	cmp	r1, r4
 800e940:	d008      	beq.n	800e954 <memmove+0x28>
 800e942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e94a:	e7f8      	b.n	800e93e <memmove+0x12>
 800e94c:	4402      	add	r2, r0
 800e94e:	4601      	mov	r1, r0
 800e950:	428a      	cmp	r2, r1
 800e952:	d100      	bne.n	800e956 <memmove+0x2a>
 800e954:	bd10      	pop	{r4, pc}
 800e956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e95e:	e7f7      	b.n	800e950 <memmove+0x24>

0800e960 <memset>:
 800e960:	4402      	add	r2, r0
 800e962:	4603      	mov	r3, r0
 800e964:	4293      	cmp	r3, r2
 800e966:	d100      	bne.n	800e96a <memset+0xa>
 800e968:	4770      	bx	lr
 800e96a:	f803 1b01 	strb.w	r1, [r3], #1
 800e96e:	e7f9      	b.n	800e964 <memset+0x4>

0800e970 <sbrk_aligned>:
 800e970:	b570      	push	{r4, r5, r6, lr}
 800e972:	4e0e      	ldr	r6, [pc, #56]	; (800e9ac <sbrk_aligned+0x3c>)
 800e974:	460c      	mov	r4, r1
 800e976:	6831      	ldr	r1, [r6, #0]
 800e978:	4605      	mov	r5, r0
 800e97a:	b911      	cbnz	r1, 800e982 <sbrk_aligned+0x12>
 800e97c:	f000 fd38 	bl	800f3f0 <_sbrk_r>
 800e980:	6030      	str	r0, [r6, #0]
 800e982:	4621      	mov	r1, r4
 800e984:	4628      	mov	r0, r5
 800e986:	f000 fd33 	bl	800f3f0 <_sbrk_r>
 800e98a:	1c43      	adds	r3, r0, #1
 800e98c:	d00a      	beq.n	800e9a4 <sbrk_aligned+0x34>
 800e98e:	1cc4      	adds	r4, r0, #3
 800e990:	f024 0403 	bic.w	r4, r4, #3
 800e994:	42a0      	cmp	r0, r4
 800e996:	d007      	beq.n	800e9a8 <sbrk_aligned+0x38>
 800e998:	1a21      	subs	r1, r4, r0
 800e99a:	4628      	mov	r0, r5
 800e99c:	f000 fd28 	bl	800f3f0 <_sbrk_r>
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	d101      	bne.n	800e9a8 <sbrk_aligned+0x38>
 800e9a4:	f04f 34ff 	mov.w	r4, #4294967295
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
 800e9ac:	2400a700 	.word	0x2400a700

0800e9b0 <_malloc_r>:
 800e9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b4:	1ccd      	adds	r5, r1, #3
 800e9b6:	f025 0503 	bic.w	r5, r5, #3
 800e9ba:	3508      	adds	r5, #8
 800e9bc:	2d0c      	cmp	r5, #12
 800e9be:	bf38      	it	cc
 800e9c0:	250c      	movcc	r5, #12
 800e9c2:	2d00      	cmp	r5, #0
 800e9c4:	4607      	mov	r7, r0
 800e9c6:	db01      	blt.n	800e9cc <_malloc_r+0x1c>
 800e9c8:	42a9      	cmp	r1, r5
 800e9ca:	d905      	bls.n	800e9d8 <_malloc_r+0x28>
 800e9cc:	230c      	movs	r3, #12
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	2600      	movs	r6, #0
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d8:	4e2e      	ldr	r6, [pc, #184]	; (800ea94 <_malloc_r+0xe4>)
 800e9da:	f001 fcff 	bl	80103dc <__malloc_lock>
 800e9de:	6833      	ldr	r3, [r6, #0]
 800e9e0:	461c      	mov	r4, r3
 800e9e2:	bb34      	cbnz	r4, 800ea32 <_malloc_r+0x82>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f7ff ffc2 	bl	800e970 <sbrk_aligned>
 800e9ec:	1c43      	adds	r3, r0, #1
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	d14d      	bne.n	800ea8e <_malloc_r+0xde>
 800e9f2:	6834      	ldr	r4, [r6, #0]
 800e9f4:	4626      	mov	r6, r4
 800e9f6:	2e00      	cmp	r6, #0
 800e9f8:	d140      	bne.n	800ea7c <_malloc_r+0xcc>
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	4631      	mov	r1, r6
 800e9fe:	4638      	mov	r0, r7
 800ea00:	eb04 0803 	add.w	r8, r4, r3
 800ea04:	f000 fcf4 	bl	800f3f0 <_sbrk_r>
 800ea08:	4580      	cmp	r8, r0
 800ea0a:	d13a      	bne.n	800ea82 <_malloc_r+0xd2>
 800ea0c:	6821      	ldr	r1, [r4, #0]
 800ea0e:	3503      	adds	r5, #3
 800ea10:	1a6d      	subs	r5, r5, r1
 800ea12:	f025 0503 	bic.w	r5, r5, #3
 800ea16:	3508      	adds	r5, #8
 800ea18:	2d0c      	cmp	r5, #12
 800ea1a:	bf38      	it	cc
 800ea1c:	250c      	movcc	r5, #12
 800ea1e:	4629      	mov	r1, r5
 800ea20:	4638      	mov	r0, r7
 800ea22:	f7ff ffa5 	bl	800e970 <sbrk_aligned>
 800ea26:	3001      	adds	r0, #1
 800ea28:	d02b      	beq.n	800ea82 <_malloc_r+0xd2>
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	442b      	add	r3, r5
 800ea2e:	6023      	str	r3, [r4, #0]
 800ea30:	e00e      	b.n	800ea50 <_malloc_r+0xa0>
 800ea32:	6822      	ldr	r2, [r4, #0]
 800ea34:	1b52      	subs	r2, r2, r5
 800ea36:	d41e      	bmi.n	800ea76 <_malloc_r+0xc6>
 800ea38:	2a0b      	cmp	r2, #11
 800ea3a:	d916      	bls.n	800ea6a <_malloc_r+0xba>
 800ea3c:	1961      	adds	r1, r4, r5
 800ea3e:	42a3      	cmp	r3, r4
 800ea40:	6025      	str	r5, [r4, #0]
 800ea42:	bf18      	it	ne
 800ea44:	6059      	strne	r1, [r3, #4]
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	bf08      	it	eq
 800ea4a:	6031      	streq	r1, [r6, #0]
 800ea4c:	5162      	str	r2, [r4, r5]
 800ea4e:	604b      	str	r3, [r1, #4]
 800ea50:	4638      	mov	r0, r7
 800ea52:	f104 060b 	add.w	r6, r4, #11
 800ea56:	f001 fcc7 	bl	80103e8 <__malloc_unlock>
 800ea5a:	f026 0607 	bic.w	r6, r6, #7
 800ea5e:	1d23      	adds	r3, r4, #4
 800ea60:	1af2      	subs	r2, r6, r3
 800ea62:	d0b6      	beq.n	800e9d2 <_malloc_r+0x22>
 800ea64:	1b9b      	subs	r3, r3, r6
 800ea66:	50a3      	str	r3, [r4, r2]
 800ea68:	e7b3      	b.n	800e9d2 <_malloc_r+0x22>
 800ea6a:	6862      	ldr	r2, [r4, #4]
 800ea6c:	42a3      	cmp	r3, r4
 800ea6e:	bf0c      	ite	eq
 800ea70:	6032      	streq	r2, [r6, #0]
 800ea72:	605a      	strne	r2, [r3, #4]
 800ea74:	e7ec      	b.n	800ea50 <_malloc_r+0xa0>
 800ea76:	4623      	mov	r3, r4
 800ea78:	6864      	ldr	r4, [r4, #4]
 800ea7a:	e7b2      	b.n	800e9e2 <_malloc_r+0x32>
 800ea7c:	4634      	mov	r4, r6
 800ea7e:	6876      	ldr	r6, [r6, #4]
 800ea80:	e7b9      	b.n	800e9f6 <_malloc_r+0x46>
 800ea82:	230c      	movs	r3, #12
 800ea84:	603b      	str	r3, [r7, #0]
 800ea86:	4638      	mov	r0, r7
 800ea88:	f001 fcae 	bl	80103e8 <__malloc_unlock>
 800ea8c:	e7a1      	b.n	800e9d2 <_malloc_r+0x22>
 800ea8e:	6025      	str	r5, [r4, #0]
 800ea90:	e7de      	b.n	800ea50 <_malloc_r+0xa0>
 800ea92:	bf00      	nop
 800ea94:	2400a6fc 	.word	0x2400a6fc

0800ea98 <__cvt>:
 800ea98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea9a:	ed2d 8b02 	vpush	{d8}
 800ea9e:	eeb0 8b40 	vmov.f64	d8, d0
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	4617      	mov	r7, r2
 800eaa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800eaa8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eaaa:	ee18 2a90 	vmov	r2, s17
 800eaae:	f025 0520 	bic.w	r5, r5, #32
 800eab2:	2a00      	cmp	r2, #0
 800eab4:	bfb6      	itet	lt
 800eab6:	222d      	movlt	r2, #45	; 0x2d
 800eab8:	2200      	movge	r2, #0
 800eaba:	eeb1 8b40 	vneglt.f64	d8, d0
 800eabe:	2d46      	cmp	r5, #70	; 0x46
 800eac0:	460c      	mov	r4, r1
 800eac2:	701a      	strb	r2, [r3, #0]
 800eac4:	d004      	beq.n	800ead0 <__cvt+0x38>
 800eac6:	2d45      	cmp	r5, #69	; 0x45
 800eac8:	d100      	bne.n	800eacc <__cvt+0x34>
 800eaca:	3401      	adds	r4, #1
 800eacc:	2102      	movs	r1, #2
 800eace:	e000      	b.n	800ead2 <__cvt+0x3a>
 800ead0:	2103      	movs	r1, #3
 800ead2:	ab03      	add	r3, sp, #12
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	ab02      	add	r3, sp, #8
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	4622      	mov	r2, r4
 800eadc:	4633      	mov	r3, r6
 800eade:	eeb0 0b48 	vmov.f64	d0, d8
 800eae2:	f000 fe2d 	bl	800f740 <_dtoa_r>
 800eae6:	2d47      	cmp	r5, #71	; 0x47
 800eae8:	d101      	bne.n	800eaee <__cvt+0x56>
 800eaea:	07fb      	lsls	r3, r7, #31
 800eaec:	d51a      	bpl.n	800eb24 <__cvt+0x8c>
 800eaee:	2d46      	cmp	r5, #70	; 0x46
 800eaf0:	eb00 0204 	add.w	r2, r0, r4
 800eaf4:	d10c      	bne.n	800eb10 <__cvt+0x78>
 800eaf6:	7803      	ldrb	r3, [r0, #0]
 800eaf8:	2b30      	cmp	r3, #48	; 0x30
 800eafa:	d107      	bne.n	800eb0c <__cvt+0x74>
 800eafc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb04:	bf1c      	itt	ne
 800eb06:	f1c4 0401 	rsbne	r4, r4, #1
 800eb0a:	6034      	strne	r4, [r6, #0]
 800eb0c:	6833      	ldr	r3, [r6, #0]
 800eb0e:	441a      	add	r2, r3
 800eb10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb18:	bf08      	it	eq
 800eb1a:	9203      	streq	r2, [sp, #12]
 800eb1c:	2130      	movs	r1, #48	; 0x30
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d307      	bcc.n	800eb34 <__cvt+0x9c>
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb28:	1a1b      	subs	r3, r3, r0
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	b005      	add	sp, #20
 800eb2e:	ecbd 8b02 	vpop	{d8}
 800eb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb34:	1c5c      	adds	r4, r3, #1
 800eb36:	9403      	str	r4, [sp, #12]
 800eb38:	7019      	strb	r1, [r3, #0]
 800eb3a:	e7f0      	b.n	800eb1e <__cvt+0x86>

0800eb3c <__exponent>:
 800eb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2900      	cmp	r1, #0
 800eb42:	bfb8      	it	lt
 800eb44:	4249      	neglt	r1, r1
 800eb46:	f803 2b02 	strb.w	r2, [r3], #2
 800eb4a:	bfb4      	ite	lt
 800eb4c:	222d      	movlt	r2, #45	; 0x2d
 800eb4e:	222b      	movge	r2, #43	; 0x2b
 800eb50:	2909      	cmp	r1, #9
 800eb52:	7042      	strb	r2, [r0, #1]
 800eb54:	dd2a      	ble.n	800ebac <__exponent+0x70>
 800eb56:	f10d 0407 	add.w	r4, sp, #7
 800eb5a:	46a4      	mov	ip, r4
 800eb5c:	270a      	movs	r7, #10
 800eb5e:	46a6      	mov	lr, r4
 800eb60:	460a      	mov	r2, r1
 800eb62:	fb91 f6f7 	sdiv	r6, r1, r7
 800eb66:	fb07 1516 	mls	r5, r7, r6, r1
 800eb6a:	3530      	adds	r5, #48	; 0x30
 800eb6c:	2a63      	cmp	r2, #99	; 0x63
 800eb6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eb76:	4631      	mov	r1, r6
 800eb78:	dcf1      	bgt.n	800eb5e <__exponent+0x22>
 800eb7a:	3130      	adds	r1, #48	; 0x30
 800eb7c:	f1ae 0502 	sub.w	r5, lr, #2
 800eb80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eb84:	1c44      	adds	r4, r0, #1
 800eb86:	4629      	mov	r1, r5
 800eb88:	4561      	cmp	r1, ip
 800eb8a:	d30a      	bcc.n	800eba2 <__exponent+0x66>
 800eb8c:	f10d 0209 	add.w	r2, sp, #9
 800eb90:	eba2 020e 	sub.w	r2, r2, lr
 800eb94:	4565      	cmp	r5, ip
 800eb96:	bf88      	it	hi
 800eb98:	2200      	movhi	r2, #0
 800eb9a:	4413      	add	r3, r2
 800eb9c:	1a18      	subs	r0, r3, r0
 800eb9e:	b003      	add	sp, #12
 800eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ebaa:	e7ed      	b.n	800eb88 <__exponent+0x4c>
 800ebac:	2330      	movs	r3, #48	; 0x30
 800ebae:	3130      	adds	r1, #48	; 0x30
 800ebb0:	7083      	strb	r3, [r0, #2]
 800ebb2:	70c1      	strb	r1, [r0, #3]
 800ebb4:	1d03      	adds	r3, r0, #4
 800ebb6:	e7f1      	b.n	800eb9c <__exponent+0x60>

0800ebb8 <_printf_float>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	b08b      	sub	sp, #44	; 0x2c
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ebc4:	4616      	mov	r6, r2
 800ebc6:	461f      	mov	r7, r3
 800ebc8:	4605      	mov	r5, r0
 800ebca:	f001 fbe9 	bl	80103a0 <_localeconv_r>
 800ebce:	f8d0 b000 	ldr.w	fp, [r0]
 800ebd2:	4658      	mov	r0, fp
 800ebd4:	f7f1 fb8e 	bl	80002f4 <strlen>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	9308      	str	r3, [sp, #32]
 800ebdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ebe4:	6822      	ldr	r2, [r4, #0]
 800ebe6:	3307      	adds	r3, #7
 800ebe8:	f023 0307 	bic.w	r3, r3, #7
 800ebec:	f103 0108 	add.w	r1, r3, #8
 800ebf0:	f8c8 1000 	str.w	r1, [r8]
 800ebf4:	4682      	mov	sl, r0
 800ebf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebfa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ebfe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ee60 <_printf_float+0x2a8>
 800ec02:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ec06:	eeb0 6bc0 	vabs.f64	d6, d0
 800ec0a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ec0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec12:	dd24      	ble.n	800ec5e <_printf_float+0xa6>
 800ec14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ec18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1c:	d502      	bpl.n	800ec24 <_printf_float+0x6c>
 800ec1e:	232d      	movs	r3, #45	; 0x2d
 800ec20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec24:	4b90      	ldr	r3, [pc, #576]	; (800ee68 <_printf_float+0x2b0>)
 800ec26:	4891      	ldr	r0, [pc, #580]	; (800ee6c <_printf_float+0x2b4>)
 800ec28:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ec2c:	bf94      	ite	ls
 800ec2e:	4698      	movls	r8, r3
 800ec30:	4680      	movhi	r8, r0
 800ec32:	2303      	movs	r3, #3
 800ec34:	6123      	str	r3, [r4, #16]
 800ec36:	f022 0204 	bic.w	r2, r2, #4
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	9304      	str	r3, [sp, #16]
 800ec40:	9700      	str	r7, [sp, #0]
 800ec42:	4633      	mov	r3, r6
 800ec44:	aa09      	add	r2, sp, #36	; 0x24
 800ec46:	4621      	mov	r1, r4
 800ec48:	4628      	mov	r0, r5
 800ec4a:	f000 f9d3 	bl	800eff4 <_printf_common>
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f040 808a 	bne.w	800ed68 <_printf_float+0x1b0>
 800ec54:	f04f 30ff 	mov.w	r0, #4294967295
 800ec58:	b00b      	add	sp, #44	; 0x2c
 800ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ec62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec66:	d709      	bvc.n	800ec7c <_printf_float+0xc4>
 800ec68:	ee10 3a90 	vmov	r3, s1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	bfbc      	itt	lt
 800ec70:	232d      	movlt	r3, #45	; 0x2d
 800ec72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec76:	487e      	ldr	r0, [pc, #504]	; (800ee70 <_printf_float+0x2b8>)
 800ec78:	4b7e      	ldr	r3, [pc, #504]	; (800ee74 <_printf_float+0x2bc>)
 800ec7a:	e7d5      	b.n	800ec28 <_printf_float+0x70>
 800ec7c:	6863      	ldr	r3, [r4, #4]
 800ec7e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ec82:	9104      	str	r1, [sp, #16]
 800ec84:	1c59      	adds	r1, r3, #1
 800ec86:	d13c      	bne.n	800ed02 <_printf_float+0x14a>
 800ec88:	2306      	movs	r3, #6
 800ec8a:	6063      	str	r3, [r4, #4]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	9303      	str	r3, [sp, #12]
 800ec90:	ab08      	add	r3, sp, #32
 800ec92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ec96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec9a:	ab07      	add	r3, sp, #28
 800ec9c:	6861      	ldr	r1, [r4, #4]
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	6022      	str	r2, [r4, #0]
 800eca2:	f10d 031b 	add.w	r3, sp, #27
 800eca6:	4628      	mov	r0, r5
 800eca8:	f7ff fef6 	bl	800ea98 <__cvt>
 800ecac:	9b04      	ldr	r3, [sp, #16]
 800ecae:	9907      	ldr	r1, [sp, #28]
 800ecb0:	2b47      	cmp	r3, #71	; 0x47
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	d108      	bne.n	800ecc8 <_printf_float+0x110>
 800ecb6:	1cc8      	adds	r0, r1, #3
 800ecb8:	db02      	blt.n	800ecc0 <_printf_float+0x108>
 800ecba:	6863      	ldr	r3, [r4, #4]
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	dd41      	ble.n	800ed44 <_printf_float+0x18c>
 800ecc0:	f1a9 0902 	sub.w	r9, r9, #2
 800ecc4:	fa5f f989 	uxtb.w	r9, r9
 800ecc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eccc:	d820      	bhi.n	800ed10 <_printf_float+0x158>
 800ecce:	3901      	subs	r1, #1
 800ecd0:	464a      	mov	r2, r9
 800ecd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ecd6:	9107      	str	r1, [sp, #28]
 800ecd8:	f7ff ff30 	bl	800eb3c <__exponent>
 800ecdc:	9a08      	ldr	r2, [sp, #32]
 800ecde:	9004      	str	r0, [sp, #16]
 800ece0:	1813      	adds	r3, r2, r0
 800ece2:	2a01      	cmp	r2, #1
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	dc02      	bgt.n	800ecee <_printf_float+0x136>
 800ece8:	6822      	ldr	r2, [r4, #0]
 800ecea:	07d2      	lsls	r2, r2, #31
 800ecec:	d501      	bpl.n	800ecf2 <_printf_float+0x13a>
 800ecee:	3301      	adds	r3, #1
 800ecf0:	6123      	str	r3, [r4, #16]
 800ecf2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0a2      	beq.n	800ec40 <_printf_float+0x88>
 800ecfa:	232d      	movs	r3, #45	; 0x2d
 800ecfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed00:	e79e      	b.n	800ec40 <_printf_float+0x88>
 800ed02:	9904      	ldr	r1, [sp, #16]
 800ed04:	2947      	cmp	r1, #71	; 0x47
 800ed06:	d1c1      	bne.n	800ec8c <_printf_float+0xd4>
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1bf      	bne.n	800ec8c <_printf_float+0xd4>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e7bc      	b.n	800ec8a <_printf_float+0xd2>
 800ed10:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ed14:	d118      	bne.n	800ed48 <_printf_float+0x190>
 800ed16:	2900      	cmp	r1, #0
 800ed18:	6863      	ldr	r3, [r4, #4]
 800ed1a:	dd0b      	ble.n	800ed34 <_printf_float+0x17c>
 800ed1c:	6121      	str	r1, [r4, #16]
 800ed1e:	b913      	cbnz	r3, 800ed26 <_printf_float+0x16e>
 800ed20:	6822      	ldr	r2, [r4, #0]
 800ed22:	07d0      	lsls	r0, r2, #31
 800ed24:	d502      	bpl.n	800ed2c <_printf_float+0x174>
 800ed26:	3301      	adds	r3, #1
 800ed28:	440b      	add	r3, r1
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	e7de      	b.n	800ecf2 <_printf_float+0x13a>
 800ed34:	b913      	cbnz	r3, 800ed3c <_printf_float+0x184>
 800ed36:	6822      	ldr	r2, [r4, #0]
 800ed38:	07d2      	lsls	r2, r2, #31
 800ed3a:	d501      	bpl.n	800ed40 <_printf_float+0x188>
 800ed3c:	3302      	adds	r3, #2
 800ed3e:	e7f4      	b.n	800ed2a <_printf_float+0x172>
 800ed40:	2301      	movs	r3, #1
 800ed42:	e7f2      	b.n	800ed2a <_printf_float+0x172>
 800ed44:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ed48:	9b08      	ldr	r3, [sp, #32]
 800ed4a:	4299      	cmp	r1, r3
 800ed4c:	db05      	blt.n	800ed5a <_printf_float+0x1a2>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	6121      	str	r1, [r4, #16]
 800ed52:	07d8      	lsls	r0, r3, #31
 800ed54:	d5ea      	bpl.n	800ed2c <_printf_float+0x174>
 800ed56:	1c4b      	adds	r3, r1, #1
 800ed58:	e7e7      	b.n	800ed2a <_printf_float+0x172>
 800ed5a:	2900      	cmp	r1, #0
 800ed5c:	bfd4      	ite	le
 800ed5e:	f1c1 0202 	rsble	r2, r1, #2
 800ed62:	2201      	movgt	r2, #1
 800ed64:	4413      	add	r3, r2
 800ed66:	e7e0      	b.n	800ed2a <_printf_float+0x172>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	055a      	lsls	r2, r3, #21
 800ed6c:	d407      	bmi.n	800ed7e <_printf_float+0x1c6>
 800ed6e:	6923      	ldr	r3, [r4, #16]
 800ed70:	4642      	mov	r2, r8
 800ed72:	4631      	mov	r1, r6
 800ed74:	4628      	mov	r0, r5
 800ed76:	47b8      	blx	r7
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d12a      	bne.n	800edd2 <_printf_float+0x21a>
 800ed7c:	e76a      	b.n	800ec54 <_printf_float+0x9c>
 800ed7e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ed82:	f240 80e2 	bls.w	800ef4a <_printf_float+0x392>
 800ed86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ed8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed92:	d133      	bne.n	800edfc <_printf_float+0x244>
 800ed94:	4a38      	ldr	r2, [pc, #224]	; (800ee78 <_printf_float+0x2c0>)
 800ed96:	2301      	movs	r3, #1
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b8      	blx	r7
 800ed9e:	3001      	adds	r0, #1
 800eda0:	f43f af58 	beq.w	800ec54 <_printf_float+0x9c>
 800eda4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	db02      	blt.n	800edb2 <_printf_float+0x1fa>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	07d8      	lsls	r0, r3, #31
 800edb0:	d50f      	bpl.n	800edd2 <_printf_float+0x21a>
 800edb2:	4653      	mov	r3, sl
 800edb4:	465a      	mov	r2, fp
 800edb6:	4631      	mov	r1, r6
 800edb8:	4628      	mov	r0, r5
 800edba:	47b8      	blx	r7
 800edbc:	3001      	adds	r0, #1
 800edbe:	f43f af49 	beq.w	800ec54 <_printf_float+0x9c>
 800edc2:	f04f 0800 	mov.w	r8, #0
 800edc6:	f104 091a 	add.w	r9, r4, #26
 800edca:	9b08      	ldr	r3, [sp, #32]
 800edcc:	3b01      	subs	r3, #1
 800edce:	4543      	cmp	r3, r8
 800edd0:	dc09      	bgt.n	800ede6 <_printf_float+0x22e>
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	079b      	lsls	r3, r3, #30
 800edd6:	f100 8108 	bmi.w	800efea <_printf_float+0x432>
 800edda:	68e0      	ldr	r0, [r4, #12]
 800eddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edde:	4298      	cmp	r0, r3
 800ede0:	bfb8      	it	lt
 800ede2:	4618      	movlt	r0, r3
 800ede4:	e738      	b.n	800ec58 <_printf_float+0xa0>
 800ede6:	2301      	movs	r3, #1
 800ede8:	464a      	mov	r2, r9
 800edea:	4631      	mov	r1, r6
 800edec:	4628      	mov	r0, r5
 800edee:	47b8      	blx	r7
 800edf0:	3001      	adds	r0, #1
 800edf2:	f43f af2f 	beq.w	800ec54 <_printf_float+0x9c>
 800edf6:	f108 0801 	add.w	r8, r8, #1
 800edfa:	e7e6      	b.n	800edca <_printf_float+0x212>
 800edfc:	9b07      	ldr	r3, [sp, #28]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	dc3c      	bgt.n	800ee7c <_printf_float+0x2c4>
 800ee02:	4a1d      	ldr	r2, [pc, #116]	; (800ee78 <_printf_float+0x2c0>)
 800ee04:	2301      	movs	r3, #1
 800ee06:	4631      	mov	r1, r6
 800ee08:	4628      	mov	r0, r5
 800ee0a:	47b8      	blx	r7
 800ee0c:	3001      	adds	r0, #1
 800ee0e:	f43f af21 	beq.w	800ec54 <_printf_float+0x9c>
 800ee12:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	d102      	bne.n	800ee20 <_printf_float+0x268>
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	07d9      	lsls	r1, r3, #31
 800ee1e:	d5d8      	bpl.n	800edd2 <_printf_float+0x21a>
 800ee20:	4653      	mov	r3, sl
 800ee22:	465a      	mov	r2, fp
 800ee24:	4631      	mov	r1, r6
 800ee26:	4628      	mov	r0, r5
 800ee28:	47b8      	blx	r7
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	f43f af12 	beq.w	800ec54 <_printf_float+0x9c>
 800ee30:	f04f 0900 	mov.w	r9, #0
 800ee34:	f104 0a1a 	add.w	sl, r4, #26
 800ee38:	9b07      	ldr	r3, [sp, #28]
 800ee3a:	425b      	negs	r3, r3
 800ee3c:	454b      	cmp	r3, r9
 800ee3e:	dc01      	bgt.n	800ee44 <_printf_float+0x28c>
 800ee40:	9b08      	ldr	r3, [sp, #32]
 800ee42:	e795      	b.n	800ed70 <_printf_float+0x1b8>
 800ee44:	2301      	movs	r3, #1
 800ee46:	4652      	mov	r2, sl
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f af00 	beq.w	800ec54 <_printf_float+0x9c>
 800ee54:	f109 0901 	add.w	r9, r9, #1
 800ee58:	e7ee      	b.n	800ee38 <_printf_float+0x280>
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w
 800ee60:	ffffffff 	.word	0xffffffff
 800ee64:	7fefffff 	.word	0x7fefffff
 800ee68:	08011c20 	.word	0x08011c20
 800ee6c:	08011c24 	.word	0x08011c24
 800ee70:	08011c2c 	.word	0x08011c2c
 800ee74:	08011c28 	.word	0x08011c28
 800ee78:	08011c30 	.word	0x08011c30
 800ee7c:	9a08      	ldr	r2, [sp, #32]
 800ee7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee80:	429a      	cmp	r2, r3
 800ee82:	bfa8      	it	ge
 800ee84:	461a      	movge	r2, r3
 800ee86:	2a00      	cmp	r2, #0
 800ee88:	4691      	mov	r9, r2
 800ee8a:	dc38      	bgt.n	800eefe <_printf_float+0x346>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9305      	str	r3, [sp, #20]
 800ee90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee94:	f104 021a 	add.w	r2, r4, #26
 800ee98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee9a:	9905      	ldr	r1, [sp, #20]
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	eba3 0309 	sub.w	r3, r3, r9
 800eea2:	428b      	cmp	r3, r1
 800eea4:	dc33      	bgt.n	800ef0e <_printf_float+0x356>
 800eea6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	db3c      	blt.n	800ef28 <_printf_float+0x370>
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	07da      	lsls	r2, r3, #31
 800eeb2:	d439      	bmi.n	800ef28 <_printf_float+0x370>
 800eeb4:	9b08      	ldr	r3, [sp, #32]
 800eeb6:	9a04      	ldr	r2, [sp, #16]
 800eeb8:	9907      	ldr	r1, [sp, #28]
 800eeba:	1a9a      	subs	r2, r3, r2
 800eebc:	eba3 0901 	sub.w	r9, r3, r1
 800eec0:	4591      	cmp	r9, r2
 800eec2:	bfa8      	it	ge
 800eec4:	4691      	movge	r9, r2
 800eec6:	f1b9 0f00 	cmp.w	r9, #0
 800eeca:	dc35      	bgt.n	800ef38 <_printf_float+0x380>
 800eecc:	f04f 0800 	mov.w	r8, #0
 800eed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eed4:	f104 0a1a 	add.w	sl, r4, #26
 800eed8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	eba3 0309 	sub.w	r3, r3, r9
 800eee2:	4543      	cmp	r3, r8
 800eee4:	f77f af75 	ble.w	800edd2 <_printf_float+0x21a>
 800eee8:	2301      	movs	r3, #1
 800eeea:	4652      	mov	r2, sl
 800eeec:	4631      	mov	r1, r6
 800eeee:	4628      	mov	r0, r5
 800eef0:	47b8      	blx	r7
 800eef2:	3001      	adds	r0, #1
 800eef4:	f43f aeae 	beq.w	800ec54 <_printf_float+0x9c>
 800eef8:	f108 0801 	add.w	r8, r8, #1
 800eefc:	e7ec      	b.n	800eed8 <_printf_float+0x320>
 800eefe:	4613      	mov	r3, r2
 800ef00:	4631      	mov	r1, r6
 800ef02:	4642      	mov	r2, r8
 800ef04:	4628      	mov	r0, r5
 800ef06:	47b8      	blx	r7
 800ef08:	3001      	adds	r0, #1
 800ef0a:	d1bf      	bne.n	800ee8c <_printf_float+0x2d4>
 800ef0c:	e6a2      	b.n	800ec54 <_printf_float+0x9c>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	4631      	mov	r1, r6
 800ef12:	4628      	mov	r0, r5
 800ef14:	9204      	str	r2, [sp, #16]
 800ef16:	47b8      	blx	r7
 800ef18:	3001      	adds	r0, #1
 800ef1a:	f43f ae9b 	beq.w	800ec54 <_printf_float+0x9c>
 800ef1e:	9b05      	ldr	r3, [sp, #20]
 800ef20:	9a04      	ldr	r2, [sp, #16]
 800ef22:	3301      	adds	r3, #1
 800ef24:	9305      	str	r3, [sp, #20]
 800ef26:	e7b7      	b.n	800ee98 <_printf_float+0x2e0>
 800ef28:	4653      	mov	r3, sl
 800ef2a:	465a      	mov	r2, fp
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4628      	mov	r0, r5
 800ef30:	47b8      	blx	r7
 800ef32:	3001      	adds	r0, #1
 800ef34:	d1be      	bne.n	800eeb4 <_printf_float+0x2fc>
 800ef36:	e68d      	b.n	800ec54 <_printf_float+0x9c>
 800ef38:	9a04      	ldr	r2, [sp, #16]
 800ef3a:	464b      	mov	r3, r9
 800ef3c:	4442      	add	r2, r8
 800ef3e:	4631      	mov	r1, r6
 800ef40:	4628      	mov	r0, r5
 800ef42:	47b8      	blx	r7
 800ef44:	3001      	adds	r0, #1
 800ef46:	d1c1      	bne.n	800eecc <_printf_float+0x314>
 800ef48:	e684      	b.n	800ec54 <_printf_float+0x9c>
 800ef4a:	9a08      	ldr	r2, [sp, #32]
 800ef4c:	2a01      	cmp	r2, #1
 800ef4e:	dc01      	bgt.n	800ef54 <_printf_float+0x39c>
 800ef50:	07db      	lsls	r3, r3, #31
 800ef52:	d537      	bpl.n	800efc4 <_printf_float+0x40c>
 800ef54:	2301      	movs	r3, #1
 800ef56:	4642      	mov	r2, r8
 800ef58:	4631      	mov	r1, r6
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	47b8      	blx	r7
 800ef5e:	3001      	adds	r0, #1
 800ef60:	f43f ae78 	beq.w	800ec54 <_printf_float+0x9c>
 800ef64:	4653      	mov	r3, sl
 800ef66:	465a      	mov	r2, fp
 800ef68:	4631      	mov	r1, r6
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	47b8      	blx	r7
 800ef6e:	3001      	adds	r0, #1
 800ef70:	f43f ae70 	beq.w	800ec54 <_printf_float+0x9c>
 800ef74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ef78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef80:	d01b      	beq.n	800efba <_printf_float+0x402>
 800ef82:	9b08      	ldr	r3, [sp, #32]
 800ef84:	f108 0201 	add.w	r2, r8, #1
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	47b8      	blx	r7
 800ef90:	3001      	adds	r0, #1
 800ef92:	d10e      	bne.n	800efb2 <_printf_float+0x3fa>
 800ef94:	e65e      	b.n	800ec54 <_printf_float+0x9c>
 800ef96:	2301      	movs	r3, #1
 800ef98:	464a      	mov	r2, r9
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b8      	blx	r7
 800efa0:	3001      	adds	r0, #1
 800efa2:	f43f ae57 	beq.w	800ec54 <_printf_float+0x9c>
 800efa6:	f108 0801 	add.w	r8, r8, #1
 800efaa:	9b08      	ldr	r3, [sp, #32]
 800efac:	3b01      	subs	r3, #1
 800efae:	4543      	cmp	r3, r8
 800efb0:	dcf1      	bgt.n	800ef96 <_printf_float+0x3de>
 800efb2:	9b04      	ldr	r3, [sp, #16]
 800efb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800efb8:	e6db      	b.n	800ed72 <_printf_float+0x1ba>
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	f104 091a 	add.w	r9, r4, #26
 800efc2:	e7f2      	b.n	800efaa <_printf_float+0x3f2>
 800efc4:	2301      	movs	r3, #1
 800efc6:	4642      	mov	r2, r8
 800efc8:	e7df      	b.n	800ef8a <_printf_float+0x3d2>
 800efca:	2301      	movs	r3, #1
 800efcc:	464a      	mov	r2, r9
 800efce:	4631      	mov	r1, r6
 800efd0:	4628      	mov	r0, r5
 800efd2:	47b8      	blx	r7
 800efd4:	3001      	adds	r0, #1
 800efd6:	f43f ae3d 	beq.w	800ec54 <_printf_float+0x9c>
 800efda:	f108 0801 	add.w	r8, r8, #1
 800efde:	68e3      	ldr	r3, [r4, #12]
 800efe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efe2:	1a5b      	subs	r3, r3, r1
 800efe4:	4543      	cmp	r3, r8
 800efe6:	dcf0      	bgt.n	800efca <_printf_float+0x412>
 800efe8:	e6f7      	b.n	800edda <_printf_float+0x222>
 800efea:	f04f 0800 	mov.w	r8, #0
 800efee:	f104 0919 	add.w	r9, r4, #25
 800eff2:	e7f4      	b.n	800efde <_printf_float+0x426>

0800eff4 <_printf_common>:
 800eff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eff8:	4616      	mov	r6, r2
 800effa:	4699      	mov	r9, r3
 800effc:	688a      	ldr	r2, [r1, #8]
 800effe:	690b      	ldr	r3, [r1, #16]
 800f000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f004:	4293      	cmp	r3, r2
 800f006:	bfb8      	it	lt
 800f008:	4613      	movlt	r3, r2
 800f00a:	6033      	str	r3, [r6, #0]
 800f00c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f010:	4607      	mov	r7, r0
 800f012:	460c      	mov	r4, r1
 800f014:	b10a      	cbz	r2, 800f01a <_printf_common+0x26>
 800f016:	3301      	adds	r3, #1
 800f018:	6033      	str	r3, [r6, #0]
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	0699      	lsls	r1, r3, #26
 800f01e:	bf42      	ittt	mi
 800f020:	6833      	ldrmi	r3, [r6, #0]
 800f022:	3302      	addmi	r3, #2
 800f024:	6033      	strmi	r3, [r6, #0]
 800f026:	6825      	ldr	r5, [r4, #0]
 800f028:	f015 0506 	ands.w	r5, r5, #6
 800f02c:	d106      	bne.n	800f03c <_printf_common+0x48>
 800f02e:	f104 0a19 	add.w	sl, r4, #25
 800f032:	68e3      	ldr	r3, [r4, #12]
 800f034:	6832      	ldr	r2, [r6, #0]
 800f036:	1a9b      	subs	r3, r3, r2
 800f038:	42ab      	cmp	r3, r5
 800f03a:	dc26      	bgt.n	800f08a <_printf_common+0x96>
 800f03c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f040:	1e13      	subs	r3, r2, #0
 800f042:	6822      	ldr	r2, [r4, #0]
 800f044:	bf18      	it	ne
 800f046:	2301      	movne	r3, #1
 800f048:	0692      	lsls	r2, r2, #26
 800f04a:	d42b      	bmi.n	800f0a4 <_printf_common+0xb0>
 800f04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f050:	4649      	mov	r1, r9
 800f052:	4638      	mov	r0, r7
 800f054:	47c0      	blx	r8
 800f056:	3001      	adds	r0, #1
 800f058:	d01e      	beq.n	800f098 <_printf_common+0xa4>
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	68e5      	ldr	r5, [r4, #12]
 800f05e:	6832      	ldr	r2, [r6, #0]
 800f060:	f003 0306 	and.w	r3, r3, #6
 800f064:	2b04      	cmp	r3, #4
 800f066:	bf08      	it	eq
 800f068:	1aad      	subeq	r5, r5, r2
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	6922      	ldr	r2, [r4, #16]
 800f06e:	bf0c      	ite	eq
 800f070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f074:	2500      	movne	r5, #0
 800f076:	4293      	cmp	r3, r2
 800f078:	bfc4      	itt	gt
 800f07a:	1a9b      	subgt	r3, r3, r2
 800f07c:	18ed      	addgt	r5, r5, r3
 800f07e:	2600      	movs	r6, #0
 800f080:	341a      	adds	r4, #26
 800f082:	42b5      	cmp	r5, r6
 800f084:	d11a      	bne.n	800f0bc <_printf_common+0xc8>
 800f086:	2000      	movs	r0, #0
 800f088:	e008      	b.n	800f09c <_printf_common+0xa8>
 800f08a:	2301      	movs	r3, #1
 800f08c:	4652      	mov	r2, sl
 800f08e:	4649      	mov	r1, r9
 800f090:	4638      	mov	r0, r7
 800f092:	47c0      	blx	r8
 800f094:	3001      	adds	r0, #1
 800f096:	d103      	bne.n	800f0a0 <_printf_common+0xac>
 800f098:	f04f 30ff 	mov.w	r0, #4294967295
 800f09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a0:	3501      	adds	r5, #1
 800f0a2:	e7c6      	b.n	800f032 <_printf_common+0x3e>
 800f0a4:	18e1      	adds	r1, r4, r3
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	2030      	movs	r0, #48	; 0x30
 800f0aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0ae:	4422      	add	r2, r4
 800f0b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0b8:	3302      	adds	r3, #2
 800f0ba:	e7c7      	b.n	800f04c <_printf_common+0x58>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	4622      	mov	r2, r4
 800f0c0:	4649      	mov	r1, r9
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	47c0      	blx	r8
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	d0e6      	beq.n	800f098 <_printf_common+0xa4>
 800f0ca:	3601      	adds	r6, #1
 800f0cc:	e7d9      	b.n	800f082 <_printf_common+0x8e>
	...

0800f0d0 <_printf_i>:
 800f0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	7e0f      	ldrb	r7, [r1, #24]
 800f0d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f0d8:	2f78      	cmp	r7, #120	; 0x78
 800f0da:	4691      	mov	r9, r2
 800f0dc:	4680      	mov	r8, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	469a      	mov	sl, r3
 800f0e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0e6:	d807      	bhi.n	800f0f8 <_printf_i+0x28>
 800f0e8:	2f62      	cmp	r7, #98	; 0x62
 800f0ea:	d80a      	bhi.n	800f102 <_printf_i+0x32>
 800f0ec:	2f00      	cmp	r7, #0
 800f0ee:	f000 80d8 	beq.w	800f2a2 <_printf_i+0x1d2>
 800f0f2:	2f58      	cmp	r7, #88	; 0x58
 800f0f4:	f000 80a3 	beq.w	800f23e <_printf_i+0x16e>
 800f0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f100:	e03a      	b.n	800f178 <_printf_i+0xa8>
 800f102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f106:	2b15      	cmp	r3, #21
 800f108:	d8f6      	bhi.n	800f0f8 <_printf_i+0x28>
 800f10a:	a101      	add	r1, pc, #4	; (adr r1, 800f110 <_printf_i+0x40>)
 800f10c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f110:	0800f169 	.word	0x0800f169
 800f114:	0800f17d 	.word	0x0800f17d
 800f118:	0800f0f9 	.word	0x0800f0f9
 800f11c:	0800f0f9 	.word	0x0800f0f9
 800f120:	0800f0f9 	.word	0x0800f0f9
 800f124:	0800f0f9 	.word	0x0800f0f9
 800f128:	0800f17d 	.word	0x0800f17d
 800f12c:	0800f0f9 	.word	0x0800f0f9
 800f130:	0800f0f9 	.word	0x0800f0f9
 800f134:	0800f0f9 	.word	0x0800f0f9
 800f138:	0800f0f9 	.word	0x0800f0f9
 800f13c:	0800f289 	.word	0x0800f289
 800f140:	0800f1ad 	.word	0x0800f1ad
 800f144:	0800f26b 	.word	0x0800f26b
 800f148:	0800f0f9 	.word	0x0800f0f9
 800f14c:	0800f0f9 	.word	0x0800f0f9
 800f150:	0800f2ab 	.word	0x0800f2ab
 800f154:	0800f0f9 	.word	0x0800f0f9
 800f158:	0800f1ad 	.word	0x0800f1ad
 800f15c:	0800f0f9 	.word	0x0800f0f9
 800f160:	0800f0f9 	.word	0x0800f0f9
 800f164:	0800f273 	.word	0x0800f273
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	1d1a      	adds	r2, r3, #4
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	602a      	str	r2, [r5, #0]
 800f170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f178:	2301      	movs	r3, #1
 800f17a:	e0a3      	b.n	800f2c4 <_printf_i+0x1f4>
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	6829      	ldr	r1, [r5, #0]
 800f180:	0606      	lsls	r6, r0, #24
 800f182:	f101 0304 	add.w	r3, r1, #4
 800f186:	d50a      	bpl.n	800f19e <_printf_i+0xce>
 800f188:	680e      	ldr	r6, [r1, #0]
 800f18a:	602b      	str	r3, [r5, #0]
 800f18c:	2e00      	cmp	r6, #0
 800f18e:	da03      	bge.n	800f198 <_printf_i+0xc8>
 800f190:	232d      	movs	r3, #45	; 0x2d
 800f192:	4276      	negs	r6, r6
 800f194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f198:	485e      	ldr	r0, [pc, #376]	; (800f314 <_printf_i+0x244>)
 800f19a:	230a      	movs	r3, #10
 800f19c:	e019      	b.n	800f1d2 <_printf_i+0x102>
 800f19e:	680e      	ldr	r6, [r1, #0]
 800f1a0:	602b      	str	r3, [r5, #0]
 800f1a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f1a6:	bf18      	it	ne
 800f1a8:	b236      	sxthne	r6, r6
 800f1aa:	e7ef      	b.n	800f18c <_printf_i+0xbc>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	6820      	ldr	r0, [r4, #0]
 800f1b0:	1d19      	adds	r1, r3, #4
 800f1b2:	6029      	str	r1, [r5, #0]
 800f1b4:	0601      	lsls	r1, r0, #24
 800f1b6:	d501      	bpl.n	800f1bc <_printf_i+0xec>
 800f1b8:	681e      	ldr	r6, [r3, #0]
 800f1ba:	e002      	b.n	800f1c2 <_printf_i+0xf2>
 800f1bc:	0646      	lsls	r6, r0, #25
 800f1be:	d5fb      	bpl.n	800f1b8 <_printf_i+0xe8>
 800f1c0:	881e      	ldrh	r6, [r3, #0]
 800f1c2:	4854      	ldr	r0, [pc, #336]	; (800f314 <_printf_i+0x244>)
 800f1c4:	2f6f      	cmp	r7, #111	; 0x6f
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2308      	moveq	r3, #8
 800f1ca:	230a      	movne	r3, #10
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1d2:	6865      	ldr	r5, [r4, #4]
 800f1d4:	60a5      	str	r5, [r4, #8]
 800f1d6:	2d00      	cmp	r5, #0
 800f1d8:	bfa2      	ittt	ge
 800f1da:	6821      	ldrge	r1, [r4, #0]
 800f1dc:	f021 0104 	bicge.w	r1, r1, #4
 800f1e0:	6021      	strge	r1, [r4, #0]
 800f1e2:	b90e      	cbnz	r6, 800f1e8 <_printf_i+0x118>
 800f1e4:	2d00      	cmp	r5, #0
 800f1e6:	d04d      	beq.n	800f284 <_printf_i+0x1b4>
 800f1e8:	4615      	mov	r5, r2
 800f1ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1ee:	fb03 6711 	mls	r7, r3, r1, r6
 800f1f2:	5dc7      	ldrb	r7, [r0, r7]
 800f1f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1f8:	4637      	mov	r7, r6
 800f1fa:	42bb      	cmp	r3, r7
 800f1fc:	460e      	mov	r6, r1
 800f1fe:	d9f4      	bls.n	800f1ea <_printf_i+0x11a>
 800f200:	2b08      	cmp	r3, #8
 800f202:	d10b      	bne.n	800f21c <_printf_i+0x14c>
 800f204:	6823      	ldr	r3, [r4, #0]
 800f206:	07de      	lsls	r6, r3, #31
 800f208:	d508      	bpl.n	800f21c <_printf_i+0x14c>
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	6861      	ldr	r1, [r4, #4]
 800f20e:	4299      	cmp	r1, r3
 800f210:	bfde      	ittt	le
 800f212:	2330      	movle	r3, #48	; 0x30
 800f214:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f21c:	1b52      	subs	r2, r2, r5
 800f21e:	6122      	str	r2, [r4, #16]
 800f220:	f8cd a000 	str.w	sl, [sp]
 800f224:	464b      	mov	r3, r9
 800f226:	aa03      	add	r2, sp, #12
 800f228:	4621      	mov	r1, r4
 800f22a:	4640      	mov	r0, r8
 800f22c:	f7ff fee2 	bl	800eff4 <_printf_common>
 800f230:	3001      	adds	r0, #1
 800f232:	d14c      	bne.n	800f2ce <_printf_i+0x1fe>
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	b004      	add	sp, #16
 800f23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23e:	4835      	ldr	r0, [pc, #212]	; (800f314 <_printf_i+0x244>)
 800f240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f244:	6829      	ldr	r1, [r5, #0]
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	f851 6b04 	ldr.w	r6, [r1], #4
 800f24c:	6029      	str	r1, [r5, #0]
 800f24e:	061d      	lsls	r5, r3, #24
 800f250:	d514      	bpl.n	800f27c <_printf_i+0x1ac>
 800f252:	07df      	lsls	r7, r3, #31
 800f254:	bf44      	itt	mi
 800f256:	f043 0320 	orrmi.w	r3, r3, #32
 800f25a:	6023      	strmi	r3, [r4, #0]
 800f25c:	b91e      	cbnz	r6, 800f266 <_printf_i+0x196>
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	f023 0320 	bic.w	r3, r3, #32
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	2310      	movs	r3, #16
 800f268:	e7b0      	b.n	800f1cc <_printf_i+0xfc>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	f043 0320 	orr.w	r3, r3, #32
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	2378      	movs	r3, #120	; 0x78
 800f274:	4828      	ldr	r0, [pc, #160]	; (800f318 <_printf_i+0x248>)
 800f276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f27a:	e7e3      	b.n	800f244 <_printf_i+0x174>
 800f27c:	0659      	lsls	r1, r3, #25
 800f27e:	bf48      	it	mi
 800f280:	b2b6      	uxthmi	r6, r6
 800f282:	e7e6      	b.n	800f252 <_printf_i+0x182>
 800f284:	4615      	mov	r5, r2
 800f286:	e7bb      	b.n	800f200 <_printf_i+0x130>
 800f288:	682b      	ldr	r3, [r5, #0]
 800f28a:	6826      	ldr	r6, [r4, #0]
 800f28c:	6961      	ldr	r1, [r4, #20]
 800f28e:	1d18      	adds	r0, r3, #4
 800f290:	6028      	str	r0, [r5, #0]
 800f292:	0635      	lsls	r5, r6, #24
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	d501      	bpl.n	800f29c <_printf_i+0x1cc>
 800f298:	6019      	str	r1, [r3, #0]
 800f29a:	e002      	b.n	800f2a2 <_printf_i+0x1d2>
 800f29c:	0670      	lsls	r0, r6, #25
 800f29e:	d5fb      	bpl.n	800f298 <_printf_i+0x1c8>
 800f2a0:	8019      	strh	r1, [r3, #0]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6123      	str	r3, [r4, #16]
 800f2a6:	4615      	mov	r5, r2
 800f2a8:	e7ba      	b.n	800f220 <_printf_i+0x150>
 800f2aa:	682b      	ldr	r3, [r5, #0]
 800f2ac:	1d1a      	adds	r2, r3, #4
 800f2ae:	602a      	str	r2, [r5, #0]
 800f2b0:	681d      	ldr	r5, [r3, #0]
 800f2b2:	6862      	ldr	r2, [r4, #4]
 800f2b4:	2100      	movs	r1, #0
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f7f1 f82a 	bl	8000310 <memchr>
 800f2bc:	b108      	cbz	r0, 800f2c2 <_printf_i+0x1f2>
 800f2be:	1b40      	subs	r0, r0, r5
 800f2c0:	6060      	str	r0, [r4, #4]
 800f2c2:	6863      	ldr	r3, [r4, #4]
 800f2c4:	6123      	str	r3, [r4, #16]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2cc:	e7a8      	b.n	800f220 <_printf_i+0x150>
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	462a      	mov	r2, r5
 800f2d2:	4649      	mov	r1, r9
 800f2d4:	4640      	mov	r0, r8
 800f2d6:	47d0      	blx	sl
 800f2d8:	3001      	adds	r0, #1
 800f2da:	d0ab      	beq.n	800f234 <_printf_i+0x164>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	079b      	lsls	r3, r3, #30
 800f2e0:	d413      	bmi.n	800f30a <_printf_i+0x23a>
 800f2e2:	68e0      	ldr	r0, [r4, #12]
 800f2e4:	9b03      	ldr	r3, [sp, #12]
 800f2e6:	4298      	cmp	r0, r3
 800f2e8:	bfb8      	it	lt
 800f2ea:	4618      	movlt	r0, r3
 800f2ec:	e7a4      	b.n	800f238 <_printf_i+0x168>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	4649      	mov	r1, r9
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	47d0      	blx	sl
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	d09b      	beq.n	800f234 <_printf_i+0x164>
 800f2fc:	3501      	adds	r5, #1
 800f2fe:	68e3      	ldr	r3, [r4, #12]
 800f300:	9903      	ldr	r1, [sp, #12]
 800f302:	1a5b      	subs	r3, r3, r1
 800f304:	42ab      	cmp	r3, r5
 800f306:	dcf2      	bgt.n	800f2ee <_printf_i+0x21e>
 800f308:	e7eb      	b.n	800f2e2 <_printf_i+0x212>
 800f30a:	2500      	movs	r5, #0
 800f30c:	f104 0619 	add.w	r6, r4, #25
 800f310:	e7f5      	b.n	800f2fe <_printf_i+0x22e>
 800f312:	bf00      	nop
 800f314:	08011c32 	.word	0x08011c32
 800f318:	08011c43 	.word	0x08011c43

0800f31c <cleanup_glue>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	460c      	mov	r4, r1
 800f320:	6809      	ldr	r1, [r1, #0]
 800f322:	4605      	mov	r5, r0
 800f324:	b109      	cbz	r1, 800f32a <cleanup_glue+0xe>
 800f326:	f7ff fff9 	bl	800f31c <cleanup_glue>
 800f32a:	4621      	mov	r1, r4
 800f32c:	4628      	mov	r0, r5
 800f32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f332:	f001 bbf9 	b.w	8010b28 <_free_r>
	...

0800f338 <_reclaim_reent>:
 800f338:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <_reclaim_reent+0xb4>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4283      	cmp	r3, r0
 800f33e:	b570      	push	{r4, r5, r6, lr}
 800f340:	4604      	mov	r4, r0
 800f342:	d051      	beq.n	800f3e8 <_reclaim_reent+0xb0>
 800f344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f346:	b143      	cbz	r3, 800f35a <_reclaim_reent+0x22>
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d14a      	bne.n	800f3e4 <_reclaim_reent+0xac>
 800f34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f350:	6819      	ldr	r1, [r3, #0]
 800f352:	b111      	cbz	r1, 800f35a <_reclaim_reent+0x22>
 800f354:	4620      	mov	r0, r4
 800f356:	f001 fbe7 	bl	8010b28 <_free_r>
 800f35a:	6961      	ldr	r1, [r4, #20]
 800f35c:	b111      	cbz	r1, 800f364 <_reclaim_reent+0x2c>
 800f35e:	4620      	mov	r0, r4
 800f360:	f001 fbe2 	bl	8010b28 <_free_r>
 800f364:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f366:	b111      	cbz	r1, 800f36e <_reclaim_reent+0x36>
 800f368:	4620      	mov	r0, r4
 800f36a:	f001 fbdd 	bl	8010b28 <_free_r>
 800f36e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f370:	b111      	cbz	r1, 800f378 <_reclaim_reent+0x40>
 800f372:	4620      	mov	r0, r4
 800f374:	f001 fbd8 	bl	8010b28 <_free_r>
 800f378:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f37a:	b111      	cbz	r1, 800f382 <_reclaim_reent+0x4a>
 800f37c:	4620      	mov	r0, r4
 800f37e:	f001 fbd3 	bl	8010b28 <_free_r>
 800f382:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f384:	b111      	cbz	r1, 800f38c <_reclaim_reent+0x54>
 800f386:	4620      	mov	r0, r4
 800f388:	f001 fbce 	bl	8010b28 <_free_r>
 800f38c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f38e:	b111      	cbz	r1, 800f396 <_reclaim_reent+0x5e>
 800f390:	4620      	mov	r0, r4
 800f392:	f001 fbc9 	bl	8010b28 <_free_r>
 800f396:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f398:	b111      	cbz	r1, 800f3a0 <_reclaim_reent+0x68>
 800f39a:	4620      	mov	r0, r4
 800f39c:	f001 fbc4 	bl	8010b28 <_free_r>
 800f3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3a2:	b111      	cbz	r1, 800f3aa <_reclaim_reent+0x72>
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f001 fbbf 	bl	8010b28 <_free_r>
 800f3aa:	69a3      	ldr	r3, [r4, #24]
 800f3ac:	b1e3      	cbz	r3, 800f3e8 <_reclaim_reent+0xb0>
 800f3ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	4798      	blx	r3
 800f3b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f3b6:	b1b9      	cbz	r1, 800f3e8 <_reclaim_reent+0xb0>
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3be:	f7ff bfad 	b.w	800f31c <cleanup_glue>
 800f3c2:	5949      	ldr	r1, [r1, r5]
 800f3c4:	b941      	cbnz	r1, 800f3d8 <_reclaim_reent+0xa0>
 800f3c6:	3504      	adds	r5, #4
 800f3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3ca:	2d80      	cmp	r5, #128	; 0x80
 800f3cc:	68d9      	ldr	r1, [r3, #12]
 800f3ce:	d1f8      	bne.n	800f3c2 <_reclaim_reent+0x8a>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 fba9 	bl	8010b28 <_free_r>
 800f3d6:	e7ba      	b.n	800f34e <_reclaim_reent+0x16>
 800f3d8:	680e      	ldr	r6, [r1, #0]
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f001 fba4 	bl	8010b28 <_free_r>
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	e7ef      	b.n	800f3c4 <_reclaim_reent+0x8c>
 800f3e4:	2500      	movs	r5, #0
 800f3e6:	e7ef      	b.n	800f3c8 <_reclaim_reent+0x90>
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ea:	bf00      	nop
 800f3ec:	24000020 	.word	0x24000020

0800f3f0 <_sbrk_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4d06      	ldr	r5, [pc, #24]	; (800f40c <_sbrk_r+0x1c>)
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	4608      	mov	r0, r1
 800f3fa:	602b      	str	r3, [r5, #0]
 800f3fc:	f7f1 ff12 	bl	8001224 <_sbrk>
 800f400:	1c43      	adds	r3, r0, #1
 800f402:	d102      	bne.n	800f40a <_sbrk_r+0x1a>
 800f404:	682b      	ldr	r3, [r5, #0]
 800f406:	b103      	cbz	r3, 800f40a <_sbrk_r+0x1a>
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	bd38      	pop	{r3, r4, r5, pc}
 800f40c:	2400a704 	.word	0x2400a704

0800f410 <_raise_r>:
 800f410:	291f      	cmp	r1, #31
 800f412:	b538      	push	{r3, r4, r5, lr}
 800f414:	4604      	mov	r4, r0
 800f416:	460d      	mov	r5, r1
 800f418:	d904      	bls.n	800f424 <_raise_r+0x14>
 800f41a:	2316      	movs	r3, #22
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	f04f 30ff 	mov.w	r0, #4294967295
 800f422:	bd38      	pop	{r3, r4, r5, pc}
 800f424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f426:	b112      	cbz	r2, 800f42e <_raise_r+0x1e>
 800f428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f42c:	b94b      	cbnz	r3, 800f442 <_raise_r+0x32>
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 f830 	bl	800f494 <_getpid_r>
 800f434:	462a      	mov	r2, r5
 800f436:	4601      	mov	r1, r0
 800f438:	4620      	mov	r0, r4
 800f43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f43e:	f000 b817 	b.w	800f470 <_kill_r>
 800f442:	2b01      	cmp	r3, #1
 800f444:	d00a      	beq.n	800f45c <_raise_r+0x4c>
 800f446:	1c59      	adds	r1, r3, #1
 800f448:	d103      	bne.n	800f452 <_raise_r+0x42>
 800f44a:	2316      	movs	r3, #22
 800f44c:	6003      	str	r3, [r0, #0]
 800f44e:	2001      	movs	r0, #1
 800f450:	e7e7      	b.n	800f422 <_raise_r+0x12>
 800f452:	2400      	movs	r4, #0
 800f454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f458:	4628      	mov	r0, r5
 800f45a:	4798      	blx	r3
 800f45c:	2000      	movs	r0, #0
 800f45e:	e7e0      	b.n	800f422 <_raise_r+0x12>

0800f460 <raise>:
 800f460:	4b02      	ldr	r3, [pc, #8]	; (800f46c <raise+0xc>)
 800f462:	4601      	mov	r1, r0
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	f7ff bfd3 	b.w	800f410 <_raise_r>
 800f46a:	bf00      	nop
 800f46c:	24000020 	.word	0x24000020

0800f470 <_kill_r>:
 800f470:	b538      	push	{r3, r4, r5, lr}
 800f472:	4d07      	ldr	r5, [pc, #28]	; (800f490 <_kill_r+0x20>)
 800f474:	2300      	movs	r3, #0
 800f476:	4604      	mov	r4, r0
 800f478:	4608      	mov	r0, r1
 800f47a:	4611      	mov	r1, r2
 800f47c:	602b      	str	r3, [r5, #0]
 800f47e:	f7f1 fe9d 	bl	80011bc <_kill>
 800f482:	1c43      	adds	r3, r0, #1
 800f484:	d102      	bne.n	800f48c <_kill_r+0x1c>
 800f486:	682b      	ldr	r3, [r5, #0]
 800f488:	b103      	cbz	r3, 800f48c <_kill_r+0x1c>
 800f48a:	6023      	str	r3, [r4, #0]
 800f48c:	bd38      	pop	{r3, r4, r5, pc}
 800f48e:	bf00      	nop
 800f490:	2400a704 	.word	0x2400a704

0800f494 <_getpid_r>:
 800f494:	f7f1 be90 	b.w	80011b8 <_getpid>

0800f498 <__sread>:
 800f498:	b510      	push	{r4, lr}
 800f49a:	460c      	mov	r4, r1
 800f49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a0:	f001 fb8e 	bl	8010bc0 <_read_r>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	bfab      	itete	ge
 800f4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f4ac:	181b      	addge	r3, r3, r0
 800f4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4b2:	bfac      	ite	ge
 800f4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4b6:	81a3      	strhlt	r3, [r4, #12]
 800f4b8:	bd10      	pop	{r4, pc}

0800f4ba <__swrite>:
 800f4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4be:	461f      	mov	r7, r3
 800f4c0:	898b      	ldrh	r3, [r1, #12]
 800f4c2:	05db      	lsls	r3, r3, #23
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	4616      	mov	r6, r2
 800f4ca:	d505      	bpl.n	800f4d8 <__swrite+0x1e>
 800f4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f000 ff68 	bl	80103a8 <_lseek_r>
 800f4d8:	89a3      	ldrh	r3, [r4, #12]
 800f4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4e2:	81a3      	strh	r3, [r4, #12]
 800f4e4:	4632      	mov	r2, r6
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ee:	f000 b817 	b.w	800f520 <_write_r>

0800f4f2 <__sseek>:
 800f4f2:	b510      	push	{r4, lr}
 800f4f4:	460c      	mov	r4, r1
 800f4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4fa:	f000 ff55 	bl	80103a8 <_lseek_r>
 800f4fe:	1c43      	adds	r3, r0, #1
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	bf15      	itete	ne
 800f504:	6560      	strne	r0, [r4, #84]	; 0x54
 800f506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f50e:	81a3      	strheq	r3, [r4, #12]
 800f510:	bf18      	it	ne
 800f512:	81a3      	strhne	r3, [r4, #12]
 800f514:	bd10      	pop	{r4, pc}

0800f516 <__sclose>:
 800f516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f51a:	f000 b875 	b.w	800f608 <_close_r>
	...

0800f520 <_write_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	4d07      	ldr	r5, [pc, #28]	; (800f540 <_write_r+0x20>)
 800f524:	4604      	mov	r4, r0
 800f526:	4608      	mov	r0, r1
 800f528:	4611      	mov	r1, r2
 800f52a:	2200      	movs	r2, #0
 800f52c:	602a      	str	r2, [r5, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	f7f1 fe5f 	bl	80011f2 <_write>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_write_r+0x1e>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_write_r+0x1e>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	2400a704 	.word	0x2400a704

0800f544 <__register_exitproc>:
 800f544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f548:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f604 <__register_exitproc+0xc0>
 800f54c:	4606      	mov	r6, r0
 800f54e:	f8d8 0000 	ldr.w	r0, [r8]
 800f552:	461f      	mov	r7, r3
 800f554:	460d      	mov	r5, r1
 800f556:	4691      	mov	r9, r2
 800f558:	f7ff f9d7 	bl	800e90a <__retarget_lock_acquire_recursive>
 800f55c:	4b25      	ldr	r3, [pc, #148]	; (800f5f4 <__register_exitproc+0xb0>)
 800f55e:	681c      	ldr	r4, [r3, #0]
 800f560:	b934      	cbnz	r4, 800f570 <__register_exitproc+0x2c>
 800f562:	4c25      	ldr	r4, [pc, #148]	; (800f5f8 <__register_exitproc+0xb4>)
 800f564:	601c      	str	r4, [r3, #0]
 800f566:	4b25      	ldr	r3, [pc, #148]	; (800f5fc <__register_exitproc+0xb8>)
 800f568:	b113      	cbz	r3, 800f570 <__register_exitproc+0x2c>
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800f570:	6863      	ldr	r3, [r4, #4]
 800f572:	2b1f      	cmp	r3, #31
 800f574:	dd07      	ble.n	800f586 <__register_exitproc+0x42>
 800f576:	f8d8 0000 	ldr.w	r0, [r8]
 800f57a:	f7ff f9c8 	bl	800e90e <__retarget_lock_release_recursive>
 800f57e:	f04f 30ff 	mov.w	r0, #4294967295
 800f582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f586:	b34e      	cbz	r6, 800f5dc <__register_exitproc+0x98>
 800f588:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800f58c:	b988      	cbnz	r0, 800f5b2 <__register_exitproc+0x6e>
 800f58e:	4b1c      	ldr	r3, [pc, #112]	; (800f600 <__register_exitproc+0xbc>)
 800f590:	b923      	cbnz	r3, 800f59c <__register_exitproc+0x58>
 800f592:	f8d8 0000 	ldr.w	r0, [r8]
 800f596:	f7ff f9b9 	bl	800e90c <__retarget_lock_release>
 800f59a:	e7f0      	b.n	800f57e <__register_exitproc+0x3a>
 800f59c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f5a0:	f000 ff14 	bl	80103cc <malloc>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d0f4      	beq.n	800f592 <__register_exitproc+0x4e>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800f5ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800f5b2:	6863      	ldr	r3, [r4, #4]
 800f5b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	409a      	lsls	r2, r3
 800f5bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f5c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f5ca:	2e02      	cmp	r6, #2
 800f5cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800f5d0:	bf02      	ittt	eq
 800f5d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800f5d6:	4313      	orreq	r3, r2
 800f5d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	f8d8 0000 	ldr.w	r0, [r8]
 800f5e2:	1c5a      	adds	r2, r3, #1
 800f5e4:	3302      	adds	r3, #2
 800f5e6:	6062      	str	r2, [r4, #4]
 800f5e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800f5ec:	f7ff f98f 	bl	800e90e <__retarget_lock_release_recursive>
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	e7c6      	b.n	800f582 <__register_exitproc+0x3e>
 800f5f4:	2400a794 	.word	0x2400a794
 800f5f8:	2400a708 	.word	0x2400a708
 800f5fc:	00000000 	.word	0x00000000
 800f600:	080103cd 	.word	0x080103cd
 800f604:	24000084 	.word	0x24000084

0800f608 <_close_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d06      	ldr	r5, [pc, #24]	; (800f624 <_close_r+0x1c>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	602b      	str	r3, [r5, #0]
 800f614:	f7f1 fdfa 	bl	800120c <_close>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_close_r+0x1a>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_close_r+0x1a>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	2400a704 	.word	0x2400a704

0800f628 <quorem>:
 800f628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	6903      	ldr	r3, [r0, #16]
 800f62e:	690c      	ldr	r4, [r1, #16]
 800f630:	42a3      	cmp	r3, r4
 800f632:	4607      	mov	r7, r0
 800f634:	f2c0 8081 	blt.w	800f73a <quorem+0x112>
 800f638:	3c01      	subs	r4, #1
 800f63a:	f101 0814 	add.w	r8, r1, #20
 800f63e:	f100 0514 	add.w	r5, r0, #20
 800f642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f650:	3301      	adds	r3, #1
 800f652:	429a      	cmp	r2, r3
 800f654:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f65c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f660:	d331      	bcc.n	800f6c6 <quorem+0x9e>
 800f662:	f04f 0e00 	mov.w	lr, #0
 800f666:	4640      	mov	r0, r8
 800f668:	46ac      	mov	ip, r5
 800f66a:	46f2      	mov	sl, lr
 800f66c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f670:	b293      	uxth	r3, r2
 800f672:	fb06 e303 	mla	r3, r6, r3, lr
 800f676:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	ebaa 0303 	sub.w	r3, sl, r3
 800f680:	f8dc a000 	ldr.w	sl, [ip]
 800f684:	0c12      	lsrs	r2, r2, #16
 800f686:	fa13 f38a 	uxtah	r3, r3, sl
 800f68a:	fb06 e202 	mla	r2, r6, r2, lr
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f696:	b292      	uxth	r2, r2
 800f698:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6a4:	4581      	cmp	r9, r0
 800f6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6aa:	f84c 3b04 	str.w	r3, [ip], #4
 800f6ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f6b2:	d2db      	bcs.n	800f66c <quorem+0x44>
 800f6b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f6b8:	b92b      	cbnz	r3, 800f6c6 <quorem+0x9e>
 800f6ba:	9b01      	ldr	r3, [sp, #4]
 800f6bc:	3b04      	subs	r3, #4
 800f6be:	429d      	cmp	r5, r3
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	d32e      	bcc.n	800f722 <quorem+0xfa>
 800f6c4:	613c      	str	r4, [r7, #16]
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	f001 f916 	bl	80108f8 <__mcmp>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	db24      	blt.n	800f71a <quorem+0xf2>
 800f6d0:	3601      	adds	r6, #1
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f04f 0c00 	mov.w	ip, #0
 800f6d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f6dc:	f8d0 e000 	ldr.w	lr, [r0]
 800f6e0:	b293      	uxth	r3, r2
 800f6e2:	ebac 0303 	sub.w	r3, ip, r3
 800f6e6:	0c12      	lsrs	r2, r2, #16
 800f6e8:	fa13 f38e 	uxtah	r3, r3, lr
 800f6ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f6f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6fa:	45c1      	cmp	r9, r8
 800f6fc:	f840 3b04 	str.w	r3, [r0], #4
 800f700:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f704:	d2e8      	bcs.n	800f6d8 <quorem+0xb0>
 800f706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f70e:	b922      	cbnz	r2, 800f71a <quorem+0xf2>
 800f710:	3b04      	subs	r3, #4
 800f712:	429d      	cmp	r5, r3
 800f714:	461a      	mov	r2, r3
 800f716:	d30a      	bcc.n	800f72e <quorem+0x106>
 800f718:	613c      	str	r4, [r7, #16]
 800f71a:	4630      	mov	r0, r6
 800f71c:	b003      	add	sp, #12
 800f71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	3b04      	subs	r3, #4
 800f726:	2a00      	cmp	r2, #0
 800f728:	d1cc      	bne.n	800f6c4 <quorem+0x9c>
 800f72a:	3c01      	subs	r4, #1
 800f72c:	e7c7      	b.n	800f6be <quorem+0x96>
 800f72e:	6812      	ldr	r2, [r2, #0]
 800f730:	3b04      	subs	r3, #4
 800f732:	2a00      	cmp	r2, #0
 800f734:	d1f0      	bne.n	800f718 <quorem+0xf0>
 800f736:	3c01      	subs	r4, #1
 800f738:	e7eb      	b.n	800f712 <quorem+0xea>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e7ee      	b.n	800f71c <quorem+0xf4>
	...

0800f740 <_dtoa_r>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	ed2d 8b02 	vpush	{d8}
 800f748:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f74a:	b091      	sub	sp, #68	; 0x44
 800f74c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f750:	ec59 8b10 	vmov	r8, r9, d0
 800f754:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f756:	9106      	str	r1, [sp, #24]
 800f758:	4606      	mov	r6, r0
 800f75a:	9208      	str	r2, [sp, #32]
 800f75c:	930c      	str	r3, [sp, #48]	; 0x30
 800f75e:	b975      	cbnz	r5, 800f77e <_dtoa_r+0x3e>
 800f760:	2010      	movs	r0, #16
 800f762:	f000 fe33 	bl	80103cc <malloc>
 800f766:	4602      	mov	r2, r0
 800f768:	6270      	str	r0, [r6, #36]	; 0x24
 800f76a:	b920      	cbnz	r0, 800f776 <_dtoa_r+0x36>
 800f76c:	4baa      	ldr	r3, [pc, #680]	; (800fa18 <_dtoa_r+0x2d8>)
 800f76e:	21ea      	movs	r1, #234	; 0xea
 800f770:	48aa      	ldr	r0, [pc, #680]	; (800fa1c <_dtoa_r+0x2dc>)
 800f772:	f001 fa37 	bl	8010be4 <__assert_func>
 800f776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f77a:	6005      	str	r5, [r0, #0]
 800f77c:	60c5      	str	r5, [r0, #12]
 800f77e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f780:	6819      	ldr	r1, [r3, #0]
 800f782:	b151      	cbz	r1, 800f79a <_dtoa_r+0x5a>
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	604a      	str	r2, [r1, #4]
 800f788:	2301      	movs	r3, #1
 800f78a:	4093      	lsls	r3, r2
 800f78c:	608b      	str	r3, [r1, #8]
 800f78e:	4630      	mov	r0, r6
 800f790:	f000 fe70 	bl	8010474 <_Bfree>
 800f794:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f796:	2200      	movs	r2, #0
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	f1b9 0300 	subs.w	r3, r9, #0
 800f79e:	bfbb      	ittet	lt
 800f7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f7a4:	9303      	strlt	r3, [sp, #12]
 800f7a6:	2300      	movge	r3, #0
 800f7a8:	2201      	movlt	r2, #1
 800f7aa:	bfac      	ite	ge
 800f7ac:	6023      	strge	r3, [r4, #0]
 800f7ae:	6022      	strlt	r2, [r4, #0]
 800f7b0:	4b9b      	ldr	r3, [pc, #620]	; (800fa20 <_dtoa_r+0x2e0>)
 800f7b2:	9c03      	ldr	r4, [sp, #12]
 800f7b4:	43a3      	bics	r3, r4
 800f7b6:	d11c      	bne.n	800f7f2 <_dtoa_r+0xb2>
 800f7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f7c4:	ea53 0308 	orrs.w	r3, r3, r8
 800f7c8:	f000 84fd 	beq.w	80101c6 <_dtoa_r+0xa86>
 800f7cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f7ce:	b963      	cbnz	r3, 800f7ea <_dtoa_r+0xaa>
 800f7d0:	4b94      	ldr	r3, [pc, #592]	; (800fa24 <_dtoa_r+0x2e4>)
 800f7d2:	e01f      	b.n	800f814 <_dtoa_r+0xd4>
 800f7d4:	4b94      	ldr	r3, [pc, #592]	; (800fa28 <_dtoa_r+0x2e8>)
 800f7d6:	9301      	str	r3, [sp, #4]
 800f7d8:	3308      	adds	r3, #8
 800f7da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f7dc:	6013      	str	r3, [r2, #0]
 800f7de:	9801      	ldr	r0, [sp, #4]
 800f7e0:	b011      	add	sp, #68	; 0x44
 800f7e2:	ecbd 8b02 	vpop	{d8}
 800f7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ea:	4b8e      	ldr	r3, [pc, #568]	; (800fa24 <_dtoa_r+0x2e4>)
 800f7ec:	9301      	str	r3, [sp, #4]
 800f7ee:	3303      	adds	r3, #3
 800f7f0:	e7f3      	b.n	800f7da <_dtoa_r+0x9a>
 800f7f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f7f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fe:	d10b      	bne.n	800f818 <_dtoa_r+0xd8>
 800f800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f802:	2301      	movs	r3, #1
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 84d9 	beq.w	80101c0 <_dtoa_r+0xa80>
 800f80e:	4887      	ldr	r0, [pc, #540]	; (800fa2c <_dtoa_r+0x2ec>)
 800f810:	6018      	str	r0, [r3, #0]
 800f812:	1e43      	subs	r3, r0, #1
 800f814:	9301      	str	r3, [sp, #4]
 800f816:	e7e2      	b.n	800f7de <_dtoa_r+0x9e>
 800f818:	a90f      	add	r1, sp, #60	; 0x3c
 800f81a:	aa0e      	add	r2, sp, #56	; 0x38
 800f81c:	4630      	mov	r0, r6
 800f81e:	eeb0 0b48 	vmov.f64	d0, d8
 800f822:	f001 f90f 	bl	8010a44 <__d2b>
 800f826:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f82a:	4605      	mov	r5, r0
 800f82c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f82e:	2900      	cmp	r1, #0
 800f830:	d046      	beq.n	800f8c0 <_dtoa_r+0x180>
 800f832:	ee18 4a90 	vmov	r4, s17
 800f836:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f83a:	ec53 2b18 	vmov	r2, r3, d8
 800f83e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f846:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f84a:	2400      	movs	r4, #0
 800f84c:	ec43 2b16 	vmov	d6, r2, r3
 800f850:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f854:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fa00 <_dtoa_r+0x2c0>
 800f858:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f85c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800fa08 <_dtoa_r+0x2c8>
 800f860:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f864:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fa10 <_dtoa_r+0x2d0>
 800f868:	ee07 1a90 	vmov	s15, r1
 800f86c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f870:	eeb0 7b46 	vmov.f64	d7, d6
 800f874:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f878:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f87c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f884:	ee16 ba90 	vmov	fp, s13
 800f888:	940a      	str	r4, [sp, #40]	; 0x28
 800f88a:	d508      	bpl.n	800f89e <_dtoa_r+0x15e>
 800f88c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f890:	eeb4 6b47 	vcmp.f64	d6, d7
 800f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f898:	bf18      	it	ne
 800f89a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f89e:	f1bb 0f16 	cmp.w	fp, #22
 800f8a2:	d82f      	bhi.n	800f904 <_dtoa_r+0x1c4>
 800f8a4:	4b62      	ldr	r3, [pc, #392]	; (800fa30 <_dtoa_r+0x2f0>)
 800f8a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f8aa:	ed93 7b00 	vldr	d7, [r3]
 800f8ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b6:	d501      	bpl.n	800f8bc <_dtoa_r+0x17c>
 800f8b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8bc:	2300      	movs	r3, #0
 800f8be:	e022      	b.n	800f906 <_dtoa_r+0x1c6>
 800f8c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8c2:	4401      	add	r1, r0
 800f8c4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f8c8:	2b20      	cmp	r3, #32
 800f8ca:	bfc1      	itttt	gt
 800f8cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f8d0:	fa04 f303 	lslgt.w	r3, r4, r3
 800f8d4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f8d8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f8dc:	bfd6      	itet	le
 800f8de:	f1c3 0320 	rsble	r3, r3, #32
 800f8e2:	ea43 0808 	orrgt.w	r8, r3, r8
 800f8e6:	fa08 f803 	lslle.w	r8, r8, r3
 800f8ea:	ee07 8a90 	vmov	s15, r8
 800f8ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f8f2:	3901      	subs	r1, #1
 800f8f4:	ee17 4a90 	vmov	r4, s15
 800f8f8:	ec53 2b17 	vmov	r2, r3, d7
 800f8fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f900:	2401      	movs	r4, #1
 800f902:	e7a3      	b.n	800f84c <_dtoa_r+0x10c>
 800f904:	2301      	movs	r3, #1
 800f906:	930b      	str	r3, [sp, #44]	; 0x2c
 800f908:	1a43      	subs	r3, r0, r1
 800f90a:	1e5a      	subs	r2, r3, #1
 800f90c:	bf45      	ittet	mi
 800f90e:	f1c3 0301 	rsbmi	r3, r3, #1
 800f912:	9304      	strmi	r3, [sp, #16]
 800f914:	2300      	movpl	r3, #0
 800f916:	2300      	movmi	r3, #0
 800f918:	9205      	str	r2, [sp, #20]
 800f91a:	bf54      	ite	pl
 800f91c:	9304      	strpl	r3, [sp, #16]
 800f91e:	9305      	strmi	r3, [sp, #20]
 800f920:	f1bb 0f00 	cmp.w	fp, #0
 800f924:	db18      	blt.n	800f958 <_dtoa_r+0x218>
 800f926:	9b05      	ldr	r3, [sp, #20]
 800f928:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f92c:	445b      	add	r3, fp
 800f92e:	9305      	str	r3, [sp, #20]
 800f930:	2300      	movs	r3, #0
 800f932:	9a06      	ldr	r2, [sp, #24]
 800f934:	2a09      	cmp	r2, #9
 800f936:	d849      	bhi.n	800f9cc <_dtoa_r+0x28c>
 800f938:	2a05      	cmp	r2, #5
 800f93a:	bfc4      	itt	gt
 800f93c:	3a04      	subgt	r2, #4
 800f93e:	9206      	strgt	r2, [sp, #24]
 800f940:	9a06      	ldr	r2, [sp, #24]
 800f942:	f1a2 0202 	sub.w	r2, r2, #2
 800f946:	bfcc      	ite	gt
 800f948:	2400      	movgt	r4, #0
 800f94a:	2401      	movle	r4, #1
 800f94c:	2a03      	cmp	r2, #3
 800f94e:	d848      	bhi.n	800f9e2 <_dtoa_r+0x2a2>
 800f950:	e8df f002 	tbb	[pc, r2]
 800f954:	3a2c2e0b 	.word	0x3a2c2e0b
 800f958:	9b04      	ldr	r3, [sp, #16]
 800f95a:	2200      	movs	r2, #0
 800f95c:	eba3 030b 	sub.w	r3, r3, fp
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	9209      	str	r2, [sp, #36]	; 0x24
 800f964:	f1cb 0300 	rsb	r3, fp, #0
 800f968:	e7e3      	b.n	800f932 <_dtoa_r+0x1f2>
 800f96a:	2200      	movs	r2, #0
 800f96c:	9207      	str	r2, [sp, #28]
 800f96e:	9a08      	ldr	r2, [sp, #32]
 800f970:	2a00      	cmp	r2, #0
 800f972:	dc39      	bgt.n	800f9e8 <_dtoa_r+0x2a8>
 800f974:	f04f 0a01 	mov.w	sl, #1
 800f978:	46d1      	mov	r9, sl
 800f97a:	4652      	mov	r2, sl
 800f97c:	f8cd a020 	str.w	sl, [sp, #32]
 800f980:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f982:	2100      	movs	r1, #0
 800f984:	6079      	str	r1, [r7, #4]
 800f986:	2004      	movs	r0, #4
 800f988:	f100 0c14 	add.w	ip, r0, #20
 800f98c:	4594      	cmp	ip, r2
 800f98e:	6879      	ldr	r1, [r7, #4]
 800f990:	d92f      	bls.n	800f9f2 <_dtoa_r+0x2b2>
 800f992:	4630      	mov	r0, r6
 800f994:	930d      	str	r3, [sp, #52]	; 0x34
 800f996:	f000 fd2d 	bl	80103f4 <_Balloc>
 800f99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f99c:	9001      	str	r0, [sp, #4]
 800f99e:	4602      	mov	r2, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d149      	bne.n	800fa38 <_dtoa_r+0x2f8>
 800f9a4:	4b23      	ldr	r3, [pc, #140]	; (800fa34 <_dtoa_r+0x2f4>)
 800f9a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f9aa:	e6e1      	b.n	800f770 <_dtoa_r+0x30>
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	e7dd      	b.n	800f96c <_dtoa_r+0x22c>
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	9207      	str	r2, [sp, #28]
 800f9b4:	9a08      	ldr	r2, [sp, #32]
 800f9b6:	eb0b 0a02 	add.w	sl, fp, r2
 800f9ba:	f10a 0901 	add.w	r9, sl, #1
 800f9be:	464a      	mov	r2, r9
 800f9c0:	2a01      	cmp	r2, #1
 800f9c2:	bfb8      	it	lt
 800f9c4:	2201      	movlt	r2, #1
 800f9c6:	e7db      	b.n	800f980 <_dtoa_r+0x240>
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	e7f2      	b.n	800f9b2 <_dtoa_r+0x272>
 800f9cc:	2401      	movs	r4, #1
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f9d4:	f04f 3aff 	mov.w	sl, #4294967295
 800f9d8:	2100      	movs	r1, #0
 800f9da:	46d1      	mov	r9, sl
 800f9dc:	2212      	movs	r2, #18
 800f9de:	9108      	str	r1, [sp, #32]
 800f9e0:	e7ce      	b.n	800f980 <_dtoa_r+0x240>
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	9207      	str	r2, [sp, #28]
 800f9e6:	e7f5      	b.n	800f9d4 <_dtoa_r+0x294>
 800f9e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f9ec:	46d1      	mov	r9, sl
 800f9ee:	4652      	mov	r2, sl
 800f9f0:	e7c6      	b.n	800f980 <_dtoa_r+0x240>
 800f9f2:	3101      	adds	r1, #1
 800f9f4:	6079      	str	r1, [r7, #4]
 800f9f6:	0040      	lsls	r0, r0, #1
 800f9f8:	e7c6      	b.n	800f988 <_dtoa_r+0x248>
 800f9fa:	bf00      	nop
 800f9fc:	f3af 8000 	nop.w
 800fa00:	636f4361 	.word	0x636f4361
 800fa04:	3fd287a7 	.word	0x3fd287a7
 800fa08:	8b60c8b3 	.word	0x8b60c8b3
 800fa0c:	3fc68a28 	.word	0x3fc68a28
 800fa10:	509f79fb 	.word	0x509f79fb
 800fa14:	3fd34413 	.word	0x3fd34413
 800fa18:	08011c61 	.word	0x08011c61
 800fa1c:	08011c78 	.word	0x08011c78
 800fa20:	7ff00000 	.word	0x7ff00000
 800fa24:	08011c5d 	.word	0x08011c5d
 800fa28:	08011c54 	.word	0x08011c54
 800fa2c:	08011c31 	.word	0x08011c31
 800fa30:	08011d68 	.word	0x08011d68
 800fa34:	08011cd3 	.word	0x08011cd3
 800fa38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800fa3a:	9901      	ldr	r1, [sp, #4]
 800fa3c:	6011      	str	r1, [r2, #0]
 800fa3e:	f1b9 0f0e 	cmp.w	r9, #14
 800fa42:	d86c      	bhi.n	800fb1e <_dtoa_r+0x3de>
 800fa44:	2c00      	cmp	r4, #0
 800fa46:	d06a      	beq.n	800fb1e <_dtoa_r+0x3de>
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	f340 80a0 	ble.w	800fb90 <_dtoa_r+0x450>
 800fa50:	49c1      	ldr	r1, [pc, #772]	; (800fd58 <_dtoa_r+0x618>)
 800fa52:	f00b 020f 	and.w	r2, fp, #15
 800fa56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800fa5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fa5e:	ed92 7b00 	vldr	d7, [r2]
 800fa62:	ea4f 112b 	mov.w	r1, fp, asr #4
 800fa66:	f000 8087 	beq.w	800fb78 <_dtoa_r+0x438>
 800fa6a:	4abc      	ldr	r2, [pc, #752]	; (800fd5c <_dtoa_r+0x61c>)
 800fa6c:	ed92 6b08 	vldr	d6, [r2, #32]
 800fa70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fa74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fa78:	f001 010f 	and.w	r1, r1, #15
 800fa7c:	2203      	movs	r2, #3
 800fa7e:	48b7      	ldr	r0, [pc, #732]	; (800fd5c <_dtoa_r+0x61c>)
 800fa80:	2900      	cmp	r1, #0
 800fa82:	d17b      	bne.n	800fb7c <_dtoa_r+0x43c>
 800fa84:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fa88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fa8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa92:	2900      	cmp	r1, #0
 800fa94:	f000 80a2 	beq.w	800fbdc <_dtoa_r+0x49c>
 800fa98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fa9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faa0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800faa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa8:	f140 8098 	bpl.w	800fbdc <_dtoa_r+0x49c>
 800faac:	f1b9 0f00 	cmp.w	r9, #0
 800fab0:	f000 8094 	beq.w	800fbdc <_dtoa_r+0x49c>
 800fab4:	f1ba 0f00 	cmp.w	sl, #0
 800fab8:	dd2f      	ble.n	800fb1a <_dtoa_r+0x3da>
 800faba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800fabe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fac2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fac6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800faca:	3201      	adds	r2, #1
 800facc:	4650      	mov	r0, sl
 800face:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fad2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800fad6:	ee07 2a90 	vmov	s15, r2
 800fada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fade:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fae2:	ee15 4a90 	vmov	r4, s11
 800fae6:	ec52 1b15 	vmov	r1, r2, d5
 800faea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800faee:	2800      	cmp	r0, #0
 800faf0:	d177      	bne.n	800fbe2 <_dtoa_r+0x4a2>
 800faf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800faf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fafa:	ec42 1b17 	vmov	d7, r1, r2
 800fafe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb06:	f300 8263 	bgt.w	800ffd0 <_dtoa_r+0x890>
 800fb0a:	eeb1 7b47 	vneg.f64	d7, d7
 800fb0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb16:	f100 8258 	bmi.w	800ffca <_dtoa_r+0x88a>
 800fb1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fb1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb20:	2a00      	cmp	r2, #0
 800fb22:	f2c0 811d 	blt.w	800fd60 <_dtoa_r+0x620>
 800fb26:	f1bb 0f0e 	cmp.w	fp, #14
 800fb2a:	f300 8119 	bgt.w	800fd60 <_dtoa_r+0x620>
 800fb2e:	4b8a      	ldr	r3, [pc, #552]	; (800fd58 <_dtoa_r+0x618>)
 800fb30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb34:	ed93 6b00 	vldr	d6, [r3]
 800fb38:	9b08      	ldr	r3, [sp, #32]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f280 80b7 	bge.w	800fcae <_dtoa_r+0x56e>
 800fb40:	f1b9 0f00 	cmp.w	r9, #0
 800fb44:	f300 80b3 	bgt.w	800fcae <_dtoa_r+0x56e>
 800fb48:	f040 823f 	bne.w	800ffca <_dtoa_r+0x88a>
 800fb4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fb50:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fb54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb60:	464c      	mov	r4, r9
 800fb62:	464f      	mov	r7, r9
 800fb64:	f280 8215 	bge.w	800ff92 <_dtoa_r+0x852>
 800fb68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fb6c:	2331      	movs	r3, #49	; 0x31
 800fb6e:	f808 3b01 	strb.w	r3, [r8], #1
 800fb72:	f10b 0b01 	add.w	fp, fp, #1
 800fb76:	e211      	b.n	800ff9c <_dtoa_r+0x85c>
 800fb78:	2202      	movs	r2, #2
 800fb7a:	e780      	b.n	800fa7e <_dtoa_r+0x33e>
 800fb7c:	07cc      	lsls	r4, r1, #31
 800fb7e:	d504      	bpl.n	800fb8a <_dtoa_r+0x44a>
 800fb80:	ed90 6b00 	vldr	d6, [r0]
 800fb84:	3201      	adds	r2, #1
 800fb86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fb8a:	1049      	asrs	r1, r1, #1
 800fb8c:	3008      	adds	r0, #8
 800fb8e:	e777      	b.n	800fa80 <_dtoa_r+0x340>
 800fb90:	d022      	beq.n	800fbd8 <_dtoa_r+0x498>
 800fb92:	f1cb 0100 	rsb	r1, fp, #0
 800fb96:	4a70      	ldr	r2, [pc, #448]	; (800fd58 <_dtoa_r+0x618>)
 800fb98:	f001 000f 	and.w	r0, r1, #15
 800fb9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fba0:	ed92 7b00 	vldr	d7, [r2]
 800fba4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fbac:	486b      	ldr	r0, [pc, #428]	; (800fd5c <_dtoa_r+0x61c>)
 800fbae:	1109      	asrs	r1, r1, #4
 800fbb0:	2400      	movs	r4, #0
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	b929      	cbnz	r1, 800fbc2 <_dtoa_r+0x482>
 800fbb6:	2c00      	cmp	r4, #0
 800fbb8:	f43f af6a 	beq.w	800fa90 <_dtoa_r+0x350>
 800fbbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fbc0:	e766      	b.n	800fa90 <_dtoa_r+0x350>
 800fbc2:	07cf      	lsls	r7, r1, #31
 800fbc4:	d505      	bpl.n	800fbd2 <_dtoa_r+0x492>
 800fbc6:	ed90 6b00 	vldr	d6, [r0]
 800fbca:	3201      	adds	r2, #1
 800fbcc:	2401      	movs	r4, #1
 800fbce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fbd2:	1049      	asrs	r1, r1, #1
 800fbd4:	3008      	adds	r0, #8
 800fbd6:	e7ed      	b.n	800fbb4 <_dtoa_r+0x474>
 800fbd8:	2202      	movs	r2, #2
 800fbda:	e759      	b.n	800fa90 <_dtoa_r+0x350>
 800fbdc:	465f      	mov	r7, fp
 800fbde:	4648      	mov	r0, r9
 800fbe0:	e775      	b.n	800face <_dtoa_r+0x38e>
 800fbe2:	ec42 1b17 	vmov	d7, r1, r2
 800fbe6:	4a5c      	ldr	r2, [pc, #368]	; (800fd58 <_dtoa_r+0x618>)
 800fbe8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fbec:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fbf0:	9a01      	ldr	r2, [sp, #4]
 800fbf2:	1814      	adds	r4, r2, r0
 800fbf4:	9a07      	ldr	r2, [sp, #28]
 800fbf6:	b352      	cbz	r2, 800fc4e <_dtoa_r+0x50e>
 800fbf8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800fbfc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800fc00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fc08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fc0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fc10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fc14:	ee14 2a90 	vmov	r2, s9
 800fc18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fc1c:	3230      	adds	r2, #48	; 0x30
 800fc1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fc22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2a:	f808 2b01 	strb.w	r2, [r8], #1
 800fc2e:	d439      	bmi.n	800fca4 <_dtoa_r+0x564>
 800fc30:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fc34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3c:	d472      	bmi.n	800fd24 <_dtoa_r+0x5e4>
 800fc3e:	45a0      	cmp	r8, r4
 800fc40:	f43f af6b 	beq.w	800fb1a <_dtoa_r+0x3da>
 800fc44:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fc48:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fc4c:	e7e0      	b.n	800fc10 <_dtoa_r+0x4d0>
 800fc4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc52:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fc56:	4621      	mov	r1, r4
 800fc58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fc5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fc60:	ee14 2a90 	vmov	r2, s9
 800fc64:	3230      	adds	r2, #48	; 0x30
 800fc66:	f808 2b01 	strb.w	r2, [r8], #1
 800fc6a:	45a0      	cmp	r8, r4
 800fc6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fc70:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fc74:	d118      	bne.n	800fca8 <_dtoa_r+0x568>
 800fc76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fc7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fc7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc86:	dc4d      	bgt.n	800fd24 <_dtoa_r+0x5e4>
 800fc88:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fc8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc94:	f57f af41 	bpl.w	800fb1a <_dtoa_r+0x3da>
 800fc98:	4688      	mov	r8, r1
 800fc9a:	3901      	subs	r1, #1
 800fc9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800fca0:	2b30      	cmp	r3, #48	; 0x30
 800fca2:	d0f9      	beq.n	800fc98 <_dtoa_r+0x558>
 800fca4:	46bb      	mov	fp, r7
 800fca6:	e02a      	b.n	800fcfe <_dtoa_r+0x5be>
 800fca8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fcac:	e7d6      	b.n	800fc5c <_dtoa_r+0x51c>
 800fcae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800fcb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fcba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fcbe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fcc2:	ee15 3a10 	vmov	r3, s10
 800fcc6:	3330      	adds	r3, #48	; 0x30
 800fcc8:	f808 3b01 	strb.w	r3, [r8], #1
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	eba8 0303 	sub.w	r3, r8, r3
 800fcd2:	4599      	cmp	r9, r3
 800fcd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fcd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fcdc:	d133      	bne.n	800fd46 <_dtoa_r+0x606>
 800fcde:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fce2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcea:	dc1a      	bgt.n	800fd22 <_dtoa_r+0x5e2>
 800fcec:	eeb4 7b46 	vcmp.f64	d7, d6
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	d103      	bne.n	800fcfe <_dtoa_r+0x5be>
 800fcf6:	ee15 3a10 	vmov	r3, s10
 800fcfa:	07d9      	lsls	r1, r3, #31
 800fcfc:	d411      	bmi.n	800fd22 <_dtoa_r+0x5e2>
 800fcfe:	4629      	mov	r1, r5
 800fd00:	4630      	mov	r0, r6
 800fd02:	f000 fbb7 	bl	8010474 <_Bfree>
 800fd06:	2300      	movs	r3, #0
 800fd08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd0a:	f888 3000 	strb.w	r3, [r8]
 800fd0e:	f10b 0301 	add.w	r3, fp, #1
 800fd12:	6013      	str	r3, [r2, #0]
 800fd14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f43f ad61 	beq.w	800f7de <_dtoa_r+0x9e>
 800fd1c:	f8c3 8000 	str.w	r8, [r3]
 800fd20:	e55d      	b.n	800f7de <_dtoa_r+0x9e>
 800fd22:	465f      	mov	r7, fp
 800fd24:	4643      	mov	r3, r8
 800fd26:	4698      	mov	r8, r3
 800fd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd2c:	2a39      	cmp	r2, #57	; 0x39
 800fd2e:	d106      	bne.n	800fd3e <_dtoa_r+0x5fe>
 800fd30:	9a01      	ldr	r2, [sp, #4]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d1f7      	bne.n	800fd26 <_dtoa_r+0x5e6>
 800fd36:	9901      	ldr	r1, [sp, #4]
 800fd38:	2230      	movs	r2, #48	; 0x30
 800fd3a:	3701      	adds	r7, #1
 800fd3c:	700a      	strb	r2, [r1, #0]
 800fd3e:	781a      	ldrb	r2, [r3, #0]
 800fd40:	3201      	adds	r2, #1
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	e7ae      	b.n	800fca4 <_dtoa_r+0x564>
 800fd46:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fd4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	d1b2      	bne.n	800fcba <_dtoa_r+0x57a>
 800fd54:	e7d3      	b.n	800fcfe <_dtoa_r+0x5be>
 800fd56:	bf00      	nop
 800fd58:	08011d68 	.word	0x08011d68
 800fd5c:	08011d40 	.word	0x08011d40
 800fd60:	9907      	ldr	r1, [sp, #28]
 800fd62:	2900      	cmp	r1, #0
 800fd64:	f000 80d0 	beq.w	800ff08 <_dtoa_r+0x7c8>
 800fd68:	9906      	ldr	r1, [sp, #24]
 800fd6a:	2901      	cmp	r1, #1
 800fd6c:	f300 80b4 	bgt.w	800fed8 <_dtoa_r+0x798>
 800fd70:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd72:	2900      	cmp	r1, #0
 800fd74:	f000 80ac 	beq.w	800fed0 <_dtoa_r+0x790>
 800fd78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fd7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fd80:	461c      	mov	r4, r3
 800fd82:	930a      	str	r3, [sp, #40]	; 0x28
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	4413      	add	r3, r2
 800fd88:	9304      	str	r3, [sp, #16]
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	4413      	add	r3, r2
 800fd90:	4630      	mov	r0, r6
 800fd92:	9305      	str	r3, [sp, #20]
 800fd94:	f000 fc26 	bl	80105e4 <__i2b>
 800fd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd9a:	4607      	mov	r7, r0
 800fd9c:	f1b8 0f00 	cmp.w	r8, #0
 800fda0:	dd0d      	ble.n	800fdbe <_dtoa_r+0x67e>
 800fda2:	9a05      	ldr	r2, [sp, #20]
 800fda4:	2a00      	cmp	r2, #0
 800fda6:	dd0a      	ble.n	800fdbe <_dtoa_r+0x67e>
 800fda8:	4542      	cmp	r2, r8
 800fdaa:	9904      	ldr	r1, [sp, #16]
 800fdac:	bfa8      	it	ge
 800fdae:	4642      	movge	r2, r8
 800fdb0:	1a89      	subs	r1, r1, r2
 800fdb2:	9104      	str	r1, [sp, #16]
 800fdb4:	9905      	ldr	r1, [sp, #20]
 800fdb6:	eba8 0802 	sub.w	r8, r8, r2
 800fdba:	1a8a      	subs	r2, r1, r2
 800fdbc:	9205      	str	r2, [sp, #20]
 800fdbe:	b303      	cbz	r3, 800fe02 <_dtoa_r+0x6c2>
 800fdc0:	9a07      	ldr	r2, [sp, #28]
 800fdc2:	2a00      	cmp	r2, #0
 800fdc4:	f000 80a5 	beq.w	800ff12 <_dtoa_r+0x7d2>
 800fdc8:	2c00      	cmp	r4, #0
 800fdca:	dd13      	ble.n	800fdf4 <_dtoa_r+0x6b4>
 800fdcc:	4639      	mov	r1, r7
 800fdce:	4622      	mov	r2, r4
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	930d      	str	r3, [sp, #52]	; 0x34
 800fdd4:	f000 fcc6 	bl	8010764 <__pow5mult>
 800fdd8:	462a      	mov	r2, r5
 800fdda:	4601      	mov	r1, r0
 800fddc:	4607      	mov	r7, r0
 800fdde:	4630      	mov	r0, r6
 800fde0:	f000 fc16 	bl	8010610 <__multiply>
 800fde4:	4629      	mov	r1, r5
 800fde6:	900a      	str	r0, [sp, #40]	; 0x28
 800fde8:	4630      	mov	r0, r6
 800fdea:	f000 fb43 	bl	8010474 <_Bfree>
 800fdee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdf2:	4615      	mov	r5, r2
 800fdf4:	1b1a      	subs	r2, r3, r4
 800fdf6:	d004      	beq.n	800fe02 <_dtoa_r+0x6c2>
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f000 fcb2 	bl	8010764 <__pow5mult>
 800fe00:	4605      	mov	r5, r0
 800fe02:	2101      	movs	r1, #1
 800fe04:	4630      	mov	r0, r6
 800fe06:	f000 fbed 	bl	80105e4 <__i2b>
 800fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	f340 8081 	ble.w	800ff16 <_dtoa_r+0x7d6>
 800fe14:	461a      	mov	r2, r3
 800fe16:	4601      	mov	r1, r0
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f000 fca3 	bl	8010764 <__pow5mult>
 800fe1e:	9b06      	ldr	r3, [sp, #24]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	4604      	mov	r4, r0
 800fe24:	dd7a      	ble.n	800ff1c <_dtoa_r+0x7dc>
 800fe26:	2300      	movs	r3, #0
 800fe28:	930a      	str	r3, [sp, #40]	; 0x28
 800fe2a:	6922      	ldr	r2, [r4, #16]
 800fe2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fe30:	6910      	ldr	r0, [r2, #16]
 800fe32:	f000 fb87 	bl	8010544 <__hi0bits>
 800fe36:	f1c0 0020 	rsb	r0, r0, #32
 800fe3a:	9b05      	ldr	r3, [sp, #20]
 800fe3c:	4418      	add	r0, r3
 800fe3e:	f010 001f 	ands.w	r0, r0, #31
 800fe42:	f000 808c 	beq.w	800ff5e <_dtoa_r+0x81e>
 800fe46:	f1c0 0220 	rsb	r2, r0, #32
 800fe4a:	2a04      	cmp	r2, #4
 800fe4c:	f340 8085 	ble.w	800ff5a <_dtoa_r+0x81a>
 800fe50:	f1c0 001c 	rsb	r0, r0, #28
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	4403      	add	r3, r0
 800fe58:	9304      	str	r3, [sp, #16]
 800fe5a:	9b05      	ldr	r3, [sp, #20]
 800fe5c:	4403      	add	r3, r0
 800fe5e:	4480      	add	r8, r0
 800fe60:	9305      	str	r3, [sp, #20]
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd05      	ble.n	800fe74 <_dtoa_r+0x734>
 800fe68:	4629      	mov	r1, r5
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f000 fcd3 	bl	8010818 <__lshift>
 800fe72:	4605      	mov	r5, r0
 800fe74:	9b05      	ldr	r3, [sp, #20]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dd05      	ble.n	800fe86 <_dtoa_r+0x746>
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f000 fcca 	bl	8010818 <__lshift>
 800fe84:	4604      	mov	r4, r0
 800fe86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d06a      	beq.n	800ff62 <_dtoa_r+0x822>
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 fd32 	bl	80108f8 <__mcmp>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	da64      	bge.n	800ff62 <_dtoa_r+0x822>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	220a      	movs	r2, #10
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f000 fb0a 	bl	80104b8 <__multadd>
 800fea4:	9b07      	ldr	r3, [sp, #28]
 800fea6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800feaa:	4605      	mov	r5, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 8191 	beq.w	80101d4 <_dtoa_r+0xa94>
 800feb2:	4639      	mov	r1, r7
 800feb4:	2300      	movs	r3, #0
 800feb6:	220a      	movs	r2, #10
 800feb8:	4630      	mov	r0, r6
 800feba:	f000 fafd 	bl	80104b8 <__multadd>
 800febe:	f1ba 0f00 	cmp.w	sl, #0
 800fec2:	4607      	mov	r7, r0
 800fec4:	f300 808d 	bgt.w	800ffe2 <_dtoa_r+0x8a2>
 800fec8:	9b06      	ldr	r3, [sp, #24]
 800feca:	2b02      	cmp	r3, #2
 800fecc:	dc50      	bgt.n	800ff70 <_dtoa_r+0x830>
 800fece:	e088      	b.n	800ffe2 <_dtoa_r+0x8a2>
 800fed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fed2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fed6:	e751      	b.n	800fd7c <_dtoa_r+0x63c>
 800fed8:	f109 34ff 	add.w	r4, r9, #4294967295
 800fedc:	42a3      	cmp	r3, r4
 800fede:	bfbf      	itttt	lt
 800fee0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800fee2:	1ae3      	sublt	r3, r4, r3
 800fee4:	18d2      	addlt	r2, r2, r3
 800fee6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800fee8:	bfb6      	itet	lt
 800feea:	4623      	movlt	r3, r4
 800feec:	1b1c      	subge	r4, r3, r4
 800feee:	2400      	movlt	r4, #0
 800fef0:	f1b9 0f00 	cmp.w	r9, #0
 800fef4:	bfb5      	itete	lt
 800fef6:	9a04      	ldrlt	r2, [sp, #16]
 800fef8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800fefc:	eba2 0809 	sublt.w	r8, r2, r9
 800ff00:	464a      	movge	r2, r9
 800ff02:	bfb8      	it	lt
 800ff04:	2200      	movlt	r2, #0
 800ff06:	e73c      	b.n	800fd82 <_dtoa_r+0x642>
 800ff08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ff0c:	9f07      	ldr	r7, [sp, #28]
 800ff0e:	461c      	mov	r4, r3
 800ff10:	e744      	b.n	800fd9c <_dtoa_r+0x65c>
 800ff12:	461a      	mov	r2, r3
 800ff14:	e770      	b.n	800fdf8 <_dtoa_r+0x6b8>
 800ff16:	9b06      	ldr	r3, [sp, #24]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	dc18      	bgt.n	800ff4e <_dtoa_r+0x80e>
 800ff1c:	9b02      	ldr	r3, [sp, #8]
 800ff1e:	b9b3      	cbnz	r3, 800ff4e <_dtoa_r+0x80e>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ff26:	b9a2      	cbnz	r2, 800ff52 <_dtoa_r+0x812>
 800ff28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ff2c:	0d12      	lsrs	r2, r2, #20
 800ff2e:	0512      	lsls	r2, r2, #20
 800ff30:	b18a      	cbz	r2, 800ff56 <_dtoa_r+0x816>
 800ff32:	9b04      	ldr	r3, [sp, #16]
 800ff34:	3301      	adds	r3, #1
 800ff36:	9304      	str	r3, [sp, #16]
 800ff38:	9b05      	ldr	r3, [sp, #20]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	9305      	str	r3, [sp, #20]
 800ff3e:	2301      	movs	r3, #1
 800ff40:	930a      	str	r3, [sp, #40]	; 0x28
 800ff42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f47f af70 	bne.w	800fe2a <_dtoa_r+0x6ea>
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	e775      	b.n	800fe3a <_dtoa_r+0x6fa>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	e7f6      	b.n	800ff40 <_dtoa_r+0x800>
 800ff52:	9b02      	ldr	r3, [sp, #8]
 800ff54:	e7f4      	b.n	800ff40 <_dtoa_r+0x800>
 800ff56:	920a      	str	r2, [sp, #40]	; 0x28
 800ff58:	e7f3      	b.n	800ff42 <_dtoa_r+0x802>
 800ff5a:	d082      	beq.n	800fe62 <_dtoa_r+0x722>
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	301c      	adds	r0, #28
 800ff60:	e778      	b.n	800fe54 <_dtoa_r+0x714>
 800ff62:	f1b9 0f00 	cmp.w	r9, #0
 800ff66:	dc37      	bgt.n	800ffd8 <_dtoa_r+0x898>
 800ff68:	9b06      	ldr	r3, [sp, #24]
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	dd34      	ble.n	800ffd8 <_dtoa_r+0x898>
 800ff6e:	46ca      	mov	sl, r9
 800ff70:	f1ba 0f00 	cmp.w	sl, #0
 800ff74:	d10d      	bne.n	800ff92 <_dtoa_r+0x852>
 800ff76:	4621      	mov	r1, r4
 800ff78:	4653      	mov	r3, sl
 800ff7a:	2205      	movs	r2, #5
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f000 fa9b 	bl	80104b8 <__multadd>
 800ff82:	4601      	mov	r1, r0
 800ff84:	4604      	mov	r4, r0
 800ff86:	4628      	mov	r0, r5
 800ff88:	f000 fcb6 	bl	80108f8 <__mcmp>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f73f adeb 	bgt.w	800fb68 <_dtoa_r+0x428>
 800ff92:	9b08      	ldr	r3, [sp, #32]
 800ff94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff98:	ea6f 0b03 	mvn.w	fp, r3
 800ff9c:	f04f 0900 	mov.w	r9, #0
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f000 fa66 	bl	8010474 <_Bfree>
 800ffa8:	2f00      	cmp	r7, #0
 800ffaa:	f43f aea8 	beq.w	800fcfe <_dtoa_r+0x5be>
 800ffae:	f1b9 0f00 	cmp.w	r9, #0
 800ffb2:	d005      	beq.n	800ffc0 <_dtoa_r+0x880>
 800ffb4:	45b9      	cmp	r9, r7
 800ffb6:	d003      	beq.n	800ffc0 <_dtoa_r+0x880>
 800ffb8:	4649      	mov	r1, r9
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f000 fa5a 	bl	8010474 <_Bfree>
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f000 fa56 	bl	8010474 <_Bfree>
 800ffc8:	e699      	b.n	800fcfe <_dtoa_r+0x5be>
 800ffca:	2400      	movs	r4, #0
 800ffcc:	4627      	mov	r7, r4
 800ffce:	e7e0      	b.n	800ff92 <_dtoa_r+0x852>
 800ffd0:	46bb      	mov	fp, r7
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	e5c7      	b.n	800fb68 <_dtoa_r+0x428>
 800ffd8:	9b07      	ldr	r3, [sp, #28]
 800ffda:	46ca      	mov	sl, r9
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f000 8100 	beq.w	80101e2 <_dtoa_r+0xaa2>
 800ffe2:	f1b8 0f00 	cmp.w	r8, #0
 800ffe6:	dd05      	ble.n	800fff4 <_dtoa_r+0x8b4>
 800ffe8:	4639      	mov	r1, r7
 800ffea:	4642      	mov	r2, r8
 800ffec:	4630      	mov	r0, r6
 800ffee:	f000 fc13 	bl	8010818 <__lshift>
 800fff2:	4607      	mov	r7, r0
 800fff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d05d      	beq.n	80100b6 <_dtoa_r+0x976>
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	4630      	mov	r0, r6
 800fffe:	f000 f9f9 	bl	80103f4 <_Balloc>
 8010002:	4680      	mov	r8, r0
 8010004:	b928      	cbnz	r0, 8010012 <_dtoa_r+0x8d2>
 8010006:	4b82      	ldr	r3, [pc, #520]	; (8010210 <_dtoa_r+0xad0>)
 8010008:	4602      	mov	r2, r0
 801000a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801000e:	f7ff bbaf 	b.w	800f770 <_dtoa_r+0x30>
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	3202      	adds	r2, #2
 8010016:	0092      	lsls	r2, r2, #2
 8010018:	f107 010c 	add.w	r1, r7, #12
 801001c:	300c      	adds	r0, #12
 801001e:	f7fe fc77 	bl	800e910 <memcpy>
 8010022:	2201      	movs	r2, #1
 8010024:	4641      	mov	r1, r8
 8010026:	4630      	mov	r0, r6
 8010028:	f000 fbf6 	bl	8010818 <__lshift>
 801002c:	9b01      	ldr	r3, [sp, #4]
 801002e:	3301      	adds	r3, #1
 8010030:	9304      	str	r3, [sp, #16]
 8010032:	9b01      	ldr	r3, [sp, #4]
 8010034:	4453      	add	r3, sl
 8010036:	9308      	str	r3, [sp, #32]
 8010038:	9b02      	ldr	r3, [sp, #8]
 801003a:	f003 0301 	and.w	r3, r3, #1
 801003e:	46b9      	mov	r9, r7
 8010040:	9307      	str	r3, [sp, #28]
 8010042:	4607      	mov	r7, r0
 8010044:	9b04      	ldr	r3, [sp, #16]
 8010046:	4621      	mov	r1, r4
 8010048:	3b01      	subs	r3, #1
 801004a:	4628      	mov	r0, r5
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	f7ff faeb 	bl	800f628 <quorem>
 8010052:	4603      	mov	r3, r0
 8010054:	3330      	adds	r3, #48	; 0x30
 8010056:	9005      	str	r0, [sp, #20]
 8010058:	4649      	mov	r1, r9
 801005a:	4628      	mov	r0, r5
 801005c:	9309      	str	r3, [sp, #36]	; 0x24
 801005e:	f000 fc4b 	bl	80108f8 <__mcmp>
 8010062:	463a      	mov	r2, r7
 8010064:	4682      	mov	sl, r0
 8010066:	4621      	mov	r1, r4
 8010068:	4630      	mov	r0, r6
 801006a:	f000 fc61 	bl	8010930 <__mdiff>
 801006e:	68c2      	ldr	r2, [r0, #12]
 8010070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010072:	4680      	mov	r8, r0
 8010074:	bb0a      	cbnz	r2, 80100ba <_dtoa_r+0x97a>
 8010076:	4601      	mov	r1, r0
 8010078:	4628      	mov	r0, r5
 801007a:	f000 fc3d 	bl	80108f8 <__mcmp>
 801007e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010080:	4602      	mov	r2, r0
 8010082:	4641      	mov	r1, r8
 8010084:	4630      	mov	r0, r6
 8010086:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801008a:	f000 f9f3 	bl	8010474 <_Bfree>
 801008e:	9b06      	ldr	r3, [sp, #24]
 8010090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010092:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010096:	ea43 0102 	orr.w	r1, r3, r2
 801009a:	9b07      	ldr	r3, [sp, #28]
 801009c:	430b      	orrs	r3, r1
 801009e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a0:	d10d      	bne.n	80100be <_dtoa_r+0x97e>
 80100a2:	2b39      	cmp	r3, #57	; 0x39
 80100a4:	d029      	beq.n	80100fa <_dtoa_r+0x9ba>
 80100a6:	f1ba 0f00 	cmp.w	sl, #0
 80100aa:	dd01      	ble.n	80100b0 <_dtoa_r+0x970>
 80100ac:	9b05      	ldr	r3, [sp, #20]
 80100ae:	3331      	adds	r3, #49	; 0x31
 80100b0:	9a02      	ldr	r2, [sp, #8]
 80100b2:	7013      	strb	r3, [r2, #0]
 80100b4:	e774      	b.n	800ffa0 <_dtoa_r+0x860>
 80100b6:	4638      	mov	r0, r7
 80100b8:	e7b8      	b.n	801002c <_dtoa_r+0x8ec>
 80100ba:	2201      	movs	r2, #1
 80100bc:	e7e1      	b.n	8010082 <_dtoa_r+0x942>
 80100be:	f1ba 0f00 	cmp.w	sl, #0
 80100c2:	db06      	blt.n	80100d2 <_dtoa_r+0x992>
 80100c4:	9906      	ldr	r1, [sp, #24]
 80100c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80100ca:	9907      	ldr	r1, [sp, #28]
 80100cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80100d0:	d120      	bne.n	8010114 <_dtoa_r+0x9d4>
 80100d2:	2a00      	cmp	r2, #0
 80100d4:	ddec      	ble.n	80100b0 <_dtoa_r+0x970>
 80100d6:	4629      	mov	r1, r5
 80100d8:	2201      	movs	r2, #1
 80100da:	4630      	mov	r0, r6
 80100dc:	9304      	str	r3, [sp, #16]
 80100de:	f000 fb9b 	bl	8010818 <__lshift>
 80100e2:	4621      	mov	r1, r4
 80100e4:	4605      	mov	r5, r0
 80100e6:	f000 fc07 	bl	80108f8 <__mcmp>
 80100ea:	2800      	cmp	r0, #0
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	dc02      	bgt.n	80100f6 <_dtoa_r+0x9b6>
 80100f0:	d1de      	bne.n	80100b0 <_dtoa_r+0x970>
 80100f2:	07da      	lsls	r2, r3, #31
 80100f4:	d5dc      	bpl.n	80100b0 <_dtoa_r+0x970>
 80100f6:	2b39      	cmp	r3, #57	; 0x39
 80100f8:	d1d8      	bne.n	80100ac <_dtoa_r+0x96c>
 80100fa:	9a02      	ldr	r2, [sp, #8]
 80100fc:	2339      	movs	r3, #57	; 0x39
 80100fe:	7013      	strb	r3, [r2, #0]
 8010100:	4643      	mov	r3, r8
 8010102:	4698      	mov	r8, r3
 8010104:	3b01      	subs	r3, #1
 8010106:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801010a:	2a39      	cmp	r2, #57	; 0x39
 801010c:	d051      	beq.n	80101b2 <_dtoa_r+0xa72>
 801010e:	3201      	adds	r2, #1
 8010110:	701a      	strb	r2, [r3, #0]
 8010112:	e745      	b.n	800ffa0 <_dtoa_r+0x860>
 8010114:	2a00      	cmp	r2, #0
 8010116:	dd03      	ble.n	8010120 <_dtoa_r+0x9e0>
 8010118:	2b39      	cmp	r3, #57	; 0x39
 801011a:	d0ee      	beq.n	80100fa <_dtoa_r+0x9ba>
 801011c:	3301      	adds	r3, #1
 801011e:	e7c7      	b.n	80100b0 <_dtoa_r+0x970>
 8010120:	9a04      	ldr	r2, [sp, #16]
 8010122:	9908      	ldr	r1, [sp, #32]
 8010124:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010128:	428a      	cmp	r2, r1
 801012a:	d02b      	beq.n	8010184 <_dtoa_r+0xa44>
 801012c:	4629      	mov	r1, r5
 801012e:	2300      	movs	r3, #0
 8010130:	220a      	movs	r2, #10
 8010132:	4630      	mov	r0, r6
 8010134:	f000 f9c0 	bl	80104b8 <__multadd>
 8010138:	45b9      	cmp	r9, r7
 801013a:	4605      	mov	r5, r0
 801013c:	f04f 0300 	mov.w	r3, #0
 8010140:	f04f 020a 	mov.w	r2, #10
 8010144:	4649      	mov	r1, r9
 8010146:	4630      	mov	r0, r6
 8010148:	d107      	bne.n	801015a <_dtoa_r+0xa1a>
 801014a:	f000 f9b5 	bl	80104b8 <__multadd>
 801014e:	4681      	mov	r9, r0
 8010150:	4607      	mov	r7, r0
 8010152:	9b04      	ldr	r3, [sp, #16]
 8010154:	3301      	adds	r3, #1
 8010156:	9304      	str	r3, [sp, #16]
 8010158:	e774      	b.n	8010044 <_dtoa_r+0x904>
 801015a:	f000 f9ad 	bl	80104b8 <__multadd>
 801015e:	4639      	mov	r1, r7
 8010160:	4681      	mov	r9, r0
 8010162:	2300      	movs	r3, #0
 8010164:	220a      	movs	r2, #10
 8010166:	4630      	mov	r0, r6
 8010168:	f000 f9a6 	bl	80104b8 <__multadd>
 801016c:	4607      	mov	r7, r0
 801016e:	e7f0      	b.n	8010152 <_dtoa_r+0xa12>
 8010170:	f1ba 0f00 	cmp.w	sl, #0
 8010174:	9a01      	ldr	r2, [sp, #4]
 8010176:	bfcc      	ite	gt
 8010178:	46d0      	movgt	r8, sl
 801017a:	f04f 0801 	movle.w	r8, #1
 801017e:	4490      	add	r8, r2
 8010180:	f04f 0900 	mov.w	r9, #0
 8010184:	4629      	mov	r1, r5
 8010186:	2201      	movs	r2, #1
 8010188:	4630      	mov	r0, r6
 801018a:	9302      	str	r3, [sp, #8]
 801018c:	f000 fb44 	bl	8010818 <__lshift>
 8010190:	4621      	mov	r1, r4
 8010192:	4605      	mov	r5, r0
 8010194:	f000 fbb0 	bl	80108f8 <__mcmp>
 8010198:	2800      	cmp	r0, #0
 801019a:	dcb1      	bgt.n	8010100 <_dtoa_r+0x9c0>
 801019c:	d102      	bne.n	80101a4 <_dtoa_r+0xa64>
 801019e:	9b02      	ldr	r3, [sp, #8]
 80101a0:	07db      	lsls	r3, r3, #31
 80101a2:	d4ad      	bmi.n	8010100 <_dtoa_r+0x9c0>
 80101a4:	4643      	mov	r3, r8
 80101a6:	4698      	mov	r8, r3
 80101a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101ac:	2a30      	cmp	r2, #48	; 0x30
 80101ae:	d0fa      	beq.n	80101a6 <_dtoa_r+0xa66>
 80101b0:	e6f6      	b.n	800ffa0 <_dtoa_r+0x860>
 80101b2:	9a01      	ldr	r2, [sp, #4]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d1a4      	bne.n	8010102 <_dtoa_r+0x9c2>
 80101b8:	f10b 0b01 	add.w	fp, fp, #1
 80101bc:	2331      	movs	r3, #49	; 0x31
 80101be:	e778      	b.n	80100b2 <_dtoa_r+0x972>
 80101c0:	4b14      	ldr	r3, [pc, #80]	; (8010214 <_dtoa_r+0xad4>)
 80101c2:	f7ff bb27 	b.w	800f814 <_dtoa_r+0xd4>
 80101c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f47f ab03 	bne.w	800f7d4 <_dtoa_r+0x94>
 80101ce:	4b12      	ldr	r3, [pc, #72]	; (8010218 <_dtoa_r+0xad8>)
 80101d0:	f7ff bb20 	b.w	800f814 <_dtoa_r+0xd4>
 80101d4:	f1ba 0f00 	cmp.w	sl, #0
 80101d8:	dc03      	bgt.n	80101e2 <_dtoa_r+0xaa2>
 80101da:	9b06      	ldr	r3, [sp, #24]
 80101dc:	2b02      	cmp	r3, #2
 80101de:	f73f aec7 	bgt.w	800ff70 <_dtoa_r+0x830>
 80101e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80101e6:	4621      	mov	r1, r4
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7ff fa1d 	bl	800f628 <quorem>
 80101ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80101f2:	f808 3b01 	strb.w	r3, [r8], #1
 80101f6:	9a01      	ldr	r2, [sp, #4]
 80101f8:	eba8 0202 	sub.w	r2, r8, r2
 80101fc:	4592      	cmp	sl, r2
 80101fe:	ddb7      	ble.n	8010170 <_dtoa_r+0xa30>
 8010200:	4629      	mov	r1, r5
 8010202:	2300      	movs	r3, #0
 8010204:	220a      	movs	r2, #10
 8010206:	4630      	mov	r0, r6
 8010208:	f000 f956 	bl	80104b8 <__multadd>
 801020c:	4605      	mov	r5, r0
 801020e:	e7ea      	b.n	80101e6 <_dtoa_r+0xaa6>
 8010210:	08011cd3 	.word	0x08011cd3
 8010214:	08011c30 	.word	0x08011c30
 8010218:	08011c54 	.word	0x08011c54

0801021c <__sflush_r>:
 801021c:	898a      	ldrh	r2, [r1, #12]
 801021e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010222:	4605      	mov	r5, r0
 8010224:	0710      	lsls	r0, r2, #28
 8010226:	460c      	mov	r4, r1
 8010228:	d458      	bmi.n	80102dc <__sflush_r+0xc0>
 801022a:	684b      	ldr	r3, [r1, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	dc05      	bgt.n	801023c <__sflush_r+0x20>
 8010230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010232:	2b00      	cmp	r3, #0
 8010234:	dc02      	bgt.n	801023c <__sflush_r+0x20>
 8010236:	2000      	movs	r0, #0
 8010238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801023c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801023e:	2e00      	cmp	r6, #0
 8010240:	d0f9      	beq.n	8010236 <__sflush_r+0x1a>
 8010242:	2300      	movs	r3, #0
 8010244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010248:	682f      	ldr	r7, [r5, #0]
 801024a:	602b      	str	r3, [r5, #0]
 801024c:	d032      	beq.n	80102b4 <__sflush_r+0x98>
 801024e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010250:	89a3      	ldrh	r3, [r4, #12]
 8010252:	075a      	lsls	r2, r3, #29
 8010254:	d505      	bpl.n	8010262 <__sflush_r+0x46>
 8010256:	6863      	ldr	r3, [r4, #4]
 8010258:	1ac0      	subs	r0, r0, r3
 801025a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801025c:	b10b      	cbz	r3, 8010262 <__sflush_r+0x46>
 801025e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010260:	1ac0      	subs	r0, r0, r3
 8010262:	2300      	movs	r3, #0
 8010264:	4602      	mov	r2, r0
 8010266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010268:	6a21      	ldr	r1, [r4, #32]
 801026a:	4628      	mov	r0, r5
 801026c:	47b0      	blx	r6
 801026e:	1c43      	adds	r3, r0, #1
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	d106      	bne.n	8010282 <__sflush_r+0x66>
 8010274:	6829      	ldr	r1, [r5, #0]
 8010276:	291d      	cmp	r1, #29
 8010278:	d82c      	bhi.n	80102d4 <__sflush_r+0xb8>
 801027a:	4a2a      	ldr	r2, [pc, #168]	; (8010324 <__sflush_r+0x108>)
 801027c:	40ca      	lsrs	r2, r1
 801027e:	07d6      	lsls	r6, r2, #31
 8010280:	d528      	bpl.n	80102d4 <__sflush_r+0xb8>
 8010282:	2200      	movs	r2, #0
 8010284:	6062      	str	r2, [r4, #4]
 8010286:	04d9      	lsls	r1, r3, #19
 8010288:	6922      	ldr	r2, [r4, #16]
 801028a:	6022      	str	r2, [r4, #0]
 801028c:	d504      	bpl.n	8010298 <__sflush_r+0x7c>
 801028e:	1c42      	adds	r2, r0, #1
 8010290:	d101      	bne.n	8010296 <__sflush_r+0x7a>
 8010292:	682b      	ldr	r3, [r5, #0]
 8010294:	b903      	cbnz	r3, 8010298 <__sflush_r+0x7c>
 8010296:	6560      	str	r0, [r4, #84]	; 0x54
 8010298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801029a:	602f      	str	r7, [r5, #0]
 801029c:	2900      	cmp	r1, #0
 801029e:	d0ca      	beq.n	8010236 <__sflush_r+0x1a>
 80102a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102a4:	4299      	cmp	r1, r3
 80102a6:	d002      	beq.n	80102ae <__sflush_r+0x92>
 80102a8:	4628      	mov	r0, r5
 80102aa:	f000 fc3d 	bl	8010b28 <_free_r>
 80102ae:	2000      	movs	r0, #0
 80102b0:	6360      	str	r0, [r4, #52]	; 0x34
 80102b2:	e7c1      	b.n	8010238 <__sflush_r+0x1c>
 80102b4:	6a21      	ldr	r1, [r4, #32]
 80102b6:	2301      	movs	r3, #1
 80102b8:	4628      	mov	r0, r5
 80102ba:	47b0      	blx	r6
 80102bc:	1c41      	adds	r1, r0, #1
 80102be:	d1c7      	bne.n	8010250 <__sflush_r+0x34>
 80102c0:	682b      	ldr	r3, [r5, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d0c4      	beq.n	8010250 <__sflush_r+0x34>
 80102c6:	2b1d      	cmp	r3, #29
 80102c8:	d001      	beq.n	80102ce <__sflush_r+0xb2>
 80102ca:	2b16      	cmp	r3, #22
 80102cc:	d101      	bne.n	80102d2 <__sflush_r+0xb6>
 80102ce:	602f      	str	r7, [r5, #0]
 80102d0:	e7b1      	b.n	8010236 <__sflush_r+0x1a>
 80102d2:	89a3      	ldrh	r3, [r4, #12]
 80102d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102d8:	81a3      	strh	r3, [r4, #12]
 80102da:	e7ad      	b.n	8010238 <__sflush_r+0x1c>
 80102dc:	690f      	ldr	r7, [r1, #16]
 80102de:	2f00      	cmp	r7, #0
 80102e0:	d0a9      	beq.n	8010236 <__sflush_r+0x1a>
 80102e2:	0793      	lsls	r3, r2, #30
 80102e4:	680e      	ldr	r6, [r1, #0]
 80102e6:	bf08      	it	eq
 80102e8:	694b      	ldreq	r3, [r1, #20]
 80102ea:	600f      	str	r7, [r1, #0]
 80102ec:	bf18      	it	ne
 80102ee:	2300      	movne	r3, #0
 80102f0:	eba6 0807 	sub.w	r8, r6, r7
 80102f4:	608b      	str	r3, [r1, #8]
 80102f6:	f1b8 0f00 	cmp.w	r8, #0
 80102fa:	dd9c      	ble.n	8010236 <__sflush_r+0x1a>
 80102fc:	6a21      	ldr	r1, [r4, #32]
 80102fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010300:	4643      	mov	r3, r8
 8010302:	463a      	mov	r2, r7
 8010304:	4628      	mov	r0, r5
 8010306:	47b0      	blx	r6
 8010308:	2800      	cmp	r0, #0
 801030a:	dc06      	bgt.n	801031a <__sflush_r+0xfe>
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010312:	81a3      	strh	r3, [r4, #12]
 8010314:	f04f 30ff 	mov.w	r0, #4294967295
 8010318:	e78e      	b.n	8010238 <__sflush_r+0x1c>
 801031a:	4407      	add	r7, r0
 801031c:	eba8 0800 	sub.w	r8, r8, r0
 8010320:	e7e9      	b.n	80102f6 <__sflush_r+0xda>
 8010322:	bf00      	nop
 8010324:	20400001 	.word	0x20400001

08010328 <_fflush_r>:
 8010328:	b538      	push	{r3, r4, r5, lr}
 801032a:	690b      	ldr	r3, [r1, #16]
 801032c:	4605      	mov	r5, r0
 801032e:	460c      	mov	r4, r1
 8010330:	b913      	cbnz	r3, 8010338 <_fflush_r+0x10>
 8010332:	2500      	movs	r5, #0
 8010334:	4628      	mov	r0, r5
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	b118      	cbz	r0, 8010342 <_fflush_r+0x1a>
 801033a:	6983      	ldr	r3, [r0, #24]
 801033c:	b90b      	cbnz	r3, 8010342 <_fflush_r+0x1a>
 801033e:	f7fe fa21 	bl	800e784 <__sinit>
 8010342:	4b14      	ldr	r3, [pc, #80]	; (8010394 <_fflush_r+0x6c>)
 8010344:	429c      	cmp	r4, r3
 8010346:	d11b      	bne.n	8010380 <_fflush_r+0x58>
 8010348:	686c      	ldr	r4, [r5, #4]
 801034a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d0ef      	beq.n	8010332 <_fflush_r+0xa>
 8010352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010354:	07d0      	lsls	r0, r2, #31
 8010356:	d404      	bmi.n	8010362 <_fflush_r+0x3a>
 8010358:	0599      	lsls	r1, r3, #22
 801035a:	d402      	bmi.n	8010362 <_fflush_r+0x3a>
 801035c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801035e:	f7fe fad4 	bl	800e90a <__retarget_lock_acquire_recursive>
 8010362:	4628      	mov	r0, r5
 8010364:	4621      	mov	r1, r4
 8010366:	f7ff ff59 	bl	801021c <__sflush_r>
 801036a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801036c:	07da      	lsls	r2, r3, #31
 801036e:	4605      	mov	r5, r0
 8010370:	d4e0      	bmi.n	8010334 <_fflush_r+0xc>
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	059b      	lsls	r3, r3, #22
 8010376:	d4dd      	bmi.n	8010334 <_fflush_r+0xc>
 8010378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801037a:	f7fe fac8 	bl	800e90e <__retarget_lock_release_recursive>
 801037e:	e7d9      	b.n	8010334 <_fflush_r+0xc>
 8010380:	4b05      	ldr	r3, [pc, #20]	; (8010398 <_fflush_r+0x70>)
 8010382:	429c      	cmp	r4, r3
 8010384:	d101      	bne.n	801038a <_fflush_r+0x62>
 8010386:	68ac      	ldr	r4, [r5, #8]
 8010388:	e7df      	b.n	801034a <_fflush_r+0x22>
 801038a:	4b04      	ldr	r3, [pc, #16]	; (801039c <_fflush_r+0x74>)
 801038c:	429c      	cmp	r4, r3
 801038e:	bf08      	it	eq
 8010390:	68ec      	ldreq	r4, [r5, #12]
 8010392:	e7da      	b.n	801034a <_fflush_r+0x22>
 8010394:	08011bdc 	.word	0x08011bdc
 8010398:	08011bfc 	.word	0x08011bfc
 801039c:	08011bbc 	.word	0x08011bbc

080103a0 <_localeconv_r>:
 80103a0:	4800      	ldr	r0, [pc, #0]	; (80103a4 <_localeconv_r+0x4>)
 80103a2:	4770      	bx	lr
 80103a4:	24000178 	.word	0x24000178

080103a8 <_lseek_r>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	4d07      	ldr	r5, [pc, #28]	; (80103c8 <_lseek_r+0x20>)
 80103ac:	4604      	mov	r4, r0
 80103ae:	4608      	mov	r0, r1
 80103b0:	4611      	mov	r1, r2
 80103b2:	2200      	movs	r2, #0
 80103b4:	602a      	str	r2, [r5, #0]
 80103b6:	461a      	mov	r2, r3
 80103b8:	f7f0 ff32 	bl	8001220 <_lseek>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	d102      	bne.n	80103c6 <_lseek_r+0x1e>
 80103c0:	682b      	ldr	r3, [r5, #0]
 80103c2:	b103      	cbz	r3, 80103c6 <_lseek_r+0x1e>
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	2400a704 	.word	0x2400a704

080103cc <malloc>:
 80103cc:	4b02      	ldr	r3, [pc, #8]	; (80103d8 <malloc+0xc>)
 80103ce:	4601      	mov	r1, r0
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	f7fe baed 	b.w	800e9b0 <_malloc_r>
 80103d6:	bf00      	nop
 80103d8:	24000020 	.word	0x24000020

080103dc <__malloc_lock>:
 80103dc:	4801      	ldr	r0, [pc, #4]	; (80103e4 <__malloc_lock+0x8>)
 80103de:	f7fe ba94 	b.w	800e90a <__retarget_lock_acquire_recursive>
 80103e2:	bf00      	nop
 80103e4:	2400a6f9 	.word	0x2400a6f9

080103e8 <__malloc_unlock>:
 80103e8:	4801      	ldr	r0, [pc, #4]	; (80103f0 <__malloc_unlock+0x8>)
 80103ea:	f7fe ba90 	b.w	800e90e <__retarget_lock_release_recursive>
 80103ee:	bf00      	nop
 80103f0:	2400a6f9 	.word	0x2400a6f9

080103f4 <_Balloc>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103f8:	4604      	mov	r4, r0
 80103fa:	460d      	mov	r5, r1
 80103fc:	b976      	cbnz	r6, 801041c <_Balloc+0x28>
 80103fe:	2010      	movs	r0, #16
 8010400:	f7ff ffe4 	bl	80103cc <malloc>
 8010404:	4602      	mov	r2, r0
 8010406:	6260      	str	r0, [r4, #36]	; 0x24
 8010408:	b920      	cbnz	r0, 8010414 <_Balloc+0x20>
 801040a:	4b18      	ldr	r3, [pc, #96]	; (801046c <_Balloc+0x78>)
 801040c:	4818      	ldr	r0, [pc, #96]	; (8010470 <_Balloc+0x7c>)
 801040e:	2166      	movs	r1, #102	; 0x66
 8010410:	f000 fbe8 	bl	8010be4 <__assert_func>
 8010414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010418:	6006      	str	r6, [r0, #0]
 801041a:	60c6      	str	r6, [r0, #12]
 801041c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801041e:	68f3      	ldr	r3, [r6, #12]
 8010420:	b183      	cbz	r3, 8010444 <_Balloc+0x50>
 8010422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801042a:	b9b8      	cbnz	r0, 801045c <_Balloc+0x68>
 801042c:	2101      	movs	r1, #1
 801042e:	fa01 f605 	lsl.w	r6, r1, r5
 8010432:	1d72      	adds	r2, r6, #5
 8010434:	0092      	lsls	r2, r2, #2
 8010436:	4620      	mov	r0, r4
 8010438:	f000 fb60 	bl	8010afc <_calloc_r>
 801043c:	b160      	cbz	r0, 8010458 <_Balloc+0x64>
 801043e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010442:	e00e      	b.n	8010462 <_Balloc+0x6e>
 8010444:	2221      	movs	r2, #33	; 0x21
 8010446:	2104      	movs	r1, #4
 8010448:	4620      	mov	r0, r4
 801044a:	f000 fb57 	bl	8010afc <_calloc_r>
 801044e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010450:	60f0      	str	r0, [r6, #12]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e4      	bne.n	8010422 <_Balloc+0x2e>
 8010458:	2000      	movs	r0, #0
 801045a:	bd70      	pop	{r4, r5, r6, pc}
 801045c:	6802      	ldr	r2, [r0, #0]
 801045e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010462:	2300      	movs	r3, #0
 8010464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010468:	e7f7      	b.n	801045a <_Balloc+0x66>
 801046a:	bf00      	nop
 801046c:	08011c61 	.word	0x08011c61
 8010470:	08011ce4 	.word	0x08011ce4

08010474 <_Bfree>:
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010478:	4605      	mov	r5, r0
 801047a:	460c      	mov	r4, r1
 801047c:	b976      	cbnz	r6, 801049c <_Bfree+0x28>
 801047e:	2010      	movs	r0, #16
 8010480:	f7ff ffa4 	bl	80103cc <malloc>
 8010484:	4602      	mov	r2, r0
 8010486:	6268      	str	r0, [r5, #36]	; 0x24
 8010488:	b920      	cbnz	r0, 8010494 <_Bfree+0x20>
 801048a:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <_Bfree+0x3c>)
 801048c:	4809      	ldr	r0, [pc, #36]	; (80104b4 <_Bfree+0x40>)
 801048e:	218a      	movs	r1, #138	; 0x8a
 8010490:	f000 fba8 	bl	8010be4 <__assert_func>
 8010494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010498:	6006      	str	r6, [r0, #0]
 801049a:	60c6      	str	r6, [r0, #12]
 801049c:	b13c      	cbz	r4, 80104ae <_Bfree+0x3a>
 801049e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104a0:	6862      	ldr	r2, [r4, #4]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104a8:	6021      	str	r1, [r4, #0]
 80104aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	08011c61 	.word	0x08011c61
 80104b4:	08011ce4 	.word	0x08011ce4

080104b8 <__multadd>:
 80104b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104bc:	690d      	ldr	r5, [r1, #16]
 80104be:	4607      	mov	r7, r0
 80104c0:	460c      	mov	r4, r1
 80104c2:	461e      	mov	r6, r3
 80104c4:	f101 0c14 	add.w	ip, r1, #20
 80104c8:	2000      	movs	r0, #0
 80104ca:	f8dc 3000 	ldr.w	r3, [ip]
 80104ce:	b299      	uxth	r1, r3
 80104d0:	fb02 6101 	mla	r1, r2, r1, r6
 80104d4:	0c1e      	lsrs	r6, r3, #16
 80104d6:	0c0b      	lsrs	r3, r1, #16
 80104d8:	fb02 3306 	mla	r3, r2, r6, r3
 80104dc:	b289      	uxth	r1, r1
 80104de:	3001      	adds	r0, #1
 80104e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104e4:	4285      	cmp	r5, r0
 80104e6:	f84c 1b04 	str.w	r1, [ip], #4
 80104ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104ee:	dcec      	bgt.n	80104ca <__multadd+0x12>
 80104f0:	b30e      	cbz	r6, 8010536 <__multadd+0x7e>
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	42ab      	cmp	r3, r5
 80104f6:	dc19      	bgt.n	801052c <__multadd+0x74>
 80104f8:	6861      	ldr	r1, [r4, #4]
 80104fa:	4638      	mov	r0, r7
 80104fc:	3101      	adds	r1, #1
 80104fe:	f7ff ff79 	bl	80103f4 <_Balloc>
 8010502:	4680      	mov	r8, r0
 8010504:	b928      	cbnz	r0, 8010512 <__multadd+0x5a>
 8010506:	4602      	mov	r2, r0
 8010508:	4b0c      	ldr	r3, [pc, #48]	; (801053c <__multadd+0x84>)
 801050a:	480d      	ldr	r0, [pc, #52]	; (8010540 <__multadd+0x88>)
 801050c:	21b5      	movs	r1, #181	; 0xb5
 801050e:	f000 fb69 	bl	8010be4 <__assert_func>
 8010512:	6922      	ldr	r2, [r4, #16]
 8010514:	3202      	adds	r2, #2
 8010516:	f104 010c 	add.w	r1, r4, #12
 801051a:	0092      	lsls	r2, r2, #2
 801051c:	300c      	adds	r0, #12
 801051e:	f7fe f9f7 	bl	800e910 <memcpy>
 8010522:	4621      	mov	r1, r4
 8010524:	4638      	mov	r0, r7
 8010526:	f7ff ffa5 	bl	8010474 <_Bfree>
 801052a:	4644      	mov	r4, r8
 801052c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010530:	3501      	adds	r5, #1
 8010532:	615e      	str	r6, [r3, #20]
 8010534:	6125      	str	r5, [r4, #16]
 8010536:	4620      	mov	r0, r4
 8010538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801053c:	08011cd3 	.word	0x08011cd3
 8010540:	08011ce4 	.word	0x08011ce4

08010544 <__hi0bits>:
 8010544:	0c03      	lsrs	r3, r0, #16
 8010546:	041b      	lsls	r3, r3, #16
 8010548:	b9d3      	cbnz	r3, 8010580 <__hi0bits+0x3c>
 801054a:	0400      	lsls	r0, r0, #16
 801054c:	2310      	movs	r3, #16
 801054e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010552:	bf04      	itt	eq
 8010554:	0200      	lsleq	r0, r0, #8
 8010556:	3308      	addeq	r3, #8
 8010558:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801055c:	bf04      	itt	eq
 801055e:	0100      	lsleq	r0, r0, #4
 8010560:	3304      	addeq	r3, #4
 8010562:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010566:	bf04      	itt	eq
 8010568:	0080      	lsleq	r0, r0, #2
 801056a:	3302      	addeq	r3, #2
 801056c:	2800      	cmp	r0, #0
 801056e:	db05      	blt.n	801057c <__hi0bits+0x38>
 8010570:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010574:	f103 0301 	add.w	r3, r3, #1
 8010578:	bf08      	it	eq
 801057a:	2320      	moveq	r3, #32
 801057c:	4618      	mov	r0, r3
 801057e:	4770      	bx	lr
 8010580:	2300      	movs	r3, #0
 8010582:	e7e4      	b.n	801054e <__hi0bits+0xa>

08010584 <__lo0bits>:
 8010584:	6803      	ldr	r3, [r0, #0]
 8010586:	f013 0207 	ands.w	r2, r3, #7
 801058a:	4601      	mov	r1, r0
 801058c:	d00b      	beq.n	80105a6 <__lo0bits+0x22>
 801058e:	07da      	lsls	r2, r3, #31
 8010590:	d423      	bmi.n	80105da <__lo0bits+0x56>
 8010592:	0798      	lsls	r0, r3, #30
 8010594:	bf49      	itett	mi
 8010596:	085b      	lsrmi	r3, r3, #1
 8010598:	089b      	lsrpl	r3, r3, #2
 801059a:	2001      	movmi	r0, #1
 801059c:	600b      	strmi	r3, [r1, #0]
 801059e:	bf5c      	itt	pl
 80105a0:	600b      	strpl	r3, [r1, #0]
 80105a2:	2002      	movpl	r0, #2
 80105a4:	4770      	bx	lr
 80105a6:	b298      	uxth	r0, r3
 80105a8:	b9a8      	cbnz	r0, 80105d6 <__lo0bits+0x52>
 80105aa:	0c1b      	lsrs	r3, r3, #16
 80105ac:	2010      	movs	r0, #16
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	b90a      	cbnz	r2, 80105b6 <__lo0bits+0x32>
 80105b2:	3008      	adds	r0, #8
 80105b4:	0a1b      	lsrs	r3, r3, #8
 80105b6:	071a      	lsls	r2, r3, #28
 80105b8:	bf04      	itt	eq
 80105ba:	091b      	lsreq	r3, r3, #4
 80105bc:	3004      	addeq	r0, #4
 80105be:	079a      	lsls	r2, r3, #30
 80105c0:	bf04      	itt	eq
 80105c2:	089b      	lsreq	r3, r3, #2
 80105c4:	3002      	addeq	r0, #2
 80105c6:	07da      	lsls	r2, r3, #31
 80105c8:	d403      	bmi.n	80105d2 <__lo0bits+0x4e>
 80105ca:	085b      	lsrs	r3, r3, #1
 80105cc:	f100 0001 	add.w	r0, r0, #1
 80105d0:	d005      	beq.n	80105de <__lo0bits+0x5a>
 80105d2:	600b      	str	r3, [r1, #0]
 80105d4:	4770      	bx	lr
 80105d6:	4610      	mov	r0, r2
 80105d8:	e7e9      	b.n	80105ae <__lo0bits+0x2a>
 80105da:	2000      	movs	r0, #0
 80105dc:	4770      	bx	lr
 80105de:	2020      	movs	r0, #32
 80105e0:	4770      	bx	lr
	...

080105e4 <__i2b>:
 80105e4:	b510      	push	{r4, lr}
 80105e6:	460c      	mov	r4, r1
 80105e8:	2101      	movs	r1, #1
 80105ea:	f7ff ff03 	bl	80103f4 <_Balloc>
 80105ee:	4602      	mov	r2, r0
 80105f0:	b928      	cbnz	r0, 80105fe <__i2b+0x1a>
 80105f2:	4b05      	ldr	r3, [pc, #20]	; (8010608 <__i2b+0x24>)
 80105f4:	4805      	ldr	r0, [pc, #20]	; (801060c <__i2b+0x28>)
 80105f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80105fa:	f000 faf3 	bl	8010be4 <__assert_func>
 80105fe:	2301      	movs	r3, #1
 8010600:	6144      	str	r4, [r0, #20]
 8010602:	6103      	str	r3, [r0, #16]
 8010604:	bd10      	pop	{r4, pc}
 8010606:	bf00      	nop
 8010608:	08011cd3 	.word	0x08011cd3
 801060c:	08011ce4 	.word	0x08011ce4

08010610 <__multiply>:
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	4691      	mov	r9, r2
 8010616:	690a      	ldr	r2, [r1, #16]
 8010618:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801061c:	429a      	cmp	r2, r3
 801061e:	bfb8      	it	lt
 8010620:	460b      	movlt	r3, r1
 8010622:	460c      	mov	r4, r1
 8010624:	bfbc      	itt	lt
 8010626:	464c      	movlt	r4, r9
 8010628:	4699      	movlt	r9, r3
 801062a:	6927      	ldr	r7, [r4, #16]
 801062c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	6861      	ldr	r1, [r4, #4]
 8010634:	eb07 060a 	add.w	r6, r7, sl
 8010638:	42b3      	cmp	r3, r6
 801063a:	b085      	sub	sp, #20
 801063c:	bfb8      	it	lt
 801063e:	3101      	addlt	r1, #1
 8010640:	f7ff fed8 	bl	80103f4 <_Balloc>
 8010644:	b930      	cbnz	r0, 8010654 <__multiply+0x44>
 8010646:	4602      	mov	r2, r0
 8010648:	4b44      	ldr	r3, [pc, #272]	; (801075c <__multiply+0x14c>)
 801064a:	4845      	ldr	r0, [pc, #276]	; (8010760 <__multiply+0x150>)
 801064c:	f240 115d 	movw	r1, #349	; 0x15d
 8010650:	f000 fac8 	bl	8010be4 <__assert_func>
 8010654:	f100 0514 	add.w	r5, r0, #20
 8010658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801065c:	462b      	mov	r3, r5
 801065e:	2200      	movs	r2, #0
 8010660:	4543      	cmp	r3, r8
 8010662:	d321      	bcc.n	80106a8 <__multiply+0x98>
 8010664:	f104 0314 	add.w	r3, r4, #20
 8010668:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801066c:	f109 0314 	add.w	r3, r9, #20
 8010670:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010674:	9202      	str	r2, [sp, #8]
 8010676:	1b3a      	subs	r2, r7, r4
 8010678:	3a15      	subs	r2, #21
 801067a:	f022 0203 	bic.w	r2, r2, #3
 801067e:	3204      	adds	r2, #4
 8010680:	f104 0115 	add.w	r1, r4, #21
 8010684:	428f      	cmp	r7, r1
 8010686:	bf38      	it	cc
 8010688:	2204      	movcc	r2, #4
 801068a:	9201      	str	r2, [sp, #4]
 801068c:	9a02      	ldr	r2, [sp, #8]
 801068e:	9303      	str	r3, [sp, #12]
 8010690:	429a      	cmp	r2, r3
 8010692:	d80c      	bhi.n	80106ae <__multiply+0x9e>
 8010694:	2e00      	cmp	r6, #0
 8010696:	dd03      	ble.n	80106a0 <__multiply+0x90>
 8010698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801069c:	2b00      	cmp	r3, #0
 801069e:	d05a      	beq.n	8010756 <__multiply+0x146>
 80106a0:	6106      	str	r6, [r0, #16]
 80106a2:	b005      	add	sp, #20
 80106a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a8:	f843 2b04 	str.w	r2, [r3], #4
 80106ac:	e7d8      	b.n	8010660 <__multiply+0x50>
 80106ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80106b2:	f1ba 0f00 	cmp.w	sl, #0
 80106b6:	d024      	beq.n	8010702 <__multiply+0xf2>
 80106b8:	f104 0e14 	add.w	lr, r4, #20
 80106bc:	46a9      	mov	r9, r5
 80106be:	f04f 0c00 	mov.w	ip, #0
 80106c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80106c6:	f8d9 1000 	ldr.w	r1, [r9]
 80106ca:	fa1f fb82 	uxth.w	fp, r2
 80106ce:	b289      	uxth	r1, r1
 80106d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80106d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80106d8:	f8d9 2000 	ldr.w	r2, [r9]
 80106dc:	4461      	add	r1, ip
 80106de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80106e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80106e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80106ea:	b289      	uxth	r1, r1
 80106ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80106f0:	4577      	cmp	r7, lr
 80106f2:	f849 1b04 	str.w	r1, [r9], #4
 80106f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80106fa:	d8e2      	bhi.n	80106c2 <__multiply+0xb2>
 80106fc:	9a01      	ldr	r2, [sp, #4]
 80106fe:	f845 c002 	str.w	ip, [r5, r2]
 8010702:	9a03      	ldr	r2, [sp, #12]
 8010704:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010708:	3304      	adds	r3, #4
 801070a:	f1b9 0f00 	cmp.w	r9, #0
 801070e:	d020      	beq.n	8010752 <__multiply+0x142>
 8010710:	6829      	ldr	r1, [r5, #0]
 8010712:	f104 0c14 	add.w	ip, r4, #20
 8010716:	46ae      	mov	lr, r5
 8010718:	f04f 0a00 	mov.w	sl, #0
 801071c:	f8bc b000 	ldrh.w	fp, [ip]
 8010720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010724:	fb09 220b 	mla	r2, r9, fp, r2
 8010728:	4492      	add	sl, r2
 801072a:	b289      	uxth	r1, r1
 801072c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010730:	f84e 1b04 	str.w	r1, [lr], #4
 8010734:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010738:	f8be 1000 	ldrh.w	r1, [lr]
 801073c:	0c12      	lsrs	r2, r2, #16
 801073e:	fb09 1102 	mla	r1, r9, r2, r1
 8010742:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010746:	4567      	cmp	r7, ip
 8010748:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801074c:	d8e6      	bhi.n	801071c <__multiply+0x10c>
 801074e:	9a01      	ldr	r2, [sp, #4]
 8010750:	50a9      	str	r1, [r5, r2]
 8010752:	3504      	adds	r5, #4
 8010754:	e79a      	b.n	801068c <__multiply+0x7c>
 8010756:	3e01      	subs	r6, #1
 8010758:	e79c      	b.n	8010694 <__multiply+0x84>
 801075a:	bf00      	nop
 801075c:	08011cd3 	.word	0x08011cd3
 8010760:	08011ce4 	.word	0x08011ce4

08010764 <__pow5mult>:
 8010764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010768:	4615      	mov	r5, r2
 801076a:	f012 0203 	ands.w	r2, r2, #3
 801076e:	4606      	mov	r6, r0
 8010770:	460f      	mov	r7, r1
 8010772:	d007      	beq.n	8010784 <__pow5mult+0x20>
 8010774:	4c25      	ldr	r4, [pc, #148]	; (801080c <__pow5mult+0xa8>)
 8010776:	3a01      	subs	r2, #1
 8010778:	2300      	movs	r3, #0
 801077a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801077e:	f7ff fe9b 	bl	80104b8 <__multadd>
 8010782:	4607      	mov	r7, r0
 8010784:	10ad      	asrs	r5, r5, #2
 8010786:	d03d      	beq.n	8010804 <__pow5mult+0xa0>
 8010788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801078a:	b97c      	cbnz	r4, 80107ac <__pow5mult+0x48>
 801078c:	2010      	movs	r0, #16
 801078e:	f7ff fe1d 	bl	80103cc <malloc>
 8010792:	4602      	mov	r2, r0
 8010794:	6270      	str	r0, [r6, #36]	; 0x24
 8010796:	b928      	cbnz	r0, 80107a4 <__pow5mult+0x40>
 8010798:	4b1d      	ldr	r3, [pc, #116]	; (8010810 <__pow5mult+0xac>)
 801079a:	481e      	ldr	r0, [pc, #120]	; (8010814 <__pow5mult+0xb0>)
 801079c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80107a0:	f000 fa20 	bl	8010be4 <__assert_func>
 80107a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107a8:	6004      	str	r4, [r0, #0]
 80107aa:	60c4      	str	r4, [r0, #12]
 80107ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80107b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107b4:	b94c      	cbnz	r4, 80107ca <__pow5mult+0x66>
 80107b6:	f240 2171 	movw	r1, #625	; 0x271
 80107ba:	4630      	mov	r0, r6
 80107bc:	f7ff ff12 	bl	80105e4 <__i2b>
 80107c0:	2300      	movs	r3, #0
 80107c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80107c6:	4604      	mov	r4, r0
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	f04f 0900 	mov.w	r9, #0
 80107ce:	07eb      	lsls	r3, r5, #31
 80107d0:	d50a      	bpl.n	80107e8 <__pow5mult+0x84>
 80107d2:	4639      	mov	r1, r7
 80107d4:	4622      	mov	r2, r4
 80107d6:	4630      	mov	r0, r6
 80107d8:	f7ff ff1a 	bl	8010610 <__multiply>
 80107dc:	4639      	mov	r1, r7
 80107de:	4680      	mov	r8, r0
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7ff fe47 	bl	8010474 <_Bfree>
 80107e6:	4647      	mov	r7, r8
 80107e8:	106d      	asrs	r5, r5, #1
 80107ea:	d00b      	beq.n	8010804 <__pow5mult+0xa0>
 80107ec:	6820      	ldr	r0, [r4, #0]
 80107ee:	b938      	cbnz	r0, 8010800 <__pow5mult+0x9c>
 80107f0:	4622      	mov	r2, r4
 80107f2:	4621      	mov	r1, r4
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7ff ff0b 	bl	8010610 <__multiply>
 80107fa:	6020      	str	r0, [r4, #0]
 80107fc:	f8c0 9000 	str.w	r9, [r0]
 8010800:	4604      	mov	r4, r0
 8010802:	e7e4      	b.n	80107ce <__pow5mult+0x6a>
 8010804:	4638      	mov	r0, r7
 8010806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801080a:	bf00      	nop
 801080c:	08011e30 	.word	0x08011e30
 8010810:	08011c61 	.word	0x08011c61
 8010814:	08011ce4 	.word	0x08011ce4

08010818 <__lshift>:
 8010818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801081c:	460c      	mov	r4, r1
 801081e:	6849      	ldr	r1, [r1, #4]
 8010820:	6923      	ldr	r3, [r4, #16]
 8010822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010826:	68a3      	ldr	r3, [r4, #8]
 8010828:	4607      	mov	r7, r0
 801082a:	4691      	mov	r9, r2
 801082c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010830:	f108 0601 	add.w	r6, r8, #1
 8010834:	42b3      	cmp	r3, r6
 8010836:	db0b      	blt.n	8010850 <__lshift+0x38>
 8010838:	4638      	mov	r0, r7
 801083a:	f7ff fddb 	bl	80103f4 <_Balloc>
 801083e:	4605      	mov	r5, r0
 8010840:	b948      	cbnz	r0, 8010856 <__lshift+0x3e>
 8010842:	4602      	mov	r2, r0
 8010844:	4b2a      	ldr	r3, [pc, #168]	; (80108f0 <__lshift+0xd8>)
 8010846:	482b      	ldr	r0, [pc, #172]	; (80108f4 <__lshift+0xdc>)
 8010848:	f240 11d9 	movw	r1, #473	; 0x1d9
 801084c:	f000 f9ca 	bl	8010be4 <__assert_func>
 8010850:	3101      	adds	r1, #1
 8010852:	005b      	lsls	r3, r3, #1
 8010854:	e7ee      	b.n	8010834 <__lshift+0x1c>
 8010856:	2300      	movs	r3, #0
 8010858:	f100 0114 	add.w	r1, r0, #20
 801085c:	f100 0210 	add.w	r2, r0, #16
 8010860:	4618      	mov	r0, r3
 8010862:	4553      	cmp	r3, sl
 8010864:	db37      	blt.n	80108d6 <__lshift+0xbe>
 8010866:	6920      	ldr	r0, [r4, #16]
 8010868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801086c:	f104 0314 	add.w	r3, r4, #20
 8010870:	f019 091f 	ands.w	r9, r9, #31
 8010874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801087c:	d02f      	beq.n	80108de <__lshift+0xc6>
 801087e:	f1c9 0e20 	rsb	lr, r9, #32
 8010882:	468a      	mov	sl, r1
 8010884:	f04f 0c00 	mov.w	ip, #0
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	fa02 f209 	lsl.w	r2, r2, r9
 801088e:	ea42 020c 	orr.w	r2, r2, ip
 8010892:	f84a 2b04 	str.w	r2, [sl], #4
 8010896:	f853 2b04 	ldr.w	r2, [r3], #4
 801089a:	4298      	cmp	r0, r3
 801089c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80108a0:	d8f2      	bhi.n	8010888 <__lshift+0x70>
 80108a2:	1b03      	subs	r3, r0, r4
 80108a4:	3b15      	subs	r3, #21
 80108a6:	f023 0303 	bic.w	r3, r3, #3
 80108aa:	3304      	adds	r3, #4
 80108ac:	f104 0215 	add.w	r2, r4, #21
 80108b0:	4290      	cmp	r0, r2
 80108b2:	bf38      	it	cc
 80108b4:	2304      	movcc	r3, #4
 80108b6:	f841 c003 	str.w	ip, [r1, r3]
 80108ba:	f1bc 0f00 	cmp.w	ip, #0
 80108be:	d001      	beq.n	80108c4 <__lshift+0xac>
 80108c0:	f108 0602 	add.w	r6, r8, #2
 80108c4:	3e01      	subs	r6, #1
 80108c6:	4638      	mov	r0, r7
 80108c8:	612e      	str	r6, [r5, #16]
 80108ca:	4621      	mov	r1, r4
 80108cc:	f7ff fdd2 	bl	8010474 <_Bfree>
 80108d0:	4628      	mov	r0, r5
 80108d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80108da:	3301      	adds	r3, #1
 80108dc:	e7c1      	b.n	8010862 <__lshift+0x4a>
 80108de:	3904      	subs	r1, #4
 80108e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80108e8:	4298      	cmp	r0, r3
 80108ea:	d8f9      	bhi.n	80108e0 <__lshift+0xc8>
 80108ec:	e7ea      	b.n	80108c4 <__lshift+0xac>
 80108ee:	bf00      	nop
 80108f0:	08011cd3 	.word	0x08011cd3
 80108f4:	08011ce4 	.word	0x08011ce4

080108f8 <__mcmp>:
 80108f8:	b530      	push	{r4, r5, lr}
 80108fa:	6902      	ldr	r2, [r0, #16]
 80108fc:	690c      	ldr	r4, [r1, #16]
 80108fe:	1b12      	subs	r2, r2, r4
 8010900:	d10e      	bne.n	8010920 <__mcmp+0x28>
 8010902:	f100 0314 	add.w	r3, r0, #20
 8010906:	3114      	adds	r1, #20
 8010908:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801090c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010910:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010914:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010918:	42a5      	cmp	r5, r4
 801091a:	d003      	beq.n	8010924 <__mcmp+0x2c>
 801091c:	d305      	bcc.n	801092a <__mcmp+0x32>
 801091e:	2201      	movs	r2, #1
 8010920:	4610      	mov	r0, r2
 8010922:	bd30      	pop	{r4, r5, pc}
 8010924:	4283      	cmp	r3, r0
 8010926:	d3f3      	bcc.n	8010910 <__mcmp+0x18>
 8010928:	e7fa      	b.n	8010920 <__mcmp+0x28>
 801092a:	f04f 32ff 	mov.w	r2, #4294967295
 801092e:	e7f7      	b.n	8010920 <__mcmp+0x28>

08010930 <__mdiff>:
 8010930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010934:	460c      	mov	r4, r1
 8010936:	4606      	mov	r6, r0
 8010938:	4611      	mov	r1, r2
 801093a:	4620      	mov	r0, r4
 801093c:	4690      	mov	r8, r2
 801093e:	f7ff ffdb 	bl	80108f8 <__mcmp>
 8010942:	1e05      	subs	r5, r0, #0
 8010944:	d110      	bne.n	8010968 <__mdiff+0x38>
 8010946:	4629      	mov	r1, r5
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff fd53 	bl	80103f4 <_Balloc>
 801094e:	b930      	cbnz	r0, 801095e <__mdiff+0x2e>
 8010950:	4b3a      	ldr	r3, [pc, #232]	; (8010a3c <__mdiff+0x10c>)
 8010952:	4602      	mov	r2, r0
 8010954:	f240 2132 	movw	r1, #562	; 0x232
 8010958:	4839      	ldr	r0, [pc, #228]	; (8010a40 <__mdiff+0x110>)
 801095a:	f000 f943 	bl	8010be4 <__assert_func>
 801095e:	2301      	movs	r3, #1
 8010960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010968:	bfa4      	itt	ge
 801096a:	4643      	movge	r3, r8
 801096c:	46a0      	movge	r8, r4
 801096e:	4630      	mov	r0, r6
 8010970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010974:	bfa6      	itte	ge
 8010976:	461c      	movge	r4, r3
 8010978:	2500      	movge	r5, #0
 801097a:	2501      	movlt	r5, #1
 801097c:	f7ff fd3a 	bl	80103f4 <_Balloc>
 8010980:	b920      	cbnz	r0, 801098c <__mdiff+0x5c>
 8010982:	4b2e      	ldr	r3, [pc, #184]	; (8010a3c <__mdiff+0x10c>)
 8010984:	4602      	mov	r2, r0
 8010986:	f44f 7110 	mov.w	r1, #576	; 0x240
 801098a:	e7e5      	b.n	8010958 <__mdiff+0x28>
 801098c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010990:	6926      	ldr	r6, [r4, #16]
 8010992:	60c5      	str	r5, [r0, #12]
 8010994:	f104 0914 	add.w	r9, r4, #20
 8010998:	f108 0514 	add.w	r5, r8, #20
 801099c:	f100 0e14 	add.w	lr, r0, #20
 80109a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80109a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80109a8:	f108 0210 	add.w	r2, r8, #16
 80109ac:	46f2      	mov	sl, lr
 80109ae:	2100      	movs	r1, #0
 80109b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80109b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80109b8:	fa1f f883 	uxth.w	r8, r3
 80109bc:	fa11 f18b 	uxtah	r1, r1, fp
 80109c0:	0c1b      	lsrs	r3, r3, #16
 80109c2:	eba1 0808 	sub.w	r8, r1, r8
 80109c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80109ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80109ce:	fa1f f888 	uxth.w	r8, r8
 80109d2:	1419      	asrs	r1, r3, #16
 80109d4:	454e      	cmp	r6, r9
 80109d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80109da:	f84a 3b04 	str.w	r3, [sl], #4
 80109de:	d8e7      	bhi.n	80109b0 <__mdiff+0x80>
 80109e0:	1b33      	subs	r3, r6, r4
 80109e2:	3b15      	subs	r3, #21
 80109e4:	f023 0303 	bic.w	r3, r3, #3
 80109e8:	3304      	adds	r3, #4
 80109ea:	3415      	adds	r4, #21
 80109ec:	42a6      	cmp	r6, r4
 80109ee:	bf38      	it	cc
 80109f0:	2304      	movcc	r3, #4
 80109f2:	441d      	add	r5, r3
 80109f4:	4473      	add	r3, lr
 80109f6:	469e      	mov	lr, r3
 80109f8:	462e      	mov	r6, r5
 80109fa:	4566      	cmp	r6, ip
 80109fc:	d30e      	bcc.n	8010a1c <__mdiff+0xec>
 80109fe:	f10c 0203 	add.w	r2, ip, #3
 8010a02:	1b52      	subs	r2, r2, r5
 8010a04:	f022 0203 	bic.w	r2, r2, #3
 8010a08:	3d03      	subs	r5, #3
 8010a0a:	45ac      	cmp	ip, r5
 8010a0c:	bf38      	it	cc
 8010a0e:	2200      	movcc	r2, #0
 8010a10:	441a      	add	r2, r3
 8010a12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a16:	b17b      	cbz	r3, 8010a38 <__mdiff+0x108>
 8010a18:	6107      	str	r7, [r0, #16]
 8010a1a:	e7a3      	b.n	8010964 <__mdiff+0x34>
 8010a1c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010a20:	fa11 f288 	uxtah	r2, r1, r8
 8010a24:	1414      	asrs	r4, r2, #16
 8010a26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010a2a:	b292      	uxth	r2, r2
 8010a2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010a30:	f84e 2b04 	str.w	r2, [lr], #4
 8010a34:	1421      	asrs	r1, r4, #16
 8010a36:	e7e0      	b.n	80109fa <__mdiff+0xca>
 8010a38:	3f01      	subs	r7, #1
 8010a3a:	e7ea      	b.n	8010a12 <__mdiff+0xe2>
 8010a3c:	08011cd3 	.word	0x08011cd3
 8010a40:	08011ce4 	.word	0x08011ce4

08010a44 <__d2b>:
 8010a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a48:	4689      	mov	r9, r1
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	ec57 6b10 	vmov	r6, r7, d0
 8010a50:	4690      	mov	r8, r2
 8010a52:	f7ff fccf 	bl	80103f4 <_Balloc>
 8010a56:	4604      	mov	r4, r0
 8010a58:	b930      	cbnz	r0, 8010a68 <__d2b+0x24>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	4b25      	ldr	r3, [pc, #148]	; (8010af4 <__d2b+0xb0>)
 8010a5e:	4826      	ldr	r0, [pc, #152]	; (8010af8 <__d2b+0xb4>)
 8010a60:	f240 310a 	movw	r1, #778	; 0x30a
 8010a64:	f000 f8be 	bl	8010be4 <__assert_func>
 8010a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a70:	bb35      	cbnz	r5, 8010ac0 <__d2b+0x7c>
 8010a72:	2e00      	cmp	r6, #0
 8010a74:	9301      	str	r3, [sp, #4]
 8010a76:	d028      	beq.n	8010aca <__d2b+0x86>
 8010a78:	4668      	mov	r0, sp
 8010a7a:	9600      	str	r6, [sp, #0]
 8010a7c:	f7ff fd82 	bl	8010584 <__lo0bits>
 8010a80:	9900      	ldr	r1, [sp, #0]
 8010a82:	b300      	cbz	r0, 8010ac6 <__d2b+0x82>
 8010a84:	9a01      	ldr	r2, [sp, #4]
 8010a86:	f1c0 0320 	rsb	r3, r0, #32
 8010a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a8e:	430b      	orrs	r3, r1
 8010a90:	40c2      	lsrs	r2, r0
 8010a92:	6163      	str	r3, [r4, #20]
 8010a94:	9201      	str	r2, [sp, #4]
 8010a96:	9b01      	ldr	r3, [sp, #4]
 8010a98:	61a3      	str	r3, [r4, #24]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	bf14      	ite	ne
 8010a9e:	2202      	movne	r2, #2
 8010aa0:	2201      	moveq	r2, #1
 8010aa2:	6122      	str	r2, [r4, #16]
 8010aa4:	b1d5      	cbz	r5, 8010adc <__d2b+0x98>
 8010aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010aaa:	4405      	add	r5, r0
 8010aac:	f8c9 5000 	str.w	r5, [r9]
 8010ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ab4:	f8c8 0000 	str.w	r0, [r8]
 8010ab8:	4620      	mov	r0, r4
 8010aba:	b003      	add	sp, #12
 8010abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ac4:	e7d5      	b.n	8010a72 <__d2b+0x2e>
 8010ac6:	6161      	str	r1, [r4, #20]
 8010ac8:	e7e5      	b.n	8010a96 <__d2b+0x52>
 8010aca:	a801      	add	r0, sp, #4
 8010acc:	f7ff fd5a 	bl	8010584 <__lo0bits>
 8010ad0:	9b01      	ldr	r3, [sp, #4]
 8010ad2:	6163      	str	r3, [r4, #20]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	6122      	str	r2, [r4, #16]
 8010ad8:	3020      	adds	r0, #32
 8010ada:	e7e3      	b.n	8010aa4 <__d2b+0x60>
 8010adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ae4:	f8c9 0000 	str.w	r0, [r9]
 8010ae8:	6918      	ldr	r0, [r3, #16]
 8010aea:	f7ff fd2b 	bl	8010544 <__hi0bits>
 8010aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010af2:	e7df      	b.n	8010ab4 <__d2b+0x70>
 8010af4:	08011cd3 	.word	0x08011cd3
 8010af8:	08011ce4 	.word	0x08011ce4

08010afc <_calloc_r>:
 8010afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010afe:	fba1 2402 	umull	r2, r4, r1, r2
 8010b02:	b94c      	cbnz	r4, 8010b18 <_calloc_r+0x1c>
 8010b04:	4611      	mov	r1, r2
 8010b06:	9201      	str	r2, [sp, #4]
 8010b08:	f7fd ff52 	bl	800e9b0 <_malloc_r>
 8010b0c:	9a01      	ldr	r2, [sp, #4]
 8010b0e:	4605      	mov	r5, r0
 8010b10:	b930      	cbnz	r0, 8010b20 <_calloc_r+0x24>
 8010b12:	4628      	mov	r0, r5
 8010b14:	b003      	add	sp, #12
 8010b16:	bd30      	pop	{r4, r5, pc}
 8010b18:	220c      	movs	r2, #12
 8010b1a:	6002      	str	r2, [r0, #0]
 8010b1c:	2500      	movs	r5, #0
 8010b1e:	e7f8      	b.n	8010b12 <_calloc_r+0x16>
 8010b20:	4621      	mov	r1, r4
 8010b22:	f7fd ff1d 	bl	800e960 <memset>
 8010b26:	e7f4      	b.n	8010b12 <_calloc_r+0x16>

08010b28 <_free_r>:
 8010b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b2a:	2900      	cmp	r1, #0
 8010b2c:	d044      	beq.n	8010bb8 <_free_r+0x90>
 8010b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b32:	9001      	str	r0, [sp, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f1a1 0404 	sub.w	r4, r1, #4
 8010b3a:	bfb8      	it	lt
 8010b3c:	18e4      	addlt	r4, r4, r3
 8010b3e:	f7ff fc4d 	bl	80103dc <__malloc_lock>
 8010b42:	4a1e      	ldr	r2, [pc, #120]	; (8010bbc <_free_r+0x94>)
 8010b44:	9801      	ldr	r0, [sp, #4]
 8010b46:	6813      	ldr	r3, [r2, #0]
 8010b48:	b933      	cbnz	r3, 8010b58 <_free_r+0x30>
 8010b4a:	6063      	str	r3, [r4, #4]
 8010b4c:	6014      	str	r4, [r2, #0]
 8010b4e:	b003      	add	sp, #12
 8010b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b54:	f7ff bc48 	b.w	80103e8 <__malloc_unlock>
 8010b58:	42a3      	cmp	r3, r4
 8010b5a:	d908      	bls.n	8010b6e <_free_r+0x46>
 8010b5c:	6825      	ldr	r5, [r4, #0]
 8010b5e:	1961      	adds	r1, r4, r5
 8010b60:	428b      	cmp	r3, r1
 8010b62:	bf01      	itttt	eq
 8010b64:	6819      	ldreq	r1, [r3, #0]
 8010b66:	685b      	ldreq	r3, [r3, #4]
 8010b68:	1949      	addeq	r1, r1, r5
 8010b6a:	6021      	streq	r1, [r4, #0]
 8010b6c:	e7ed      	b.n	8010b4a <_free_r+0x22>
 8010b6e:	461a      	mov	r2, r3
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	b10b      	cbz	r3, 8010b78 <_free_r+0x50>
 8010b74:	42a3      	cmp	r3, r4
 8010b76:	d9fa      	bls.n	8010b6e <_free_r+0x46>
 8010b78:	6811      	ldr	r1, [r2, #0]
 8010b7a:	1855      	adds	r5, r2, r1
 8010b7c:	42a5      	cmp	r5, r4
 8010b7e:	d10b      	bne.n	8010b98 <_free_r+0x70>
 8010b80:	6824      	ldr	r4, [r4, #0]
 8010b82:	4421      	add	r1, r4
 8010b84:	1854      	adds	r4, r2, r1
 8010b86:	42a3      	cmp	r3, r4
 8010b88:	6011      	str	r1, [r2, #0]
 8010b8a:	d1e0      	bne.n	8010b4e <_free_r+0x26>
 8010b8c:	681c      	ldr	r4, [r3, #0]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	6053      	str	r3, [r2, #4]
 8010b92:	4421      	add	r1, r4
 8010b94:	6011      	str	r1, [r2, #0]
 8010b96:	e7da      	b.n	8010b4e <_free_r+0x26>
 8010b98:	d902      	bls.n	8010ba0 <_free_r+0x78>
 8010b9a:	230c      	movs	r3, #12
 8010b9c:	6003      	str	r3, [r0, #0]
 8010b9e:	e7d6      	b.n	8010b4e <_free_r+0x26>
 8010ba0:	6825      	ldr	r5, [r4, #0]
 8010ba2:	1961      	adds	r1, r4, r5
 8010ba4:	428b      	cmp	r3, r1
 8010ba6:	bf04      	itt	eq
 8010ba8:	6819      	ldreq	r1, [r3, #0]
 8010baa:	685b      	ldreq	r3, [r3, #4]
 8010bac:	6063      	str	r3, [r4, #4]
 8010bae:	bf04      	itt	eq
 8010bb0:	1949      	addeq	r1, r1, r5
 8010bb2:	6021      	streq	r1, [r4, #0]
 8010bb4:	6054      	str	r4, [r2, #4]
 8010bb6:	e7ca      	b.n	8010b4e <_free_r+0x26>
 8010bb8:	b003      	add	sp, #12
 8010bba:	bd30      	pop	{r4, r5, pc}
 8010bbc:	2400a6fc 	.word	0x2400a6fc

08010bc0 <_read_r>:
 8010bc0:	b538      	push	{r3, r4, r5, lr}
 8010bc2:	4d07      	ldr	r5, [pc, #28]	; (8010be0 <_read_r+0x20>)
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	4608      	mov	r0, r1
 8010bc8:	4611      	mov	r1, r2
 8010bca:	2200      	movs	r2, #0
 8010bcc:	602a      	str	r2, [r5, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	f7f0 fb02 	bl	80011d8 <_read>
 8010bd4:	1c43      	adds	r3, r0, #1
 8010bd6:	d102      	bne.n	8010bde <_read_r+0x1e>
 8010bd8:	682b      	ldr	r3, [r5, #0]
 8010bda:	b103      	cbz	r3, 8010bde <_read_r+0x1e>
 8010bdc:	6023      	str	r3, [r4, #0]
 8010bde:	bd38      	pop	{r3, r4, r5, pc}
 8010be0:	2400a704 	.word	0x2400a704

08010be4 <__assert_func>:
 8010be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010be6:	4614      	mov	r4, r2
 8010be8:	461a      	mov	r2, r3
 8010bea:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <__assert_func+0x2c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4605      	mov	r5, r0
 8010bf0:	68d8      	ldr	r0, [r3, #12]
 8010bf2:	b14c      	cbz	r4, 8010c08 <__assert_func+0x24>
 8010bf4:	4b07      	ldr	r3, [pc, #28]	; (8010c14 <__assert_func+0x30>)
 8010bf6:	9100      	str	r1, [sp, #0]
 8010bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bfc:	4906      	ldr	r1, [pc, #24]	; (8010c18 <__assert_func+0x34>)
 8010bfe:	462b      	mov	r3, r5
 8010c00:	f000 f80e 	bl	8010c20 <fiprintf>
 8010c04:	f7fd fd53 	bl	800e6ae <abort>
 8010c08:	4b04      	ldr	r3, [pc, #16]	; (8010c1c <__assert_func+0x38>)
 8010c0a:	461c      	mov	r4, r3
 8010c0c:	e7f3      	b.n	8010bf6 <__assert_func+0x12>
 8010c0e:	bf00      	nop
 8010c10:	24000020 	.word	0x24000020
 8010c14:	08011e3c 	.word	0x08011e3c
 8010c18:	08011e49 	.word	0x08011e49
 8010c1c:	08011e77 	.word	0x08011e77

08010c20 <fiprintf>:
 8010c20:	b40e      	push	{r1, r2, r3}
 8010c22:	b503      	push	{r0, r1, lr}
 8010c24:	4601      	mov	r1, r0
 8010c26:	ab03      	add	r3, sp, #12
 8010c28:	4805      	ldr	r0, [pc, #20]	; (8010c40 <fiprintf+0x20>)
 8010c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c2e:	6800      	ldr	r0, [r0, #0]
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	f000 f843 	bl	8010cbc <_vfiprintf_r>
 8010c36:	b002      	add	sp, #8
 8010c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c3c:	b003      	add	sp, #12
 8010c3e:	4770      	bx	lr
 8010c40:	24000020 	.word	0x24000020

08010c44 <__ascii_mbtowc>:
 8010c44:	b082      	sub	sp, #8
 8010c46:	b901      	cbnz	r1, 8010c4a <__ascii_mbtowc+0x6>
 8010c48:	a901      	add	r1, sp, #4
 8010c4a:	b142      	cbz	r2, 8010c5e <__ascii_mbtowc+0x1a>
 8010c4c:	b14b      	cbz	r3, 8010c62 <__ascii_mbtowc+0x1e>
 8010c4e:	7813      	ldrb	r3, [r2, #0]
 8010c50:	600b      	str	r3, [r1, #0]
 8010c52:	7812      	ldrb	r2, [r2, #0]
 8010c54:	1e10      	subs	r0, r2, #0
 8010c56:	bf18      	it	ne
 8010c58:	2001      	movne	r0, #1
 8010c5a:	b002      	add	sp, #8
 8010c5c:	4770      	bx	lr
 8010c5e:	4610      	mov	r0, r2
 8010c60:	e7fb      	b.n	8010c5a <__ascii_mbtowc+0x16>
 8010c62:	f06f 0001 	mvn.w	r0, #1
 8010c66:	e7f8      	b.n	8010c5a <__ascii_mbtowc+0x16>

08010c68 <__sfputc_r>:
 8010c68:	6893      	ldr	r3, [r2, #8]
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	b410      	push	{r4}
 8010c70:	6093      	str	r3, [r2, #8]
 8010c72:	da08      	bge.n	8010c86 <__sfputc_r+0x1e>
 8010c74:	6994      	ldr	r4, [r2, #24]
 8010c76:	42a3      	cmp	r3, r4
 8010c78:	db01      	blt.n	8010c7e <__sfputc_r+0x16>
 8010c7a:	290a      	cmp	r1, #10
 8010c7c:	d103      	bne.n	8010c86 <__sfputc_r+0x1e>
 8010c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c82:	f000 b94b 	b.w	8010f1c <__swbuf_r>
 8010c86:	6813      	ldr	r3, [r2, #0]
 8010c88:	1c58      	adds	r0, r3, #1
 8010c8a:	6010      	str	r0, [r2, #0]
 8010c8c:	7019      	strb	r1, [r3, #0]
 8010c8e:	4608      	mov	r0, r1
 8010c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <__sfputs_r>:
 8010c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c98:	4606      	mov	r6, r0
 8010c9a:	460f      	mov	r7, r1
 8010c9c:	4614      	mov	r4, r2
 8010c9e:	18d5      	adds	r5, r2, r3
 8010ca0:	42ac      	cmp	r4, r5
 8010ca2:	d101      	bne.n	8010ca8 <__sfputs_r+0x12>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	e007      	b.n	8010cb8 <__sfputs_r+0x22>
 8010ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cac:	463a      	mov	r2, r7
 8010cae:	4630      	mov	r0, r6
 8010cb0:	f7ff ffda 	bl	8010c68 <__sfputc_r>
 8010cb4:	1c43      	adds	r3, r0, #1
 8010cb6:	d1f3      	bne.n	8010ca0 <__sfputs_r+0xa>
 8010cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cbc <_vfiprintf_r>:
 8010cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc0:	460d      	mov	r5, r1
 8010cc2:	b09d      	sub	sp, #116	; 0x74
 8010cc4:	4614      	mov	r4, r2
 8010cc6:	4698      	mov	r8, r3
 8010cc8:	4606      	mov	r6, r0
 8010cca:	b118      	cbz	r0, 8010cd4 <_vfiprintf_r+0x18>
 8010ccc:	6983      	ldr	r3, [r0, #24]
 8010cce:	b90b      	cbnz	r3, 8010cd4 <_vfiprintf_r+0x18>
 8010cd0:	f7fd fd58 	bl	800e784 <__sinit>
 8010cd4:	4b89      	ldr	r3, [pc, #548]	; (8010efc <_vfiprintf_r+0x240>)
 8010cd6:	429d      	cmp	r5, r3
 8010cd8:	d11b      	bne.n	8010d12 <_vfiprintf_r+0x56>
 8010cda:	6875      	ldr	r5, [r6, #4]
 8010cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cde:	07d9      	lsls	r1, r3, #31
 8010ce0:	d405      	bmi.n	8010cee <_vfiprintf_r+0x32>
 8010ce2:	89ab      	ldrh	r3, [r5, #12]
 8010ce4:	059a      	lsls	r2, r3, #22
 8010ce6:	d402      	bmi.n	8010cee <_vfiprintf_r+0x32>
 8010ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cea:	f7fd fe0e 	bl	800e90a <__retarget_lock_acquire_recursive>
 8010cee:	89ab      	ldrh	r3, [r5, #12]
 8010cf0:	071b      	lsls	r3, r3, #28
 8010cf2:	d501      	bpl.n	8010cf8 <_vfiprintf_r+0x3c>
 8010cf4:	692b      	ldr	r3, [r5, #16]
 8010cf6:	b9eb      	cbnz	r3, 8010d34 <_vfiprintf_r+0x78>
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	f000 f96e 	bl	8010fdc <__swsetup_r>
 8010d00:	b1c0      	cbz	r0, 8010d34 <_vfiprintf_r+0x78>
 8010d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d04:	07dc      	lsls	r4, r3, #31
 8010d06:	d50e      	bpl.n	8010d26 <_vfiprintf_r+0x6a>
 8010d08:	f04f 30ff 	mov.w	r0, #4294967295
 8010d0c:	b01d      	add	sp, #116	; 0x74
 8010d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d12:	4b7b      	ldr	r3, [pc, #492]	; (8010f00 <_vfiprintf_r+0x244>)
 8010d14:	429d      	cmp	r5, r3
 8010d16:	d101      	bne.n	8010d1c <_vfiprintf_r+0x60>
 8010d18:	68b5      	ldr	r5, [r6, #8]
 8010d1a:	e7df      	b.n	8010cdc <_vfiprintf_r+0x20>
 8010d1c:	4b79      	ldr	r3, [pc, #484]	; (8010f04 <_vfiprintf_r+0x248>)
 8010d1e:	429d      	cmp	r5, r3
 8010d20:	bf08      	it	eq
 8010d22:	68f5      	ldreq	r5, [r6, #12]
 8010d24:	e7da      	b.n	8010cdc <_vfiprintf_r+0x20>
 8010d26:	89ab      	ldrh	r3, [r5, #12]
 8010d28:	0598      	lsls	r0, r3, #22
 8010d2a:	d4ed      	bmi.n	8010d08 <_vfiprintf_r+0x4c>
 8010d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d2e:	f7fd fdee 	bl	800e90e <__retarget_lock_release_recursive>
 8010d32:	e7e9      	b.n	8010d08 <_vfiprintf_r+0x4c>
 8010d34:	2300      	movs	r3, #0
 8010d36:	9309      	str	r3, [sp, #36]	; 0x24
 8010d38:	2320      	movs	r3, #32
 8010d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d42:	2330      	movs	r3, #48	; 0x30
 8010d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f08 <_vfiprintf_r+0x24c>
 8010d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d4c:	f04f 0901 	mov.w	r9, #1
 8010d50:	4623      	mov	r3, r4
 8010d52:	469a      	mov	sl, r3
 8010d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d58:	b10a      	cbz	r2, 8010d5e <_vfiprintf_r+0xa2>
 8010d5a:	2a25      	cmp	r2, #37	; 0x25
 8010d5c:	d1f9      	bne.n	8010d52 <_vfiprintf_r+0x96>
 8010d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d62:	d00b      	beq.n	8010d7c <_vfiprintf_r+0xc0>
 8010d64:	465b      	mov	r3, fp
 8010d66:	4622      	mov	r2, r4
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f7ff ff93 	bl	8010c96 <__sfputs_r>
 8010d70:	3001      	adds	r0, #1
 8010d72:	f000 80aa 	beq.w	8010eca <_vfiprintf_r+0x20e>
 8010d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d78:	445a      	add	r2, fp
 8010d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f000 80a2 	beq.w	8010eca <_vfiprintf_r+0x20e>
 8010d86:	2300      	movs	r3, #0
 8010d88:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d90:	f10a 0a01 	add.w	sl, sl, #1
 8010d94:	9304      	str	r3, [sp, #16]
 8010d96:	9307      	str	r3, [sp, #28]
 8010d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d9e:	4654      	mov	r4, sl
 8010da0:	2205      	movs	r2, #5
 8010da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010da6:	4858      	ldr	r0, [pc, #352]	; (8010f08 <_vfiprintf_r+0x24c>)
 8010da8:	f7ef fab2 	bl	8000310 <memchr>
 8010dac:	9a04      	ldr	r2, [sp, #16]
 8010dae:	b9d8      	cbnz	r0, 8010de8 <_vfiprintf_r+0x12c>
 8010db0:	06d1      	lsls	r1, r2, #27
 8010db2:	bf44      	itt	mi
 8010db4:	2320      	movmi	r3, #32
 8010db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dba:	0713      	lsls	r3, r2, #28
 8010dbc:	bf44      	itt	mi
 8010dbe:	232b      	movmi	r3, #43	; 0x2b
 8010dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dca:	d015      	beq.n	8010df8 <_vfiprintf_r+0x13c>
 8010dcc:	9a07      	ldr	r2, [sp, #28]
 8010dce:	4654      	mov	r4, sl
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	f04f 0c0a 	mov.w	ip, #10
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ddc:	3b30      	subs	r3, #48	; 0x30
 8010dde:	2b09      	cmp	r3, #9
 8010de0:	d94e      	bls.n	8010e80 <_vfiprintf_r+0x1c4>
 8010de2:	b1b0      	cbz	r0, 8010e12 <_vfiprintf_r+0x156>
 8010de4:	9207      	str	r2, [sp, #28]
 8010de6:	e014      	b.n	8010e12 <_vfiprintf_r+0x156>
 8010de8:	eba0 0308 	sub.w	r3, r0, r8
 8010dec:	fa09 f303 	lsl.w	r3, r9, r3
 8010df0:	4313      	orrs	r3, r2
 8010df2:	9304      	str	r3, [sp, #16]
 8010df4:	46a2      	mov	sl, r4
 8010df6:	e7d2      	b.n	8010d9e <_vfiprintf_r+0xe2>
 8010df8:	9b03      	ldr	r3, [sp, #12]
 8010dfa:	1d19      	adds	r1, r3, #4
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	9103      	str	r1, [sp, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bfbb      	ittet	lt
 8010e04:	425b      	neglt	r3, r3
 8010e06:	f042 0202 	orrlt.w	r2, r2, #2
 8010e0a:	9307      	strge	r3, [sp, #28]
 8010e0c:	9307      	strlt	r3, [sp, #28]
 8010e0e:	bfb8      	it	lt
 8010e10:	9204      	strlt	r2, [sp, #16]
 8010e12:	7823      	ldrb	r3, [r4, #0]
 8010e14:	2b2e      	cmp	r3, #46	; 0x2e
 8010e16:	d10c      	bne.n	8010e32 <_vfiprintf_r+0x176>
 8010e18:	7863      	ldrb	r3, [r4, #1]
 8010e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e1c:	d135      	bne.n	8010e8a <_vfiprintf_r+0x1ce>
 8010e1e:	9b03      	ldr	r3, [sp, #12]
 8010e20:	1d1a      	adds	r2, r3, #4
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	9203      	str	r2, [sp, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	bfb8      	it	lt
 8010e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e2e:	3402      	adds	r4, #2
 8010e30:	9305      	str	r3, [sp, #20]
 8010e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f18 <_vfiprintf_r+0x25c>
 8010e36:	7821      	ldrb	r1, [r4, #0]
 8010e38:	2203      	movs	r2, #3
 8010e3a:	4650      	mov	r0, sl
 8010e3c:	f7ef fa68 	bl	8000310 <memchr>
 8010e40:	b140      	cbz	r0, 8010e54 <_vfiprintf_r+0x198>
 8010e42:	2340      	movs	r3, #64	; 0x40
 8010e44:	eba0 000a 	sub.w	r0, r0, sl
 8010e48:	fa03 f000 	lsl.w	r0, r3, r0
 8010e4c:	9b04      	ldr	r3, [sp, #16]
 8010e4e:	4303      	orrs	r3, r0
 8010e50:	3401      	adds	r4, #1
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e58:	482c      	ldr	r0, [pc, #176]	; (8010f0c <_vfiprintf_r+0x250>)
 8010e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e5e:	2206      	movs	r2, #6
 8010e60:	f7ef fa56 	bl	8000310 <memchr>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d03f      	beq.n	8010ee8 <_vfiprintf_r+0x22c>
 8010e68:	4b29      	ldr	r3, [pc, #164]	; (8010f10 <_vfiprintf_r+0x254>)
 8010e6a:	bb1b      	cbnz	r3, 8010eb4 <_vfiprintf_r+0x1f8>
 8010e6c:	9b03      	ldr	r3, [sp, #12]
 8010e6e:	3307      	adds	r3, #7
 8010e70:	f023 0307 	bic.w	r3, r3, #7
 8010e74:	3308      	adds	r3, #8
 8010e76:	9303      	str	r3, [sp, #12]
 8010e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e7a:	443b      	add	r3, r7
 8010e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e7e:	e767      	b.n	8010d50 <_vfiprintf_r+0x94>
 8010e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e84:	460c      	mov	r4, r1
 8010e86:	2001      	movs	r0, #1
 8010e88:	e7a5      	b.n	8010dd6 <_vfiprintf_r+0x11a>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	3401      	adds	r4, #1
 8010e8e:	9305      	str	r3, [sp, #20]
 8010e90:	4619      	mov	r1, r3
 8010e92:	f04f 0c0a 	mov.w	ip, #10
 8010e96:	4620      	mov	r0, r4
 8010e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e9c:	3a30      	subs	r2, #48	; 0x30
 8010e9e:	2a09      	cmp	r2, #9
 8010ea0:	d903      	bls.n	8010eaa <_vfiprintf_r+0x1ee>
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d0c5      	beq.n	8010e32 <_vfiprintf_r+0x176>
 8010ea6:	9105      	str	r1, [sp, #20]
 8010ea8:	e7c3      	b.n	8010e32 <_vfiprintf_r+0x176>
 8010eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eae:	4604      	mov	r4, r0
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	e7f0      	b.n	8010e96 <_vfiprintf_r+0x1da>
 8010eb4:	ab03      	add	r3, sp, #12
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	462a      	mov	r2, r5
 8010eba:	4b16      	ldr	r3, [pc, #88]	; (8010f14 <_vfiprintf_r+0x258>)
 8010ebc:	a904      	add	r1, sp, #16
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f7fd fe7a 	bl	800ebb8 <_printf_float>
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	1c78      	adds	r0, r7, #1
 8010ec8:	d1d6      	bne.n	8010e78 <_vfiprintf_r+0x1bc>
 8010eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ecc:	07d9      	lsls	r1, r3, #31
 8010ece:	d405      	bmi.n	8010edc <_vfiprintf_r+0x220>
 8010ed0:	89ab      	ldrh	r3, [r5, #12]
 8010ed2:	059a      	lsls	r2, r3, #22
 8010ed4:	d402      	bmi.n	8010edc <_vfiprintf_r+0x220>
 8010ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ed8:	f7fd fd19 	bl	800e90e <__retarget_lock_release_recursive>
 8010edc:	89ab      	ldrh	r3, [r5, #12]
 8010ede:	065b      	lsls	r3, r3, #25
 8010ee0:	f53f af12 	bmi.w	8010d08 <_vfiprintf_r+0x4c>
 8010ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ee6:	e711      	b.n	8010d0c <_vfiprintf_r+0x50>
 8010ee8:	ab03      	add	r3, sp, #12
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	462a      	mov	r2, r5
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <_vfiprintf_r+0x258>)
 8010ef0:	a904      	add	r1, sp, #16
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f7fe f8ec 	bl	800f0d0 <_printf_i>
 8010ef8:	e7e4      	b.n	8010ec4 <_vfiprintf_r+0x208>
 8010efa:	bf00      	nop
 8010efc:	08011bdc 	.word	0x08011bdc
 8010f00:	08011bfc 	.word	0x08011bfc
 8010f04:	08011bbc 	.word	0x08011bbc
 8010f08:	08011e82 	.word	0x08011e82
 8010f0c:	08011e8c 	.word	0x08011e8c
 8010f10:	0800ebb9 	.word	0x0800ebb9
 8010f14:	08010c97 	.word	0x08010c97
 8010f18:	08011e88 	.word	0x08011e88

08010f1c <__swbuf_r>:
 8010f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1e:	460e      	mov	r6, r1
 8010f20:	4614      	mov	r4, r2
 8010f22:	4605      	mov	r5, r0
 8010f24:	b118      	cbz	r0, 8010f2e <__swbuf_r+0x12>
 8010f26:	6983      	ldr	r3, [r0, #24]
 8010f28:	b90b      	cbnz	r3, 8010f2e <__swbuf_r+0x12>
 8010f2a:	f7fd fc2b 	bl	800e784 <__sinit>
 8010f2e:	4b21      	ldr	r3, [pc, #132]	; (8010fb4 <__swbuf_r+0x98>)
 8010f30:	429c      	cmp	r4, r3
 8010f32:	d12b      	bne.n	8010f8c <__swbuf_r+0x70>
 8010f34:	686c      	ldr	r4, [r5, #4]
 8010f36:	69a3      	ldr	r3, [r4, #24]
 8010f38:	60a3      	str	r3, [r4, #8]
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	071a      	lsls	r2, r3, #28
 8010f3e:	d52f      	bpl.n	8010fa0 <__swbuf_r+0x84>
 8010f40:	6923      	ldr	r3, [r4, #16]
 8010f42:	b36b      	cbz	r3, 8010fa0 <__swbuf_r+0x84>
 8010f44:	6923      	ldr	r3, [r4, #16]
 8010f46:	6820      	ldr	r0, [r4, #0]
 8010f48:	1ac0      	subs	r0, r0, r3
 8010f4a:	6963      	ldr	r3, [r4, #20]
 8010f4c:	b2f6      	uxtb	r6, r6
 8010f4e:	4283      	cmp	r3, r0
 8010f50:	4637      	mov	r7, r6
 8010f52:	dc04      	bgt.n	8010f5e <__swbuf_r+0x42>
 8010f54:	4621      	mov	r1, r4
 8010f56:	4628      	mov	r0, r5
 8010f58:	f7ff f9e6 	bl	8010328 <_fflush_r>
 8010f5c:	bb30      	cbnz	r0, 8010fac <__swbuf_r+0x90>
 8010f5e:	68a3      	ldr	r3, [r4, #8]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	60a3      	str	r3, [r4, #8]
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	6022      	str	r2, [r4, #0]
 8010f6a:	701e      	strb	r6, [r3, #0]
 8010f6c:	6963      	ldr	r3, [r4, #20]
 8010f6e:	3001      	adds	r0, #1
 8010f70:	4283      	cmp	r3, r0
 8010f72:	d004      	beq.n	8010f7e <__swbuf_r+0x62>
 8010f74:	89a3      	ldrh	r3, [r4, #12]
 8010f76:	07db      	lsls	r3, r3, #31
 8010f78:	d506      	bpl.n	8010f88 <__swbuf_r+0x6c>
 8010f7a:	2e0a      	cmp	r6, #10
 8010f7c:	d104      	bne.n	8010f88 <__swbuf_r+0x6c>
 8010f7e:	4621      	mov	r1, r4
 8010f80:	4628      	mov	r0, r5
 8010f82:	f7ff f9d1 	bl	8010328 <_fflush_r>
 8010f86:	b988      	cbnz	r0, 8010fac <__swbuf_r+0x90>
 8010f88:	4638      	mov	r0, r7
 8010f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <__swbuf_r+0x9c>)
 8010f8e:	429c      	cmp	r4, r3
 8010f90:	d101      	bne.n	8010f96 <__swbuf_r+0x7a>
 8010f92:	68ac      	ldr	r4, [r5, #8]
 8010f94:	e7cf      	b.n	8010f36 <__swbuf_r+0x1a>
 8010f96:	4b09      	ldr	r3, [pc, #36]	; (8010fbc <__swbuf_r+0xa0>)
 8010f98:	429c      	cmp	r4, r3
 8010f9a:	bf08      	it	eq
 8010f9c:	68ec      	ldreq	r4, [r5, #12]
 8010f9e:	e7ca      	b.n	8010f36 <__swbuf_r+0x1a>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f000 f81a 	bl	8010fdc <__swsetup_r>
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	d0cb      	beq.n	8010f44 <__swbuf_r+0x28>
 8010fac:	f04f 37ff 	mov.w	r7, #4294967295
 8010fb0:	e7ea      	b.n	8010f88 <__swbuf_r+0x6c>
 8010fb2:	bf00      	nop
 8010fb4:	08011bdc 	.word	0x08011bdc
 8010fb8:	08011bfc 	.word	0x08011bfc
 8010fbc:	08011bbc 	.word	0x08011bbc

08010fc0 <__ascii_wctomb>:
 8010fc0:	b149      	cbz	r1, 8010fd6 <__ascii_wctomb+0x16>
 8010fc2:	2aff      	cmp	r2, #255	; 0xff
 8010fc4:	bf85      	ittet	hi
 8010fc6:	238a      	movhi	r3, #138	; 0x8a
 8010fc8:	6003      	strhi	r3, [r0, #0]
 8010fca:	700a      	strbls	r2, [r1, #0]
 8010fcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010fd0:	bf98      	it	ls
 8010fd2:	2001      	movls	r0, #1
 8010fd4:	4770      	bx	lr
 8010fd6:	4608      	mov	r0, r1
 8010fd8:	4770      	bx	lr
	...

08010fdc <__swsetup_r>:
 8010fdc:	4b32      	ldr	r3, [pc, #200]	; (80110a8 <__swsetup_r+0xcc>)
 8010fde:	b570      	push	{r4, r5, r6, lr}
 8010fe0:	681d      	ldr	r5, [r3, #0]
 8010fe2:	4606      	mov	r6, r0
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	b125      	cbz	r5, 8010ff2 <__swsetup_r+0x16>
 8010fe8:	69ab      	ldr	r3, [r5, #24]
 8010fea:	b913      	cbnz	r3, 8010ff2 <__swsetup_r+0x16>
 8010fec:	4628      	mov	r0, r5
 8010fee:	f7fd fbc9 	bl	800e784 <__sinit>
 8010ff2:	4b2e      	ldr	r3, [pc, #184]	; (80110ac <__swsetup_r+0xd0>)
 8010ff4:	429c      	cmp	r4, r3
 8010ff6:	d10f      	bne.n	8011018 <__swsetup_r+0x3c>
 8010ff8:	686c      	ldr	r4, [r5, #4]
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011000:	0719      	lsls	r1, r3, #28
 8011002:	d42c      	bmi.n	801105e <__swsetup_r+0x82>
 8011004:	06dd      	lsls	r5, r3, #27
 8011006:	d411      	bmi.n	801102c <__swsetup_r+0x50>
 8011008:	2309      	movs	r3, #9
 801100a:	6033      	str	r3, [r6, #0]
 801100c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011010:	81a3      	strh	r3, [r4, #12]
 8011012:	f04f 30ff 	mov.w	r0, #4294967295
 8011016:	e03e      	b.n	8011096 <__swsetup_r+0xba>
 8011018:	4b25      	ldr	r3, [pc, #148]	; (80110b0 <__swsetup_r+0xd4>)
 801101a:	429c      	cmp	r4, r3
 801101c:	d101      	bne.n	8011022 <__swsetup_r+0x46>
 801101e:	68ac      	ldr	r4, [r5, #8]
 8011020:	e7eb      	b.n	8010ffa <__swsetup_r+0x1e>
 8011022:	4b24      	ldr	r3, [pc, #144]	; (80110b4 <__swsetup_r+0xd8>)
 8011024:	429c      	cmp	r4, r3
 8011026:	bf08      	it	eq
 8011028:	68ec      	ldreq	r4, [r5, #12]
 801102a:	e7e6      	b.n	8010ffa <__swsetup_r+0x1e>
 801102c:	0758      	lsls	r0, r3, #29
 801102e:	d512      	bpl.n	8011056 <__swsetup_r+0x7a>
 8011030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011032:	b141      	cbz	r1, 8011046 <__swsetup_r+0x6a>
 8011034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011038:	4299      	cmp	r1, r3
 801103a:	d002      	beq.n	8011042 <__swsetup_r+0x66>
 801103c:	4630      	mov	r0, r6
 801103e:	f7ff fd73 	bl	8010b28 <_free_r>
 8011042:	2300      	movs	r3, #0
 8011044:	6363      	str	r3, [r4, #52]	; 0x34
 8011046:	89a3      	ldrh	r3, [r4, #12]
 8011048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801104c:	81a3      	strh	r3, [r4, #12]
 801104e:	2300      	movs	r3, #0
 8011050:	6063      	str	r3, [r4, #4]
 8011052:	6923      	ldr	r3, [r4, #16]
 8011054:	6023      	str	r3, [r4, #0]
 8011056:	89a3      	ldrh	r3, [r4, #12]
 8011058:	f043 0308 	orr.w	r3, r3, #8
 801105c:	81a3      	strh	r3, [r4, #12]
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	b94b      	cbnz	r3, 8011076 <__swsetup_r+0x9a>
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801106c:	d003      	beq.n	8011076 <__swsetup_r+0x9a>
 801106e:	4621      	mov	r1, r4
 8011070:	4630      	mov	r0, r6
 8011072:	f000 f847 	bl	8011104 <__smakebuf_r>
 8011076:	89a0      	ldrh	r0, [r4, #12]
 8011078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801107c:	f010 0301 	ands.w	r3, r0, #1
 8011080:	d00a      	beq.n	8011098 <__swsetup_r+0xbc>
 8011082:	2300      	movs	r3, #0
 8011084:	60a3      	str	r3, [r4, #8]
 8011086:	6963      	ldr	r3, [r4, #20]
 8011088:	425b      	negs	r3, r3
 801108a:	61a3      	str	r3, [r4, #24]
 801108c:	6923      	ldr	r3, [r4, #16]
 801108e:	b943      	cbnz	r3, 80110a2 <__swsetup_r+0xc6>
 8011090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011094:	d1ba      	bne.n	801100c <__swsetup_r+0x30>
 8011096:	bd70      	pop	{r4, r5, r6, pc}
 8011098:	0781      	lsls	r1, r0, #30
 801109a:	bf58      	it	pl
 801109c:	6963      	ldrpl	r3, [r4, #20]
 801109e:	60a3      	str	r3, [r4, #8]
 80110a0:	e7f4      	b.n	801108c <__swsetup_r+0xb0>
 80110a2:	2000      	movs	r0, #0
 80110a4:	e7f7      	b.n	8011096 <__swsetup_r+0xba>
 80110a6:	bf00      	nop
 80110a8:	24000020 	.word	0x24000020
 80110ac:	08011bdc 	.word	0x08011bdc
 80110b0:	08011bfc 	.word	0x08011bfc
 80110b4:	08011bbc 	.word	0x08011bbc

080110b8 <__swhatbuf_r>:
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	460e      	mov	r6, r1
 80110bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110c0:	2900      	cmp	r1, #0
 80110c2:	b096      	sub	sp, #88	; 0x58
 80110c4:	4614      	mov	r4, r2
 80110c6:	461d      	mov	r5, r3
 80110c8:	da08      	bge.n	80110dc <__swhatbuf_r+0x24>
 80110ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	061a      	lsls	r2, r3, #24
 80110d4:	d410      	bmi.n	80110f8 <__swhatbuf_r+0x40>
 80110d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110da:	e00e      	b.n	80110fa <__swhatbuf_r+0x42>
 80110dc:	466a      	mov	r2, sp
 80110de:	f000 f851 	bl	8011184 <_fstat_r>
 80110e2:	2800      	cmp	r0, #0
 80110e4:	dbf1      	blt.n	80110ca <__swhatbuf_r+0x12>
 80110e6:	9a01      	ldr	r2, [sp, #4]
 80110e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80110ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80110f0:	425a      	negs	r2, r3
 80110f2:	415a      	adcs	r2, r3
 80110f4:	602a      	str	r2, [r5, #0]
 80110f6:	e7ee      	b.n	80110d6 <__swhatbuf_r+0x1e>
 80110f8:	2340      	movs	r3, #64	; 0x40
 80110fa:	2000      	movs	r0, #0
 80110fc:	6023      	str	r3, [r4, #0]
 80110fe:	b016      	add	sp, #88	; 0x58
 8011100:	bd70      	pop	{r4, r5, r6, pc}
	...

08011104 <__smakebuf_r>:
 8011104:	898b      	ldrh	r3, [r1, #12]
 8011106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011108:	079d      	lsls	r5, r3, #30
 801110a:	4606      	mov	r6, r0
 801110c:	460c      	mov	r4, r1
 801110e:	d507      	bpl.n	8011120 <__smakebuf_r+0x1c>
 8011110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	6123      	str	r3, [r4, #16]
 8011118:	2301      	movs	r3, #1
 801111a:	6163      	str	r3, [r4, #20]
 801111c:	b002      	add	sp, #8
 801111e:	bd70      	pop	{r4, r5, r6, pc}
 8011120:	ab01      	add	r3, sp, #4
 8011122:	466a      	mov	r2, sp
 8011124:	f7ff ffc8 	bl	80110b8 <__swhatbuf_r>
 8011128:	9900      	ldr	r1, [sp, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	4630      	mov	r0, r6
 801112e:	f7fd fc3f 	bl	800e9b0 <_malloc_r>
 8011132:	b948      	cbnz	r0, 8011148 <__smakebuf_r+0x44>
 8011134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011138:	059a      	lsls	r2, r3, #22
 801113a:	d4ef      	bmi.n	801111c <__smakebuf_r+0x18>
 801113c:	f023 0303 	bic.w	r3, r3, #3
 8011140:	f043 0302 	orr.w	r3, r3, #2
 8011144:	81a3      	strh	r3, [r4, #12]
 8011146:	e7e3      	b.n	8011110 <__smakebuf_r+0xc>
 8011148:	4b0d      	ldr	r3, [pc, #52]	; (8011180 <__smakebuf_r+0x7c>)
 801114a:	62b3      	str	r3, [r6, #40]	; 0x28
 801114c:	89a3      	ldrh	r3, [r4, #12]
 801114e:	6020      	str	r0, [r4, #0]
 8011150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011154:	81a3      	strh	r3, [r4, #12]
 8011156:	9b00      	ldr	r3, [sp, #0]
 8011158:	6163      	str	r3, [r4, #20]
 801115a:	9b01      	ldr	r3, [sp, #4]
 801115c:	6120      	str	r0, [r4, #16]
 801115e:	b15b      	cbz	r3, 8011178 <__smakebuf_r+0x74>
 8011160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011164:	4630      	mov	r0, r6
 8011166:	f000 f81f 	bl	80111a8 <_isatty_r>
 801116a:	b128      	cbz	r0, 8011178 <__smakebuf_r+0x74>
 801116c:	89a3      	ldrh	r3, [r4, #12]
 801116e:	f023 0303 	bic.w	r3, r3, #3
 8011172:	f043 0301 	orr.w	r3, r3, #1
 8011176:	81a3      	strh	r3, [r4, #12]
 8011178:	89a0      	ldrh	r0, [r4, #12]
 801117a:	4305      	orrs	r5, r0
 801117c:	81a5      	strh	r5, [r4, #12]
 801117e:	e7cd      	b.n	801111c <__smakebuf_r+0x18>
 8011180:	0800e71d 	.word	0x0800e71d

08011184 <_fstat_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d07      	ldr	r5, [pc, #28]	; (80111a4 <_fstat_r+0x20>)
 8011188:	2300      	movs	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	4611      	mov	r1, r2
 8011190:	602b      	str	r3, [r5, #0]
 8011192:	f7f0 f83e 	bl	8001212 <_fstat>
 8011196:	1c43      	adds	r3, r0, #1
 8011198:	d102      	bne.n	80111a0 <_fstat_r+0x1c>
 801119a:	682b      	ldr	r3, [r5, #0]
 801119c:	b103      	cbz	r3, 80111a0 <_fstat_r+0x1c>
 801119e:	6023      	str	r3, [r4, #0]
 80111a0:	bd38      	pop	{r3, r4, r5, pc}
 80111a2:	bf00      	nop
 80111a4:	2400a704 	.word	0x2400a704

080111a8 <_isatty_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4d06      	ldr	r5, [pc, #24]	; (80111c4 <_isatty_r+0x1c>)
 80111ac:	2300      	movs	r3, #0
 80111ae:	4604      	mov	r4, r0
 80111b0:	4608      	mov	r0, r1
 80111b2:	602b      	str	r3, [r5, #0]
 80111b4:	f7f0 f832 	bl	800121c <_isatty>
 80111b8:	1c43      	adds	r3, r0, #1
 80111ba:	d102      	bne.n	80111c2 <_isatty_r+0x1a>
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	b103      	cbz	r3, 80111c2 <_isatty_r+0x1a>
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	bd38      	pop	{r3, r4, r5, pc}
 80111c4:	2400a704 	.word	0x2400a704

080111c8 <_init>:
 80111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ca:	bf00      	nop
 80111cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ce:	bc08      	pop	{r3}
 80111d0:	469e      	mov	lr, r3
 80111d2:	4770      	bx	lr

080111d4 <_fini>:
 80111d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d6:	bf00      	nop
 80111d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111da:	bc08      	pop	{r3}
 80111dc:	469e      	mov	lr, r3
 80111de:	4770      	bx	lr
