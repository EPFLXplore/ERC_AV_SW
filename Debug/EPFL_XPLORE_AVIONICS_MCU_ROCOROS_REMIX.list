
EPFL_XPLORE_AVIONICS_MCU_ROCOROS_REMIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b748  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800b9e8  0800b9e8  0001b9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800c14c  0800c14c  0001c14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0800c158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004838  240001e4  0800c33c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a1c  0800c33c  00024a1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00056af0  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a278  00000000  00000000  00076d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000273e0  00000000  00000000  00080f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000022a8  00000000  00000000  000a8360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000033e8  00000000  00000000  000aa608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004cab2  00000000  00000000  000ad9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004f4cf  00000000  00000000  000fa4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c05c4  00000000  00000000  00149971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00309f35  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007a54  00000000  00000000  00309f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b9d0 	.word	0x0800b9d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800b9d0 	.word	0x0800b9d0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	2400      	movs	r4, #0
{
 80006b8:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	221c      	movs	r2, #28
 80006bc:	4621      	mov	r1, r4
 80006be:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 80006c0:	9402      	str	r4, [sp, #8]
 80006c2:	e9cd 4400 	strd	r4, r4, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	f008 fdac 	bl	8009222 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <MX_ADC1_Init+0x84>)
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ce:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d0:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006d2:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d4:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d8:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	2304      	movs	r3, #4
 80006de:	6103      	str	r3, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 80006e0:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
 80006e6:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ec:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	f002 f994 	bl	8002a1c <HAL_ADC_Init>
 80006f4:	b108      	cbz	r0, 80006fa <MX_ADC1_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 fdeb 	bl	80012d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fa:	4669      	mov	r1, sp
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fe:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000700:	f002 fa98 	bl	8002c34 <HAL_ADCEx_MultiModeConfigChannel>
 8000704:	b108      	cbz	r0, 800070a <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 8000706:	f000 fde3 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MX_ADC1_Init+0x8c>)
 800070c:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	a903      	add	r1, sp, #12
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_ADC1_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000716:	2300      	movs	r3, #0
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <MX_ADC1_Init+0x90>)
 800071a:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071e:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8000720:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 0;
 8000724:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	f001 ff10 	bl	800254c <HAL_ADC_ConfigChannel>
 800072c:	b108      	cbz	r0, 8000732 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800072e:	f000 fdcf 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000732:	b00a      	add	sp, #40	; 0x28
 8000734:	bd10      	pop	{r4, pc}
 8000736:	bf00      	nop
 8000738:	24000204 	.word	0x24000204
 800073c:	40022000 	.word	0x40022000
 8000740:	10c00010 	.word	0x10c00010
 8000744:	47ff0000 	.word	0x47ff0000

08000748 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000748:	b500      	push	{lr}
 800074a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074c:	221c      	movs	r2, #28
 800074e:	2100      	movs	r1, #0
 8000750:	a801      	add	r0, sp, #4
 8000752:	f008 fd66 	bl	8009222 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_ADC2_Init+0x70>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	2204      	movs	r2, #4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	4917      	ldr	r1, [pc, #92]	; (80007bc <MX_ADC2_Init+0x74>)
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 8000760:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000762:	8283      	strh	r3, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 8000764:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000766:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000768:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800076a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800076e:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000772:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800077a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077e:	f002 f94d 	bl	8002a1c <HAL_ADC_Init>
 8000782:	b108      	cbz	r0, 8000788 <MX_ADC2_Init+0x40>
  {
    Error_Handler();
 8000784:	f000 fda4 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <MX_ADC2_Init+0x78>)
 800078a:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <MX_ADC2_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000792:	2300      	movs	r3, #0
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <MX_ADC2_Init+0x7c>)
 8000796:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079a:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 800079c:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a0:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.Offset = 0;
 80007a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a8:	f001 fed0 	bl	800254c <HAL_ADC_ConfigChannel>
 80007ac:	b108      	cbz	r0, 80007b2 <MX_ADC2_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 fd8f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b2:	b009      	add	sp, #36	; 0x24
 80007b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80007b8:	24000268 	.word	0x24000268
 80007bc:	40022100 	.word	0x40022100
 80007c0:	10c00010 	.word	0x10c00010
 80007c4:	47ff0000 	.word	0x47ff0000

080007c8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007c8:	b500      	push	{lr}
 80007ca:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007cc:	221c      	movs	r2, #28
 80007ce:	2100      	movs	r1, #0
 80007d0:	a801      	add	r0, sp, #4
 80007d2:	f008 fd26 	bl	8009222 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007d6:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_ADC3_Init+0x70>)
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC3_Init+0x74>)
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	2204      	movs	r2, #4
  hadc3.Instance = ADC3;
 80007dc:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 80007e2:	2201      	movs	r2, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007e4:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 80007e6:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007e8:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ea:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007fc:	f002 f90e 	bl	8002a1c <HAL_ADC_Init>
 8000800:	b108      	cbz	r0, 8000806 <MX_ADC3_Init+0x3e>
  {
    Error_Handler();
 8000802:	f000 fd65 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <MX_ADC3_Init+0x78>)
 8000808:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_ADC3_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000810:	2300      	movs	r3, #0
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <MX_ADC3_Init+0x7c>)
 8000814:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000818:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 800081a:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800081e:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.Offset = 0;
 8000822:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000826:	f001 fe91 	bl	800254c <HAL_ADC_ConfigChannel>
 800082a:	b108      	cbz	r0, 8000830 <MX_ADC3_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 fd50 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000830:	b009      	add	sp, #36	; 0x24
 8000832:	f85d fb04 	ldr.w	pc, [sp], #4
 8000836:	bf00      	nop
 8000838:	240002cc 	.word	0x240002cc
 800083c:	58026000 	.word	0x58026000
 8000840:	2a000400 	.word	0x2a000400
 8000844:	47ff0000 	.word	0x47ff0000

08000848 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	b08f      	sub	sp, #60	; 0x3c
 800084c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	2214      	movs	r2, #20
 8000850:	2100      	movs	r1, #0
 8000852:	a809      	add	r0, sp, #36	; 0x24
 8000854:	f008 fce5 	bl	8009222 <memset>
  if(adcHandle->Instance==ADC1)
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	4a59      	ldr	r2, [pc, #356]	; (80009c0 <HAL_ADC_MspInit+0x178>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d13d      	bne.n	80008dc <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000860:	4a58      	ldr	r2, [pc, #352]	; (80009c4 <HAL_ADC_MspInit+0x17c>)
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000866:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800086a:	d10c      	bne.n	8000886 <HAL_ADC_MspInit+0x3e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800086c:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <HAL_ADC_MspInit+0x180>)
 800086e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000872:	f042 0220 	orr.w	r2, r2, #32
 8000876:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800087a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	9b00      	ldr	r3, [sp, #0]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <HAL_ADC_MspInit+0x180>)
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000888:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	a909      	add	r1, sp, #36	; 0x24
 800088c:	484f      	ldr	r0, [pc, #316]	; (80009cc <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000892:	f042 0204 	orr.w	r2, r2, #4
 8000896:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800089a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800089e:	f002 0204 	and.w	r2, r2, #4
 80008a2:	9201      	str	r2, [sp, #4]
 80008a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008aa:	f042 0202 	orr.w	r2, r2, #2
 80008ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2333      	movs	r3, #51	; 0x33
 80008c0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f003 fc70 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	a909      	add	r1, sp, #36	; 0x24
 80008d2:	483f      	ldr	r0, [pc, #252]	; (80009d0 <HAL_ADC_MspInit+0x188>)
    PC1     ------> ADC3_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f003 fc68 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008d8:	b00f      	add	sp, #60	; 0x3c
 80008da:	bd30      	pop	{r4, r5, pc}
  else if(adcHandle->Instance==ADC2)
 80008dc:	4a3d      	ldr	r2, [pc, #244]	; (80009d4 <HAL_ADC_MspInit+0x18c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d14c      	bne.n	800097c <HAL_ADC_MspInit+0x134>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e2:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <HAL_ADC_MspInit+0x17c>)
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008e8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ec:	d10c      	bne.n	8000908 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <HAL_ADC_MspInit+0x180>)
 80008f0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80008f4:	f042 0220 	orr.w	r2, r2, #32
 80008f8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80008fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	9303      	str	r3, [sp, #12]
 8000906:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <HAL_ADC_MspInit+0x180>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	a909      	add	r1, sp, #36	; 0x24
 800090e:	482f      	ldr	r0, [pc, #188]	; (80009cc <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	f042 0204 	orr.w	r2, r2, #4
 800091a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800091e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000922:	f002 0204 	and.w	r2, r2, #4
 8000926:	9204      	str	r2, [sp, #16]
 8000928:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000936:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800093a:	f002 0201 	and.w	r2, r2, #1
 800093e:	9205      	str	r2, [sp, #20]
 8000940:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000946:	f042 0202 	orr.w	r2, r2, #2
 800094a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	9306      	str	r3, [sp, #24]
 8000958:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2333      	movs	r3, #51	; 0x33
 800095c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	f003 fc22 	bl	80041a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000964:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	a909      	add	r1, sp, #36	; 0x24
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <HAL_ADC_MspInit+0x190>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f003 fc1a 	bl	80041a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	e7a9      	b.n	80008d0 <HAL_ADC_MspInit+0x88>
  else if(adcHandle->Instance==ADC3)
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_ADC_MspInit+0x194>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d1aa      	bne.n	80008d8 <HAL_ADC_MspInit+0x90>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_ADC_MspInit+0x180>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	a909      	add	r1, sp, #36	; 0x24
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800098c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000990:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000998:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800099c:	9207      	str	r2, [sp, #28]
 800099e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009a4:	f042 0204 	orr.w	r2, r2, #4
 80009a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	9308      	str	r3, [sp, #32]
 80009b6:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009b8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	e789      	b.n	80008d4 <HAL_ADC_MspInit+0x8c>
 80009c0:	40022000 	.word	0x40022000
 80009c4:	24000200 	.word	0x24000200
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020800 	.word	0x58020800
 80009d0:	58020400 	.word	0x58020400
 80009d4:	40022100 	.word	0x40022100
 80009d8:	58020000 	.word	0x58020000
 80009dc:	58026000 	.word	0x58026000

080009e0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80009e0:	b500      	push	{lr}
 80009e2:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009e4:	2224      	movs	r2, #36	; 0x24
 80009e6:	2100      	movs	r1, #0
 80009e8:	a801      	add	r0, sp, #4
 80009ea:	f008 fc1a 	bl	8009222 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009ee:	4810      	ldr	r0, [pc, #64]	; (8000a30 <MX_DAC1_Init+0x50>)
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_DAC1_Init+0x54>)
 80009f2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009f4:	f002 f9f6 	bl	8002de4 <HAL_DAC_Init>
 80009f8:	b108      	cbz	r0, 80009fe <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 80009fa:	f000 fc69 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009fe:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a00:	2301      	movs	r3, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a02:	a901      	add	r1, sp, #4
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <MX_DAC1_Init+0x50>)
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a06:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a08:	e9cd 2201 	strd	r2, r2, [sp, #4]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a0c:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a10:	f002 fa2e 	bl	8002e70 <HAL_DAC_ConfigChannel>
 8000a14:	b108      	cbz	r0, 8000a1a <MX_DAC1_Init+0x3a>
  {
    Error_Handler();
 8000a16:	f000 fc5b 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	a901      	add	r1, sp, #4
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_DAC1_Init+0x50>)
 8000a20:	f002 fa26 	bl	8002e70 <HAL_DAC_ConfigChannel>
 8000a24:	b108      	cbz	r0, 8000a2a <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fc53 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a2a:	b00b      	add	sp, #44	; 0x2c
 8000a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a30:	24000330 	.word	0x24000330
 8000a34:	40007400 	.word	0x40007400

08000a38 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	2214      	movs	r2, #20
 8000a40:	2100      	movs	r1, #0
 8000a42:	a803      	add	r0, sp, #12
 8000a44:	f008 fbed 	bl	8009222 <memset>
  if(dacHandle->Instance==DAC1)
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_DAC_MspInit+0x70>)
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d128      	bne.n	8000aa2 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_DAC_MspInit+0x74>)
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	a903      	add	r1, sp, #12
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <HAL_DAC_MspInit+0x78>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a56:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000a5a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a5e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000a62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000a66:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a72:	f042 0201 	orr.w	r2, r2, #1
 8000a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f003 fb8b 	bl	80041a8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000a92:	2036      	movs	r0, #54	; 0x36
 8000a94:	2200      	movs	r2, #0
 8000a96:	210f      	movs	r1, #15
 8000a98:	f002 f964 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a9c:	2036      	movs	r0, #54	; 0x36
 8000a9e:	f002 f993 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000aa2:	b008      	add	sp, #32
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40007400 	.word	0x40007400
 8000aac:	58024400 	.word	0x58024400
 8000ab0:	58020000 	.word	0x58020000

08000ab4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_DMA_Init+0x34>)
{
 8000ab6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000abc:	2105      	movs	r1, #5
 8000abe:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac0:	f042 0201 	orr.w	r2, r2, #1
 8000ac4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ad6:	f002 f945 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ada:	200b      	movs	r0, #11

}
 8000adc:	b003      	add	sp, #12
 8000ade:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ae2:	f002 b971 	b.w	8002dc8 <HAL_NVIC_EnableIRQ>
 8000ae6:	bf00      	nop
 8000ae8:	58024400 	.word	0x58024400

08000aec <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000aec:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000aee:	4815      	ldr	r0, [pc, #84]	; (8000b44 <MX_FDCAN1_Init+0x58>)
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 16;
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000af0:	2201      	movs	r2, #1
  hfdcan1.Instance = FDCAN1;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_FDCAN1_Init+0x5c>)
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000af4:	2110      	movs	r1, #16
  hfdcan1.Instance = FDCAN1;
 8000af6:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000af8:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000afa:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 2;
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000afe:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b02:	2102      	movs	r1, #2
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b04:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b06:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.DataTimeSeg1 = 1;
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b08:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0c:	2204      	movs	r2, #4
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b0e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b12:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b16:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b1a:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b1e:	e9c0 2311 	strd	r2, r3, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b22:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.TxEventsNbr = 0;
 8000b26:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  hfdcan1.Init.TxBuffersNbr = 0;
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b2a:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b2e:	e9c0 3219 	strd	r3, r2, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b32:	f003 f94f 	bl	8003dd4 <HAL_FDCAN_Init>
 8000b36:	b118      	cbz	r0, 8000b40 <MX_FDCAN1_Init+0x54>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b3c:	f000 bbc8 	b.w	80012d0 <Error_Handler>
}
 8000b40:	bd08      	pop	{r3, pc}
 8000b42:	bf00      	nop
 8000b44:	24000348 	.word	0x24000348
 8000b48:	4000a000 	.word	0x4000a000

08000b4c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000b4c:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_FDCAN2_Init+0x58>)
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 16;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b50:	2201      	movs	r2, #1
  hfdcan2.Instance = FDCAN2;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_FDCAN2_Init+0x5c>)
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b54:	2110      	movs	r1, #16
  hfdcan2.Instance = FDCAN2;
 8000b56:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b58:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b5a:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 2;
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b5e:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b62:	2102      	movs	r1, #2
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b64:	8203      	strh	r3, [r0, #16]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b66:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.DataTimeSeg1 = 1;
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b68:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b6c:	2204      	movs	r2, #4
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b6e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b72:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b76:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b7a:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b7e:	e9c0 2311 	strd	r2, r3, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b82:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.TxEventsNbr = 0;
 8000b86:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  hfdcan2.Init.TxBuffersNbr = 0;
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000b8a:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b8e:	e9c0 3219 	strd	r3, r2, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000b92:	f003 f91f 	bl	8003dd4 <HAL_FDCAN_Init>
 8000b96:	b118      	cbz	r0, 8000ba0 <MX_FDCAN2_Init+0x54>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b9c:	f000 bb98 	b.w	80012d0 <Error_Handler>
}
 8000ba0:	bd08      	pop	{r3, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240003e8 	.word	0x240003e8
 8000ba8:	4000a400 	.word	0x4000a400

08000bac <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bac:	b510      	push	{r4, lr}
 8000bae:	b0b8      	sub	sp, #224	; 0xe0
 8000bb0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	2214      	movs	r2, #20
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	a804      	add	r0, sp, #16
 8000bb8:	f008 fb33 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	22bc      	movs	r2, #188	; 0xbc
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	a809      	add	r0, sp, #36	; 0x24
 8000bc2:	f008 fb2e 	bl	8009222 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	4a3d      	ldr	r2, [pc, #244]	; (8000cc0 <HAL_FDCAN_MspInit+0x114>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d13b      	bne.n	8000c46 <HAL_FDCAN_MspInit+0x9a>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bd4:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000bd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bda:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bdc:	f004 fac4 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	b108      	cbz	r0, 8000be6 <HAL_FDCAN_MspInit+0x3a>
    {
      Error_Handler();
 8000be2:	f000 fb75 	bl	80012d0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <HAL_FDCAN_MspInit+0x118>)
 8000be8:	6813      	ldr	r3, [r2, #0]
 8000bea:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bec:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000bee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bf0:	d10c      	bne.n	8000c0c <HAL_FDCAN_MspInit+0x60>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bf2:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <HAL_FDCAN_MspInit+0x11c>)
 8000bf4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bfc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000c00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	9b00      	ldr	r3, [sp, #0]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_FDCAN_MspInit+0x11c>)
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c18:	f042 0201 	orr.w	r2, r2, #1
 8000c1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	4825      	ldr	r0, [pc, #148]	; (8000ccc <HAL_FDCAN_MspInit+0x120>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	e9cd 3306 	strd	r3, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f003 fab3 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000c42:	b038      	add	sp, #224	; 0xe0
 8000c44:	bd10      	pop	{r4, pc}
  else if(fdcanHandle->Instance==FDCAN2)
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_FDCAN_MspInit+0x124>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d1fa      	bne.n	8000c42 <HAL_FDCAN_MspInit+0x96>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c52:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c58:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5a:	f004 fa85 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	b108      	cbz	r0, 8000c64 <HAL_FDCAN_MspInit+0xb8>
      Error_Handler();
 8000c60:	f000 fb36 	bl	80012d0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_FDCAN_MspInit+0x118>)
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c6a:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c6e:	d10c      	bne.n	8000c8a <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_FDCAN_MspInit+0x11c>)
 8000c72:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c7a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000c7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_FDCAN_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <HAL_FDCAN_MspInit+0x128>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c94:	f042 0202 	orr.w	r2, r2, #2
 8000c98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	e9cd 3306 	strd	r3, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000cb8:	2309      	movs	r3, #9
 8000cba:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	e7bf      	b.n	8000c3e <HAL_FDCAN_MspInit+0x92>
 8000cbe:	bf00      	nop
 8000cc0:	4000a000 	.word	0x4000a000
 8000cc4:	24000344 	.word	0x24000344
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020000 	.word	0x58020000
 8000cd0:	4000a400 	.word	0x4000a400
 8000cd4:	58020400 	.word	0x58020400

08000cd8 <_Z15GetAccelerationPKv>:
  * @retval None
  */
/* USER CODE END Header_GetAcceleration */

void GetAcceleration(void const * argument)
{
 8000cd8:	b508      	push	{r3, lr}
//			bno055_assignI2C(&hi2c4);
//			bno055_setup();
//			bno055_setOperationModeNDOF();
			for (;;)
			{
				osDelay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f006 fff5 	bl	8007cca <osDelay>
			for (;;)
 8000ce0:	e7fb      	b.n	8000cda <_Z15GetAccelerationPKv+0x2>
	...

08000ce4 <_Z16MX_FREERTOS_Initv>:
void MX_FREERTOS_Init(void) {
 8000ce4:	b530      	push	{r4, r5, lr}
  osThreadDef(GetAcc, GetAcceleration, osPriorityNormal, 0, 128);
 8000ce6:	4d07      	ldr	r5, [pc, #28]	; (8000d04 <_Z16MX_FREERTOS_Initv+0x20>)
void MX_FREERTOS_Init(void) {
 8000ce8:	b087      	sub	sp, #28
  osThreadDef(GetAcc, GetAcceleration, osPriorityNormal, 0, 128);
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	ac01      	add	r4, sp, #4
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	682b      	ldr	r3, [r5, #0]
  GetAccHandle = osThreadCreate(osThread(GetAcc), NULL);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	a801      	add	r0, sp, #4
  osThreadDef(GetAcc, GetAcceleration, osPriorityNormal, 0, 128);
 8000cf6:	6023      	str	r3, [r4, #0]
  GetAccHandle = osThreadCreate(osThread(GetAcc), NULL);
 8000cf8:	f006 ffcf 	bl	8007c9a <osThreadCreate>
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <_Z16MX_FREERTOS_Initv+0x24>)
 8000cfe:	6018      	str	r0, [r3, #0]
}
 8000d00:	b007      	add	sp, #28
 8000d02:	bd30      	pop	{r4, r5, pc}
 8000d04:	0800b9e8 	.word	0x0800b9e8
 8000d08:	24000488 	.word	0x24000488

08000d0c <MX_GPIO_Init>:
     PC12   ------> UART5_TX
     PB4 (NJTRST)   ------> SPI3_MISO
     PB5   ------> SPI3_MOSI
*/
void MX_GPIO_Init(void)
{
 8000d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d10:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	2214      	movs	r2, #20
 8000d14:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000d16:	4e62      	ldr	r6, [pc, #392]	; (8000ea0 <MX_GPIO_Init+0x194>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	a807      	add	r0, sp, #28
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d1a:	4f62      	ldr	r7, [pc, #392]	; (8000ea4 <MX_GPIO_Init+0x198>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f008 fa81 	bl	8009222 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d20:	4b61      	ldr	r3, [pc, #388]	; (8000ea8 <MX_GPIO_Init+0x19c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8000d22:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000eb0 <MX_GPIO_Init+0x1a4>
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000d26:	4630      	mov	r0, r6
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000d2c:	f24f 0118 	movw	r1, #61464	; 0xf018
  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	f042 0210 	orr.w	r2, r2, #16

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000eb4 <MX_GPIO_Init+0x1a8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d44:	f002 0210 	and.w	r2, r2, #16
 8000d48:	9201      	str	r2, [sp, #4]
 8000d4a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d50:	f042 0204 	orr.w	r2, r2, #4
 8000d54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d5c:	f002 0204 	and.w	r2, r2, #4
 8000d60:	9202      	str	r2, [sp, #8]
 8000d62:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d74:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000d78:	9203      	str	r2, [sp, #12]
 8000d7a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d80:	f042 0201 	orr.w	r2, r2, #1
 8000d84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d8c:	f002 0201 	and.w	r2, r2, #1
 8000d90:	9204      	str	r2, [sp, #16]
 8000d92:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d98:	f042 0202 	orr.w	r2, r2, #2
 8000d9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000da0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000da4:	f002 0202 	and.w	r2, r2, #2
 8000da8:	9205      	str	r2, [sp, #20]
 8000daa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db0:	f042 0208 	orr.w	r2, r2, #8
 8000db4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000db8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	9306      	str	r3, [sp, #24]
 8000dc4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000dc6:	f003 fadb 	bl	8004380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000dca:	4638      	mov	r0, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f644 0190 	movw	r1, #18576	; 0x4890
 8000dd2:	f003 fad5 	bl	8004380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4640      	mov	r0, r8
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	f003 facf 	bl	8004380 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	f24f 0318 	movw	r3, #61464	; 0xf018
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	a907      	add	r1, sp, #28
 8000de8:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df4:	f003 f9d8 	bl	80041a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	a907      	add	r1, sp, #28
 8000dfa:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	e9cd 6408 	strd	r6, r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e02:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f003 f9cf 	bl	80041a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7;
 8000e0a:	f644 0390 	movw	r3, #18576	; 0x4890
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	a907      	add	r1, sp, #28
 8000e10:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f003 f9c5 	bl	80041a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	a907      	add	r1, sp, #28
 8000e24:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f003 f9bc 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8000e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	a907      	add	r1, sp, #28
 8000e36:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f003 f9b2 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	a907      	add	r1, sp, #28
 8000e4a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e50:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e56:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f003 f9a6 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	a907      	add	r1, sp, #28
 8000e60:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f003 f99e 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	a907      	add	r1, sp, #28
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <MX_GPIO_Init+0x1a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e76:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f003 f993 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e82:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	a907      	add	r1, sp, #28
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <MX_GPIO_Init+0x1a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e8c:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e92:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f003 f988 	bl	80041a8 <HAL_GPIO_Init>

}
 8000e98:	b00d      	add	sp, #52	; 0x34
 8000e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e9e:	bf00      	nop
 8000ea0:	58021000 	.word	0x58021000
 8000ea4:	58020c00 	.word	0x58020c00
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58020000 	.word	0x58020000
 8000eb4:	58020800 	.word	0x58020800

08000eb8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00707CBB;
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_I2C1_Init+0x50>)
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_I2C1_Init+0x54>)
 8000ec0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8000ec8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed6:	f003 fa58 	bl	800438a <HAL_I2C_Init>
 8000eda:	b108      	cbz	r0, 8000ee0 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8000edc:	f000 f9f8 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <MX_I2C1_Init+0x4c>)
 8000ee4:	f003 faa2 	bl	800442c <HAL_I2CEx_ConfigAnalogFilter>
 8000ee8:	b108      	cbz	r0, 8000eee <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8000eea:	f000 f9f1 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C1_Init+0x4c>)
 8000ef2:	f003 fac1 	bl	8004478 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef6:	b118      	cbz	r0, 8000f00 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000efc:	f000 b9e8 	b.w	80012d0 <Error_Handler>
}
 8000f00:	bd08      	pop	{r3, pc}
 8000f02:	bf00      	nop
 8000f04:	2400048c 	.word	0x2400048c
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	00707cbb 	.word	0x00707cbb

08000f10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f10:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x00707CBB;
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_I2C2_Init+0x50>)
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_I2C2_Init+0x54>)
 8000f18:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2201      	movs	r2, #1
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
 8000f20:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f28:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f2e:	f003 fa2c 	bl	800438a <HAL_I2C_Init>
 8000f32:	b108      	cbz	r0, 8000f38 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8000f34:	f000 f9cc 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <MX_I2C2_Init+0x4c>)
 8000f3c:	f003 fa76 	bl	800442c <HAL_I2CEx_ConfigAnalogFilter>
 8000f40:	b108      	cbz	r0, 8000f46 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8000f42:	f000 f9c5 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C2_Init+0x4c>)
 8000f4a:	f003 fa95 	bl	8004478 <HAL_I2CEx_ConfigDigitalFilter>
 8000f4e:	b118      	cbz	r0, 8000f58 <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f54:	f000 b9bc 	b.w	80012d0 <Error_Handler>
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	240004d8 	.word	0x240004d8
 8000f60:	40005800 	.word	0x40005800
 8000f64:	00707cbb 	.word	0x00707cbb

08000f68 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000f68:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <MX_I2C4_Init+0x4c>)
  hi2c4.Init.Timing = 0x00707CBB;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_I2C4_Init+0x50>)
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_I2C4_Init+0x54>)
 8000f70:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	2201      	movs	r2, #1
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
 8000f78:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f86:	f003 fa00 	bl	800438a <HAL_I2C_Init>
 8000f8a:	b108      	cbz	r0, 8000f90 <MX_I2C4_Init+0x28>
  {
    Error_Handler();
 8000f8c:	f000 f9a0 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <MX_I2C4_Init+0x4c>)
 8000f94:	f003 fa4a 	bl	800442c <HAL_I2CEx_ConfigAnalogFilter>
 8000f98:	b108      	cbz	r0, 8000f9e <MX_I2C4_Init+0x36>
  {
    Error_Handler();
 8000f9a:	f000 f999 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C4_Init+0x4c>)
 8000fa2:	f003 fa69 	bl	8004478 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa6:	b118      	cbz	r0, 8000fb0 <MX_I2C4_Init+0x48>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fac:	f000 b990 	b.w	80012d0 <Error_Handler>
}
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000524 	.word	0x24000524
 8000fb8:	58001c00 	.word	0x58001c00
 8000fbc:	00707cbb 	.word	0x00707cbb

08000fc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	b0ba      	sub	sp, #232	; 0xe8
 8000fc4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	2214      	movs	r2, #20
 8000fc8:	2100      	movs	r1, #0
 8000fca:	a806      	add	r0, sp, #24
 8000fcc:	f008 f929 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd0:	22bc      	movs	r2, #188	; 0xbc
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	a80b      	add	r0, sp, #44	; 0x2c
 8000fd6:	f008 f924 	bl	8009222 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_I2C_MspInit+0x150>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12f      	bne.n	8001042 <HAL_I2C_MspInit+0x82>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe2:	2308      	movs	r3, #8
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	f004 f8be 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	b108      	cbz	r0, 8000ff2 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8000fee:	f000 f96f 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4c48      	ldr	r4, [pc, #288]	; (8001114 <HAL_I2C_MspInit+0x154>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001004:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	483f      	ldr	r0, [pc, #252]	; (8001118 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101e:	2304      	movs	r3, #4
 8001020:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f003 f8c1 	bl	80041a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800102a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001032:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800103e:	b03a      	add	sp, #232	; 0xe8
 8001040:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8001042:	4a36      	ldr	r2, [pc, #216]	; (800111c <HAL_I2C_MspInit+0x15c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d12f      	bne.n	80010a8 <HAL_I2C_MspInit+0xe8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001048:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800104c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104e:	f004 f88b 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	b108      	cbz	r0, 8001058 <HAL_I2C_MspInit+0x98>
      Error_Handler();
 8001054:	f000 f93c 	bl	80012d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4c2e      	ldr	r4, [pc, #184]	; (8001114 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	482e      	ldr	r0, [pc, #184]	; (8001118 <HAL_I2C_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800106c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	2312      	movs	r3, #18
 800107a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	e9cd 3308 	strd	r3, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001086:	2304      	movs	r3, #4
 8001088:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f003 f88d 	bl	80041a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800108e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001096:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800109a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	9303      	str	r3, [sp, #12]
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	e7ca      	b.n	800103e <HAL_I2C_MspInit+0x7e>
  else if(i2cHandle->Instance==I2C4)
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_I2C_MspInit+0x160>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d1c7      	bne.n	800103e <HAL_I2C_MspInit+0x7e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80010ae:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b0:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80010b2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f004 f858 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	b108      	cbz	r0, 80010be <HAL_I2C_MspInit+0xfe>
      Error_Handler();
 80010ba:	f000 f909 	bl	80012d0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4c15      	ldr	r4, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c4:	a906      	add	r1, sp, #24
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <HAL_I2C_MspInit+0x164>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80010d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e0:	2312      	movs	r3, #18
 80010e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f003 f85a 	bl	80041a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8001100:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	9b05      	ldr	r3, [sp, #20]
}
 800110c:	e797      	b.n	800103e <HAL_I2C_MspInit+0x7e>
 800110e:	bf00      	nop
 8001110:	40005400 	.word	0x40005400
 8001114:	58024400 	.word	0x58024400
 8001118:	58020400 	.word	0x58020400
 800111c:	40005800 	.word	0x40005800
 8001120:	58001c00 	.word	0x58001c00
 8001124:	58020c00 	.word	0x58020c00

08001128 <_Z13roco_callbackhP19avionics_IMU_packet>:
void roco_callback(uint8_t sender_id, avionics_IMU_packet* packet)
{
//	char text[100];
//	sprintf(text, "acc_x: %.2f acc_y: %.2f acc_z: %.2f\r\n", packet->acceleration[0], packet->acceleration[1], packet->acceleration[2]);
//	HAL_UART_Transmit(&huart2, (const uint8_t*)text, 100,0xFF);
}
 8001128:	4770      	bx	lr
	...

0800112c <_Z18SystemClock_Configv>:
{
 800112c:	b530      	push	{r4, r5, lr}
 800112e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001130:	224c      	movs	r2, #76	; 0x4c
 8001132:	2100      	movs	r1, #0
 8001134:	a809      	add	r0, sp, #36	; 0x24
 8001136:	f008 f874 	bl	8009222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	a801      	add	r0, sp, #4
 8001140:	f008 f86f 	bl	8009222 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001144:	2002      	movs	r0, #2
 8001146:	f003 f9bd 	bl	80044c4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <_Z18SystemClock_Configv+0xc0>)
 8001150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <_Z18SystemClock_Configv+0xc4>)
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	6993      	ldr	r3, [r2, #24]
 8001164:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	6993      	ldr	r3, [r2, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001178:	6993      	ldr	r3, [r2, #24]
 800117a:	0498      	lsls	r0, r3, #18
 800117c:	d5fc      	bpl.n	8001178 <_Z18SystemClock_Configv+0x4c>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <_Z18SystemClock_Configv+0xc8>)
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001180:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001182:	2501      	movs	r5, #1
 8001184:	2440      	movs	r4, #64	; 0x40
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001186:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800118a:	f023 0303 	bic.w	r3, r3, #3
 800118e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001190:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001192:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001194:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001198:	2209      	movs	r2, #9
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800119e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011a2:	2203      	movs	r2, #3
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a4:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011a8:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80011aa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80011ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80011b6:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f003 fa1e 	bl	80045f8 <HAL_RCC_OscConfig>
 80011bc:	b108      	cbz	r0, 80011c2 <_Z18SystemClock_Configv+0x96>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <_Z18SystemClock_Configv+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c4:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c6:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011ce:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011d8:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011dc:	f003 fd3e 	bl	8004c5c <HAL_RCC_ClockConfig>
 80011e0:	b108      	cbz	r0, 80011e6 <_Z18SystemClock_Configv+0xba>
 80011e2:	b672      	cpsid	i
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <_Z18SystemClock_Configv+0xb8>
}
 80011e6:	b01d      	add	sp, #116	; 0x74
 80011e8:	bd30      	pop	{r4, r5, pc}
 80011ea:	bf00      	nop
 80011ec:	58000400 	.word	0x58000400
 80011f0:	58024800 	.word	0x58024800
 80011f4:	58024400 	.word	0x58024400

080011f8 <_Z24PeriphCommonClock_Configv>:
{
 80011f8:	b500      	push	{lr}
 80011fa:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	2298      	movs	r2, #152	; 0x98
 80011fe:	2100      	movs	r1, #0
 8001200:	a80a      	add	r0, sp, #40	; 0x28
 8001202:	f008 f80e 	bl	8009222 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001206:	2304      	movs	r3, #4
 8001208:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800120c:	21c0      	movs	r1, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120e:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001210:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001214:	2209      	movs	r2, #9
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001216:	e9cd 2303 	strd	r2, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800121a:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001220:	2320      	movs	r3, #32
 8001222:	e9cd 1307 	strd	r1, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001226:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122c:	f003 ff9c 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	b108      	cbz	r0, 8001236 <_Z24PeriphCommonClock_Configv+0x3e>
 8001232:	b672      	cpsid	i
  while (1)
 8001234:	e7fe      	b.n	8001234 <_Z24PeriphCommonClock_Configv+0x3c>
}
 8001236:	b031      	add	sp, #196	; 0xc4
 8001238:	f85d fb04 	ldr.w	pc, [sp], #4

0800123c <main>:
{
 800123c:	b508      	push	{r3, lr}
  HAL_Init();
 800123e:	f001 f923 	bl	8002488 <HAL_Init>
  SystemClock_Config();
 8001242:	f7ff ff73 	bl	800112c <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 8001246:	f7ff ffd7 	bl	80011f8 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 800124a:	f7ff fd5f 	bl	8000d0c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800124e:	f7ff fc4d 	bl	8000aec <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001252:	f7ff fc7b 	bl	8000b4c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001256:	f7ff fe2f 	bl	8000eb8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800125a:	f7ff fe59 	bl	8000f10 <MX_I2C2_Init>
  MX_I2C4_Init();
 800125e:	f7ff fe83 	bl	8000f68 <MX_I2C4_Init>
  MX_USART1_Init();
 8001262:	f000 fe55 	bl	8001f10 <MX_USART1_Init>
  MX_USART2_UART_Init();
 8001266:	f000 fe85 	bl	8001f74 <MX_USART2_UART_Init>
  MX_USART3_Init();
 800126a:	f000 feb5 	bl	8001fd8 <MX_USART3_Init>
  MX_ADC1_Init();
 800126e:	f7ff fa21 	bl	80006b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001272:	f7ff fa69 	bl	8000748 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001276:	f7ff faa7 	bl	80007c8 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 800127a:	f000 f847 	bl	800130c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 800127e:	f000 f8dd 	bl	800143c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001282:	f000 f909 	bl	8001498 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001286:	f000 f935 	bl	80014f4 <MX_SPI4_Init>
  MX_USART6_Init();
 800128a:	f000 fed7 	bl	800203c <MX_USART6_Init>
  MX_DAC1_Init();
 800128e:	f7ff fba7 	bl	80009e0 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001292:	f000 fda5 	bl	8001de0 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8001296:	f000 fdd7 	bl	8001e48 <MX_UART4_Init>
  MX_UART8_Init();
 800129a:	f000 fe07 	bl	8001eac <MX_UART8_Init>
  MX_TIM1_Init();
 800129e:	f000 fc47 	bl	8001b30 <MX_TIM1_Init>
  MX_TIM5_Init();
 80012a2:	f000 fcf3 	bl	8001c8c <MX_TIM5_Init>
  MX_TIM15_Init();
 80012a6:	f000 fd2d 	bl	8001d04 <MX_TIM15_Init>
  MX_DMA_Init();
 80012aa:	f7ff fc03 	bl	8000ab4 <MX_DMA_Init>
  MX_TIM4_Init();
 80012ae:	f000 fc9d 	bl	8001bec <MX_TIM4_Init>
  true_network->handle(roco_callback);
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <main+0x8c>)
 80012b4:	4905      	ldr	r1, [pc, #20]	; (80012cc <main+0x90>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	f007 fc76 	bl	8008ba8 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E>
  MX_FREERTOS_Init();
 80012bc:	f7ff fd12 	bl	8000ce4 <_Z16MX_FREERTOS_Initv>
  osKernelStart();
 80012c0:	f006 fce6 	bl	8007c90 <osKernelStart>
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x88>
 80012c6:	bf00      	nop
 80012c8:	24000574 	.word	0x24000574
 80012cc:	08001129 	.word	0x08001129

080012d0 <Error_Handler>:
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <Error_Handler+0x2>

080012d4 <_GLOBAL__sub_I_buffer>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80012d4:	b538      	push	{r3, r4, r5, lr}
IODriver* telemtryDriver = new STMUARTDriver(&huart2); // Point to Huart6
 80012d6:	2044      	movs	r0, #68	; 0x44
 80012d8:	4d09      	ldr	r5, [pc, #36]	; (8001300 <_GLOBAL__sub_I_buffer+0x2c>)
 80012da:	f007 fae3 	bl	80088a4 <_Znwj>
 80012de:	4909      	ldr	r1, [pc, #36]	; (8001304 <_GLOBAL__sub_I_buffer+0x30>)
 80012e0:	4604      	mov	r4, r0
 80012e2:	f007 fd01 	bl	8008ce8 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
NetworkBus* true_network = new NetworkBus(telemtryDriver);
 80012e6:	f644 1014 	movw	r0, #18708	; 0x4914
IODriver* telemtryDriver = new STMUARTDriver(&huart2); // Point to Huart6
 80012ea:	602c      	str	r4, [r5, #0]
NetworkBus* true_network = new NetworkBus(telemtryDriver);
 80012ec:	f007 fada 	bl	80088a4 <_Znwj>
 80012f0:	6829      	ldr	r1, [r5, #0]
 80012f2:	4604      	mov	r4, r0
 80012f4:	f007 fc8a 	bl	8008c0c <_ZN10NetworkBusC1EP8IODriver>
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <_GLOBAL__sub_I_buffer+0x34>)
 80012fa:	601c      	str	r4, [r3, #0]
}
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	24000570 	.word	0x24000570
 8001304:	240009e4 	.word	0x240009e4
 8001308:	24000574 	.word	0x24000574

0800130c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800130c:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8001310:	23ff      	movs	r3, #255	; 0xff
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <MX_QUADSPI_Init+0x34>)
 8001314:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	2201      	movs	r2, #1
 800131c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hqspi.Init.FlashSize = 1;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001320:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8001324:	2280      	movs	r2, #128	; 0x80
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001326:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001328:	e9c0 2307 	strd	r2, r3, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800132c:	f003 f916 	bl	800455c <HAL_QSPI_Init>
 8001330:	b118      	cbz	r0, 800133a <MX_QUADSPI_Init+0x2e>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001336:	f7ff bfcb 	b.w	80012d0 <Error_Handler>
}
 800133a:	bd08      	pop	{r3, pc}
 800133c:	24000578 	.word	0x24000578
 8001340:	52005000 	.word	0x52005000

08001344 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	b0b8      	sub	sp, #224	; 0xe0
 8001348:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	2214      	movs	r2, #20
 800134c:	2100      	movs	r1, #0
 800134e:	a804      	add	r0, sp, #16
 8001350:	f007 ff67 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	22bc      	movs	r2, #188	; 0xbc
 8001356:	2100      	movs	r1, #0
 8001358:	a809      	add	r0, sp, #36	; 0x24
 800135a:	f007 ff62 	bl	8009222 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_QSPI_MspInit+0xe4>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d15d      	bne.n	8001422 <HAL_QSPI_MspInit+0xde>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800136c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f003 fefb 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	b108      	cbz	r0, 8001378 <HAL_QSPI_MspInit+0x34>
    {
      Error_Handler();
 8001374:	f7ff ffac 	bl	80012d0 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_QSPI_MspInit+0xe8>)
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800137e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001380:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	a904      	add	r1, sp, #16
 8001386:	482a      	ldr	r0, [pc, #168]	; (8001430 <HAL_QSPI_MspInit+0xec>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800138c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001390:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001394:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013a0:	f042 0202 	orr.w	r2, r2, #2
 80013a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013ac:	f002 0202 	and.w	r2, r2, #2
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013b8:	f042 0210 	orr.w	r2, r2, #16
 80013bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013c4:	f002 0210 	and.w	r2, r2, #16
 80013c8:	9202      	str	r2, [sp, #8]
 80013ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013d0:	f042 0204 	orr.w	r2, r2, #4
 80013d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013dc:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f002 feda 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80013f4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	a904      	add	r1, sp, #16
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <HAL_QSPI_MspInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001400:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001406:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001408:	f002 fece 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	a904      	add	r1, sp, #16
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <HAL_QSPI_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001414:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f002 fec3 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001422:	b038      	add	sp, #224	; 0xe0
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	bf00      	nop
 8001428:	52005000 	.word	0x52005000
 800142c:	58024400 	.word	0x58024400
 8001430:	58020400 	.word	0x58020400
 8001434:	58021000 	.word	0x58021000
 8001438:	58020800 	.word	0x58020800

0800143c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <MX_SPI1_Init+0x58>)
 8001446:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800144a:	2300      	movs	r3, #0
 800144c:	2203      	movs	r2, #3
 800144e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001452:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001456:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001462:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8001466:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800146a:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800146e:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001472:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001476:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800147a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147e:	f004 fe85 	bl	800618c <HAL_SPI_Init>
 8001482:	b118      	cbz	r0, 800148c <MX_SPI1_Init+0x50>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001488:	f7ff bf22 	b.w	80012d0 <Error_Handler>
}
 800148c:	bd08      	pop	{r3, pc}
 800148e:	bf00      	nop
 8001490:	240005c4 	.word	0x240005c4
 8001494:	40013000 	.word	0x40013000

08001498 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001498:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_SPI2_Init+0x54>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <MX_SPI2_Init+0x58>)
 80014a2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	2203      	movs	r2, #3
 80014aa:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b2:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014be:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 80014c2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014c6:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ca:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ce:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014d2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014d6:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014da:	f004 fe57 	bl	800618c <HAL_SPI_Init>
 80014de:	b118      	cbz	r0, 80014e8 <MX_SPI2_Init+0x50>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014e4:	f7ff bef4 	b.w	80012d0 <Error_Handler>
}
 80014e8:	bd08      	pop	{r3, pc}
 80014ea:	bf00      	nop
 80014ec:	2400064c 	.word	0x2400064c
 80014f0:	40003800 	.word	0x40003800

080014f4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80014f4:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <MX_SPI4_Init+0x54>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80014f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <MX_SPI4_Init+0x58>)
 80014fe:	e9c0 2300 	strd	r2, r3, [r0]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001502:	2300      	movs	r3, #0
 8001504:	2203      	movs	r2, #3
 8001506:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800150a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001516:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800151a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 800151e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001522:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001526:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800152a:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800152e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001532:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001536:	f004 fe29 	bl	800618c <HAL_SPI_Init>
 800153a:	b118      	cbz	r0, 8001544 <MX_SPI4_Init+0x50>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800153c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001540:	f7ff bec6 	b.w	80012d0 <Error_Handler>
}
 8001544:	bd08      	pop	{r3, pc}
 8001546:	bf00      	nop
 8001548:	240006d4 	.word	0x240006d4
 800154c:	40013400 	.word	0x40013400

08001550 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	b0bc      	sub	sp, #240	; 0xf0
 8001554:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	2214      	movs	r2, #20
 8001558:	2100      	movs	r1, #0
 800155a:	a808      	add	r0, sp, #32
 800155c:	f007 fe61 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	22bc      	movs	r2, #188	; 0xbc
 8001562:	2100      	movs	r1, #0
 8001564:	a80d      	add	r0, sp, #52	; 0x34
 8001566:	f007 fe5c 	bl	8009222 <memset>
  if(spiHandle->Instance==SPI1)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_SPI_MspInit+0x1a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d146      	bne.n	8001600 <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001578:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f003 fdf5 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	b108      	cbz	r0, 8001584 <HAL_SPI_MspInit+0x34>
    {
      Error_Handler();
 8001580:	f7ff fea6 	bl	80012d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001584:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_SPI_MspInit+0x1a4>)
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158a:	2505      	movs	r5, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	a908      	add	r1, sp, #32
 8001592:	4859      	ldr	r0, [pc, #356]	; (80016f8 <HAL_SPI_MspInit+0x1a8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001598:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800159c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015b8:	f002 0201 	and.w	r2, r2, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015c4:	f042 0202 	orr.w	r2, r2, #2
 80015c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d0:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f002 fde0 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	a908      	add	r1, sp, #32
 80015ec:	4843      	ldr	r0, [pc, #268]	; (80016fc <HAL_SPI_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ee:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f8:	f002 fdd6 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80015fc:	b03c      	add	sp, #240	; 0xf0
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 8001600:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <HAL_SPI_MspInit+0x1b0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d143      	bne.n	800168e <HAL_SPI_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800160c:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160e:	f003 fdab 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	b108      	cbz	r0, 8001618 <HAL_SPI_MspInit+0xc8>
      Error_Handler();
 8001614:	f7ff fe5c 	bl	80012d0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001618:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <HAL_SPI_MspInit+0x1a4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161e:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001620:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	a908      	add	r1, sp, #32
 8001626:	4837      	ldr	r0, [pc, #220]	; (8001704 <HAL_SPI_MspInit+0x1b4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800162c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001630:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001634:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001638:	9203      	str	r2, [sp, #12]
 800163a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001648:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800164c:	f002 0204 	and.w	r2, r2, #4
 8001650:	9204      	str	r2, [sp, #16]
 8001652:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001658:	f042 0208 	orr.w	r2, r2, #8
 800165c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001664:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	9305      	str	r3, [sp, #20]
 800166c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f002 fd96 	bl	80041a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800167c:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167e:	a908      	add	r1, sp, #32
 8001680:	4821      	ldr	r0, [pc, #132]	; (8001708 <HAL_SPI_MspInit+0x1b8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001682:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	e7b4      	b.n	80015f8 <HAL_SPI_MspInit+0xa8>
  else if(spiHandle->Instance==SPI4)
 800168e:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_SPI_MspInit+0x1bc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d1b3      	bne.n	80015fc <HAL_SPI_MspInit+0xac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001698:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800169a:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f003 fd64 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	b108      	cbz	r0, 80016a6 <HAL_SPI_MspInit+0x156>
      Error_Handler();
 80016a2:	f7ff fe15 	bl	80012d0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_SPI_MspInit+0x1a4>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a8:	a908      	add	r1, sp, #32
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <HAL_SPI_MspInit+0x1c0>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80016b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80016b8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80016bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016c0:	9206      	str	r2, [sp, #24]
 80016c2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016c8:	f042 0210 	orr.w	r2, r2, #16
 80016cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2264      	movs	r2, #100	; 0x64
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	9307      	str	r3, [sp, #28]
 80016dc:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016ea:	2305      	movs	r3, #5
 80016ec:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	e783      	b.n	80015f8 <HAL_SPI_MspInit+0xa8>
 80016f0:	40013000 	.word	0x40013000
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020000 	.word	0x58020000
 80016fc:	58020400 	.word	0x58020400
 8001700:	40003800 	.word	0x40003800
 8001704:	58020800 	.word	0x58020800
 8001708:	58020c00 	.word	0x58020c00
 800170c:	40013400 	.word	0x40013400
 8001710:	58021000 	.word	0x58021000

08001714 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_MspInit+0x2c>)
{
 8001716:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001718:	210f      	movs	r1, #15
 800171a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001722:	f042 0202 	orr.w	r2, r2, #2
 8001726:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001738:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	f001 bb13 	b.w	8002d64 <HAL_NVIC_SetPriority>
 800173e:	bf00      	nop
 8001740:	58024400 	.word	0x58024400

08001744 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	280f      	cmp	r0, #15
{
 8001746:	b510      	push	{r4, lr}
 8001748:	4604      	mov	r4, r0
 800174a:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174c:	d902      	bls.n	8001754 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001750:	b00a      	add	sp, #40	; 0x28
 8001752:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001754:	4601      	mov	r1, r0
 8001756:	2200      	movs	r2, #0
 8001758:	2036      	movs	r0, #54	; 0x36
 800175a:	f001 fb03 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800175e:	2036      	movs	r0, #54	; 0x36
 8001760:	f001 fb32 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001766:	4669      	mov	r1, sp
 8001768:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800176a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_InitTick+0x88>)
 800176e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001772:	f042 0210 	orr.w	r2, r2, #16
 8001776:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001786:	f003 fbd5 	bl	8004f34 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800178a:	9b07      	ldr	r3, [sp, #28]
 800178c:	b9c3      	cbnz	r3, 80017c0 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178e:	f003 fbad 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001792:	4c0f      	ldr	r4, [pc, #60]	; (80017d0 <HAL_InitTick+0x8c>)
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_InitTick+0x90>)
 8001796:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001798:	f240 33e7 	movw	r3, #999	; 0x3e7
 800179c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_InitTick+0x94>)
 80017a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a4:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80017a6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80017a8:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017aa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80017ac:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b0:	f005 f808 	bl	80067c4 <HAL_TIM_Base_Init>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d1ca      	bne.n	800174e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80017b8:	4620      	mov	r0, r4
 80017ba:	f004 fea9 	bl	8006510 <HAL_TIM_Base_Start_IT>
 80017be:	e7c7      	b.n	8001750 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c0:	f003 fb94 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 80017c4:	0040      	lsls	r0, r0, #1
 80017c6:	e7e4      	b.n	8001792 <HAL_InitTick+0x4e>
 80017c8:	2400000c 	.word	0x2400000c
 80017cc:	58024400 	.word	0x58024400
 80017d0:	2400075c 	.word	0x2400075c
 80017d4:	40001000 	.word	0x40001000
 80017d8:	000f4240 	.word	0x000f4240

080017dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler>

080017de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler>

080017e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler>

080017e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler>

080017e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler>

080017e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	4770      	bx	lr

080017e8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017e8:	4801      	ldr	r0, [pc, #4]	; (80017f0 <DMA1_Stream0_IRQHandler+0x8>)
 80017ea:	f002 b84d 	b.w	8003888 <HAL_DMA_IRQHandler>
 80017ee:	bf00      	nop
 80017f0:	240008dc 	.word	0x240008dc

080017f4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <TIM6_DAC_IRQHandler+0x18>)
{
 80017f6:	b508      	push	{r3, lr}
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80017f8:	7903      	ldrb	r3, [r0, #4]
 80017fa:	b10b      	cbz	r3, 8001800 <TIM6_DAC_IRQHandler+0xc>
    HAL_DAC_IRQHandler(&hdac1);
 80017fc:	f001 fb06 	bl	8002e0c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <TIM6_DAC_IRQHandler+0x1c>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8001806:	f004 bec6 	b.w	8006596 <HAL_TIM_IRQHandler>
 800180a:	bf00      	nop
 800180c:	24000330 	.word	0x24000330
 8001810:	2400075c 	.word	0x2400075c

08001814 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001814:	2001      	movs	r0, #1
 8001816:	4770      	bx	lr

08001818 <_kill>:

int _kill(int pid, int sig)
{
 8001818:	b508      	push	{r3, lr}
	errno = EINVAL;
 800181a:	f007 fbd1 	bl	8008fc0 <__errno>
 800181e:	2316      	movs	r3, #22
 8001820:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001826:	bd08      	pop	{r3, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b508      	push	{r3, lr}
	errno = EINVAL;
 800182a:	f007 fbc9 	bl	8008fc0 <__errno>
 800182e:	2316      	movs	r3, #22
 8001830:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0xa>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b570      	push	{r4, r5, r6, lr}
 8001836:	460d      	mov	r5, r1
 8001838:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	460e      	mov	r6, r1
 800183c:	1b73      	subs	r3, r6, r5
 800183e:	429c      	cmp	r4, r3
 8001840:	dc01      	bgt.n	8001846 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001842:	4620      	mov	r0, r4
 8001844:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	e7f5      	b.n	800183c <_read+0x8>

08001850 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	460d      	mov	r5, r1
 8001854:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	460e      	mov	r6, r1
 8001858:	1b73      	subs	r3, r6, r5
 800185a:	429c      	cmp	r4, r3
 800185c:	dc01      	bgt.n	8001862 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800185e:	4620      	mov	r0, r4
 8001860:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001862:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001866:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	e7f5      	b.n	8001858 <_write+0x8>

0800186c <_close>:

int _close(int file)
{
	return -1;
}
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001876:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001878:	604b      	str	r3, [r1, #4]
}
 800187a:	4770      	bx	lr

0800187c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800187c:	2001      	movs	r0, #1
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001880:	2000      	movs	r0, #0
 8001882:	4770      	bx	lr

08001884 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <_sbrk+0x30>)
{
 8001886:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001888:	6811      	ldr	r1, [r2, #0]
{
 800188a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800188c:	b909      	cbnz	r1, 8001892 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <_sbrk+0x34>)
 8001890:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	6810      	ldr	r0, [r2, #0]
 8001894:	4909      	ldr	r1, [pc, #36]	; (80018bc <_sbrk+0x38>)
 8001896:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <_sbrk+0x3c>)
 8001898:	4403      	add	r3, r0
 800189a:	1b09      	subs	r1, r1, r4
 800189c:	428b      	cmp	r3, r1
 800189e:	d906      	bls.n	80018ae <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018a0:	f007 fb8e 	bl	8008fc0 <__errno>
 80018a4:	230c      	movs	r3, #12
 80018a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80018ac:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80018ae:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80018b0:	e7fc      	b.n	80018ac <_sbrk+0x28>
 80018b2:	bf00      	nop
 80018b4:	240007a8 	.word	0x240007a8
 80018b8:	24004a20 	.word	0x24004a20
 80018bc:	24080000 	.word	0x24080000
 80018c0:	00000400 	.word	0x00000400

080018c4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <SystemInit+0x98>)
 80018c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <SystemInit+0x9c>)
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d805      	bhi.n	80018ea <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	f043 0307 	orr.w	r3, r3, #7
 80018e8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <SystemInit+0xa0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <SystemInit+0xa4>)
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018fe:	4918      	ldr	r1, [pc, #96]	; (8001960 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8001900:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001902:	680a      	ldr	r2, [r1, #0]
 8001904:	0712      	lsls	r2, r2, #28
 8001906:	d505      	bpl.n	8001914 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001908:	680a      	ldr	r2, [r1, #0]
 800190a:	f022 020f 	bic.w	r2, r2, #15
 800190e:	f042 0207 	orr.w	r2, r2, #7
 8001912:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001914:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8001918:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800191a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800191c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800191e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001920:	4913      	ldr	r1, [pc, #76]	; (8001970 <SystemInit+0xac>)
 8001922:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001924:	4913      	ldr	r1, [pc, #76]	; (8001974 <SystemInit+0xb0>)
 8001926:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800192e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001930:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001938:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <SystemInit+0xb4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001948:	d203      	bcs.n	8001952 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <SystemInit+0xb8>)
 800194c:	2201      	movs	r2, #1
 800194e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <SystemInit+0xbc>)
 8001954:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001958:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	52002000 	.word	0x52002000
 8001964:	58024400 	.word	0x58024400
 8001968:	eaf6ed7f 	.word	0xeaf6ed7f
 800196c:	02020200 	.word	0x02020200
 8001970:	01ff0000 	.word	0x01ff0000
 8001974:	01010280 	.word	0x01010280
 8001978:	5c001000 	.word	0x5c001000
 800197c:	51008000 	.word	0x51008000
 8001980:	52004000 	.word	0x52004000

08001984 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001984:	6803      	ldr	r3, [r0, #0]
{
 8001986:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_TIM_PWM_MspInit+0x4c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_TIM_PWM_MspInit+0x50>)
 8001990:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800199c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80019a8:	b002      	add	sp, #8
 80019aa:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM5)
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_TIM_PWM_MspInit+0x54>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d1fa      	bne.n	80019a8 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_TIM_PWM_MspInit+0x50>)
 80019b4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019b8:	f042 0208 	orr.w	r2, r2, #8
 80019bc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	9b01      	ldr	r3, [sp, #4]
}
 80019cc:	e7ec      	b.n	80019a8 <HAL_TIM_PWM_MspInit+0x24>
 80019ce:	bf00      	nop
 80019d0:	40010000 	.word	0x40010000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	40000c00 	.word	0x40000c00

080019dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 80019dc:	6803      	ldr	r3, [r0, #0]
{
 80019de:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 80019e0:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_TIM_Base_MspInit+0x4c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10e      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_Base_MspInit+0x50>)
 80019e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019ec:	f042 0204 	orr.w	r2, r2, #4
 80019f0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001a00:	b002      	add	sp, #8
 8001a02:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM15)
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_TIM_Base_MspInit+0x54>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d1fa      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_TIM_Base_MspInit+0x50>)
 8001a0c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	9b01      	ldr	r3, [sp, #4]
}
 8001a24:	e7ec      	b.n	8001a00 <HAL_TIM_Base_MspInit+0x24>
 8001a26:	bf00      	nop
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	40014000 	.word	0x40014000

08001a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	2214      	movs	r2, #20
 8001a36:	2100      	movs	r1, #0
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	eb0d 0002 	add.w	r0, sp, r2
 8001a42:	f007 fbee 	bl	8009222 <memset>
  if(timHandle->Instance==TIM1)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_TIM_MspPostInit+0xdc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d119      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_TIM_MspPostInit+0xe0>)
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a74:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a76:	4828      	ldr	r0, [pc, #160]	; (8001b18 <HAL_TIM_MspPostInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a78:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f002 fb95 	bl	80041a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001a7e:	b00a      	add	sp, #40	; 0x28
 8001a80:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM4)
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_TIM_MspPostInit+0xe8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d115      	bne.n	8001ab4 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_TIM_MspPostInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	4824      	ldr	r0, [pc, #144]	; (8001b20 <HAL_TIM_MspPostInit+0xec>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a94:	f042 0208 	orr.w	r2, r2, #8
 8001a98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aae:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab0:	a905      	add	r1, sp, #20
 8001ab2:	e7e2      	b.n	8001a7a <HAL_TIM_MspPostInit+0x46>
  else if(timHandle->Instance==TIM5)
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <HAL_TIM_MspPostInit+0xf0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d113      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_TIM_MspPostInit+0xe0>)
 8001abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ad4:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	a905      	add	r1, sp, #20
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <HAL_TIM_MspPostInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001ade:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	e7cb      	b.n	8001a7a <HAL_TIM_MspPostInit+0x46>
  else if(timHandle->Instance==TIM15)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_TIM_MspPostInit+0xf8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d1ca      	bne.n	8001a7e <HAL_TIM_MspPostInit+0x4a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_MspPostInit+0xe0>)
 8001aea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	9304      	str	r3, [sp, #16]
 8001b02:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e7e5      	b.n	8001ada <HAL_TIM_MspPostInit+0xa6>
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58021000 	.word	0x58021000
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	58020c00 	.word	0x58020c00
 8001b24:	40000c00 	.word	0x40000c00
 8001b28:	58020000 	.word	0x58020000
 8001b2c:	40014000 	.word	0x40014000

08001b30 <MX_TIM1_Init>:
{
 8001b30:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	2400      	movs	r4, #0
{
 8001b34:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	221c      	movs	r2, #28
 8001b38:	4621      	mov	r1, r4
 8001b3a:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	9403      	str	r4, [sp, #12]
 8001b3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	f007 fb6e 	bl	8009222 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b46:	222c      	movs	r2, #44	; 0x2c
 8001b48:	4621      	mov	r1, r4
 8001b4a:	eb0d 0002 	add.w	r0, sp, r2
 8001b4e:	f007 fb68 	bl	8009222 <memset>
  htim1.Instance = TIM1;
 8001b52:	4824      	ldr	r0, [pc, #144]	; (8001be4 <MX_TIM1_Init+0xb4>)
  htim1.Init.Prescaler = 64000-1;
 8001b54:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <MX_TIM1_Init+0xb8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 64000-1;
 8001b5c:	e9c0 1300 	strd	r1, r3, [r0]
  htim1.Init.Period = 20-1;
 8001b60:	2313      	movs	r3, #19
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b6a:	f004 fe5b 	bl	8006824 <HAL_TIM_PWM_Init>
 8001b6e:	b108      	cbz	r0, 8001b74 <MX_TIM1_Init+0x44>
    Error_Handler();
 8001b70:	f7ff fbae 	bl	80012d0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b74:	a901      	add	r1, sp, #4
 8001b76:	481b      	ldr	r0, [pc, #108]	; (8001be4 <MX_TIM1_Init+0xb4>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7e:	f005 f813 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	b108      	cbz	r0, 8001b88 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001b84:	f7ff fba4 	bl	80012d0 <Error_Handler>
  sConfigOC.Pulse = 15;
 8001b88:	2260      	movs	r2, #96	; 0x60
 8001b8a:	230f      	movs	r3, #15
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b8e:	a904      	add	r1, sp, #16
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_TIM1_Init+0xb4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b92:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 15;
 8001b94:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b98:	2204      	movs	r2, #4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba2:	f004 feb5 	bl	8006910 <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	b108      	cbz	r0, 8001bac <MX_TIM1_Init+0x7c>
    Error_Handler();
 8001ba8:	f7ff fb92 	bl	80012d0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb0:	a90b      	add	r1, sp, #44	; 0x2c
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_TIM1_Init+0xb4>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb4:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb6:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb8:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bca:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bce:	f005 f835 	bl	8006c3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd2:	b108      	cbz	r0, 8001bd8 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8001bd4:	f7ff fb7c 	bl	80012d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <MX_TIM1_Init+0xb4>)
 8001bda:	f7ff ff2b 	bl	8001a34 <HAL_TIM_MspPostInit>
}
 8001bde:	b016      	add	sp, #88	; 0x58
 8001be0:	bd10      	pop	{r4, pc}
 8001be2:	bf00      	nop
 8001be4:	240007ac 	.word	0x240007ac
 8001be8:	40010000 	.word	0x40010000

08001bec <MX_TIM4_Init>:
{
 8001bec:	b510      	push	{r4, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	a803      	add	r0, sp, #12
 8001bf8:	f007 fb13 	bl	8009222 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	221c      	movs	r2, #28
 8001bfe:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c06:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0a:	f007 fb0a 	bl	8009222 <memset>
  htim4.Instance = TIM4;
 8001c0e:	481d      	ldr	r0, [pc, #116]	; (8001c84 <MX_TIM4_Init+0x98>)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_TIM4_Init+0x9c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	6084      	str	r4, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	6184      	str	r4, [r0, #24]
  htim4.Init.Prescaler = 0;
 8001c16:	e9c0 3400 	strd	r3, r4, [r0]
  htim4.Init.Period = 65535;
 8001c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c22:	f004 fdcf 	bl	80067c4 <HAL_TIM_Base_Init>
 8001c26:	b108      	cbz	r0, 8001c2c <MX_TIM4_Init+0x40>
    Error_Handler();
 8001c28:	f7ff fb52 	bl	80012d0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c30:	a903      	add	r1, sp, #12
 8001c32:	4814      	ldr	r0, [pc, #80]	; (8001c84 <MX_TIM4_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c34:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c36:	f004 fef7 	bl	8006a28 <HAL_TIM_ConfigClockSource>
 8001c3a:	b108      	cbz	r0, 8001c40 <MX_TIM4_Init+0x54>
    Error_Handler();
 8001c3c:	f7ff fb48 	bl	80012d0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <MX_TIM4_Init+0x98>)
 8001c42:	f004 fdef 	bl	8006824 <HAL_TIM_PWM_Init>
 8001c46:	b108      	cbz	r0, 8001c4c <MX_TIM4_Init+0x60>
    Error_Handler();
 8001c48:	f7ff fb42 	bl	80012d0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c4e:	4669      	mov	r1, sp
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_TIM4_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c56:	f004 ffa7 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	b108      	cbz	r0, 8001c60 <MX_TIM4_Init+0x74>
    Error_Handler();
 8001c5c:	f7ff fb38 	bl	80012d0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c60:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c62:	220c      	movs	r2, #12
 8001c64:	a907      	add	r1, sp, #28
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <MX_TIM4_Init+0x98>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001c6c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c70:	f004 fe4e 	bl	8006910 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	b108      	cbz	r0, 8001c7a <MX_TIM4_Init+0x8e>
    Error_Handler();
 8001c76:	f7ff fb2b 	bl	80012d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001c7a:	4802      	ldr	r0, [pc, #8]	; (8001c84 <MX_TIM4_Init+0x98>)
 8001c7c:	f7ff feda 	bl	8001a34 <HAL_TIM_MspPostInit>
}
 8001c80:	b00e      	add	sp, #56	; 0x38
 8001c82:	bd10      	pop	{r4, pc}
 8001c84:	24000844 	.word	0x24000844
 8001c88:	40000800 	.word	0x40000800

08001c8c <MX_TIM5_Init>:
{
 8001c8c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	2400      	movs	r4, #0
{
 8001c90:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c92:	221c      	movs	r2, #28
 8001c94:	4621      	mov	r1, r4
 8001c96:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	9402      	str	r4, [sp, #8]
 8001c9a:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9e:	f007 fac0 	bl	8009222 <memset>
  htim5.Instance = TIM5;
 8001ca2:	4816      	ldr	r0, [pc, #88]	; (8001cfc <MX_TIM5_Init+0x70>)
  htim5.Init.Prescaler = 6400-1;
 8001ca4:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8001ca8:	4915      	ldr	r1, [pc, #84]	; (8001d00 <MX_TIM5_Init+0x74>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	6084      	str	r4, [r0, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 6400-1;
 8001cae:	e9c0 1300 	strd	r1, r3, [r0]
  htim5.Init.Period = 200-1;
 8001cb2:	23c7      	movs	r3, #199	; 0xc7
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cb8:	f004 fdb4 	bl	8006824 <HAL_TIM_PWM_Init>
 8001cbc:	b108      	cbz	r0, 8001cc2 <MX_TIM5_Init+0x36>
    Error_Handler();
 8001cbe:	f7ff fb07 	bl	80012d0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cc2:	4669      	mov	r1, sp
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_TIM5_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cca:	f004 ff6d 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	b108      	cbz	r0, 8001cd4 <MX_TIM5_Init+0x48>
    Error_Handler();
 8001cd0:	f7ff fafe 	bl	80012d0 <Error_Handler>
  sConfigOC.Pulse = 100-1;
 8001cd4:	2260      	movs	r2, #96	; 0x60
 8001cd6:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd8:	a903      	add	r1, sp, #12
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <MX_TIM5_Init+0x70>)
  sConfigOC.Pulse = 100-1;
 8001cdc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce2:	2204      	movs	r2, #4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce8:	f004 fe12 	bl	8006910 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	b108      	cbz	r0, 8001cf2 <MX_TIM5_Init+0x66>
    Error_Handler();
 8001cee:	f7ff faef 	bl	80012d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <MX_TIM5_Init+0x70>)
 8001cf4:	f7ff fe9e 	bl	8001a34 <HAL_TIM_MspPostInit>
}
 8001cf8:	b00a      	add	sp, #40	; 0x28
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	24000890 	.word	0x24000890
 8001d00:	40000c00 	.word	0x40000c00

08001d04 <MX_TIM15_Init>:
{
 8001d04:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	2210      	movs	r2, #16
{
 8001d08:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0a:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	eb0d 0002 	add.w	r0, sp, r2
 8001d12:	f007 fa86 	bl	8009222 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d16:	221c      	movs	r2, #28
 8001d18:	4621      	mov	r1, r4
 8001d1a:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	9403      	str	r4, [sp, #12]
 8001d1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	f007 fa7e 	bl	8009222 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d26:	4621      	mov	r1, r4
 8001d28:	222c      	movs	r2, #44	; 0x2c
 8001d2a:	a80f      	add	r0, sp, #60	; 0x3c
 8001d2c:	f007 fa79 	bl	8009222 <memset>
  htim15.Instance = TIM15;
 8001d30:	4829      	ldr	r0, [pc, #164]	; (8001dd8 <MX_TIM15_Init+0xd4>)
  htim15.Init.Prescaler = 6400;
 8001d32:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001d36:	4929      	ldr	r1, [pc, #164]	; (8001ddc <MX_TIM15_Init+0xd8>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	6084      	str	r4, [r0, #8]
  htim15.Init.Prescaler = 6400;
 8001d3a:	e9c0 1300 	strd	r1, r3, [r0]
  htim15.Init.Period = 200-1;
 8001d3e:	23c7      	movs	r3, #199	; 0xc7
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d48:	f004 fd3c 	bl	80067c4 <HAL_TIM_Base_Init>
 8001d4c:	b108      	cbz	r0, 8001d52 <MX_TIM15_Init+0x4e>
    Error_Handler();
 8001d4e:	f7ff fabf 	bl	80012d0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d56:	a904      	add	r1, sp, #16
 8001d58:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <MX_TIM15_Init+0xd4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d5c:	f004 fe64 	bl	8006a28 <HAL_TIM_ConfigClockSource>
 8001d60:	b108      	cbz	r0, 8001d66 <MX_TIM15_Init+0x62>
    Error_Handler();
 8001d62:	f7ff fab5 	bl	80012d0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001d66:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_TIM15_Init+0xd4>)
 8001d68:	f004 fd5c 	bl	8006824 <HAL_TIM_PWM_Init>
 8001d6c:	b108      	cbz	r0, 8001d72 <MX_TIM15_Init+0x6e>
    Error_Handler();
 8001d6e:	f7ff faaf 	bl	80012d0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d74:	a901      	add	r1, sp, #4
 8001d76:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <MX_TIM15_Init+0xd4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d7c:	f004 ff14 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	b108      	cbz	r0, 8001d86 <MX_TIM15_Init+0x82>
    Error_Handler();
 8001d82:	f7ff faa5 	bl	80012d0 <Error_Handler>
  sConfigOC.Pulse = 100-1;
 8001d86:	2260      	movs	r2, #96	; 0x60
 8001d88:	2363      	movs	r3, #99	; 0x63
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8c:	a908      	add	r1, sp, #32
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <MX_TIM15_Init+0xd4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d90:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.Pulse = 100-1;
 8001d92:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d96:	2204      	movs	r2, #4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d98:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da0:	f004 fdb6 	bl	8006910 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	b108      	cbz	r0, 8001daa <MX_TIM15_Init+0xa6>
    Error_Handler();
 8001da6:	f7ff fa93 	bl	80012d0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001dae:	a90f      	add	r1, sp, #60	; 0x3c
 8001db0:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <MX_TIM15_Init+0xd4>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db2:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001db4:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001db6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dba:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dbe:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001dc2:	f004 ff3b 	bl	8006c3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc6:	b108      	cbz	r0, 8001dcc <MX_TIM15_Init+0xc8>
    Error_Handler();
 8001dc8:	f7ff fa82 	bl	80012d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim15);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <MX_TIM15_Init+0xd4>)
 8001dce:	f7ff fe31 	bl	8001a34 <HAL_TIM_MspPostInit>
}
 8001dd2:	b01a      	add	sp, #104	; 0x68
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	bf00      	nop
 8001dd8:	240007f8 	.word	0x240007f8
 8001ddc:	40014000 	.word	0x40014000

08001de0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001de0:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001de2:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_LPUART1_UART_Init+0x5c>)
  hlpuart1.Init.BaudRate = 209700;
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <MX_LPUART1_UART_Init+0x60>)
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_LPUART1_UART_Init+0x64>)
 8001de8:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dec:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001dee:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001df4:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df6:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001df8:	6643      	str	r3, [r0, #100]	; 0x64
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dfe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e02:	f005 fb32 	bl	800746a <HAL_UART_Init>
 8001e06:	b108      	cbz	r0, 8001e0c <MX_LPUART1_UART_Init+0x2c>
  {
    Error_Handler();
 8001e08:	f7ff fa62 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	480b      	ldr	r0, [pc, #44]	; (8001e3c <MX_LPUART1_UART_Init+0x5c>)
 8001e10:	f005 fc17 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 8001e14:	b108      	cbz	r0, 8001e1a <MX_LPUART1_UART_Init+0x3a>
  {
    Error_Handler();
 8001e16:	f7ff fa5b 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_LPUART1_UART_Init+0x5c>)
 8001e1e:	f005 fc34 	bl	800768a <HAL_UARTEx_SetRxFifoThreshold>
 8001e22:	b108      	cbz	r0, 8001e28 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
 8001e24:	f7ff fa54 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_LPUART1_UART_Init+0x5c>)
 8001e2a:	f005 fbef 	bl	800760c <HAL_UARTEx_DisableFifoMode>
 8001e2e:	b118      	cbz	r0, 8001e38 <MX_LPUART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e34:	f7ff ba4c 	b.w	80012d0 <Error_Handler>
}
 8001e38:	bd08      	pop	{r3, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000954 	.word	0x24000954
 8001e40:	58000c00 	.word	0x58000c00
 8001e44:	00033324 	.word	0x00033324

08001e48 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e48:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e4a:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <MX_UART4_Init+0x5c>)
  huart4.Init.BaudRate = 115200;
 8001e4c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <MX_UART4_Init+0x60>)
 8001e52:	e9c0 2300 	strd	r2, r3, [r0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	2300      	movs	r3, #0
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e58:	220c      	movs	r2, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e5e:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e60:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e64:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e68:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e6c:	f005 fafd 	bl	800746a <HAL_UART_Init>
 8001e70:	b108      	cbz	r0, 8001e76 <MX_UART4_Init+0x2e>
  {
    Error_Handler();
 8001e72:	f7ff fa2d 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <MX_UART4_Init+0x5c>)
 8001e7a:	f005 fbe2 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 8001e7e:	b108      	cbz	r0, 8001e84 <MX_UART4_Init+0x3c>
  {
    Error_Handler();
 8001e80:	f7ff fa26 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e84:	2100      	movs	r1, #0
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_UART4_Init+0x5c>)
 8001e88:	f005 fbff 	bl	800768a <HAL_UARTEx_SetRxFifoThreshold>
 8001e8c:	b108      	cbz	r0, 8001e92 <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f7ff fa1f 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001e92:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_UART4_Init+0x5c>)
 8001e94:	f005 fbba 	bl	800760c <HAL_UARTEx_DisableFifoMode>
 8001e98:	b118      	cbz	r0, 8001ea2 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e9e:	f7ff ba17 	b.w	80012d0 <Error_Handler>
}
 8001ea2:	bd08      	pop	{r3, pc}
 8001ea4:	24000a74 	.word	0x24000a74
 8001ea8:	40004c00 	.word	0x40004c00

08001eac <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001eac:	b508      	push	{r3, lr}
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001eae:	4816      	ldr	r0, [pc, #88]	; (8001f08 <MX_UART8_Init+0x5c>)
  huart8.Init.BaudRate = 115200;
 8001eb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <MX_UART8_Init+0x60>)
 8001eb6:	e9c0 2300 	strd	r2, r3, [r0]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	2300      	movs	r3, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	220c      	movs	r2, #12
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ebe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ec2:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001ed0:	f005 facb 	bl	800746a <HAL_UART_Init>
 8001ed4:	b108      	cbz	r0, 8001eda <MX_UART8_Init+0x2e>
  {
    Error_Handler();
 8001ed6:	f7ff f9fb 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	480a      	ldr	r0, [pc, #40]	; (8001f08 <MX_UART8_Init+0x5c>)
 8001ede:	f005 fbb0 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee2:	b108      	cbz	r0, 8001ee8 <MX_UART8_Init+0x3c>
  {
    Error_Handler();
 8001ee4:	f7ff f9f4 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <MX_UART8_Init+0x5c>)
 8001eec:	f005 fbcd 	bl	800768a <HAL_UARTEx_SetRxFifoThreshold>
 8001ef0:	b108      	cbz	r0, 8001ef6 <MX_UART8_Init+0x4a>
  {
    Error_Handler();
 8001ef2:	f7ff f9ed 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_UART8_Init+0x5c>)
 8001ef8:	f005 fb88 	bl	800760c <HAL_UARTEx_DisableFifoMode>
 8001efc:	b118      	cbz	r0, 8001f06 <MX_UART8_Init+0x5a>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f02:	f7ff b9e5 	b.w	80012d0 <Error_Handler>
}
 8001f06:	bd08      	pop	{r3, pc}
 8001f08:	24000b04 	.word	0x24000b04
 8001f0c:	40007c00 	.word	0x40007c00

08001f10 <MX_USART1_Init>:
/* USART1 init function */
void MX_USART1_Init(void)
{
 8001f10:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001f12:	4816      	ldr	r0, [pc, #88]	; (8001f6c <MX_USART1_Init+0x5c>)
  husart1.Init.BaudRate = 115200;
 8001f14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f18:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <MX_USART1_Init+0x60>)
 8001f1a:	e9c0 2300 	strd	r2, r3, [r0]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001f1e:	2300      	movs	r3, #0
  husart1.Init.StopBits = USART_STOPBITS_1;
  husart1.Init.Parity = USART_PARITY_NONE;
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001f20:	220c      	movs	r2, #12
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001f22:	e9c0 3302 	strd	r3, r3, [r0, #8]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001f26:	6103      	str	r3, [r0, #16]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001f28:	6243      	str	r3, [r0, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001f2a:	6403      	str	r3, [r0, #64]	; 0x40
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001f2c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001f30:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001f34:	f005 fbea 	bl	800770c <HAL_USART_Init>
 8001f38:	b108      	cbz	r0, 8001f3e <MX_USART1_Init+0x2e>
  {
    Error_Handler();
 8001f3a:	f7ff f9c9 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <MX_USART1_Init+0x5c>)
 8001f42:	f005 fe5d 	bl	8007c00 <HAL_USARTEx_SetTxFifoThreshold>
 8001f46:	b108      	cbz	r0, 8001f4c <MX_USART1_Init+0x3c>
  {
    Error_Handler();
 8001f48:	f7ff f9c2 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_USART1_Init+0x5c>)
 8001f50:	f005 fe7a 	bl	8007c48 <HAL_USARTEx_SetRxFifoThreshold>
 8001f54:	b108      	cbz	r0, 8001f5a <MX_USART1_Init+0x4a>
  {
    Error_Handler();
 8001f56:	f7ff f9bb 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001f5a:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_USART1_Init+0x5c>)
 8001f5c:	f005 fe36 	bl	8007bcc <HAL_USARTEx_DisableFifoMode>
 8001f60:	b118      	cbz	r0, 8001f6a <MX_USART1_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f66:	f7ff b9b3 	b.w	80012d0 <Error_Handler>
}
 8001f6a:	bd08      	pop	{r3, pc}
 8001f6c:	24000b94 	.word	0x24000b94
 8001f70:	40011000 	.word	0x40011000

08001f74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f76:	4816      	ldr	r0, [pc, #88]	; (8001fd0 <MX_USART2_UART_Init+0x5c>)
  huart2.Init.BaudRate = 115200;
 8001f78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <MX_USART2_UART_Init+0x60>)
 8001f7e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f86:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8a:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f90:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f94:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f98:	f005 fa67 	bl	800746a <HAL_UART_Init>
 8001f9c:	b108      	cbz	r0, 8001fa2 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8001f9e:	f7ff f997 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fa6:	f005 fb4c 	bl	8007642 <HAL_UARTEx_SetTxFifoThreshold>
 8001faa:	b108      	cbz	r0, 8001fb0 <MX_USART2_UART_Init+0x3c>
  {
    Error_Handler();
 8001fac:	f7ff f990 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fb4:	f005 fb69 	bl	800768a <HAL_UARTEx_SetRxFifoThreshold>
 8001fb8:	b108      	cbz	r0, 8001fbe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001fba:	f7ff f989 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fc0:	f005 fb24 	bl	800760c <HAL_UARTEx_DisableFifoMode>
 8001fc4:	b118      	cbz	r0, 8001fce <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fca:	f7ff b981 	b.w	80012d0 <Error_Handler>
}
 8001fce:	bd08      	pop	{r3, pc}
 8001fd0:	240009e4 	.word	0x240009e4
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <MX_USART3_Init>:
/* USART3 init function */
void MX_USART3_Init(void)
{
 8001fd8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001fda:	4816      	ldr	r0, [pc, #88]	; (8002034 <MX_USART3_Init+0x5c>)
  husart3.Init.BaudRate = 115200;
 8001fdc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART3_Init+0x60>)
 8001fe2:	e9c0 2300 	strd	r2, r3, [r0]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001fe6:	2300      	movs	r3, #0
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001fe8:	220c      	movs	r2, #12
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001fea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001fee:	6103      	str	r3, [r0, #16]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001ff0:	6243      	str	r3, [r0, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001ff2:	6403      	str	r3, [r0, #64]	; 0x40
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001ff4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001ff8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001ffc:	f005 fb86 	bl	800770c <HAL_USART_Init>
 8002000:	b108      	cbz	r0, 8002006 <MX_USART3_Init+0x2e>
  {
    Error_Handler();
 8002002:	f7ff f965 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <MX_USART3_Init+0x5c>)
 800200a:	f005 fdf9 	bl	8007c00 <HAL_USARTEx_SetTxFifoThreshold>
 800200e:	b108      	cbz	r0, 8002014 <MX_USART3_Init+0x3c>
  {
    Error_Handler();
 8002010:	f7ff f95e 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_USART3_Init+0x5c>)
 8002018:	f005 fe16 	bl	8007c48 <HAL_USARTEx_SetRxFifoThreshold>
 800201c:	b108      	cbz	r0, 8002022 <MX_USART3_Init+0x4a>
  {
    Error_Handler();
 800201e:	f7ff f957 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_USART3_Init+0x5c>)
 8002024:	f005 fdd2 	bl	8007bcc <HAL_USARTEx_DisableFifoMode>
 8002028:	b118      	cbz	r0, 8002032 <MX_USART3_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800202a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800202e:	f7ff b94f 	b.w	80012d0 <Error_Handler>
}
 8002032:	bd08      	pop	{r3, pc}
 8002034:	24000bf4 	.word	0x24000bf4
 8002038:	40004800 	.word	0x40004800

0800203c <MX_USART6_Init>:
/* USART6 init function */
void MX_USART6_Init(void)
{
 800203c:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <MX_USART6_Init+0x5c>)
  husart6.Init.BaudRate = 115200;
 8002040:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <MX_USART6_Init+0x60>)
 8002046:	e9c0 2300 	strd	r2, r3, [r0]
  husart6.Init.WordLength = USART_WORDLENGTH_8B;
 800204a:	2300      	movs	r3, #0
  husart6.Init.StopBits = USART_STOPBITS_1;
  husart6.Init.Parity = USART_PARITY_NONE;
  husart6.Init.Mode = USART_MODE_TX_RX;
 800204c:	220c      	movs	r2, #12
  husart6.Init.StopBits = USART_STOPBITS_1;
 800204e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  husart6.Init.Parity = USART_PARITY_NONE;
 8002052:	6103      	str	r3, [r0, #16]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  husart6.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002054:	6243      	str	r3, [r0, #36]	; 0x24
  husart6.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002056:	6403      	str	r3, [r0, #64]	; 0x40
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 8002058:	e9c0 2305 	strd	r2, r3, [r0, #20]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800205c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_USART_Init(&husart6) != HAL_OK)
 8002060:	f005 fb54 	bl	800770c <HAL_USART_Init>
 8002064:	b108      	cbz	r0, 800206a <MX_USART6_Init+0x2e>
  {
    Error_Handler();
 8002066:	f7ff f933 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart6, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <MX_USART6_Init+0x5c>)
 800206e:	f005 fdc7 	bl	8007c00 <HAL_USARTEx_SetTxFifoThreshold>
 8002072:	b108      	cbz	r0, 8002078 <MX_USART6_Init+0x3c>
  {
    Error_Handler();
 8002074:	f7ff f92c 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart6, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002078:	2100      	movs	r1, #0
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_USART6_Init+0x5c>)
 800207c:	f005 fde4 	bl	8007c48 <HAL_USARTEx_SetRxFifoThreshold>
 8002080:	b108      	cbz	r0, 8002086 <MX_USART6_Init+0x4a>
  {
    Error_Handler();
 8002082:	f7ff f925 	bl	80012d0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart6) != HAL_OK)
 8002086:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_USART6_Init+0x5c>)
 8002088:	f005 fda0 	bl	8007bcc <HAL_USARTEx_DisableFifoMode>
 800208c:	b118      	cbz	r0, 8002096 <MX_USART6_Init+0x5a>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800208e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002092:	f7ff b91d 	b.w	80012d0 <Error_Handler>
}
 8002096:	bd08      	pop	{r3, pc}
 8002098:	24000c54 	.word	0x24000c54
 800209c:	40011400 	.word	0x40011400

080020a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	b0bc      	sub	sp, #240	; 0xf0
 80020a4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	2214      	movs	r2, #20
 80020a8:	2100      	movs	r1, #0
 80020aa:	a808      	add	r0, sp, #32
 80020ac:	f007 f8b9 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	22bc      	movs	r2, #188	; 0xbc
 80020b2:	2100      	movs	r1, #0
 80020b4:	a80d      	add	r0, sp, #52	; 0x34
 80020b6:	f007 f8b4 	bl	8009222 <memset>
  if(uartHandle->Instance==LPUART1)
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	4a60      	ldr	r2, [pc, #384]	; (8002240 <HAL_UART_MspInit+0x1a0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d130      	bne.n	8002124 <HAL_UART_MspInit+0x84>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020c2:	2304      	movs	r3, #4
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c4:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020c6:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f003 f84e 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	b108      	cbz	r0, 80020d2 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80020ce:	f7ff f8ff 	bl	80012d0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_UART_MspInit+0x1a4>)
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	f44f 64c0 	mov.w	r4, #1536	; 0x600
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	a908      	add	r1, sp, #32
 80020da:	485b      	ldr	r0, [pc, #364]	; (8002248 <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80020e0:	f042 0208 	orr.w	r2, r2, #8
 80020e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80020e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80020ec:	f002 0208 	and.w	r2, r2, #8
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	e9cd 4308 	strd	r4, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002118:	2303      	movs	r3, #3
 800211a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211c:	f002 f844 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002120:	b03c      	add	sp, #240	; 0xf0
 8002122:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==UART4)
 8002124:	4a49      	ldr	r2, [pc, #292]	; (800224c <HAL_UART_MspInit+0x1ac>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12c      	bne.n	8002184 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800212a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212c:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800212e:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002130:	f003 f81a 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8002134:	b108      	cbz	r0, 800213a <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8002136:	f7ff f8cb 	bl	80012d0 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_UART_MspInit+0x1a4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2003      	movs	r0, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 800213e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002142:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002146:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800214a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800214e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002152:	9202      	str	r2, [sp, #8]
 8002154:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	9303      	str	r3, [sp, #12]
 800216c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	e9cd 0308 	strd	r0, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800217a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217c:	a908      	add	r1, sp, #32
 800217e:	4834      	ldr	r0, [pc, #208]	; (8002250 <HAL_UART_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002180:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	e7cb      	b.n	800211c <HAL_UART_MspInit+0x7c>
  else if(uartHandle->Instance==UART8)
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <HAL_UART_MspInit+0x1b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12c      	bne.n	80021e4 <HAL_UART_MspInit+0x144>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800218a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800218e:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f002 ffea 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	b108      	cbz	r0, 800219a <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8002196:	f7ff f89b 	bl	80012d0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_UART_MspInit+0x1a4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	482e      	ldr	r0, [pc, #184]	; (8002258 <HAL_UART_MspInit+0x1b8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80021a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80021a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021a8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80021ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80021b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021b4:	9204      	str	r2, [sp, #16]
 80021b6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021bc:	f042 0210 	orr.w	r2, r2, #16
 80021c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	9305      	str	r3, [sp, #20]
 80021ce:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d8:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80021de:	2308      	movs	r3, #8
 80021e0:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e2:	e79b      	b.n	800211c <HAL_UART_MspInit+0x7c>
  else if(uartHandle->Instance==USART2)
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_UART_MspInit+0x1bc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d19a      	bne.n	8002120 <HAL_UART_MspInit+0x80>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ea:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ee:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f0:	f002 ffba 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	b108      	cbz	r0, 80021fa <HAL_UART_MspInit+0x15a>
      Error_Handler();
 80021f6:	f7ff f86b 	bl	80012d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_UART_MspInit+0x1a4>)
 80021fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002200:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002204:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002208:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800220c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002210:	9206      	str	r2, [sp, #24]
 8002212:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002214:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002218:	f042 0208 	orr.w	r2, r2, #8
 800221c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	9307      	str	r3, [sp, #28]
 800222c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223a:	2307      	movs	r3, #7
 800223c:	e79e      	b.n	800217c <HAL_UART_MspInit+0xdc>
 800223e:	bf00      	nop
 8002240:	58000c00 	.word	0x58000c00
 8002244:	58024400 	.word	0x58024400
 8002248:	58020000 	.word	0x58020000
 800224c:	40004c00 	.word	0x40004c00
 8002250:	58020c00 	.word	0x58020c00
 8002254:	40007c00 	.word	0x40007c00
 8002258:	58021000 	.word	0x58021000
 800225c:	40004400 	.word	0x40004400

08002260 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	b0bc      	sub	sp, #240	; 0xf0
 8002264:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	2214      	movs	r2, #20
 8002268:	2100      	movs	r1, #0
 800226a:	a808      	add	r0, sp, #32
 800226c:	f006 ffd9 	bl	8009222 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	22bc      	movs	r2, #188	; 0xbc
 8002272:	2100      	movs	r1, #0
 8002274:	a80d      	add	r0, sp, #52	; 0x34
 8002276:	f006 ffd4 	bl	8009222 <memset>
  if(usartHandle->Instance==USART1)
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_USART_MspInit+0x1ac>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d147      	bne.n	8002312 <HAL_USART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002282:	2301      	movs	r3, #1
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002284:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002286:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002288:	f002 ff6e 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	b108      	cbz	r0, 8002292 <HAL_USART_MspInit+0x32>
    {
      Error_Handler();
 800228e:	f7ff f81f 	bl	80012d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_USART_MspInit+0x1b0>)
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    PA8     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	a908      	add	r1, sp, #32
    __HAL_RCC_USART1_CLK_ENABLE();
 800229a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	485d      	ldr	r0, [pc, #372]	; (8002414 <HAL_USART_MspInit+0x1b4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a0:	f042 0210 	orr.w	r2, r2, #16
 80022a4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80022a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80022ac:	f002 0210 	and.w	r2, r2, #16
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022b8:	f042 0202 	orr.w	r2, r2, #2
 80022bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022c4:	f002 0202 	and.w	r2, r2, #2
 80022c8:	9202      	str	r2, [sp, #8]
 80022ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	9303      	str	r3, [sp, #12]
 80022e2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022e8:	e9cd 3508 	strd	r3, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022ec:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022f2:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f001 ff58 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	a908      	add	r1, sp, #32
 80022fe:	4846      	ldr	r0, [pc, #280]	; (8002418 <HAL_USART_MspInit+0x1b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	e9cd 3508 	strd	r3, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002304:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800230a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230c:	f001 ff4c 	bl	80041a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002310:	e048      	b.n	80023a4 <HAL_USART_MspInit+0x144>
  else if(usartHandle->Instance==USART3)
 8002312:	4a42      	ldr	r2, [pc, #264]	; (800241c <HAL_USART_MspInit+0x1bc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d147      	bne.n	80023a8 <HAL_USART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002318:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800231c:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231e:	f002 ff23 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 8002322:	b108      	cbz	r0, 8002328 <HAL_USART_MspInit+0xc8>
      Error_Handler();
 8002324:	f7fe ffd4 	bl	80012d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_USART_MspInit+0x1b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002330:	483b      	ldr	r0, [pc, #236]	; (8002420 <HAL_USART_MspInit+0x1c0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002332:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002336:	4c3b      	ldr	r4, [pc, #236]	; (8002424 <HAL_USART_MspInit+0x1c4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002338:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800233c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002340:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002344:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002348:	9204      	str	r2, [sp, #16]
 800234a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800234c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002350:	f042 0208 	orr.w	r2, r2, #8
 8002354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	9305      	str	r3, [sp, #20]
 8002362:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002374:	f001 ff18 	bl	80041a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002378:	482b      	ldr	r0, [pc, #172]	; (8002428 <HAL_USART_MspInit+0x1c8>)
 800237a:	232d      	movs	r3, #45	; 0x2d
 800237c:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002380:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002384:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238a:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800238e:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002392:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002396:	f000 ff99 	bl	80032cc <HAL_DMA_Init>
 800239a:	b108      	cbz	r0, 80023a0 <HAL_USART_MspInit+0x140>
      Error_Handler();
 800239c:	f7fe ff98 	bl	80012d0 <Error_Handler>
    __HAL_LINKDMA(usartHandle,hdmarx,hdma_usart3_rx);
 80023a0:	6574      	str	r4, [r6, #84]	; 0x54
 80023a2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80023a4:	b03c      	add	sp, #240	; 0xf0
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
  else if(usartHandle->Instance==USART6)
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_USART_MspInit+0x1cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d1fa      	bne.n	80023a4 <HAL_USART_MspInit+0x144>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80023ae:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b0:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80023b2:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b4:	f002 fed8 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80023b8:	b108      	cbz	r0, 80023be <HAL_USART_MspInit+0x15e>
      Error_Handler();
 80023ba:	f7fe ff89 	bl	80012d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_USART_MspInit+0x1b0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	a908      	add	r1, sp, #32
 80023c2:	481b      	ldr	r0, [pc, #108]	; (8002430 <HAL_USART_MspInit+0x1d0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80023c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80023d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80023d4:	f002 0220 	and.w	r2, r2, #32
 80023d8:	9206      	str	r2, [sp, #24]
 80023da:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80023e0:	f042 0204 	orr.w	r2, r2, #4
 80023e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	9307      	str	r3, [sp, #28]
 80023f6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002404:	2307      	movs	r3, #7
 8002406:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002408:	e780      	b.n	800230c <HAL_USART_MspInit+0xac>
 800240a:	bf00      	nop
 800240c:	40011000 	.word	0x40011000
 8002410:	58024400 	.word	0x58024400
 8002414:	58020400 	.word	0x58020400
 8002418:	58020000 	.word	0x58020000
 800241c:	40004800 	.word	0x40004800
 8002420:	58020c00 	.word	0x58020c00
 8002424:	240008dc 	.word	0x240008dc
 8002428:	40020010 	.word	0x40020010
 800242c:	40011400 	.word	0x40011400
 8002430:	58020800 	.word	0x58020800

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002438:	f7ff fa44 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	; (8002474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	; (8002480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f006 fea9 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe fee9 	bl	800123c <main>
  bx  lr
 800246a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002474:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002478:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 800247c:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8002480:	24004a1c 	.word	0x24004a1c

08002484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC3_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248a:	2003      	movs	r0, #3
 800248c:	f000 fc58 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002490:	f002 fb44 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8002494:	490f      	ldr	r1, [pc, #60]	; (80024d4 <HAL_Init+0x4c>)
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_Init+0x50>)
 8002498:	698b      	ldr	r3, [r1, #24]
 800249a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024a6:	698b      	ldr	r3, [r1, #24]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_Init+0x54>)
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa20 f303 	lsr.w	r3, r0, r3
 80024b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_Init+0x58>)
 80024bc:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff f940 	bl	8001744 <HAL_InitTick>
 80024c4:	4604      	mov	r4, r0
 80024c6:	b918      	cbnz	r0, 80024d0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff f924 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80024cc:	4620      	mov	r0, r4
 80024ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024d0:	2401      	movs	r4, #1
 80024d2:	e7fb      	b.n	80024cc <HAL_Init+0x44>
 80024d4:	58024400 	.word	0x58024400
 80024d8:	0800ba6f 	.word	0x0800ba6f
 80024dc:	24000004 	.word	0x24000004
 80024e0:	24000000 	.word	0x24000000

080024e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <HAL_GetTick+0x8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	24000cb4 	.word	0x24000cb4

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff6 	bl	80024e4 <HAL_GetTick>
 80024f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80024fc:	bf1e      	ittt	ne
 80024fe:	4b04      	ldrne	r3, [pc, #16]	; (8002510 <HAL_Delay+0x20>)
 8002500:	781b      	ldrbne	r3, [r3, #0]
 8002502:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002504:	f7ff ffee 	bl	80024e4 <HAL_GetTick>
 8002508:	1b43      	subs	r3, r0, r5
 800250a:	42a3      	cmp	r3, r4
 800250c:	d3fa      	bcc.n	8002504 <HAL_Delay+0x14>
  {
  }
}
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	24000008 	.word	0x24000008

08002514 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <HAL_GetREVID+0x8>)
 8002516:	6818      	ldr	r0, [r3, #0]
}
 8002518:	0c00      	lsrs	r0, r0, #16
 800251a:	4770      	bx	lr
 800251c:	5c001000 	.word	0x5c001000

08002520 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002520:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002522:	0dcc      	lsrs	r4, r1, #23
 8002524:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002526:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800252a:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800252c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8002530:	408d      	lsls	r5, r1
 8002532:	fa02 f101 	lsl.w	r1, r2, r1
 8002536:	5823      	ldr	r3, [r4, r0]
 8002538:	ea23 0305 	bic.w	r3, r3, r5
 800253c:	430b      	orrs	r3, r1
 800253e:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002540:	bd30      	pop	{r4, r5, pc}

08002542 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002542:	6880      	ldr	r0, [r0, #8]
}
 8002544:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002548:	4770      	bx	lr
	...

0800254c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800254c:	2300      	movs	r3, #0
{
 800254e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002550:	9301      	str	r3, [sp, #4]
{
 8002552:	4604      	mov	r4, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002554:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002558:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800255a:	2b01      	cmp	r3, #1
 800255c:	f000 81c5 	beq.w	80028ea <HAL_ADC_ConfigChannel+0x39e>
 8002560:	2301      	movs	r3, #1
 8002562:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002566:	6800      	ldr	r0, [r0, #0]
 8002568:	f7ff ffeb 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 800256c:	2800      	cmp	r0, #0
 800256e:	f040 81b7 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002572:	680a      	ldr	r2, [r1, #0]
 8002574:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002578:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800257c:	2800      	cmp	r0, #0
 800257e:	d16c      	bne.n	800265a <HAL_ADC_ConfigChannel+0x10e>
 8002580:	408b      	lsls	r3, r1
 8002582:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8002584:	271f      	movs	r7, #31
 8002586:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002588:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800258c:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800258e:	686a      	ldr	r2, [r5, #4]
 8002590:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 8002592:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002596:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002598:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800259c:	4097      	lsls	r7, r2
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	f856 300c 	ldr.w	r3, [r6, ip]
 80025a6:	ea23 0307 	bic.w	r3, r3, r7
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f846 300c 	str.w	r3, [r6, ip]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b0:	f7ff ffc7 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025b4:	6827      	ldr	r7, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	ea53 0600 	orrs.w	r6, r3, r0
 80025c0:	d141      	bne.n	8002646 <HAL_ADC_ConfigChannel+0xfa>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025c2:	68aa      	ldr	r2, [r5, #8]
 80025c4:	4638      	mov	r0, r7
 80025c6:	6829      	ldr	r1, [r5, #0]
 80025c8:	f7ff ffaa 	bl	8002520 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025cc:	4bb7      	ldr	r3, [pc, #732]	; (80028ac <HAL_ADC_ConfigChannel+0x360>)
 80025ce:	696a      	ldr	r2, [r5, #20]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	d145      	bne.n	800266c <HAL_ADC_ConfigChannel+0x120>
 80025e0:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80025e4:	0049      	lsls	r1, r1, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e6:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025ea:	fa02 f101 	lsl.w	r1, r2, r1
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ee:	6828      	ldr	r0, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f0:	f1bc 0f04 	cmp.w	ip, #4
 80025f4:	d042      	beq.n	800267c <HAL_ADC_ConfigChannel+0x130>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f6:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 80025fa:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80025fe:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8002602:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002606:	4302      	orrs	r2, r0
 8002608:	430a      	orrs	r2, r1
 800260a:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800260e:	6929      	ldr	r1, [r5, #16]
 8002610:	7e6a      	ldrb	r2, [r5, #25]
 8002612:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002614:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8002618:	bf0c      	ite	eq
 800261a:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 800261e:	2000      	movne	r0, #0
 8002620:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002624:	4302      	orrs	r2, r0
 8002626:	f847 2021 	str.w	r2, [r7, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800262a:	7e29      	ldrb	r1, [r5, #24]
 800262c:	692a      	ldr	r2, [r5, #16]
 800262e:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002630:	6918      	ldr	r0, [r3, #16]
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	bf08      	it	eq
 8002638:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 800263c:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002640:	4096      	lsls	r6, r2
 8002642:	4306      	orrs	r6, r0
 8002644:	611e      	str	r6, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002646:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002648:	6883      	ldr	r3, [r0, #8]
 800264a:	07da      	lsls	r2, r3, #31
 800264c:	d53d      	bpl.n	80026ca <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002650:	2300      	movs	r3, #0
 8002652:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002656:	b003      	add	sp, #12
 8002658:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800265e:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002662:	f003 001f 	and.w	r0, r3, #31
 8002666:	2301      	movs	r3, #1
 8002668:	4083      	lsls	r3, r0
 800266a:	e78a      	b.n	8002582 <HAL_ADC_ConfigChannel+0x36>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800266c:	f011 0f10 	tst.w	r1, #16
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	d0b5      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x94>
 8002674:	0849      	lsrs	r1, r1, #1
 8002676:	f001 0108 	and.w	r1, r1, #8
 800267a:	e7b4      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x9a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800267c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800267e:	0681      	lsls	r1, r0, #26
 8002680:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002684:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8002688:	d103      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x146>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800268a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800268c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002690:	661a      	str	r2, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002692:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002694:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002698:	4291      	cmp	r1, r2
 800269a:	d103      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x158>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800269c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800269e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026a2:	665a      	str	r2, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026a6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80026aa:	4291      	cmp	r1, r2
 80026ac:	d103      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x16a>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80026ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b4:	669a      	str	r2, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80026bc:	4291      	cmp	r1, r2
 80026be:	d1c2      	bne.n	8002646 <HAL_ADC_ConfigChannel+0xfa>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80026c8:	e7bd      	b.n	8002646 <HAL_ADC_ConfigChannel+0xfa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026ca:	68ef      	ldr	r7, [r5, #12]
 80026cc:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80026ce:	f007 0c18 	and.w	ip, r7, #24
 80026d2:	4a77      	ldr	r2, [pc, #476]	; (80028b0 <HAL_ADC_ConfigChannel+0x364>)
 80026d4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 80026d8:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80026dc:	fa22 f20c 	lsr.w	r2, r2, ip
 80026e0:	ea21 0106 	bic.w	r1, r1, r6
 80026e4:	401a      	ands	r2, r3
 80026e6:	430a      	orrs	r2, r1
 80026e8:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ec:	4a71      	ldr	r2, [pc, #452]	; (80028b4 <HAL_ADC_ConfigChannel+0x368>)
 80026ee:	4297      	cmp	r7, r2
 80026f0:	d146      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x234>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f2:	b9de      	cbnz	r6, 800272c <HAL_ADC_ConfigChannel+0x1e0>
 80026f4:	0e9a      	lsrs	r2, r3, #26
 80026f6:	2101      	movs	r1, #1
 80026f8:	3201      	adds	r2, #1
 80026fa:	f002 071f 	and.w	r7, r2, #31
 80026fe:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002700:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002702:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002706:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270a:	d92a      	bls.n	8002762 <HAL_ADC_ConfigChannel+0x216>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800270c:	430a      	orrs	r2, r1
 800270e:	2e00      	cmp	r6, #0
 8002710:	f040 808d 	bne.w	800282e <HAL_ADC_ConfigChannel+0x2e2>
 8002714:	0e9e      	lsrs	r6, r3, #26
 8002716:	3601      	adds	r6, #1
 8002718:	f006 061f 	and.w	r6, r6, #31
 800271c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002720:	391e      	subs	r1, #30
 8002722:	0509      	lsls	r1, r1, #20
 8002724:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002728:	4311      	orrs	r1, r2
 800272a:	e026      	b.n	800277a <HAL_ADC_ConfigChannel+0x22e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002730:	b132      	cbz	r2, 8002740 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002732:	fab2 f282 	clz	r2, r2
 8002736:	3201      	adds	r2, #1
 8002738:	f002 021f 	and.w	r2, r2, #31
 800273c:	2a09      	cmp	r2, #9
 800273e:	d864      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x2be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002744:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002748:	3201      	adds	r2, #1
 800274a:	0692      	lsls	r2, r2, #26
 800274c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002754:	fab1 f181 	clz	r1, r1
 8002758:	3101      	adds	r1, #1
 800275a:	f001 071f 	and.w	r7, r1, #31
 800275e:	2101      	movs	r1, #1
 8002760:	40b9      	lsls	r1, r7
 8002762:	430a      	orrs	r2, r1
 8002764:	2e00      	cmp	r6, #0
 8002766:	d14b      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2b4>
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002774:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002776:	ea42 0103 	orr.w	r1, r2, r3
 800277a:	68aa      	ldr	r2, [r5, #8]
 800277c:	f7ff fed0 	bl	8002520 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002780:	6828      	ldr	r0, [r5, #0]
 8002782:	2800      	cmp	r0, #0
 8002784:	f6bf af63 	bge.w	800264e <HAL_ADC_ConfigChannel+0x102>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002788:	6821      	ldr	r1, [r4, #0]
 800278a:	4a4b      	ldr	r2, [pc, #300]	; (80028b8 <HAL_ADC_ConfigChannel+0x36c>)
 800278c:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_ADC_ConfigChannel+0x370>)
 800278e:	4291      	cmp	r1, r2
 8002790:	4d4b      	ldr	r5, [pc, #300]	; (80028c0 <HAL_ADC_ConfigChannel+0x374>)
 8002792:	d003      	beq.n	800279c <HAL_ADC_ConfigChannel+0x250>
 8002794:	4e4b      	ldr	r6, [pc, #300]	; (80028c4 <HAL_ADC_ConfigChannel+0x378>)
 8002796:	42a9      	cmp	r1, r5
 8002798:	bf18      	it	ne
 800279a:	4633      	movne	r3, r6
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800279c:	4291      	cmp	r1, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	d001      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x25a>
 80027a2:	42a9      	cmp	r1, r5
 80027a4:	d150      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a6:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <HAL_ADC_ConfigChannel+0x36c>)
 80027a8:	6896      	ldr	r6, [r2, #8]
 80027aa:	68aa      	ldr	r2, [r5, #8]
 80027ac:	4332      	orrs	r2, r6
 80027ae:	43d2      	mvns	r2, r2
 80027b0:	f002 0201 	and.w	r2, r2, #1
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d073      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x354>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027ba:	f003 75e0 	and.w	r5, r3, #29360128	; 0x1c00000
 80027be:	4290      	cmp	r0, r2
 80027c0:	d145      	bne.n	800284e <HAL_ADC_ConfigChannel+0x302>
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	f53f af43 	bmi.w	800264e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c8:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_ADC_ConfigChannel+0x380>)
 80027ca:	4299      	cmp	r1, r3
 80027cc:	f47f af3f 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027d0:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80027d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80027d8:	432a      	orrs	r2, r5
 80027da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_ADC_ConfigChannel+0x384>)
 80027e4:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_ADC_ConfigChannel+0x388>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ec:	3301      	adds	r3, #1
 80027ee:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 80027f0:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f43f af2a 	beq.w	800264e <HAL_ADC_ConfigChannel+0x102>
                wait_loop_index--;
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	e7f7      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x2a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	e7af      	b.n	800276a <HAL_ADC_ConfigChannel+0x21e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800280e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002812:	3201      	adds	r2, #1
 8002814:	0692      	lsls	r2, r2, #26
 8002816:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800281e:	fab1 f181 	clz	r1, r1
 8002822:	3101      	adds	r1, #1
 8002824:	f001 071f 	and.w	r7, r1, #31
 8002828:	2101      	movs	r1, #1
 800282a:	40b9      	lsls	r1, r7
 800282c:	e76e      	b.n	800270c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002832:	fab1 f181 	clz	r1, r1
 8002836:	f06f 061d 	mvn.w	r6, #29
 800283a:	3101      	adds	r1, #1
 800283c:	f001 031f 	and.w	r3, r1, #31
 8002840:	2103      	movs	r1, #3
 8002842:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002846:	e76c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1d6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_ADC_ConfigChannel+0x380>)
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	e7af      	b.n	80027ae <HAL_ADC_ConfigChannel+0x262>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_ADC_ConfigChannel+0x38c>)
 8002850:	4290      	cmp	r0, r2
 8002852:	d111      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x32c>
 8002854:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8002858:	f47f aef9 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_ADC_ConfigChannel+0x380>)
 800285e:	4291      	cmp	r1, r2
 8002860:	f47f aef5 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002864:	4917      	ldr	r1, [pc, #92]	; (80028c4 <HAL_ADC_ConfigChannel+0x378>)
 8002866:	688a      	ldr	r2, [r1, #8]
 8002868:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800286c:	432a      	orrs	r2, r5
 800286e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002872:	608a      	str	r2, [r1, #8]
    tmp_hal_status = HAL_ERROR;
 8002874:	4618      	mov	r0, r3
 8002876:	e6eb      	b.n	8002650 <HAL_ADC_ConfigChannel+0x104>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_ADC_ConfigChannel+0x390>)
 800287a:	4290      	cmp	r0, r2
 800287c:	f47f aee7 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
 8002880:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002884:	f47f aee3 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_ADC_ConfigChannel+0x380>)
 800288a:	4291      	cmp	r1, r2
 800288c:	f47f aedf 	bne.w	800264e <HAL_ADC_ConfigChannel+0x102>
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <HAL_ADC_ConfigChannel+0x378>)
 8002892:	688a      	ldr	r2, [r1, #8]
 8002894:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002898:	432a      	orrs	r2, r5
 800289a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800289e:	e7e8      	b.n	8002872 <HAL_ADC_ConfigChannel+0x326>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80028a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	f043 0320 	orr.w	r3, r3, #32
 80028a8:	6563      	str	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80028aa:	e6d1      	b.n	8002650 <HAL_ADC_ConfigChannel+0x104>
 80028ac:	5c001000 	.word	0x5c001000
 80028b0:	000fffff 	.word	0x000fffff
 80028b4:	47ff0000 	.word	0x47ff0000
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022300 	.word	0x40022300
 80028c0:	40022100 	.word	0x40022100
 80028c4:	58026300 	.word	0x58026300
 80028c8:	cb840000 	.word	0xcb840000
 80028cc:	58026000 	.word	0x58026000
 80028d0:	24000000 	.word	0x24000000
 80028d4:	00030d40 	.word	0x00030d40
 80028d8:	c7520000 	.word	0xc7520000
 80028dc:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028e2:	f042 0220 	orr.w	r2, r2, #32
 80028e6:	6562      	str	r2, [r4, #84]	; 0x54
 80028e8:	e7c4      	b.n	8002874 <HAL_ADC_ConfigChannel+0x328>
  __HAL_LOCK(hadc);
 80028ea:	2002      	movs	r0, #2
 80028ec:	e6b3      	b.n	8002656 <HAL_ADC_ConfigChannel+0x10a>
 80028ee:	bf00      	nop

080028f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028f2:	4a43      	ldr	r2, [pc, #268]	; (8002a00 <ADC_ConfigureBoostMode+0x110>)
{
 80028f4:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028f6:	6803      	ldr	r3, [r0, #0]
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <ADC_ConfigureBoostMode+0x14>
 80028fc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002900:	4293      	cmp	r3, r2
 8002902:	d124      	bne.n	800294e <ADC_ConfigureBoostMode+0x5e>
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <ADC_ConfigureBoostMode+0x114>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b9f3      	cbnz	r3, 8002952 <ADC_ConfigureBoostMode+0x62>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002914:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002918:	f003 fae6 	bl	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800291c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800291e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002920:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002924:	d04a      	beq.n	80029bc <ADC_ConfigureBoostMode+0xcc>
 8002926:	d83f      	bhi.n	80029a8 <ADC_ConfigureBoostMode+0xb8>
 8002928:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800292c:	d044      	beq.n	80029b8 <ADC_ConfigureBoostMode+0xc8>
 800292e:	d836      	bhi.n	800299e <ADC_ConfigureBoostMode+0xae>
 8002930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002934:	d008      	beq.n	8002948 <ADC_ConfigureBoostMode+0x58>
 8002936:	d82c      	bhi.n	8002992 <ADC_ConfigureBoostMode+0xa2>
 8002938:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800293c:	d004      	beq.n	8002948 <ADC_ConfigureBoostMode+0x58>
 800293e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002942:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002946:	d116      	bne.n	8002976 <ADC_ConfigureBoostMode+0x86>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002948:	0c9b      	lsrs	r3, r3, #18
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	e00f      	b.n	800296e <ADC_ConfigureBoostMode+0x7e>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <ADC_ConfigureBoostMode+0x118>)
 8002950:	e7d9      	b.n	8002906 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8002952:	f002 faa9 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002956:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002958:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800295a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295e:	d005      	beq.n	800296c <ADC_ConfigureBoostMode+0x7c>
 8002960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002964:	d006      	beq.n	8002974 <ADC_ConfigureBoostMode+0x84>
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d104      	bne.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800296c:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800296e:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8002972:	e000      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 4UL;
 8002974:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002976:	f7ff fdcd 	bl	8002514 <HAL_GetREVID>
 800297a:	f241 0303 	movw	r3, #4099	; 0x1003
 800297e:	4298      	cmp	r0, r3
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	d823      	bhi.n	80029cc <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <ADC_ConfigureBoostMode+0x11c>)
 8002986:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002988:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 800298a:	d91b      	bls.n	80029c4 <ADC_ConfigureBoostMode+0xd4>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	e01a      	b.n	80029c8 <ADC_ConfigureBoostMode+0xd8>
    switch (hadc->Init.ClockPrescaler)
 8002992:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002996:	d0d7      	beq.n	8002948 <ADC_ConfigureBoostMode+0x58>
 8002998:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800299c:	e7d3      	b.n	8002946 <ADC_ConfigureBoostMode+0x56>
 800299e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a2:	d1e8      	bne.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 32UL;
 80029a4:	0944      	lsrs	r4, r0, #5
        break;
 80029a6:	e7e6      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
    switch (hadc->Init.ClockPrescaler)
 80029a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029ac:	d008      	beq.n	80029c0 <ADC_ConfigureBoostMode+0xd0>
 80029ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029b2:	d1e0      	bne.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 256UL;
 80029b4:	0a04      	lsrs	r4, r0, #8
        break;
 80029b6:	e7de      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 16UL;
 80029b8:	0904      	lsrs	r4, r0, #4
        break;
 80029ba:	e7dc      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 64UL;
 80029bc:	0984      	lsrs	r4, r0, #6
        break;
 80029be:	e7da      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
        freq /= 128UL;
 80029c0:	09c4      	lsrs	r4, r0, #7
        break;
 80029c2:	e7d8      	b.n	8002976 <ADC_ConfigureBoostMode+0x86>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029c8:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <ADC_ConfigureBoostMode+0x120>)
 80029ce:	4294      	cmp	r4, r2
 80029d0:	d803      	bhi.n	80029da <ADC_ConfigureBoostMode+0xea>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029d8:	e7f6      	b.n	80029c8 <ADC_ConfigureBoostMode+0xd8>
    else if (freq <= 12500000UL)
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <ADC_ConfigureBoostMode+0x124>)
 80029dc:	4294      	cmp	r4, r2
 80029de:	d803      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0xf8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029e6:	e7d1      	b.n	800298c <ADC_ConfigureBoostMode+0x9c>
    else if (freq <= 25000000UL)
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <ADC_ConfigureBoostMode+0x128>)
 80029ea:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	bf96      	itet	ls
 80029f0:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029f4:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029f8:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029fc:	e7e4      	b.n	80029c8 <ADC_ConfigureBoostMode+0xd8>
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40022300 	.word	0x40022300
 8002a08:	58026300 	.word	0x58026300
 8002a0c:	01312d00 	.word	0x01312d00
 8002a10:	00bebc21 	.word	0x00bebc21
 8002a14:	017d7841 	.word	0x017d7841
 8002a18:	02faf081 	.word	0x02faf081

08002a1c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8002a1c:	2300      	movs	r3, #0
{
 8002a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8002a20:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002a22:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002a24:	2800      	cmp	r0, #0
 8002a26:	f000 80ed 	beq.w	8002c04 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a2a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002a2c:	b925      	cbnz	r5, 8002a38 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8002a2e:	f7fd ff0b 	bl	8000848 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a32:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002a34:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a38:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a3a:	6883      	ldr	r3, [r0, #8]
 8002a3c:	0099      	lsls	r1, r3, #2
 8002a3e:	d505      	bpl.n	8002a4c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a40:	6883      	ldr	r3, [r0, #8]
 8002a42:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a4c:	6883      	ldr	r3, [r0, #8]
 8002a4e:	00da      	lsls	r2, r3, #3
 8002a50:	f140 8098 	bpl.w	8002b84 <HAL_ADC_Init+0x168>
 8002a54:	6883      	ldr	r3, [r0, #8]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	f100 80aa 	bmi.w	8002bb0 <HAL_ADC_Init+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a5e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	f7ff fd68 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	4303      	orrs	r3, r0
    ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7c:	f040 80bf 	bne.w	8002bfe <HAL_ADC_Init+0x1e2>
    ADC_STATE_CLR_SET(hadc->State,
 8002a80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a8c:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a8e:	07de      	lsls	r6, r3, #31
 8002a90:	d40c      	bmi.n	8002aac <HAL_ADC_Init+0x90>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_ADC_Init+0x1ec>)
 8002a94:	495d      	ldr	r1, [pc, #372]	; (8002c0c <HAL_ADC_Init+0x1f0>)
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Init+0x84>
 8002a9a:	428a      	cmp	r2, r1
 8002a9c:	f040 808a 	bne.w	8002bb4 <HAL_ADC_Init+0x198>
 8002aa0:	689e      	ldr	r6, [r3, #8]
 8002aa2:	6888      	ldr	r0, [r1, #8]
 8002aa4:	4330      	orrs	r0, r6
 8002aa6:	07c0      	lsls	r0, r0, #31
 8002aa8:	f140 808b 	bpl.w	8002bc2 <HAL_ADC_Init+0x1a6>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002aac:	f7ff fd32 	bl	8002514 <HAL_GetREVID>
 8002ab0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ab4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	7f21      	ldrb	r1, [r4, #28]
 8002aba:	7d60      	ldrb	r0, [r4, #21]
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	f240 8090 	bls.w	8002be2 <HAL_ADC_Init+0x1c6>
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	f040 808d 	bne.w	8002be2 <HAL_ADC_Init+0x1c6>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac8:	040b      	lsls	r3, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aca:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ad4:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad6:	bf02      	ittt	eq
 8002ad8:	6a22      	ldreq	r2, [r4, #32]
 8002ada:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002ade:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ae4:	b122      	cbz	r2, 8002af0 <HAL_ADC_Init+0xd4>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae6:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002aec:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aee:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002af0:	6820      	ldr	r0, [r4, #0]
 8002af2:	4a47      	ldr	r2, [pc, #284]	; (8002c10 <HAL_ADC_Init+0x1f4>)
 8002af4:	68c1      	ldr	r1, [r0, #12]
 8002af6:	400a      	ands	r2, r1
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afc:	f7ff fd21 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b00:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b02:	6893      	ldr	r3, [r2, #8]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	4303      	orrs	r3, r0
 8002b0a:	d127      	bne.n	8002b5c <HAL_ADC_Init+0x140>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b0c:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b0e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8002b1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002b22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d161      	bne.n	8002bee <HAL_ADC_Init+0x1d2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b2c:	6910      	ldr	r0, [r2, #16]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8002b34:	4333      	orrs	r3, r6
 8002b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	4935      	ldr	r1, [pc, #212]	; (8002c14 <HAL_ADC_Init+0x1f8>)
 8002b40:	4001      	ands	r1, r0
 8002b42:	430b      	orrs	r3, r1
 8002b44:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b48:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002b4a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b4c:	6913      	ldr	r3, [r2, #16]
 8002b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002b58:	f7ff feca 	bl	80028f0 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b5e:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d148      	bne.n	8002bf6 <HAL_ADC_Init+0x1da>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b66:	69a3      	ldr	r3, [r4, #24]
 8002b68:	f021 010f 	bic.w	r1, r1, #15
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b74:	f023 0303 	bic.w	r3, r3, #3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002b7e:	4628      	mov	r0, r5
 8002b80:	b002      	add	sp, #8
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8002b84:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b86:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_ADC_Init+0x1fc>)
 8002b88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6083      	str	r3, [r0, #8]
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_ADC_Init+0x200>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b9e:	3301      	adds	r3, #1
      wait_loop_index--;
 8002ba0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002ba2:	9b01      	ldr	r3, [sp, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f43f af55 	beq.w	8002a54 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	e7f7      	b.n	8002ba0 <HAL_ADC_Init+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2500      	movs	r5, #0
 8002bb2:	e75c      	b.n	8002a6e <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_ADC_Init+0x204>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	07db      	lsls	r3, r3, #31
 8002bba:	f53f af77 	bmi.w	8002aac <HAL_ADC_Init+0x90>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_ADC_Init+0x208>)
 8002bc0:	e006      	b.n	8002bd0 <HAL_ADC_Init+0x1b4>
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d00b      	beq.n	8002bde <HAL_ADC_Init+0x1c2>
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_ADC_Init+0x208>)
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <HAL_ADC_Init+0x20c>)
 8002bca:	428a      	cmp	r2, r1
 8002bcc:	bf08      	it	eq
 8002bce:	4603      	moveq	r3, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	6861      	ldr	r1, [r4, #4]
 8002bd4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	e766      	b.n	8002aac <HAL_ADC_Init+0x90>
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_ADC_Init+0x20c>)
 8002be0:	e7f6      	b.n	8002bd0 <HAL_ADC_Init+0x1b4>
                  hadc->Init.Overrun                                                    |
 8002be2:	4313      	orrs	r3, r2
 8002be4:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002bec:	e772      	b.n	8002ad4 <HAL_ADC_Init+0xb8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bee:	6913      	ldr	r3, [r2, #16]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	e7a8      	b.n	8002b48 <HAL_ADC_Init+0x12c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bf8:	f023 030f 	bic.w	r3, r3, #15
 8002bfc:	e7b8      	b.n	8002b70 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	f043 0310 	orr.w	r3, r3, #16
 8002c02:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002c04:	2501      	movs	r5, #1
 8002c06:	e7ba      	b.n	8002b7e <HAL_ADC_Init+0x162>
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40022100 	.word	0x40022100
 8002c10:	fff0c003 	.word	0xfff0c003
 8002c14:	fc00f81e 	.word	0xfc00f81e
 8002c18:	00030d40 	.word	0x00030d40
 8002c1c:	24000000 	.word	0x24000000
 8002c20:	58026000 	.word	0x58026000
 8002c24:	58026300 	.word	0x58026300
 8002c28:	40022300 	.word	0x40022300

08002c2c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c2c:	6880      	ldr	r0, [r0, #8]
}
 8002c2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002c32:	4770      	bx	lr

08002c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c36:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8002c3a:	b09b      	sub	sp, #108	; 0x6c
 8002c3c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002c3e:	2a01      	cmp	r2, #1
 8002c40:	d072      	beq.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c42:	2201      	movs	r2, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c44:	4c39      	ldr	r4, [pc, #228]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
  __HAL_LOCK(hadc);
 8002c46:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c4a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c4c:	681e      	ldr	r6, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c4e:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c50:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c52:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c54:	d008      	beq.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c56:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c58:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c5c:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5e:	f041 0120 	orr.w	r1, r1, #32
 8002c62:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002c64:	b01b      	add	sp, #108	; 0x6c
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c68:	4c31      	ldr	r4, [pc, #196]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff ffde 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002c70:	4605      	mov	r5, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	f7ff ffda 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002c78:	4328      	orrs	r0, r5
 8002c7a:	d14f      	bne.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	42b2      	cmp	r2, r6
 8002c80:	d022      	beq.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c82:	4d2c      	ldr	r5, [pc, #176]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002c84:	482c      	ldr	r0, [pc, #176]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002c86:	42a2      	cmp	r2, r4
 8002c88:	bf18      	it	ne
 8002c8a:	4628      	movne	r0, r5
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c8c:	f8d1 c000 	ldr.w	ip, [r1]
 8002c90:	4f26      	ldr	r7, [pc, #152]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002c92:	f1bc 0f00 	cmp.w	ip, #0
 8002c96:	d027      	beq.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c98:	6886      	ldr	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9a:	42ba      	cmp	r2, r7
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c9c:	684d      	ldr	r5, [r1, #4]
 8002c9e:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
 8002ca2:	ea46 0605 	orr.w	r6, r6, r5
 8002ca6:	6086      	str	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ca8:	d001      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 8002caa:	42a2      	cmp	r2, r4
 8002cac:	d10e      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cae:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002cb0:	6896      	ldr	r6, [r2, #8]
 8002cb2:	68a2      	ldr	r2, [r4, #8]
 8002cb4:	4332      	orrs	r2, r6
 8002cb6:	43d2      	mvns	r2, r2
 8002cb8:	f002 0201 	and.w	r2, r2, #1
 8002cbc:	b94a      	cbnz	r2, 8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8002cc6:	e7cd      	b.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x30>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cc8:	481b      	ldr	r0, [pc, #108]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002cca:	e7df      	b.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x58>
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	e7f1      	b.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR,
 8002cd2:	6882      	ldr	r2, [r0, #8]
 8002cd4:	6889      	ldr	r1, [r1, #8]
 8002cd6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002cda:	ea4c 0501 	orr.w	r5, ip, r1
 8002cde:	f022 020f 	bic.w	r2, r2, #15
 8002ce2:	4315      	orrs	r5, r2
 8002ce4:	6085      	str	r5, [r0, #8]
 8002ce6:	e7ea      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x8a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ce8:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cea:	42ba      	cmp	r2, r7
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cec:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8002cf0:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf2:	d001      	beq.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8002cf4:	42a2      	cmp	r2, r4
 8002cf6:	d10e      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68a2      	ldr	r2, [r4, #8]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	43d2      	mvns	r2, r2
 8002d00:	f002 0201 	and.w	r2, r2, #1
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d0da      	beq.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x8a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d08:	6882      	ldr	r2, [r0, #8]
 8002d0a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002d0e:	f022 020f 	bic.w	r2, r2, #15
 8002d12:	6082      	str	r2, [r0, #8]
 8002d14:	e7d3      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002d18:	6892      	ldr	r2, [r2, #8]
 8002d1a:	e7f0      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002d1e:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	f041 0120 	orr.w	r1, r1, #32
 8002d24:	6559      	str	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002d26:	e7cb      	b.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 8002d28:	2002      	movs	r0, #2
 8002d2a:	e79b      	b.n	8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022100 	.word	0x40022100
 8002d34:	58026300 	.word	0x58026300
 8002d38:	40022300 	.word	0x40022300
 8002d3c:	58026000 	.word	0x58026000

08002d40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d42:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d4e:	0412      	lsls	r2, r2, #16
 8002d50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d66:	b530      	push	{r4, r5, lr}
 8002d68:	68dc      	ldr	r4, [r3, #12]
 8002d6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	2d04      	cmp	r5, #4
 8002d76:	bf28      	it	cs
 8002d78:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d80:	bf8c      	ite	hi
 8002d82:	3c03      	subhi	r4, #3
 8002d84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d86:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002d8a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	fa01 f104 	lsl.w	r1, r1, r4
 8002d9c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002da4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002da6:	db06      	blt.n	8002db6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002dac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002db0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002db4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	f000 000f 	and.w	r0, r0, #15
 8002dba:	4a02      	ldr	r2, [pc, #8]	; (8002dc4 <HAL_NVIC_SetPriority+0x60>)
 8002dbc:	5413      	strb	r3, [r2, r0]
 8002dbe:	e7f9      	b.n	8002db4 <HAL_NVIC_SetPriority+0x50>
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	e000ed14 	.word	0xe000ed14

08002dc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	db08      	blt.n	8002dde <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dcc:	2301      	movs	r3, #1
 8002dce:	0942      	lsrs	r2, r0, #5
 8002dd0:	f000 001f 	and.w	r0, r0, #31
 8002dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8002dd8:	4b01      	ldr	r3, [pc, #4]	; (8002de0 <HAL_NVIC_EnableIRQ+0x18>)
 8002dda:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002de4:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002de6:	4604      	mov	r4, r0
 8002de8:	b168      	cbz	r0, 8002e06 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dea:	7903      	ldrb	r3, [r0, #4]
 8002dec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002df0:	b913      	cbnz	r3, 8002df8 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002df2:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002df4:	f7fd fe20 	bl	8000a38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df8:	2302      	movs	r3, #2

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dfa:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dfc:	7123      	strb	r3, [r4, #4]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dfe:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e00:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002e02:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8002e04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
 8002e08:	e7fc      	b.n	8002e04 <HAL_DAC_Init+0x20>

08002e0a <HAL_DAC_DMAUnderrunCallbackCh1>:
 8002e0a:	4770      	bx	lr

08002e0c <HAL_DAC_IRQHandler>:
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e0c:	6803      	ldr	r3, [r0, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	0491      	lsls	r1, r2, #18
{
 8002e12:	b510      	push	{r4, lr}
 8002e14:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e16:	d511      	bpl.n	8002e3c <HAL_DAC_IRQHandler+0x30>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1a:	0492      	lsls	r2, r2, #18
 8002e1c:	d50e      	bpl.n	8002e3c <HAL_DAC_IRQHandler+0x30>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e1e:	2204      	movs	r2, #4
 8002e20:	7102      	strb	r2, [r0, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e22:	6902      	ldr	r2, [r0, #16]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	6102      	str	r2, [r0, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e36:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e38:	f7ff ffe7 	bl	8002e0a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	0091      	lsls	r1, r2, #2
 8002e42:	d514      	bpl.n	8002e6e <HAL_DAC_IRQHandler+0x62>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	d511      	bpl.n	8002e6e <HAL_DAC_IRQHandler+0x62>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e4a:	2204      	movs	r2, #4

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e4c:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e4e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e50:	6922      	ldr	r2, [r4, #16]
 8002e52:	f042 0202 	orr.w	r2, r2, #2
 8002e56:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e68:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e6a:	f000 b89d 	b.w	8002fa8 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8002e6e:	bd10      	pop	{r4, pc}

08002e70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	4616      	mov	r6, r2
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e76:	7942      	ldrb	r2, [r0, #5]
{
 8002e78:	4604      	mov	r4, r0
 8002e7a:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8002e7c:	2a01      	cmp	r2, #1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002e7e:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hdac);
 8002e80:	f04f 0002 	mov.w	r0, #2
 8002e84:	d077      	beq.n	8002f76 <HAL_DAC_ConfigChannel+0x106>
 8002e86:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e88:	2b04      	cmp	r3, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e8a:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002e8c:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e8e:	d127      	bne.n	8002ee0 <HAL_DAC_ConfigChannel+0x70>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e90:	f7ff fb28 	bl	80024e4 <HAL_GetTick>
 8002e94:	4607      	mov	r7, r0

    if (Channel == DAC_CHANNEL_1)
 8002e96:	2e00      	cmp	r6, #0
 8002e98:	d174      	bne.n	8002f84 <HAL_DAC_ConfigChannel+0x114>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e9a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002fa4 <HAL_DAC_ConfigChannel+0x134>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	ea13 0f08 	tst.w	r3, r8
 8002ea6:	d15b      	bne.n	8002f60 <HAL_DAC_ConfigChannel+0xf0>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff fb21 	bl	80024f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	69aa      	ldr	r2, [r5, #24]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	f006 0010 	and.w	r0, r6, #16
 8002eba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002ebe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002ec0:	4083      	lsls	r3, r0
 8002ec2:	ea22 0203 	bic.w	r2, r2, r3
 8002ec6:	69eb      	ldr	r3, [r5, #28]
 8002ec8:	4083      	lsls	r3, r0
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	648a      	str	r2, [r1, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002ed2:	4082      	lsls	r2, r0
 8002ed4:	ea23 0302 	bic.w	r3, r3, r2
 8002ed8:	6a2a      	ldr	r2, [r5, #32]
 8002eda:	4082      	lsls	r2, r0
 8002edc:	4313      	orrs	r3, r2
 8002ede:	64cb      	str	r3, [r1, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ee0:	6929      	ldr	r1, [r5, #16]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ee2:	f006 0210 	and.w	r2, r6, #16
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002ee6:	6823      	ldr	r3, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ee8:	2901      	cmp	r1, #1
 8002eea:	d108      	bne.n	8002efe <HAL_DAC_ConfigChannel+0x8e>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002eec:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002eee:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002ef0:	4090      	lsls	r0, r2
 8002ef2:	ea21 0000 	bic.w	r0, r1, r0
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ef6:	6969      	ldr	r1, [r5, #20]
 8002ef8:	4091      	lsls	r1, r2
 8002efa:	4301      	orrs	r1, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002efc:	6399      	str	r1, [r3, #56]	; 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002efe:	2607      	movs	r6, #7
  tmpreg1 = hdac->Instance->MCR;
 8002f00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f02:	4096      	lsls	r6, r2
 8002f04:	ea21 0606 	bic.w	r6, r1, r6
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f08:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f0c:	2801      	cmp	r0, #1
 8002f0e:	d044      	beq.n	8002f9a <HAL_DAC_ConfigChannel+0x12a>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f10:	2802      	cmp	r0, #2
 8002f12:	d044      	beq.n	8002f9e <HAL_DAC_ConfigChannel+0x12e>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f14:	fab1 f081 	clz	r0, r1
 8002f18:	0940      	lsrs	r0, r0, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f1a:	682f      	ldr	r7, [r5, #0]
 8002f1c:	4339      	orrs	r1, r7
 8002f1e:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f24:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f26:	4090      	lsls	r0, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f28:	4331      	orrs	r1, r6
  hdac->Instance->MCR = tmpreg1;
 8002f2a:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	ea21 0100 	bic.w	r1, r1, r0

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f32:	f640 70fe 	movw	r0, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f36:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f38:	4090      	lsls	r0, r2
  tmpreg1 = hdac->Instance->CR;
 8002f3a:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f3c:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f40:	6869      	ldr	r1, [r5, #4]
 8002f42:	4091      	lsls	r1, r2
 8002f44:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f46:	20c0      	movs	r0, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8002f48:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	6819      	ldr	r1, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f50:	2000      	movs	r0, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f52:	ea21 0202 	bic.w	r2, r1, r2
 8002f56:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002f58:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdac);
 8002f5a:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8002f5c:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002f5e:	e00a      	b.n	8002f76 <HAL_DAC_ConfigChannel+0x106>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f60:	f7ff fac0 	bl	80024e4 <HAL_GetTick>
 8002f64:	1bc0      	subs	r0, r0, r7
 8002f66:	2801      	cmp	r0, #1
 8002f68:	d999      	bls.n	8002e9e <HAL_DAC_ConfigChannel+0x2e>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f6a:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f6c:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f6e:	f043 0308 	orr.w	r3, r3, #8
 8002f72:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f74:	7120      	strb	r0, [r4, #4]
}
 8002f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f7a:	f7ff fab3 	bl	80024e4 <HAL_GetTick>
 8002f7e:	1bc0      	subs	r0, r0, r7
 8002f80:	2801      	cmp	r0, #1
 8002f82:	d8f2      	bhi.n	8002f6a <HAL_DAC_ConfigChannel+0xfa>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dbf6      	blt.n	8002f7a <HAL_DAC_ConfigChannel+0x10a>
      HAL_Delay(1U);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7ff faaf 	bl	80024f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	69aa      	ldr	r2, [r5, #24]
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
 8002f98:	e78c      	b.n	8002eb4 <HAL_DAC_ConfigChannel+0x44>
    connectOnChip = 0x00000000UL;
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e7bd      	b.n	8002f1a <HAL_DAC_ConfigChannel+0xaa>
    connectOnChip = DAC_MCR_MODE1_0;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	e7bb      	b.n	8002f1a <HAL_DAC_ConfigChannel+0xaa>
 8002fa2:	bf00      	nop
 8002fa4:	20008000 	.word	0x20008000

08002fa8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002fa8:	4770      	bx	lr
	...

08002fac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fae:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800312c <DMA_SetConfig+0x180>
 8002fb2:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb4:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb6:	4564      	cmp	r4, ip
 8002fb8:	d045      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fba:	4d59      	ldr	r5, [pc, #356]	; (8003120 <DMA_SetConfig+0x174>)
 8002fbc:	42ac      	cmp	r4, r5
 8002fbe:	d042      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fc0:	3518      	adds	r5, #24
 8002fc2:	42ac      	cmp	r4, r5
 8002fc4:	d03f      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fc6:	3518      	adds	r5, #24
 8002fc8:	42ac      	cmp	r4, r5
 8002fca:	d03c      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fcc:	3518      	adds	r5, #24
 8002fce:	42ac      	cmp	r4, r5
 8002fd0:	d039      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fd2:	3518      	adds	r5, #24
 8002fd4:	42ac      	cmp	r4, r5
 8002fd6:	d036      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fd8:	3518      	adds	r5, #24
 8002fda:	42ac      	cmp	r4, r5
 8002fdc:	d033      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fde:	3518      	adds	r5, #24
 8002fe0:	42ac      	cmp	r4, r5
 8002fe2:	d030      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fe4:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8002fe8:	42ac      	cmp	r4, r5
 8002fea:	d02c      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002fec:	3518      	adds	r5, #24
 8002fee:	42ac      	cmp	r4, r5
 8002ff0:	d029      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002ff2:	3518      	adds	r5, #24
 8002ff4:	42ac      	cmp	r4, r5
 8002ff6:	d026      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002ff8:	3518      	adds	r5, #24
 8002ffa:	42ac      	cmp	r4, r5
 8002ffc:	d023      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8002ffe:	3518      	adds	r5, #24
 8003000:	42ac      	cmp	r4, r5
 8003002:	d020      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003004:	3518      	adds	r5, #24
 8003006:	42ac      	cmp	r4, r5
 8003008:	d01d      	beq.n	8003046 <DMA_SetConfig+0x9a>
 800300a:	3518      	adds	r5, #24
 800300c:	42ac      	cmp	r4, r5
 800300e:	d01a      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003010:	3518      	adds	r5, #24
 8003012:	42ac      	cmp	r4, r5
 8003014:	d017      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003016:	4d43      	ldr	r5, [pc, #268]	; (8003124 <DMA_SetConfig+0x178>)
 8003018:	42ac      	cmp	r4, r5
 800301a:	d014      	beq.n	8003046 <DMA_SetConfig+0x9a>
 800301c:	3514      	adds	r5, #20
 800301e:	42ac      	cmp	r4, r5
 8003020:	d011      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003022:	3514      	adds	r5, #20
 8003024:	42ac      	cmp	r4, r5
 8003026:	d00e      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003028:	3514      	adds	r5, #20
 800302a:	42ac      	cmp	r4, r5
 800302c:	d00b      	beq.n	8003046 <DMA_SetConfig+0x9a>
 800302e:	3514      	adds	r5, #20
 8003030:	42ac      	cmp	r4, r5
 8003032:	d008      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003034:	3514      	adds	r5, #20
 8003036:	42ac      	cmp	r4, r5
 8003038:	d005      	beq.n	8003046 <DMA_SetConfig+0x9a>
 800303a:	3514      	adds	r5, #20
 800303c:	42ac      	cmp	r4, r5
 800303e:	d002      	beq.n	8003046 <DMA_SetConfig+0x9a>
 8003040:	3514      	adds	r5, #20
 8003042:	42ac      	cmp	r4, r5
 8003044:	d167      	bne.n	8003116 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003046:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 800304a:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800304c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800304e:	b115      	cbz	r5, 8003056 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003050:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 8003054:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003056:	4564      	cmp	r4, ip
 8003058:	d037      	beq.n	80030ca <DMA_SetConfig+0x11e>
 800305a:	4d31      	ldr	r5, [pc, #196]	; (8003120 <DMA_SetConfig+0x174>)
 800305c:	42ac      	cmp	r4, r5
 800305e:	d034      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003060:	3518      	adds	r5, #24
 8003062:	42ac      	cmp	r4, r5
 8003064:	d031      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003066:	3518      	adds	r5, #24
 8003068:	42ac      	cmp	r4, r5
 800306a:	d02e      	beq.n	80030ca <DMA_SetConfig+0x11e>
 800306c:	3518      	adds	r5, #24
 800306e:	42ac      	cmp	r4, r5
 8003070:	d02b      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003072:	3518      	adds	r5, #24
 8003074:	42ac      	cmp	r4, r5
 8003076:	d028      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003078:	3518      	adds	r5, #24
 800307a:	42ac      	cmp	r4, r5
 800307c:	d025      	beq.n	80030ca <DMA_SetConfig+0x11e>
 800307e:	3518      	adds	r5, #24
 8003080:	42ac      	cmp	r4, r5
 8003082:	d022      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003084:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003088:	42ac      	cmp	r4, r5
 800308a:	d01e      	beq.n	80030ca <DMA_SetConfig+0x11e>
 800308c:	3518      	adds	r5, #24
 800308e:	42ac      	cmp	r4, r5
 8003090:	d01b      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003092:	3518      	adds	r5, #24
 8003094:	42ac      	cmp	r4, r5
 8003096:	d018      	beq.n	80030ca <DMA_SetConfig+0x11e>
 8003098:	3518      	adds	r5, #24
 800309a:	42ac      	cmp	r4, r5
 800309c:	d015      	beq.n	80030ca <DMA_SetConfig+0x11e>
 800309e:	3518      	adds	r5, #24
 80030a0:	42ac      	cmp	r4, r5
 80030a2:	d012      	beq.n	80030ca <DMA_SetConfig+0x11e>
 80030a4:	3518      	adds	r5, #24
 80030a6:	42ac      	cmp	r4, r5
 80030a8:	d00f      	beq.n	80030ca <DMA_SetConfig+0x11e>
 80030aa:	3518      	adds	r5, #24
 80030ac:	42ac      	cmp	r4, r5
 80030ae:	d00c      	beq.n	80030ca <DMA_SetConfig+0x11e>
 80030b0:	3518      	adds	r5, #24
 80030b2:	42ac      	cmp	r4, r5
 80030b4:	d009      	beq.n	80030ca <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030b6:	4d1b      	ldr	r5, [pc, #108]	; (8003124 <DMA_SetConfig+0x178>)
 80030b8:	42ac      	cmp	r4, r5
 80030ba:	d117      	bne.n	80030ec <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80030bc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80030be:	f005 061f 	and.w	r6, r5, #31
 80030c2:	2501      	movs	r5, #1
 80030c4:	40b5      	lsls	r5, r6
 80030c6:	607d      	str	r5, [r7, #4]
 80030c8:	e009      	b.n	80030de <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80030cc:	f005 061f 	and.w	r6, r5, #31
 80030d0:	253f      	movs	r5, #63	; 0x3f
 80030d2:	40b5      	lsls	r5, r6
 80030d4:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030d6:	6825      	ldr	r5, [r4, #0]
 80030d8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80030dc:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80030de:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030e0:	6883      	ldr	r3, [r0, #8]
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d118      	bne.n	8003118 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80030e6:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80030e8:	60e1      	str	r1, [r4, #12]
 80030ea:	e014      	b.n	8003116 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030ec:	4d0e      	ldr	r5, [pc, #56]	; (8003128 <DMA_SetConfig+0x17c>)
 80030ee:	42ac      	cmp	r4, r5
 80030f0:	d0e4      	beq.n	80030bc <DMA_SetConfig+0x110>
 80030f2:	3514      	adds	r5, #20
 80030f4:	42ac      	cmp	r4, r5
 80030f6:	d0e1      	beq.n	80030bc <DMA_SetConfig+0x110>
 80030f8:	3514      	adds	r5, #20
 80030fa:	42ac      	cmp	r4, r5
 80030fc:	d0de      	beq.n	80030bc <DMA_SetConfig+0x110>
 80030fe:	3514      	adds	r5, #20
 8003100:	42ac      	cmp	r4, r5
 8003102:	d0db      	beq.n	80030bc <DMA_SetConfig+0x110>
 8003104:	3514      	adds	r5, #20
 8003106:	42ac      	cmp	r4, r5
 8003108:	d0d8      	beq.n	80030bc <DMA_SetConfig+0x110>
 800310a:	3514      	adds	r5, #20
 800310c:	42ac      	cmp	r4, r5
 800310e:	d0d5      	beq.n	80030bc <DMA_SetConfig+0x110>
 8003110:	3514      	adds	r5, #20
 8003112:	42ac      	cmp	r4, r5
 8003114:	d0d2      	beq.n	80030bc <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003116:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003118:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800311a:	60e2      	str	r2, [r4, #12]
}
 800311c:	e7fb      	b.n	8003116 <DMA_SetConfig+0x16a>
 800311e:	bf00      	nop
 8003120:	40020028 	.word	0x40020028
 8003124:	58025408 	.word	0x58025408
 8003128:	5802541c 	.word	0x5802541c
 800312c:	40020010 	.word	0x40020010

08003130 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003130:	6803      	ldr	r3, [r0, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <DMA_CalcBaseAndBitshift+0x94>)
 8003134:	4293      	cmp	r3, r2
{
 8003136:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003138:	d032      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800313a:	3218      	adds	r2, #24
 800313c:	4293      	cmp	r3, r2
 800313e:	d02f      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003140:	3218      	adds	r2, #24
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003146:	3218      	adds	r2, #24
 8003148:	4293      	cmp	r3, r2
 800314a:	d029      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800314c:	3218      	adds	r2, #24
 800314e:	4293      	cmp	r3, r2
 8003150:	d026      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003152:	3218      	adds	r2, #24
 8003154:	4293      	cmp	r3, r2
 8003156:	d023      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003158:	3218      	adds	r2, #24
 800315a:	4293      	cmp	r3, r2
 800315c:	d020      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800315e:	3218      	adds	r2, #24
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003164:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003168:	4293      	cmp	r3, r2
 800316a:	d019      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800316c:	3218      	adds	r2, #24
 800316e:	4293      	cmp	r3, r2
 8003170:	d016      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003172:	3218      	adds	r2, #24
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003178:	3218      	adds	r2, #24
 800317a:	4293      	cmp	r3, r2
 800317c:	d010      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800317e:	3218      	adds	r2, #24
 8003180:	4293      	cmp	r3, r2
 8003182:	d00d      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003184:	3218      	adds	r2, #24
 8003186:	4293      	cmp	r3, r2
 8003188:	d00a      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 800318a:	3218      	adds	r2, #24
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
 8003190:	3218      	adds	r2, #24
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800319a:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800319c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800319e:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	2218      	movs	r2, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80031a4:	4c08      	ldr	r4, [pc, #32]	; (80031c8 <DMA_CalcBaseAndBitshift+0x98>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031aa:	3910      	subs	r1, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031ac:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 80031b0:	295f      	cmp	r1, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031b2:	fbb1 f2f2 	udiv	r2, r1, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80031b6:	f002 0207 	and.w	r2, r2, #7
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031ba:	bf88      	it	hi
 80031bc:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80031be:	5ca2      	ldrb	r2, [r4, r2]
 80031c0:	65c2      	str	r2, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031c2:	e7ea      	b.n	800319a <DMA_CalcBaseAndBitshift+0x6a>
 80031c4:	40020010 	.word	0x40020010
 80031c8:	0800ba7f 	.word	0x0800ba7f

080031cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80031cc:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031ce:	491f      	ldr	r1, [pc, #124]	; (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031d0:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031d2:	428a      	cmp	r2, r1
 80031d4:	d024      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031d6:	3114      	adds	r1, #20
 80031d8:	428a      	cmp	r2, r1
 80031da:	d021      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031dc:	3114      	adds	r1, #20
 80031de:	428a      	cmp	r2, r1
 80031e0:	d01e      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031e2:	3114      	adds	r1, #20
 80031e4:	428a      	cmp	r2, r1
 80031e6:	d01b      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031e8:	3114      	adds	r1, #20
 80031ea:	428a      	cmp	r2, r1
 80031ec:	d018      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031ee:	3114      	adds	r1, #20
 80031f0:	428a      	cmp	r2, r1
 80031f2:	d015      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031f4:	3114      	adds	r1, #20
 80031f6:	428a      	cmp	r2, r1
 80031f8:	d012      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80031fa:	3114      	adds	r1, #20
 80031fc:	428a      	cmp	r2, r1
 80031fe:	d00f      	beq.n	8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003200:	2118      	movs	r1, #24
 8003202:	3b10      	subs	r3, #16
 8003204:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003208:	4911      	ldr	r1, [pc, #68]	; (8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800320a:	4411      	add	r1, r2
 800320c:	29a8      	cmp	r1, #168	; 0xa8
 800320e:	d91a      	bls.n	8003246 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003210:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8003214:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800321e:	e00a      	b.n	8003236 <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003220:	2214      	movs	r2, #20
 8003222:	3b08      	subs	r3, #8
 8003224:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003228:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 800322c:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003236:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800323a:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800323c:	2201      	movs	r2, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8003244:	4770      	bx	lr
      stream_number += 8U;
 8003246:	3308      	adds	r3, #8
 8003248:	e7e2      	b.n	8003210 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 800324a:	bf00      	nop
 800324c:	58025408 	.word	0x58025408
 8003250:	bffdfbf0 	.word	0xbffdfbf0
 8003254:	40020880 	.word	0x40020880
 8003258:	58025880 	.word	0x58025880

0800325c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800325c:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800325e:	1e51      	subs	r1, r2, #1
 8003260:	2907      	cmp	r1, #7
{
 8003262:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003264:	d821      	bhi.n	80032aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003266:	6803      	ldr	r3, [r0, #0]
 8003268:	4c13      	ldr	r4, [pc, #76]	; (80032b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 800326a:	42a3      	cmp	r3, r4
 800326c:	d01e      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800326e:	3414      	adds	r4, #20
 8003270:	42a3      	cmp	r3, r4
 8003272:	d01b      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003274:	3414      	adds	r4, #20
 8003276:	42a3      	cmp	r3, r4
 8003278:	d018      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800327a:	3414      	adds	r4, #20
 800327c:	42a3      	cmp	r3, r4
 800327e:	d015      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003280:	3414      	adds	r4, #20
 8003282:	42a3      	cmp	r3, r4
 8003284:	d012      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003286:	3414      	adds	r4, #20
 8003288:	42a3      	cmp	r3, r4
 800328a:	d00f      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800328c:	3414      	adds	r4, #20
 800328e:	42a3      	cmp	r3, r4
 8003290:	d00c      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003292:	3414      	adds	r4, #20
 8003294:	42a3      	cmp	r3, r4
 8003296:	d009      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032a2:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80032a4:	2301      	movs	r3, #1
 80032a6:	408b      	lsls	r3, r1
 80032a8:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 80032aa:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80032b6:	e7f4      	b.n	80032a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 80032b8:	58025408 	.word	0x58025408
 80032bc:	1000823f 	.word	0x1000823f
 80032c0:	40020940 	.word	0x40020940
 80032c4:	1600963f 	.word	0x1600963f
 80032c8:	58025940 	.word	0x58025940

080032cc <HAL_DMA_Init>:
{
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff f908 	bl	80024e4 <HAL_GetTick>
 80032d4:	4606      	mov	r6, r0
  if(hdma == NULL)
 80032d6:	2c00      	cmp	r4, #0
 80032d8:	f000 80e6 	beq.w	80034a8 <HAL_DMA_Init+0x1dc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	4d84      	ldr	r5, [pc, #528]	; (80034f0 <HAL_DMA_Init+0x224>)
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	d06a      	beq.n	80033ba <HAL_DMA_Init+0xee>
 80032e4:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_DMA_Init+0x228>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d067      	beq.n	80033ba <HAL_DMA_Init+0xee>
 80032ea:	3218      	adds	r2, #24
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d064      	beq.n	80033ba <HAL_DMA_Init+0xee>
 80032f0:	3218      	adds	r2, #24
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d061      	beq.n	80033ba <HAL_DMA_Init+0xee>
 80032f6:	3218      	adds	r2, #24
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d05e      	beq.n	80033ba <HAL_DMA_Init+0xee>
 80032fc:	3218      	adds	r2, #24
 80032fe:	4293      	cmp	r3, r2
 8003300:	d05b      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003302:	3218      	adds	r2, #24
 8003304:	4293      	cmp	r3, r2
 8003306:	d058      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003308:	3218      	adds	r2, #24
 800330a:	4293      	cmp	r3, r2
 800330c:	d055      	beq.n	80033ba <HAL_DMA_Init+0xee>
 800330e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003312:	4293      	cmp	r3, r2
 8003314:	d051      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003316:	3218      	adds	r2, #24
 8003318:	4293      	cmp	r3, r2
 800331a:	d04e      	beq.n	80033ba <HAL_DMA_Init+0xee>
 800331c:	3218      	adds	r2, #24
 800331e:	4293      	cmp	r3, r2
 8003320:	d04b      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003322:	3218      	adds	r2, #24
 8003324:	4293      	cmp	r3, r2
 8003326:	d048      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003328:	3218      	adds	r2, #24
 800332a:	4293      	cmp	r3, r2
 800332c:	d045      	beq.n	80033ba <HAL_DMA_Init+0xee>
 800332e:	3218      	adds	r2, #24
 8003330:	4293      	cmp	r3, r2
 8003332:	d042      	beq.n	80033ba <HAL_DMA_Init+0xee>
 8003334:	3218      	adds	r2, #24
 8003336:	4293      	cmp	r3, r2
 8003338:	d03f      	beq.n	80033ba <HAL_DMA_Init+0xee>
 800333a:	3218      	adds	r2, #24
 800333c:	4293      	cmp	r3, r2
 800333e:	d03c      	beq.n	80033ba <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003340:	4a6d      	ldr	r2, [pc, #436]	; (80034f8 <HAL_DMA_Init+0x22c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 8159 	bne.w	80035fa <HAL_DMA_Init+0x32e>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003348:	2202      	movs	r2, #2
 800334a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800334e:	2200      	movs	r2, #0
 8003350:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003354:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003356:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003358:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800335a:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 800335e:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003362:	f000 8168 	beq.w	8003636 <HAL_DMA_Init+0x36a>
 8003366:	2a80      	cmp	r2, #128	; 0x80
 8003368:	bf0c      	ite	eq
 800336a:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800336e:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003370:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8003374:	08d2      	lsrs	r2, r2, #3
 8003376:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800337a:	6966      	ldr	r6, [r4, #20]
 800337c:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003380:	69a6      	ldr	r6, [r4, #24]
 8003382:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003386:	69e6      	ldr	r6, [r4, #28]
 8003388:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800338c:	6a26      	ldr	r6, [r4, #32]
 800338e:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8003392:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003394:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003396:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003398:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_DMA_Init+0x230>)
 800339c:	441a      	add	r2, r3
 800339e:	2314      	movs	r3, #20
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a8:	f7ff fec2 	bl	8003130 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	2301      	movs	r3, #1
 80033b4:	4093      	lsls	r3, r2
 80033b6:	6043      	str	r3, [r0, #4]
 80033b8:	e0b6      	b.n	8003528 <HAL_DMA_Init+0x25c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ba:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 80033bc:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 80033be:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80033ca:	d01e      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033cc:	4a49      	ldr	r2, [pc, #292]	; (80034f4 <HAL_DMA_Init+0x228>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01b      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033d2:	3218      	adds	r2, #24
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033d8:	3218      	adds	r2, #24
 80033da:	4293      	cmp	r3, r2
 80033dc:	d015      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033de:	3218      	adds	r2, #24
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d012      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033e4:	3218      	adds	r2, #24
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00f      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033ea:	3218      	adds	r2, #24
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00c      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033f0:	3218      	adds	r2, #24
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033f6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d005      	beq.n	800340a <HAL_DMA_Init+0x13e>
 80033fe:	3218      	adds	r2, #24
 8003400:	4293      	cmp	r3, r2
 8003402:	d002      	beq.n	800340a <HAL_DMA_Init+0x13e>
 8003404:	3218      	adds	r2, #24
 8003406:	4293      	cmp	r3, r2
 8003408:	d0ff      	beq.n	800340a <HAL_DMA_Init+0x13e>
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003412:	6821      	ldr	r1, [r4, #0]
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	07db      	lsls	r3, r3, #31
 8003418:	d43c      	bmi.n	8003494 <HAL_DMA_Init+0x1c8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800341a:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800341c:	4e38      	ldr	r6, [pc, #224]	; (8003500 <HAL_DMA_Init+0x234>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003420:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8003422:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003426:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	6922      	ldr	r2, [r4, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	6962      	ldr	r2, [r4, #20]
 800342e:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003430:	69e2      	ldr	r2, [r4, #28]
 8003432:	4303      	orrs	r3, r0
 8003434:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8003436:	6a22      	ldr	r2, [r4, #32]
 8003438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800343a:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800343c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800343e:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003440:	bf02      	ittt	eq
 8003442:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8003446:	433a      	orreq	r2, r7
 8003448:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800344a:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <HAL_DMA_Init+0x238>)
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	0c12      	lsrs	r2, r2, #16
 8003450:	0412      	lsls	r2, r2, #16
 8003452:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003456:	d307      	bcc.n	8003468 <HAL_DMA_Init+0x19c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003458:	6862      	ldr	r2, [r4, #4]
 800345a:	f1a2 0729 	sub.w	r7, r2, #41	; 0x29
 800345e:	2f1f      	cmp	r7, #31
 8003460:	d924      	bls.n	80034ac <HAL_DMA_Init+0x1e0>
 8003462:	3a4f      	subs	r2, #79	; 0x4f
 8003464:	2a03      	cmp	r2, #3
 8003466:	d925      	bls.n	80034b4 <HAL_DMA_Init+0x1e8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003468:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346a:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800346c:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800346e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003472:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003476:	d14d      	bne.n	8003514 <HAL_DMA_Init+0x248>
      registerValue |= hdma->Init.FIFOThreshold;
 8003478:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800347a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800347c:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800347e:	2e00      	cmp	r6, #0
 8003480:	d048      	beq.n	8003514 <HAL_DMA_Init+0x248>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003482:	b9d0      	cbnz	r0, 80034ba <HAL_DMA_Init+0x1ee>
    switch (hdma->Init.FIFOThreshold)
 8003484:	2a01      	cmp	r2, #1
 8003486:	d029      	beq.n	80034dc <HAL_DMA_Init+0x210>
 8003488:	f032 0202 	bics.w	r2, r2, #2
 800348c:	d142      	bne.n	8003514 <HAL_DMA_Init+0x248>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800348e:	01f2      	lsls	r2, r6, #7
 8003490:	d540      	bpl.n	8003514 <HAL_DMA_Init+0x248>
 8003492:	e026      	b.n	80034e2 <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003494:	f7ff f826 	bl	80024e4 <HAL_GetTick>
 8003498:	1b80      	subs	r0, r0, r6
 800349a:	2805      	cmp	r0, #5
 800349c:	d9b9      	bls.n	8003412 <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349e:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034a0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80034a8:	2001      	movs	r0, #1
 80034aa:	e01f      	b.n	80034ec <HAL_DMA_Init+0x220>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_DMA_Init+0x23c>)
 80034ae:	40fa      	lsrs	r2, r7
 80034b0:	07d7      	lsls	r7, r2, #31
 80034b2:	d5d9      	bpl.n	8003468 <HAL_DMA_Init+0x19c>
        registerValue |= DMA_SxCR_TRBUFF;
 80034b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b8:	e7d6      	b.n	8003468 <HAL_DMA_Init+0x19c>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80034be:	d125      	bne.n	800350c <HAL_DMA_Init+0x240>
    switch (hdma->Init.FIFOThreshold)
 80034c0:	2a03      	cmp	r2, #3
 80034c2:	d827      	bhi.n	8003514 <HAL_DMA_Init+0x248>
 80034c4:	a001      	add	r0, pc, #4	; (adr r0, 80034cc <HAL_DMA_Init+0x200>)
 80034c6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034e3 	.word	0x080034e3
 80034d0:	0800348f 	.word	0x0800348f
 80034d4:	080034e3 	.word	0x080034e3
 80034d8:	080034dd 	.word	0x080034dd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034dc:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 80034e0:	d118      	bne.n	8003514 <HAL_DMA_Init+0x248>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034e2:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80034e4:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034e6:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80034e8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80034ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	58025408 	.word	0x58025408
 80034fc:	a7fdabf8 	.word	0xa7fdabf8
 8003500:	fe10803f 	.word	0xfe10803f
 8003504:	5c001000 	.word	0x5c001000
 8003508:	c3c0003f 	.word	0xc3c0003f
    switch (hdma->Init.FIFOThreshold)
 800350c:	2a02      	cmp	r2, #2
 800350e:	d9e8      	bls.n	80034e2 <HAL_DMA_Init+0x216>
 8003510:	2a03      	cmp	r2, #3
 8003512:	d0bc      	beq.n	800348e <HAL_DMA_Init+0x1c2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003514:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003516:	4620      	mov	r0, r4
 8003518:	f7ff fe0a 	bl	8003130 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800351c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800351e:	f003 021f 	and.w	r2, r3, #31
 8003522:	233f      	movs	r3, #63	; 0x3f
 8003524:	4093      	lsls	r3, r2
 8003526:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	42ab      	cmp	r3, r5
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800352e:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_DMA_Init+0x378>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d042      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003534:	3218      	adds	r2, #24
 8003536:	4293      	cmp	r3, r2
 8003538:	d03f      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800353a:	3218      	adds	r2, #24
 800353c:	4293      	cmp	r3, r2
 800353e:	d03c      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003540:	3218      	adds	r2, #24
 8003542:	4293      	cmp	r3, r2
 8003544:	d039      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003546:	3218      	adds	r2, #24
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800354c:	3218      	adds	r2, #24
 800354e:	4293      	cmp	r3, r2
 8003550:	d033      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003552:	3218      	adds	r2, #24
 8003554:	4293      	cmp	r3, r2
 8003556:	d030      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003558:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003560:	3218      	adds	r2, #24
 8003562:	4293      	cmp	r3, r2
 8003564:	d029      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003566:	3218      	adds	r2, #24
 8003568:	4293      	cmp	r3, r2
 800356a:	d026      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800356c:	3218      	adds	r2, #24
 800356e:	4293      	cmp	r3, r2
 8003570:	d023      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003572:	3218      	adds	r2, #24
 8003574:	4293      	cmp	r3, r2
 8003576:	d020      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003578:	3218      	adds	r2, #24
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800357e:	3218      	adds	r2, #24
 8003580:	4293      	cmp	r3, r2
 8003582:	d01a      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003584:	3218      	adds	r2, #24
 8003586:	4293      	cmp	r3, r2
 8003588:	d017      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_DMA_Init+0x37c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d014      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003590:	3214      	adds	r2, #20
 8003592:	4293      	cmp	r3, r2
 8003594:	d011      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 8003596:	3214      	adds	r2, #20
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 800359c:	3214      	adds	r2, #20
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 80035a2:	3214      	adds	r2, #20
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 80035a8:	3214      	adds	r2, #20
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d005      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 80035ae:	3214      	adds	r2, #20
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d002      	beq.n	80035ba <HAL_DMA_Init+0x2ee>
 80035b4:	3214      	adds	r2, #20
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d119      	bne.n	80035ee <HAL_DMA_Init+0x322>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ba:	4620      	mov	r0, r4
 80035bc:	2500      	movs	r5, #0
 80035be:	f7ff fe05 	bl	80031cc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035c2:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035c6:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035c8:	bf04      	itt	eq
 80035ca:	2300      	moveq	r3, #0
 80035cc:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035ce:	6863      	ldr	r3, [r4, #4]
 80035d0:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035d2:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035d4:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035d6:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d8:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 80035dc:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035de:	d82c      	bhi.n	800363a <HAL_DMA_Init+0x36e>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035e0:	f7ff fe3c 	bl	800325c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80035e6:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80035ec:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80035f0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80035f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80035f8:	e778      	b.n	80034ec <HAL_DMA_Init+0x220>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035fa:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_DMA_Init+0x380>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f43f aea3 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 8003602:	3214      	adds	r2, #20
 8003604:	4293      	cmp	r3, r2
 8003606:	f43f ae9f 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 800360a:	3214      	adds	r2, #20
 800360c:	4293      	cmp	r3, r2
 800360e:	f43f ae9b 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 8003612:	3214      	adds	r2, #20
 8003614:	4293      	cmp	r3, r2
 8003616:	f43f ae97 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 800361a:	3214      	adds	r2, #20
 800361c:	4293      	cmp	r3, r2
 800361e:	f43f ae93 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 8003622:	3214      	adds	r2, #20
 8003624:	4293      	cmp	r3, r2
 8003626:	f43f ae8f 	beq.w	8003348 <HAL_DMA_Init+0x7c>
 800362a:	3214      	adds	r2, #20
 800362c:	4293      	cmp	r3, r2
 800362e:	f43f ae8b 	beq.w	8003348 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003632:	2340      	movs	r3, #64	; 0x40
 8003634:	e734      	b.n	80034a0 <HAL_DMA_Init+0x1d4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003636:	2010      	movs	r0, #16
 8003638:	e69a      	b.n	8003370 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 800363a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800363e:	6765      	str	r5, [r4, #116]	; 0x74
 8003640:	e7d5      	b.n	80035ee <HAL_DMA_Init+0x322>
 8003642:	bf00      	nop
 8003644:	40020028 	.word	0x40020028
 8003648:	58025408 	.word	0x58025408
 800364c:	5802541c 	.word	0x5802541c

08003650 <HAL_DMA_Start_IT>:
{
 8003650:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8003652:	2800      	cmp	r0, #0
 8003654:	f000 810b 	beq.w	800386e <HAL_DMA_Start_IT+0x21e>
  __HAL_LOCK(hdma);
 8003658:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800365c:	2c01      	cmp	r4, #1
 800365e:	f000 8108 	beq.w	8003872 <HAL_DMA_Start_IT+0x222>
 8003662:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003664:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8003668:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800366a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800366e:	f04f 0500 	mov.w	r5, #0
 8003672:	f040 80f7 	bne.w	8003864 <HAL_DMA_Start_IT+0x214>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003676:	2402      	movs	r4, #2
 8003678:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800367c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367e:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8003680:	4d7d      	ldr	r5, [pc, #500]	; (8003878 <HAL_DMA_Start_IT+0x228>)
 8003682:	42ac      	cmp	r4, r5
 8003684:	d01e      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 8003686:	4e7d      	ldr	r6, [pc, #500]	; (800387c <HAL_DMA_Start_IT+0x22c>)
 8003688:	42b4      	cmp	r4, r6
 800368a:	d01b      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 800368c:	3618      	adds	r6, #24
 800368e:	42b4      	cmp	r4, r6
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 8003692:	3618      	adds	r6, #24
 8003694:	42b4      	cmp	r4, r6
 8003696:	d015      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 8003698:	3618      	adds	r6, #24
 800369a:	42b4      	cmp	r4, r6
 800369c:	d012      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 800369e:	3618      	adds	r6, #24
 80036a0:	42b4      	cmp	r4, r6
 80036a2:	d00f      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036a4:	3618      	adds	r6, #24
 80036a6:	42b4      	cmp	r4, r6
 80036a8:	d00c      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036aa:	3618      	adds	r6, #24
 80036ac:	42b4      	cmp	r4, r6
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036b0:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80036b4:	42b4      	cmp	r4, r6
 80036b6:	d005      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036b8:	3618      	adds	r6, #24
 80036ba:	42b4      	cmp	r4, r6
 80036bc:	d002      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036be:	3618      	adds	r6, #24
 80036c0:	42b4      	cmp	r4, r6
 80036c2:	d0ff      	beq.n	80036c4 <HAL_DMA_Start_IT+0x74>
 80036c4:	6826      	ldr	r6, [r4, #0]
 80036c6:	f026 0601 	bic.w	r6, r6, #1
 80036ca:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036cc:	f7ff fc6e 	bl	8002fac <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036d0:	6803      	ldr	r3, [r0, #0]
 80036d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	d053      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036d8:	4a68      	ldr	r2, [pc, #416]	; (800387c <HAL_DMA_Start_IT+0x22c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d050      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036de:	3218      	adds	r2, #24
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d04d      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036e4:	3218      	adds	r2, #24
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04a      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036ea:	3218      	adds	r2, #24
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d047      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036f0:	3218      	adds	r2, #24
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d044      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036f6:	3218      	adds	r2, #24
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d041      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 80036fc:	3218      	adds	r2, #24
 80036fe:	4293      	cmp	r3, r2
 8003700:	d03e      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 8003702:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003706:	4293      	cmp	r3, r2
 8003708:	d03a      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 800370a:	3218      	adds	r2, #24
 800370c:	4293      	cmp	r3, r2
 800370e:	d037      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 8003710:	3218      	adds	r2, #24
 8003712:	4293      	cmp	r3, r2
 8003714:	d034      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 8003716:	3218      	adds	r2, #24
 8003718:	4293      	cmp	r3, r2
 800371a:	d031      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 800371c:	3218      	adds	r2, #24
 800371e:	4293      	cmp	r3, r2
 8003720:	d02e      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 8003722:	3218      	adds	r2, #24
 8003724:	4293      	cmp	r3, r2
 8003726:	d02b      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 8003728:	3218      	adds	r2, #24
 800372a:	4293      	cmp	r3, r2
 800372c:	d028      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
 800372e:	3218      	adds	r2, #24
 8003730:	4293      	cmp	r3, r2
 8003732:	d025      	beq.n	8003780 <HAL_DMA_Start_IT+0x130>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	f022 020e 	bic.w	r2, r2, #14
 800373a:	f042 020a 	orr.w	r2, r2, #10
 800373e:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003740:	2900      	cmp	r1, #0
 8003742:	d156      	bne.n	80037f2 <HAL_DMA_Start_IT+0x1a2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003744:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <HAL_DMA_Start_IT+0x230>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800374a:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_DMA_Start_IT+0x234>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d024      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003750:	3214      	adds	r2, #20
 8003752:	4293      	cmp	r3, r2
 8003754:	d021      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003756:	3214      	adds	r2, #20
 8003758:	4293      	cmp	r3, r2
 800375a:	d01e      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800375c:	3214      	adds	r2, #20
 800375e:	4293      	cmp	r3, r2
 8003760:	d01b      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003762:	3214      	adds	r2, #20
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003768:	3214      	adds	r2, #20
 800376a:	4293      	cmp	r3, r2
 800376c:	d015      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800376e:	3214      	adds	r2, #20
 8003770:	4293      	cmp	r3, r2
 8003772:	d012      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
    __HAL_DMA_ENABLE(hdma);
 8003774:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f022 021e 	bic.w	r2, r2, #30
 8003786:	f042 0216 	orr.w	r2, r2, #22
 800378a:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800378c:	b119      	cbz	r1, 8003796 <HAL_DMA_Start_IT+0x146>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	f042 0208 	orr.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003796:	42ab      	cmp	r3, r5
 8003798:	d130      	bne.n	80037fc <HAL_DMA_Start_IT+0x1ac>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800379a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800379c:	6811      	ldr	r1, [r2, #0]
 800379e:	03c9      	lsls	r1, r1, #15
 80037a0:	d45b      	bmi.n	800385a <HAL_DMA_Start_IT+0x20a>
      if(hdma->DMAmuxRequestGen != 0U)
 80037a2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80037a4:	b11a      	cbz	r2, 80037ae <HAL_DMA_Start_IT+0x15e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037a6:	6811      	ldr	r1, [r2, #0]
 80037a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037ac:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80037ae:	42ab      	cmp	r3, r5
 80037b0:	d0e0      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <HAL_DMA_Start_IT+0x22c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d0dd      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037b8:	3218      	adds	r2, #24
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d0da      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037be:	3218      	adds	r2, #24
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d0d7      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037c4:	3218      	adds	r2, #24
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d0d4      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037ca:	3218      	adds	r2, #24
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d0d1      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037d0:	3218      	adds	r2, #24
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d0ce      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037d6:	3218      	adds	r2, #24
 80037d8:	4293      	cmp	r3, r2
 80037da:	d0cb      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037dc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d0c7      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037e4:	3218      	adds	r2, #24
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d0c4      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037ea:	3218      	adds	r2, #24
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d0c1      	beq.n	8003774 <HAL_DMA_Start_IT+0x124>
 80037f0:	e7c0      	b.n	8003774 <HAL_DMA_Start_IT+0x124>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f042 0204 	orr.w	r2, r2, #4
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e7a3      	b.n	8003744 <HAL_DMA_Start_IT+0xf4>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <HAL_DMA_Start_IT+0x22c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d0cb      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003802:	3218      	adds	r2, #24
 8003804:	4293      	cmp	r3, r2
 8003806:	d0c8      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003808:	3218      	adds	r2, #24
 800380a:	4293      	cmp	r3, r2
 800380c:	d0c5      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800380e:	3218      	adds	r2, #24
 8003810:	4293      	cmp	r3, r2
 8003812:	d0c2      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003814:	3218      	adds	r2, #24
 8003816:	4293      	cmp	r3, r2
 8003818:	d0bf      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800381a:	3218      	adds	r2, #24
 800381c:	4293      	cmp	r3, r2
 800381e:	d0bc      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003820:	3218      	adds	r2, #24
 8003822:	4293      	cmp	r3, r2
 8003824:	d0b9      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003826:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800382a:	4293      	cmp	r3, r2
 800382c:	d0b5      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800382e:	3218      	adds	r2, #24
 8003830:	4293      	cmp	r3, r2
 8003832:	d0b2      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003834:	3218      	adds	r2, #24
 8003836:	4293      	cmp	r3, r2
 8003838:	d0af      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800383a:	3218      	adds	r2, #24
 800383c:	4293      	cmp	r3, r2
 800383e:	d0ac      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003840:	3218      	adds	r2, #24
 8003842:	4293      	cmp	r3, r2
 8003844:	d0a9      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003846:	3218      	adds	r2, #24
 8003848:	4293      	cmp	r3, r2
 800384a:	d0a6      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 800384c:	3218      	adds	r2, #24
 800384e:	4293      	cmp	r3, r2
 8003850:	d0a3      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003852:	3218      	adds	r2, #24
 8003854:	4293      	cmp	r3, r2
 8003856:	d0a0      	beq.n	800379a <HAL_DMA_Start_IT+0x14a>
 8003858:	e774      	b.n	8003744 <HAL_DMA_Start_IT+0xf4>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800385a:	6811      	ldr	r1, [r2, #0]
 800385c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	e79e      	b.n	80037a2 <HAL_DMA_Start_IT+0x152>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003864:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8003868:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800386c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800386e:	2001      	movs	r0, #1
 8003870:	e785      	b.n	800377e <HAL_DMA_Start_IT+0x12e>
  __HAL_LOCK(hdma);
 8003872:	2002      	movs	r0, #2
 8003874:	e783      	b.n	800377e <HAL_DMA_Start_IT+0x12e>
 8003876:	bf00      	nop
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	58025408 	.word	0x58025408
 8003884:	5802541c 	.word	0x5802541c

08003888 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8003888:	2300      	movs	r3, #0
{
 800388a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800388e:	9301      	str	r3, [sp, #4]
{
 8003890:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003894:	4e29      	ldr	r6, [pc, #164]	; (800393c <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8003896:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003898:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800389c:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800389e:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 80038a2:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a6:	d04f      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_DMA_IRQHandler+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d04c      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038ae:	3218      	adds	r2, #24
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d049      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038b4:	3218      	adds	r2, #24
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d046      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038ba:	3218      	adds	r2, #24
 80038bc:	4293      	cmp	r3, r2
 80038be:	d043      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038c0:	3218      	adds	r2, #24
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038c6:	3218      	adds	r2, #24
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d03d      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038cc:	3218      	adds	r2, #24
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d03a      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038d2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038da:	3218      	adds	r2, #24
 80038dc:	4293      	cmp	r3, r2
 80038de:	d033      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038e0:	3218      	adds	r2, #24
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d030      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038e6:	3218      	adds	r2, #24
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02d      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038ec:	3218      	adds	r2, #24
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02a      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038f2:	3218      	adds	r2, #24
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038f8:	3218      	adds	r2, #24
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d024      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
 80038fe:	3218      	adds	r2, #24
 8003900:	4293      	cmp	r3, r2
 8003902:	d021      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003904:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <HAL_DMA_IRQHandler+0xbc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	f040 820c 	bne.w	8003d24 <HAL_DMA_IRQHandler+0x49c>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800390c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800390e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003910:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003912:	f001 011f 	and.w	r1, r1, #31
 8003916:	4088      	lsls	r0, r1
 8003918:	ea10 0f0c 	tst.w	r0, ip
 800391c:	f000 8229 	beq.w	8003d72 <HAL_DMA_IRQHandler+0x4ea>
 8003920:	0756      	lsls	r6, r2, #29
 8003922:	f140 8226 	bpl.w	8003d72 <HAL_DMA_IRQHandler+0x4ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003926:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003928:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392a:	f140 821a 	bpl.w	8003d62 <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800392e:	03d3      	lsls	r3, r2, #15
 8003930:	f100 821d 	bmi.w	8003d6e <HAL_DMA_IRQHandler+0x4e6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003934:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003936:	e180      	b.n	8003c3a <HAL_DMA_IRQHandler+0x3b2>
 8003938:	24000000 	.word	0x24000000
 800393c:	40020010 	.word	0x40020010
 8003940:	40020028 	.word	0x40020028
 8003944:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003948:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800394a:	2008      	movs	r0, #8
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	4090      	lsls	r0, r2
 8003952:	ea10 0f08 	tst.w	r0, r8
 8003956:	d03d      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003958:	42b3      	cmp	r3, r6
 800395a:	d02e      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 800395c:	4985      	ldr	r1, [pc, #532]	; (8003b74 <HAL_DMA_IRQHandler+0x2ec>)
 800395e:	428b      	cmp	r3, r1
 8003960:	d02b      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003962:	3118      	adds	r1, #24
 8003964:	428b      	cmp	r3, r1
 8003966:	d028      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003968:	3118      	adds	r1, #24
 800396a:	428b      	cmp	r3, r1
 800396c:	d025      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 800396e:	3118      	adds	r1, #24
 8003970:	428b      	cmp	r3, r1
 8003972:	d022      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003974:	3118      	adds	r1, #24
 8003976:	428b      	cmp	r3, r1
 8003978:	d01f      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 800397a:	3118      	adds	r1, #24
 800397c:	428b      	cmp	r3, r1
 800397e:	d01c      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003980:	3118      	adds	r1, #24
 8003982:	428b      	cmp	r3, r1
 8003984:	d019      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003986:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800398a:	428b      	cmp	r3, r1
 800398c:	d015      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 800398e:	3118      	adds	r1, #24
 8003990:	428b      	cmp	r3, r1
 8003992:	d012      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 8003994:	3118      	adds	r1, #24
 8003996:	428b      	cmp	r3, r1
 8003998:	d00f      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 800399a:	3118      	adds	r1, #24
 800399c:	428b      	cmp	r3, r1
 800399e:	d00c      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 80039a0:	3118      	adds	r1, #24
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 80039a6:	3118      	adds	r1, #24
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d006      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 80039ac:	3118      	adds	r1, #24
 80039ae:	428b      	cmp	r3, r1
 80039b0:	d003      	beq.n	80039ba <HAL_DMA_IRQHandler+0x132>
 80039b2:	3118      	adds	r1, #24
 80039b4:	428b      	cmp	r3, r1
 80039b6:	f040 80c2 	bne.w	8003b3e <HAL_DMA_IRQHandler+0x2b6>
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80039c0:	b141      	cbz	r1, 80039d4 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	f021 0104 	bic.w	r1, r1, #4
 80039c8:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039ca:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80039ce:	f041 0101 	orr.w	r1, r1, #1
 80039d2:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d4:	fa28 f102 	lsr.w	r1, r8, r2
 80039d8:	07c8      	lsls	r0, r1, #31
 80039da:	d534      	bpl.n	8003a46 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039dc:	42b3      	cmp	r3, r6
 80039de:	d02e      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039e0:	4964      	ldr	r1, [pc, #400]	; (8003b74 <HAL_DMA_IRQHandler+0x2ec>)
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d02b      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039e6:	3118      	adds	r1, #24
 80039e8:	428b      	cmp	r3, r1
 80039ea:	d028      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039ec:	3118      	adds	r1, #24
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d025      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039f2:	3118      	adds	r1, #24
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039f8:	3118      	adds	r1, #24
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d01f      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 80039fe:	3118      	adds	r1, #24
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d01c      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a04:	3118      	adds	r1, #24
 8003a06:	428b      	cmp	r3, r1
 8003a08:	d019      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a0a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	d015      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a12:	3118      	adds	r1, #24
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d012      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a18:	3118      	adds	r1, #24
 8003a1a:	428b      	cmp	r3, r1
 8003a1c:	d00f      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a1e:	3118      	adds	r1, #24
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d00c      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a24:	3118      	adds	r1, #24
 8003a26:	428b      	cmp	r3, r1
 8003a28:	d009      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a2a:	3118      	adds	r1, #24
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d006      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a30:	3118      	adds	r1, #24
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d003      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1b6>
 8003a36:	3118      	adds	r1, #24
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	f040 8084 	bne.w	8003b46 <HAL_DMA_IRQHandler+0x2be>
 8003a3e:	6959      	ldr	r1, [r3, #20]
 8003a40:	0609      	lsls	r1, r1, #24
 8003a42:	f100 8082 	bmi.w	8003b4a <HAL_DMA_IRQHandler+0x2c2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a46:	2104      	movs	r1, #4
 8003a48:	4091      	lsls	r1, r2
 8003a4a:	ea11 0f08 	tst.w	r1, r8
 8003a4e:	d032      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a50:	42b3      	cmp	r3, r6
 8003a52:	d02d      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a54:	4847      	ldr	r0, [pc, #284]	; (8003b74 <HAL_DMA_IRQHandler+0x2ec>)
 8003a56:	4283      	cmp	r3, r0
 8003a58:	d02a      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a5a:	3018      	adds	r0, #24
 8003a5c:	4283      	cmp	r3, r0
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a60:	3018      	adds	r0, #24
 8003a62:	4283      	cmp	r3, r0
 8003a64:	d024      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a66:	3018      	adds	r0, #24
 8003a68:	4283      	cmp	r3, r0
 8003a6a:	d021      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a6c:	3018      	adds	r0, #24
 8003a6e:	4283      	cmp	r3, r0
 8003a70:	d01e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a72:	3018      	adds	r0, #24
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a78:	3018      	adds	r0, #24
 8003a7a:	4283      	cmp	r3, r0
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a7e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003a82:	4283      	cmp	r3, r0
 8003a84:	d014      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a86:	3018      	adds	r0, #24
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d011      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a8c:	3018      	adds	r0, #24
 8003a8e:	4283      	cmp	r3, r0
 8003a90:	d00e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a92:	3018      	adds	r0, #24
 8003a94:	4283      	cmp	r3, r0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a98:	3018      	adds	r0, #24
 8003a9a:	4283      	cmp	r3, r0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003a9e:	3018      	adds	r0, #24
 8003aa0:	4283      	cmp	r3, r0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003aa4:	3018      	adds	r0, #24
 8003aa6:	4283      	cmp	r3, r0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x228>
 8003aaa:	3018      	adds	r0, #24
 8003aac:	4283      	cmp	r3, r0
 8003aae:	d154      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x2d2>
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	0780      	lsls	r0, r0, #30
 8003ab4:	d453      	bmi.n	8003b5e <HAL_DMA_IRQHandler+0x2d6>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	ea12 0f08 	tst.w	r2, r8
 8003ac0:	d05e      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x2f8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ac2:	42b3      	cmp	r3, r6
 8003ac4:	d02d      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003ac6:	492b      	ldr	r1, [pc, #172]	; (8003b74 <HAL_DMA_IRQHandler+0x2ec>)
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	d02a      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003acc:	3118      	adds	r1, #24
 8003ace:	428b      	cmp	r3, r1
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003ad2:	3118      	adds	r1, #24
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d024      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003ad8:	3118      	adds	r1, #24
 8003ada:	428b      	cmp	r3, r1
 8003adc:	d021      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003ade:	3118      	adds	r1, #24
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	d01e      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003ae4:	3118      	adds	r1, #24
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	d01b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003aea:	3118      	adds	r1, #24
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d018      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003af0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003af4:	428b      	cmp	r3, r1
 8003af6:	d014      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003af8:	3118      	adds	r1, #24
 8003afa:	428b      	cmp	r3, r1
 8003afc:	d011      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003afe:	3118      	adds	r1, #24
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d00e      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003b04:	3118      	adds	r1, #24
 8003b06:	428b      	cmp	r3, r1
 8003b08:	d00b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003b0a:	3118      	adds	r1, #24
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d008      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003b10:	3118      	adds	r1, #24
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d005      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003b16:	3118      	adds	r1, #24
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d002      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29a>
 8003b1c:	3118      	adds	r1, #24
 8003b1e:	428b      	cmp	r3, r1
 8003b20:	d123      	bne.n	8003b6a <HAL_DMA_IRQHandler+0x2e2>
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	f011 0f08 	tst.w	r1, #8
 8003b28:	d02a      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x2f8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b2a:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	0350      	lsls	r0, r2, #13
 8003b30:	f140 808b 	bpl.w	8003c4a <HAL_DMA_IRQHandler+0x3c2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0319      	lsls	r1, r3, #12
 8003b38:	d41e      	bmi.n	8003b78 <HAL_DMA_IRQHandler+0x2f0>
          if(hdma->XferHalfCpltCallback != NULL)
 8003b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b3c:	e01d      	b.n	8003b7a <HAL_DMA_IRQHandler+0x2f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8003b44:	e73c      	b.n	80039c0 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	e77d      	b.n	8003a46 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4091      	lsls	r1, r2
 8003b4e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b50:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b52:	f041 0102 	orr.w	r1, r1, #2
 8003b56:	6561      	str	r1, [r4, #84]	; 0x54
 8003b58:	e775      	b.n	8003a46 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	e7ab      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b5e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b60:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b62:	f041 0104 	orr.w	r1, r1, #4
 8003b66:	6561      	str	r1, [r4, #84]	; 0x54
 8003b68:	e7a5      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	f011 0f04 	tst.w	r1, #4
 8003b70:	e7da      	b.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
 8003b72:	bf00      	nop
 8003b74:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7a:	b10b      	cbz	r3, 8003b80 <HAL_DMA_IRQHandler+0x2f8>
            hdma->XferHalfCpltCallback(hdma);
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b82:	2120      	movs	r1, #32
 8003b84:	f002 021f 	and.w	r2, r2, #31
 8003b88:	4091      	lsls	r1, r2
 8003b8a:	ea11 0f08 	tst.w	r1, r8
 8003b8e:	d073      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x3f0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	42b3      	cmp	r3, r6
 8003b94:	d02d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003b96:	488d      	ldr	r0, [pc, #564]	; (8003dcc <HAL_DMA_IRQHandler+0x544>)
 8003b98:	4283      	cmp	r3, r0
 8003b9a:	d02a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003b9c:	3018      	adds	r0, #24
 8003b9e:	4283      	cmp	r3, r0
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003ba2:	3018      	adds	r0, #24
 8003ba4:	4283      	cmp	r3, r0
 8003ba6:	d024      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003ba8:	3018      	adds	r0, #24
 8003baa:	4283      	cmp	r3, r0
 8003bac:	d021      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bae:	3018      	adds	r0, #24
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d01e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bb4:	3018      	adds	r0, #24
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	d01b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bba:	3018      	adds	r0, #24
 8003bbc:	4283      	cmp	r3, r0
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bc0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003bc4:	4283      	cmp	r3, r0
 8003bc6:	d014      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bc8:	3018      	adds	r0, #24
 8003bca:	4283      	cmp	r3, r0
 8003bcc:	d011      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bce:	3018      	adds	r0, #24
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bd4:	3018      	adds	r0, #24
 8003bd6:	4283      	cmp	r3, r0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bda:	3018      	adds	r0, #24
 8003bdc:	4283      	cmp	r3, r0
 8003bde:	d008      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003be0:	3018      	adds	r0, #24
 8003be2:	4283      	cmp	r3, r0
 8003be4:	d005      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003be6:	3018      	adds	r0, #24
 8003be8:	4283      	cmp	r3, r0
 8003bea:	d002      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x36a>
 8003bec:	3018      	adds	r0, #24
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	d134      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x3d4>
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	f010 0f10 	tst.w	r0, #16
 8003bf8:	d03e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x3f0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bfa:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bfc:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8003c00:	2904      	cmp	r1, #4
 8003c02:	d12f      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x3dc>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	f021 0116 	bic.w	r1, r1, #22
 8003c0a:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c0c:	6959      	ldr	r1, [r3, #20]
 8003c0e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003c12:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c16:	b909      	cbnz	r1, 8003c1c <HAL_DMA_IRQHandler+0x394>
 8003c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c1a:	b119      	cbz	r1, 8003c24 <HAL_DMA_IRQHandler+0x39c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	f021 0108 	bic.w	r1, r1, #8
 8003c22:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c24:	233f      	movs	r3, #63	; 0x3f
 8003c26:	fa03 f202 	lsl.w	r2, r3, r2
          hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	2301      	movs	r3, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c2c:	60aa      	str	r2, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003c32:	2300      	movs	r3, #0
 8003c34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003c38:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 808e 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x4d4>
        hdma->XferErrorCallback(hdma);
 8003c40:	4620      	mov	r0, r4
}
 8003c42:	b002      	add	sp, #8
 8003c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003c48:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	05d2      	lsls	r2, r2, #23
 8003c4e:	f53f af74 	bmi.w	8003b3a <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e76e      	b.n	8003b3a <HAL_DMA_IRQHandler+0x2b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	f010 0f02 	tst.w	r0, #2
 8003c62:	e7c9      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x370>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	0355      	lsls	r5, r2, #13
 8003c68:	d54d      	bpl.n	8003d06 <HAL_DMA_IRQHandler+0x47e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0318      	lsls	r0, r3, #12
 8003c6e:	d457      	bmi.n	8003d20 <HAL_DMA_IRQHandler+0x498>
            if(hdma->XferM1CpltCallback != NULL)
 8003c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8003c72:	b10b      	cbz	r3, 8003c78 <HAL_DMA_IRQHandler+0x3f0>
            hdma->XferCpltCallback(hdma);
 8003c74:	4620      	mov	r0, r4
 8003c76:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d06e      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x4d4>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c80:	07d9      	lsls	r1, r3, #31
 8003c82:	d53e      	bpl.n	8003d02 <HAL_DMA_IRQHandler+0x47a>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c84:	2304      	movs	r3, #4
 8003c86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	42b3      	cmp	r3, r6
 8003c8e:	d01e      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003c90:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_DMA_IRQHandler+0x544>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01b      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003c96:	3218      	adds	r2, #24
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d018      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003c9c:	3218      	adds	r2, #24
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d015      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003ca2:	3218      	adds	r2, #24
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d012      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003ca8:	3218      	adds	r2, #24
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00f      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cae:	3218      	adds	r2, #24
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00c      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cb4:	3218      	adds	r2, #24
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d005      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cc2:	3218      	adds	r2, #24
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d002      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cc8:	3218      	adds	r2, #24
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d0ff      	beq.n	8003cce <HAL_DMA_IRQHandler+0x446>
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cd6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003cda:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 8003cde:	9a01      	ldr	r2, [sp, #4]
 8003ce0:	3201      	adds	r2, #1
 8003ce2:	42ba      	cmp	r2, r7
 8003ce4:	9201      	str	r2, [sp, #4]
 8003ce6:	d802      	bhi.n	8003cee <HAL_DMA_IRQHandler+0x466>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	07d2      	lsls	r2, r2, #31
 8003cec:	d4f7      	bmi.n	8003cde <HAL_DMA_IRQHandler+0x456>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003cf2:	bf4c      	ite	mi
 8003cf4:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8003d02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d04:	e799      	b.n	8003c3a <HAL_DMA_IRQHandler+0x3b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x498>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	f021 0110 	bic.w	r1, r1, #16
 8003d14:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003d16:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003d18:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003d20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d22:	e7a6      	b.n	8003c72 <HAL_DMA_IRQHandler+0x3ea>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_DMA_IRQHandler+0x548>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f43f adf0 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d2c:	3214      	adds	r2, #20
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f43f adec 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d34:	3214      	adds	r2, #20
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f43f ade8 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d3c:	3214      	adds	r2, #20
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f43f ade4 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d44:	3214      	adds	r2, #20
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f43f ade0 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d4c:	3214      	adds	r2, #20
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f43f addc 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
 8003d54:	3214      	adds	r2, #20
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f43f add8 	beq.w	800390c <HAL_DMA_IRQHandler+0x84>
}
 8003d5c:	b002      	add	sp, #8
 8003d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d62:	0697      	lsls	r7, r2, #26
 8003d64:	d403      	bmi.n	8003d6e <HAL_DMA_IRQHandler+0x4e6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f022 0204 	bic.w	r2, r2, #4
 8003d6c:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d70:	e763      	b.n	8003c3a <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d72:	2002      	movs	r0, #2
 8003d74:	4088      	lsls	r0, r1
 8003d76:	ea10 0f0c 	tst.w	r0, ip
 8003d7a:	d016      	beq.n	8003daa <HAL_DMA_IRQHandler+0x522>
 8003d7c:	0796      	lsls	r6, r2, #30
 8003d7e:	d514      	bpl.n	8003daa <HAL_DMA_IRQHandler+0x522>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d80:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d82:	0410      	lsls	r0, r2, #16
 8003d84:	d503      	bpl.n	8003d8e <HAL_DMA_IRQHandler+0x506>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d86:	03d1      	lsls	r1, r2, #15
 8003d88:	d40d      	bmi.n	8003da6 <HAL_DMA_IRQHandler+0x51e>
          if(hdma->XferM1CpltCallback != NULL)
 8003d8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d8c:	e755      	b.n	8003c3a <HAL_DMA_IRQHandler+0x3b2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d8e:	f012 0220 	ands.w	r2, r2, #32
 8003d92:	d108      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x51e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	f021 010a 	bic.w	r1, r1, #10
 8003d9a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003d9c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8003d9e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003da2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003da8:	e747      	b.n	8003c3a <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003daa:	2008      	movs	r0, #8
 8003dac:	4088      	lsls	r0, r1
 8003dae:	ea10 0f0c 	tst.w	r0, ip
 8003db2:	d0d3      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x4d4>
 8003db4:	0712      	lsls	r2, r2, #28
 8003db6:	d5d1      	bpl.n	8003d5c <HAL_DMA_IRQHandler+0x4d4>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f022 020e 	bic.w	r2, r2, #14
 8003dbe:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	fa03 f101 	lsl.w	r1, r3, r1
 8003dc6:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	6563      	str	r3, [r4, #84]	; 0x54
 8003dca:	e795      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x470>
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	5802541c 	.word	0x5802541c

08003dd4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	b099      	sub	sp, #100	; 0x64
 8003dda:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003ddc:	224c      	movs	r2, #76	; 0x4c
 8003dde:	49c8      	ldr	r1, [pc, #800]	; (8004100 <HAL_FDCAN_Init+0x32c>)
 8003de0:	a805      	add	r0, sp, #20
 8003de2:	f005 fa10 	bl	8009206 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003de6:	2c00      	cmp	r4, #0
 8003de8:	f000 81b6 	beq.w	8004158 <HAL_FDCAN_Init+0x384>
  {
    return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003dec:	4bc5      	ldr	r3, [pc, #788]	; (8004104 <HAL_FDCAN_Init+0x330>)
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	429a      	cmp	r2, r3
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003df2:	bf04      	itt	eq
 8003df4:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8003df8:	6063      	streq	r3, [r4, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003dfa:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8003dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e02:	b923      	cbnz	r3, 8003e0e <HAL_FDCAN_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e04:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 8003e06:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8003e0a:	f7fc fecf 	bl	8000bac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	6993      	ldr	r3, [r2, #24]
 8003e12:	f023 0310 	bic.w	r3, r3, #16
 8003e16:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e18:	f7fe fb64 	bl	80024e4 <HAL_GetTick>
 8003e1c:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	0711      	lsls	r1, r2, #28
 8003e24:	f100 8189 	bmi.w	800413a <HAL_FDCAN_Init+0x366>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e30:	f7fe fb58 	bl	80024e4 <HAL_GetTick>
 8003e34:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	07d2      	lsls	r2, r2, #31
 8003e3c:	f140 818e 	bpl.w	800415c <HAL_FDCAN_Init+0x388>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	f042 0202 	orr.w	r2, r2, #2
 8003e46:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003e48:	7c22      	ldrb	r2, [r4, #16]
 8003e4a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	bf0c      	ite	eq
 8003e50:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e54:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8003e58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003e5a:	7c62      	ldrb	r2, [r4, #17]
 8003e5c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	bf0c      	ite	eq
 8003e62:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e66:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8003e6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003e6c:	7ca2      	ldrb	r2, [r4, #18]
 8003e6e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	bf0c      	ite	eq
 8003e74:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e78:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8003e7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	68a0      	ldr	r0, [r4, #8]
 8003e82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e86:	4302      	orrs	r2, r0
 8003e88:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003e90:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e9a:	68e2      	ldr	r2, [r4, #12]
 8003e9c:	2a01      	cmp	r2, #1
 8003e9e:	f040 8164 	bne.w	800416a <HAL_FDCAN_Init+0x396>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ea8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eaa:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003eac:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eb0:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003eb4:	69e2      	ldr	r2, [r4, #28]
 8003eb6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003eba:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ebe:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ec2:	6a21      	ldr	r1, [r4, #32]
 8003ec4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ec8:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ecc:	6961      	ldr	r1, [r4, #20]
 8003ece:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ed2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ed6:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_FDCAN_Init+0x124>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003edc:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ede:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ee0:	3a01      	subs	r2, #1
 8003ee2:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ee4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ee8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003eea:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003eec:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003eee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ef0:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ef2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ef6:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003ef8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003efa:	b12d      	cbz	r5, 8003f08 <HAL_FDCAN_Init+0x134>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003efc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f00:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003f02:	430a      	orrs	r2, r1
 8003f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f08:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f0c:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f10:	eb15 0f0a 	cmn.w	r5, sl
 8003f14:	d00b      	beq.n	8003f2e <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f16:	a918      	add	r1, sp, #96	; 0x60
 8003f18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f1c:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8003f20:	f022 0207 	bic.w	r2, r2, #7
 8003f24:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003f2e:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
 8003f32:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003f34:	b167      	cbz	r7, 8003f50 <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003f36:	a818      	add	r0, sp, #96	; 0x60
 8003f38:	9903      	ldr	r1, [sp, #12]
 8003f3a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003f42:	f022 0207 	bic.w	r2, r2, #7
 8003f46:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003f50:	e9d4 6c12 	ldrd	r6, ip, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003f54:	b166      	cbz	r6, 8003f70 <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003f56:	a918      	add	r1, sp, #96	; 0x60
 8003f58:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003f5c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8003f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f64:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003f68:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003f6c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003f70:	6d22      	ldr	r2, [r4, #80]	; 0x50
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003f72:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003f76:	9202      	str	r2, [sp, #8]
 8003f78:	b162      	cbz	r2, 8003f94 <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003f7a:	a918      	add	r1, sp, #96	; 0x60
 8003f7c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003f80:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8003f84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f88:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003f8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003f94:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_FDCAN_Init+0x330>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d104      	bne.n	8003fa4 <HAL_FDCAN_Init+0x1d0>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003f9a:	6861      	ldr	r1, [r4, #4]
 8003f9c:	688a      	ldr	r2, [r1, #8]
 8003f9e:	f022 0203 	bic.w	r2, r2, #3
 8003fa2:	608a      	str	r2, [r1, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fa4:	2200      	movs	r2, #0
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003fa6:	4858      	ldr	r0, [pc, #352]	; (8004108 <HAL_FDCAN_Init+0x334>)
  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003fa8:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fac:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fb0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fb4:	f04f 0201 	mov.w	r2, #1
 8003fb8:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003fbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003fbe:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003fc0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003fc4:	9900      	ldr	r1, [sp, #0]
 8003fc6:	4002      	ands	r2, r0
 8003fc8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8003fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003fd0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003fd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fd6:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8003fda:	9201      	str	r2, [sp, #4]
 8003fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003fe0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003fe4:	9900      	ldr	r1, [sp, #0]
 8003fe6:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003fea:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003fee:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003ff0:	4001      	ands	r1, r0
 8003ff2:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
 8003ff6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003ffa:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003ffe:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8004002:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004006:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800400a:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800400e:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 8004012:	ea0e 0e00 	and.w	lr, lr, r0
 8004016:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 800401a:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800401e:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 8004022:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 8004026:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800402a:	4357      	muls	r7, r2
  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800402c:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800402e:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004032:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004034:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 8004038:	ea0e 0e00 	and.w	lr, lr, r0
 800403c:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8004040:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004044:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 8004048:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 800404c:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004050:	fb0c f606 	mul.w	r6, ip, r6
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004054:	fb09 fc02 	mul.w	ip, r9, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004058:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800405c:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800405e:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
 8004062:	ea0e 0e00 	and.w	lr, lr, r0
 8004066:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800406a:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800406c:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004070:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8004074:	ea0e 0e00 	and.w	lr, lr, r0
 8004078:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 800407c:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004080:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8004084:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004088:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800408c:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800408e:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004092:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 8004096:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800409a:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
 800409e:	ea0e 0000 	and.w	r0, lr, r0
 80040a2:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
 80040a6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80040aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040ae:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80040b2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80040b6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80040ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040be:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 80040c2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80040c6:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80040ca:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80040ce:	9b00      	ldr	r3, [sp, #0]
 80040d0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80040d4:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 80040d8:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80040da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80040de:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80040e0:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80040e2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80040e6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80040ea:	6762      	str	r2, [r4, #116]	; 0x74

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_FDCAN_Init+0x338>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80040ee:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80040f2:	67a7      	str	r7, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80040f4:	67e6      	str	r6, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80040f6:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80040fa:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80040fe:	e007      	b.n	8004110 <HAL_FDCAN_Init+0x33c>
 8004100:	0800b9fc 	.word	0x0800b9fc
 8004104:	4000a000 	.word	0x4000a000
 8004108:	ffff0003 	.word	0xffff0003
 800410c:	4000d3fc 	.word	0x4000d3fc
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004110:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004114:	fb0b f90a 	mul.w	r9, fp, sl
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004118:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800411c:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004120:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004124:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004128:	4295      	cmp	r5, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800412a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800412e:	d933      	bls.n	8004198 <HAL_FDCAN_Init+0x3c4>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004130:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	e009      	b.n	800414e <HAL_FDCAN_Init+0x37a>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800413a:	f7fe f9d3 	bl	80024e4 <HAL_GetTick>
 800413e:	1b40      	subs	r0, r0, r5
 8004140:	280a      	cmp	r0, #10
 8004142:	f67f ae6c 	bls.w	8003e1e <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004146:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800414a:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800414e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004152:	2303      	movs	r3, #3
 8004154:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
 8004158:	2001      	movs	r0, #1
 800415a:	e022      	b.n	80041a2 <HAL_FDCAN_Init+0x3ce>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800415c:	f7fe f9c2 	bl	80024e4 <HAL_GetTick>
 8004160:	1b40      	subs	r0, r0, r5
 8004162:	280a      	cmp	r0, #10
 8004164:	f67f ae67 	bls.w	8003e36 <HAL_FDCAN_Init+0x62>
 8004168:	e7ed      	b.n	8004146 <HAL_FDCAN_Init+0x372>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800416a:	2a00      	cmp	r2, #0
 800416c:	f43f ae9d 	beq.w	8003eaa <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004170:	2a02      	cmp	r2, #2
 8004172:	d00a      	beq.n	800418a <HAL_FDCAN_Init+0x3b6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004174:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004176:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004178:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800417c:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800417e:	6919      	ldr	r1, [r3, #16]
 8004180:	f041 0110 	orr.w	r1, r1, #16
 8004184:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004186:	f47f ae90 	bne.w	8003eaa <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	e68a      	b.n	8003ea8 <HAL_FDCAN_Init+0xd4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004192:	2200      	movs	r2, #0
 8004194:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004198:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800419c:	4293      	cmp	r3, r2
 800419e:	d3f8      	bcc.n	8004192 <HAL_FDCAN_Init+0x3be>
    }
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2000      	movs	r0, #0
}
 80041a2:	b019      	add	sp, #100	; 0x64
 80041a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080041a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80041ac:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ae:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800437c <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041b6:	680a      	ldr	r2, [r1, #0]
 80041b8:	fa32 f503 	lsrs.w	r5, r2, r3
 80041bc:	d102      	bne.n	80041c4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80041be:	b003      	add	sp, #12
 80041c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041c4:	f04f 0e01 	mov.w	lr, #1
 80041c8:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 80041cc:	ea1e 0202 	ands.w	r2, lr, r2
 80041d0:	f000 80bd 	beq.w	800434e <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d4:	684e      	ldr	r6, [r1, #4]
 80041d6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041da:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041de:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041e2:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041e6:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041e8:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ec:	2f01      	cmp	r7, #1
 80041ee:	d834      	bhi.n	800425a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80041f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041f2:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f6:	68cf      	ldr	r7, [r1, #12]
 80041f8:	fa07 f708 	lsl.w	r7, r7, r8
 80041fc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004200:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004202:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004204:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004208:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800420c:	409f      	lsls	r7, r3
 800420e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004212:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004214:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004216:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004218:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800421c:	688f      	ldr	r7, [r1, #8]
 800421e:	fa07 f708 	lsl.w	r7, r7, r8
 8004222:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8004226:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004228:	d119      	bne.n	800425e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800422a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800422e:	f003 0b07 	and.w	fp, r3, #7
 8004232:	f04f 0e0f 	mov.w	lr, #15
 8004236:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800423a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800423e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004242:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004246:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800424a:	690f      	ldr	r7, [r1, #16]
 800424c:	fa07 f70b 	lsl.w	r7, r7, fp
 8004250:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004254:	f8ca 7020 	str.w	r7, [sl, #32]
 8004258:	e001      	b.n	800425e <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425a:	2d03      	cmp	r5, #3
 800425c:	d1da      	bne.n	8004214 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800425e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004260:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004264:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004268:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426c:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8004270:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004272:	d06c      	beq.n	800434e <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8004278:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800427c:	f003 0c03 	and.w	ip, r3, #3
 8004280:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004284:	f045 0502 	orr.w	r5, r5, #2
 8004288:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800428c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004290:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8004294:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004298:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800429c:	f005 0502 	and.w	r5, r5, #2
 80042a0:	9501      	str	r5, [sp, #4]
 80042a2:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042a4:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80042a8:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042ac:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042b0:	4d31      	ldr	r5, [pc, #196]	; (8004378 <HAL_GPIO_Init+0x1d0>)
 80042b2:	42a8      	cmp	r0, r5
 80042b4:	d04d      	beq.n	8004352 <HAL_GPIO_Init+0x1aa>
 80042b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042ba:	42a8      	cmp	r0, r5
 80042bc:	d04b      	beq.n	8004356 <HAL_GPIO_Init+0x1ae>
 80042be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042c2:	42a8      	cmp	r0, r5
 80042c4:	d049      	beq.n	800435a <HAL_GPIO_Init+0x1b2>
 80042c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042ca:	42a8      	cmp	r0, r5
 80042cc:	d047      	beq.n	800435e <HAL_GPIO_Init+0x1b6>
 80042ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042d2:	42a8      	cmp	r0, r5
 80042d4:	d045      	beq.n	8004362 <HAL_GPIO_Init+0x1ba>
 80042d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042da:	42a8      	cmp	r0, r5
 80042dc:	d043      	beq.n	8004366 <HAL_GPIO_Init+0x1be>
 80042de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042e2:	42a8      	cmp	r0, r5
 80042e4:	d041      	beq.n	800436a <HAL_GPIO_Init+0x1c2>
 80042e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042ea:	42a8      	cmp	r0, r5
 80042ec:	d03f      	beq.n	800436e <HAL_GPIO_Init+0x1c6>
 80042ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042f2:	42a8      	cmp	r0, r5
 80042f4:	d03d      	beq.n	8004372 <HAL_GPIO_Init+0x1ca>
 80042f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042fa:	42a8      	cmp	r0, r5
 80042fc:	bf0c      	ite	eq
 80042fe:	2509      	moveq	r5, #9
 8004300:	250a      	movne	r5, #10
 8004302:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004306:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800430a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8004310:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8004314:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004316:	bf0c      	ite	eq
 8004318:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800431a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800431c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8004320:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004322:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8004324:	bf0c      	ite	eq
 8004326:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004328:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800432a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800432e:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004330:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8004334:	bf0c      	ite	eq
 8004336:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004338:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800433a:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800433c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004340:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8004344:	bf54      	ite	pl
 8004346:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8004348:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800434a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800434e:	3301      	adds	r3, #1
 8004350:	e731      	b.n	80041b6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004352:	2500      	movs	r5, #0
 8004354:	e7d5      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 8004356:	2501      	movs	r5, #1
 8004358:	e7d3      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 800435a:	2502      	movs	r5, #2
 800435c:	e7d1      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 800435e:	2503      	movs	r5, #3
 8004360:	e7cf      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 8004362:	2504      	movs	r5, #4
 8004364:	e7cd      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 8004366:	2505      	movs	r5, #5
 8004368:	e7cb      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 800436a:	2506      	movs	r5, #6
 800436c:	e7c9      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 800436e:	2507      	movs	r5, #7
 8004370:	e7c7      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 8004372:	2508      	movs	r5, #8
 8004374:	e7c5      	b.n	8004302 <HAL_GPIO_Init+0x15a>
 8004376:	bf00      	nop
 8004378:	58020000 	.word	0x58020000
 800437c:	58024400 	.word	0x58024400

08004380 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004380:	b10a      	cbz	r2, 8004386 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004382:	6181      	str	r1, [r0, #24]
  }
}
 8004384:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004386:	0409      	lsls	r1, r1, #16
 8004388:	e7fb      	b.n	8004382 <HAL_GPIO_WritePin+0x2>

0800438a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800438a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800438c:	4604      	mov	r4, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d04a      	beq.n	8004428 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004392:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800439a:	b91b      	cbnz	r3, 80043a4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043a0:	f7fc fe0e 	bl	8000fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a4:	2324      	movs	r3, #36	; 0x24
 80043a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b4:	6862      	ldr	r2, [r4, #4]
 80043b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043c4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c8:	2901      	cmp	r1, #1
 80043ca:	d124      	bne.n	8004416 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043d2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80043da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043de:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80043ec:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043ee:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043f4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043f6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004406:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004408:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800440e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8004414:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800441a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800441c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800441e:	d1d8      	bne.n	80043d2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e7d4      	b.n	80043d2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004428:	2001      	movs	r0, #1
 800442a:	e7f3      	b.n	8004414 <HAL_I2C_Init+0x8a>

0800442c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800442c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004432:	2b20      	cmp	r3, #32
 8004434:	b2dc      	uxtb	r4, r3
 8004436:	d11d      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004438:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d019      	beq.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004440:	2324      	movs	r3, #36	; 0x24
 8004442:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004446:	6803      	ldr	r3, [r0, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4311      	orrs	r1, r2
 800445c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800446c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004470:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004472:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004474:	2002      	movs	r0, #2
 8004476:	e7fc      	b.n	8004472 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004478 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004478:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800447e:	2b20      	cmp	r3, #32
 8004480:	b2dc      	uxtb	r4, r3
 8004482:	d11c      	bne.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004484:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004488:	2b01      	cmp	r3, #1
 800448a:	d018      	beq.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	2324      	movs	r3, #36	; 0x24
 800448e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	6803      	ldr	r3, [r0, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800449c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800449e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044a2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044a6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80044b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80044ba:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80044bc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80044be:	2002      	movs	r0, #2
 80044c0:	e7fc      	b.n	80044bc <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080044c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044c6:	4c10      	ldr	r4, [pc, #64]	; (8004508 <HAL_PWREx_ConfigSupply+0x44>)
 80044c8:	68e3      	ldr	r3, [r4, #12]
 80044ca:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044ce:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044d0:	d105      	bne.n	80044de <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044d2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044d6:	1a18      	subs	r0, r3, r0
 80044d8:	bf18      	it	ne
 80044da:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80044dc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	4318      	orrs	r0, r3
 80044e4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80044e6:	f7fd fffd 	bl	80024e4 <HAL_GetTick>
 80044ea:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	049b      	lsls	r3, r3, #18
 80044f0:	d501      	bpl.n	80044f6 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7f2      	b.n	80044dc <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044f6:	f7fd fff5 	bl	80024e4 <HAL_GetTick>
 80044fa:	1b40      	subs	r0, r0, r5
 80044fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004500:	d9f4      	bls.n	80044ec <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
 8004504:	e7ea      	b.n	80044dc <HAL_PWREx_ConfigSupply+0x18>
 8004506:	bf00      	nop
 8004508:	58024800 	.word	0x58024800

0800450c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004510:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004514:	4604      	mov	r4, r0
 8004516:	460e      	mov	r6, r1
 8004518:	4615      	mov	r5, r2
 800451a:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	6893      	ldr	r3, [r2, #8]
 8004520:	4233      	tst	r3, r6
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	42ab      	cmp	r3, r5
 800452a:	d101      	bne.n	8004530 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800452c:	2000      	movs	r0, #0
 800452e:	e012      	b.n	8004556 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004530:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004534:	d0f3      	beq.n	800451e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7fd ffd5 	bl	80024e4 <HAL_GetTick>
 800453a:	1bc0      	subs	r0, r0, r7
 800453c:	4540      	cmp	r0, r8
 800453e:	d802      	bhi.n	8004546 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8004540:	f1b8 0f00 	cmp.w	r8, #0
 8004544:	d1ea      	bne.n	800451c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004546:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004548:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800454a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800454e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800455c <HAL_QSPI_Init>:
{
 800455c:	b530      	push	{r4, r5, lr}
 800455e:	4604      	mov	r4, r0
 8004560:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8004562:	f7fd ffbf 	bl	80024e4 <HAL_GetTick>
 8004566:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8004568:	2c00      	cmp	r4, #0
 800456a:	d040      	beq.n	80045ee <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800456c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004570:	b93a      	cbnz	r2, 8004582 <HAL_QSPI_Init+0x26>
 8004572:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8004574:	4620      	mov	r0, r4
 8004576:	f7fc fee5 	bl	8001344 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	68a1      	ldr	r1, [r4, #8]
 8004586:	6802      	ldr	r2, [r0, #0]
 8004588:	3901      	subs	r1, #1
 800458a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800458e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004592:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004594:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004596:	4620      	mov	r0, r4
 8004598:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800459a:	9200      	str	r2, [sp, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	f7ff ffb5 	bl	800450c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80045a2:	bb10      	cbnz	r0, 80045ea <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	69e5      	ldr	r5, [r4, #28]
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	6811      	ldr	r1, [r2, #0]
 80045ac:	432b      	orrs	r3, r5
 80045ae:	6a25      	ldr	r5, [r4, #32]
 80045b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80045b4:	432b      	orrs	r3, r5
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80045bc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045c4:	6855      	ldr	r5, [r2, #4]
 80045c6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6921      	ldr	r1, [r4, #16]
 80045ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80045d2:	4908      	ldr	r1, [pc, #32]	; (80045f4 <HAL_QSPI_Init+0x98>)
 80045d4:	4029      	ands	r1, r5
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80045e2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045e4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80045e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80045ea:	b005      	add	sp, #20
 80045ec:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
 80045f0:	e7fb      	b.n	80045ea <HAL_QSPI_Init+0x8e>
 80045f2:	bf00      	nop
 80045f4:	ffe0f8fe 	.word	0xffe0f8fe

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fa:	4604      	mov	r4, r0
 80045fc:	b908      	cbnz	r0, 8004602 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80045fe:	2001      	movs	r0, #1
 8004600:	e08b      	b.n	800471a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	6803      	ldr	r3, [r0, #0]
 8004604:	07df      	lsls	r7, r3, #31
 8004606:	d45e      	bmi.n	80046c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	079e      	lsls	r6, r3, #30
 800460c:	f100 80af 	bmi.w	800476e <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	06da      	lsls	r2, r3, #27
 8004614:	d527      	bpl.n	8004666 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b9e      	ldr	r3, [pc, #632]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 8004618:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800461a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004620:	2a08      	cmp	r2, #8
 8004622:	d007      	beq.n	8004634 <HAL_RCC_OscConfig+0x3c>
 8004624:	2a18      	cmp	r2, #24
 8004626:	f040 8107 	bne.w	8004838 <HAL_RCC_OscConfig+0x240>
 800462a:	f001 0203 	and.w	r2, r1, #3
 800462e:	2a01      	cmp	r2, #1
 8004630:	f040 8102 	bne.w	8004838 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	05db      	lsls	r3, r3, #23
 8004638:	d502      	bpl.n	8004640 <HAL_RCC_OscConfig+0x48>
 800463a:	69e3      	ldr	r3, [r4, #28]
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d1de      	bne.n	80045fe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004640:	f7fd ff68 	bl	8002514 <HAL_GetREVID>
 8004644:	f241 0303 	movw	r3, #4099	; 0x1003
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	4298      	cmp	r0, r3
 800464c:	4b90      	ldr	r3, [pc, #576]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 800464e:	f200 80ec 	bhi.w	800482a <HAL_RCC_OscConfig+0x232>
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	2920      	cmp	r1, #32
 8004656:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800465a:	bf0c      	ite	eq
 800465c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8004660:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004664:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	0719      	lsls	r1, r3, #28
 800466a:	f100 8127 	bmi.w	80048bc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	069a      	lsls	r2, r3, #26
 8004672:	f100 8148 	bmi.w	8004906 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	075d      	lsls	r5, r3, #29
 800467a:	d51e      	bpl.n	80046ba <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800467c:	4d85      	ldr	r5, [pc, #532]	; (8004894 <HAL_RCC_OscConfig+0x29c>)
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004686:	f7fd ff2d 	bl	80024e4 <HAL_GetTick>
 800468a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	05da      	lsls	r2, r3, #23
 8004690:	f140 815e 	bpl.w	8004950 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	4d7e      	ldr	r5, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 8160 	bne.w	800495e <HAL_RCC_OscConfig+0x366>
 800469e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80046aa:	f7fd ff1b 	bl	80024e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ae:	4e78      	ldr	r6, [pc, #480]	; (8004890 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 80046b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80046b4:	079b      	lsls	r3, r3, #30
 80046b6:	f140 8178 	bpl.w	80049aa <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 817b 	bne.w	80049b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 80046c2:	2000      	movs	r0, #0
 80046c4:	e029      	b.n	800471a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 80046c8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046d0:	2a10      	cmp	r2, #16
 80046d2:	d005      	beq.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046d4:	2a18      	cmp	r2, #24
 80046d6:	d10a      	bne.n	80046ee <HAL_RCC_OscConfig+0xf6>
 80046d8:	f001 0203 	and.w	r2, r1, #3
 80046dc:	2a02      	cmp	r2, #2
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	039d      	lsls	r5, r3, #14
 80046e4:	d590      	bpl.n	8004608 <HAL_RCC_OscConfig+0x10>
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d18d      	bne.n	8004608 <HAL_RCC_OscConfig+0x10>
 80046ec:	e787      	b.n	80045fe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ee:	6862      	ldr	r2, [r4, #4]
 80046f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046f4:	d112      	bne.n	800471c <HAL_RCC_OscConfig+0x124>
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046fe:	f7fd fef1 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004702:	4e63      	ldr	r6, [pc, #396]	; (8004890 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8004704:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004706:	6833      	ldr	r3, [r6, #0]
 8004708:	0398      	lsls	r0, r3, #14
 800470a:	f53f af7d 	bmi.w	8004608 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470e:	f7fd fee9 	bl	80024e4 <HAL_GetTick>
 8004712:	1b40      	subs	r0, r0, r5
 8004714:	2864      	cmp	r0, #100	; 0x64
 8004716:	d9f6      	bls.n	8004706 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8004718:	2003      	movs	r0, #3
}
 800471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	4d5c      	ldr	r5, [pc, #368]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b99a      	cbnz	r2, 800474a <HAL_RCC_OscConfig+0x152>
 8004722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004730:	f7fd fed8 	bl	80024e4 <HAL_GetTick>
 8004734:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	0399      	lsls	r1, r3, #14
 800473a:	f57f af65 	bpl.w	8004608 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800473e:	f7fd fed1 	bl	80024e4 <HAL_GetTick>
 8004742:	1b80      	subs	r0, r0, r6
 8004744:	2864      	cmp	r0, #100	; 0x64
 8004746:	d9f6      	bls.n	8004736 <HAL_RCC_OscConfig+0x13e>
 8004748:	e7e6      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	e7ce      	b.n	80046fe <HAL_RCC_OscConfig+0x106>
 8004760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476c:	e7f6      	b.n	800475c <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476e:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 8004770:	68e1      	ldr	r1, [r4, #12]
 8004772:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004774:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004776:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800477a:	d003      	beq.n	8004784 <HAL_RCC_OscConfig+0x18c>
 800477c:	2a18      	cmp	r2, #24
 800477e:	d12b      	bne.n	80047d8 <HAL_RCC_OscConfig+0x1e0>
 8004780:	0782      	lsls	r2, r0, #30
 8004782:	d129      	bne.n	80047d8 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	075b      	lsls	r3, r3, #29
 8004788:	d502      	bpl.n	8004790 <HAL_RCC_OscConfig+0x198>
 800478a:	2900      	cmp	r1, #0
 800478c:	f43f af37 	beq.w	80045fe <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004790:	4d3f      	ldr	r5, [pc, #252]	; (8004890 <HAL_RCC_OscConfig+0x298>)
 8004792:	682a      	ldr	r2, [r5, #0]
 8004794:	f022 0219 	bic.w	r2, r2, #25
 8004798:	430a      	orrs	r2, r1
 800479a:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 800479c:	f7fd fea2 	bl	80024e4 <HAL_GetTick>
 80047a0:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a2:	682b      	ldr	r3, [r5, #0]
 80047a4:	075f      	lsls	r7, r3, #29
 80047a6:	d511      	bpl.n	80047cc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	f7fd feb4 	bl	8002514 <HAL_GetREVID>
 80047ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80047b0:	6922      	ldr	r2, [r4, #16]
 80047b2:	4298      	cmp	r0, r3
 80047b4:	686b      	ldr	r3, [r5, #4]
 80047b6:	d822      	bhi.n	80047fe <HAL_RCC_OscConfig+0x206>
 80047b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047bc:	2a40      	cmp	r2, #64	; 0x40
 80047be:	bf0c      	ite	eq
 80047c0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80047c4:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80047c8:	606b      	str	r3, [r5, #4]
 80047ca:	e721      	b.n	8004610 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fd fe8a 	bl	80024e4 <HAL_GetTick>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	2802      	cmp	r0, #2
 80047d4:	d9e5      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1aa>
 80047d6:	e79f      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047da:	b1a9      	cbz	r1, 8004808 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047dc:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047e0:	4d2b      	ldr	r5, [pc, #172]	; (8004890 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047e6:	f7fd fe7d 	bl	80024e4 <HAL_GetTick>
 80047ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	0758      	lsls	r0, r3, #29
 80047f0:	d4da      	bmi.n	80047a8 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f2:	f7fd fe77 	bl	80024e4 <HAL_GetTick>
 80047f6:	1b80      	subs	r0, r0, r6
 80047f8:	2802      	cmp	r0, #2
 80047fa:	d9f7      	bls.n	80047ec <HAL_RCC_OscConfig+0x1f4>
 80047fc:	e78c      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004802:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004806:	e7df      	b.n	80047c8 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8004808:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800480c:	4e20      	ldr	r6, [pc, #128]	; (8004890 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800480e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004810:	f7fd fe68 	bl	80024e4 <HAL_GetTick>
 8004814:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004816:	6833      	ldr	r3, [r6, #0]
 8004818:	0759      	lsls	r1, r3, #29
 800481a:	f57f aef9 	bpl.w	8004610 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd fe61 	bl	80024e4 <HAL_GetTick>
 8004822:	1b40      	subs	r0, r0, r5
 8004824:	2802      	cmp	r0, #2
 8004826:	d9f6      	bls.n	8004816 <HAL_RCC_OscConfig+0x21e>
 8004828:	e776      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004830:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e716      	b.n	8004666 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004838:	69e2      	ldr	r2, [r4, #28]
 800483a:	b36a      	cbz	r2, 8004898 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800483c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800483e:	4d14      	ldr	r5, [pc, #80]	; (8004890 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8004840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004844:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004846:	f7fd fe4d 	bl	80024e4 <HAL_GetTick>
 800484a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	05df      	lsls	r7, r3, #23
 8004850:	d511      	bpl.n	8004876 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004852:	f7fd fe5f 	bl	8002514 <HAL_GetREVID>
 8004856:	f241 0303 	movw	r3, #4099	; 0x1003
 800485a:	6a22      	ldr	r2, [r4, #32]
 800485c:	4298      	cmp	r0, r3
 800485e:	d810      	bhi.n	8004882 <HAL_RCC_OscConfig+0x28a>
 8004860:	686b      	ldr	r3, [r5, #4]
 8004862:	2a20      	cmp	r2, #32
 8004864:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004868:	bf0c      	ite	eq
 800486a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800486e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004872:	606b      	str	r3, [r5, #4]
 8004874:	e6f7      	b.n	8004666 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004876:	f7fd fe35 	bl	80024e4 <HAL_GetTick>
 800487a:	1b80      	subs	r0, r0, r6
 800487c:	2802      	cmp	r0, #2
 800487e:	d9e5      	bls.n	800484c <HAL_RCC_OscConfig+0x254>
 8004880:	e74a      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004882:	68eb      	ldr	r3, [r5, #12]
 8004884:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004888:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800488c:	60eb      	str	r3, [r5, #12]
 800488e:	e6ea      	b.n	8004666 <HAL_RCC_OscConfig+0x6e>
 8004890:	58024400 	.word	0x58024400
 8004894:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8004898:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800489a:	4e9f      	ldr	r6, [pc, #636]	; (8004b18 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 800489c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80048a2:	f7fd fe1f 	bl	80024e4 <HAL_GetTick>
 80048a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	05d8      	lsls	r0, r3, #23
 80048ac:	f57f aedb 	bpl.w	8004666 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048b0:	f7fd fe18 	bl	80024e4 <HAL_GetTick>
 80048b4:	1b40      	subs	r0, r0, r5
 80048b6:	2802      	cmp	r0, #2
 80048b8:	d9f6      	bls.n	80048a8 <HAL_RCC_OscConfig+0x2b0>
 80048ba:	e72d      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048bc:	6963      	ldr	r3, [r4, #20]
 80048be:	4d96      	ldr	r5, [pc, #600]	; (8004b18 <HAL_RCC_OscConfig+0x520>)
 80048c0:	b183      	cbz	r3, 80048e4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 80048c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80048ca:	f7fd fe0b 	bl	80024e4 <HAL_GetTick>
 80048ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80048d2:	079b      	lsls	r3, r3, #30
 80048d4:	f53f aecb 	bmi.w	800466e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd fe04 	bl	80024e4 <HAL_GetTick>
 80048dc:	1b80      	subs	r0, r0, r6
 80048de:	2802      	cmp	r0, #2
 80048e0:	d9f6      	bls.n	80048d0 <HAL_RCC_OscConfig+0x2d8>
 80048e2:	e719      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 80048e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80048ec:	f7fd fdfa 	bl	80024e4 <HAL_GetTick>
 80048f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80048f4:	079f      	lsls	r7, r3, #30
 80048f6:	f57f aeba 	bpl.w	800466e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fd fdf3 	bl	80024e4 <HAL_GetTick>
 80048fe:	1b80      	subs	r0, r0, r6
 8004900:	2802      	cmp	r0, #2
 8004902:	d9f6      	bls.n	80048f2 <HAL_RCC_OscConfig+0x2fa>
 8004904:	e708      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004906:	69a3      	ldr	r3, [r4, #24]
 8004908:	4d83      	ldr	r5, [pc, #524]	; (8004b18 <HAL_RCC_OscConfig+0x520>)
 800490a:	b183      	cbz	r3, 800492e <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004912:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004914:	f7fd fde6 	bl	80024e4 <HAL_GetTick>
 8004918:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	0498      	lsls	r0, r3, #18
 800491e:	f53f aeaa 	bmi.w	8004676 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004922:	f7fd fddf 	bl	80024e4 <HAL_GetTick>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	2802      	cmp	r0, #2
 800492a:	d9f6      	bls.n	800491a <HAL_RCC_OscConfig+0x322>
 800492c:	e6f4      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004934:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004936:	f7fd fdd5 	bl	80024e4 <HAL_GetTick>
 800493a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	0499      	lsls	r1, r3, #18
 8004940:	f57f ae99 	bpl.w	8004676 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004944:	f7fd fdce 	bl	80024e4 <HAL_GetTick>
 8004948:	1b80      	subs	r0, r0, r6
 800494a:	2802      	cmp	r0, #2
 800494c:	d9f6      	bls.n	800493c <HAL_RCC_OscConfig+0x344>
 800494e:	e6e3      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fd fdc8 	bl	80024e4 <HAL_GetTick>
 8004954:	1b80      	subs	r0, r0, r6
 8004956:	2864      	cmp	r0, #100	; 0x64
 8004958:	f67f ae98 	bls.w	800468c <HAL_RCC_OscConfig+0x94>
 800495c:	e6dc      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495e:	b9b3      	cbnz	r3, 800498e <HAL_RCC_OscConfig+0x396>
 8004960:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	672b      	str	r3, [r5, #112]	; 0x70
 800496c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800496e:	f023 0304 	bic.w	r3, r3, #4
 8004972:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004974:	f7fd fdb6 	bl	80024e4 <HAL_GetTick>
 8004978:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800497a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800497c:	0798      	lsls	r0, r3, #30
 800497e:	f57f ae9c 	bpl.w	80046ba <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fdaf 	bl	80024e4 <HAL_GetTick>
 8004986:	1b80      	subs	r0, r0, r6
 8004988:	42b8      	cmp	r0, r7
 800498a:	d9f6      	bls.n	800497a <HAL_RCC_OscConfig+0x382>
 800498c:	e6c4      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498e:	2b05      	cmp	r3, #5
 8004990:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004992:	d103      	bne.n	800499c <HAL_RCC_OscConfig+0x3a4>
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	672b      	str	r3, [r5, #112]	; 0x70
 800499a:	e680      	b.n	800469e <HAL_RCC_OscConfig+0xa6>
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	672b      	str	r3, [r5, #112]	; 0x70
 80049a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	e67c      	b.n	80046a4 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fd fd9b 	bl	80024e4 <HAL_GetTick>
 80049ae:	1b40      	subs	r0, r0, r5
 80049b0:	42b8      	cmp	r0, r7
 80049b2:	f67f ae7e 	bls.w	80046b2 <HAL_RCC_OscConfig+0xba>
 80049b6:	e6af      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049b8:	4d57      	ldr	r5, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x520>)
 80049ba:	692b      	ldr	r3, [r5, #16]
 80049bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c0:	2b18      	cmp	r3, #24
 80049c2:	d07a      	beq.n	8004aba <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 80049c4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80049c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049cc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	d167      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 80049d0:	f7fd fd88 	bl	80024e4 <HAL_GetTick>
 80049d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	0199      	lsls	r1, r3, #6
 80049da:	d45b      	bmi.n	8004a94 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80049de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049e0:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80049f0:	62ab      	str	r3, [r5, #40]	; 0x28
 80049f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049f6:	3b01      	subs	r3, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	025b      	lsls	r3, r3, #9
 80049fc:	0412      	lsls	r2, r2, #16
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004a04:	4313      	orrs	r3, r2
 8004a06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a12:	3a01      	subs	r2, #1
 8004a14:	0612      	lsls	r2, r2, #24
 8004a16:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a36:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a3c:	f023 030c 	bic.w	r3, r3, #12
 8004a40:	4313      	orrs	r3, r2
 8004a42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a46:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a48:	f023 0302 	bic.w	r3, r3, #2
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a56:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a66:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a78:	f7fd fd34 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a7c:	4d26      	ldr	r5, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 8004a7e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	f53f ae1d 	bmi.w	80046c2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd fd2c 	bl	80024e4 <HAL_GetTick>
 8004a8c:	1b00      	subs	r0, r0, r4
 8004a8e:	2802      	cmp	r0, #2
 8004a90:	d9f6      	bls.n	8004a80 <HAL_RCC_OscConfig+0x488>
 8004a92:	e641      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fd26 	bl	80024e4 <HAL_GetTick>
 8004a98:	1b80      	subs	r0, r0, r6
 8004a9a:	2802      	cmp	r0, #2
 8004a9c:	d99b      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3de>
 8004a9e:	e63b      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fd20 	bl	80024e4 <HAL_GetTick>
 8004aa4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	019b      	lsls	r3, r3, #6
 8004aaa:	f57f ae0a 	bpl.w	80046c2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fd19 	bl	80024e4 <HAL_GetTick>
 8004ab2:	1b00      	subs	r0, r0, r4
 8004ab4:	2802      	cmp	r0, #2
 8004ab6:	d9f6      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x4ae>
 8004ab8:	e62e      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aba:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004abc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004abe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac0:	f43f ae2b 	beq.w	800471a <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004aca:	4281      	cmp	r1, r0
 8004acc:	f47f ad97 	bne.w	80045fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad0:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ad6:	428a      	cmp	r2, r1
 8004ad8:	f47f ad91 	bne.w	80045fe <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004adc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ade:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8004ae2:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae4:	4291      	cmp	r1, r2
 8004ae6:	f47f ad8a 	bne.w	80045fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004aec:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8004af0:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004af2:	4291      	cmp	r1, r2
 8004af4:	f47f ad83 	bne.w	80045fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004af8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004afa:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8004afe:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b00:	4291      	cmp	r1, r2
 8004b02:	f47f ad7c 	bne.w	80045fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b08:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b0c:	3801      	subs	r0, #1
  return HAL_OK;
 8004b0e:	1a18      	subs	r0, r3, r0
 8004b10:	bf18      	it	ne
 8004b12:	2001      	movne	r0, #1
 8004b14:	e601      	b.n	800471a <HAL_RCC_OscConfig+0x122>
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400

08004b1c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b1c:	4b48      	ldr	r3, [pc, #288]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x124>)
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004b24:	2a10      	cmp	r2, #16
{
 8004b26:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b28:	f000 8086 	beq.w	8004c38 <HAL_RCC_GetSysClockFreq+0x11c>
 8004b2c:	2a18      	cmp	r2, #24
 8004b2e:	d00c      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x2e>
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	f040 8083 	bne.w	8004c3c <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4842      	ldr	r0, [pc, #264]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x128>)
 8004b3a:	f012 0f20 	tst.w	r2, #32
 8004b3e:	d003      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b46:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004b48:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b4c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8004b50:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b54:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8004b5a:	d0f5      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b5c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b60:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b64:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b68:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b6c:	4362      	muls	r2, r4
 8004b6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b76:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b78:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b7c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8004b80:	d04c      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x100>
 8004b82:	2902      	cmp	r1, #2
 8004b84:	d03c      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0xe4>
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d148      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	0692      	lsls	r2, r2, #26
 8004b8e:	d527      	bpl.n	8004be0 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x128>)
 8004b94:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b9a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba0:	ee07 2a10 	vmov	s14, r2
 8004ba4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004ba8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004bac:	ee06 3a90 	vmov	s13, r3
 8004bb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004bc8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bca:	ee07 3a10 	vmov	s14, r3
 8004bce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004bd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bd6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004bda:	ee17 0a90 	vmov	r0, s15
 8004bde:	e7b3      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a10 	vmov	s14, r3
 8004bea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004bf6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bfa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004bfe:	e7dd      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a10 	vmov	s14, r3
 8004c0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c12:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c16:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8004c4c <HAL_RCC_GetSysClockFreq+0x130>
 8004c1a:	e7ee      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a10 	vmov	s14, r3
 8004c26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c32:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004c50 <HAL_RCC_GetSysClockFreq+0x134>
 8004c36:	e7e0      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4806      	ldr	r0, [pc, #24]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c3a:	e785      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8004c3c:	4806      	ldr	r0, [pc, #24]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c3e:	e783      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x2c>
 8004c40:	58024400 	.word	0x58024400
 8004c44:	03d09000 	.word	0x03d09000
 8004c48:	4c742400 	.word	0x4c742400
 8004c4c:	4c371b00 	.word	0x4c371b00
 8004c50:	4a742400 	.word	0x4a742400
 8004c54:	02dc6c00 	.word	0x02dc6c00
 8004c58:	003d0900 	.word	0x003d0900

08004c5c <HAL_RCC_ClockConfig>:
{
 8004c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c60:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004c62:	4604      	mov	r4, r0
 8004c64:	b910      	cbnz	r0, 8004c6c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004c66:	2001      	movs	r0, #1
}
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4a88      	ldr	r2, [pc, #544]	; (8004e90 <HAL_RCC_ClockConfig+0x234>)
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	428b      	cmp	r3, r1
 8004c76:	f0c0 8093 	bcc.w	8004da0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	075f      	lsls	r7, r3, #29
 8004c7e:	f100 809b 	bmi.w	8004db8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c82:	071e      	lsls	r6, r3, #28
 8004c84:	d50b      	bpl.n	8004c9e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c86:	4983      	ldr	r1, [pc, #524]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004c88:	6966      	ldr	r6, [r4, #20]
 8004c8a:	69c8      	ldr	r0, [r1, #28]
 8004c8c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004c90:	4286      	cmp	r6, r0
 8004c92:	d904      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c94:	69ca      	ldr	r2, [r1, #28]
 8004c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c9a:	4332      	orrs	r2, r6
 8004c9c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	06d8      	lsls	r0, r3, #27
 8004ca0:	d50b      	bpl.n	8004cba <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ca2:	497c      	ldr	r1, [pc, #496]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004ca4:	69a6      	ldr	r6, [r4, #24]
 8004ca6:	69c8      	ldr	r0, [r1, #28]
 8004ca8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004cac:	4286      	cmp	r6, r0
 8004cae:	d904      	bls.n	8004cba <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cb0:	69ca      	ldr	r2, [r1, #28]
 8004cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb6:	4332      	orrs	r2, r6
 8004cb8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cba:	0699      	lsls	r1, r3, #26
 8004cbc:	d50b      	bpl.n	8004cd6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cbe:	4975      	ldr	r1, [pc, #468]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004cc0:	69e6      	ldr	r6, [r4, #28]
 8004cc2:	6a08      	ldr	r0, [r1, #32]
 8004cc4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004cc8:	4286      	cmp	r6, r0
 8004cca:	d904      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ccc:	6a0a      	ldr	r2, [r1, #32]
 8004cce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cd2:	4332      	orrs	r2, r6
 8004cd4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd6:	079a      	lsls	r2, r3, #30
 8004cd8:	d50b      	bpl.n	8004cf2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cda:	496e      	ldr	r1, [pc, #440]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004cdc:	68e6      	ldr	r6, [r4, #12]
 8004cde:	6988      	ldr	r0, [r1, #24]
 8004ce0:	f000 000f 	and.w	r0, r0, #15
 8004ce4:	4286      	cmp	r6, r0
 8004ce6:	d904      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	698a      	ldr	r2, [r1, #24]
 8004cea:	f022 020f 	bic.w	r2, r2, #15
 8004cee:	4332      	orrs	r2, r6
 8004cf0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	07df      	lsls	r7, r3, #31
 8004cf4:	d46e      	bmi.n	8004dd4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	079e      	lsls	r6, r3, #30
 8004cfa:	f100 80a1 	bmi.w	8004e40 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfe:	4964      	ldr	r1, [pc, #400]	; (8004e90 <HAL_RCC_ClockConfig+0x234>)
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	f002 020f 	and.w	r2, r2, #15
 8004d06:	42aa      	cmp	r2, r5
 8004d08:	f200 80a8 	bhi.w	8004e5c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d0c:	0758      	lsls	r0, r3, #29
 8004d0e:	f100 80b1 	bmi.w	8004e74 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d12:	0719      	lsls	r1, r3, #28
 8004d14:	d50b      	bpl.n	8004d2e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d16:	495f      	ldr	r1, [pc, #380]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004d18:	6965      	ldr	r5, [r4, #20]
 8004d1a:	69c8      	ldr	r0, [r1, #28]
 8004d1c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004d20:	4285      	cmp	r5, r0
 8004d22:	d204      	bcs.n	8004d2e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d24:	69ca      	ldr	r2, [r1, #28]
 8004d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d2a:	432a      	orrs	r2, r5
 8004d2c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	06da      	lsls	r2, r3, #27
 8004d30:	d50b      	bpl.n	8004d4a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d32:	4958      	ldr	r1, [pc, #352]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004d34:	69a5      	ldr	r5, [r4, #24]
 8004d36:	69c8      	ldr	r0, [r1, #28]
 8004d38:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004d3c:	4285      	cmp	r5, r0
 8004d3e:	d204      	bcs.n	8004d4a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d40:	69ca      	ldr	r2, [r1, #28]
 8004d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d46:	432a      	orrs	r2, r5
 8004d48:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	d50b      	bpl.n	8004d66 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d4e:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004d50:	69e0      	ldr	r0, [r4, #28]
 8004d52:	6a11      	ldr	r1, [r2, #32]
 8004d54:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8004d58:	4288      	cmp	r0, r1
 8004d5a:	d204      	bcs.n	8004d66 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d5c:	6a13      	ldr	r3, [r2, #32]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	4303      	orrs	r3, r0
 8004d64:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d66:	f7ff fed9 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004d6a:	494a      	ldr	r1, [pc, #296]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004d6c:	4a4a      	ldr	r2, [pc, #296]	; (8004e98 <HAL_RCC_ClockConfig+0x23c>)
 8004d6e:	698b      	ldr	r3, [r1, #24]
 8004d70:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d7c:	698b      	ldr	r3, [r1, #24]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	4a45      	ldr	r2, [pc, #276]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	fa20 f303 	lsr.w	r3, r0, r3
 8004d8e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004d90:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_ClockConfig+0x248>)
}
 8004d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	f7fc bcd2 	b.w	8001744 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da0:	6813      	ldr	r3, [r2, #0]
 8004da2:	f023 030f 	bic.w	r3, r3, #15
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	428b      	cmp	r3, r1
 8004db2:	f47f af58 	bne.w	8004c66 <HAL_RCC_ClockConfig+0xa>
 8004db6:	e760      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004db8:	4936      	ldr	r1, [pc, #216]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004dba:	6926      	ldr	r6, [r4, #16]
 8004dbc:	6988      	ldr	r0, [r1, #24]
 8004dbe:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004dc2:	4286      	cmp	r6, r0
 8004dc4:	f67f af5d 	bls.w	8004c82 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dc8:	698a      	ldr	r2, [r1, #24]
 8004dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dce:	4332      	orrs	r2, r6
 8004dd0:	618a      	str	r2, [r1, #24]
 8004dd2:	e756      	b.n	8004c82 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004dd6:	68a1      	ldr	r1, [r4, #8]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de4:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de6:	2a02      	cmp	r2, #2
 8004de8:	d11d      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dee:	f43f af3a 	beq.w	8004c66 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	4e28      	ldr	r6, [pc, #160]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df8:	6933      	ldr	r3, [r6, #16]
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8004e02:	f7fd fb6f 	bl	80024e4 <HAL_GetTick>
 8004e06:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e08:	6933      	ldr	r3, [r6, #16]
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e10:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004e14:	f43f af6f 	beq.w	8004cf6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fd fb64 	bl	80024e4 <HAL_GetTick>
 8004e1c:	1bc0      	subs	r0, r0, r7
 8004e1e:	4540      	cmp	r0, r8
 8004e20:	d9f2      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8004e22:	2003      	movs	r0, #3
 8004e24:	e720      	b.n	8004c68 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e26:	2a03      	cmp	r2, #3
 8004e28:	d102      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e2e:	e7de      	b.n	8004dee <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e30:	2a01      	cmp	r2, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e38:	e7d9      	b.n	8004dee <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	f013 0f04 	tst.w	r3, #4
 8004e3e:	e7d6      	b.n	8004dee <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e40:	4914      	ldr	r1, [pc, #80]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004e42:	68e6      	ldr	r6, [r4, #12]
 8004e44:	6988      	ldr	r0, [r1, #24]
 8004e46:	f000 000f 	and.w	r0, r0, #15
 8004e4a:	4286      	cmp	r6, r0
 8004e4c:	f4bf af57 	bcs.w	8004cfe <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	698a      	ldr	r2, [r1, #24]
 8004e52:	f022 020f 	bic.w	r2, r2, #15
 8004e56:	4332      	orrs	r2, r6
 8004e58:	618a      	str	r2, [r1, #24]
 8004e5a:	e750      	b.n	8004cfe <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5c:	680a      	ldr	r2, [r1, #0]
 8004e5e:	f022 020f 	bic.w	r2, r2, #15
 8004e62:	432a      	orrs	r2, r5
 8004e64:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	680a      	ldr	r2, [r1, #0]
 8004e68:	f002 020f 	and.w	r2, r2, #15
 8004e6c:	42aa      	cmp	r2, r5
 8004e6e:	f47f aefa 	bne.w	8004c66 <HAL_RCC_ClockConfig+0xa>
 8004e72:	e74b      	b.n	8004d0c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <HAL_RCC_ClockConfig+0x238>)
 8004e76:	6925      	ldr	r5, [r4, #16]
 8004e78:	6988      	ldr	r0, [r1, #24]
 8004e7a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004e7e:	4285      	cmp	r5, r0
 8004e80:	f4bf af47 	bcs.w	8004d12 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e84:	698a      	ldr	r2, [r1, #24]
 8004e86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e8a:	432a      	orrs	r2, r5
 8004e8c:	618a      	str	r2, [r1, #24]
 8004e8e:	e740      	b.n	8004d12 <HAL_RCC_ClockConfig+0xb6>
 8004e90:	52002000 	.word	0x52002000
 8004e94:	58024400 	.word	0x58024400
 8004e98:	0800ba6f 	.word	0x0800ba6f
 8004e9c:	24000004 	.word	0x24000004
 8004ea0:	24000000 	.word	0x24000000
 8004ea4:	2400000c 	.word	0x2400000c

08004ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	; (8004edc <HAL_RCC_GetHCLKFreq+0x34>)
 8004eac:	f7ff fe36 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004eb0:	490b      	ldr	r1, [pc, #44]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x38>)
 8004eb2:	69a3      	ldr	r3, [r4, #24]
 8004eb4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004eb8:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eba:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ebc:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ec0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ec4:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ec8:	5ccb      	ldrb	r3, [r1, r3]
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	fa22 f003 	lsr.w	r0, r2, r3
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004ed4:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed6:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x40>)
 8004ed8:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004eda:	bd10      	pop	{r4, pc}
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	0800ba6f 	.word	0x0800ba6f
 8004ee4:	24000004 	.word	0x24000004
 8004ee8:	24000000 	.word	0x24000000

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004eee:	f7ff ffdb 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ef4:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004efc:	5cd3      	ldrb	r3, [r2, r3]
 8004efe:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f02:	40d8      	lsrs	r0, r3
 8004f04:	bd08      	pop	{r3, pc}
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	0800ba6f 	.word	0x0800ba6f

08004f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f12:	f7ff ffc9 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f26:	40d8      	lsrs	r0, r3
 8004f28:	bd08      	pop	{r3, pc}
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	0800ba6f 	.word	0x0800ba6f

08004f34 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004f34:	233f      	movs	r3, #63	; 0x3f
 8004f36:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCC_GetClockConfig+0x4c>)
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	f002 0207 	and.w	r2, r2, #7
 8004f40:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004f48:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	f002 020f 	and.w	r2, r2, #15
 8004f50:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f58:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f60:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004f68:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f70:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_GetClockConfig+0x50>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	600b      	str	r3, [r1, #0]
}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
 8004f84:	52002000 	.word	0x52002000

08004f88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f8a:	4c3a      	ldr	r4, [pc, #232]	; (8005074 <RCCEx_PLL2_Config+0xec>)
{
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d069      	beq.n	800506e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa2:	f7fd fa9f 	bl	80024e4 <HAL_GetTick>
 8004fa6:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	011a      	lsls	r2, r3, #4
 8004fac:	d44b      	bmi.n	8005046 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fb0:	6832      	ldr	r2, [r6, #0]
 8004fb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fb6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004fba:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fbc:	68b3      	ldr	r3, [r6, #8]
 8004fbe:	68f2      	ldr	r2, [r6, #12]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	3a01      	subs	r2, #1
 8004fc4:	025b      	lsls	r3, r3, #9
 8004fc6:	0412      	lsls	r2, r2, #16
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	6872      	ldr	r2, [r6, #4]
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	6932      	ldr	r2, [r6, #16]
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	0612      	lsls	r2, r2, #24
 8004fe0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fea:	6972      	ldr	r2, [r6, #20]
 8004fec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ff6:	69b2      	ldr	r2, [r6, #24]
 8004ff8:	f023 0320 	bic.w	r3, r3, #32
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005002:	f023 0310 	bic.w	r3, r3, #16
 8005006:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800500a:	69f2      	ldr	r2, [r6, #28]
 800500c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005010:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005014:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005018:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800501a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800501c:	f043 0310 	orr.w	r3, r3, #16
 8005020:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005024:	b9b5      	cbnz	r5, 8005054 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800502a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800502c:	4c11      	ldr	r4, [pc, #68]	; (8005074 <RCCEx_PLL2_Config+0xec>)
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005034:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005036:	f7fd fa55 	bl	80024e4 <HAL_GetTick>
 800503a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	d50f      	bpl.n	8005062 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8005042:	2000      	movs	r0, #0
 8005044:	e005      	b.n	8005052 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005046:	f7fd fa4d 	bl	80024e4 <HAL_GetTick>
 800504a:	1bc0      	subs	r0, r0, r7
 800504c:	2802      	cmp	r0, #2
 800504e:	d9ab      	bls.n	8004fa8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8005050:	2003      	movs	r0, #3
}
 8005052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8005054:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005056:	bf0c      	ite	eq
 8005058:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800505c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005060:	e7e3      	b.n	800502a <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005062:	f7fd fa3f 	bl	80024e4 <HAL_GetTick>
 8005066:	1b40      	subs	r0, r0, r5
 8005068:	2802      	cmp	r0, #2
 800506a:	d9e7      	bls.n	800503c <RCCEx_PLL2_Config+0xb4>
 800506c:	e7f0      	b.n	8005050 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800506e:	2001      	movs	r0, #1
 8005070:	e7ef      	b.n	8005052 <RCCEx_PLL2_Config+0xca>
 8005072:	bf00      	nop
 8005074:	58024400 	.word	0x58024400

08005078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800507a:	4c3a      	ldr	r4, [pc, #232]	; (8005164 <RCCEx_PLL3_Config+0xec>)
{
 800507c:	4606      	mov	r6, r0
 800507e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b03      	cmp	r3, #3
 8005088:	d069      	beq.n	800515e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005090:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005092:	f7fd fa27 	bl	80024e4 <HAL_GetTick>
 8005096:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	d44b      	bmi.n	8005136 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800509e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050a0:	6832      	ldr	r2, [r6, #0]
 80050a2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80050a6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80050aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ac:	68b3      	ldr	r3, [r6, #8]
 80050ae:	68f2      	ldr	r2, [r6, #12]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	3a01      	subs	r2, #1
 80050b4:	025b      	lsls	r3, r3, #9
 80050b6:	0412      	lsls	r2, r2, #16
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80050be:	4313      	orrs	r3, r2
 80050c0:	6872      	ldr	r2, [r6, #4]
 80050c2:	3a01      	subs	r2, #1
 80050c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6932      	ldr	r2, [r6, #16]
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0612      	lsls	r2, r2, #24
 80050d0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80050d4:	4313      	orrs	r3, r2
 80050d6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050da:	6972      	ldr	r2, [r6, #20]
 80050dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050e0:	4313      	orrs	r3, r2
 80050e2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050e6:	69b2      	ldr	r2, [r6, #24]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ec:	4313      	orrs	r3, r2
 80050ee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050fa:	69f2      	ldr	r2, [r6, #28]
 80050fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005100:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005104:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005108:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800510a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005114:	b9b5      	cbnz	r5, 8005144 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005116:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800511a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800511c:	4c11      	ldr	r4, [pc, #68]	; (8005164 <RCCEx_PLL3_Config+0xec>)
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005126:	f7fd f9dd 	bl	80024e4 <HAL_GetTick>
 800512a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	d50f      	bpl.n	8005152 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8005132:	2000      	movs	r0, #0
 8005134:	e005      	b.n	8005142 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005136:	f7fd f9d5 	bl	80024e4 <HAL_GetTick>
 800513a:	1bc0      	subs	r0, r0, r7
 800513c:	2802      	cmp	r0, #2
 800513e:	d9ab      	bls.n	8005098 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8005140:	2003      	movs	r0, #3
}
 8005142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8005144:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005146:	bf0c      	ite	eq
 8005148:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800514c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005150:	e7e3      	b.n	800511a <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005152:	f7fd f9c7 	bl	80024e4 <HAL_GetTick>
 8005156:	1b40      	subs	r0, r0, r5
 8005158:	2802      	cmp	r0, #2
 800515a:	d9e7      	bls.n	800512c <RCCEx_PLL3_Config+0xb4>
 800515c:	e7f0      	b.n	8005140 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800515e:	2001      	movs	r0, #1
 8005160:	e7ef      	b.n	8005142 <RCCEx_PLL3_Config+0xca>
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400

08005168 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800516c:	6806      	ldr	r6, [r0, #0]
{
 800516e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005170:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8005174:	d009      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005176:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517c:	d02e      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800517e:	d813      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005180:	b1f3      	cbz	r3, 80051c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005186:	d021      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005188:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	05dc      	lsls	r4, r3, #23
 800518e:	f140 80ea 	bpl.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005192:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005194:	2b04      	cmp	r3, #4
 8005196:	f200 80e5 	bhi.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800519a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800519e:	0024      	.short	0x0024
 80051a0:	00dd002b 	.word	0x00dd002b
 80051a4:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 80051a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051ac:	d1ec      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051ae:	4aa6      	ldr	r2, [pc, #664]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051b0:	2600      	movs	r6, #0
 80051b2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80051b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80051b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6513      	str	r3, [r2, #80]	; 0x50
 80051be:	e7e4      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4aa1      	ldr	r2, [pc, #644]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80051ca:	e7f0      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051cc:	2102      	movs	r1, #2
 80051ce:	3004      	adds	r0, #4
 80051d0:	f7ff feda 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d1d7      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22>
 80051da:	e7e8      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051dc:	2102      	movs	r1, #2
 80051de:	3024      	adds	r0, #36	; 0x24
 80051e0:	f7ff ff4a 	bl	8005078 <RCCEx_PLL3_Config>
 80051e4:	e7f6      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e6:	4a98      	ldr	r2, [pc, #608]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80051f0:	4634      	mov	r4, r6
 80051f2:	e004      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f4:	2100      	movs	r1, #0
 80051f6:	1d28      	adds	r0, r5, #4
 80051f8:	f7ff fec6 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051fc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80051fe:	2c00      	cmp	r4, #0
 8005200:	f040 80b3 	bne.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005204:	4a90      	ldr	r2, [pc, #576]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005206:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005208:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800520a:	f023 0307 	bic.w	r3, r3, #7
 800520e:	430b      	orrs	r3, r1
 8005210:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	0598      	lsls	r0, r3, #22
 8005216:	d50d      	bpl.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005218:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	f000 80c2 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8005220:	f200 80a5 	bhi.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80b1 	beq.w	800538c <HAL_RCCEx_PeriphCLKConfig+0x224>
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	f000 80b4 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005230:	2601      	movs	r6, #1
 8005232:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	0559      	lsls	r1, r3, #21
 8005238:	d510      	bpl.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 800523a:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800523e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005242:	f000 80d4 	beq.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005246:	f200 80b5 	bhi.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80c3 	beq.w	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005254:	f000 80c5 	beq.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005258:	2601      	movs	r6, #1
 800525a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	051a      	lsls	r2, r3, #20
 8005260:	d510      	bpl.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005262:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8005266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800526a:	f000 80e5 	beq.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800526e:	f200 80c6 	bhi.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80d4 	beq.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800527c:	f000 80d6 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005280:	2601      	movs	r6, #1
 8005282:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	019b      	lsls	r3, r3, #6
 8005288:	d50d      	bpl.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 800528a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800528c:	2b20      	cmp	r3, #32
 800528e:	f000 80ef 	beq.w	8005470 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005292:	f200 80db 	bhi.w	800544c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80db 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 800529c:	2b10      	cmp	r3, #16
 800529e:	f000 80e1 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80052a2:	2601      	movs	r6, #1
 80052a4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	04df      	lsls	r7, r3, #19
 80052aa:	d50f      	bpl.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 80052ac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	f000 8101 	beq.w	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80052b6:	f200 80e3 	bhi.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80f0 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	f000 80f2 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 80052c8:	2601      	movs	r6, #1
 80052ca:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	0498      	lsls	r0, r3, #18
 80052d0:	d50f      	bpl.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 80052d2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80052d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d8:	f000 810e 	beq.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80052dc:	f200 80f4 	bhi.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80fa 	beq.w	80054da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ea:	f000 80ff 	beq.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x384>
 80052ee:	2601      	movs	r6, #1
 80052f0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	0459      	lsls	r1, r3, #17
 80052f6:	d510      	bpl.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 80052f8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80052fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005300:	f000 811b 	beq.w	800553a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005304:	f200 8100 	bhi.w	8005508 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8106 	beq.w	800551a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800530e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005312:	f000 810c 	beq.w	800552e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8005316:	2601      	movs	r6, #1
 8005318:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	041a      	lsls	r2, r3, #16
 800531e:	d50d      	bpl.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8005320:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8005322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005326:	f000 8110 	beq.w	800554a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800532a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532e:	f000 811a 	beq.w	8005566 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 810e 	beq.w	8005554 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005338:	2601      	movs	r6, #1
 800533a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	f140 8127 	bpl.w	8005592 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8005344:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005346:	2b03      	cmp	r3, #3
 8005348:	f200 8167 	bhi.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800534c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005350:	01130118 	.word	0x01130118
 8005354:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005358:	2100      	movs	r1, #0
 800535a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800535e:	f7ff fe8b 	bl	8005078 <RCCEx_PLL3_Config>
 8005362:	e74b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005364:	2601      	movs	r6, #1
 8005366:	4634      	mov	r4, r6
 8005368:	e753      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800536a:	4626      	mov	r6, r4
 800536c:	e751      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 800536e:	2bc0      	cmp	r3, #192	; 0xc0
 8005370:	d003      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	f47f af5b 	bne.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 800537a:	b9cc      	cbnz	r4, 80053b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800537c:	4a32      	ldr	r2, [pc, #200]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800537e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8005380:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005382:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8005386:	430b      	orrs	r3, r1
 8005388:	6513      	str	r3, [r2, #80]	; 0x50
 800538a:	e753      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4a2e      	ldr	r2, [pc, #184]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800538e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005394:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8005396:	e7f0      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005398:	2100      	movs	r1, #0
 800539a:	1d28      	adds	r0, r5, #4
 800539c:	f7ff fdf4 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053a0:	4604      	mov	r4, r0
      break;
 80053a2:	e7ea      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053a4:	2100      	movs	r1, #0
 80053a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80053aa:	f7ff fe65 	bl	8005078 <RCCEx_PLL3_Config>
 80053ae:	e7f7      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80053b0:	4626      	mov	r6, r4
 80053b2:	e73f      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 80053b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80053ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053be:	f47f af4b 	bne.w	8005258 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 80053c2:	b9d4      	cbnz	r4, 80053fa <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80053c6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80053ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80053cc:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6593      	str	r3, [r2, #88]	; 0x58
 80053d4:	e742      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80053d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80053e0:	e7ef      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e2:	2100      	movs	r1, #0
 80053e4:	1d28      	adds	r0, r5, #4
 80053e6:	f7ff fdcf 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053ea:	4604      	mov	r4, r0
      break;
 80053ec:	e7e9      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053ee:	2100      	movs	r1, #0
 80053f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80053f4:	f7ff fe40 	bl	8005078 <RCCEx_PLL3_Config>
 80053f8:	e7f7      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x282>
 80053fa:	4626      	mov	r6, r4
 80053fc:	e72e      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80053fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005402:	d003      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8005404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005408:	f47f af3a 	bne.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 800540c:	b9d4      	cbnz	r4, 8005444 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800540e:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005410:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8005414:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800541a:	430b      	orrs	r3, r1
 800541c:	6593      	str	r3, [r2, #88]	; 0x58
 800541e:	e731      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005420:	4a09      	ldr	r2, [pc, #36]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005422:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800542a:	e7ef      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800542c:	2100      	movs	r1, #0
 800542e:	1d28      	adds	r0, r5, #4
 8005430:	f7ff fdaa 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005434:	4604      	mov	r4, r0
      break;
 8005436:	e7e9      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005438:	2100      	movs	r1, #0
 800543a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800543e:	f7ff fe1b 	bl	8005078 <RCCEx_PLL3_Config>
 8005442:	e7f7      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005444:	4626      	mov	r6, r4
 8005446:	e71d      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005448:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	f47f af28 	bne.w	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8005452:	b99c      	cbnz	r4, 800547c <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005454:	4a9d      	ldr	r2, [pc, #628]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005456:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005458:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800545a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800545e:	430b      	orrs	r3, r1
 8005460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005462:	e720      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005464:	4a99      	ldr	r2, [pc, #612]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005466:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800546e:	e7f0      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005470:	2102      	movs	r1, #2
 8005472:	1d28      	adds	r0, r5, #4
 8005474:	f7ff fd88 	bl	8004f88 <RCCEx_PLL2_Config>
 8005478:	4604      	mov	r4, r0
      break;
 800547a:	e7ea      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 800547c:	4626      	mov	r6, r4
 800547e:	e712      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8005480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800548a:	f47f af1d 	bne.w	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 800548e:	b9cc      	cbnz	r4, 80054c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005490:	4a8e      	ldr	r2, [pc, #568]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005492:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8005494:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	430b      	orrs	r3, r1
 800549c:	6513      	str	r3, [r2, #80]	; 0x50
 800549e:	e715      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a0:	4a8a      	ldr	r2, [pc, #552]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80054a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80054aa:	e7f0      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054ac:	2100      	movs	r1, #0
 80054ae:	1d28      	adds	r0, r5, #4
 80054b0:	f7ff fd6a 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054b4:	4604      	mov	r4, r0
      break;
 80054b6:	e7ea      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054b8:	2100      	movs	r1, #0
 80054ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80054be:	f7ff fddb 	bl	8005078 <RCCEx_PLL3_Config>
 80054c2:	e7f7      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80054c4:	4626      	mov	r6, r4
 80054c6:	e701      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 80054c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054cc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80054d0:	d003      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80054d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d6:	f47f af0a 	bne.w	80052ee <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 80054da:	b99c      	cbnz	r4, 8005504 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054dc:	4a7b      	ldr	r2, [pc, #492]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80054de:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80054e0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80054e2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80054e6:	430b      	orrs	r3, r1
 80054e8:	6513      	str	r3, [r2, #80]	; 0x50
 80054ea:	e702      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054ec:	2101      	movs	r1, #1
 80054ee:	1d28      	adds	r0, r5, #4
 80054f0:	f7ff fd4a 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054f4:	4604      	mov	r4, r0
      break;
 80054f6:	e7f0      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054f8:	2101      	movs	r1, #1
 80054fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80054fe:	f7ff fdbb 	bl	8005078 <RCCEx_PLL3_Config>
 8005502:	e7f7      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8005504:	4626      	mov	r6, r4
 8005506:	e6f4      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8005508:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800550c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005510:	d003      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005516:	f47f aefe 	bne.w	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 800551a:	b9a4      	cbnz	r4, 8005546 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800551c:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800551e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8005522:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005524:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005528:	430b      	orrs	r3, r1
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	e6f5      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800552e:	2101      	movs	r1, #1
 8005530:	1d28      	adds	r0, r5, #4
 8005532:	f7ff fd29 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005536:	4604      	mov	r4, r0
      break;
 8005538:	e7ef      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800553a:	2101      	movs	r1, #1
 800553c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005540:	f7ff fd9a 	bl	8005078 <RCCEx_PLL3_Config>
 8005544:	e7f7      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005546:	4626      	mov	r6, r4
 8005548:	e6e7      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800554c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800554e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005554:	b96c      	cbnz	r4, 8005572 <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005556:	4a5d      	ldr	r2, [pc, #372]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005558:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800555a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800555c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005560:	430b      	orrs	r3, r1
 8005562:	6513      	str	r3, [r2, #80]	; 0x50
 8005564:	e6ea      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005566:	2101      	movs	r1, #1
 8005568:	1d28      	adds	r0, r5, #4
 800556a:	f7ff fd0d 	bl	8004f88 <RCCEx_PLL2_Config>
 800556e:	4604      	mov	r4, r0
      break;
 8005570:	e7f0      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005572:	4626      	mov	r6, r4
 8005574:	e6e2      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005576:	4a55      	ldr	r2, [pc, #340]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800557a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005580:	2c00      	cmp	r4, #0
 8005582:	d14d      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005584:	4a51      	ldr	r2, [pc, #324]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005586:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8005588:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	430b      	orrs	r3, r1
 8005590:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	025f      	lsls	r7, r3, #9
 8005596:	d54d      	bpl.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005598:	4f4d      	ldr	r7, [pc, #308]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80055a2:	f7fc ff9f 	bl	80024e4 <HAL_GetTick>
 80055a6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	05d8      	lsls	r0, r3, #23
 80055ac:	d53a      	bpl.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 80055ae:	2c00      	cmp	r4, #0
 80055b0:	d16c      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055b2:	4b46      	ldr	r3, [pc, #280]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80055b4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80055b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ba:	4042      	eors	r2, r0
 80055bc:	f412 7f40 	tst.w	r2, #768	; 0x300
 80055c0:	d00b      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80055ce:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055d2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80055d6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80055d8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055da:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80055de:	d040      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 80055e4:	4939      	ldr	r1, [pc, #228]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80055e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80055ea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80055ee:	d149      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80055f0:	6908      	ldr	r0, [r1, #16]
 80055f2:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80055f4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80055f8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80055fc:	4302      	orrs	r2, r0
 80055fe:	610a      	str	r2, [r1, #16]
 8005600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005604:	4a31      	ldr	r2, [pc, #196]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005606:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005608:	430b      	orrs	r3, r1
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	e012      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800560e:	2102      	movs	r1, #2
 8005610:	1d28      	adds	r0, r5, #4
 8005612:	f7ff fcb9 	bl	8004f88 <RCCEx_PLL2_Config>
 8005616:	4604      	mov	r4, r0
      break;
 8005618:	e7b2      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 800561a:	2601      	movs	r6, #1
 800561c:	4634      	mov	r4, r6
 800561e:	e7b8      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8005620:	4626      	mov	r6, r4
 8005622:	e7b6      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7fc ff5e 	bl	80024e4 <HAL_GetTick>
 8005628:	eba0 0008 	sub.w	r0, r0, r8
 800562c:	2864      	cmp	r0, #100	; 0x64
 800562e:	d9bb      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8005630:	2603      	movs	r6, #3
 8005632:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	07da      	lsls	r2, r3, #31
 8005638:	d508      	bpl.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800563a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800563c:	2b10      	cmp	r3, #16
 800563e:	d03c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x552>
 8005640:	d826      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005642:	b35b      	cbz	r3, 800569c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d032      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x546>
 8005648:	2601      	movs	r6, #1
 800564a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	079b      	lsls	r3, r3, #30
 8005650:	d54f      	bpl.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005652:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005654:	2b05      	cmp	r3, #5
 8005656:	d862      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8005658:	e8df f003 	tbb	[pc, r3]
 800565c:	435b3e43 	.word	0x435b3e43
 8005660:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 8005662:	f7fc ff3f 	bl	80024e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005666:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 800566a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005670:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005674:	0799      	lsls	r1, r3, #30
 8005676:	d4b3      	bmi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fc ff34 	bl	80024e4 <HAL_GetTick>
 800567c:	1bc0      	subs	r0, r0, r7
 800567e:	4548      	cmp	r0, r9
 8005680:	d9f6      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005682:	e7d5      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005684:	690a      	ldr	r2, [r1, #16]
 8005686:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800568a:	e7b8      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x496>
 800568c:	4626      	mov	r6, r4
 800568e:	e7d1      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005690:	f023 0208 	bic.w	r2, r3, #8
 8005694:	2a20      	cmp	r2, #32
 8005696:	d001      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005698:	2b18      	cmp	r3, #24
 800569a:	d1d5      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 800569c:	b99c      	cbnz	r4, 80056c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800569e:	4a0b      	ldr	r2, [pc, #44]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80056a0:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80056a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80056a4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6553      	str	r3, [r2, #84]	; 0x54
 80056ac:	e7ce      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056ae:	2101      	movs	r1, #1
 80056b0:	1d28      	adds	r0, r5, #4
 80056b2:	f7ff fc69 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056b6:	4604      	mov	r4, r0
      break;
 80056b8:	e7f0      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ba:	2101      	movs	r1, #1
 80056bc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80056c0:	f7ff fcda 	bl	8005078 <RCCEx_PLL3_Config>
 80056c4:	e7f7      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80056c6:	4626      	mov	r6, r4
 80056c8:	e7c0      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
 80056d0:	58024800 	.word	0x58024800
 80056d4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056d8:	2101      	movs	r1, #1
 80056da:	1d28      	adds	r0, r5, #4
 80056dc:	f7ff fc54 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056e0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80056e2:	b9fc      	cbnz	r4, 8005724 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056e4:	4aa6      	ldr	r2, [pc, #664]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80056e6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80056e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	075f      	lsls	r7, r3, #29
 80056f6:	d527      	bpl.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056f8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80056fc:	2b05      	cmp	r3, #5
 80056fe:	f200 8139 	bhi.w	8005974 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005702:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005706:	0016      	.short	0x0016
 8005708:	01310011 	.word	0x01310011
 800570c:	00160016 	.word	0x00160016
 8005710:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005712:	2101      	movs	r1, #1
 8005714:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005718:	f7ff fcae 	bl	8005078 <RCCEx_PLL3_Config>
 800571c:	e7e0      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800571e:	2601      	movs	r6, #1
 8005720:	4634      	mov	r4, r6
 8005722:	e7e6      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005724:	4626      	mov	r6, r4
 8005726:	e7e4      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005728:	2101      	movs	r1, #1
 800572a:	1d28      	adds	r0, r5, #4
 800572c:	f7ff fc2c 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005730:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8005732:	2c00      	cmp	r4, #0
 8005734:	f040 8121 	bne.w	800597a <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005738:	4a91      	ldr	r2, [pc, #580]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800573a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800573e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	430b      	orrs	r3, r1
 8005746:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	0698      	lsls	r0, r3, #26
 800574c:	d510      	bpl.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800574e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005756:	f000 812e 	beq.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800575a:	f200 8113 	bhi.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8119 	beq.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005768:	f000 811f 	beq.w	80059aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800576c:	2601      	movs	r6, #1
 800576e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	0659      	lsls	r1, r3, #25
 8005774:	d510      	bpl.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005776:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800577a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577e:	f000 813b 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8005782:	f200 8120 	bhi.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8126 	beq.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	f000 812c 	beq.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x884>
 8005794:	2601      	movs	r6, #1
 8005796:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	061a      	lsls	r2, r3, #24
 800579c:	d510      	bpl.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800579e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80057a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a6:	f000 8148 	beq.w	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 80057aa:	f200 812d 	bhi.w	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8133 	beq.w	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b8:	f000 8139 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80057bc:	2601      	movs	r6, #1
 80057be:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	071b      	lsls	r3, r3, #28
 80057c4:	d514      	bpl.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80057c6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057d0:	2102      	movs	r1, #2
 80057d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80057d6:	f7ff fc4f 	bl	8005078 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80057da:	2800      	cmp	r0, #0
 80057dc:	bf18      	it	ne
 80057de:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057e0:	4a67      	ldr	r2, [pc, #412]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80057e2:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80057e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	06df      	lsls	r7, r3, #27
 80057f4:	d514      	bpl.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fe:	d107      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005800:	2102      	movs	r1, #2
 8005802:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005806:	f7ff fc37 	bl	8005078 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800580a:	2800      	cmp	r0, #0
 800580c:	bf18      	it	ne
 800580e:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005810:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005812:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8005816:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581c:	430b      	orrs	r3, r1
 800581e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	0318      	lsls	r0, r3, #12
 8005824:	d51a      	bpl.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8005826:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800582a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800582e:	f000 810c 	beq.w	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005832:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005836:	d006      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8005838:	2900      	cmp	r1, #0
 800583a:	f040 810c 	bne.w	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800583e:	1d28      	adds	r0, r5, #4
 8005840:	f7ff fba2 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005844:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8005846:	2c00      	cmp	r4, #0
 8005848:	f040 8108 	bne.w	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800584c:	4a4c      	ldr	r2, [pc, #304]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800584e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8005852:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005854:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005858:	430b      	orrs	r3, r1
 800585a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	0359      	lsls	r1, r3, #13
 8005860:	d51c      	bpl.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 8005862:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8005866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586a:	f000 80f9 	beq.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800586e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005872:	d008      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8005874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005878:	f040 80f9 	bne.w	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587c:	4a40      	ldr	r2, [pc, #256]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800587e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005884:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005886:	2c00      	cmp	r4, #0
 8005888:	f040 80f4 	bne.w	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800588c:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800588e:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8005892:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005898:	430b      	orrs	r3, r1
 800589a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	03da      	lsls	r2, r3, #15
 80058a0:	d509      	bpl.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 80058a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80e7 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ae:	f000 80f1 	beq.w	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80058b2:	2601      	movs	r6, #1
 80058b4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	d507      	bpl.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058bc:	2102      	movs	r1, #2
 80058be:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80058c2:	f7ff fbd9 	bl	8005078 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80058c6:	2800      	cmp	r0, #0
 80058c8:	bf18      	it	ne
 80058ca:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	039f      	lsls	r7, r3, #14
 80058d0:	d50a      	bpl.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 80058d2:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80058d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80058d8:	f000 80f2 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x958>
 80058dc:	f200 80e2 	bhi.w	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 80058e0:	2900      	cmp	r1, #0
 80058e2:	f000 80e5 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80058e6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058e8:	02dc      	lsls	r4, r3, #11
 80058ea:	d506      	bpl.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058ec:	4924      	ldr	r1, [pc, #144]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80058ee:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80058f0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80058f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80058f6:	4302      	orrs	r2, r0
 80058f8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058fa:	00d8      	lsls	r0, r3, #3
 80058fc:	d507      	bpl.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058fe:	4920      	ldr	r1, [pc, #128]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005900:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8005904:	690a      	ldr	r2, [r1, #16]
 8005906:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800590a:	4302      	orrs	r2, r0
 800590c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800590e:	0299      	lsls	r1, r3, #10
 8005910:	d506      	bpl.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005912:	491b      	ldr	r1, [pc, #108]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005914:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8005916:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005918:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800591c:	4302      	orrs	r2, r0
 800591e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005920:	005a      	lsls	r2, r3, #1
 8005922:	d509      	bpl.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005926:	6911      	ldr	r1, [r2, #16]
 8005928:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800592c:	6111      	str	r1, [r2, #16]
 800592e:	6911      	ldr	r1, [r2, #16]
 8005930:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8005934:	4301      	orrs	r1, r0
 8005936:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005938:	2b00      	cmp	r3, #0
 800593a:	da06      	bge.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800593c:	4910      	ldr	r1, [pc, #64]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800593e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8005940:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005942:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005946:	4302      	orrs	r2, r0
 8005948:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	d507      	bpl.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800594e:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005950:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8005954:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005956:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800595a:	430b      	orrs	r3, r1
 800595c:	6553      	str	r3, [r2, #84]	; 0x54
}
 800595e:	1e30      	subs	r0, r6, #0
 8005960:	bf18      	it	ne
 8005962:	2001      	movne	r0, #1
 8005964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005968:	2101      	movs	r1, #1
 800596a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800596e:	f7ff fb83 	bl	8005078 <RCCEx_PLL3_Config>
 8005972:	e6dd      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005974:	2601      	movs	r6, #1
 8005976:	4634      	mov	r4, r6
 8005978:	e6e6      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800597a:	4626      	mov	r6, r4
 800597c:	e6e4      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800597e:	bf00      	nop
 8005980:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005984:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005988:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800598c:	d003      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800598e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005992:	f47f aeeb 	bne.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8005996:	b9a4      	cbnz	r4, 80059c2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005998:	4a4d      	ldr	r2, [pc, #308]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800599a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800599e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80059a0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6553      	str	r3, [r2, #84]	; 0x54
 80059a8:	e6e2      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059aa:	2100      	movs	r1, #0
 80059ac:	1d28      	adds	r0, r5, #4
 80059ae:	f7ff faeb 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059b2:	4604      	mov	r4, r0
      break;
 80059b4:	e7ef      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059b6:	2102      	movs	r1, #2
 80059b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80059bc:	f7ff fb5c 	bl	8005078 <RCCEx_PLL3_Config>
 80059c0:	e7f7      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 80059c2:	4626      	mov	r6, r4
 80059c4:	e6d4      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80059c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80059ce:	d003      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x870>
 80059d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d4:	f47f aede 	bne.w	8005794 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 80059d8:	b9a4      	cbnz	r4, 8005a04 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80059dc:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80059e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80059e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6593      	str	r3, [r2, #88]	; 0x58
 80059ea:	e6d5      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ec:	2100      	movs	r1, #0
 80059ee:	1d28      	adds	r0, r5, #4
 80059f0:	f7ff faca 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059f4:	4604      	mov	r4, r0
      break;
 80059f6:	e7ef      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059f8:	2102      	movs	r1, #2
 80059fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80059fe:	f7ff fb3b 	bl	8005078 <RCCEx_PLL3_Config>
 8005a02:	e7f7      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8005a04:	4626      	mov	r6, r4
 8005a06:	e6c7      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a10:	d003      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8005a12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a16:	f47f aed1 	bne.w	80057bc <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 8005a1a:	b9a4      	cbnz	r4, 8005a46 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8005a1e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8005a22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005a24:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2c:	e6c8      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	1d28      	adds	r0, r5, #4
 8005a32:	f7ff faa9 	bl	8004f88 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a36:	4604      	mov	r4, r0
      break;
 8005a38:	e7ef      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005a40:	f7ff fb1a 	bl	8005078 <RCCEx_PLL3_Config>
 8005a44:	e7f7      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8005a46:	4626      	mov	r6, r4
 8005a48:	e6ba      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005a50:	f7ff fb12 	bl	8005078 <RCCEx_PLL3_Config>
 8005a54:	e6f6      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 8005a56:	2601      	movs	r6, #1
 8005a58:	4634      	mov	r4, r6
 8005a5a:	e6ff      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8005a5c:	4626      	mov	r6, r4
 8005a5e:	e6fd      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a60:	2101      	movs	r1, #1
 8005a62:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005a66:	f7ff fb07 	bl	8005078 <RCCEx_PLL3_Config>
 8005a6a:	4604      	mov	r4, r0
      break;
 8005a6c:	e70b      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 8005a6e:	2601      	movs	r6, #1
 8005a70:	4634      	mov	r4, r6
 8005a72:	e713      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8005a74:	4626      	mov	r6, r4
 8005a76:	e711      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8005a7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005a82:	b96c      	cbnz	r4, 8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8005a86:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005a88:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a92:	e710      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a94:	2102      	movs	r1, #2
 8005a96:	1d28      	adds	r0, r5, #4
 8005a98:	f7ff fa76 	bl	8004f88 <RCCEx_PLL2_Config>
 8005a9c:	4604      	mov	r4, r0
      break;
 8005a9e:	e7f0      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8005aa0:	4626      	mov	r6, r4
 8005aa2:	e708      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 8005aa4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005aa8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005aac:	f47f af1b 	bne.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 8005ab0:	b964      	cbnz	r4, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab2:	4807      	ldr	r0, [pc, #28]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8005ab4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005ab6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005aba:	430a      	orrs	r2, r1
 8005abc:	6542      	str	r2, [r0, #84]	; 0x54
 8005abe:	e713      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac0:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8005ac2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005ac4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ac8:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8005aca:	e7f1      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005acc:	4626      	mov	r6, r4
 8005ace:	e70b      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8005ad0:	58024400 	.word	0x58024400

08005ad4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005ad4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ad6:	f7ff f9e7 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005adc:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005ae4:	5cd3      	ldrb	r3, [r2, r3]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
}
 8005aea:	40d8      	lsrs	r0, r3
 8005aec:	bd08      	pop	{r3, pc}
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	0800ba6f 	.word	0x0800ba6f

08005af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005af8:	4a4e      	ldr	r2, [pc, #312]	; (8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8005afa:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005afc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005afe:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b00:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8005b02:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b06:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b0a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8005b0c:	f000 808d 	beq.w	8005c2a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b10:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b14:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b18:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b1c:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b24:	434b      	muls	r3, r1
    switch (pllsource)
 8005b26:	2c01      	cmp	r4, #1
 8005b28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b2c:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b30:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8005b34:	d06b      	beq.n	8005c0e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8005b36:	2c02      	cmp	r4, #2
 8005b38:	d05b      	beq.n	8005bf2 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d167      	bne.n	8005c0e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	069b      	lsls	r3, r3, #26
 8005b42:	d546      	bpl.n	8005bd2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b44:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b46:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b48:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b52:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b54:	ee07 2a10 	vmov	s14, r2
 8005b58:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005b5c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005b60:	ee06 3a90 	vmov	s13, r3
 8005b64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b70:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b72:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005b7c:	ee07 3a10 	vmov	s14, r3
 8005b80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b8c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005b90:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b94:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b96:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005b9a:	ee07 3a10 	vmov	s14, r3
 8005b9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ba2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005baa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005bae:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005bb2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005bb4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005bb8:	ee07 3a10 	vmov	s14, r3
 8005bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005bc0:	ee37 6a06 	vadd.f32	s12, s14, s12
 8005bc4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005bc8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005bcc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005bd4:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005c3c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bdc:	ee07 3a10 	vmov	s14, r3
 8005be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bec:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005bf0:	e7be      	b.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bf2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005bf4:	eddf 5a12 	vldr	s11, [pc, #72]	; 8005c40 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfc:	ee07 3a10 	vmov	s14, r3
 8005c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c08:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c0c:	e7ee      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005c10:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8005c44 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	ee07 3a10 	vmov	s14, r3
 8005c1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c28:	e7e0      	b.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c2a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c2e:	6081      	str	r1, [r0, #8]
}
 8005c30:	e7ce      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8005c32:	bf00      	nop
 8005c34:	58024400 	.word	0x58024400
 8005c38:	03d09000 	.word	0x03d09000
 8005c3c:	4c742400 	.word	0x4c742400
 8005c40:	4c371b00 	.word	0x4c371b00
 8005c44:	4a742400 	.word	0x4a742400

08005c48 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c48:	4a4e      	ldr	r2, [pc, #312]	; (8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8005c4a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c4c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c4e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c50:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8005c52:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c56:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c5a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8005c5c:	f000 808d 	beq.w	8005d7a <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c60:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c64:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c68:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c6c:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c74:	434b      	muls	r3, r1
    switch (pllsource)
 8005c76:	2c01      	cmp	r4, #1
 8005c78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c7c:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c80:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8005c84:	d06b      	beq.n	8005d5e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8005c86:	2c02      	cmp	r4, #2
 8005c88:	d05b      	beq.n	8005d42 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d167      	bne.n	8005d5e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	069b      	lsls	r3, r3, #26
 8005c92:	d546      	bpl.n	8005d22 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c94:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c96:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c98:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005c9c:	4a3a      	ldr	r2, [pc, #232]	; (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ca2:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ca4:	ee07 2a10 	vmov	s14, r2
 8005ca8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005cac:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005cb0:	ee06 3a90 	vmov	s13, r3
 8005cb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbc:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005cc0:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005cc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005cc8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005ccc:	ee07 3a10 	vmov	s14, r3
 8005cd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005cd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005cd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cdc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005ce0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ce4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ce6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005cea:	ee07 3a10 	vmov	s14, r3
 8005cee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005cf2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005cf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cfa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005cfe:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d04:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d08:	ee07 3a10 	vmov	s14, r3
 8005d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d10:	ee37 6a06 	vadd.f32	s12, s14, s12
 8005d14:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005d18:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005d1c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d24:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2c:	ee07 3a10 	vmov	s14, r3
 8005d30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d38:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d3c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005d40:	e7be      	b.n	8005cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d44:	eddf 5a12 	vldr	s11, [pc, #72]	; 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4c:	ee07 3a10 	vmov	s14, r3
 8005d50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d58:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d5c:	e7ee      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d60:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a10 	vmov	s14, r3
 8005d6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d78:	e7e0      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d7a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d7e:	6081      	str	r1, [r0, #8]
}
 8005d80:	e7ce      	b.n	8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
 8005d88:	03d09000 	.word	0x03d09000
 8005d8c:	4c742400 	.word	0x4c742400
 8005d90:	4c371b00 	.word	0x4c371b00
 8005d94:	4a742400 	.word	0x4a742400

08005d98 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d98:	4a4e      	ldr	r2, [pc, #312]	; (8005ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 8005d9a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d9c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005d9e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005da0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8005da2:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005da6:	f3c6 1105 	ubfx	r1, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005daa:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8005dac:	f000 808d 	beq.w	8005eca <HAL_RCCEx_GetPLL1ClockFreq+0x132>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005db0:	ee07 1a90 	vmov	s15, r1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005db4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005db8:	f005 0101 	and.w	r1, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dbc:	f004 0403 	and.w	r4, r4, #3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dc4:	434b      	muls	r3, r1
    switch (pllsource)
 8005dc6:	2c01      	cmp	r4, #1
 8005dc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dcc:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8005dd4:	d04d      	beq.n	8005e72 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
 8005dd6:	2c02      	cmp	r4, #2
 8005dd8:	d05b      	beq.n	8005e92 <HAL_RCCEx_GetPLL1ClockFreq+0xfa>
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d167      	bne.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	069b      	lsls	r3, r3, #26
 8005de2:	d564      	bpl.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de4:	6811      	ldr	r1, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005de6:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005dec:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005df2:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005df4:	ee07 2a10 	vmov	s14, r2
 8005df8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005dfc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005e00:	ee06 3a90 	vmov	s13, r3
 8005e04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e10:	4a30      	ldr	r2, [pc, #192]	; (8005ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e12:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e18:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005e1c:	ee07 3a10 	vmov	s14, r3
 8005e20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e2c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e30:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005e34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e36:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005e3a:	ee07 3a10 	vmov	s14, r3
 8005e3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e4a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e4e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005e52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e54:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e58:	ee07 3a10 	vmov	s14, r3
 8005e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e60:	ee37 6a06 	vadd.f32	s12, s14, s12
 8005e64:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005e68:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e6c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005e70:	bd70      	pop	{r4, r5, r6, pc}
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e74:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005edc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	ee07 3a10 	vmov	s14, r3
 8005e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e88:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e8c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005e90:	e7be      	b.n	8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x78>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e94:	eddf 5a12 	vldr	s11, [pc, #72]	; 8005ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9c:	ee07 3a10 	vmov	s14, r3
 8005ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005eac:	e7ee      	b.n	8005e8c <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005eb0:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8005ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb8:	ee07 3a10 	vmov	s14, r3
 8005ebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005ec8:	e7e0      	b.n	8005e8c <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005eca:	e9c0 1100 	strd	r1, r1, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ece:	6081      	str	r1, [r0, #8]
}
 8005ed0:	e7ce      	b.n	8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005ed2:	bf00      	nop
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	03d09000 	.word	0x03d09000
 8005edc:	4a742400 	.word	0x4a742400
 8005ee0:	4c371b00 	.word	0x4c371b00
 8005ee4:	4c742400 	.word	0x4c742400

08005ee8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ee8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8005eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005eee:	d131      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ef0:	4b95      	ldr	r3, [pc, #596]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef4:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 8005ef8:	2a04      	cmp	r2, #4
 8005efa:	d84b      	bhi.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8005efc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005f00:	003900cc 	.word	0x003900cc
 8005f04:	01400005 	.word	0x01400005
 8005f08:	000d      	.short	0x000d
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005f10:	d037      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f12:	a801      	add	r0, sp, #4
 8005f14:	f7ff fe98 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
 8005f18:	e032      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f1c:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f1e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f22:	681b      	ldr	r3, [r3, #0]
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f24:	0749      	lsls	r1, r1, #29
 8005f26:	d505      	bpl.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8005f28:	b922      	cbnz	r2, 8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f2e:	4887      	ldr	r0, [pc, #540]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005f30:	40d8      	lsrs	r0, r3
 8005f32:	e026      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f34:	05d8      	lsls	r0, r3, #23
 8005f36:	d502      	bpl.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005f38:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005f3c:	d053      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f3e:	4b82      	ldr	r3, [pc, #520]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005f46:	d01c      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = HSE_VALUE;
 8005f48:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005f4c:	4880      	ldr	r0, [pc, #512]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005f4e:	bf18      	it	ne
 8005f50:	2000      	movne	r0, #0
 8005f52:	e016      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005f54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005f58:	d127      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005f5a:	4b7b      	ldr	r3, [pc, #492]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f5e:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
      switch (saiclocksource)
 8005f62:	2a80      	cmp	r2, #128	; 0x80
 8005f64:	d0d1      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8005f66:	d80f      	bhi.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	f000 8095 	beq.w	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005f6e:	2a40      	cmp	r2, #64	; 0x40
      switch (srcclk)
 8005f70:	d110      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f78:	d003      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7a:	a801      	add	r0, sp, #4
 8005f7c:	f7ff fdbc 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f80:	9801      	ldr	r0, [sp, #4]
}
 8005f82:	b005      	add	sp, #20
 8005f84:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8005f88:	2ac0      	cmp	r2, #192	; 0xc0
 8005f8a:	f000 80f9 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8005f8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      switch (saiclocksource)
 8005f92:	d001      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      switch (srcclk)
 8005f94:	2000      	movs	r0, #0
  return frequency;
 8005f96:	e7f4      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f9a:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f9c:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fa0:	0749      	lsls	r1, r1, #29
 8005fa2:	d519      	bpl.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005fa4:	b9c2      	cbnz	r2, 8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	e7bf      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005faa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005fae:	d11c      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005fb0:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005fb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005fb4:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
      switch (saiclocksource)
 8005fb8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005fbc:	d0a5      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8005fbe:	d804      	bhi.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	d069      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005fc4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005fc8:	e7d2      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8005fca:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8005fce:	f000 80d7 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8005fd2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005fd6:	e7dc      	b.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	05c9      	lsls	r1, r1, #23
 8005fde:	d5af      	bpl.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005fe0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005fe4:	d1ac      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
            frequency = CSI_VALUE;
 8005fe6:	485b      	ldr	r0, [pc, #364]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005fe8:	e7cb      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005fea:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005fee:	d11c      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005ff0:	4b55      	ldr	r3, [pc, #340]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ff2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ff4:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
      switch (saiclocksource)
 8005ff8:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005ffc:	d085      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8005ffe:	d804      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006000:	2a00      	cmp	r2, #0
 8006002:	d049      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8006004:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006008:	e7b2      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800600a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800600e:	f000 80b7 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8006012:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      switch (srcclk)
 8006016:	d1bd      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800601a:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800601c:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006020:	0748      	lsls	r0, r1, #29
 8006022:	d5da      	bpl.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006024:	2a00      	cmp	r2, #0
 8006026:	d1d8      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006028:	e7bd      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800602a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800602e:	d113      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006030:	4b45      	ldr	r3, [pc, #276]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006034:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
      switch (srcclk)
 8006038:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800603c:	f43f af65 	beq.w	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8006040:	d803      	bhi.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006042:	b34a      	cbz	r2, 8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8006044:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006048:	e792      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800604a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800604e:	f000 8097 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8006052:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006056:	e7de      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006058:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800605c:	d115      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800605e:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006060:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006062:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      switch (srcclk)
 8006066:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800606a:	d005      	beq.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800606c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006070:	d0d2      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006072:	2a00      	cmp	r2, #0
 8006074:	d18e      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8006076:	e77c      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800607e:	d080      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006080:	a801      	add	r0, sp, #4
 8006082:	f7ff fde1 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006086:	9803      	ldr	r0, [sp, #12]
 8006088:	e77b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800608a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800608e:	d116      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006090:	4b2d      	ldr	r3, [pc, #180]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8006094:	03d2      	lsls	r2, r2, #15
 8006096:	d409      	bmi.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800609e:	f43f af70 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a2:	a801      	add	r0, sp, #4
 80060a4:	f7ff fe78 	bl	8005d98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060a8:	9802      	ldr	r0, [sp, #8]
 80060aa:	e76a      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060b2:	f43f af66 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b6:	a801      	add	r0, sp, #4
 80060b8:	f7ff fd1e 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
 80060bc:	e7e3      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80060be:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80060c2:	d149      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80060c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80060c8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80060cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060d0:	d02c      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80060d2:	d80d      	bhi.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80060d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d8:	d016      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 80060da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060de:	d01c      	beq.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f47f af57 	bne.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
}
 80060e6:	b005      	add	sp, #20
 80060e8:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80060ec:	f7ff bcf2 	b.w	8005ad4 <HAL_RCCEx_GetD3PCLK1Freq>
      switch (srcclk)
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f4:	d021      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80060f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060fa:	f47f af4b 	bne.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060fe:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006102:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006106:	e01c      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006108:	6810      	ldr	r0, [r2, #0]
 800610a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800610e:	f43f af38 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006112:	a801      	add	r0, sp, #4
 8006114:	f7ff fcf0 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006118:	e7c6      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800611a:	6810      	ldr	r0, [r2, #0]
 800611c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006120:	f43f af2f 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006124:	a801      	add	r0, sp, #4
 8006126:	f7ff fd8f 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
 800612a:	e7bd      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800612c:	6810      	ldr	r0, [r2, #0]
 800612e:	f010 0004 	ands.w	r0, r0, #4
 8006132:	f43f af26 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006136:	6813      	ldr	r3, [r2, #0]
 8006138:	e6f7      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800613a:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800613e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
            frequency = HSE_VALUE;
 8006142:	bf18      	it	ne
 8006144:	4618      	movne	r0, r3
 8006146:	e71c      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006148:	58024400 	.word	0x58024400
 800614c:	03d09000 	.word	0x03d09000
 8006150:	02dc6c00 	.word	0x02dc6c00
 8006154:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006158:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800615c:	f47f af1a 	bne.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006162:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8006168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616c:	d006      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006172:	d0c9      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af0d 	bne.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800617a:	e7c0      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800617c:	6810      	ldr	r0, [r2, #0]
 800617e:	e78c      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006182:	e6fe      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006184:	58024400 	.word	0x58024400
 8006188:	00bb8000 	.word	0x00bb8000

0800618c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800618e:	4604      	mov	r4, r0
 8006190:	b908      	cbnz	r0, 8006196 <HAL_SPI_Init+0xa>
  {
    return HAL_ERROR;
 8006192:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8006194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006196:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006198:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800619a:	4946      	ldr	r1, [pc, #280]	; (80062b4 <HAL_SPI_Init+0x128>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800619c:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800619e:	428a      	cmp	r2, r1
 80061a0:	68c3      	ldr	r3, [r0, #12]
 80061a2:	d009      	beq.n	80061b8 <HAL_SPI_Init+0x2c>
 80061a4:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80061a8:	428a      	cmp	r2, r1
 80061aa:	d005      	beq.n	80061b8 <HAL_SPI_Init+0x2c>
 80061ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061b0:	428a      	cmp	r2, r1
 80061b2:	d001      	beq.n	80061b8 <HAL_SPI_Init+0x2c>
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d8ec      	bhi.n	8006192 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80061ba:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061bc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80061be:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80061c0:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061c4:	493b      	ldr	r1, [pc, #236]	; (80062b4 <HAL_SPI_Init+0x128>)
 80061c6:	428a      	cmp	r2, r1
 80061c8:	d067      	beq.n	800629a <HAL_SPI_Init+0x10e>
 80061ca:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80061ce:	428a      	cmp	r2, r1
 80061d0:	d063      	beq.n	800629a <HAL_SPI_Init+0x10e>
 80061d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061d6:	428a      	cmp	r2, r1
 80061d8:	d05f      	beq.n	800629a <HAL_SPI_Init+0x10e>
 80061da:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061dc:	d8d9      	bhi.n	8006192 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80061de:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80061e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061e6:	b923      	cbnz	r3, 80061f2 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 80061e8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80061ea:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80061ee:	f7fb f9af 	bl	8001550 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80061f2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80061f4:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061f6:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80061f8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80061fc:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006206:	69a3      	ldr	r3, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006208:	6896      	ldr	r6, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800620a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800620e:	f406 16f8 	and.w	r6, r6, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006212:	d104      	bne.n	800621e <HAL_SPI_Init+0x92>
 8006214:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8006218:	d141      	bne.n	800629e <HAL_SPI_Init+0x112>
 800621a:	2d00      	cmp	r5, #0
 800621c:	d044      	beq.n	80062a8 <HAL_SPI_Init+0x11c>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800621e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006220:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006222:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006224:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006226:	4338      	orrs	r0, r7
 8006228:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800622a:	4338      	orrs	r0, r7
 800622c:	68e7      	ldr	r7, [r4, #12]
 800622e:	4338      	orrs	r0, r7
 8006230:	4330      	orrs	r0, r6
 8006232:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006234:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006236:	4303      	orrs	r3, r0
 8006238:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800623a:	4303      	orrs	r3, r0
 800623c:	6920      	ldr	r0, [r4, #16]
 800623e:	4303      	orrs	r3, r0
 8006240:	6960      	ldr	r0, [r4, #20]
 8006242:	4303      	orrs	r3, r0
 8006244:	6a20      	ldr	r0, [r4, #32]
 8006246:	4303      	orrs	r3, r0
 8006248:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800624a:	4303      	orrs	r3, r0
 800624c:	68a0      	ldr	r0, [r4, #8]
 800624e:	4303      	orrs	r3, r0
 8006250:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006252:	4303      	orrs	r3, r0
 8006254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006256:	4303      	orrs	r3, r0
 8006258:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800625a:	b959      	cbnz	r1, 8006274 <HAL_SPI_Init+0xe8>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006266:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006268:	6893      	ldr	r3, [r2, #8]
 800626a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800626e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006272:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006274:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800627c:	024b      	lsls	r3, r1, #9
 800627e:	d505      	bpl.n	800628c <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006280:	68d3      	ldr	r3, [r2, #12]
 8006282:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006288:	430b      	orrs	r3, r1
 800628a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800628c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800628e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006290:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006294:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 8006298:	e77c      	b.n	8006194 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800629a:	2b10      	cmp	r3, #16
 800629c:	e79e      	b.n	80061dc <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800629e:	2900      	cmp	r1, #0
 80062a0:	d1bd      	bne.n	800621e <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80062a2:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 80062a6:	d1ba      	bne.n	800621e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80062a8:	6810      	ldr	r0, [r2, #0]
 80062aa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80062ae:	6010      	str	r0, [r2, #0]
 80062b0:	e7b5      	b.n	800621e <HAL_SPI_Init+0x92>
 80062b2:	bf00      	nop
 80062b4:	40013000 	.word	0x40013000

080062b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b8:	6a03      	ldr	r3, [r0, #32]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
{
 80062be:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80062cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80062d6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062d8:	688d      	ldr	r5, [r1, #8]
 80062da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062dc:	4d1b      	ldr	r5, [pc, #108]	; (800634c <TIM_OC1_SetConfig+0x94>)
 80062de:	42a8      	cmp	r0, r5
 80062e0:	d00f      	beq.n	8006302 <TIM_OC1_SetConfig+0x4a>
 80062e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062e6:	42a8      	cmp	r0, r5
 80062e8:	d00b      	beq.n	8006302 <TIM_OC1_SetConfig+0x4a>
 80062ea:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80062ee:	42a8      	cmp	r0, r5
 80062f0:	d007      	beq.n	8006302 <TIM_OC1_SetConfig+0x4a>
 80062f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062f6:	42a8      	cmp	r0, r5
 80062f8:	d003      	beq.n	8006302 <TIM_OC1_SetConfig+0x4a>
 80062fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062fe:	42a8      	cmp	r0, r5
 8006300:	d11e      	bne.n	8006340 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006302:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006304:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006308:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630a:	4d10      	ldr	r5, [pc, #64]	; (800634c <TIM_OC1_SetConfig+0x94>)
 800630c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800630e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006312:	d00f      	beq.n	8006334 <TIM_OC1_SetConfig+0x7c>
 8006314:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006318:	42a8      	cmp	r0, r5
 800631a:	d00b      	beq.n	8006334 <TIM_OC1_SetConfig+0x7c>
 800631c:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8006320:	42a8      	cmp	r0, r5
 8006322:	d007      	beq.n	8006334 <TIM_OC1_SetConfig+0x7c>
 8006324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006328:	42a8      	cmp	r0, r5
 800632a:	d003      	beq.n	8006334 <TIM_OC1_SetConfig+0x7c>
 800632c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006330:	42a8      	cmp	r0, r5
 8006332:	d105      	bne.n	8006340 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006334:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006338:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800633c:	4334      	orrs	r4, r6
 800633e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006342:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006344:	684a      	ldr	r2, [r1, #4]
 8006346:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006348:	6203      	str	r3, [r0, #32]
}
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	40010000 	.word	0x40010000

08006350 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006350:	6a03      	ldr	r3, [r0, #32]
 8006352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8006356:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006358:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635e:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8006364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006366:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800636a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800636e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006370:	688d      	ldr	r5, [r1, #8]
 8006372:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006376:	4d16      	ldr	r5, [pc, #88]	; (80063d0 <TIM_OC3_SetConfig+0x80>)
 8006378:	42a8      	cmp	r0, r5
 800637a:	d003      	beq.n	8006384 <TIM_OC3_SetConfig+0x34>
 800637c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006380:	42a8      	cmp	r0, r5
 8006382:	d10d      	bne.n	80063a0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006384:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800638a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	4d10      	ldr	r5, [pc, #64]	; (80063d0 <TIM_OC3_SetConfig+0x80>)
 8006390:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8006392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006396:	d00e      	beq.n	80063b6 <TIM_OC3_SetConfig+0x66>
 8006398:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800639c:	42a8      	cmp	r0, r5
 800639e:	d00a      	beq.n	80063b6 <TIM_OC3_SetConfig+0x66>
 80063a0:	4d0c      	ldr	r5, [pc, #48]	; (80063d4 <TIM_OC3_SetConfig+0x84>)
 80063a2:	42a8      	cmp	r0, r5
 80063a4:	d007      	beq.n	80063b6 <TIM_OC3_SetConfig+0x66>
 80063a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063aa:	42a8      	cmp	r0, r5
 80063ac:	d003      	beq.n	80063b6 <TIM_OC3_SetConfig+0x66>
 80063ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063b2:	42a8      	cmp	r0, r5
 80063b4:	d106      	bne.n	80063c4 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b6:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ba:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80063be:	4334      	orrs	r4, r6
 80063c0:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c8:	684a      	ldr	r2, [r1, #4]
 80063ca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	6203      	str	r3, [r0, #32]
}
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40014000 	.word	0x40014000

080063d8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d8:	6a03      	ldr	r3, [r0, #32]
 80063da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80063de:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80063f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063fa:	688d      	ldr	r5, [r1, #8]
 80063fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	4d0e      	ldr	r5, [pc, #56]	; (800643c <TIM_OC4_SetConfig+0x64>)
 8006402:	42a8      	cmp	r0, r5
 8006404:	d00f      	beq.n	8006426 <TIM_OC4_SetConfig+0x4e>
 8006406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800640a:	42a8      	cmp	r0, r5
 800640c:	d00b      	beq.n	8006426 <TIM_OC4_SetConfig+0x4e>
 800640e:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8006412:	42a8      	cmp	r0, r5
 8006414:	d007      	beq.n	8006426 <TIM_OC4_SetConfig+0x4e>
 8006416:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800641a:	42a8      	cmp	r0, r5
 800641c:	d003      	beq.n	8006426 <TIM_OC4_SetConfig+0x4e>
 800641e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006422:	42a8      	cmp	r0, r5
 8006424:	d104      	bne.n	8006430 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006426:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800642a:	694d      	ldr	r5, [r1, #20]
 800642c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006432:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006434:	684a      	ldr	r2, [r1, #4]
 8006436:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006438:	6203      	str	r3, [r0, #32]
}
 800643a:	bd30      	pop	{r4, r5, pc}
 800643c:	40010000 	.word	0x40010000

08006440 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006440:	6a03      	ldr	r3, [r0, #32]
 8006442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8006446:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006448:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800644e:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8006454:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006456:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800645a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800645e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006460:	688d      	ldr	r5, [r1, #8]
 8006462:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006466:	4d0f      	ldr	r5, [pc, #60]	; (80064a4 <TIM_OC5_SetConfig+0x64>)
 8006468:	42a8      	cmp	r0, r5
 800646a:	d00f      	beq.n	800648c <TIM_OC5_SetConfig+0x4c>
 800646c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006470:	42a8      	cmp	r0, r5
 8006472:	d00b      	beq.n	800648c <TIM_OC5_SetConfig+0x4c>
 8006474:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8006478:	42a8      	cmp	r0, r5
 800647a:	d007      	beq.n	800648c <TIM_OC5_SetConfig+0x4c>
 800647c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006480:	42a8      	cmp	r0, r5
 8006482:	d003      	beq.n	800648c <TIM_OC5_SetConfig+0x4c>
 8006484:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006488:	42a8      	cmp	r0, r5
 800648a:	d104      	bne.n	8006496 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800648c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006490:	694d      	ldr	r5, [r1, #20]
 8006492:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006498:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800649a:	684a      	ldr	r2, [r1, #4]
 800649c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649e:	6203      	str	r3, [r0, #32]
}
 80064a0:	bd30      	pop	{r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000

080064a8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064a8:	6a03      	ldr	r3, [r0, #32]
 80064aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80064ae:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80064c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064ca:	688d      	ldr	r5, [r1, #8]
 80064cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	4d0e      	ldr	r5, [pc, #56]	; (800650c <TIM_OC6_SetConfig+0x64>)
 80064d2:	42a8      	cmp	r0, r5
 80064d4:	d00f      	beq.n	80064f6 <TIM_OC6_SetConfig+0x4e>
 80064d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064da:	42a8      	cmp	r0, r5
 80064dc:	d00b      	beq.n	80064f6 <TIM_OC6_SetConfig+0x4e>
 80064de:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80064e2:	42a8      	cmp	r0, r5
 80064e4:	d007      	beq.n	80064f6 <TIM_OC6_SetConfig+0x4e>
 80064e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064ea:	42a8      	cmp	r0, r5
 80064ec:	d003      	beq.n	80064f6 <TIM_OC6_SetConfig+0x4e>
 80064ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064f2:	42a8      	cmp	r0, r5
 80064f4:	d104      	bne.n	8006500 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064f6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064fa:	694d      	ldr	r5, [r1, #20]
 80064fc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006500:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006502:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006504:	684a      	ldr	r2, [r1, #4]
 8006506:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	6203      	str	r3, [r0, #32]
}
 800650a:	bd30      	pop	{r4, r5, pc}
 800650c:	40010000 	.word	0x40010000

08006510 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006510:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006514:	2b01      	cmp	r3, #1
 8006516:	d133      	bne.n	8006580 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	2302      	movs	r3, #2
 800651a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800651e:	6803      	ldr	r3, [r0, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <HAL_TIM_Base_Start_IT+0x74>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01a      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d017      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 8006534:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 800653c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006540:	4293      	cmp	r3, r2
 8006542:	d00f      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 8006544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 800654c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 8006554:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x54>
 800655c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006560:	4293      	cmp	r3, r2
 8006562:	d107      	bne.n	8006574 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <HAL_TIM_Base_Start_IT+0x78>)
 8006568:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656a:	2a06      	cmp	r2, #6
 800656c:	d006      	beq.n	800657c <HAL_TIM_Base_Start_IT+0x6c>
 800656e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006572:	d003      	beq.n	800657c <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800657c:	2000      	movs	r0, #0
}
 800657e:	4770      	bx	lr
    return HAL_ERROR;
 8006580:	2001      	movs	r0, #1
 8006582:	4770      	bx	lr
 8006584:	40010000 	.word	0x40010000
 8006588:	00010007 	.word	0x00010007

0800658c <HAL_TIM_PeriodElapsedCallback>:
 800658c:	4770      	bx	lr

0800658e <HAL_TIM_OC_DelayElapsedCallback>:
 800658e:	4770      	bx	lr

08006590 <HAL_TIM_IC_CaptureCallback>:
 8006590:	4770      	bx	lr

08006592 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_TriggerCallback>:
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006596:	6803      	ldr	r3, [r0, #0]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	0791      	lsls	r1, r2, #30
{
 800659c:	b510      	push	{r4, lr}
 800659e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065a0:	d50f      	bpl.n	80065c2 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	0792      	lsls	r2, r2, #30
 80065a6:	d50c      	bpl.n	80065c2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065a8:	f06f 0202 	mvn.w	r2, #2
 80065ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ae:	2201      	movs	r2, #1
 80065b0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	0799      	lsls	r1, r3, #30
 80065b6:	f000 8085 	beq.w	80066c4 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	f7ff ffe9 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	2300      	movs	r3, #0
 80065c0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	0752      	lsls	r2, r2, #29
 80065c8:	d510      	bpl.n	80065ec <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	0750      	lsls	r0, r2, #29
 80065ce:	d50d      	bpl.n	80065ec <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d0:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80065d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d8:	2202      	movs	r2, #2
 80065da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80065e2:	d075      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80065e4:	f7ff ffd4 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e8:	2300      	movs	r3, #0
 80065ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	0711      	lsls	r1, r2, #28
 80065f2:	d50f      	bpl.n	8006614 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	0712      	lsls	r2, r2, #28
 80065f8:	d50c      	bpl.n	8006614 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065fa:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006602:	2204      	movs	r2, #4
 8006604:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	079b      	lsls	r3, r3, #30
 800660a:	d067      	beq.n	80066dc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800660c:	f7ff ffc0 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006610:	2300      	movs	r3, #0
 8006612:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	06d0      	lsls	r0, r2, #27
 800661a:	d510      	bpl.n	800663e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	06d1      	lsls	r1, r2, #27
 8006620:	d50d      	bpl.n	800663e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006622:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8006626:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800662a:	2208      	movs	r2, #8
 800662c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006634:	d058      	beq.n	80066e8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006636:	f7ff ffab 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	2300      	movs	r3, #0
 800663c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	07d2      	lsls	r2, r2, #31
 8006644:	d508      	bpl.n	8006658 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	07d0      	lsls	r0, r2, #31
 800664a:	d505      	bpl.n	8006658 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800664c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006650:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006652:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006654:	f7ff ff9a 	bl	800658c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	0611      	lsls	r1, r2, #24
 800665e:	d508      	bpl.n	8006672 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	0612      	lsls	r2, r2, #24
 8006664:	d505      	bpl.n	8006672 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006666:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800666a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800666c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800666e:	f000 fb28 	bl	8006cc2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	05d0      	lsls	r0, r2, #23
 8006678:	d508      	bpl.n	800668c <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	0611      	lsls	r1, r2, #24
 800667e:	d505      	bpl.n	800668c <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006680:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8006684:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006686:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006688:	f000 fb1c 	bl	8006cc4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	0652      	lsls	r2, r2, #25
 8006692:	d508      	bpl.n	80066a6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	0650      	lsls	r0, r2, #25
 8006698:	d505      	bpl.n	80066a6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800669a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800669e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80066a2:	f7ff ff77 	bl	8006594 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	0691      	lsls	r1, r2, #26
 80066ac:	d522      	bpl.n	80066f4 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	0692      	lsls	r2, r2, #26
 80066b2:	d51f      	bpl.n	80066f4 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80066b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066ba:	611a      	str	r2, [r3, #16]
}
 80066bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80066c0:	f000 bafe 	b.w	8006cc0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c4:	f7ff ff63 	bl	800658e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff62 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
 80066ce:	e776      	b.n	80065be <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d0:	f7ff ff5d 	bl	800658e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7ff ff5c 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
 80066da:	e785      	b.n	80065e8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066dc:	f7ff ff57 	bl	800658e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7ff ff56 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
 80066e6:	e793      	b.n	8006610 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e8:	f7ff ff51 	bl	800658e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ff50 	bl	8006592 <HAL_TIM_PWM_PulseFinishedCallback>
 80066f2:	e7a2      	b.n	800663a <HAL_TIM_IRQHandler+0xa4>
}
 80066f4:	bd10      	pop	{r4, pc}
	...

080066f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	4a30      	ldr	r2, [pc, #192]	; (80067bc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80066fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066fc:	4290      	cmp	r0, r2
 80066fe:	d012      	beq.n	8006726 <TIM_Base_SetConfig+0x2e>
 8006700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006704:	d00f      	beq.n	8006726 <TIM_Base_SetConfig+0x2e>
 8006706:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800670a:	4290      	cmp	r0, r2
 800670c:	d00b      	beq.n	8006726 <TIM_Base_SetConfig+0x2e>
 800670e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006712:	4290      	cmp	r0, r2
 8006714:	d007      	beq.n	8006726 <TIM_Base_SetConfig+0x2e>
 8006716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800671a:	4290      	cmp	r0, r2
 800671c:	d003      	beq.n	8006726 <TIM_Base_SetConfig+0x2e>
 800671e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006722:	4290      	cmp	r0, r2
 8006724:	d119      	bne.n	800675a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8006726:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800672c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800672e:	4a23      	ldr	r2, [pc, #140]	; (80067bc <TIM_Base_SetConfig+0xc4>)
 8006730:	4290      	cmp	r0, r2
 8006732:	d01d      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 8006734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006738:	d01a      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 800673a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800673e:	4290      	cmp	r0, r2
 8006740:	d016      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 8006742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006746:	4290      	cmp	r0, r2
 8006748:	d012      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 800674a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800674e:	4290      	cmp	r0, r2
 8006750:	d00e      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 8006752:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006756:	4290      	cmp	r0, r2
 8006758:	d00a      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 800675a:	4a19      	ldr	r2, [pc, #100]	; (80067c0 <TIM_Base_SetConfig+0xc8>)
 800675c:	4290      	cmp	r0, r2
 800675e:	d007      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 8006760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006764:	4290      	cmp	r0, r2
 8006766:	d003      	beq.n	8006770 <TIM_Base_SetConfig+0x78>
 8006768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800676c:	4290      	cmp	r0, r2
 800676e:	d103      	bne.n	8006778 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006774:	68ca      	ldr	r2, [r1, #12]
 8006776:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006778:	694a      	ldr	r2, [r1, #20]
 800677a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006780:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006782:	688b      	ldr	r3, [r1, #8]
 8006784:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006786:	680b      	ldr	r3, [r1, #0]
 8006788:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <TIM_Base_SetConfig+0xc4>)
 800678c:	4298      	cmp	r0, r3
 800678e:	d00f      	beq.n	80067b0 <TIM_Base_SetConfig+0xb8>
 8006790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006794:	4298      	cmp	r0, r3
 8006796:	d00b      	beq.n	80067b0 <TIM_Base_SetConfig+0xb8>
 8006798:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800679c:	4298      	cmp	r0, r3
 800679e:	d007      	beq.n	80067b0 <TIM_Base_SetConfig+0xb8>
 80067a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a4:	4298      	cmp	r0, r3
 80067a6:	d003      	beq.n	80067b0 <TIM_Base_SetConfig+0xb8>
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	4298      	cmp	r0, r3
 80067ae:	d101      	bne.n	80067b4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80067b4:	2301      	movs	r3, #1
 80067b6:	6143      	str	r3, [r0, #20]
}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40014000 	.word	0x40014000

080067c4 <HAL_TIM_Base_Init>:
{
 80067c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80067c6:	4604      	mov	r4, r0
 80067c8:	b350      	cbz	r0, 8006820 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80067ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067d2:	b91b      	cbnz	r3, 80067dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80067d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80067d8:	f7fb f900 	bl	80019dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067de:	6820      	ldr	r0, [r4, #0]
 80067e0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80067e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e6:	f7ff ff87 	bl	80066f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ea:	2301      	movs	r3, #1
  return HAL_OK;
 80067ec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80067f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80067fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80067fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800680e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006812:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006816:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800681a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800681e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006820:	2001      	movs	r0, #1
 8006822:	e7fc      	b.n	800681e <HAL_TIM_Base_Init+0x5a>

08006824 <HAL_TIM_PWM_Init>:
{
 8006824:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006826:	4604      	mov	r4, r0
 8006828:	b350      	cbz	r0, 8006880 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800682a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800682e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006832:	b91b      	cbnz	r3, 800683c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006834:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006838:	f7fb f8a4 	bl	8001984 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006842:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006846:	f7ff ff57 	bl	80066f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684a:	2301      	movs	r3, #1
  return HAL_OK;
 800684c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006856:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800685a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800685e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800686e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006872:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006876:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800687a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800687e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006880:	2001      	movs	r0, #1
 8006882:	e7fc      	b.n	800687e <HAL_TIM_PWM_Init+0x5a>

08006884 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006884:	6a03      	ldr	r3, [r0, #32]
 8006886:	f023 0310 	bic.w	r3, r3, #16
{
 800688a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800688e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006890:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006892:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8006894:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800689a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800689e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a6:	688d      	ldr	r5, [r1, #8]
 80068a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068ac:	4d16      	ldr	r5, [pc, #88]	; (8006908 <TIM_OC2_SetConfig+0x84>)
 80068ae:	42a8      	cmp	r0, r5
 80068b0:	d003      	beq.n	80068ba <TIM_OC2_SetConfig+0x36>
 80068b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068b6:	42a8      	cmp	r0, r5
 80068b8:	d10d      	bne.n	80068d6 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80068bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	4d10      	ldr	r5, [pc, #64]	; (8006908 <TIM_OC2_SetConfig+0x84>)
 80068c6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	d00e      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068d2:	42a8      	cmp	r0, r5
 80068d4:	d00a      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068d6:	4d0d      	ldr	r5, [pc, #52]	; (800690c <TIM_OC2_SetConfig+0x88>)
 80068d8:	42a8      	cmp	r0, r5
 80068da:	d007      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068e0:	42a8      	cmp	r0, r5
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068e8:	42a8      	cmp	r0, r5
 80068ea:	d106      	bne.n	80068fa <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068ec:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80068f4:	4334      	orrs	r4, r6
 80068f6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80068fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80068fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80068fe:	684a      	ldr	r2, [r1, #4]
 8006900:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006902:	6203      	str	r3, [r0, #32]
}
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40014000 	.word	0x40014000

08006910 <HAL_TIM_PWM_ConfigChannel>:
{
 8006910:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006912:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006916:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8006918:	2b01      	cmp	r3, #1
 800691a:	d079      	beq.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x100>
 800691c:	2001      	movs	r0, #1
  switch (Channel)
 800691e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8006920:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8006924:	d052      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0xbc>
 8006926:	d808      	bhi.n	800693a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006928:	2a04      	cmp	r2, #4
 800692a:	d02d      	beq.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x78>
 800692c:	2a08      	cmp	r2, #8
 800692e:	d03c      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x9a>
 8006930:	b1c2      	cbz	r2, 8006964 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 8006932:	2300      	movs	r3, #0
 8006934:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8006938:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800693a:	2a10      	cmp	r2, #16
 800693c:	d057      	beq.n	80069ee <HAL_TIM_PWM_ConfigChannel+0xde>
 800693e:	2a14      	cmp	r2, #20
 8006940:	d1f7      	bne.n	8006932 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006942:	6828      	ldr	r0, [r5, #0]
 8006944:	f7ff fdb0 	bl	80064a8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006948:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800694a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800694c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800695c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800695e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006962:	e053      	b.n	8006a0c <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006964:	6828      	ldr	r0, [r5, #0]
 8006966:	f7ff fca7 	bl	80062b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800696a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800696c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	f042 0208 	orr.w	r2, r2, #8
 8006974:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	f022 0204 	bic.w	r2, r2, #4
 800697c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006982:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2000      	movs	r0, #0
      break;
 8006986:	e7d4      	b.n	8006932 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006988:	6828      	ldr	r0, [r5, #0]
 800698a:	f7ff ff7b 	bl	8006884 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800698e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006990:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006998:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80069a8:	e7eb      	b.n	8006982 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069aa:	6828      	ldr	r0, [r5, #0]
 80069ac:	f7ff fcd0 	bl	8006350 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	f042 0208 	orr.w	r2, r2, #8
 80069ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	f022 0204 	bic.w	r2, r2, #4
 80069c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069c8:	61da      	str	r2, [r3, #28]
      break;
 80069ca:	e7db      	b.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	f7ff fd03 	bl	80063d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069d2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80069ec:	e7ec      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069ee:	6828      	ldr	r0, [r5, #0]
 80069f0:	f7ff fd26 	bl	8006440 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069f6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a0a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54
 8006a0e:	e7b9      	b.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8006a10:	2002      	movs	r0, #2
 8006a12:	e791      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x28>

08006a14 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	4311      	orrs	r1, r2
{
 8006a16:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8006a18:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a22:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a24:	6083      	str	r3, [r0, #8]
}
 8006a26:	bd10      	pop	{r4, pc}

08006a28 <HAL_TIM_ConfigClockSource>:
{
 8006a28:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006a2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006a2e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f04f 0302 	mov.w	r3, #2
 8006a36:	f000 80ae 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x16e>
 8006a3a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a40:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <HAL_TIM_ConfigClockSource+0x174>)
  __HAL_LOCK(htim);
 8006a42:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006a46:	6800      	ldr	r0, [r0, #0]
 8006a48:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a4a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006a4c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006a4e:	680b      	ldr	r3, [r1, #0]
 8006a50:	2b70      	cmp	r3, #112	; 0x70
 8006a52:	d057      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0xdc>
 8006a54:	d83d      	bhi.n	8006ad2 <HAL_TIM_ConfigClockSource+0xaa>
 8006a56:	2b50      	cmp	r3, #80	; 0x50
 8006a58:	d06a      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x108>
 8006a5a:	d81e      	bhi.n	8006a9a <HAL_TIM_ConfigClockSource+0x72>
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	f000 8081 	beq.w	8006b64 <HAL_TIM_ConfigClockSource+0x13c>
 8006a62:	d806      	bhi.n	8006a72 <HAL_TIM_ConfigClockSource+0x4a>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d00e      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x5e>
 8006a68:	d80b      	bhi.n	8006a82 <HAL_TIM_ConfigClockSource+0x5a>
 8006a6a:	f033 0210 	bics.w	r2, r3, #16
 8006a6e:	d00a      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x5e>
 8006a70:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006a7e:	4610      	mov	r0, r2
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006a82:	2b30      	cmp	r3, #48	; 0x30
 8006a84:	d1f4      	bne.n	8006a70 <HAL_TIM_ConfigClockSource+0x48>
  tmpsmcr = TIMx->SMCR;
 8006a86:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a88:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006a8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a90:	431a      	orrs	r2, r3
 8006a92:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8006a96:	6082      	str	r2, [r0, #8]
 8006a98:	e03e      	b.n	8006b18 <HAL_TIM_ConfigClockSource+0xf0>
  switch (sClockSourceConfig->ClockSource)
 8006a9a:	2b60      	cmp	r3, #96	; 0x60
 8006a9c:	d1e9      	bne.n	8006a72 <HAL_TIM_ConfigClockSource+0x4a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9e:	684d      	ldr	r5, [r1, #4]
 8006aa0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa2:	6a01      	ldr	r1, [r0, #32]
 8006aa4:	f021 0110 	bic.w	r1, r1, #16
 8006aa8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006aac:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aae:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006ac0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006ac2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006acc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006ad0:	e046      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x138>
  switch (sClockSourceConfig->ClockSource)
 8006ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad6:	d021      	beq.n	8006b1c <HAL_TIM_ConfigClockSource+0xf4>
 8006ad8:	d804      	bhi.n	8006ae4 <HAL_TIM_ConfigClockSource+0xbc>
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8006ade:	bf18      	it	ne
 8006ae0:	2201      	movne	r2, #1
 8006ae2:	e7c6      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x4a>
  switch (sClockSourceConfig->ClockSource)
 8006ae4:	492e      	ldr	r1, [pc, #184]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x178>)
 8006ae6:	428b      	cmp	r3, r1
 8006ae8:	d0cd      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x5e>
 8006aea:	d805      	bhi.n	8006af8 <HAL_TIM_ConfigClockSource+0xd0>
 8006aec:	f023 0110 	bic.w	r1, r3, #16
 8006af0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006af4:	d0c7      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x5e>
 8006af6:	e7bc      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x4a>
 8006af8:	492a      	ldr	r1, [pc, #168]	; (8006ba4 <HAL_TIM_ConfigClockSource+0x17c>)
 8006afa:	428b      	cmp	r3, r1
 8006afc:	d0c3      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x5e>
 8006afe:	3110      	adds	r1, #16
 8006b00:	428b      	cmp	r3, r1
 8006b02:	e7f7      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 8006b04:	68cb      	ldr	r3, [r1, #12]
 8006b06:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006b0a:	f7ff ff83 	bl	8006a14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b16:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2200      	movs	r2, #0
}
 8006b1a:	e7aa      	b.n	8006a72 <HAL_TIM_ConfigClockSource+0x4a>
      TIM_ETR_SetConfig(htim->Instance,
 8006b1c:	68cb      	ldr	r3, [r1, #12]
 8006b1e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006b22:	f7ff ff77 	bl	8006a14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	6893      	ldr	r3, [r2, #8]
 8006b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2e:	e7f2      	b.n	8006b16 <HAL_TIM_ConfigClockSource+0xee>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b30:	684a      	ldr	r2, [r1, #4]
 8006b32:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006b34:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b36:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b38:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8006b40:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b42:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b44:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b4a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006b4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006b50:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006b52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006b60:	6083      	str	r3, [r0, #8]
 8006b62:	e7d9      	b.n	8006b18 <HAL_TIM_ConfigClockSource+0xf0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b64:	684a      	ldr	r2, [r1, #4]
 8006b66:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006b68:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b70:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8006b74:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b78:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b7e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006b82:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006b84:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006b86:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b90:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8006b94:	e7e4      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x138>
  __HAL_LOCK(htim);
 8006b96:	461a      	mov	r2, r3
 8006b98:	e771      	b.n	8006a7e <HAL_TIM_ConfigClockSource+0x56>
 8006b9a:	bf00      	nop
 8006b9c:	ffce0088 	.word	0xffce0088
 8006ba0:	00100020 	.word	0x00100020
 8006ba4:	00100030 	.word	0x00100030

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f04f 0302 	mov.w	r3, #2
 8006bb4:	d03d      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bba:	4d1f      	ldr	r5, [pc, #124]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 8006bbc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bbe:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006bc0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006bc2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bc4:	d003      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bca:	42ab      	cmp	r3, r5
 8006bcc:	d103      	bne.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd2:	684d      	ldr	r5, [r1, #4]
 8006bd4:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bdc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01a      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d017      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006bec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00f      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006c04:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006c0c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006c14:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c1c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006c32:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006c34:	bd30      	pop	{r4, r5, pc}
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000

08006c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c3c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d038      	beq.n	8006cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c46:	68cb      	ldr	r3, [r1, #12]
 8006c48:	688a      	ldr	r2, [r1, #8]
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c4e:	4c1b      	ldr	r4, [pc, #108]	; (8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c52:	684a      	ldr	r2, [r1, #4]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c5a:	680a      	ldr	r2, [r1, #0]
 8006c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c62:	690a      	ldr	r2, [r1, #16]
 8006c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c6a:	694a      	ldr	r2, [r1, #20]
 8006c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c72:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c7a:	698a      	ldr	r2, [r1, #24]
 8006c7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c84:	6802      	ldr	r2, [r0, #0]
 8006c86:	42a2      	cmp	r2, r4
 8006c88:	d003      	beq.n	8006c92 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8006c8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006c8e:	42a2      	cmp	r2, r4
 8006c90:	d10c      	bne.n	8006cac <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c92:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006c94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c98:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c9c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c9e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ca4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ca6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006caa:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cac:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006cb4:	4618      	mov	r0, r3
}
 8006cb6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006cb8:	2002      	movs	r0, #2
 8006cba:	e7fc      	b.n	8006cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8006cbc:	40010000 	.word	0x40010000

08006cc0 <HAL_TIMEx_CommutCallback>:
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIMEx_BreakCallback>:
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_Break2Callback>:
 8006cc4:	4770      	bx	lr

08006cc6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006cc6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	e852 3f00 	ldrex	r3, [r2]
 8006ccc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d1f5      	bne.n	8006cc6 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	f102 0308 	add.w	r3, r2, #8
 8006cde:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ce2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	f102 0c08 	add.w	ip, r2, #8
 8006cea:	e84c 3100 	strex	r1, r3, [ip]
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d1f3      	bne.n	8006cda <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006cf8:	4770      	bx	lr
	...

08006cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cfc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cfe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	e852 3f00 	ldrex	r3, [r2]
 8006d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006d0c:	6802      	ldr	r2, [r0, #0]
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	d1f5      	bne.n	8006cfe <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d12:	4c0f      	ldr	r4, [pc, #60]	; (8006d50 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	f102 0308 	add.w	r3, r2, #8
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	f102 0c08 	add.w	ip, r2, #8
 8006d22:	e84c 3100 	strex	r1, r3, [ip]
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d1f4      	bne.n	8006d14 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d107      	bne.n	8006d40 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	e842 3100 	strex	r1, r3, [r2]
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	d1f7      	bne.n	8006d30 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d40:	2320      	movs	r3, #32
 8006d42:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	2300      	movs	r3, #0
 8006d48:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d4a:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	effffffe 	.word	0xeffffffe

08006d54 <HAL_UART_RxCpltCallback>:
 8006d54:	4770      	bx	lr

08006d56 <HAL_UART_RxHalfCpltCallback>:
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_ErrorCallback>:
 8006d58:	4770      	bx	lr

08006d5a <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d5a:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d5c:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d5e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8006d62:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d64:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d68:	6892      	ldr	r2, [r2, #8]
 8006d6a:	0612      	lsls	r2, r2, #24
 8006d6c:	d506      	bpl.n	8006d7c <UART_DMAError+0x22>
 8006d6e:	2b21      	cmp	r3, #33	; 0x21
 8006d70:	d104      	bne.n	8006d7c <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006d78:	f7ff ffa5 	bl	8006cc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d7c:	6803      	ldr	r3, [r0, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	065b      	lsls	r3, r3, #25
 8006d82:	d506      	bpl.n	8006d92 <UART_DMAError+0x38>
 8006d84:	2c22      	cmp	r4, #34	; 0x22
 8006d86:	d104      	bne.n	8006d92 <UART_DMAError+0x38>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006d8e:	f7ff ffb5 	bl	8006cfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d92:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006d96:	f043 0310 	orr.w	r3, r3, #16
 8006d9a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9e:	f7ff ffdb 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da2:	bd10      	pop	{r4, pc}

08006da4 <HAL_UARTEx_RxEventCallback>:
}
 8006da4:	4770      	bx	lr

08006da6 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006da8:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006daa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d105      	bne.n	8006dbc <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006db0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006db4:	0849      	lsrs	r1, r1, #1
 8006db6:	f7ff fff5 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
}
 8006dba:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8006dbc:	f7ff ffcb 	bl	8006d56 <HAL_UART_RxHalfCpltCallback>
}
 8006dc0:	e7fb      	b.n	8006dba <UART_DMARxHalfCplt+0x14>

08006dc2 <UART_DMAReceiveCplt>:
{
 8006dc2:	b508      	push	{r3, lr}
 8006dc4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dce:	d032      	beq.n	8006e36 <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	e852 3f00 	ldrex	r3, [r2]
 8006ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006de4:	6803      	ldr	r3, [r0, #0]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d1f5      	bne.n	8006dd6 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	f103 0208 	add.w	r2, r3, #8
 8006dee:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	f103 0c08 	add.w	ip, r3, #8
 8006dfa:	e84c 2100 	strex	r1, r2, [ip]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d1f3      	bne.n	8006dea <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	f103 0208 	add.w	r2, r3, #8
 8006e06:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	f103 0c08 	add.w	ip, r3, #8
 8006e12:	e84c 2100 	strex	r1, r2, [ip]
 8006e16:	2900      	cmp	r1, #0
 8006e18:	d1f3      	bne.n	8006e02 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e22:	2a01      	cmp	r2, #1
 8006e24:	d107      	bne.n	8006e36 <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	e843 2100 	strex	r1, r2, [r3]
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d1f7      	bne.n	8006e26 <UART_DMAReceiveCplt+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e36:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d104      	bne.n	8006e46 <UART_DMAReceiveCplt+0x84>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006e40:	f7ff ffb0 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
}
 8006e44:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8006e46:	f7ff ff85 	bl	8006d54 <HAL_UART_RxCpltCallback>
}
 8006e4a:	e7fb      	b.n	8006e44 <UART_DMAReceiveCplt+0x82>

08006e4c <UART_SetConfig>:
{
 8006e4c:	b530      	push	{r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e50:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e52:	69c0      	ldr	r0, [r0, #28]
{
 8006e54:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e56:	6921      	ldr	r1, [r4, #16]
 8006e58:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e5a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	6961      	ldr	r1, [r4, #20]
 8006e60:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e62:	4997      	ldr	r1, [pc, #604]	; (80070c0 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e64:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e66:	4029      	ands	r1, r5
 8006e68:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006e74:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e76:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e78:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7a:	4a92      	ldr	r2, [pc, #584]	; (80070c4 <UART_SetConfig+0x278>)
 8006e7c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006e7e:	bf1c      	itt	ne
 8006e80:	6a22      	ldrne	r2, [r4, #32]
 8006e82:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006e8a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006e8e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e92:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e96:	f022 020f 	bic.w	r2, r2, #15
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9e:	4a8a      	ldr	r2, [pc, #552]	; (80070c8 <UART_SetConfig+0x27c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d11b      	bne.n	8006edc <UART_SetConfig+0x90>
 8006ea4:	4b89      	ldr	r3, [pc, #548]	; (80070cc <UART_SetConfig+0x280>)
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eac:	2b28      	cmp	r3, #40	; 0x28
 8006eae:	d86c      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006eb0:	4a87      	ldr	r2, [pc, #540]	; (80070d0 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	f040 8132 	bne.w	8007120 <UART_SetConfig+0x2d4>
    switch (clocksource)
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	f200 80c0 	bhi.w	8007042 <UART_SetConfig+0x1f6>
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d861      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006ec6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006eca:	00e7      	.short	0x00e7
 8006ecc:	006000ec 	.word	0x006000ec
 8006ed0:	00ef0060 	.word	0x00ef0060
 8006ed4:	00600060 	.word	0x00600060
 8006ed8:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006edc:	4a7d      	ldr	r2, [pc, #500]	; (80070d4 <UART_SetConfig+0x288>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d107      	bne.n	8006ef2 <UART_SetConfig+0xa6>
 8006ee2:	4b7a      	ldr	r3, [pc, #488]	; (80070cc <UART_SetConfig+0x280>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	d84d      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006eee:	4a7a      	ldr	r2, [pc, #488]	; (80070d8 <UART_SetConfig+0x28c>)
 8006ef0:	e7df      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006ef2:	4a7a      	ldr	r2, [pc, #488]	; (80070dc <UART_SetConfig+0x290>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d107      	bne.n	8006f08 <UART_SetConfig+0xbc>
 8006ef8:	4b74      	ldr	r3, [pc, #464]	; (80070cc <UART_SetConfig+0x280>)
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d842      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f04:	4a76      	ldr	r2, [pc, #472]	; (80070e0 <UART_SetConfig+0x294>)
 8006f06:	e7d4      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f08:	4a76      	ldr	r2, [pc, #472]	; (80070e4 <UART_SetConfig+0x298>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d107      	bne.n	8006f1e <UART_SetConfig+0xd2>
 8006f0e:	4b6f      	ldr	r3, [pc, #444]	; (80070cc <UART_SetConfig+0x280>)
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d837      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f1a:	4a73      	ldr	r2, [pc, #460]	; (80070e8 <UART_SetConfig+0x29c>)
 8006f1c:	e7c9      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f1e:	4a73      	ldr	r2, [pc, #460]	; (80070ec <UART_SetConfig+0x2a0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d107      	bne.n	8006f34 <UART_SetConfig+0xe8>
 8006f24:	4b69      	ldr	r3, [pc, #420]	; (80070cc <UART_SetConfig+0x280>)
 8006f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d82c      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f30:	4a6f      	ldr	r2, [pc, #444]	; (80070f0 <UART_SetConfig+0x2a4>)
 8006f32:	e7be      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f34:	4a6f      	ldr	r2, [pc, #444]	; (80070f4 <UART_SetConfig+0x2a8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d107      	bne.n	8006f4a <UART_SetConfig+0xfe>
 8006f3a:	4b64      	ldr	r3, [pc, #400]	; (80070cc <UART_SetConfig+0x280>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f42:	2b28      	cmp	r3, #40	; 0x28
 8006f44:	d821      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f46:	4a6c      	ldr	r2, [pc, #432]	; (80070f8 <UART_SetConfig+0x2ac>)
 8006f48:	e7b3      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f4a:	4a6c      	ldr	r2, [pc, #432]	; (80070fc <UART_SetConfig+0x2b0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d107      	bne.n	8006f60 <UART_SetConfig+0x114>
 8006f50:	4b5e      	ldr	r3, [pc, #376]	; (80070cc <UART_SetConfig+0x280>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	2b05      	cmp	r3, #5
 8006f5a:	d816      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f5c:	4a68      	ldr	r2, [pc, #416]	; (8007100 <UART_SetConfig+0x2b4>)
 8006f5e:	e7a8      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f60:	4a68      	ldr	r2, [pc, #416]	; (8007104 <UART_SetConfig+0x2b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d107      	bne.n	8006f76 <UART_SetConfig+0x12a>
 8006f66:	4b59      	ldr	r3, [pc, #356]	; (80070cc <UART_SetConfig+0x280>)
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d80b      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8006f72:	4a65      	ldr	r2, [pc, #404]	; (8007108 <UART_SetConfig+0x2bc>)
 8006f74:	e79d      	b.n	8006eb2 <UART_SetConfig+0x66>
 8006f76:	4a53      	ldr	r2, [pc, #332]	; (80070c4 <UART_SetConfig+0x278>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d106      	bne.n	8006f8a <UART_SetConfig+0x13e>
 8006f7c:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8006f80:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d901      	bls.n	8006f8e <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	e00e      	b.n	8006fac <UART_SetConfig+0x160>
 8006f8e:	495f      	ldr	r1, [pc, #380]	; (800710c <UART_SetConfig+0x2c0>)
 8006f90:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d023      	beq.n	8006fde <UART_SetConfig+0x192>
 8006f96:	d811      	bhi.n	8006fbc <UART_SetConfig+0x170>
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d016      	beq.n	8006fca <UART_SetConfig+0x17e>
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d019      	beq.n	8006fd4 <UART_SetConfig+0x188>
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d1f2      	bne.n	8006f8a <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fa4:	f7fe fd96 	bl	8005ad4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8006fa8:	bb10      	cbnz	r0, 8006ff0 <UART_SetConfig+0x1a4>
 8006faa:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8006fac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006fb0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006fb2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006fb4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8006fb8:	b007      	add	sp, #28
 8006fba:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d03e      	beq.n	800703e <UART_SetConfig+0x1f2>
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	d1e2      	bne.n	8006f8a <UART_SetConfig+0x13e>
 8006fc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fc8:	e012      	b.n	8006ff0 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fca:	4668      	mov	r0, sp
 8006fcc:	f7fe fd94 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fd0:	9801      	ldr	r0, [sp, #4]
        break;
 8006fd2:	e7e9      	b.n	8006fa8 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd4:	a803      	add	r0, sp, #12
 8006fd6:	f7fe fe37 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fda:	9804      	ldr	r0, [sp, #16]
        break;
 8006fdc:	e7e4      	b.n	8006fa8 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	484b      	ldr	r0, [pc, #300]	; (8007110 <UART_SetConfig+0x2c4>)
 8006fe2:	f013 0f20 	tst.w	r3, #32
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fe8:	6813      	ldr	r3, [r2, #0]
 8006fea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006fee:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ff0:	4b48      	ldr	r3, [pc, #288]	; (8007114 <UART_SetConfig+0x2c8>)
 8006ff2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ff4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ff6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ffa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ffe:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007002:	4299      	cmp	r1, r3
 8007004:	d8c1      	bhi.n	8006f8a <UART_SetConfig+0x13e>
 8007006:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800700a:	d8be      	bhi.n	8006f8a <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700c:	2300      	movs	r3, #0
 800700e:	4619      	mov	r1, r3
 8007010:	f7f9 f9ce 	bl	80003b0 <__aeabi_uldivmod>
 8007014:	462a      	mov	r2, r5
 8007016:	0209      	lsls	r1, r1, #8
 8007018:	086b      	lsrs	r3, r5, #1
 800701a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800701e:	0200      	lsls	r0, r0, #8
 8007020:	18c0      	adds	r0, r0, r3
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	f141 0100 	adc.w	r1, r1, #0
 800702a:	f7f9 f9c1 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800702e:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <UART_SetConfig+0x2cc>)
 8007030:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007034:	429a      	cmp	r2, r3
 8007036:	d8a8      	bhi.n	8006f8a <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	60d8      	str	r0, [r3, #12]
 800703c:	e7b5      	b.n	8006faa <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 800703e:	4837      	ldr	r0, [pc, #220]	; (800711c <UART_SetConfig+0x2d0>)
 8007040:	e7d6      	b.n	8006ff0 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8007042:	2b20      	cmp	r3, #32
 8007044:	d03a      	beq.n	80070bc <UART_SetConfig+0x270>
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d00b      	beq.n	8007062 <UART_SetConfig+0x216>
 800704a:	2b10      	cmp	r3, #16
 800704c:	d19d      	bne.n	8006f8a <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704e:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <UART_SetConfig+0x280>)
 8007050:	482f      	ldr	r0, [pc, #188]	; (8007110 <UART_SetConfig+0x2c4>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	f012 0f20 	tst.w	r2, #32
 8007058:	d003      	beq.n	8007062 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007060:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007062:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <UART_SetConfig+0x2c8>)
 8007066:	6862      	ldr	r2, [r4, #4]
 8007068:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800706c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007070:	0850      	lsrs	r0, r2, #1
 8007072:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007076:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707e:	f1a0 0210 	sub.w	r2, r0, #16
 8007082:	429a      	cmp	r2, r3
 8007084:	d881      	bhi.n	8006f8a <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007086:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800708e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007090:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8007092:	4318      	orrs	r0, r3
 8007094:	60d0      	str	r0, [r2, #12]
 8007096:	e788      	b.n	8006faa <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fd ff28 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800709c:	2800      	cmp	r0, #0
 800709e:	d084      	beq.n	8006faa <UART_SetConfig+0x15e>
 80070a0:	e7df      	b.n	8007062 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a2:	f7fd ff35 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
        break;
 80070a6:	e7f9      	b.n	800709c <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a8:	4668      	mov	r0, sp
 80070aa:	f7fe fd25 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070ae:	9801      	ldr	r0, [sp, #4]
        break;
 80070b0:	e7f4      	b.n	800709c <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b2:	a803      	add	r0, sp, #12
 80070b4:	f7fe fdc8 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070b8:	9804      	ldr	r0, [sp, #16]
        break;
 80070ba:	e7ef      	b.n	800709c <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 80070bc:	4817      	ldr	r0, [pc, #92]	; (800711c <UART_SetConfig+0x2d0>)
 80070be:	e7d0      	b.n	8007062 <UART_SetConfig+0x216>
 80070c0:	cfff69f3 	.word	0xcfff69f3
 80070c4:	58000c00 	.word	0x58000c00
 80070c8:	40011000 	.word	0x40011000
 80070cc:	58024400 	.word	0x58024400
 80070d0:	0800ba87 	.word	0x0800ba87
 80070d4:	40004400 	.word	0x40004400
 80070d8:	0800bab0 	.word	0x0800bab0
 80070dc:	40004800 	.word	0x40004800
 80070e0:	0800bab0 	.word	0x0800bab0
 80070e4:	40004c00 	.word	0x40004c00
 80070e8:	0800bab0 	.word	0x0800bab0
 80070ec:	40005000 	.word	0x40005000
 80070f0:	0800bab0 	.word	0x0800bab0
 80070f4:	40011400 	.word	0x40011400
 80070f8:	0800ba87 	.word	0x0800ba87
 80070fc:	40007800 	.word	0x40007800
 8007100:	0800bab0 	.word	0x0800bab0
 8007104:	40007c00 	.word	0x40007c00
 8007108:	0800bab0 	.word	0x0800bab0
 800710c:	0800bab6 	.word	0x0800bab6
 8007110:	03d09000 	.word	0x03d09000
 8007114:	0800babc 	.word	0x0800babc
 8007118:	000ffcff 	.word	0x000ffcff
 800711c:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8007120:	2b08      	cmp	r3, #8
 8007122:	d817      	bhi.n	8007154 <UART_SetConfig+0x308>
 8007124:	2b08      	cmp	r3, #8
 8007126:	f63f af30 	bhi.w	8006f8a <UART_SetConfig+0x13e>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x2e4>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007197 	.word	0x08007197
 8007134:	080071a3 	.word	0x080071a3
 8007138:	08006f8b 	.word	0x08006f8b
 800713c:	08006f8b 	.word	0x08006f8b
 8007140:	080071a9 	.word	0x080071a9
 8007144:	08006f8b 	.word	0x08006f8b
 8007148:	08006f8b 	.word	0x08006f8b
 800714c:	08006f8b 	.word	0x08006f8b
 8007150:	080071b3 	.word	0x080071b3
 8007154:	2b20      	cmp	r3, #32
 8007156:	d031      	beq.n	80071bc <UART_SetConfig+0x370>
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d031      	beq.n	80071c0 <UART_SetConfig+0x374>
 800715c:	2b10      	cmp	r3, #16
 800715e:	f47f af14 	bne.w	8006f8a <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007162:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <UART_SetConfig+0x37c>)
 8007164:	4819      	ldr	r0, [pc, #100]	; (80071cc <UART_SetConfig+0x380>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f012 0f20 	tst.w	r2, #32
 800716c:	d003      	beq.n	8007176 <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007174:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007176:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007178:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <UART_SetConfig+0x384>)
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007180:	fbb0 f0f2 	udiv	r0, r0, r2
 8007184:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007188:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007190:	f1a0 0210 	sub.w	r2, r0, #16
 8007194:	e74e      	b.n	8007034 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007196:	f7fd fea9 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800719a:	2800      	cmp	r0, #0
 800719c:	f43f af05 	beq.w	8006faa <UART_SetConfig+0x15e>
 80071a0:	e7e9      	b.n	8007176 <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a2:	f7fd feb5 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
        break;
 80071a6:	e7f8      	b.n	800719a <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a8:	4668      	mov	r0, sp
 80071aa:	f7fe fca5 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071ae:	9801      	ldr	r0, [sp, #4]
        break;
 80071b0:	e7f3      	b.n	800719a <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b2:	a803      	add	r0, sp, #12
 80071b4:	f7fe fd48 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071b8:	9804      	ldr	r0, [sp, #16]
        break;
 80071ba:	e7ee      	b.n	800719a <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 80071bc:	4805      	ldr	r0, [pc, #20]	; (80071d4 <UART_SetConfig+0x388>)
 80071be:	e7da      	b.n	8007176 <UART_SetConfig+0x32a>
    switch (clocksource)
 80071c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80071c4:	e7d7      	b.n	8007176 <UART_SetConfig+0x32a>
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	0800babc 	.word	0x0800babc
 80071d4:	003d0900 	.word	0x003d0900

080071d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071da:	07da      	lsls	r2, r3, #31
{
 80071dc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071de:	d506      	bpl.n	80071ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e0:	6801      	ldr	r1, [r0, #0]
 80071e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80071e4:	684a      	ldr	r2, [r1, #4]
 80071e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80071ea:	4322      	orrs	r2, r4
 80071ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ee:	079c      	lsls	r4, r3, #30
 80071f0:	d506      	bpl.n	8007200 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f2:	6801      	ldr	r1, [r0, #0]
 80071f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80071f6:	684a      	ldr	r2, [r1, #4]
 80071f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071fc:	4322      	orrs	r2, r4
 80071fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007200:	0759      	lsls	r1, r3, #29
 8007202:	d506      	bpl.n	8007212 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007204:	6801      	ldr	r1, [r0, #0]
 8007206:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007208:	684a      	ldr	r2, [r1, #4]
 800720a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800720e:	4322      	orrs	r2, r4
 8007210:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007212:	071a      	lsls	r2, r3, #28
 8007214:	d506      	bpl.n	8007224 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007216:	6801      	ldr	r1, [r0, #0]
 8007218:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800721a:	684a      	ldr	r2, [r1, #4]
 800721c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007220:	4322      	orrs	r2, r4
 8007222:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007224:	06dc      	lsls	r4, r3, #27
 8007226:	d506      	bpl.n	8007236 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007228:	6801      	ldr	r1, [r0, #0]
 800722a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800722c:	688a      	ldr	r2, [r1, #8]
 800722e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007232:	4322      	orrs	r2, r4
 8007234:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007236:	0699      	lsls	r1, r3, #26
 8007238:	d506      	bpl.n	8007248 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800723a:	6801      	ldr	r1, [r0, #0]
 800723c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800723e:	688a      	ldr	r2, [r1, #8]
 8007240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007244:	4322      	orrs	r2, r4
 8007246:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007248:	065a      	lsls	r2, r3, #25
 800724a:	d510      	bpl.n	800726e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800724c:	6801      	ldr	r1, [r0, #0]
 800724e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007250:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007252:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007256:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800725a:	ea42 0204 	orr.w	r2, r2, r4
 800725e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007260:	d105      	bne.n	800726e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007262:	684a      	ldr	r2, [r1, #4]
 8007264:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007266:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800726a:	4322      	orrs	r2, r4
 800726c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726e:	061b      	lsls	r3, r3, #24
 8007270:	d506      	bpl.n	8007280 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007272:	6802      	ldr	r2, [r0, #0]
 8007274:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007276:	6853      	ldr	r3, [r2, #4]
 8007278:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800727c:	430b      	orrs	r3, r1
 800727e:	6053      	str	r3, [r2, #4]
}
 8007280:	bd10      	pop	{r4, pc}

08007282 <UART_WaitOnFlagUntilTimeout>:
{
 8007282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007286:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800728a:	4604      	mov	r4, r0
 800728c:	460e      	mov	r6, r1
 800728e:	4615      	mov	r5, r2
 8007290:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	69d3      	ldr	r3, [r2, #28]
 8007296:	ea36 0303 	bics.w	r3, r6, r3
 800729a:	bf0c      	ite	eq
 800729c:	2301      	moveq	r3, #1
 800729e:	2300      	movne	r3, #0
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	d001      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80072a4:	2000      	movs	r0, #0
 80072a6:	e027      	b.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80072a8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80072ac:	d0f2      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fb f919 	bl	80024e4 <HAL_GetTick>
 80072b2:	1bc0      	subs	r0, r0, r7
 80072b4:	4540      	cmp	r0, r8
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	d802      	bhi.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x3e>
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d11d      	bne.n	80072fc <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	e840 3200 	strex	r2, r3, [r0]
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	d1f7      	bne.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	f100 0308 	add.w	r3, r0, #8
 80072d4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	f100 0108 	add.w	r1, r0, #8
 80072e0:	e841 3200 	strex	r2, r3, [r1]
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	d1f3      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80072e8:	2320      	movs	r3, #32
 80072ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 80072f2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80072f4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072fc:	6803      	ldr	r3, [r0, #0]
 80072fe:	075a      	lsls	r2, r3, #29
 8007300:	d5c7      	bpl.n	8007292 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007302:	69c3      	ldr	r3, [r0, #28]
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	d5c4      	bpl.n	8007292 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800730c:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	e840 3200 	strex	r2, r3, [r0]
 800731a:	2a00      	cmp	r2, #0
 800731c:	d1f7      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	f100 0308 	add.w	r3, r0, #8
 8007322:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007326:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	f100 0108 	add.w	r1, r0, #8
 800732e:	e841 3200 	strex	r2, r3, [r1]
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1f3      	bne.n	800731e <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8007336:	2320      	movs	r3, #32
 8007338:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800733c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007340:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007344:	e7d5      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x70>

08007346 <HAL_UART_Transmit>:
{
 8007346:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800734a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800734c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007350:	4604      	mov	r4, r0
 8007352:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8007354:	2b20      	cmp	r3, #32
{
 8007356:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007358:	d150      	bne.n	80073fc <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800735a:	2900      	cmp	r1, #0
 800735c:	d04c      	beq.n	80073f8 <HAL_UART_Transmit+0xb2>
 800735e:	2a00      	cmp	r2, #0
 8007360:	d04a      	beq.n	80073f8 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8007362:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007366:	2b01      	cmp	r3, #1
 8007368:	d048      	beq.n	80073fc <HAL_UART_Transmit+0xb6>
 800736a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800736e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007372:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007378:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800737c:	f7fb f8b2 	bl	80024e4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007380:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8007382:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8007384:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007388:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800738c:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007390:	d103      	bne.n	800739a <HAL_UART_Transmit+0x54>
 8007392:	6922      	ldr	r2, [r4, #16]
 8007394:	b90a      	cbnz	r2, 800739a <HAL_UART_Transmit+0x54>
 8007396:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007398:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800739a:	2200      	movs	r2, #0
 800739c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80073a0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073a4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80073a8:	b292      	uxth	r2, r2
 80073aa:	b942      	cbnz	r2, 80073be <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073ac:	2140      	movs	r1, #64	; 0x40
 80073ae:	4620      	mov	r0, r4
 80073b0:	f7ff ff67 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 80073b4:	b958      	cbnz	r0, 80073ce <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80073b6:	2320      	movs	r3, #32
 80073b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80073bc:	e008      	b.n	80073d0 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073be:	2200      	movs	r2, #0
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	4620      	mov	r0, r4
 80073c4:	9303      	str	r3, [sp, #12]
 80073c6:	f7ff ff5c 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	b118      	cbz	r0, 80073d6 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 80073ce:	2003      	movs	r0, #3
}
 80073d0:	b004      	add	sp, #16
 80073d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d6:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80073d8:	b95e      	cbnz	r6, 80073f2 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073da:	f835 2b02 	ldrh.w	r2, [r5], #2
 80073de:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073e2:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80073e4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 80073e8:	3a01      	subs	r2, #1
 80073ea:	b292      	uxth	r2, r2
 80073ec:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 80073f0:	e7d6      	b.n	80073a0 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f2:	f816 2b01 	ldrb.w	r2, [r6], #1
 80073f6:	e7f4      	b.n	80073e2 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7e9      	b.n	80073d0 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80073fc:	2002      	movs	r0, #2
 80073fe:	e7e7      	b.n	80073d0 <HAL_UART_Transmit+0x8a>

08007400 <UART_CheckIdleState>:
{
 8007400:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007402:	2500      	movs	r5, #0
{
 8007404:	4604      	mov	r4, r0
 8007406:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800740c:	f7fb f86a 	bl	80024e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007410:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007412:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	0711      	lsls	r1, r2, #28
 8007418:	d417      	bmi.n	800744a <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	0752      	lsls	r2, r2, #29
 8007420:	d509      	bpl.n	8007436 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007422:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800742a:	4620      	mov	r0, r4
 800742c:	9200      	str	r2, [sp, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	f7ff ff27 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 8007434:	b9b0      	cbnz	r0, 8007464 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8007436:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800743a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800743e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007442:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8007448:	e00d      	b.n	8007466 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800744e:	9003      	str	r0, [sp, #12]
 8007450:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007454:	4620      	mov	r0, r4
 8007456:	9200      	str	r2, [sp, #0]
 8007458:	462a      	mov	r2, r5
 800745a:	f7ff ff12 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	2800      	cmp	r0, #0
 8007462:	d0da      	beq.n	800741a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8007464:	2003      	movs	r0, #3
}
 8007466:	b005      	add	sp, #20
 8007468:	bd30      	pop	{r4, r5, pc}

0800746a <HAL_UART_Init>:
{
 800746a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800746c:	4604      	mov	r4, r0
 800746e:	b350      	cbz	r0, 80074c6 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007470:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007474:	b91b      	cbnz	r3, 800747e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8007476:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800747a:	f7fa fe11 	bl	80020a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800747e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007480:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007482:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8007484:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007490:	f7ff fcdc 	bl	8006e4c <UART_SetConfig>
 8007494:	2801      	cmp	r0, #1
 8007496:	d016      	beq.n	80074c6 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800749a:	b113      	cbz	r3, 80074a2 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800749c:	4620      	mov	r0, r4
 800749e:	f7ff fe9b 	bl	80071d8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80074a4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074b4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
}
 80074bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80074c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80074c2:	f7ff bf9d 	b.w	8007400 <UART_CheckIdleState>
}
 80074c6:	2001      	movs	r0, #1
 80074c8:	bd10      	pop	{r4, pc}
	...

080074cc <UART_Start_Receive_DMA>:
{
 80074cc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074ce:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	2500      	movs	r5, #0
{
 80074d2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80074d4:	6581      	str	r1, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d6:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  huart->RxXferSize = Size;
 80074da:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074de:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 80074e2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80074e4:	b1c0      	cbz	r0, 8007518 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074e6:	4b20      	ldr	r3, [pc, #128]	; (8007568 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80074e8:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074ec:	4b1f      	ldr	r3, [pc, #124]	; (800756c <UART_Start_Receive_DMA+0xa0>)
 80074ee:	6403      	str	r3, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074f0:	4b1f      	ldr	r3, [pc, #124]	; (8007570 <UART_Start_Receive_DMA+0xa4>)
    huart->hdmarx->XferAbortCallback = NULL;
 80074f2:	e9c0 3513 	strd	r3, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80074f6:	4613      	mov	r3, r2
 80074f8:	460a      	mov	r2, r1
 80074fa:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80074fe:	f7fc f8a7 	bl	8003650 <HAL_DMA_Start_IT>
 8007502:	b148      	cbz	r0, 8007518 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007504:	2310      	movs	r3, #16
      return HAL_ERROR;
 8007506:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8007508:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800750c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->RxState = HAL_UART_STATE_READY;
 8007510:	2320      	movs	r3, #32
 8007512:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8007516:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(huart);
 8007518:	2300      	movs	r3, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 800751a:	6922      	ldr	r2, [r4, #16]
  __HAL_UNLOCK(huart);
 800751c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	b13a      	cbz	r2, 8007534 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	e843 2100 	strex	r1, r2, [r3]
 8007530:	2900      	cmp	r1, #0
 8007532:	d1f7      	bne.n	8007524 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	f103 0208 	add.w	r2, r3, #8
 8007538:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	f103 0008 	add.w	r0, r3, #8
 8007544:	e840 2100 	strex	r1, r2, [r0]
 8007548:	2900      	cmp	r1, #0
 800754a:	d1f3      	bne.n	8007534 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f103 0208 	add.w	r2, r3, #8
 8007550:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	f103 0108 	add.w	r1, r3, #8
 800755c:	e841 2000 	strex	r0, r2, [r1]
 8007560:	2800      	cmp	r0, #0
 8007562:	d1f3      	bne.n	800754c <UART_Start_Receive_DMA+0x80>
 8007564:	e7d7      	b.n	8007516 <UART_Start_Receive_DMA+0x4a>
 8007566:	bf00      	nop
 8007568:	08006dc3 	.word	0x08006dc3
 800756c:	08006da7 	.word	0x08006da7
 8007570:	08006d5b 	.word	0x08006d5b

08007574 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007574:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007578:	2b20      	cmp	r3, #32
{
 800757a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800757c:	d11f      	bne.n	80075be <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800757e:	b1d9      	cbz	r1, 80075b8 <HAL_UART_Receive_DMA+0x44>
 8007580:	b1d2      	cbz	r2, 80075b8 <HAL_UART_Receive_DMA+0x44>
    __HAL_LOCK(huart);
 8007582:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007586:	2b01      	cmp	r3, #1
 8007588:	d019      	beq.n	80075be <HAL_UART_Receive_DMA+0x4a>
 800758a:	2301      	movs	r3, #1
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800758c:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800758e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	2300      	movs	r3, #0
 8007594:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <HAL_UART_Receive_DMA+0x50>)
 8007598:	429c      	cmp	r4, r3
 800759a:	d00a      	beq.n	80075b2 <HAL_UART_Receive_DMA+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	d507      	bpl.n	80075b2 <HAL_UART_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	e844 3500 	strex	r5, r3, [r4]
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	d1f7      	bne.n	80075a2 <HAL_UART_Receive_DMA+0x2e>
}
 80075b2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075b4:	f7ff bf8a 	b.w	80074cc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80075b8:	2001      	movs	r0, #1
}
 80075ba:	bc30      	pop	{r4, r5}
 80075bc:	4770      	bx	lr
    return HAL_BUSY;
 80075be:	2002      	movs	r0, #2
 80075c0:	e7fb      	b.n	80075ba <HAL_UART_Receive_DMA+0x46>
 80075c2:	bf00      	nop
 80075c4:	58000c00 	.word	0x58000c00

080075c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80075ca:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075cc:	b91b      	cbnz	r3, 80075d6 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80075ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80075d2:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075d4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075d6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d8:	4d0a      	ldr	r5, [pc, #40]	; (8007604 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075da:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075dc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80075de:	4c0a      	ldr	r4, [pc, #40]	; (8007608 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075e0:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075e4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80075e8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80075f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075f4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80075f6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80075fe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8007602:	e7e7      	b.n	80075d4 <UARTEx_SetNbDataToProcess+0xc>
 8007604:	0800badc 	.word	0x0800badc
 8007608:	0800bad4 	.word	0x0800bad4

0800760c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800760c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007610:	2b01      	cmp	r3, #1
 8007612:	d014      	beq.n	800763e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007614:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007616:	2324      	movs	r3, #36	; 0x24
 8007618:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800761e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007620:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800762a:	2300      	movs	r3, #0
 800762c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800762e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007630:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8007632:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007636:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 800763a:	4618      	mov	r0, r3
 800763c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800763e:	2002      	movs	r0, #2
}
 8007640:	4770      	bx	lr

08007642 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007642:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007644:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8007648:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800764a:	2b01      	cmp	r3, #1
 800764c:	d01b      	beq.n	8007686 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800764e:	2301      	movs	r3, #1
 8007650:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007654:	2324      	movs	r3, #36	; 0x24
 8007656:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800765a:	6803      	ldr	r3, [r0, #0]
 800765c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800766c:	4311      	orrs	r1, r2
 800766e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007670:	f7ff ffaa 	bl	80075c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007674:	6803      	ldr	r3, [r0, #0]
 8007676:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007678:	2320      	movs	r3, #32
 800767a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800767e:	2000      	movs	r0, #0
 8007680:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007684:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007686:	2002      	movs	r0, #2
 8007688:	e7fc      	b.n	8007684 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800768a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800768a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800768c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8007690:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007692:	2b01      	cmp	r3, #1
 8007694:	d01b      	beq.n	80076ce <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8007696:	2301      	movs	r3, #1
 8007698:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800769c:	2324      	movs	r3, #36	; 0x24
 800769e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a2:	6803      	ldr	r3, [r0, #0]
 80076a4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80076b4:	4311      	orrs	r1, r2
 80076b6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80076b8:	f7ff ff86 	bl	80075c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076bc:	6803      	ldr	r3, [r0, #0]
 80076be:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80076c0:	2320      	movs	r3, #32
 80076c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80076c6:	2000      	movs	r0, #0
 80076c8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80076ce:	2002      	movs	r0, #2
 80076d0:	e7fc      	b.n	80076cc <HAL_UARTEx_SetRxFifoThreshold+0x42>

080076d2 <USART_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status the actual Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
 80076d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d4:	4604      	mov	r4, r0
 80076d6:	460e      	mov	r6, r1
 80076d8:	4617      	mov	r7, r2
 80076da:	461d      	mov	r5, r3
                                                      uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80076dc:	6822      	ldr	r2, [r4, #0]
 80076de:	69d3      	ldr	r3, [r2, #28]
 80076e0:	ea36 0303 	bics.w	r3, r6, r3
 80076e4:	d101      	bne.n	80076ea <USART_WaitOnFlagUntilTimeout.constprop.0+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80076e6:	2000      	movs	r0, #0
 80076e8:	e00f      	b.n	800770a <USART_WaitOnFlagUntilTimeout.constprop.0+0x38>
    if (Timeout != HAL_MAX_DELAY)
 80076ea:	1c6b      	adds	r3, r5, #1
 80076ec:	d0f7      	beq.n	80076de <USART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7fa fef9 	bl	80024e4 <HAL_GetTick>
 80076f2:	1bc0      	subs	r0, r0, r7
 80076f4:	4285      	cmp	r5, r0
 80076f6:	d301      	bcc.n	80076fc <USART_WaitOnFlagUntilTimeout.constprop.0+0x2a>
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	d1ef      	bne.n	80076dc <USART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        husart->State = HAL_USART_STATE_READY;
 80076fc:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80076fe:	2003      	movs	r0, #3
        husart->State = HAL_USART_STATE_READY;
 8007700:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(husart);
 8007704:	2300      	movs	r3, #0
 8007706:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800770c <HAL_USART_Init>:
{
 800770c:	b530      	push	{r4, r5, lr}
  if (husart == NULL)
 800770e:	4604      	mov	r4, r0
{
 8007710:	b089      	sub	sp, #36	; 0x24
  if (husart == NULL)
 8007712:	b918      	cbnz	r0, 800771c <HAL_USART_Init+0x10>
    return HAL_ERROR;
 8007714:	2501      	movs	r5, #1
}
 8007716:	4628      	mov	r0, r5
 8007718:	b009      	add	sp, #36	; 0x24
 800771a:	bd30      	pop	{r4, r5, pc}
  if (husart->State == HAL_USART_STATE_RESET)
 800771c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8007720:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007724:	b91b      	cbnz	r3, 800772e <HAL_USART_Init+0x22>
    husart->Lock = HAL_UNLOCKED;
 8007726:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_USART_MspInit(husart);
 800772a:	f7fa fd99 	bl	8002260 <HAL_USART_MspInit>
  __HAL_USART_DISABLE(husart);
 800772e:	6822      	ldr	r2, [r4, #0]
  husart->State = HAL_USART_STATE_BUSY;
 8007730:	2302      	movs	r3, #2
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007732:	6921      	ldr	r1, [r4, #16]
  husart->State = HAL_USART_STATE_BUSY;
 8007734:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_USART_DISABLE(husart);
 8007738:	6813      	ldr	r3, [r2, #0]
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007740:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007742:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007744:	430b      	orrs	r3, r1
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007746:	497c      	ldr	r1, [pc, #496]	; (8007938 <HAL_USART_Init+0x22c>)
 8007748:	4001      	ands	r1, r0
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
  tmpreg |= (uint32_t)husart->Init.StopBits;
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800774a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800774c:	430b      	orrs	r3, r1
 800774e:	6961      	ldr	r1, [r4, #20]
 8007750:	430b      	orrs	r3, r1
 8007752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007756:	6013      	str	r3, [r2, #0]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007758:	6851      	ldr	r1, [r2, #4]
 800775a:	6a23      	ldr	r3, [r4, #32]
 800775c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007760:	4303      	orrs	r3, r0
 8007762:	f021 0109 	bic.w	r1, r1, #9
 8007766:	430b      	orrs	r3, r1
 8007768:	69e1      	ldr	r1, [r4, #28]
 800776a:	430b      	orrs	r3, r1
 800776c:	68e1      	ldr	r1, [r4, #12]
 800776e:	430b      	orrs	r3, r1
 8007770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007774:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8007776:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777a:	f021 010f 	bic.w	r1, r1, #15
 800777e:	4319      	orrs	r1, r3
 8007780:	62d1      	str	r1, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007782:	496e      	ldr	r1, [pc, #440]	; (800793c <HAL_USART_Init+0x230>)
 8007784:	428a      	cmp	r2, r1
 8007786:	d111      	bne.n	80077ac <HAL_USART_Init+0xa0>
 8007788:	4a6d      	ldr	r2, [pc, #436]	; (8007940 <HAL_USART_Init+0x234>)
 800778a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800778c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007790:	2a18      	cmp	r2, #24
 8007792:	f000 80dd 	beq.w	8007950 <HAL_USART_Init+0x244>
 8007796:	d823      	bhi.n	80077e0 <HAL_USART_Init+0xd4>
 8007798:	2a08      	cmp	r2, #8
 800779a:	f000 808c 	beq.w	80078b6 <HAL_USART_Init+0x1aa>
 800779e:	2a10      	cmp	r2, #16
 80077a0:	f000 80af 	beq.w	8007902 <HAL_USART_Init+0x1f6>
 80077a4:	b9ca      	cbnz	r2, 80077da <HAL_USART_Init+0xce>
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      break;
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a6:	f7fd fbb3 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
 80077aa:	e04a      	b.n	8007842 <HAL_USART_Init+0x136>
  USART_GETCLOCKSOURCE(husart, clocksource);
 80077ac:	4965      	ldr	r1, [pc, #404]	; (8007944 <HAL_USART_Init+0x238>)
 80077ae:	428a      	cmp	r2, r1
 80077b0:	d10d      	bne.n	80077ce <HAL_USART_Init+0xc2>
 80077b2:	4a63      	ldr	r2, [pc, #396]	; (8007940 <HAL_USART_Init+0x234>)
 80077b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077b6:	f002 0207 	and.w	r2, r2, #7
 80077ba:	2a05      	cmp	r2, #5
 80077bc:	d80d      	bhi.n	80077da <HAL_USART_Init+0xce>
 80077be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80077c2:	003e      	.short	0x003e
 80077c4:	00a0007a 	.word	0x00a0007a
 80077c8:	018600c7 	.word	0x018600c7
 80077cc:	0014      	.short	0x0014
 80077ce:	495e      	ldr	r1, [pc, #376]	; (8007948 <HAL_USART_Init+0x23c>)
 80077d0:	428a      	cmp	r2, r1
 80077d2:	d0ee      	beq.n	80077b2 <HAL_USART_Init+0xa6>
 80077d4:	495d      	ldr	r1, [pc, #372]	; (800794c <HAL_USART_Init+0x240>)
 80077d6:	428a      	cmp	r2, r1
 80077d8:	d0d6      	beq.n	8007788 <HAL_USART_Init+0x7c>
  uint32_t usartdiv                    = 0x00000000;
 80077da:	2300      	movs	r3, #0
      break;
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      break;
    default:
      ret = HAL_ERROR;
 80077dc:	2501      	movs	r5, #1
 80077de:	e0e6      	b.n	80079ae <HAL_USART_Init+0x2a2>
  USART_GETCLOCKSOURCE(husart, clocksource);
 80077e0:	2a20      	cmp	r2, #32
 80077e2:	f000 8174 	beq.w	8007ace <HAL_USART_Init+0x3c2>
 80077e6:	2a28      	cmp	r2, #40	; 0x28
 80077e8:	d1f7      	bne.n	80077da <HAL_USART_Init+0xce>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 81a2 	beq.w	8007b34 <HAL_USART_Init+0x428>
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f000 81a1 	beq.w	8007b38 <HAL_USART_Init+0x42c>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	f000 81a0 	beq.w	8007b3c <HAL_USART_Init+0x430>
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	f000 819f 	beq.w	8007b40 <HAL_USART_Init+0x434>
 8007802:	2b04      	cmp	r3, #4
 8007804:	f000 819e 	beq.w	8007b44 <HAL_USART_Init+0x438>
 8007808:	2b05      	cmp	r3, #5
 800780a:	f000 819d 	beq.w	8007b48 <HAL_USART_Init+0x43c>
 800780e:	2b06      	cmp	r3, #6
 8007810:	f000 819c 	beq.w	8007b4c <HAL_USART_Init+0x440>
 8007814:	2b07      	cmp	r3, #7
 8007816:	f000 819b 	beq.w	8007b50 <HAL_USART_Init+0x444>
 800781a:	2b08      	cmp	r3, #8
 800781c:	f000 819a 	beq.w	8007b54 <HAL_USART_Init+0x448>
 8007820:	2b09      	cmp	r3, #9
 8007822:	f000 8199 	beq.w	8007b58 <HAL_USART_Init+0x44c>
 8007826:	2b0a      	cmp	r3, #10
 8007828:	f000 8198 	beq.w	8007b5c <HAL_USART_Init+0x450>
 800782c:	2b0b      	cmp	r3, #11
 800782e:	bf14      	ite	ne
 8007830:	2201      	movne	r2, #1
 8007832:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8007836:	6861      	ldr	r1, [r4, #4]
 8007838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783c:	e05b      	b.n	80078f6 <HAL_USART_Init+0x1ea>
      pclk = HAL_RCC_GetPCLK1Freq();
 800783e:	f7fd fb55 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007842:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007844:	b30a      	cbz	r2, 800788a <HAL_USART_Init+0x17e>
 8007846:	2a01      	cmp	r2, #1
 8007848:	d021      	beq.n	800788e <HAL_USART_Init+0x182>
 800784a:	2a02      	cmp	r2, #2
 800784c:	d021      	beq.n	8007892 <HAL_USART_Init+0x186>
 800784e:	2a03      	cmp	r2, #3
 8007850:	d021      	beq.n	8007896 <HAL_USART_Init+0x18a>
 8007852:	2a04      	cmp	r2, #4
 8007854:	d021      	beq.n	800789a <HAL_USART_Init+0x18e>
 8007856:	2a05      	cmp	r2, #5
 8007858:	d021      	beq.n	800789e <HAL_USART_Init+0x192>
 800785a:	2a06      	cmp	r2, #6
 800785c:	d021      	beq.n	80078a2 <HAL_USART_Init+0x196>
 800785e:	2a07      	cmp	r2, #7
 8007860:	d021      	beq.n	80078a6 <HAL_USART_Init+0x19a>
 8007862:	2a08      	cmp	r2, #8
 8007864:	d021      	beq.n	80078aa <HAL_USART_Init+0x19e>
 8007866:	2a09      	cmp	r2, #9
 8007868:	d021      	beq.n	80078ae <HAL_USART_Init+0x1a2>
 800786a:	2a0a      	cmp	r2, #10
 800786c:	d021      	beq.n	80078b2 <HAL_USART_Init+0x1a6>
 800786e:	2a0b      	cmp	r2, #11
 8007870:	bf14      	ite	ne
 8007872:	2201      	movne	r2, #1
 8007874:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	fbb0 f0f2 	udiv	r0, r0, r2
 800787e:	084b      	lsrs	r3, r1, #1
 8007880:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007884:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
 8007888:	e090      	b.n	80079ac <HAL_USART_Init+0x2a0>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800788a:	2201      	movs	r2, #1
 800788c:	e7f4      	b.n	8007878 <HAL_USART_Init+0x16c>
 800788e:	2202      	movs	r2, #2
 8007890:	e7f2      	b.n	8007878 <HAL_USART_Init+0x16c>
 8007892:	2204      	movs	r2, #4
 8007894:	e7f0      	b.n	8007878 <HAL_USART_Init+0x16c>
 8007896:	2206      	movs	r2, #6
 8007898:	e7ee      	b.n	8007878 <HAL_USART_Init+0x16c>
 800789a:	2208      	movs	r2, #8
 800789c:	e7ec      	b.n	8007878 <HAL_USART_Init+0x16c>
 800789e:	220a      	movs	r2, #10
 80078a0:	e7ea      	b.n	8007878 <HAL_USART_Init+0x16c>
 80078a2:	220c      	movs	r2, #12
 80078a4:	e7e8      	b.n	8007878 <HAL_USART_Init+0x16c>
 80078a6:	2210      	movs	r2, #16
 80078a8:	e7e6      	b.n	8007878 <HAL_USART_Init+0x16c>
 80078aa:	2220      	movs	r2, #32
 80078ac:	e7e4      	b.n	8007878 <HAL_USART_Init+0x16c>
 80078ae:	2240      	movs	r2, #64	; 0x40
 80078b0:	e7e2      	b.n	8007878 <HAL_USART_Init+0x16c>
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	e7e0      	b.n	8007878 <HAL_USART_Init+0x16c>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b6:	a802      	add	r0, sp, #8
 80078b8:	f7fe f91e 	bl	8005af8 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 80078bc:	9b03      	ldr	r3, [sp, #12]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 80078be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078c0:	b322      	cbz	r2, 800790c <HAL_USART_Init+0x200>
 80078c2:	2a01      	cmp	r2, #1
 80078c4:	d024      	beq.n	8007910 <HAL_USART_Init+0x204>
 80078c6:	2a02      	cmp	r2, #2
 80078c8:	d024      	beq.n	8007914 <HAL_USART_Init+0x208>
 80078ca:	2a03      	cmp	r2, #3
 80078cc:	d024      	beq.n	8007918 <HAL_USART_Init+0x20c>
 80078ce:	2a04      	cmp	r2, #4
 80078d0:	d024      	beq.n	800791c <HAL_USART_Init+0x210>
 80078d2:	2a05      	cmp	r2, #5
 80078d4:	d024      	beq.n	8007920 <HAL_USART_Init+0x214>
 80078d6:	2a06      	cmp	r2, #6
 80078d8:	d024      	beq.n	8007924 <HAL_USART_Init+0x218>
 80078da:	2a07      	cmp	r2, #7
 80078dc:	d024      	beq.n	8007928 <HAL_USART_Init+0x21c>
 80078de:	2a08      	cmp	r2, #8
 80078e0:	d024      	beq.n	800792c <HAL_USART_Init+0x220>
 80078e2:	2a09      	cmp	r2, #9
 80078e4:	d024      	beq.n	8007930 <HAL_USART_Init+0x224>
 80078e6:	2a0a      	cmp	r2, #10
 80078e8:	d024      	beq.n	8007934 <HAL_USART_Init+0x228>
 80078ea:	2a0b      	cmp	r2, #11
 80078ec:	bf14      	ite	ne
 80078ee:	2201      	movne	r2, #1
 80078f0:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80078f4:	6861      	ldr	r1, [r4, #4]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80078f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80078fa:	084b      	lsrs	r3, r1, #1
 80078fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007900:	e7c0      	b.n	8007884 <HAL_USART_Init+0x178>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007902:	a805      	add	r0, sp, #20
 8007904:	f7fe f9a0 	bl	8005c48 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8007908:	9b06      	ldr	r3, [sp, #24]
 800790a:	e7d8      	b.n	80078be <HAL_USART_Init+0x1b2>
 800790c:	2201      	movs	r2, #1
 800790e:	e7f1      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007910:	2202      	movs	r2, #2
 8007912:	e7ef      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007914:	2204      	movs	r2, #4
 8007916:	e7ed      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007918:	2206      	movs	r2, #6
 800791a:	e7eb      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 800791c:	2208      	movs	r2, #8
 800791e:	e7e9      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007920:	220a      	movs	r2, #10
 8007922:	e7e7      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007924:	220c      	movs	r2, #12
 8007926:	e7e5      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007928:	2210      	movs	r2, #16
 800792a:	e7e3      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 800792c:	2220      	movs	r2, #32
 800792e:	e7e1      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007930:	2240      	movs	r2, #64	; 0x40
 8007932:	e7df      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	e7dd      	b.n	80078f4 <HAL_USART_Init+0x1e8>
 8007938:	cfff69f3 	.word	0xcfff69f3
 800793c:	40011000 	.word	0x40011000
 8007940:	58024400 	.word	0x58024400
 8007944:	40004400 	.word	0x40004400
 8007948:	40004800 	.word	0x40004800
 800794c:	40011400 	.word	0x40011400
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007950:	498b      	ldr	r1, [pc, #556]	; (8007b80 <HAL_USART_Init+0x474>)
 8007952:	680a      	ldr	r2, [r1, #0]
 8007954:	f012 0f20 	tst.w	r2, #32
 8007958:	6862      	ldr	r2, [r4, #4]
 800795a:	f000 8081 	beq.w	8007a60 <HAL_USART_Init+0x354>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800795e:	6808      	ldr	r0, [r1, #0]
 8007960:	4988      	ldr	r1, [pc, #544]	; (8007b84 <HAL_USART_Init+0x478>)
 8007962:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8007966:	40c1      	lsrs	r1, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d063      	beq.n	8007a34 <HAL_USART_Init+0x328>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d063      	beq.n	8007a38 <HAL_USART_Init+0x32c>
 8007970:	2b02      	cmp	r3, #2
 8007972:	d063      	beq.n	8007a3c <HAL_USART_Init+0x330>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d063      	beq.n	8007a40 <HAL_USART_Init+0x334>
 8007978:	2b04      	cmp	r3, #4
 800797a:	d063      	beq.n	8007a44 <HAL_USART_Init+0x338>
 800797c:	2b05      	cmp	r3, #5
 800797e:	d063      	beq.n	8007a48 <HAL_USART_Init+0x33c>
 8007980:	2b06      	cmp	r3, #6
 8007982:	d063      	beq.n	8007a4c <HAL_USART_Init+0x340>
 8007984:	2b07      	cmp	r3, #7
 8007986:	d063      	beq.n	8007a50 <HAL_USART_Init+0x344>
 8007988:	2b08      	cmp	r3, #8
 800798a:	d063      	beq.n	8007a54 <HAL_USART_Init+0x348>
 800798c:	2b09      	cmp	r3, #9
 800798e:	d063      	beq.n	8007a58 <HAL_USART_Init+0x34c>
 8007990:	2b0a      	cmp	r3, #10
 8007992:	d063      	beq.n	8007a5c <HAL_USART_Init+0x350>
 8007994:	2b0b      	cmp	r3, #11
 8007996:	bf14      	ite	ne
 8007998:	2301      	movne	r3, #1
 800799a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800799e:	fbb1 f3f3 	udiv	r3, r1, r3
 80079a2:	0851      	lsrs	r1, r2, #1
 80079a4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80079a8:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret                = HAL_OK;
 80079ac:	2500      	movs	r5, #0
      break;
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80079ae:	f1a3 0110 	sub.w	r1, r3, #16
 80079b2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80079b6:	4291      	cmp	r1, r2
 80079b8:	f200 80d2 	bhi.w	8007b60 <HAL_USART_Init+0x454>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079bc:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
    husart->Instance->BRR = brrtemp;
 80079c4:	6821      	ldr	r1, [r4, #0]
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c6:	b292      	uxth	r2, r2
    husart->Instance->BRR = brrtemp;
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60cb      	str	r3, [r1, #12]
  {
    ret = HAL_ERROR;
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80079cc:	2301      	movs	r3, #1
  husart->NbRxDataToProcess = 1U;

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80079ce:	2200      	movs	r2, #0
  if (USART_SetConfig(husart) == HAL_ERROR)
 80079d0:	429d      	cmp	r5, r3
  husart->NbTxDataToProcess = 1U;
 80079d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 80079d4:	8763      	strh	r3, [r4, #58]	; 0x3a
  husart->TxISR   = NULL;
 80079d6:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
  if (USART_SetConfig(husart) == HAL_ERROR)
 80079da:	f43f ae9b 	beq.w	8007714 <HAL_USART_Init+0x8>
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
 80079e2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80079e6:	6059      	str	r1, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80079e8:	6899      	ldr	r1, [r3, #8]
 80079ea:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80079ee:	6099      	str	r1, [r3, #8]
  __HAL_USART_ENABLE(husart);
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	f041 0101 	orr.w	r1, r1, #1
 80079f6:	6019      	str	r1, [r3, #0]
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80079f8:	65e2      	str	r2, [r4, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079fa:	f7fa fd73 	bl	80024e4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079fe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007a00:	4602      	mov	r2, r0
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	0719      	lsls	r1, r3, #28
 8007a06:	f100 80ad 	bmi.w	8007b64 <HAL_USART_Init+0x458>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	075b      	lsls	r3, r3, #29
 8007a10:	d509      	bpl.n	8007a26 <HAL_USART_Init+0x31a>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff fe59 	bl	80076d2 <USART_WaitOnFlagUntilTimeout.constprop.0>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	f040 80ab 	bne.w	8007b7c <HAL_USART_Init+0x470>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  return HAL_OK;
 8007a32:	e670      	b.n	8007716 <HAL_USART_Init+0xa>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007a34:	2301      	movs	r3, #1
 8007a36:	e7b2      	b.n	800799e <HAL_USART_Init+0x292>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e7b0      	b.n	800799e <HAL_USART_Init+0x292>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	e7ae      	b.n	800799e <HAL_USART_Init+0x292>
 8007a40:	2306      	movs	r3, #6
 8007a42:	e7ac      	b.n	800799e <HAL_USART_Init+0x292>
 8007a44:	2308      	movs	r3, #8
 8007a46:	e7aa      	b.n	800799e <HAL_USART_Init+0x292>
 8007a48:	230a      	movs	r3, #10
 8007a4a:	e7a8      	b.n	800799e <HAL_USART_Init+0x292>
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	e7a6      	b.n	800799e <HAL_USART_Init+0x292>
 8007a50:	2310      	movs	r3, #16
 8007a52:	e7a4      	b.n	800799e <HAL_USART_Init+0x292>
 8007a54:	2320      	movs	r3, #32
 8007a56:	e7a2      	b.n	800799e <HAL_USART_Init+0x292>
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	e7a0      	b.n	800799e <HAL_USART_Init+0x292>
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	e79e      	b.n	800799e <HAL_USART_Init+0x292>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007a60:	b1fb      	cbz	r3, 8007aa2 <HAL_USART_Init+0x396>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d01f      	beq.n	8007aa6 <HAL_USART_Init+0x39a>
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d01f      	beq.n	8007aaa <HAL_USART_Init+0x39e>
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d01f      	beq.n	8007aae <HAL_USART_Init+0x3a2>
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d01f      	beq.n	8007ab2 <HAL_USART_Init+0x3a6>
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	d01f      	beq.n	8007ab6 <HAL_USART_Init+0x3aa>
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d01f      	beq.n	8007aba <HAL_USART_Init+0x3ae>
 8007a7a:	2b07      	cmp	r3, #7
 8007a7c:	d01f      	beq.n	8007abe <HAL_USART_Init+0x3b2>
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d01f      	beq.n	8007ac2 <HAL_USART_Init+0x3b6>
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	d01f      	beq.n	8007ac6 <HAL_USART_Init+0x3ba>
 8007a86:	2b0a      	cmp	r3, #10
 8007a88:	d01f      	beq.n	8007aca <HAL_USART_Init+0x3be>
 8007a8a:	2b0b      	cmp	r3, #11
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8007a94:	493b      	ldr	r1, [pc, #236]	; (8007b84 <HAL_USART_Init+0x478>)
 8007a96:	fbb1 f1f3 	udiv	r1, r1, r3
 8007a9a:	0853      	lsrs	r3, r2, #1
 8007a9c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007aa0:	e782      	b.n	80079a8 <HAL_USART_Init+0x29c>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7f6      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e7f4      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007aaa:	2304      	movs	r3, #4
 8007aac:	e7f2      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007aae:	2306      	movs	r3, #6
 8007ab0:	e7f0      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	e7ee      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007ab6:	230a      	movs	r3, #10
 8007ab8:	e7ec      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007aba:	230c      	movs	r3, #12
 8007abc:	e7ea      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007abe:	2310      	movs	r3, #16
 8007ac0:	e7e8      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	e7e6      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	e7e4      	b.n	8007a94 <HAL_USART_Init+0x388>
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	e7e2      	b.n	8007a94 <HAL_USART_Init+0x388>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007ace:	b1db      	cbz	r3, 8007b08 <HAL_USART_Init+0x3fc>
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d01b      	beq.n	8007b0c <HAL_USART_Init+0x400>
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d01b      	beq.n	8007b10 <HAL_USART_Init+0x404>
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d01b      	beq.n	8007b14 <HAL_USART_Init+0x408>
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d01b      	beq.n	8007b18 <HAL_USART_Init+0x40c>
 8007ae0:	2b05      	cmp	r3, #5
 8007ae2:	d01b      	beq.n	8007b1c <HAL_USART_Init+0x410>
 8007ae4:	2b06      	cmp	r3, #6
 8007ae6:	d01b      	beq.n	8007b20 <HAL_USART_Init+0x414>
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d01b      	beq.n	8007b24 <HAL_USART_Init+0x418>
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d01b      	beq.n	8007b28 <HAL_USART_Init+0x41c>
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d01b      	beq.n	8007b2c <HAL_USART_Init+0x420>
 8007af4:	2b0a      	cmp	r3, #10
 8007af6:	d01b      	beq.n	8007b30 <HAL_USART_Init+0x424>
 8007af8:	2b0b      	cmp	r3, #11
 8007afa:	bf14      	ite	ne
 8007afc:	2201      	movne	r2, #1
 8007afe:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8007b02:	6861      	ldr	r1, [r4, #4]
 8007b04:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <HAL_USART_Init+0x47c>)
 8007b06:	e6f6      	b.n	80078f6 <HAL_USART_Init+0x1ea>
 8007b08:	2201      	movs	r2, #1
 8007b0a:	e7fa      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	e7f8      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b10:	2204      	movs	r2, #4
 8007b12:	e7f6      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b14:	2206      	movs	r2, #6
 8007b16:	e7f4      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b18:	2208      	movs	r2, #8
 8007b1a:	e7f2      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	e7f0      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b20:	220c      	movs	r2, #12
 8007b22:	e7ee      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b24:	2210      	movs	r2, #16
 8007b26:	e7ec      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b28:	2220      	movs	r2, #32
 8007b2a:	e7ea      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	e7e8      	b.n	8007b02 <HAL_USART_Init+0x3f6>
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	e7e6      	b.n	8007b02 <HAL_USART_Init+0x3f6>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007b34:	2201      	movs	r2, #1
 8007b36:	e67e      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b38:	2202      	movs	r2, #2
 8007b3a:	e67c      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	e67a      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b40:	2206      	movs	r2, #6
 8007b42:	e678      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b44:	2208      	movs	r2, #8
 8007b46:	e676      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b48:	220a      	movs	r2, #10
 8007b4a:	e674      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b4c:	220c      	movs	r2, #12
 8007b4e:	e672      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b50:	2210      	movs	r2, #16
 8007b52:	e670      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b54:	2220      	movs	r2, #32
 8007b56:	e66e      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b58:	2240      	movs	r2, #64	; 0x40
 8007b5a:	e66c      	b.n	8007836 <HAL_USART_Init+0x12a>
 8007b5c:	2280      	movs	r2, #128	; 0x80
 8007b5e:	e66a      	b.n	8007836 <HAL_USART_Init+0x12a>
    ret = HAL_ERROR;
 8007b60:	2501      	movs	r5, #1
 8007b62:	e733      	b.n	80079cc <HAL_USART_Init+0x2c0>
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007b64:	9001      	str	r0, [sp, #4]
 8007b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7ff fdaf 	bl	80076d2 <USART_WaitOnFlagUntilTimeout.constprop.0>
 8007b74:	9a01      	ldr	r2, [sp, #4]
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f43f af47 	beq.w	8007a0a <HAL_USART_Init+0x2fe>
      return HAL_TIMEOUT;
 8007b7c:	2503      	movs	r5, #3
 8007b7e:	e5ca      	b.n	8007716 <HAL_USART_Init+0xa>
 8007b80:	58024400 	.word	0x58024400
 8007b84:	03d09000 	.word	0x03d09000
 8007b88:	003d0900 	.word	0x003d0900

08007b8c <USARTEx_SetNbDataToProcess>:
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8007b8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8007b8e:	b530      	push	{r4, r5, lr}
  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8007b90:	b91b      	cbnz	r3, 8007b9a <USARTEx_SetNbDataToProcess+0xe>
  {
    husart->NbTxDataToProcess = 1U;
 8007b92:	2301      	movs	r3, #1
 8007b94:	8783      	strh	r3, [r0, #60]	; 0x3c
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b96:	8743      	strh	r3, [r0, #58]	; 0x3a
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b98:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b9a:	6803      	ldr	r3, [r0, #0]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9c:	4d09      	ldr	r5, [pc, #36]	; (8007bc4 <USARTEx_SetNbDataToProcess+0x38>)
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b9e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007ba0:	6899      	ldr	r1, [r3, #8]
                                (uint16_t)denominator[tx_fifo_threshold];
 8007ba2:	4c09      	ldr	r4, [pc, #36]	; (8007bc8 <USARTEx_SetNbDataToProcess+0x3c>)
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba4:	f3c2 6242 	ubfx	r2, r2, #25, #3
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8007ba8:	0f49      	lsrs	r1, r1, #29
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007baa:	5c6b      	ldrb	r3, [r5, r1]
                                (uint16_t)denominator[tx_fifo_threshold];
 8007bac:	5c61      	ldrb	r1, [r4, r1]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bb4:	8783      	strh	r3, [r0, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb6:	5cab      	ldrb	r3, [r5, r2]
                                (uint16_t)denominator[rx_fifo_threshold];
 8007bb8:	5ca2      	ldrb	r2, [r4, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc0:	e7e9      	b.n	8007b96 <USARTEx_SetNbDataToProcess+0xa>
 8007bc2:	bf00      	nop
 8007bc4:	0800baec 	.word	0x0800baec
 8007bc8:	0800bae4 	.word	0x0800bae4

08007bcc <HAL_USARTEx_DisableFifoMode>:
  __HAL_LOCK(husart);
 8007bcc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	f04f 0302 	mov.w	r3, #2
 8007bd6:	d011      	beq.n	8007bfc <HAL_USARTEx_DisableFifoMode+0x30>
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007bd8:	6802      	ldr	r2, [r0, #0]
  husart->State = HAL_USART_STATE_BUSY;
 8007bda:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007bde:	6811      	ldr	r1, [r2, #0]
  __HAL_USART_DISABLE(husart);
 8007be0:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007be2:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_USART_DISABLE(husart);
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	6013      	str	r3, [r2, #0]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	6443      	str	r3, [r0, #68]	; 0x44
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007bf0:	6011      	str	r1, [r2, #0]
  husart->State = HAL_USART_STATE_READY;
 8007bf2:	2201      	movs	r2, #1
  __HAL_UNLOCK(husart);
 8007bf4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  husart->State = HAL_USART_STATE_READY;
 8007bf8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
  __HAL_LOCK(husart);
 8007bfc:	4618      	mov	r0, r3
}
 8007bfe:	4770      	bx	lr

08007c00 <HAL_USARTEx_SetTxFifoThreshold>:
{
 8007c00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(husart);
 8007c02:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8007c06:	4604      	mov	r4, r0
  __HAL_LOCK(husart);
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	f04f 0302 	mov.w	r3, #2
 8007c0e:	d019      	beq.n	8007c44 <HAL_USARTEx_SetTxFifoThreshold+0x44>
  husart->State = HAL_USART_STATE_BUSY;
 8007c10:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_LOCK(husart);
 8007c14:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007c16:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(husart);
 8007c18:	f880 5058 	strb.w	r5, [r0, #88]	; 0x58
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007c1c:	681e      	ldr	r6, [r3, #0]
  __HAL_USART_DISABLE(husart);
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007c2c:	4311      	orrs	r1, r2
 8007c2e:	6099      	str	r1, [r3, #8]
  USARTEx_SetNbDataToProcess(husart);
 8007c30:	f7ff ffac 	bl	8007b8c <USARTEx_SetNbDataToProcess>
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007c34:	6803      	ldr	r3, [r0, #0]
 8007c36:	601e      	str	r6, [r3, #0]
  husart->State = HAL_USART_STATE_READY;
 8007c38:	f880 5059 	strb.w	r5, [r0, #89]	; 0x59
  __HAL_UNLOCK(husart);
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(husart);
 8007c44:	4618      	mov	r0, r3
 8007c46:	e7fc      	b.n	8007c42 <HAL_USARTEx_SetTxFifoThreshold+0x42>

08007c48 <HAL_USARTEx_SetRxFifoThreshold>:
{
 8007c48:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(husart);
 8007c4a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8007c4e:	4604      	mov	r4, r0
  __HAL_LOCK(husart);
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f04f 0302 	mov.w	r3, #2
 8007c56:	d019      	beq.n	8007c8c <HAL_USARTEx_SetRxFifoThreshold+0x44>
  husart->State = HAL_USART_STATE_BUSY;
 8007c58:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_LOCK(husart);
 8007c5c:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007c5e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(husart);
 8007c60:	f880 5058 	strb.w	r5, [r0, #88]	; 0x58
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007c64:	681e      	ldr	r6, [r3, #0]
  __HAL_USART_DISABLE(husart);
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007c74:	4311      	orrs	r1, r2
 8007c76:	6099      	str	r1, [r3, #8]
  USARTEx_SetNbDataToProcess(husart);
 8007c78:	f7ff ff88 	bl	8007b8c <USARTEx_SetNbDataToProcess>
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007c7c:	6803      	ldr	r3, [r0, #0]
 8007c7e:	601e      	str	r6, [r3, #0]
  husart->State = HAL_USART_STATE_READY;
 8007c80:	f880 5059 	strb.w	r5, [r0, #89]	; 0x59
  __HAL_UNLOCK(husart);
 8007c84:	2000      	movs	r0, #0
 8007c86:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(husart);
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	e7fc      	b.n	8007c8a <HAL_USARTEx_SetRxFifoThreshold+0x42>

08007c90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c90:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007c92:	f000 f9d3 	bl	800803c <vTaskStartScheduler>
  
  return osOK;
}
 8007c96:	2000      	movs	r0, #0
 8007c98:	bd08      	pop	{r3, pc}

08007c9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c9a:	b530      	push	{r4, r5, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ca2:	8a22      	ldrh	r2, [r4, #16]
 8007ca4:	ad03      	add	r5, sp, #12
 8007ca6:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8007caa:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8007cac:	bf14      	ite	ne
 8007cae:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007cb0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cb2:	e9d0 1000 	ldrd	r1, r0, [r0]
 8007cb6:	e9cd 4500 	strd	r4, r5, [sp]
 8007cba:	f000 f8dd 	bl	8007e78 <xTaskCreate>
 8007cbe:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007cc0:	bf0c      	ite	eq
 8007cc2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8007cc4:	2000      	movne	r0, #0
}
 8007cc6:	b005      	add	sp, #20
 8007cc8:	bd30      	pop	{r4, r5, pc}

08007cca <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cca:	2801      	cmp	r0, #1
{
 8007ccc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cce:	bf38      	it	cc
 8007cd0:	2001      	movcc	r0, #1
 8007cd2:	f000 fb0d 	bl	80082f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	bd08      	pop	{r3, pc}

08007cda <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cda:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce2:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce4:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce6:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cee:	4770      	bx	lr

08007cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf4:	4770      	bx	lr

08007cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cf6:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cf8:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007cfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cfc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d02:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007d04:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007d06:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007d08:	3301      	adds	r3, #1
 8007d0a:	6003      	str	r3, [r0, #0]
}
 8007d0c:	4770      	bx	lr

08007d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d0e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d10:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d12:	1c63      	adds	r3, r4, #1
 8007d14:	d10a      	bne.n	8007d2c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d16:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d1c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d1e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d20:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007d22:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007d24:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007d26:	3301      	adds	r3, #1
 8007d28:	6003      	str	r3, [r0, #0]
}
 8007d2a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d2c:	f100 0208 	add.w	r2, r0, #8
 8007d30:	4613      	mov	r3, r2
 8007d32:	6852      	ldr	r2, [r2, #4]
 8007d34:	6815      	ldr	r5, [r2, #0]
 8007d36:	42a5      	cmp	r5, r4
 8007d38:	d9fa      	bls.n	8007d30 <vListInsert+0x22>
 8007d3a:	e7ed      	b.n	8007d18 <vListInsert+0xa>

08007d3c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d3c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d3e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007d42:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d44:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d46:	6859      	ldr	r1, [r3, #4]
 8007d48:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d4a:	bf08      	it	eq
 8007d4c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d4e:	2200      	movs	r2, #0
 8007d50:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	3a01      	subs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d58:	6818      	ldr	r0, [r3, #0]
}
 8007d5a:	4770      	bx	lr

08007d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d5c:	b580      	push	{r7, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d5e:	4d17      	ldr	r5, [pc, #92]	; (8007dbc <prvIdleTask+0x60>)
		{
			taskENTER_CRITICAL();
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d60:	4f17      	ldr	r7, [pc, #92]	; (8007dc0 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8007d62:	4e18      	ldr	r6, [pc, #96]	; (8007dc4 <prvIdleTask+0x68>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b973      	cbnz	r3, 8007d86 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d68:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <prvIdleTask+0x6c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d9f8      	bls.n	8007d62 <prvIdleTask+0x6>
				taskYIELD();
 8007d70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	e7ed      	b.n	8007d62 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007d86:	f000 fb7d 	bl	8008484 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d8e:	1d20      	adds	r0, r4, #4
 8007d90:	f7ff ffd4 	bl	8007d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8007da0:	f000 fb90 	bl	80084c4 <vPortExitCritical>
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007da4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8007da8:	f001 ff2a 	bl	8009c00 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007dac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007dae:	f000 fd3b 	bl	8008828 <vPortFree>
			vPortFree( pxTCB );
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fd38 	bl	8008828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007db8:	e7d4      	b.n	8007d64 <prvIdleTask+0x8>
 8007dba:	bf00      	nop
 8007dbc:	24000d54 	.word	0x24000d54
 8007dc0:	24000dc8 	.word	0x24000dc8
 8007dc4:	24000d50 	.word	0x24000d50
 8007dc8:	24000cc4 	.word	0x24000cc4

08007dcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dce:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8007dd0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd2:	4e1a      	ldr	r6, [pc, #104]	; (8007e3c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8007dd4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007dd6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd8:	6830      	ldr	r0, [r6, #0]
 8007dda:	3004      	adds	r0, #4
 8007ddc:	f7ff ffae 	bl	8007d3c <uxListRemove>
 8007de0:	b940      	cbnz	r0, 8007df4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007de2:	6832      	ldr	r2, [r6, #0]
 8007de4:	4916      	ldr	r1, [pc, #88]	; (8007e40 <prvAddCurrentTaskToDelayedList+0x74>)
 8007de6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8007de8:	2201      	movs	r2, #1
 8007dea:	680b      	ldr	r3, [r1, #0]
 8007dec:	4082      	lsls	r2, r0
 8007dee:	ea23 0302 	bic.w	r3, r3, r2
 8007df2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007df4:	1c63      	adds	r3, r4, #1
 8007df6:	d107      	bne.n	8007e08 <prvAddCurrentTaskToDelayedList+0x3c>
 8007df8:	b137      	cbz	r7, 8007e08 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	4811      	ldr	r0, [pc, #68]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x78>)
 8007dfe:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e04:	f7ff bf77 	b.w	8007cf6 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e08:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e0a:	6833      	ldr	r3, [r6, #0]
 8007e0c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e0e:	d307      	bcc.n	8007e20 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e10:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x7c>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	6831      	ldr	r1, [r6, #0]
}
 8007e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1a:	3104      	adds	r1, #4
 8007e1c:	f7ff bf77 	b.w	8007d0e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <prvAddCurrentTaskToDelayedList+0x80>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	6831      	ldr	r1, [r6, #0]
 8007e26:	3104      	adds	r1, #4
 8007e28:	f7ff ff71 	bl	8007d0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <prvAddCurrentTaskToDelayedList+0x84>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	42a2      	cmp	r2, r4
 8007e32:	d900      	bls.n	8007e36 <prvAddCurrentTaskToDelayedList+0x6a>
					xNextTaskUnblockTime = xTimeToWake;
 8007e34:	601c      	str	r4, [r3, #0]
}
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	24000ddc 	.word	0x24000ddc
 8007e3c:	24000cb8 	.word	0x24000cb8
 8007e40:	24000d60 	.word	0x24000d60
 8007e44:	24000db4 	.word	0x24000db4
 8007e48:	24000cc0 	.word	0x24000cc0
 8007e4c:	24000cbc 	.word	0x24000cbc
 8007e50:	24000d90 	.word	0x24000d90

08007e54 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e54:	4a06      	ldr	r2, [pc, #24]	; (8007e70 <prvResetNextTaskUnblockTime+0x1c>)
 8007e56:	6813      	ldr	r3, [r2, #0]
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <prvResetNextTaskUnblockTime+0x20>)
 8007e5c:	b919      	cbnz	r1, 8007e66 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e6a:	68d2      	ldr	r2, [r2, #12]
 8007e6c:	6852      	ldr	r2, [r2, #4]
 8007e6e:	e7f8      	b.n	8007e62 <prvResetNextTaskUnblockTime+0xe>
 8007e70:	24000cbc 	.word	0x24000cbc
 8007e74:	24000d90 	.word	0x24000d90

08007e78 <xTaskCreate>:
	{
 8007e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e7c:	0097      	lsls	r7, r2, #2
	{
 8007e7e:	4680      	mov	r8, r0
 8007e80:	460e      	mov	r6, r1
 8007e82:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e84:	4638      	mov	r0, r7
 8007e86:	f000 fc37 	bl	80086f8 <pvPortMalloc>
			if( pxStack != NULL )
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	b160      	cbz	r0, 8007ea8 <xTaskCreate+0x30>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e8e:	20b4      	movs	r0, #180	; 0xb4
 8007e90:	f000 fc32 	bl	80086f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007e94:	4604      	mov	r4, r0
 8007e96:	b120      	cbz	r0, 8007ea2 <xTaskCreate+0x2a>
					pxNewTCB->pxStack = pxStack;
 8007e98:	6305      	str	r5, [r0, #48]	; 0x30
	if( pcName != NULL )
 8007e9a:	b946      	cbnz	r6, 8007eae <xTaskCreate+0x36>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e9c:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
 8007ea0:	e013      	b.n	8007eca <xTaskCreate+0x52>
					vPortFree( pxStack );
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 fcc0 	bl	8008828 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007eac:	e097      	b.n	8007fde <xTaskCreate+0x166>
 8007eae:	1e73      	subs	r3, r6, #1
 8007eb0:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8007eb4:	360f      	adds	r6, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007eb6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007eba:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8007ebe:	b108      	cbz	r0, 8007ec4 <xTaskCreate+0x4c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ec0:	429e      	cmp	r6, r3
 8007ec2:	d1f8      	bne.n	8007eb6 <xTaskCreate+0x3e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8007ecc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ed0:	1d26      	adds	r6, r4, #4
 8007ed2:	2b06      	cmp	r3, #6
		pxNewTCB->uxMutexesHeld = 0;
 8007ed4:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ed8:	4630      	mov	r0, r6
 8007eda:	bf28      	it	cs
 8007edc:	2306      	movcs	r3, #6
 8007ede:	469b      	mov	fp, r3
	pxNewTCB->uxPriority = uxPriority;
 8007ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007ee2:	6463      	str	r3, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ee4:	f7ff ff04 	bl	8007cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ee8:	f104 0018 	add.w	r0, r4, #24
 8007eec:	f7ff ff00 	bl	8007cf0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef0:	f1cb 0307 	rsb	r3, fp, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ef4:	2260      	movs	r2, #96	; 0x60
 8007ef6:	4651      	mov	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef8:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007efa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8007efe:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f02:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f04:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f06:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f0a:	f001 f98a 	bl	8009222 <memset>
 8007f0e:	4b3b      	ldr	r3, [pc, #236]	; (8007ffc <xTaskCreate+0x184>)
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f10:	1f38      	subs	r0, r7, #4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f12:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f14:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f16:	4641      	mov	r1, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f18:	4b39      	ldr	r3, [pc, #228]	; (8008000 <xTaskCreate+0x188>)
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f1a:	4428      	add	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f1c:	6563      	str	r3, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f1e:	f020 0007 	bic.w	r0, r0, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f22:	4b38      	ldr	r3, [pc, #224]	; (8008004 <xTaskCreate+0x18c>)
 8007f24:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f26:	f000 fa85 	bl	8008434 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f2c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007f2e:	b103      	cbz	r3, 8007f32 <xTaskCreate+0xba>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f30:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8007f32:	f000 faa7 	bl	8008484 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007f36:	4b34      	ldr	r3, [pc, #208]	; (8008008 <xTaskCreate+0x190>)
		if( pxCurrentTCB == NULL )
 8007f38:	4f34      	ldr	r7, [pc, #208]	; (800800c <xTaskCreate+0x194>)
		uxCurrentNumberOfTasks++;
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8008034 <xTaskCreate+0x1bc>
 8007f40:	3201      	adds	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007f44:	683d      	ldr	r5, [r7, #0]
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	d14c      	bne.n	8007fe4 <xTaskCreate+0x16c>
			pxCurrentTCB = pxNewTCB;
 8007f4a:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d11f      	bne.n	8007f92 <xTaskCreate+0x11a>
 8007f52:	46c1      	mov	r9, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f54:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f56:	4648      	mov	r0, r9
 8007f58:	f7ff febf 	bl	8007cda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f5c:	f109 0914 	add.w	r9, r9, #20
 8007f60:	2d07      	cmp	r5, #7
 8007f62:	d1f7      	bne.n	8007f54 <xTaskCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 8007f64:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8008038 <xTaskCreate+0x1c0>
	vListInitialise( &xDelayedTaskList2 );
 8007f68:	4d29      	ldr	r5, [pc, #164]	; (8008010 <xTaskCreate+0x198>)
	vListInitialise( &xDelayedTaskList1 );
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f7ff feb5 	bl	8007cda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f70:	4628      	mov	r0, r5
 8007f72:	f7ff feb2 	bl	8007cda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f76:	4827      	ldr	r0, [pc, #156]	; (8008014 <xTaskCreate+0x19c>)
 8007f78:	f7ff feaf 	bl	8007cda <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007f7c:	4826      	ldr	r0, [pc, #152]	; (8008018 <xTaskCreate+0x1a0>)
 8007f7e:	f7ff feac 	bl	8007cda <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007f82:	4826      	ldr	r0, [pc, #152]	; (800801c <xTaskCreate+0x1a4>)
 8007f84:	f7ff fea9 	bl	8007cda <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f88:	4b25      	ldr	r3, [pc, #148]	; (8008020 <xTaskCreate+0x1a8>)
 8007f8a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f8e:	4b25      	ldr	r3, [pc, #148]	; (8008024 <xTaskCreate+0x1ac>)
 8007f90:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <xTaskCreate+0x1b0>)
		prvAddTaskToReadyList( pxNewTCB );
 8007f94:	2501      	movs	r5, #1
 8007f96:	4925      	ldr	r1, [pc, #148]	; (800802c <xTaskCreate+0x1b4>)
		uxTaskNumber++;
 8007f98:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007f9a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007fa2:	fa05 f302 	lsl.w	r3, r5, r2
 8007fa6:	4303      	orrs	r3, r0
 8007fa8:	2014      	movs	r0, #20
 8007faa:	600b      	str	r3, [r1, #0]
 8007fac:	4631      	mov	r1, r6
 8007fae:	fb00 8002 	mla	r0, r0, r2, r8
 8007fb2:	f7ff fea0 	bl	8007cf6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007fb6:	f000 fa85 	bl	80084c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <xTaskCreate+0x1b8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	b173      	cbz	r3, 8007fde <xTaskCreate+0x166>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d209      	bcs.n	8007fde <xTaskCreate+0x166>
			taskYIELD_IF_USING_PREEMPTION();
 8007fca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
	}
 8007fde:	4628      	mov	r0, r5
 8007fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8007fe4:	4b12      	ldr	r3, [pc, #72]	; (8008030 <xTaskCreate+0x1b8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1d2      	bne.n	8007f92 <xTaskCreate+0x11a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d3cd      	bcc.n	8007f92 <xTaskCreate+0x11a>
					pxCurrentTCB = pxNewTCB;
 8007ff6:	603c      	str	r4, [r7, #0]
 8007ff8:	e7cb      	b.n	8007f92 <xTaskCreate+0x11a>
 8007ffa:	bf00      	nop
 8007ffc:	0800bd88 	.word	0x0800bd88
 8008000:	0800bda8 	.word	0x0800bda8
 8008004:	0800bd68 	.word	0x0800bd68
 8008008:	24000d50 	.word	0x24000d50
 800800c:	24000cb8 	.word	0x24000cb8
 8008010:	24000d78 	.word	0x24000d78
 8008014:	24000d9c 	.word	0x24000d9c
 8008018:	24000dc8 	.word	0x24000dc8
 800801c:	24000db4 	.word	0x24000db4
 8008020:	24000cbc 	.word	0x24000cbc
 8008024:	24000cc0 	.word	0x24000cc0
 8008028:	24000d5c 	.word	0x24000d5c
 800802c:	24000d60 	.word	0x24000d60
 8008030:	24000db0 	.word	0x24000db0
 8008034:	24000cc4 	.word	0x24000cc4
 8008038:	24000d64 	.word	0x24000d64

0800803c <vTaskStartScheduler>:
{
 800803c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800803e:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <vTaskStartScheduler+0x68>)
 8008040:	2400      	movs	r4, #0
 8008042:	2280      	movs	r2, #128	; 0x80
 8008044:	4918      	ldr	r1, [pc, #96]	; (80080a8 <vTaskStartScheduler+0x6c>)
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	4623      	mov	r3, r4
 800804a:	4818      	ldr	r0, [pc, #96]	; (80080ac <vTaskStartScheduler+0x70>)
 800804c:	9400      	str	r4, [sp, #0]
 800804e:	f7ff ff13 	bl	8007e78 <xTaskCreate>
	if( xReturn == pdPASS )
 8008052:	2801      	cmp	r0, #1
 8008054:	d119      	bne.n	800808a <vTaskStartScheduler+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008066:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <vTaskStartScheduler+0x74>)
 8008068:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <vTaskStartScheduler+0x78>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	334c      	adds	r3, #76	; 0x4c
 800806e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008074:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <vTaskStartScheduler+0x7c>)
 8008076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008078:	4b10      	ldr	r3, [pc, #64]	; (80080bc <vTaskStartScheduler+0x80>)
 800807a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <vTaskStartScheduler+0x84>)
 800807e:	601c      	str	r4, [r3, #0]
}
 8008080:	b002      	add	sp, #8
 8008082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008086:	f000 ba8d 	b.w	80085a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800808a:	3001      	adds	r0, #1
 800808c:	d108      	bne.n	80080a0 <vTaskStartScheduler+0x64>
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	e7fe      	b.n	800809e <vTaskStartScheduler+0x62>
}
 80080a0:	b002      	add	sp, #8
 80080a2:	bd10      	pop	{r4, pc}
 80080a4:	24000d8c 	.word	0x24000d8c
 80080a8:	0800baf4 	.word	0x0800baf4
 80080ac:	08007d5d 	.word	0x08007d5d
 80080b0:	24000cb8 	.word	0x24000cb8
 80080b4:	24000014 	.word	0x24000014
 80080b8:	24000d90 	.word	0x24000d90
 80080bc:	24000db0 	.word	0x24000db0
 80080c0:	24000ddc 	.word	0x24000ddc

080080c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80080c4:	4a02      	ldr	r2, [pc, #8]	; (80080d0 <vTaskSuspendAll+0xc>)
 80080c6:	6813      	ldr	r3, [r2, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	24000d58 	.word	0x24000d58

080080d4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d4:	4b3f      	ldr	r3, [pc, #252]	; (80081d4 <xTaskIncrementTick+0x100>)
 80080d6:	681b      	ldr	r3, [r3, #0]
{
 80080d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d173      	bne.n	80081c8 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080e0:	4b3d      	ldr	r3, [pc, #244]	; (80081d8 <xTaskIncrementTick+0x104>)
 80080e2:	681d      	ldr	r5, [r3, #0]
 80080e4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80080e6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080e8:	b9bd      	cbnz	r5, 800811a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80080ea:	4b3c      	ldr	r3, [pc, #240]	; (80081dc <xTaskIncrementTick+0x108>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	b142      	cbz	r2, 8008104 <xTaskIncrementTick+0x30>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	e7fe      	b.n	8008102 <xTaskIncrementTick+0x2e>
 8008104:	4a36      	ldr	r2, [pc, #216]	; (80081e0 <xTaskIncrementTick+0x10c>)
 8008106:	6819      	ldr	r1, [r3, #0]
 8008108:	6810      	ldr	r0, [r2, #0]
 800810a:	6018      	str	r0, [r3, #0]
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	4a35      	ldr	r2, [pc, #212]	; (80081e4 <xTaskIncrementTick+0x110>)
 8008110:	6813      	ldr	r3, [r2, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	f7ff fe9d 	bl	8007e54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800811a:	4e33      	ldr	r6, [pc, #204]	; (80081e8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800811c:	2400      	movs	r4, #0
 800811e:	4f33      	ldr	r7, [pc, #204]	; (80081ec <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80081f8 <xTaskIncrementTick+0x124>
 8008126:	429d      	cmp	r5, r3
 8008128:	d211      	bcs.n	800814e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800812a:	f8d8 3000 	ldr.w	r3, [r8]
 800812e:	2214      	movs	r2, #20
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4353      	muls	r3, r2
 8008134:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008136:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8008138:	4b2d      	ldr	r3, [pc, #180]	; (80081f0 <xTaskIncrementTick+0x11c>)
 800813a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800813c:	bf28      	it	cs
 800813e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf18      	it	ne
 8008144:	2401      	movne	r4, #1
}
 8008146:	4620      	mov	r0, r4
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80081dc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008152:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80081fc <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008156:	f8da 3000 	ldr.w	r3, [sl]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	b91b      	cbnz	r3, 8008166 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008162:	6033      	str	r3, [r6, #0]
					break;
 8008164:	e7e1      	b.n	800812a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008166:	f8da 3000 	ldr.w	r3, [sl]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008170:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008174:	4295      	cmp	r5, r2
 8008176:	d201      	bcs.n	800817c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8008178:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800817a:	e7d6      	b.n	800812a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817c:	f10b 0104 	add.w	r1, fp, #4
 8008180:	4608      	mov	r0, r1
 8008182:	9101      	str	r1, [sp, #4]
 8008184:	f7ff fdda 	bl	8007d3c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008188:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800818c:	9901      	ldr	r1, [sp, #4]
 800818e:	b122      	cbz	r2, 800819a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008190:	f10b 0018 	add.w	r0, fp, #24
 8008194:	f7ff fdd2 	bl	8007d3c <uxListRemove>
 8008198:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800819a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800819e:	2201      	movs	r2, #1
 80081a0:	f8d9 3000 	ldr.w	r3, [r9]
 80081a4:	4082      	lsls	r2, r0
 80081a6:	431a      	orrs	r2, r3
 80081a8:	f8c9 2000 	str.w	r2, [r9]
 80081ac:	2214      	movs	r2, #20
 80081ae:	fb02 7000 	mla	r0, r2, r0, r7
 80081b2:	f7ff fda0 	bl	8007cf6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b6:	f8d8 1000 	ldr.w	r1, [r8]
 80081ba:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80081be:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80081c0:	429a      	cmp	r2, r3
 80081c2:	bf28      	it	cs
 80081c4:	2401      	movcs	r4, #1
 80081c6:	e7c6      	b.n	8008156 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 80081c8:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80081ca:	2400      	movs	r4, #0
		++xPendedTicks;
 80081cc:	6813      	ldr	r3, [r2, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 80081d2:	e7b8      	b.n	8008146 <xTaskIncrementTick+0x72>
 80081d4:	24000d58 	.word	0x24000d58
 80081d8:	24000ddc 	.word	0x24000ddc
 80081dc:	24000cbc 	.word	0x24000cbc
 80081e0:	24000cc0 	.word	0x24000cc0
 80081e4:	24000d94 	.word	0x24000d94
 80081e8:	24000d90 	.word	0x24000d90
 80081ec:	24000cc4 	.word	0x24000cc4
 80081f0:	24000de0 	.word	0x24000de0
 80081f4:	24000d98 	.word	0x24000d98
 80081f8:	24000cb8 	.word	0x24000cb8
 80081fc:	24000d60 	.word	0x24000d60

08008200 <xTaskResumeAll>:
{
 8008200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008204:	4c32      	ldr	r4, [pc, #200]	; (80082d0 <xTaskResumeAll+0xd0>)
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	b943      	cbnz	r3, 800821c <xTaskResumeAll+0x1c>
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	e7fe      	b.n	800821a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800821c:	f000 f932 	bl	8008484 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008226:	6824      	ldr	r4, [r4, #0]
 8008228:	b134      	cbz	r4, 8008238 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800822a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800822c:	f000 f94a 	bl	80084c4 <vPortExitCritical>
}
 8008230:	4620      	mov	r0, r4
 8008232:	b002      	add	sp, #8
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008238:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <xTaskResumeAll+0xd4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f4      	beq.n	800822a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008240:	4d25      	ldr	r5, [pc, #148]	; (80082d8 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 8008242:	4e26      	ldr	r6, [pc, #152]	; (80082dc <xTaskResumeAll+0xdc>)
 8008244:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80082ec <xTaskResumeAll+0xec>
 8008248:	e01f      	b.n	800828a <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824a:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800824c:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008250:	f104 0018 	add.w	r0, r4, #24
 8008254:	f7ff fd72 	bl	8007d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008258:	1d21      	adds	r1, r4, #4
 800825a:	4608      	mov	r0, r1
 800825c:	9101      	str	r1, [sp, #4]
 800825e:	f7ff fd6d 	bl	8007d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008262:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008264:	6830      	ldr	r0, [r6, #0]
 8008266:	fa07 f302 	lsl.w	r3, r7, r2
 800826a:	9901      	ldr	r1, [sp, #4]
 800826c:	4303      	orrs	r3, r0
 800826e:	2014      	movs	r0, #20
 8008270:	fb00 8002 	mla	r0, r0, r2, r8
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	f7ff fd3e 	bl	8007cf6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800827a:	4b19      	ldr	r3, [pc, #100]	; (80082e0 <xTaskResumeAll+0xe0>)
 800827c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	429a      	cmp	r2, r3
 8008284:	d301      	bcc.n	800828a <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <xTaskResumeAll+0xe4>)
 8008288:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1dc      	bne.n	800824a <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 8008290:	b10c      	cbz	r4, 8008296 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8008292:	f7ff fddf 	bl	8007e54 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008296:	4d14      	ldr	r5, [pc, #80]	; (80082e8 <xTaskResumeAll+0xe8>)
 8008298:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800829a:	b144      	cbz	r4, 80082ae <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 800829c:	4e11      	ldr	r6, [pc, #68]	; (80082e4 <xTaskResumeAll+0xe4>)
 800829e:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80082a0:	f7ff ff18 	bl	80080d4 <xTaskIncrementTick>
 80082a4:	b100      	cbz	r0, 80082a8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80082a6:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082a8:	3c01      	subs	r4, #1
 80082aa:	d1f9      	bne.n	80082a0 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 80082ac:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <xTaskResumeAll+0xe4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0b9      	beq.n	800822a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80082b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80082ca:	2401      	movs	r4, #1
 80082cc:	e7ae      	b.n	800822c <xTaskResumeAll+0x2c>
 80082ce:	bf00      	nop
 80082d0:	24000d58 	.word	0x24000d58
 80082d4:	24000d50 	.word	0x24000d50
 80082d8:	24000d9c 	.word	0x24000d9c
 80082dc:	24000d60 	.word	0x24000d60
 80082e0:	24000cb8 	.word	0x24000cb8
 80082e4:	24000de0 	.word	0x24000de0
 80082e8:	24000d98 	.word	0x24000d98
 80082ec:	24000cc4 	.word	0x24000cc4

080082f0 <vTaskDelay>:
	{
 80082f0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082f2:	b950      	cbnz	r0, 800830a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80082f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
	}
 8008308:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <vTaskDelay+0x44>)
 800830c:	6819      	ldr	r1, [r3, #0]
 800830e:	b141      	cbz	r1, 8008322 <vTaskDelay+0x32>
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	e7fe      	b.n	8008320 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008322:	f7ff fecf 	bl	80080c4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008326:	f7ff fd51 	bl	8007dcc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800832a:	f7ff ff69 	bl	8008200 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800832e:	2800      	cmp	r0, #0
 8008330:	d0e0      	beq.n	80082f4 <vTaskDelay+0x4>
 8008332:	e7e9      	b.n	8008308 <vTaskDelay+0x18>
 8008334:	24000d58 	.word	0x24000d58

08008338 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008338:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <vTaskSwitchContext+0x68>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <vTaskSwitchContext+0x6c>)
{
 800833e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008340:	b112      	cbz	r2, 8008348 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
}
 8008346:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008348:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834a:	4b17      	ldr	r3, [pc, #92]	; (80083a8 <vTaskSwitchContext+0x70>)
 800834c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800834e:	fab2 f282 	clz	r2, r2
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	2314      	movs	r3, #20
 8008356:	4915      	ldr	r1, [pc, #84]	; (80083ac <vTaskSwitchContext+0x74>)
 8008358:	f1c2 021f 	rsb	r2, r2, #31
 800835c:	4353      	muls	r3, r2
 800835e:	58cc      	ldr	r4, [r1, r3]
 8008360:	18c8      	adds	r0, r1, r3
 8008362:	b944      	cbnz	r4, 8008376 <vTaskSwitchContext+0x3e>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	e7fe      	b.n	8008374 <vTaskSwitchContext+0x3c>
 8008376:	6844      	ldr	r4, [r0, #4]
 8008378:	3308      	adds	r3, #8
 800837a:	6864      	ldr	r4, [r4, #4]
 800837c:	440b      	add	r3, r1
 800837e:	429c      	cmp	r4, r3
 8008380:	6044      	str	r4, [r0, #4]
 8008382:	bf04      	itt	eq
 8008384:	6863      	ldreq	r3, [r4, #4]
 8008386:	6043      	streq	r3, [r0, #4]
 8008388:	2314      	movs	r3, #20
 800838a:	fb03 1202 	mla	r2, r3, r2, r1
 800838e:	6853      	ldr	r3, [r2, #4]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <vTaskSwitchContext+0x78>)
 8008394:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a06      	ldr	r2, [pc, #24]	; (80083b4 <vTaskSwitchContext+0x7c>)
 800839a:	334c      	adds	r3, #76	; 0x4c
 800839c:	6013      	str	r3, [r2, #0]
}
 800839e:	e7d2      	b.n	8008346 <vTaskSwitchContext+0xe>
 80083a0:	24000d58 	.word	0x24000d58
 80083a4:	24000de0 	.word	0x24000de0
 80083a8:	24000d60 	.word	0x24000d60
 80083ac:	24000cc4 	.word	0x24000cc4
 80083b0:	24000cb8 	.word	0x24000cb8
 80083b4:	24000014 	.word	0x24000014

080083b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083b8:	4808      	ldr	r0, [pc, #32]	; (80083dc <prvPortStartFirstTask+0x24>)
 80083ba:	6800      	ldr	r0, [r0, #0]
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f380 8808 	msr	MSP, r0
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8814 	msr	CONTROL, r0
 80083ca:	b662      	cpsie	i
 80083cc:	b661      	cpsie	f
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	df00      	svc	0
 80083d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083da:	0000      	.short	0x0000
 80083dc:	e000ed08 	.word	0xe000ed08

080083e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083f0 <vPortEnableVFP+0x10>
 80083e4:	6801      	ldr	r1, [r0, #0]
 80083e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083ea:	6001      	str	r1, [r0, #0]
 80083ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083ee:	0000      	.short	0x0000
 80083f0:	e000ed88 	.word	0xe000ed88

080083f4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80083f4:	2300      	movs	r3, #0
{
 80083f6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80083f8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80083fa:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <prvTaskExitError+0x3c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	d008      	beq.n	8008414 <prvTaskExitError+0x20>
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	e7fe      	b.n	8008412 <prvTaskExitError+0x1e>
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0fc      	beq.n	8008424 <prvTaskExitError+0x30>
}
 800842a:	b002      	add	sp, #8
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	24000010 	.word	0x24000010

08008434 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008438:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800843c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008440:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008442:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008446:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008448:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800844a:	f06f 0302 	mvn.w	r3, #2
 800844e:	6203      	str	r3, [r0, #32]
}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	080083f5 	.word	0x080083f5
	...

08008460 <SVC_Handler>:
	__asm volatile (
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <pxCurrentTCBConst2>)
 8008462:	6819      	ldr	r1, [r3, #0]
 8008464:	6808      	ldr	r0, [r1, #0]
 8008466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	f380 8809 	msr	PSP, r0
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8811 	msr	BASEPRI, r0
 800847a:	4770      	bx	lr
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst2>:
 8008480:	24000cb8 	.word	0x24000cb8

08008484 <vPortEnterCritical>:
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <vPortEnterCritical+0x3c>)
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800849a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800849c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800849e:	d10e      	bne.n	80084be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	b143      	cbz	r3, 80084be <vPortEnterCritical+0x3a>
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	e7fe      	b.n	80084bc <vPortEnterCritical+0x38>
}
 80084be:	4770      	bx	lr
 80084c0:	24000010 	.word	0x24000010

080084c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80084c4:	4a08      	ldr	r2, [pc, #32]	; (80084e8 <vPortExitCritical+0x24>)
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	b943      	cbnz	r3, 80084dc <vPortExitCritical+0x18>
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	e7fe      	b.n	80084da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80084dc:	3b01      	subs	r3, #1
 80084de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084e0:	b90b      	cbnz	r3, 80084e6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084e2:	f383 8811 	msr	BASEPRI, r3
}
 80084e6:	4770      	bx	lr
 80084e8:	24000010 	.word	0x24000010
 80084ec:	00000000 	.word	0x00000000

080084f0 <PendSV_Handler>:
	__asm volatile
 80084f0:	f3ef 8009 	mrs	r0, PSP
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <pxCurrentTCBConst>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f01e 0f10 	tst.w	lr, #16
 8008500:	bf08      	it	eq
 8008502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008514:	f380 8811 	msr	BASEPRI, r0
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f7ff ff0a 	bl	8008338 <vTaskSwitchContext>
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f380 8811 	msr	BASEPRI, r0
 800852c:	bc09      	pop	{r0, r3}
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	f01e 0f10 	tst.w	lr, #16
 800853a:	bf08      	it	eq
 800853c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008540:	f380 8809 	msr	PSP, r0
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst>:
 8008550:	24000cb8 	.word	0x24000cb8

08008554 <SysTick_Handler>:
{
 8008554:	b508      	push	{r3, lr}
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008566:	f7ff fdb5 	bl	80080d4 <xTaskIncrementTick>
 800856a:	b128      	cbz	r0, 8008578 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800856c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008574:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008578:	2300      	movs	r3, #0
 800857a:	f383 8811 	msr	BASEPRI, r3
}
 800857e:	bd08      	pop	{r3, pc}

08008580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008580:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008584:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008586:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800858a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800858c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800858e:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <vPortSetupTimerInterrupt+0x20>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	fbb3 f3f1 	udiv	r3, r3, r1
 8008596:	3b01      	subs	r3, #1
 8008598:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800859a:	2307      	movs	r3, #7
 800859c:	6113      	str	r3, [r2, #16]
}
 800859e:	4770      	bx	lr
 80085a0:	24000000 	.word	0x24000000

080085a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80085a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80085ae:	4a3a      	ldr	r2, [pc, #232]	; (8008698 <xPortStartScheduler+0xf4>)
 80085b0:	4291      	cmp	r1, r2
 80085b2:	d108      	bne.n	80085c6 <xPortStartScheduler+0x22>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	e7fe      	b.n	80085c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80085ca:	4b34      	ldr	r3, [pc, #208]	; (800869c <xPortStartScheduler+0xf8>)
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d108      	bne.n	80085e2 <xPortStartScheduler+0x3e>
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	e7fe      	b.n	80085e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085e2:	4b2f      	ldr	r3, [pc, #188]	; (80086a0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085f0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f2:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80085fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008602:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008604:	2307      	movs	r3, #7
 8008606:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <xPortStartScheduler+0x104>)
 8008608:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800860a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800860e:	1e5c      	subs	r4, r3, #1
 8008610:	0600      	lsls	r0, r0, #24
 8008612:	d40c      	bmi.n	800862e <xPortStartScheduler+0x8a>
 8008614:	b111      	cbz	r1, 800861c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008616:	2b03      	cmp	r3, #3
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	d011      	beq.n	8008640 <xPortStartScheduler+0x9c>
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	e7fe      	b.n	800862c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800862e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008632:	2101      	movs	r1, #1
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f88d 3003 	strb.w	r3, [sp, #3]
 800863c:	4623      	mov	r3, r4
 800863e:	e7e4      	b.n	800860a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008640:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008644:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8008648:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800864a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <xPortStartScheduler+0xfc>)
 8008650:	b2db      	uxtb	r3, r3
 8008652:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008654:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800865c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008660:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008664:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008668:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800866c:	f7ff ff88 	bl	8008580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <xPortStartScheduler+0x108>)
 8008672:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008674:	f7ff feb4 	bl	80083e0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008678:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800867c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008680:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008684:	f7ff fe98 	bl	80083b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008688:	f7ff fe56 	bl	8008338 <vTaskSwitchContext>
}
 800868c:	4628      	mov	r0, r5
	prvTaskExitError();
 800868e:	f7ff feb1 	bl	80083f4 <prvTaskExitError>
}
 8008692:	b003      	add	sp, #12
 8008694:	bd30      	pop	{r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	410fc271 	.word	0x410fc271
 800869c:	410fc270 	.word	0x410fc270
 80086a0:	e000e400 	.word	0xe000e400
 80086a4:	24000de4 	.word	0x24000de4
 80086a8:	24000de8 	.word	0x24000de8
 80086ac:	24000010 	.word	0x24000010

080086b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <prvInsertBlockIntoFreeList+0x40>)
{
 80086b2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b4:	461a      	mov	r2, r3
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4283      	cmp	r3, r0
 80086ba:	d3fb      	bcc.n	80086b4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086bc:	6854      	ldr	r4, [r2, #4]
 80086be:	1911      	adds	r1, r2, r4
 80086c0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086c2:	bf01      	itttt	eq
 80086c4:	6841      	ldreq	r1, [r0, #4]
 80086c6:	4610      	moveq	r0, r2
 80086c8:	1909      	addeq	r1, r1, r4
 80086ca:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086cc:	6844      	ldr	r4, [r0, #4]
 80086ce:	1901      	adds	r1, r0, r4
 80086d0:	428b      	cmp	r3, r1
 80086d2:	d107      	bne.n	80086e4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086d4:	4907      	ldr	r1, [pc, #28]	; (80086f4 <prvInsertBlockIntoFreeList+0x44>)
 80086d6:	6809      	ldr	r1, [r1, #0]
 80086d8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086da:	bf1f      	itttt	ne
 80086dc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086de:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086e0:	1909      	addne	r1, r1, r4
 80086e2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086e4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086e6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086e8:	bf18      	it	ne
 80086ea:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	24004a04 	.word	0x24004a04
 80086f4:	24000dec 	.word	0x24000dec

080086f8 <pvPortMalloc>:
{
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80086fe:	f7ff fce1 	bl	80080c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008702:	4842      	ldr	r0, [pc, #264]	; (800880c <pvPortMalloc+0x114>)
 8008704:	4d42      	ldr	r5, [pc, #264]	; (8008810 <pvPortMalloc+0x118>)
 8008706:	6803      	ldr	r3, [r0, #0]
 8008708:	bb0b      	cbnz	r3, 800874e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800870a:	4942      	ldr	r1, [pc, #264]	; (8008814 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800870c:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800870e:	4e42      	ldr	r6, [pc, #264]	; (8008818 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008710:	bf1b      	ittet	ne
 8008712:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008714:	f501 5270 	addne.w	r2, r1, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008718:	f44f 5270 	moveq.w	r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800871c:	f023 0307 	bicne.w	r3, r3, #7
 8008720:	bf1c      	itt	ne
 8008722:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008724:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8008726:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008728:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800872a:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800872c:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800872e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008730:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008734:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008738:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800873a:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800873c:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008740:	4a36      	ldr	r2, [pc, #216]	; (800881c <pvPortMalloc+0x124>)
 8008742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008744:	4a36      	ldr	r2, [pc, #216]	; (8008820 <pvPortMalloc+0x128>)
 8008746:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800874c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800874e:	682f      	ldr	r7, [r5, #0]
 8008750:	4227      	tst	r7, r4
 8008752:	d155      	bne.n	8008800 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8008754:	2c00      	cmp	r4, #0
 8008756:	d046      	beq.n	80087e6 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8008758:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800875c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800875e:	bf1c      	itt	ne
 8008760:	f023 0307 	bicne.w	r3, r3, #7
 8008764:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008766:	2b00      	cmp	r3, #0
 8008768:	d04a      	beq.n	8008800 <pvPortMalloc+0x108>
 800876a:	4c2d      	ldr	r4, [pc, #180]	; (8008820 <pvPortMalloc+0x128>)
 800876c:	6826      	ldr	r6, [r4, #0]
 800876e:	429e      	cmp	r6, r3
 8008770:	d346      	bcc.n	8008800 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8008772:	4a29      	ldr	r2, [pc, #164]	; (8008818 <pvPortMalloc+0x120>)
 8008774:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008776:	6869      	ldr	r1, [r5, #4]
 8008778:	4299      	cmp	r1, r3
 800877a:	d204      	bcs.n	8008786 <pvPortMalloc+0x8e>
 800877c:	f8d5 c000 	ldr.w	ip, [r5]
 8008780:	f1bc 0f00 	cmp.w	ip, #0
 8008784:	d115      	bne.n	80087b2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	42a8      	cmp	r0, r5
 800878a:	d039      	beq.n	8008800 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800878c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800878e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008790:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008794:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008796:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008798:	d912      	bls.n	80087c0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800879a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800879c:	0742      	lsls	r2, r0, #29
 800879e:	d00b      	beq.n	80087b8 <pvPortMalloc+0xc0>
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	e7fe      	b.n	80087b0 <pvPortMalloc+0xb8>
 80087b2:	462a      	mov	r2, r5
 80087b4:	4665      	mov	r5, ip
 80087b6:	e7de      	b.n	8008776 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087b8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087ba:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087bc:	f7ff ff78 	bl	80086b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087c0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087c2:	4916      	ldr	r1, [pc, #88]	; (800881c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087c4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087c6:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 80087c8:	4a16      	ldr	r2, [pc, #88]	; (8008824 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 80087ca:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087cc:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80087ce:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80087d0:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087d2:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087d4:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087d6:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 80087da:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087de:	bf38      	it	cc
 80087e0:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087e2:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 80087e4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80087e6:	f7ff fd0b 	bl	8008200 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087ea:	0763      	lsls	r3, r4, #29
 80087ec:	d00a      	beq.n	8008804 <pvPortMalloc+0x10c>
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	e7fe      	b.n	80087fe <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8008800:	2400      	movs	r4, #0
 8008802:	e7f0      	b.n	80087e6 <pvPortMalloc+0xee>
}
 8008804:	4620      	mov	r0, r4
 8008806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880a:	bf00      	nop
 800880c:	24000dec 	.word	0x24000dec
 8008810:	240049f0 	.word	0x240049f0
 8008814:	24000df0 	.word	0x24000df0
 8008818:	24004a04 	.word	0x24004a04
 800881c:	240049f8 	.word	0x240049f8
 8008820:	240049f4 	.word	0x240049f4
 8008824:	240049fc 	.word	0x240049fc

08008828 <vPortFree>:
{
 8008828:	b510      	push	{r4, lr}
	if( pv != NULL )
 800882a:	4604      	mov	r4, r0
 800882c:	b390      	cbz	r0, 8008894 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800882e:	4a1a      	ldr	r2, [pc, #104]	; (8008898 <vPortFree+0x70>)
 8008830:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	4213      	tst	r3, r2
 8008838:	d108      	bne.n	800884c <vPortFree+0x24>
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	e7fe      	b.n	800884a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800884c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008850:	b141      	cbz	r1, 8008864 <vPortFree+0x3c>
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	e7fe      	b.n	8008862 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008864:	ea23 0302 	bic.w	r3, r3, r2
 8008868:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800886c:	f7ff fc2a 	bl	80080c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <vPortFree+0x74>)
 8008872:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008876:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800887a:	6811      	ldr	r1, [r2, #0]
 800887c:	440b      	add	r3, r1
 800887e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008880:	f7ff ff16 	bl	80086b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008884:	4a06      	ldr	r2, [pc, #24]	; (80088a0 <vPortFree+0x78>)
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	3301      	adds	r3, #1
}
 800888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800888e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008890:	f7ff bcb6 	b.w	8008200 <xTaskResumeAll>
}
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	240049f0 	.word	0x240049f0
 800889c:	240049f4 	.word	0x240049f4
 80088a0:	24004a00 	.word	0x24004a00

080088a4 <_Znwj>:
#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
    return pvPortMalloc(size);
 80088a4:	f7ff bf28 	b.w	80086f8 <pvPortMalloc>

080088a8 <_ZdlPv>:
void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
    vPortFree(ptr);
 80088a8:	f7ff bfbe 	b.w	8008828 <vPortFree>

080088ac <_ZN5IOBusD1Ev>:

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
}

IOBus::~IOBus(){}
 80088ac:	4770      	bx	lr

080088ae <_ZN5IOBus8transmitEv>:


	return length;
}

void IOBus::transmit() {
 80088ae:	b510      	push	{r4, lr}
	driver->transmit(packet_buffer, buffer_index);
 80088b0:	f500 4480 	add.w	r4, r0, #16384	; 0x4000
 80088b4:	f8d4 0804 	ldr.w	r0, [r4, #2052]	; 0x804
 80088b8:	f894 2810 	ldrb.w	r2, [r4, #2064]	; 0x810
 80088bc:	6803      	ldr	r3, [r0, #0]
 80088be:	f8d4 1808 	ldr.w	r1, [r4, #2056]	; 0x808
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4798      	blx	r3
	buffer_index = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	f884 3810 	strb.w	r3, [r4, #2064]	; 0x810
}
 80088cc:	bd10      	pop	{r4, pc}

080088ce <_ZN5IOBusD0Ev>:
IOBus::~IOBus(){}
 80088ce:	b510      	push	{r4, lr}
 80088d0:	4604      	mov	r4, r0
 80088d2:	f644 0114 	movw	r1, #18452	; 0x4814
 80088d6:	f000 fa9d 	bl	8008e14 <_ZdlPvj>
 80088da:	4620      	mov	r0, r4
 80088dc:	bd10      	pop	{r4, pc}

080088de <_ZN5IOBus7receiveEhPhm>:
void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 80088de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088e0:	4614      	mov	r4, r2
 80088e2:	461d      	mov	r5, r3
	while(length > buffer_length) {
 80088e4:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
 80088e8:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	d20b      	bcs.n	8008908 <_ZN5IOBus7receiveEhPhm+0x2a>
		MessageBus::receive(sender_id, buffer, buffer_length);
 80088f0:	4622      	mov	r2, r4
 80088f2:	e9cd 0100 	strd	r0, r1, [sp]
 80088f6:	f000 f8f6 	bl	8008ae6 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 80088fa:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
	while(length > buffer_length) {
 80088fe:	e9dd 0100 	ldrd	r0, r1, [sp]
		length -= buffer_length;
 8008902:	1aed      	subs	r5, r5, r3
		buffer += buffer_length;
 8008904:	441c      	add	r4, r3
	while(length > buffer_length) {
 8008906:	e7ef      	b.n	80088e8 <_ZN5IOBus7receiveEhPhm+0xa>
	MessageBus::receive(sender_id, buffer, length);
 8008908:	462b      	mov	r3, r5
 800890a:	4622      	mov	r2, r4
}
 800890c:	b002      	add	sp, #8
 800890e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MessageBus::receive(sender_id, buffer, length);
 8008912:	f000 b8e8 	b.w	8008ae6 <_ZN10MessageBus7receiveEhPhm>

08008916 <_ZN5IOBus6appendEPhm>:
uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 8008916:	b538      	push	{r3, r4, r5, lr}
	uint32_t remaining_length = buffer_length - buffer_index;
 8008918:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
 800891c:	f895 0810 	ldrb.w	r0, [r5, #2064]	; 0x810
 8008920:	f8d5 380c 	ldr.w	r3, [r5, #2060]	; 0x80c
 8008924:	1a1b      	subs	r3, r3, r0
 8008926:	4293      	cmp	r3, r2
 8008928:	bf28      	it	cs
 800892a:	4613      	movcs	r3, r2
 800892c:	461c      	mov	r4, r3
	memcpy(packet_buffer + buffer_index, buffer, length);
 800892e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8008932:	4622      	mov	r2, r4
 8008934:	4418      	add	r0, r3
 8008936:	f000 fc66 	bl	8009206 <memcpy>
	buffer_index += length;
 800893a:	f895 3810 	ldrb.w	r3, [r5, #2064]	; 0x810
}
 800893e:	b2e0      	uxtb	r0, r4
	buffer_index += length;
 8008940:	fa53 f384 	uxtab	r3, r3, r4
 8008944:	f885 3810 	strb.w	r3, [r5, #2064]	; 0x810
}
 8008948:	bd38      	pop	{r3, r4, r5, pc}

0800894a <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800894a:	b4f0      	push	{r4, r5, r6, r7}
	    return __source._M_access<_Functor*>();
 800894c:	6804      	ldr	r4, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800894e:	7809      	ldrb	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8008950:	6865      	ldr	r5, [r4, #4]
 8008952:	68a6      	ldr	r6, [r4, #8]
 8008954:	106f      	asrs	r7, r5, #1
 8008956:	6824      	ldr	r4, [r4, #0]
 8008958:	eb06 0065 	add.w	r0, r6, r5, asr #1
 800895c:	07ed      	lsls	r5, r5, #31
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	bf48      	it	mi
 8008962:	59f5      	ldrmi	r5, [r6, r7]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	bf48      	it	mi
 8008968:	592c      	ldrmi	r4, [r5, r4]
 800896a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 800896c:	bcf0      	pop	{r4, r5, r6, r7}
 800896e:	4760      	bx	ip

08008970 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4604      	mov	r4, r0
	switch (__op)
 8008974:	b13a      	cbz	r2, 8008986 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 8008976:	2a01      	cmp	r2, #1
 8008978:	d008      	beq.n	800898c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800897a:	2a02      	cmp	r2, #2
 800897c:	d008      	beq.n	8008990 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800897e:	2a03      	cmp	r2, #3
 8008980:	d010      	beq.n	80089a4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 8008982:	2000      	movs	r0, #0
 8008984:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8008986:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 8008988:	6023      	str	r3, [r4, #0]
	}
 800898a:	e7fa      	b.n	8008982 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800898c:	680b      	ldr	r3, [r1, #0]
 800898e:	e7fb      	b.n	8008988 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 8008990:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8008992:	200c      	movs	r0, #12
 8008994:	f7ff ff86 	bl	80088a4 <_Znwj>
 8008998:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800899a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800899e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089a2:	e7f1      	b.n	8008988 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 80089a4:	6800      	ldr	r0, [r0, #0]
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d0eb      	beq.n	8008982 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80089aa:	210c      	movs	r1, #12
 80089ac:	f000 fa32 	bl	8008e14 <_ZdlPvj>
 80089b0:	e7e7      	b.n	8008982 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80089b2:	bf00      	nop
 80089b4:	0800bbc8 	.word	0x0800bbc8

080089b8 <_ZN5IOBusC1EP8IODriverPhm>:
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 80089b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ba:	460d      	mov	r5, r1
 80089bc:	4914      	ldr	r1, [pc, #80]	; (8008a10 <_ZN5IOBusC1EP8IODriverPhm+0x58>)
	this->buffer_index = 0;
 80089be:	2600      	movs	r6, #0
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 80089c0:	b085      	sub	sp, #20
 80089c2:	6001      	str	r1, [r0, #0]
	this->driver = driver;
 80089c4:	f500 4180 	add.w	r1, r0, #16384	; 0x4000
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 80089c8:	4604      	mov	r4, r0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80089ca:	200c      	movs	r0, #12
	this->buffer_length = length;
 80089cc:	f8c1 380c 	str.w	r3, [r1, #2060]	; 0x80c
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 80089d0:	682b      	ldr	r3, [r5, #0]
	this->packet_buffer = buffer;
 80089d2:	f8c1 2808 	str.w	r2, [r1, #2056]	; 0x808
	this->buffer_index = 0;
 80089d6:	f881 6810 	strb.w	r6, [r1, #2064]	; 0x810
	this->driver = driver;
 80089da:	f8c1 5804 	str.w	r5, [r1, #2052]	; 0x804
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 80089de:	689f      	ldr	r7, [r3, #8]
    _Function_base() : _M_manager(nullptr) { }
 80089e0:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80089e2:	f7ff ff5f 	bl	80088a4 <_Znwj>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <_ZN5IOBusC1EP8IODriverPhm+0x5c>)
 80089e8:	4669      	mov	r1, sp
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80089ea:	6084      	str	r4, [r0, #8]
 80089ec:	9000      	str	r0, [sp, #0]
 80089ee:	e9c0 3600 	strd	r3, r6, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <_ZN5IOBusC1EP8IODriverPhm+0x60>)
 80089f4:	4628      	mov	r0, r5
 80089f6:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <_ZN5IOBusC1EP8IODriverPhm+0x64>)
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	47b8      	blx	r7
      if (_M_manager)
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	b11b      	cbz	r3, 8008a0a <_ZN5IOBusC1EP8IODriverPhm+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8008a02:	4669      	mov	r1, sp
 8008a04:	2203      	movs	r2, #3
 8008a06:	4608      	mov	r0, r1
 8008a08:	4798      	blx	r3
}
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	b005      	add	sp, #20
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a10:	0800bbf0 	.word	0x0800bbf0
 8008a14:	080088df 	.word	0x080088df
 8008a18:	0800894b 	.word	0x0800894b
 8008a1c:	08008971 	.word	0x08008971

08008a20 <_ZNKSt9type_info9hash_codeEv.isra.0>:
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }
#endif

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 8008a20:	b510      	push	{r4, lr}
    { return __name[0] == '*' ? __name + 1 : __name; }
 8008a22:	7803      	ldrb	r3, [r0, #0]
    size_t hash_code() const noexcept
 8008a24:	4604      	mov	r4, r0
    { return __name[0] == '*' ? __name + 1 : __name; }
 8008a26:	2b2a      	cmp	r3, #42	; 0x2a
 8008a28:	bf08      	it	eq
 8008a2a:	3401      	addeq	r4, #1
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7f7 fc61 	bl	80002f4 <strlen>
 8008a32:	4a03      	ldr	r2, [pc, #12]	; (8008a40 <_ZNKSt9type_info9hash_codeEv.isra.0+0x20>)
 8008a34:	4601      	mov	r1, r0
 8008a36:	4620      	mov	r0, r4
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _Hash_bytes(name(), __builtin_strlen(name()),
 8008a3c:	f000 b9ec 	b.w	8008e18 <_ZSt11_Hash_bytesPKvjj>
 8008a40:	c70f6907 	.word	0xc70f6907

08008a44 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	460d      	mov	r5, r1
 8008a48:	4604      	mov	r4, r0
	size_t struct_size = sizeof(T);
	size_t hash = typeid(T).hash_code();
 8008a4a:	4813      	ldr	r0, [pc, #76]	; (8008a98 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x54>)
 8008a4c:	f7ff ffe8 	bl	8008a20 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8008a50:	f005 023f 	and.w	r2, r5, #63	; 0x3f
 8008a54:	00d1      	lsls	r1, r2, #3
 8008a56:	eb04 02c2 	add.w	r2, r4, r2, lsl #3

	uint32_t insertion_point = hash % 256;

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8008a5a:	6893      	ldr	r3, [r2, #8]
 8008a5c:	b9d3      	cbnz	r3, 8008a94 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x50>
	uint32_t insertion_point = hash % 256;
 8008a5e:	b2c3      	uxtb	r3, r0

	if(struct_size > max_packet_size) {
		return false; // Packet size too large
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 8008a60:	f504 7701 	add.w	r7, r4, #516	; 0x204
 8008a64:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8008a68:	b146      	cbz	r6, 8008a7c <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8008a6a:	6876      	ldr	r6, [r6, #4]
 8008a6c:	4286      	cmp	r6, r0
 8008a6e:	d011      	beq.n	8008a94 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x50>
			return false; // Packet type already defined
		}

		insertion_point++;
 8008a70:	3301      	adds	r3, #1

		if(insertion_point == 256) {
 8008a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8008a76:	bf08      	it	eq
 8008a78:	2300      	moveq	r3, #0
 8008a7a:	e7f3      	b.n	8008a64 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x20>

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];

	def->id = identifier;
	def->size = (uint8_t) struct_size;
	def->hash = hash;
 8008a7c:	6090      	str	r0, [r2, #8]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8008a7e:	1d08      	adds	r0, r1, #4

	definitions_by_type[insertion_point] = def;
 8008a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	def->id = identifier;
 8008a84:	7115      	strb	r5, [r2, #4]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8008a86:	4404      	add	r4, r0
	def->size = (uint8_t) struct_size;
 8008a88:	250c      	movs	r5, #12

	return true;
 8008a8a:	2001      	movs	r0, #1
	def->size = (uint8_t) struct_size;
 8008a8c:	7155      	strb	r5, [r2, #5]
	definitions_by_type[insertion_point] = def;
 8008a8e:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
}
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Packet ID already in use
 8008a94:	2000      	movs	r0, #0
 8008a96:	e7fc      	b.n	8008a92 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x4e>
 8008a98:	0800bc00 	.word	0x0800bc00

08008a9c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4690      	mov	r8, r2
	if(def != nullptr) {
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	b1c9      	cbz	r1, 8008adc <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x40>
		uint32_t data_bytes_written = 0;
 8008aa8:	2600      	movs	r6, #0

		while(data_bytes_written < def->size) {
 8008aaa:	786b      	ldrb	r3, [r5, #1]
 8008aac:	42b3      	cmp	r3, r6
 8008aae:	d918      	bls.n	8008ae2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x46>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 8008abc:	786a      	ldrb	r2, [r5, #1]
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	eb08 0106 	add.w	r1, r8, r6
 8008ac4:	1b92      	subs	r2, r2, r6
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	4798      	blx	r3

			if(new_bytes == 0) {
 8008acc:	4607      	mov	r7, r0
 8008ace:	b128      	cbz	r0, 8008adc <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x40>
				return false;
			} else {
				transmit();
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	4620      	mov	r0, r4
				data_bytes_written += new_bytes;
 8008ad4:	443e      	add	r6, r7
				transmit();
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4798      	blx	r3
		while(data_bytes_written < def->size) {
 8008ada:	e7e6      	b.n	8008aaa <_ZN10MessageBus4sendEP16PacketDefinitionPh+0xe>
		}

		return true;
	}

	return false;
 8008adc:	2000      	movs	r0, #0
}
 8008ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	e7fb      	b.n	8008ade <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x42>

08008ae6 <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
//#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 8008ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
	if(length > 0) {
 8008aee:	b1fb      	cbz	r3, 8008b30 <_ZN10MessageBus7receiveEhPhm+0x4a>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 8008af0:	f001 083f 	and.w	r8, r1, #63	; 0x3f

		if(indexable_buffer->index + length > max_packet_size) {
 8008af4:	2600      	movs	r6, #0
 8008af6:	eb04 2e08 	add.w	lr, r4, r8, lsl #8
 8008afa:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8008afe:	f89e 1703 	ldrb.w	r1, [lr, #1795]	; 0x703
 8008b02:	4419      	add	r1, r3
 8008b04:	29ff      	cmp	r1, #255	; 0xff
 8008b06:	d811      	bhi.n	8008b2c <_ZN10MessageBus7receiveEhPhm+0x46>
		uint8_t packet_id = *pointer++;
 8008b08:	7815      	ldrb	r5, [r2, #0]
			indexable_buffer->index = 0; // Corrupted packet
			return;
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	fa1f fc86 	uxth.w	ip, r6
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8008b10:	f89e 9703 	ldrb.w	r9, [lr, #1795]	; 0x703
		for(uint16_t i = 0; i < length - 1; i++) {
 8008b14:	3601      	adds	r6, #1
 8008b16:	4563      	cmp	r3, ip
 8008b18:	d90c      	bls.n	8008b34 <_ZN10MessageBus7receiveEhPhm+0x4e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8008b1a:	f109 0101 	add.w	r1, r9, #1
 8008b1e:	44f1      	add	r9, lr
 8008b20:	f88e 1703 	strb.w	r1, [lr, #1795]	; 0x703
 8008b24:	5d91      	ldrb	r1, [r2, r6]
 8008b26:	f889 1604 	strb.w	r1, [r9, #1540]	; 0x604
		for(uint16_t i = 0; i < length - 1; i++) {
 8008b2a:	e7ef      	b.n	8008b0c <_ZN10MessageBus7receiveEhPhm+0x26>
			indexable_buffer->index = 0; // Corrupted packet
 8008b2c:	f88e 6703 	strb.w	r6, [lr, #1795]	; 0x703
			}

			indexable_buffer->index = 0;
		}
	}
}
 8008b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b34:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		if(indexable_buffer->index >= def->size) {
 8008b38:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8008b3c:	795b      	ldrb	r3, [r3, #5]
 8008b3e:	454b      	cmp	r3, r9
 8008b40:	d8f6      	bhi.n	8008b30 <_ZN10MessageBus7receiveEhPhm+0x4a>
			if(handlers[packet_id & 0b00111111] != nullptr) {
 8008b42:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8008b46:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8008b4a:	f8d6 3604 	ldr.w	r3, [r6, #1540]	; 0x604
 8008b4e:	b123      	cbz	r3, 8008b5a <_ZN10MessageBus7receiveEhPhm+0x74>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 8008b50:	eb04 2108 	add.w	r1, r4, r8, lsl #8
 8008b54:	f201 6104 	addw	r1, r1, #1540	; 0x604
 8008b58:	4798      	blx	r3
			if(forwarders[packet_id & 0b00111111] != nullptr) {
 8008b5a:	f8d6 0704 	ldr.w	r0, [r6, #1796]	; 0x704
 8008b5e:	b140      	cbz	r0, 8008b72 <_ZN10MessageBus7receiveEhPhm+0x8c>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 8008b60:	eb04 2208 	add.w	r2, r4, r8, lsl #8
		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 8008b64:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 8008b68:	f202 6204 	addw	r2, r2, #1540	; 0x604
 8008b6c:	3104      	adds	r1, #4
 8008b6e:	f7ff ff95 	bl	8008a9c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			indexable_buffer->index = 0;
 8008b72:	443c      	add	r4, r7
 8008b74:	2300      	movs	r3, #0
 8008b76:	f884 3703 	strb.w	r3, [r4, #1795]	; 0x703
 8008b7a:	e7d9      	b.n	8008b30 <_ZN10MessageBus7receiveEhPhm+0x4a>

08008b7c <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8008b7c:	b530      	push	{r4, r5, lr}
	uint32_t searchPoint = hash % 256;
 8008b7e:	b2cc      	uxtb	r4, r1
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8008b80:	4602      	mov	r2, r0
	uint32_t searchPoint = hash % 256;
 8008b82:	4623      	mov	r3, r4
	uint32_t searchStart = searchPoint;

	while(definitions_by_type[searchPoint] != nullptr) {
 8008b84:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8008b88:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
 8008b8c:	b150      	cbz	r0, 8008ba4 <_ZN10MessageBus8retrieveEj+0x28>
		size_t temp = definitions_by_type[searchPoint]->hash;
		if(temp == hash) {
 8008b8e:	6845      	ldr	r5, [r0, #4]
 8008b90:	42a9      	cmp	r1, r5
 8008b92:	d007      	beq.n	8008ba4 <_ZN10MessageBus8retrieveEj+0x28>
			return definitions_by_type[searchPoint];
		}

		searchPoint++;
 8008b94:	3301      	adds	r3, #1

		if(searchPoint == 256) {
			searchPoint = 0;
 8008b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b9a:	bf08      	it	eq
 8008b9c:	2300      	moveq	r3, #0
		}

		if(searchStart == searchPoint) {
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	d1f0      	bne.n	8008b84 <_ZN10MessageBus8retrieveEj+0x8>
			break; // No packet definition matching the given template type
		}
	}

	return nullptr;
 8008ba2:	2000      	movs	r0, #0
}
 8008ba4:	bd30      	pop	{r4, r5, pc}
	...

08008ba8 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E>:
template<typename T> bool MessageBus::handle(void (*handler)(uint8_t, T*)) {
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8008bac:	480b      	ldr	r0, [pc, #44]	; (8008bdc <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E+0x34>)
template<typename T> bool MessageBus::handle(void (*handler)(uint8_t, T*)) {
 8008bae:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8008bb0:	f7ff ff36 	bl	8008a20 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8008bb4:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ffe0 	bl	8008b7c <_ZN10MessageBus8retrieveEj>
	if(def != nullptr) {
 8008bbc:	b150      	cbz	r0, 8008bd4 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E+0x2c>
 8008bbe:	7800      	ldrb	r0, [r0, #0]
 8008bc0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(handlers[packetID] != nullptr) {
 8008bc4:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8008bc8:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008bcc:	b91b      	cbnz	r3, 8008bd6 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E+0x2e>
		return true;
 8008bce:	2001      	movs	r0, #1
		handlers[packetID] = (void (*)(uint8_t, void*)) handler;
 8008bd0:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
}
 8008bd4:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e7fc      	b.n	8008bd4 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbPFvhPT_E+0x2c>
 8008bda:	bf00      	nop
 8008bdc:	0800bc00 	.word	0x0800bc00

08008be0 <_ZN10NetworkBusD1Ev>:

	// For testing purposes :
	define<avionics_IMU_packet>(0);
}

NetworkBus::~NetworkBus(){};
 8008be0:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <_ZN10NetworkBusD1Ev+0x10>)
 8008be2:	b510      	push	{r4, lr}
 8008be4:	4604      	mov	r4, r0
 8008be6:	6003      	str	r3, [r0, #0]
 8008be8:	f7ff fe60 	bl	80088ac <_ZN5IOBusD1Ev>
 8008bec:	4620      	mov	r0, r4
 8008bee:	bd10      	pop	{r4, pc}
 8008bf0:	0800bc3c 	.word	0x0800bc3c

08008bf4 <_ZN10NetworkBusD0Ev>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	f7ff fff2 	bl	8008be0 <_ZN10NetworkBusD1Ev>
 8008bfc:	f644 1114 	movw	r1, #18708	; 0x4914
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 f907 	bl	8008e14 <_ZdlPvj>
 8008c06:	4620      	mov	r0, r4
 8008c08:	bd10      	pop	{r4, pc}
	...

08008c0c <_ZN10NetworkBusC1EP8IODriver>:
NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 8008c0c:	f500 4290 	add.w	r2, r0, #18432	; 0x4800
 8008c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c14:	b510      	push	{r4, lr}
 8008c16:	3211      	adds	r2, #17
 8008c18:	4604      	mov	r4, r0
 8008c1a:	f7ff fecd 	bl	80089b8 <_ZN5IOBusC1EP8IODriverPhm>
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <_ZN10NetworkBusC1EP8IODriver+0x24>)
	define<avionics_IMU_packet>(0);
 8008c20:	2100      	movs	r1, #0
 8008c22:	4620      	mov	r0, r4
NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 8008c24:	6023      	str	r3, [r4, #0]
	define<avionics_IMU_packet>(0);
 8008c26:	f7ff ff0d 	bl	8008a44 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>
}
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	bf00      	nop
 8008c30:	0800bc3c 	.word	0x0800bc3c

08008c34 <_ZN13STMUARTDriver8transmitEPhm>:
    this->receiver_func = receiver;
}

void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length)
{
    if(HAL_UART_Transmit(huart, buffer, length, HAL_MAX_DELAY) != HAL_OK){
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c38:	b292      	uxth	r2, r2
 8008c3a:	6840      	ldr	r0, [r0, #4]
 8008c3c:	f7fe bb83 	b.w	8007346 <HAL_UART_Transmit>

08008c40 <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
 8008c40:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
      if (_M_manager)
 8008c46:	b113      	cbz	r3, 8008c4e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8008c48:	2203      	movs	r2, #3
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4798      	blx	r3
    }
 8008c4e:	4620      	mov	r0, r4
 8008c50:	bd10      	pop	{r4, pc}
	...

08008c54 <_ZN13STMUARTDriverD1Ev>:

/**
 * @brief Destroy the STMUARTDriver::STMUARTDriver object
 *
 */
STMUARTDriver::~STMUARTDriver() {
 8008c54:	4b08      	ldr	r3, [pc, #32]	; (8008c78 <_ZN13STMUARTDriverD1Ev+0x24>)
 8008c56:	b510      	push	{r4, lr}
 8008c58:	4604      	mov	r4, r0
 8008c5a:	6003      	str	r3, [r0, #0]
    vPortFree(buffer);
 8008c5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008c5e:	f7ff fde3 	bl	8008828 <vPortFree>
    delete this->recvThread;
 8008c62:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c64:	b110      	cbz	r0, 8008c6c <_ZN13STMUARTDriverD1Ev+0x18>
 8008c66:	6803      	ldr	r3, [r0, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4798      	blx	r3
    class function<_Res(_ArgTypes...)>
 8008c6c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008c70:	f7ff ffe6 	bl	8008c40 <_ZNSt14_Function_baseD1Ev>
}
 8008c74:	4620      	mov	r0, r4
 8008c76:	bd10      	pop	{r4, pc}
 8008c78:	0800bc84 	.word	0x0800bc84

08008c7c <_ZN13STMUARTDriverD0Ev>:
STMUARTDriver::~STMUARTDriver() {
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	4604      	mov	r4, r0
}
 8008c80:	f7ff ffe8 	bl	8008c54 <_ZN13STMUARTDriverD1Ev>
 8008c84:	2144      	movs	r1, #68	; 0x44
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 f8c4 	bl	8008e14 <_ZdlPvj>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bd10      	pop	{r4, pc}

08008c90 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE>:
{
 8008c90:	b570      	push	{r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8008c92:	2300      	movs	r3, #0
 8008c94:	b086      	sub	sp, #24
 8008c96:	4604      	mov	r4, r0
 8008c98:	460e      	mov	r6, r1
 8008c9a:	9304      	str	r3, [sp, #16]
    bool _M_empty() const { return !_M_manager; }
 8008c9c:	ad02      	add	r5, sp, #8
 8008c9e:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8008ca0:	b133      	cbz	r3, 8008cb0 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8008ca8:	68f3      	ldr	r3, [r6, #12]
 8008caa:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
 8008cac:	68b3      	ldr	r3, [r6, #8]
 8008cae:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008cb0:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
 8008cb2:	f104 0330 	add.w	r3, r4, #48	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cba:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8008cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008cc2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8008cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cca:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008cce:	9b04      	ldr	r3, [sp, #16]
    class function<_Res(_ArgTypes...)>
 8008cd0:	4628      	mov	r0, r5
      __a = _GLIBCXX_MOVE(__b);
 8008cd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8008cd4:	63a3      	str	r3, [r4, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008cd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8008cd8:	9204      	str	r2, [sp, #16]
 8008cda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8008cdc:	63e3      	str	r3, [r4, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	f7ff ffae 	bl	8008c40 <_ZNSt14_Function_baseD1Ev>
}
 8008ce4:	b006      	add	sp, #24
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}

08008ce8 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>:
STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): huart(huart), recvThread(nullptr)
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	4b0e      	ldr	r3, [pc, #56]	; (8008d24 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x3c>)
 8008cec:	4606      	mov	r6, r0
 8008cee:	4d0e      	ldr	r5, [pc, #56]	; (8008d28 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x40>)
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	f100 040c 	add.w	r4, r0, #12
 8008cf6:	e9c0 3100 	strd	r3, r1, [r0]
 8008cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _Function_base() : _M_manager(nullptr) { }
 8008d06:	2300      	movs	r3, #0
    this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8008d08:	2080      	movs	r0, #128	; 0x80
 8008d0a:	63b3      	str	r3, [r6, #56]	; 0x38
STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): huart(huart), recvThread(nullptr)
 8008d0c:	6433      	str	r3, [r6, #64]	; 0x40
    this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8008d0e:	f7ff fcf3 	bl	80086f8 <pvPortMalloc>
    if(HAL_UART_Receive_DMA(huart, this->buffer, UART_BUFFER_SIZE) != HAL_OK)
 8008d12:	2280      	movs	r2, #128	; 0x80
    this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8008d14:	4601      	mov	r1, r0
 8008d16:	62f0      	str	r0, [r6, #44]	; 0x2c
    if(HAL_UART_Receive_DMA(huart, this->buffer, UART_BUFFER_SIZE) != HAL_OK)
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7fe fc2b 	bl	8007574 <HAL_UART_Receive_DMA>
}
 8008d1e:	4630      	mov	r0, r6
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	0800bc84 	.word	0x0800bc84
 8008d28:	0800ba48 	.word	0x0800ba48

08008d2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8008d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008d2e:	2400      	movs	r4, #0
 8008d30:	2310      	movs	r3, #16
 8008d32:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d36:	6803      	ldr	r3, [r0, #0]
 8008d38:	4615      	mov	r5, r2
 8008d3a:	699e      	ldr	r6, [r3, #24]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	466b      	mov	r3, sp
 8008d40:	e9cd 4400 	strd	r4, r4, [sp]
 8008d44:	47b0      	blx	r6
 8008d46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d4a:	f003 0306 	and.w	r3, r3, #6
 8008d4e:	2b06      	cmp	r3, #6
 8008d50:	bf03      	ittte	eq
 8008d52:	9b00      	ldreq	r3, [sp, #0]
 8008d54:	602b      	streq	r3, [r5, #0]
 8008d56:	2001      	moveq	r0, #1
 8008d58:	4620      	movne	r0, r4
 8008d5a:	b004      	add	sp, #16
 8008d5c:	bd70      	pop	{r4, r5, r6, pc}

08008d5e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8008d5e:	9800      	ldr	r0, [sp, #0]
 8008d60:	4290      	cmp	r0, r2
 8008d62:	bf14      	ite	ne
 8008d64:	2001      	movne	r0, #1
 8008d66:	2006      	moveq	r0, #6
 8008d68:	4770      	bx	lr
	...

08008d6c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	4604      	mov	r4, r0
 8008d74:	f000 f903 	bl	8008f7e <_ZNSt9type_infoD1Ev>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	bd10      	pop	{r4, pc}
 8008d7c:	0800bccc 	.word	0x0800bccc

08008d80 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	f7ff fff2 	bl	8008d6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	2108      	movs	r1, #8
 8008d8c:	f000 f842 	bl	8008e14 <_ZdlPvj>
 8008d90:	4620      	mov	r0, r4
 8008d92:	bd10      	pop	{r4, pc}

08008d94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8008d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d98:	461f      	mov	r7, r3
 8008d9a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8008d9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008da2:	4598      	cmp	r8, r3
 8008da4:	4606      	mov	r6, r0
 8008da6:	4615      	mov	r5, r2
 8008da8:	d107      	bne.n	8008dba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8008daa:	9907      	ldr	r1, [sp, #28]
 8008dac:	f000 f8ea 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008db0:	b118      	cbz	r0, 8008dba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8008db2:	7165      	strb	r5, [r4, #5]
 8008db4:	2000      	movs	r0, #0
 8008db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dba:	4639      	mov	r1, r7
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 f8e1 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0f6      	beq.n	8008db4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f8c4 8000 	str.w	r8, [r4]
 8008dcc:	7125      	strb	r5, [r4, #4]
 8008dce:	71a3      	strb	r3, [r4, #6]
 8008dd0:	e7f0      	b.n	8008db4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08008dd2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8008dd2:	b538      	push	{r3, r4, r5, lr}
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	461c      	mov	r4, r3
 8008dd8:	f000 f8d4 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008ddc:	b120      	cbz	r0, 8008de8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8008dde:	2308      	movs	r3, #8
 8008de0:	60e3      	str	r3, [r4, #12]
 8008de2:	2306      	movs	r3, #6
 8008de4:	6025      	str	r5, [r4, #0]
 8008de6:	7123      	strb	r3, [r4, #4]
 8008de8:	bd38      	pop	{r3, r4, r5, pc}

08008dea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8008dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dec:	4605      	mov	r5, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	9201      	str	r2, [sp, #4]
 8008df2:	461e      	mov	r6, r3
 8008df4:	f000 f8c6 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008df8:	b950      	cbnz	r0, 8008e10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008dfa:	2e03      	cmp	r6, #3
 8008dfc:	d808      	bhi.n	8008e10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	4629      	mov	r1, r5
 8008e06:	4620      	mov	r0, r4
 8008e08:	b002      	add	sp, #8
 8008e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e0e:	4718      	bx	r3
 8008e10:	b002      	add	sp, #8
 8008e12:	bd70      	pop	{r4, r5, r6, pc}

08008e14 <_ZdlPvj>:
 8008e14:	f7ff bd48 	b.w	80088a8 <_ZdlPv>

08008e18 <_ZSt11_Hash_bytesPKvjj>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	4c18      	ldr	r4, [pc, #96]	; (8008e7c <_ZSt11_Hash_bytesPKvjj+0x64>)
 8008e1c:	404a      	eors	r2, r1
 8008e1e:	460d      	mov	r5, r1
 8008e20:	1846      	adds	r6, r0, r1
 8008e22:	2d03      	cmp	r5, #3
 8008e24:	eba6 0305 	sub.w	r3, r6, r5
 8008e28:	d908      	bls.n	8008e3c <_ZSt11_Hash_bytesPKvjj+0x24>
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4363      	muls	r3, r4
 8008e2e:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 8008e32:	4362      	muls	r2, r4
 8008e34:	4363      	muls	r3, r4
 8008e36:	405a      	eors	r2, r3
 8008e38:	3d04      	subs	r5, #4
 8008e3a:	e7f2      	b.n	8008e22 <_ZSt11_Hash_bytesPKvjj+0xa>
 8008e3c:	088b      	lsrs	r3, r1, #2
 8008e3e:	f06f 0503 	mvn.w	r5, #3
 8008e42:	fb05 1103 	mla	r1, r5, r3, r1
 8008e46:	2902      	cmp	r1, #2
 8008e48:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8008e4c:	d011      	beq.n	8008e72 <_ZSt11_Hash_bytesPKvjj+0x5a>
 8008e4e:	2903      	cmp	r1, #3
 8008e50:	d00c      	beq.n	8008e6c <_ZSt11_Hash_bytesPKvjj+0x54>
 8008e52:	2901      	cmp	r1, #1
 8008e54:	d103      	bne.n	8008e5e <_ZSt11_Hash_bytesPKvjj+0x46>
 8008e56:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 8008e5a:	4042      	eors	r2, r0
 8008e5c:	4362      	muls	r2, r4
 8008e5e:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 8008e62:	fb04 f002 	mul.w	r0, r4, r2
 8008e66:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	78a9      	ldrb	r1, [r5, #2]
 8008e6e:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 8008e72:	7869      	ldrb	r1, [r5, #1]
 8008e74:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8008e78:	e7ed      	b.n	8008e56 <_ZSt11_Hash_bytesPKvjj+0x3e>
 8008e7a:	bf00      	nop
 8008e7c:	5bd1e995 	.word	0x5bd1e995

08008e80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	4604      	mov	r4, r0
 8008e88:	f7ff ff70 	bl	8008d6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	bd10      	pop	{r4, pc}
 8008e90:	0800bd2c 	.word	0x0800bd2c

08008e94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	f7ff fff2 	bl	8008e80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	210c      	movs	r1, #12
 8008ea0:	f7ff ffb8 	bl	8008e14 <_ZdlPvj>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	bd10      	pop	{r4, pc}

08008ea8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8008ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eaa:	9f08      	ldr	r7, [sp, #32]
 8008eac:	4297      	cmp	r7, r2
 8008eae:	4605      	mov	r5, r0
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	d00a      	beq.n	8008ecc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8008eb6:	68a8      	ldr	r0, [r5, #8]
 8008eb8:	6802      	ldr	r2, [r0, #0]
 8008eba:	9708      	str	r7, [sp, #32]
 8008ebc:	6a15      	ldr	r5, [r2, #32]
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	46ac      	mov	ip, r5
 8008ec4:	b003      	add	sp, #12
 8008ec6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008eca:	4760      	bx	ip
 8008ecc:	4619      	mov	r1, r3
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	f000 f858 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d0ed      	beq.n	8008eb6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8008eda:	2006      	movs	r0, #6
 8008edc:	b003      	add	sp, #12
 8008ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ee0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8008ee0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8008eec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	4617      	mov	r7, r2
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	f000 f845 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008efa:	b190      	cbz	r0, 8008f22 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	6034      	str	r4, [r6, #0]
 8008f00:	7137      	strb	r7, [r6, #4]
 8008f02:	db09      	blt.n	8008f18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8008f04:	1961      	adds	r1, r4, r5
 8008f06:	458a      	cmp	sl, r1
 8008f08:	bf0c      	ite	eq
 8008f0a:	2106      	moveq	r1, #6
 8008f0c:	2101      	movne	r1, #1
 8008f0e:	71b1      	strb	r1, [r6, #6]
 8008f10:	2000      	movs	r0, #0
 8008f12:	b001      	add	sp, #4
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	3502      	adds	r5, #2
 8008f1a:	d1f9      	bne.n	8008f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	71b3      	strb	r3, [r6, #6]
 8008f20:	e7f6      	b.n	8008f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f22:	4554      	cmp	r4, sl
 8008f24:	d106      	bne.n	8008f34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008f26:	4659      	mov	r1, fp
 8008f28:	4648      	mov	r0, r9
 8008f2a:	f000 f82b 	bl	8008f84 <_ZNKSt9type_infoeqERKS_>
 8008f2e:	b108      	cbz	r0, 8008f34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008f30:	7177      	strb	r7, [r6, #5]
 8008f32:	e7ed      	b.n	8008f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008f34:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008f38:	6803      	ldr	r3, [r0, #0]
 8008f3a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8008f3e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8008f42:	69dc      	ldr	r4, [r3, #28]
 8008f44:	463a      	mov	r2, r7
 8008f46:	4643      	mov	r3, r8
 8008f48:	4629      	mov	r1, r5
 8008f4a:	46a4      	mov	ip, r4
 8008f4c:	b001      	add	sp, #4
 8008f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f52:	4760      	bx	ip

08008f54 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8008f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	461e      	mov	r6, r3
 8008f60:	f7ff ff37 	bl	8008dd2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8008f64:	b948      	cbnz	r0, 8008f7a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8008f66:	68b8      	ldr	r0, [r7, #8]
 8008f68:	6803      	ldr	r3, [r0, #0]
 8008f6a:	699f      	ldr	r7, [r3, #24]
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4633      	mov	r3, r6
 8008f70:	4621      	mov	r1, r4
 8008f72:	46bc      	mov	ip, r7
 8008f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	4760      	bx	ip
 8008f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f7e <_ZNSt9type_infoD1Ev>:
 8008f7e:	4770      	bx	lr

08008f80 <_ZNKSt9type_info14__is_pointer_pEv>:
 8008f80:	2000      	movs	r0, #0
 8008f82:	4770      	bx	lr

08008f84 <_ZNKSt9type_infoeqERKS_>:
 8008f84:	4281      	cmp	r1, r0
 8008f86:	b508      	push	{r3, lr}
 8008f88:	d00e      	beq.n	8008fa8 <_ZNKSt9type_infoeqERKS_+0x24>
 8008f8a:	6840      	ldr	r0, [r0, #4]
 8008f8c:	7803      	ldrb	r3, [r0, #0]
 8008f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f90:	d00c      	beq.n	8008fac <_ZNKSt9type_infoeqERKS_+0x28>
 8008f92:	6849      	ldr	r1, [r1, #4]
 8008f94:	780b      	ldrb	r3, [r1, #0]
 8008f96:	2b2a      	cmp	r3, #42	; 0x2a
 8008f98:	bf08      	it	eq
 8008f9a:	3101      	addeq	r1, #1
 8008f9c:	f7f7 f9a0 	bl	80002e0 <strcmp>
 8008fa0:	fab0 f080 	clz	r0, r0
 8008fa4:	0940      	lsrs	r0, r0, #5
 8008fa6:	bd08      	pop	{r3, pc}
 8008fa8:	2001      	movs	r0, #1
 8008faa:	e7fc      	b.n	8008fa6 <_ZNKSt9type_infoeqERKS_+0x22>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7fa      	b.n	8008fa6 <_ZNKSt9type_infoeqERKS_+0x22>

08008fb0 <abort>:
 8008fb0:	b508      	push	{r3, lr}
 8008fb2:	2006      	movs	r0, #6
 8008fb4:	f000 feb8 	bl	8009d28 <raise>
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7f8 fc35 	bl	8001828 <_exit>
	...

08008fc0 <__errno>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <__errno+0x8>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	24000014 	.word	0x24000014

08008fcc <std>:
 8008fcc:	2300      	movs	r3, #0
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8008fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fda:	6083      	str	r3, [r0, #8]
 8008fdc:	8181      	strh	r1, [r0, #12]
 8008fde:	6643      	str	r3, [r0, #100]	; 0x64
 8008fe0:	81c2      	strh	r2, [r0, #14]
 8008fe2:	6183      	str	r3, [r0, #24]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	305c      	adds	r0, #92	; 0x5c
 8008fea:	f000 f91a 	bl	8009222 <memset>
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <std+0x38>)
 8008ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ff2:	4b05      	ldr	r3, [pc, #20]	; (8009008 <std+0x3c>)
 8008ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <std+0x40>)
 8008ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <std+0x44>)
 8008ffc:	6224      	str	r4, [r4, #32]
 8008ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8009000:	bd10      	pop	{r4, pc}
 8009002:	bf00      	nop
 8009004:	08009d61 	.word	0x08009d61
 8009008:	08009d83 	.word	0x08009d83
 800900c:	08009dbb 	.word	0x08009dbb
 8009010:	08009ddf 	.word	0x08009ddf

08009014 <_cleanup_r>:
 8009014:	4901      	ldr	r1, [pc, #4]	; (800901c <_cleanup_r+0x8>)
 8009016:	f000 b8af 	b.w	8009178 <_fwalk_reent>
 800901a:	bf00      	nop
 800901c:	0800acb1 	.word	0x0800acb1

08009020 <__sfmoreglue>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	2268      	movs	r2, #104	; 0x68
 8009024:	1e4d      	subs	r5, r1, #1
 8009026:	4355      	muls	r5, r2
 8009028:	460e      	mov	r6, r1
 800902a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800902e:	f000 f921 	bl	8009274 <_malloc_r>
 8009032:	4604      	mov	r4, r0
 8009034:	b140      	cbz	r0, 8009048 <__sfmoreglue+0x28>
 8009036:	2100      	movs	r1, #0
 8009038:	e9c0 1600 	strd	r1, r6, [r0]
 800903c:	300c      	adds	r0, #12
 800903e:	60a0      	str	r0, [r4, #8]
 8009040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009044:	f000 f8ed 	bl	8009222 <memset>
 8009048:	4620      	mov	r0, r4
 800904a:	bd70      	pop	{r4, r5, r6, pc}

0800904c <__sfp_lock_acquire>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__sfp_lock_acquire+0x8>)
 800904e:	f000 b8d8 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	24004a0d 	.word	0x24004a0d

08009058 <__sfp_lock_release>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__sfp_lock_release+0x8>)
 800905a:	f000 b8d3 	b.w	8009204 <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	24004a0d 	.word	0x24004a0d

08009064 <__sinit_lock_acquire>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__sinit_lock_acquire+0x8>)
 8009066:	f000 b8cc 	b.w	8009202 <__retarget_lock_acquire_recursive>
 800906a:	bf00      	nop
 800906c:	24004a0e 	.word	0x24004a0e

08009070 <__sinit_lock_release>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__sinit_lock_release+0x8>)
 8009072:	f000 b8c7 	b.w	8009204 <__retarget_lock_release_recursive>
 8009076:	bf00      	nop
 8009078:	24004a0e 	.word	0x24004a0e

0800907c <__sinit>:
 800907c:	b510      	push	{r4, lr}
 800907e:	4604      	mov	r4, r0
 8009080:	f7ff fff0 	bl	8009064 <__sinit_lock_acquire>
 8009084:	69a3      	ldr	r3, [r4, #24]
 8009086:	b11b      	cbz	r3, 8009090 <__sinit+0x14>
 8009088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800908c:	f7ff bff0 	b.w	8009070 <__sinit_lock_release>
 8009090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009094:	6523      	str	r3, [r4, #80]	; 0x50
 8009096:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <__sinit+0x68>)
 8009098:	4a13      	ldr	r2, [pc, #76]	; (80090e8 <__sinit+0x6c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	62a2      	str	r2, [r4, #40]	; 0x28
 800909e:	42a3      	cmp	r3, r4
 80090a0:	bf04      	itt	eq
 80090a2:	2301      	moveq	r3, #1
 80090a4:	61a3      	streq	r3, [r4, #24]
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 f820 	bl	80090ec <__sfp>
 80090ac:	6060      	str	r0, [r4, #4]
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f81c 	bl	80090ec <__sfp>
 80090b4:	60a0      	str	r0, [r4, #8]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 f818 	bl	80090ec <__sfp>
 80090bc:	2200      	movs	r2, #0
 80090be:	60e0      	str	r0, [r4, #12]
 80090c0:	2104      	movs	r1, #4
 80090c2:	6860      	ldr	r0, [r4, #4]
 80090c4:	f7ff ff82 	bl	8008fcc <std>
 80090c8:	68a0      	ldr	r0, [r4, #8]
 80090ca:	2201      	movs	r2, #1
 80090cc:	2109      	movs	r1, #9
 80090ce:	f7ff ff7d 	bl	8008fcc <std>
 80090d2:	68e0      	ldr	r0, [r4, #12]
 80090d4:	2202      	movs	r2, #2
 80090d6:	2112      	movs	r1, #18
 80090d8:	f7ff ff78 	bl	8008fcc <std>
 80090dc:	2301      	movs	r3, #1
 80090de:	61a3      	str	r3, [r4, #24]
 80090e0:	e7d2      	b.n	8009088 <__sinit+0xc>
 80090e2:	bf00      	nop
 80090e4:	0800bdc8 	.word	0x0800bdc8
 80090e8:	08009015 	.word	0x08009015

080090ec <__sfp>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	4607      	mov	r7, r0
 80090f0:	f7ff ffac 	bl	800904c <__sfp_lock_acquire>
 80090f4:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <__sfp+0x84>)
 80090f6:	681e      	ldr	r6, [r3, #0]
 80090f8:	69b3      	ldr	r3, [r6, #24]
 80090fa:	b913      	cbnz	r3, 8009102 <__sfp+0x16>
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff ffbd 	bl	800907c <__sinit>
 8009102:	3648      	adds	r6, #72	; 0x48
 8009104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009108:	3b01      	subs	r3, #1
 800910a:	d503      	bpl.n	8009114 <__sfp+0x28>
 800910c:	6833      	ldr	r3, [r6, #0]
 800910e:	b30b      	cbz	r3, 8009154 <__sfp+0x68>
 8009110:	6836      	ldr	r6, [r6, #0]
 8009112:	e7f7      	b.n	8009104 <__sfp+0x18>
 8009114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009118:	b9d5      	cbnz	r5, 8009150 <__sfp+0x64>
 800911a:	4b16      	ldr	r3, [pc, #88]	; (8009174 <__sfp+0x88>)
 800911c:	60e3      	str	r3, [r4, #12]
 800911e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009122:	6665      	str	r5, [r4, #100]	; 0x64
 8009124:	f000 f86c 	bl	8009200 <__retarget_lock_init_recursive>
 8009128:	f7ff ff96 	bl	8009058 <__sfp_lock_release>
 800912c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009134:	6025      	str	r5, [r4, #0]
 8009136:	61a5      	str	r5, [r4, #24]
 8009138:	2208      	movs	r2, #8
 800913a:	4629      	mov	r1, r5
 800913c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009140:	f000 f86f 	bl	8009222 <memset>
 8009144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800914c:	4620      	mov	r0, r4
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009150:	3468      	adds	r4, #104	; 0x68
 8009152:	e7d9      	b.n	8009108 <__sfp+0x1c>
 8009154:	2104      	movs	r1, #4
 8009156:	4638      	mov	r0, r7
 8009158:	f7ff ff62 	bl	8009020 <__sfmoreglue>
 800915c:	4604      	mov	r4, r0
 800915e:	6030      	str	r0, [r6, #0]
 8009160:	2800      	cmp	r0, #0
 8009162:	d1d5      	bne.n	8009110 <__sfp+0x24>
 8009164:	f7ff ff78 	bl	8009058 <__sfp_lock_release>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	e7ee      	b.n	800914c <__sfp+0x60>
 800916e:	bf00      	nop
 8009170:	0800bdc8 	.word	0x0800bdc8
 8009174:	ffff0001 	.word	0xffff0001

08009178 <_fwalk_reent>:
 8009178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4606      	mov	r6, r0
 800917e:	4688      	mov	r8, r1
 8009180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009184:	2700      	movs	r7, #0
 8009186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800918a:	f1b9 0901 	subs.w	r9, r9, #1
 800918e:	d505      	bpl.n	800919c <_fwalk_reent+0x24>
 8009190:	6824      	ldr	r4, [r4, #0]
 8009192:	2c00      	cmp	r4, #0
 8009194:	d1f7      	bne.n	8009186 <_fwalk_reent+0xe>
 8009196:	4638      	mov	r0, r7
 8009198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919c:	89ab      	ldrh	r3, [r5, #12]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d907      	bls.n	80091b2 <_fwalk_reent+0x3a>
 80091a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091a6:	3301      	adds	r3, #1
 80091a8:	d003      	beq.n	80091b2 <_fwalk_reent+0x3a>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4630      	mov	r0, r6
 80091ae:	47c0      	blx	r8
 80091b0:	4307      	orrs	r7, r0
 80091b2:	3568      	adds	r5, #104	; 0x68
 80091b4:	e7e9      	b.n	800918a <_fwalk_reent+0x12>
	...

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4d0d      	ldr	r5, [pc, #52]	; (80091f0 <__libc_init_array+0x38>)
 80091bc:	4c0d      	ldr	r4, [pc, #52]	; (80091f4 <__libc_init_array+0x3c>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	2600      	movs	r6, #0
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	4d0b      	ldr	r5, [pc, #44]	; (80091f8 <__libc_init_array+0x40>)
 80091ca:	4c0c      	ldr	r4, [pc, #48]	; (80091fc <__libc_init_array+0x44>)
 80091cc:	f002 fc00 	bl	800b9d0 <_init>
 80091d0:	1b64      	subs	r4, r4, r5
 80091d2:	10a4      	asrs	r4, r4, #2
 80091d4:	2600      	movs	r6, #0
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e0:	4798      	blx	r3
 80091e2:	3601      	adds	r6, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ea:	4798      	blx	r3
 80091ec:	3601      	adds	r6, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	0800c14c 	.word	0x0800c14c
 80091f4:	0800c14c 	.word	0x0800c14c
 80091f8:	0800c14c 	.word	0x0800c14c
 80091fc:	0800c154 	.word	0x0800c154

08009200 <__retarget_lock_init_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_acquire_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_release_recursive>:
 8009204:	4770      	bx	lr

08009206 <memcpy>:
 8009206:	440a      	add	r2, r1
 8009208:	4291      	cmp	r1, r2
 800920a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800920e:	d100      	bne.n	8009212 <memcpy+0xc>
 8009210:	4770      	bx	lr
 8009212:	b510      	push	{r4, lr}
 8009214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800921c:	4291      	cmp	r1, r2
 800921e:	d1f9      	bne.n	8009214 <memcpy+0xe>
 8009220:	bd10      	pop	{r4, pc}

08009222 <memset>:
 8009222:	4402      	add	r2, r0
 8009224:	4603      	mov	r3, r0
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <memset+0xa>
 800922a:	4770      	bx	lr
 800922c:	f803 1b01 	strb.w	r1, [r3], #1
 8009230:	e7f9      	b.n	8009226 <memset+0x4>
	...

08009234 <sbrk_aligned>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4e0e      	ldr	r6, [pc, #56]	; (8009270 <sbrk_aligned+0x3c>)
 8009238:	460c      	mov	r4, r1
 800923a:	6831      	ldr	r1, [r6, #0]
 800923c:	4605      	mov	r5, r0
 800923e:	b911      	cbnz	r1, 8009246 <sbrk_aligned+0x12>
 8009240:	f000 fd3a 	bl	8009cb8 <_sbrk_r>
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4621      	mov	r1, r4
 8009248:	4628      	mov	r0, r5
 800924a:	f000 fd35 	bl	8009cb8 <_sbrk_r>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d00a      	beq.n	8009268 <sbrk_aligned+0x34>
 8009252:	1cc4      	adds	r4, r0, #3
 8009254:	f024 0403 	bic.w	r4, r4, #3
 8009258:	42a0      	cmp	r0, r4
 800925a:	d007      	beq.n	800926c <sbrk_aligned+0x38>
 800925c:	1a21      	subs	r1, r4, r0
 800925e:	4628      	mov	r0, r5
 8009260:	f000 fd2a 	bl	8009cb8 <_sbrk_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d101      	bne.n	800926c <sbrk_aligned+0x38>
 8009268:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800926c:	4620      	mov	r0, r4
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	24004a14 	.word	0x24004a14

08009274 <_malloc_r>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	1ccd      	adds	r5, r1, #3
 800927a:	f025 0503 	bic.w	r5, r5, #3
 800927e:	3508      	adds	r5, #8
 8009280:	2d0c      	cmp	r5, #12
 8009282:	bf38      	it	cc
 8009284:	250c      	movcc	r5, #12
 8009286:	2d00      	cmp	r5, #0
 8009288:	4607      	mov	r7, r0
 800928a:	db01      	blt.n	8009290 <_malloc_r+0x1c>
 800928c:	42a9      	cmp	r1, r5
 800928e:	d905      	bls.n	800929c <_malloc_r+0x28>
 8009290:	230c      	movs	r3, #12
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	2600      	movs	r6, #0
 8009296:	4630      	mov	r0, r6
 8009298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929c:	4e2e      	ldr	r6, [pc, #184]	; (8009358 <_malloc_r+0xe4>)
 800929e:	f001 fdc7 	bl	800ae30 <__malloc_lock>
 80092a2:	6833      	ldr	r3, [r6, #0]
 80092a4:	461c      	mov	r4, r3
 80092a6:	bb34      	cbnz	r4, 80092f6 <_malloc_r+0x82>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7ff ffc2 	bl	8009234 <sbrk_aligned>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	4604      	mov	r4, r0
 80092b4:	d14d      	bne.n	8009352 <_malloc_r+0xde>
 80092b6:	6834      	ldr	r4, [r6, #0]
 80092b8:	4626      	mov	r6, r4
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d140      	bne.n	8009340 <_malloc_r+0xcc>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4638      	mov	r0, r7
 80092c4:	eb04 0803 	add.w	r8, r4, r3
 80092c8:	f000 fcf6 	bl	8009cb8 <_sbrk_r>
 80092cc:	4580      	cmp	r8, r0
 80092ce:	d13a      	bne.n	8009346 <_malloc_r+0xd2>
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	3503      	adds	r5, #3
 80092d4:	1a6d      	subs	r5, r5, r1
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	4629      	mov	r1, r5
 80092e4:	4638      	mov	r0, r7
 80092e6:	f7ff ffa5 	bl	8009234 <sbrk_aligned>
 80092ea:	3001      	adds	r0, #1
 80092ec:	d02b      	beq.n	8009346 <_malloc_r+0xd2>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	442b      	add	r3, r5
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e00e      	b.n	8009314 <_malloc_r+0xa0>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	1b52      	subs	r2, r2, r5
 80092fa:	d41e      	bmi.n	800933a <_malloc_r+0xc6>
 80092fc:	2a0b      	cmp	r2, #11
 80092fe:	d916      	bls.n	800932e <_malloc_r+0xba>
 8009300:	1961      	adds	r1, r4, r5
 8009302:	42a3      	cmp	r3, r4
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	bf18      	it	ne
 8009308:	6059      	strne	r1, [r3, #4]
 800930a:	6863      	ldr	r3, [r4, #4]
 800930c:	bf08      	it	eq
 800930e:	6031      	streq	r1, [r6, #0]
 8009310:	5162      	str	r2, [r4, r5]
 8009312:	604b      	str	r3, [r1, #4]
 8009314:	4638      	mov	r0, r7
 8009316:	f104 060b 	add.w	r6, r4, #11
 800931a:	f001 fd8f 	bl	800ae3c <__malloc_unlock>
 800931e:	f026 0607 	bic.w	r6, r6, #7
 8009322:	1d23      	adds	r3, r4, #4
 8009324:	1af2      	subs	r2, r6, r3
 8009326:	d0b6      	beq.n	8009296 <_malloc_r+0x22>
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	50a3      	str	r3, [r4, r2]
 800932c:	e7b3      	b.n	8009296 <_malloc_r+0x22>
 800932e:	6862      	ldr	r2, [r4, #4]
 8009330:	42a3      	cmp	r3, r4
 8009332:	bf0c      	ite	eq
 8009334:	6032      	streq	r2, [r6, #0]
 8009336:	605a      	strne	r2, [r3, #4]
 8009338:	e7ec      	b.n	8009314 <_malloc_r+0xa0>
 800933a:	4623      	mov	r3, r4
 800933c:	6864      	ldr	r4, [r4, #4]
 800933e:	e7b2      	b.n	80092a6 <_malloc_r+0x32>
 8009340:	4634      	mov	r4, r6
 8009342:	6876      	ldr	r6, [r6, #4]
 8009344:	e7b9      	b.n	80092ba <_malloc_r+0x46>
 8009346:	230c      	movs	r3, #12
 8009348:	603b      	str	r3, [r7, #0]
 800934a:	4638      	mov	r0, r7
 800934c:	f001 fd76 	bl	800ae3c <__malloc_unlock>
 8009350:	e7a1      	b.n	8009296 <_malloc_r+0x22>
 8009352:	6025      	str	r5, [r4, #0]
 8009354:	e7de      	b.n	8009314 <_malloc_r+0xa0>
 8009356:	bf00      	nop
 8009358:	24004a10 	.word	0x24004a10

0800935c <__cvt>:
 800935c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935e:	ed2d 8b02 	vpush	{d8}
 8009362:	eeb0 8b40 	vmov.f64	d8, d0
 8009366:	b085      	sub	sp, #20
 8009368:	4617      	mov	r7, r2
 800936a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800936c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800936e:	ee18 2a90 	vmov	r2, s17
 8009372:	f025 0520 	bic.w	r5, r5, #32
 8009376:	2a00      	cmp	r2, #0
 8009378:	bfb6      	itet	lt
 800937a:	222d      	movlt	r2, #45	; 0x2d
 800937c:	2200      	movge	r2, #0
 800937e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009382:	2d46      	cmp	r5, #70	; 0x46
 8009384:	460c      	mov	r4, r1
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	d004      	beq.n	8009394 <__cvt+0x38>
 800938a:	2d45      	cmp	r5, #69	; 0x45
 800938c:	d100      	bne.n	8009390 <__cvt+0x34>
 800938e:	3401      	adds	r4, #1
 8009390:	2102      	movs	r1, #2
 8009392:	e000      	b.n	8009396 <__cvt+0x3a>
 8009394:	2103      	movs	r1, #3
 8009396:	ab03      	add	r3, sp, #12
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	ab02      	add	r3, sp, #8
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	4622      	mov	r2, r4
 80093a0:	4633      	mov	r3, r6
 80093a2:	eeb0 0b48 	vmov.f64	d0, d8
 80093a6:	f000 fe8f 	bl	800a0c8 <_dtoa_r>
 80093aa:	2d47      	cmp	r5, #71	; 0x47
 80093ac:	d101      	bne.n	80093b2 <__cvt+0x56>
 80093ae:	07fb      	lsls	r3, r7, #31
 80093b0:	d51a      	bpl.n	80093e8 <__cvt+0x8c>
 80093b2:	2d46      	cmp	r5, #70	; 0x46
 80093b4:	eb00 0204 	add.w	r2, r0, r4
 80093b8:	d10c      	bne.n	80093d4 <__cvt+0x78>
 80093ba:	7803      	ldrb	r3, [r0, #0]
 80093bc:	2b30      	cmp	r3, #48	; 0x30
 80093be:	d107      	bne.n	80093d0 <__cvt+0x74>
 80093c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c8:	bf1c      	itt	ne
 80093ca:	f1c4 0401 	rsbne	r4, r4, #1
 80093ce:	6034      	strne	r4, [r6, #0]
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	441a      	add	r2, r3
 80093d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093dc:	bf08      	it	eq
 80093de:	9203      	streq	r2, [sp, #12]
 80093e0:	2130      	movs	r1, #48	; 0x30
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d307      	bcc.n	80093f8 <__cvt+0x9c>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ec:	1a1b      	subs	r3, r3, r0
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	b005      	add	sp, #20
 80093f2:	ecbd 8b02 	vpop	{d8}
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	1c5c      	adds	r4, r3, #1
 80093fa:	9403      	str	r4, [sp, #12]
 80093fc:	7019      	strb	r1, [r3, #0]
 80093fe:	e7f0      	b.n	80093e2 <__cvt+0x86>

08009400 <__exponent>:
 8009400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009402:	4603      	mov	r3, r0
 8009404:	2900      	cmp	r1, #0
 8009406:	bfb8      	it	lt
 8009408:	4249      	neglt	r1, r1
 800940a:	f803 2b02 	strb.w	r2, [r3], #2
 800940e:	bfb4      	ite	lt
 8009410:	222d      	movlt	r2, #45	; 0x2d
 8009412:	222b      	movge	r2, #43	; 0x2b
 8009414:	2909      	cmp	r1, #9
 8009416:	7042      	strb	r2, [r0, #1]
 8009418:	dd2a      	ble.n	8009470 <__exponent+0x70>
 800941a:	f10d 0407 	add.w	r4, sp, #7
 800941e:	46a4      	mov	ip, r4
 8009420:	270a      	movs	r7, #10
 8009422:	46a6      	mov	lr, r4
 8009424:	460a      	mov	r2, r1
 8009426:	fb91 f6f7 	sdiv	r6, r1, r7
 800942a:	fb07 1516 	mls	r5, r7, r6, r1
 800942e:	3530      	adds	r5, #48	; 0x30
 8009430:	2a63      	cmp	r2, #99	; 0x63
 8009432:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009436:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800943a:	4631      	mov	r1, r6
 800943c:	dcf1      	bgt.n	8009422 <__exponent+0x22>
 800943e:	3130      	adds	r1, #48	; 0x30
 8009440:	f1ae 0502 	sub.w	r5, lr, #2
 8009444:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009448:	1c44      	adds	r4, r0, #1
 800944a:	4629      	mov	r1, r5
 800944c:	4561      	cmp	r1, ip
 800944e:	d30a      	bcc.n	8009466 <__exponent+0x66>
 8009450:	f10d 0209 	add.w	r2, sp, #9
 8009454:	eba2 020e 	sub.w	r2, r2, lr
 8009458:	4565      	cmp	r5, ip
 800945a:	bf88      	it	hi
 800945c:	2200      	movhi	r2, #0
 800945e:	4413      	add	r3, r2
 8009460:	1a18      	subs	r0, r3, r0
 8009462:	b003      	add	sp, #12
 8009464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800946e:	e7ed      	b.n	800944c <__exponent+0x4c>
 8009470:	2330      	movs	r3, #48	; 0x30
 8009472:	3130      	adds	r1, #48	; 0x30
 8009474:	7083      	strb	r3, [r0, #2]
 8009476:	70c1      	strb	r1, [r0, #3]
 8009478:	1d03      	adds	r3, r0, #4
 800947a:	e7f1      	b.n	8009460 <__exponent+0x60>
 800947c:	0000      	movs	r0, r0
	...

08009480 <_printf_float>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b08b      	sub	sp, #44	; 0x2c
 8009486:	460c      	mov	r4, r1
 8009488:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800948c:	4616      	mov	r6, r2
 800948e:	461f      	mov	r7, r3
 8009490:	4605      	mov	r5, r0
 8009492:	f001 fc49 	bl	800ad28 <_localeconv_r>
 8009496:	f8d0 b000 	ldr.w	fp, [r0]
 800949a:	4658      	mov	r0, fp
 800949c:	f7f6 ff2a 	bl	80002f4 <strlen>
 80094a0:	2300      	movs	r3, #0
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	f8d8 3000 	ldr.w	r3, [r8]
 80094a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	3307      	adds	r3, #7
 80094b0:	f023 0307 	bic.w	r3, r3, #7
 80094b4:	f103 0108 	add.w	r1, r3, #8
 80094b8:	f8c8 1000 	str.w	r1, [r8]
 80094bc:	4682      	mov	sl, r0
 80094be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80094c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009728 <_printf_float+0x2a8>
 80094ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80094ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80094d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80094d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094da:	dd24      	ble.n	8009526 <_printf_float+0xa6>
 80094dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e4:	d502      	bpl.n	80094ec <_printf_float+0x6c>
 80094e6:	232d      	movs	r3, #45	; 0x2d
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	4b90      	ldr	r3, [pc, #576]	; (8009730 <_printf_float+0x2b0>)
 80094ee:	4891      	ldr	r0, [pc, #580]	; (8009734 <_printf_float+0x2b4>)
 80094f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80094f4:	bf94      	ite	ls
 80094f6:	4698      	movls	r8, r3
 80094f8:	4680      	movhi	r8, r0
 80094fa:	2303      	movs	r3, #3
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	f022 0204 	bic.w	r2, r2, #4
 8009502:	2300      	movs	r3, #0
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	9700      	str	r7, [sp, #0]
 800950a:	4633      	mov	r3, r6
 800950c:	aa09      	add	r2, sp, #36	; 0x24
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f9d3 	bl	80098bc <_printf_common>
 8009516:	3001      	adds	r0, #1
 8009518:	f040 808a 	bne.w	8009630 <_printf_float+0x1b0>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009520:	b00b      	add	sp, #44	; 0x2c
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	eeb4 0b40 	vcmp.f64	d0, d0
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	d709      	bvc.n	8009544 <_printf_float+0xc4>
 8009530:	ee10 3a90 	vmov	r3, s1
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbc      	itt	lt
 8009538:	232d      	movlt	r3, #45	; 0x2d
 800953a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800953e:	487e      	ldr	r0, [pc, #504]	; (8009738 <_printf_float+0x2b8>)
 8009540:	4b7e      	ldr	r3, [pc, #504]	; (800973c <_printf_float+0x2bc>)
 8009542:	e7d5      	b.n	80094f0 <_printf_float+0x70>
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800954a:	9104      	str	r1, [sp, #16]
 800954c:	1c59      	adds	r1, r3, #1
 800954e:	d13c      	bne.n	80095ca <_printf_float+0x14a>
 8009550:	2306      	movs	r3, #6
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	2300      	movs	r3, #0
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	ab08      	add	r3, sp, #32
 800955a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800955e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009562:	ab07      	add	r3, sp, #28
 8009564:	6861      	ldr	r1, [r4, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	f10d 031b 	add.w	r3, sp, #27
 800956e:	4628      	mov	r0, r5
 8009570:	f7ff fef4 	bl	800935c <__cvt>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	9907      	ldr	r1, [sp, #28]
 8009578:	2b47      	cmp	r3, #71	; 0x47
 800957a:	4680      	mov	r8, r0
 800957c:	d108      	bne.n	8009590 <_printf_float+0x110>
 800957e:	1cc8      	adds	r0, r1, #3
 8009580:	db02      	blt.n	8009588 <_printf_float+0x108>
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	4299      	cmp	r1, r3
 8009586:	dd41      	ble.n	800960c <_printf_float+0x18c>
 8009588:	f1a9 0902 	sub.w	r9, r9, #2
 800958c:	fa5f f989 	uxtb.w	r9, r9
 8009590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009594:	d820      	bhi.n	80095d8 <_printf_float+0x158>
 8009596:	3901      	subs	r1, #1
 8009598:	464a      	mov	r2, r9
 800959a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800959e:	9107      	str	r1, [sp, #28]
 80095a0:	f7ff ff2e 	bl	8009400 <__exponent>
 80095a4:	9a08      	ldr	r2, [sp, #32]
 80095a6:	9004      	str	r0, [sp, #16]
 80095a8:	1813      	adds	r3, r2, r0
 80095aa:	2a01      	cmp	r2, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	dc02      	bgt.n	80095b6 <_printf_float+0x136>
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	07d2      	lsls	r2, r2, #31
 80095b4:	d501      	bpl.n	80095ba <_printf_float+0x13a>
 80095b6:	3301      	adds	r3, #1
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0a2      	beq.n	8009508 <_printf_float+0x88>
 80095c2:	232d      	movs	r3, #45	; 0x2d
 80095c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c8:	e79e      	b.n	8009508 <_printf_float+0x88>
 80095ca:	9904      	ldr	r1, [sp, #16]
 80095cc:	2947      	cmp	r1, #71	; 0x47
 80095ce:	d1c1      	bne.n	8009554 <_printf_float+0xd4>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1bf      	bne.n	8009554 <_printf_float+0xd4>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e7bc      	b.n	8009552 <_printf_float+0xd2>
 80095d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80095dc:	d118      	bne.n	8009610 <_printf_float+0x190>
 80095de:	2900      	cmp	r1, #0
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	dd0b      	ble.n	80095fc <_printf_float+0x17c>
 80095e4:	6121      	str	r1, [r4, #16]
 80095e6:	b913      	cbnz	r3, 80095ee <_printf_float+0x16e>
 80095e8:	6822      	ldr	r2, [r4, #0]
 80095ea:	07d0      	lsls	r0, r2, #31
 80095ec:	d502      	bpl.n	80095f4 <_printf_float+0x174>
 80095ee:	3301      	adds	r3, #1
 80095f0:	440b      	add	r3, r1
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	2300      	movs	r3, #0
 80095f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	e7de      	b.n	80095ba <_printf_float+0x13a>
 80095fc:	b913      	cbnz	r3, 8009604 <_printf_float+0x184>
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	07d2      	lsls	r2, r2, #31
 8009602:	d501      	bpl.n	8009608 <_printf_float+0x188>
 8009604:	3302      	adds	r3, #2
 8009606:	e7f4      	b.n	80095f2 <_printf_float+0x172>
 8009608:	2301      	movs	r3, #1
 800960a:	e7f2      	b.n	80095f2 <_printf_float+0x172>
 800960c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	4299      	cmp	r1, r3
 8009614:	db05      	blt.n	8009622 <_printf_float+0x1a2>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	6121      	str	r1, [r4, #16]
 800961a:	07d8      	lsls	r0, r3, #31
 800961c:	d5ea      	bpl.n	80095f4 <_printf_float+0x174>
 800961e:	1c4b      	adds	r3, r1, #1
 8009620:	e7e7      	b.n	80095f2 <_printf_float+0x172>
 8009622:	2900      	cmp	r1, #0
 8009624:	bfd4      	ite	le
 8009626:	f1c1 0202 	rsble	r2, r1, #2
 800962a:	2201      	movgt	r2, #1
 800962c:	4413      	add	r3, r2
 800962e:	e7e0      	b.n	80095f2 <_printf_float+0x172>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	055a      	lsls	r2, r3, #21
 8009634:	d407      	bmi.n	8009646 <_printf_float+0x1c6>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	4642      	mov	r2, r8
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	d12a      	bne.n	800969a <_printf_float+0x21a>
 8009644:	e76a      	b.n	800951c <_printf_float+0x9c>
 8009646:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800964a:	f240 80e2 	bls.w	8009812 <_printf_float+0x392>
 800964e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965a:	d133      	bne.n	80096c4 <_printf_float+0x244>
 800965c:	4a38      	ldr	r2, [pc, #224]	; (8009740 <_printf_float+0x2c0>)
 800965e:	2301      	movs	r3, #1
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af58 	beq.w	800951c <_printf_float+0x9c>
 800966c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009670:	429a      	cmp	r2, r3
 8009672:	db02      	blt.n	800967a <_printf_float+0x1fa>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07d8      	lsls	r0, r3, #31
 8009678:	d50f      	bpl.n	800969a <_printf_float+0x21a>
 800967a:	4653      	mov	r3, sl
 800967c:	465a      	mov	r2, fp
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f af49 	beq.w	800951c <_printf_float+0x9c>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 091a 	add.w	r9, r4, #26
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	3b01      	subs	r3, #1
 8009696:	4543      	cmp	r3, r8
 8009698:	dc09      	bgt.n	80096ae <_printf_float+0x22e>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	079b      	lsls	r3, r3, #30
 800969e:	f100 8108 	bmi.w	80098b2 <_printf_float+0x432>
 80096a2:	68e0      	ldr	r0, [r4, #12]
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	4298      	cmp	r0, r3
 80096a8:	bfb8      	it	lt
 80096aa:	4618      	movlt	r0, r3
 80096ac:	e738      	b.n	8009520 <_printf_float+0xa0>
 80096ae:	2301      	movs	r3, #1
 80096b0:	464a      	mov	r2, r9
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	f43f af2f 	beq.w	800951c <_printf_float+0x9c>
 80096be:	f108 0801 	add.w	r8, r8, #1
 80096c2:	e7e6      	b.n	8009692 <_printf_float+0x212>
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dc3c      	bgt.n	8009744 <_printf_float+0x2c4>
 80096ca:	4a1d      	ldr	r2, [pc, #116]	; (8009740 <_printf_float+0x2c0>)
 80096cc:	2301      	movs	r3, #1
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f af21 	beq.w	800951c <_printf_float+0x9c>
 80096da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80096de:	4313      	orrs	r3, r2
 80096e0:	d102      	bne.n	80096e8 <_printf_float+0x268>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	07d9      	lsls	r1, r3, #31
 80096e6:	d5d8      	bpl.n	800969a <_printf_float+0x21a>
 80096e8:	4653      	mov	r3, sl
 80096ea:	465a      	mov	r2, fp
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f af12 	beq.w	800951c <_printf_float+0x9c>
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	f104 0a1a 	add.w	sl, r4, #26
 8009700:	9b07      	ldr	r3, [sp, #28]
 8009702:	425b      	negs	r3, r3
 8009704:	454b      	cmp	r3, r9
 8009706:	dc01      	bgt.n	800970c <_printf_float+0x28c>
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	e795      	b.n	8009638 <_printf_float+0x1b8>
 800970c:	2301      	movs	r3, #1
 800970e:	4652      	mov	r2, sl
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af00 	beq.w	800951c <_printf_float+0x9c>
 800971c:	f109 0901 	add.w	r9, r9, #1
 8009720:	e7ee      	b.n	8009700 <_printf_float+0x280>
 8009722:	bf00      	nop
 8009724:	f3af 8000 	nop.w
 8009728:	ffffffff 	.word	0xffffffff
 800972c:	7fefffff 	.word	0x7fefffff
 8009730:	0800bdcc 	.word	0x0800bdcc
 8009734:	0800bdd0 	.word	0x0800bdd0
 8009738:	0800bdd8 	.word	0x0800bdd8
 800973c:	0800bdd4 	.word	0x0800bdd4
 8009740:	0800bddc 	.word	0x0800bddc
 8009744:	9a08      	ldr	r2, [sp, #32]
 8009746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009748:	429a      	cmp	r2, r3
 800974a:	bfa8      	it	ge
 800974c:	461a      	movge	r2, r3
 800974e:	2a00      	cmp	r2, #0
 8009750:	4691      	mov	r9, r2
 8009752:	dc38      	bgt.n	80097c6 <_printf_float+0x346>
 8009754:	2300      	movs	r3, #0
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800975c:	f104 021a 	add.w	r2, r4, #26
 8009760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009762:	9905      	ldr	r1, [sp, #20]
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	eba3 0309 	sub.w	r3, r3, r9
 800976a:	428b      	cmp	r3, r1
 800976c:	dc33      	bgt.n	80097d6 <_printf_float+0x356>
 800976e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009772:	429a      	cmp	r2, r3
 8009774:	db3c      	blt.n	80097f0 <_printf_float+0x370>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	07da      	lsls	r2, r3, #31
 800977a:	d439      	bmi.n	80097f0 <_printf_float+0x370>
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	9907      	ldr	r1, [sp, #28]
 8009782:	1a9a      	subs	r2, r3, r2
 8009784:	eba3 0901 	sub.w	r9, r3, r1
 8009788:	4591      	cmp	r9, r2
 800978a:	bfa8      	it	ge
 800978c:	4691      	movge	r9, r2
 800978e:	f1b9 0f00 	cmp.w	r9, #0
 8009792:	dc35      	bgt.n	8009800 <_printf_float+0x380>
 8009794:	f04f 0800 	mov.w	r8, #0
 8009798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800979c:	f104 0a1a 	add.w	sl, r4, #26
 80097a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	eba3 0309 	sub.w	r3, r3, r9
 80097aa:	4543      	cmp	r3, r8
 80097ac:	f77f af75 	ble.w	800969a <_printf_float+0x21a>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4652      	mov	r2, sl
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f aeae 	beq.w	800951c <_printf_float+0x9c>
 80097c0:	f108 0801 	add.w	r8, r8, #1
 80097c4:	e7ec      	b.n	80097a0 <_printf_float+0x320>
 80097c6:	4613      	mov	r3, r2
 80097c8:	4631      	mov	r1, r6
 80097ca:	4642      	mov	r2, r8
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	d1bf      	bne.n	8009754 <_printf_float+0x2d4>
 80097d4:	e6a2      	b.n	800951c <_printf_float+0x9c>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	9204      	str	r2, [sp, #16]
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f ae9b 	beq.w	800951c <_printf_float+0x9c>
 80097e6:	9b05      	ldr	r3, [sp, #20]
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	3301      	adds	r3, #1
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	e7b7      	b.n	8009760 <_printf_float+0x2e0>
 80097f0:	4653      	mov	r3, sl
 80097f2:	465a      	mov	r2, fp
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	d1be      	bne.n	800977c <_printf_float+0x2fc>
 80097fe:	e68d      	b.n	800951c <_printf_float+0x9c>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	464b      	mov	r3, r9
 8009804:	4442      	add	r2, r8
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	d1c1      	bne.n	8009794 <_printf_float+0x314>
 8009810:	e684      	b.n	800951c <_printf_float+0x9c>
 8009812:	9a08      	ldr	r2, [sp, #32]
 8009814:	2a01      	cmp	r2, #1
 8009816:	dc01      	bgt.n	800981c <_printf_float+0x39c>
 8009818:	07db      	lsls	r3, r3, #31
 800981a:	d537      	bpl.n	800988c <_printf_float+0x40c>
 800981c:	2301      	movs	r3, #1
 800981e:	4642      	mov	r2, r8
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f ae78 	beq.w	800951c <_printf_float+0x9c>
 800982c:	4653      	mov	r3, sl
 800982e:	465a      	mov	r2, fp
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f ae70 	beq.w	800951c <_printf_float+0x9c>
 800983c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009848:	d01b      	beq.n	8009882 <_printf_float+0x402>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	f108 0201 	add.w	r2, r8, #1
 8009850:	3b01      	subs	r3, #1
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	d10e      	bne.n	800987a <_printf_float+0x3fa>
 800985c:	e65e      	b.n	800951c <_printf_float+0x9c>
 800985e:	2301      	movs	r3, #1
 8009860:	464a      	mov	r2, r9
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f ae57 	beq.w	800951c <_printf_float+0x9c>
 800986e:	f108 0801 	add.w	r8, r8, #1
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	3b01      	subs	r3, #1
 8009876:	4543      	cmp	r3, r8
 8009878:	dcf1      	bgt.n	800985e <_printf_float+0x3de>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009880:	e6db      	b.n	800963a <_printf_float+0x1ba>
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	f104 091a 	add.w	r9, r4, #26
 800988a:	e7f2      	b.n	8009872 <_printf_float+0x3f2>
 800988c:	2301      	movs	r3, #1
 800988e:	4642      	mov	r2, r8
 8009890:	e7df      	b.n	8009852 <_printf_float+0x3d2>
 8009892:	2301      	movs	r3, #1
 8009894:	464a      	mov	r2, r9
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f ae3d 	beq.w	800951c <_printf_float+0x9c>
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	68e3      	ldr	r3, [r4, #12]
 80098a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098aa:	1a5b      	subs	r3, r3, r1
 80098ac:	4543      	cmp	r3, r8
 80098ae:	dcf0      	bgt.n	8009892 <_printf_float+0x412>
 80098b0:	e6f7      	b.n	80096a2 <_printf_float+0x222>
 80098b2:	f04f 0800 	mov.w	r8, #0
 80098b6:	f104 0919 	add.w	r9, r4, #25
 80098ba:	e7f4      	b.n	80098a6 <_printf_float+0x426>

080098bc <_printf_common>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	4616      	mov	r6, r2
 80098c2:	4699      	mov	r9, r3
 80098c4:	688a      	ldr	r2, [r1, #8]
 80098c6:	690b      	ldr	r3, [r1, #16]
 80098c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bfb8      	it	lt
 80098d0:	4613      	movlt	r3, r2
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098d8:	4607      	mov	r7, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b10a      	cbz	r2, 80098e2 <_printf_common+0x26>
 80098de:	3301      	adds	r3, #1
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	0699      	lsls	r1, r3, #26
 80098e6:	bf42      	ittt	mi
 80098e8:	6833      	ldrmi	r3, [r6, #0]
 80098ea:	3302      	addmi	r3, #2
 80098ec:	6033      	strmi	r3, [r6, #0]
 80098ee:	6825      	ldr	r5, [r4, #0]
 80098f0:	f015 0506 	ands.w	r5, r5, #6
 80098f4:	d106      	bne.n	8009904 <_printf_common+0x48>
 80098f6:	f104 0a19 	add.w	sl, r4, #25
 80098fa:	68e3      	ldr	r3, [r4, #12]
 80098fc:	6832      	ldr	r2, [r6, #0]
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc26      	bgt.n	8009952 <_printf_common+0x96>
 8009904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009908:	1e13      	subs	r3, r2, #0
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	2301      	movne	r3, #1
 8009910:	0692      	lsls	r2, r2, #26
 8009912:	d42b      	bmi.n	800996c <_printf_common+0xb0>
 8009914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009918:	4649      	mov	r1, r9
 800991a:	4638      	mov	r0, r7
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d01e      	beq.n	8009960 <_printf_common+0xa4>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	68e5      	ldr	r5, [r4, #12]
 8009926:	6832      	ldr	r2, [r6, #0]
 8009928:	f003 0306 	and.w	r3, r3, #6
 800992c:	2b04      	cmp	r3, #4
 800992e:	bf08      	it	eq
 8009930:	1aad      	subeq	r5, r5, r2
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	6922      	ldr	r2, [r4, #16]
 8009936:	bf0c      	ite	eq
 8009938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800993c:	2500      	movne	r5, #0
 800993e:	4293      	cmp	r3, r2
 8009940:	bfc4      	itt	gt
 8009942:	1a9b      	subgt	r3, r3, r2
 8009944:	18ed      	addgt	r5, r5, r3
 8009946:	2600      	movs	r6, #0
 8009948:	341a      	adds	r4, #26
 800994a:	42b5      	cmp	r5, r6
 800994c:	d11a      	bne.n	8009984 <_printf_common+0xc8>
 800994e:	2000      	movs	r0, #0
 8009950:	e008      	b.n	8009964 <_printf_common+0xa8>
 8009952:	2301      	movs	r3, #1
 8009954:	4652      	mov	r2, sl
 8009956:	4649      	mov	r1, r9
 8009958:	4638      	mov	r0, r7
 800995a:	47c0      	blx	r8
 800995c:	3001      	adds	r0, #1
 800995e:	d103      	bne.n	8009968 <_printf_common+0xac>
 8009960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	3501      	adds	r5, #1
 800996a:	e7c6      	b.n	80098fa <_printf_common+0x3e>
 800996c:	18e1      	adds	r1, r4, r3
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	2030      	movs	r0, #48	; 0x30
 8009972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009976:	4422      	add	r2, r4
 8009978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800997c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009980:	3302      	adds	r3, #2
 8009982:	e7c7      	b.n	8009914 <_printf_common+0x58>
 8009984:	2301      	movs	r3, #1
 8009986:	4622      	mov	r2, r4
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d0e6      	beq.n	8009960 <_printf_common+0xa4>
 8009992:	3601      	adds	r6, #1
 8009994:	e7d9      	b.n	800994a <_printf_common+0x8e>
	...

08009998 <_printf_i>:
 8009998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	7e0f      	ldrb	r7, [r1, #24]
 800999e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099a0:	2f78      	cmp	r7, #120	; 0x78
 80099a2:	4691      	mov	r9, r2
 80099a4:	4680      	mov	r8, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	469a      	mov	sl, r3
 80099aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ae:	d807      	bhi.n	80099c0 <_printf_i+0x28>
 80099b0:	2f62      	cmp	r7, #98	; 0x62
 80099b2:	d80a      	bhi.n	80099ca <_printf_i+0x32>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	f000 80d8 	beq.w	8009b6a <_printf_i+0x1d2>
 80099ba:	2f58      	cmp	r7, #88	; 0x58
 80099bc:	f000 80a3 	beq.w	8009b06 <_printf_i+0x16e>
 80099c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099c8:	e03a      	b.n	8009a40 <_printf_i+0xa8>
 80099ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ce:	2b15      	cmp	r3, #21
 80099d0:	d8f6      	bhi.n	80099c0 <_printf_i+0x28>
 80099d2:	a101      	add	r1, pc, #4	; (adr r1, 80099d8 <_printf_i+0x40>)
 80099d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099d8:	08009a31 	.word	0x08009a31
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	080099c1 	.word	0x080099c1
 80099e4:	080099c1 	.word	0x080099c1
 80099e8:	080099c1 	.word	0x080099c1
 80099ec:	080099c1 	.word	0x080099c1
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	080099c1 	.word	0x080099c1
 80099f8:	080099c1 	.word	0x080099c1
 80099fc:	080099c1 	.word	0x080099c1
 8009a00:	080099c1 	.word	0x080099c1
 8009a04:	08009b51 	.word	0x08009b51
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009b33 	.word	0x08009b33
 8009a10:	080099c1 	.word	0x080099c1
 8009a14:	080099c1 	.word	0x080099c1
 8009a18:	08009b73 	.word	0x08009b73
 8009a1c:	080099c1 	.word	0x080099c1
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	080099c1 	.word	0x080099c1
 8009a28:	080099c1 	.word	0x080099c1
 8009a2c:	08009b3b 	.word	0x08009b3b
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	1d1a      	adds	r2, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	602a      	str	r2, [r5, #0]
 8009a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a40:	2301      	movs	r3, #1
 8009a42:	e0a3      	b.n	8009b8c <_printf_i+0x1f4>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	6829      	ldr	r1, [r5, #0]
 8009a48:	0606      	lsls	r6, r0, #24
 8009a4a:	f101 0304 	add.w	r3, r1, #4
 8009a4e:	d50a      	bpl.n	8009a66 <_printf_i+0xce>
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	da03      	bge.n	8009a60 <_printf_i+0xc8>
 8009a58:	232d      	movs	r3, #45	; 0x2d
 8009a5a:	4276      	negs	r6, r6
 8009a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a60:	485e      	ldr	r0, [pc, #376]	; (8009bdc <_printf_i+0x244>)
 8009a62:	230a      	movs	r3, #10
 8009a64:	e019      	b.n	8009a9a <_printf_i+0x102>
 8009a66:	680e      	ldr	r6, [r1, #0]
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a6e:	bf18      	it	ne
 8009a70:	b236      	sxthne	r6, r6
 8009a72:	e7ef      	b.n	8009a54 <_printf_i+0xbc>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	6029      	str	r1, [r5, #0]
 8009a7c:	0601      	lsls	r1, r0, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xec>
 8009a80:	681e      	ldr	r6, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <_printf_i+0xf2>
 8009a84:	0646      	lsls	r6, r0, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xe8>
 8009a88:	881e      	ldrh	r6, [r3, #0]
 8009a8a:	4854      	ldr	r0, [pc, #336]	; (8009bdc <_printf_i+0x244>)
 8009a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a8e:	bf0c      	ite	eq
 8009a90:	2308      	moveq	r3, #8
 8009a92:	230a      	movne	r3, #10
 8009a94:	2100      	movs	r1, #0
 8009a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a9a:	6865      	ldr	r5, [r4, #4]
 8009a9c:	60a5      	str	r5, [r4, #8]
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	bfa2      	ittt	ge
 8009aa2:	6821      	ldrge	r1, [r4, #0]
 8009aa4:	f021 0104 	bicge.w	r1, r1, #4
 8009aa8:	6021      	strge	r1, [r4, #0]
 8009aaa:	b90e      	cbnz	r6, 8009ab0 <_printf_i+0x118>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d04d      	beq.n	8009b4c <_printf_i+0x1b4>
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aba:	5dc7      	ldrb	r7, [r0, r7]
 8009abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	42bb      	cmp	r3, r7
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	d9f4      	bls.n	8009ab2 <_printf_i+0x11a>
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d10b      	bne.n	8009ae4 <_printf_i+0x14c>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	07de      	lsls	r6, r3, #31
 8009ad0:	d508      	bpl.n	8009ae4 <_printf_i+0x14c>
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	bfde      	ittt	le
 8009ada:	2330      	movle	r3, #48	; 0x30
 8009adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ae4:	1b52      	subs	r2, r2, r5
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	f8cd a000 	str.w	sl, [sp]
 8009aec:	464b      	mov	r3, r9
 8009aee:	aa03      	add	r2, sp, #12
 8009af0:	4621      	mov	r1, r4
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7ff fee2 	bl	80098bc <_printf_common>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d14c      	bne.n	8009b96 <_printf_i+0x1fe>
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b00:	b004      	add	sp, #16
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b06:	4835      	ldr	r0, [pc, #212]	; (8009bdc <_printf_i+0x244>)
 8009b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b0c:	6829      	ldr	r1, [r5, #0]
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b14:	6029      	str	r1, [r5, #0]
 8009b16:	061d      	lsls	r5, r3, #24
 8009b18:	d514      	bpl.n	8009b44 <_printf_i+0x1ac>
 8009b1a:	07df      	lsls	r7, r3, #31
 8009b1c:	bf44      	itt	mi
 8009b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b22:	6023      	strmi	r3, [r4, #0]
 8009b24:	b91e      	cbnz	r6, 8009b2e <_printf_i+0x196>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f023 0320 	bic.w	r3, r3, #32
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e7b0      	b.n	8009a94 <_printf_i+0xfc>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f043 0320 	orr.w	r3, r3, #32
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	2378      	movs	r3, #120	; 0x78
 8009b3c:	4828      	ldr	r0, [pc, #160]	; (8009be0 <_printf_i+0x248>)
 8009b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b42:	e7e3      	b.n	8009b0c <_printf_i+0x174>
 8009b44:	0659      	lsls	r1, r3, #25
 8009b46:	bf48      	it	mi
 8009b48:	b2b6      	uxthmi	r6, r6
 8009b4a:	e7e6      	b.n	8009b1a <_printf_i+0x182>
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	e7bb      	b.n	8009ac8 <_printf_i+0x130>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	6826      	ldr	r6, [r4, #0]
 8009b54:	6961      	ldr	r1, [r4, #20]
 8009b56:	1d18      	adds	r0, r3, #4
 8009b58:	6028      	str	r0, [r5, #0]
 8009b5a:	0635      	lsls	r5, r6, #24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	d501      	bpl.n	8009b64 <_printf_i+0x1cc>
 8009b60:	6019      	str	r1, [r3, #0]
 8009b62:	e002      	b.n	8009b6a <_printf_i+0x1d2>
 8009b64:	0670      	lsls	r0, r6, #25
 8009b66:	d5fb      	bpl.n	8009b60 <_printf_i+0x1c8>
 8009b68:	8019      	strh	r1, [r3, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	4615      	mov	r5, r2
 8009b70:	e7ba      	b.n	8009ae8 <_printf_i+0x150>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	602a      	str	r2, [r5, #0]
 8009b78:	681d      	ldr	r5, [r3, #0]
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f7f6 fbc6 	bl	8000310 <memchr>
 8009b84:	b108      	cbz	r0, 8009b8a <_printf_i+0x1f2>
 8009b86:	1b40      	subs	r0, r0, r5
 8009b88:	6060      	str	r0, [r4, #4]
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b94:	e7a8      	b.n	8009ae8 <_printf_i+0x150>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d0ab      	beq.n	8009afc <_printf_i+0x164>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	079b      	lsls	r3, r3, #30
 8009ba8:	d413      	bmi.n	8009bd2 <_printf_i+0x23a>
 8009baa:	68e0      	ldr	r0, [r4, #12]
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	bfb8      	it	lt
 8009bb2:	4618      	movlt	r0, r3
 8009bb4:	e7a4      	b.n	8009b00 <_printf_i+0x168>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	47d0      	blx	sl
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d09b      	beq.n	8009afc <_printf_i+0x164>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	1a5b      	subs	r3, r3, r1
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dcf2      	bgt.n	8009bb6 <_printf_i+0x21e>
 8009bd0:	e7eb      	b.n	8009baa <_printf_i+0x212>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	f104 0619 	add.w	r6, r4, #25
 8009bd8:	e7f5      	b.n	8009bc6 <_printf_i+0x22e>
 8009bda:	bf00      	nop
 8009bdc:	0800bdde 	.word	0x0800bdde
 8009be0:	0800bdef 	.word	0x0800bdef

08009be4 <cleanup_glue>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	6809      	ldr	r1, [r1, #0]
 8009bea:	4605      	mov	r5, r0
 8009bec:	b109      	cbz	r1, 8009bf2 <cleanup_glue+0xe>
 8009bee:	f7ff fff9 	bl	8009be4 <cleanup_glue>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfa:	f001 bcbf 	b.w	800b57c <_free_r>
	...

08009c00 <_reclaim_reent>:
 8009c00:	4b2c      	ldr	r3, [pc, #176]	; (8009cb4 <_reclaim_reent+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4283      	cmp	r3, r0
 8009c06:	b570      	push	{r4, r5, r6, lr}
 8009c08:	4604      	mov	r4, r0
 8009c0a:	d051      	beq.n	8009cb0 <_reclaim_reent+0xb0>
 8009c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c0e:	b143      	cbz	r3, 8009c22 <_reclaim_reent+0x22>
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d14a      	bne.n	8009cac <_reclaim_reent+0xac>
 8009c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c18:	6819      	ldr	r1, [r3, #0]
 8009c1a:	b111      	cbz	r1, 8009c22 <_reclaim_reent+0x22>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f001 fcad 	bl	800b57c <_free_r>
 8009c22:	6961      	ldr	r1, [r4, #20]
 8009c24:	b111      	cbz	r1, 8009c2c <_reclaim_reent+0x2c>
 8009c26:	4620      	mov	r0, r4
 8009c28:	f001 fca8 	bl	800b57c <_free_r>
 8009c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c2e:	b111      	cbz	r1, 8009c36 <_reclaim_reent+0x36>
 8009c30:	4620      	mov	r0, r4
 8009c32:	f001 fca3 	bl	800b57c <_free_r>
 8009c36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c38:	b111      	cbz	r1, 8009c40 <_reclaim_reent+0x40>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f001 fc9e 	bl	800b57c <_free_r>
 8009c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c42:	b111      	cbz	r1, 8009c4a <_reclaim_reent+0x4a>
 8009c44:	4620      	mov	r0, r4
 8009c46:	f001 fc99 	bl	800b57c <_free_r>
 8009c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c4c:	b111      	cbz	r1, 8009c54 <_reclaim_reent+0x54>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f001 fc94 	bl	800b57c <_free_r>
 8009c54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c56:	b111      	cbz	r1, 8009c5e <_reclaim_reent+0x5e>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 fc8f 	bl	800b57c <_free_r>
 8009c5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c60:	b111      	cbz	r1, 8009c68 <_reclaim_reent+0x68>
 8009c62:	4620      	mov	r0, r4
 8009c64:	f001 fc8a 	bl	800b57c <_free_r>
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	b111      	cbz	r1, 8009c72 <_reclaim_reent+0x72>
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f001 fc85 	bl	800b57c <_free_r>
 8009c72:	69a3      	ldr	r3, [r4, #24]
 8009c74:	b1e3      	cbz	r3, 8009cb0 <_reclaim_reent+0xb0>
 8009c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c78:	4620      	mov	r0, r4
 8009c7a:	4798      	blx	r3
 8009c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c7e:	b1b9      	cbz	r1, 8009cb0 <_reclaim_reent+0xb0>
 8009c80:	4620      	mov	r0, r4
 8009c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c86:	f7ff bfad 	b.w	8009be4 <cleanup_glue>
 8009c8a:	5949      	ldr	r1, [r1, r5]
 8009c8c:	b941      	cbnz	r1, 8009ca0 <_reclaim_reent+0xa0>
 8009c8e:	3504      	adds	r5, #4
 8009c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c92:	2d80      	cmp	r5, #128	; 0x80
 8009c94:	68d9      	ldr	r1, [r3, #12]
 8009c96:	d1f8      	bne.n	8009c8a <_reclaim_reent+0x8a>
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f001 fc6f 	bl	800b57c <_free_r>
 8009c9e:	e7ba      	b.n	8009c16 <_reclaim_reent+0x16>
 8009ca0:	680e      	ldr	r6, [r1, #0]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f001 fc6a 	bl	800b57c <_free_r>
 8009ca8:	4631      	mov	r1, r6
 8009caa:	e7ef      	b.n	8009c8c <_reclaim_reent+0x8c>
 8009cac:	2500      	movs	r5, #0
 8009cae:	e7ef      	b.n	8009c90 <_reclaim_reent+0x90>
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	bf00      	nop
 8009cb4:	24000014 	.word	0x24000014

08009cb8 <_sbrk_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d06      	ldr	r5, [pc, #24]	; (8009cd4 <_sbrk_r+0x1c>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	602b      	str	r3, [r5, #0]
 8009cc4:	f7f7 fdde 	bl	8001884 <_sbrk>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_sbrk_r+0x1a>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_sbrk_r+0x1a>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	24004a18 	.word	0x24004a18

08009cd8 <_raise_r>:
 8009cd8:	291f      	cmp	r1, #31
 8009cda:	b538      	push	{r3, r4, r5, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	d904      	bls.n	8009cec <_raise_r+0x14>
 8009ce2:	2316      	movs	r3, #22
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cee:	b112      	cbz	r2, 8009cf6 <_raise_r+0x1e>
 8009cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cf4:	b94b      	cbnz	r3, 8009d0a <_raise_r+0x32>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f000 f830 	bl	8009d5c <_getpid_r>
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	4601      	mov	r1, r0
 8009d00:	4620      	mov	r0, r4
 8009d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d06:	f000 b817 	b.w	8009d38 <_kill_r>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d00a      	beq.n	8009d24 <_raise_r+0x4c>
 8009d0e:	1c59      	adds	r1, r3, #1
 8009d10:	d103      	bne.n	8009d1a <_raise_r+0x42>
 8009d12:	2316      	movs	r3, #22
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	2001      	movs	r0, #1
 8009d18:	e7e7      	b.n	8009cea <_raise_r+0x12>
 8009d1a:	2400      	movs	r4, #0
 8009d1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d20:	4628      	mov	r0, r5
 8009d22:	4798      	blx	r3
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7e0      	b.n	8009cea <_raise_r+0x12>

08009d28 <raise>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <raise+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7ff bfd3 	b.w	8009cd8 <_raise_r>
 8009d32:	bf00      	nop
 8009d34:	24000014 	.word	0x24000014

08009d38 <_kill_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	; (8009d58 <_kill_r+0x20>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	f7f7 fd67 	bl	8001818 <_kill>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	d102      	bne.n	8009d54 <_kill_r+0x1c>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	b103      	cbz	r3, 8009d54 <_kill_r+0x1c>
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	bd38      	pop	{r3, r4, r5, pc}
 8009d56:	bf00      	nop
 8009d58:	24004a18 	.word	0x24004a18

08009d5c <_getpid_r>:
 8009d5c:	f7f7 bd5a 	b.w	8001814 <_getpid>

08009d60 <__sread>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d68:	f001 fdae 	bl	800b8c8 <_read_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	bfab      	itete	ge
 8009d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d72:	89a3      	ldrhlt	r3, [r4, #12]
 8009d74:	181b      	addge	r3, r3, r0
 8009d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d7a:	bfac      	ite	ge
 8009d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d7e:	81a3      	strhlt	r3, [r4, #12]
 8009d80:	bd10      	pop	{r4, pc}

08009d82 <__swrite>:
 8009d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	461f      	mov	r7, r3
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	05db      	lsls	r3, r3, #23
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	4616      	mov	r6, r2
 8009d92:	d505      	bpl.n	8009da0 <__swrite+0x1e>
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	2302      	movs	r3, #2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f000 ffc8 	bl	800ad30 <_lseek_r>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	4628      	mov	r0, r5
 8009db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db6:	f000 b869 	b.w	8009e8c <_write_r>

08009dba <__sseek>:
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc2:	f000 ffb5 	bl	800ad30 <_lseek_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	bf15      	itete	ne
 8009dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dd6:	81a3      	strheq	r3, [r4, #12]
 8009dd8:	bf18      	it	ne
 8009dda:	81a3      	strhne	r3, [r4, #12]
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <__sclose>:
 8009dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de2:	f000 b8d3 	b.w	8009f8c <_close_r>
	...

08009de8 <__swbuf_r>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	460e      	mov	r6, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	4605      	mov	r5, r0
 8009df0:	b118      	cbz	r0, 8009dfa <__swbuf_r+0x12>
 8009df2:	6983      	ldr	r3, [r0, #24]
 8009df4:	b90b      	cbnz	r3, 8009dfa <__swbuf_r+0x12>
 8009df6:	f7ff f941 	bl	800907c <__sinit>
 8009dfa:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <__swbuf_r+0x98>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d12b      	bne.n	8009e58 <__swbuf_r+0x70>
 8009e00:	686c      	ldr	r4, [r5, #4]
 8009e02:	69a3      	ldr	r3, [r4, #24]
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	071a      	lsls	r2, r3, #28
 8009e0a:	d52f      	bpl.n	8009e6c <__swbuf_r+0x84>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	b36b      	cbz	r3, 8009e6c <__swbuf_r+0x84>
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	6820      	ldr	r0, [r4, #0]
 8009e14:	1ac0      	subs	r0, r0, r3
 8009e16:	6963      	ldr	r3, [r4, #20]
 8009e18:	b2f6      	uxtb	r6, r6
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	dc04      	bgt.n	8009e2a <__swbuf_r+0x42>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 ff44 	bl	800acb0 <_fflush_r>
 8009e28:	bb30      	cbnz	r0, 8009e78 <__swbuf_r+0x90>
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	701e      	strb	r6, [r3, #0]
 8009e38:	6963      	ldr	r3, [r4, #20]
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	4283      	cmp	r3, r0
 8009e3e:	d004      	beq.n	8009e4a <__swbuf_r+0x62>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	07db      	lsls	r3, r3, #31
 8009e44:	d506      	bpl.n	8009e54 <__swbuf_r+0x6c>
 8009e46:	2e0a      	cmp	r6, #10
 8009e48:	d104      	bne.n	8009e54 <__swbuf_r+0x6c>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 ff2f 	bl	800acb0 <_fflush_r>
 8009e52:	b988      	cbnz	r0, 8009e78 <__swbuf_r+0x90>
 8009e54:	4638      	mov	r0, r7
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <__swbuf_r+0x9c>)
 8009e5a:	429c      	cmp	r4, r3
 8009e5c:	d101      	bne.n	8009e62 <__swbuf_r+0x7a>
 8009e5e:	68ac      	ldr	r4, [r5, #8]
 8009e60:	e7cf      	b.n	8009e02 <__swbuf_r+0x1a>
 8009e62:	4b09      	ldr	r3, [pc, #36]	; (8009e88 <__swbuf_r+0xa0>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	bf08      	it	eq
 8009e68:	68ec      	ldreq	r4, [r5, #12]
 8009e6a:	e7ca      	b.n	8009e02 <__swbuf_r+0x1a>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f81e 	bl	8009eb0 <__swsetup_r>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d0cb      	beq.n	8009e10 <__swbuf_r+0x28>
 8009e78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e7c:	e7ea      	b.n	8009e54 <__swbuf_r+0x6c>
 8009e7e:	bf00      	nop
 8009e80:	0800bd88 	.word	0x0800bd88
 8009e84:	0800bda8 	.word	0x0800bda8
 8009e88:	0800bd68 	.word	0x0800bd68

08009e8c <_write_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_write_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 fcd8 	bl	8001850 <_write>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_write_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_write_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	24004a18 	.word	0x24004a18

08009eb0 <__swsetup_r>:
 8009eb0:	4b32      	ldr	r3, [pc, #200]	; (8009f7c <__swsetup_r+0xcc>)
 8009eb2:	b570      	push	{r4, r5, r6, lr}
 8009eb4:	681d      	ldr	r5, [r3, #0]
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	b125      	cbz	r5, 8009ec6 <__swsetup_r+0x16>
 8009ebc:	69ab      	ldr	r3, [r5, #24]
 8009ebe:	b913      	cbnz	r3, 8009ec6 <__swsetup_r+0x16>
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff f8db 	bl	800907c <__sinit>
 8009ec6:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <__swsetup_r+0xd0>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	d10f      	bne.n	8009eec <__swsetup_r+0x3c>
 8009ecc:	686c      	ldr	r4, [r5, #4]
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ed4:	0719      	lsls	r1, r3, #28
 8009ed6:	d42c      	bmi.n	8009f32 <__swsetup_r+0x82>
 8009ed8:	06dd      	lsls	r5, r3, #27
 8009eda:	d411      	bmi.n	8009f00 <__swsetup_r+0x50>
 8009edc:	2309      	movs	r3, #9
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eea:	e03e      	b.n	8009f6a <__swsetup_r+0xba>
 8009eec:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <__swsetup_r+0xd4>)
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d101      	bne.n	8009ef6 <__swsetup_r+0x46>
 8009ef2:	68ac      	ldr	r4, [r5, #8]
 8009ef4:	e7eb      	b.n	8009ece <__swsetup_r+0x1e>
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <__swsetup_r+0xd8>)
 8009ef8:	429c      	cmp	r4, r3
 8009efa:	bf08      	it	eq
 8009efc:	68ec      	ldreq	r4, [r5, #12]
 8009efe:	e7e6      	b.n	8009ece <__swsetup_r+0x1e>
 8009f00:	0758      	lsls	r0, r3, #29
 8009f02:	d512      	bpl.n	8009f2a <__swsetup_r+0x7a>
 8009f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f06:	b141      	cbz	r1, 8009f1a <__swsetup_r+0x6a>
 8009f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	d002      	beq.n	8009f16 <__swsetup_r+0x66>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f001 fb33 	bl	800b57c <_free_r>
 8009f16:	2300      	movs	r3, #0
 8009f18:	6363      	str	r3, [r4, #52]	; 0x34
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	2300      	movs	r3, #0
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f043 0308 	orr.w	r3, r3, #8
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	b94b      	cbnz	r3, 8009f4a <__swsetup_r+0x9a>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f40:	d003      	beq.n	8009f4a <__swsetup_r+0x9a>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4630      	mov	r0, r6
 8009f46:	f000 ff2b 	bl	800ada0 <__smakebuf_r>
 8009f4a:	89a0      	ldrh	r0, [r4, #12]
 8009f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f50:	f010 0301 	ands.w	r3, r0, #1
 8009f54:	d00a      	beq.n	8009f6c <__swsetup_r+0xbc>
 8009f56:	2300      	movs	r3, #0
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6963      	ldr	r3, [r4, #20]
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	61a3      	str	r3, [r4, #24]
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	b943      	cbnz	r3, 8009f76 <__swsetup_r+0xc6>
 8009f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f68:	d1ba      	bne.n	8009ee0 <__swsetup_r+0x30>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	0781      	lsls	r1, r0, #30
 8009f6e:	bf58      	it	pl
 8009f70:	6963      	ldrpl	r3, [r4, #20]
 8009f72:	60a3      	str	r3, [r4, #8]
 8009f74:	e7f4      	b.n	8009f60 <__swsetup_r+0xb0>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e7f7      	b.n	8009f6a <__swsetup_r+0xba>
 8009f7a:	bf00      	nop
 8009f7c:	24000014 	.word	0x24000014
 8009f80:	0800bd88 	.word	0x0800bd88
 8009f84:	0800bda8 	.word	0x0800bda8
 8009f88:	0800bd68 	.word	0x0800bd68

08009f8c <_close_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d06      	ldr	r5, [pc, #24]	; (8009fa8 <_close_r+0x1c>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	f7f7 fc68 	bl	800186c <_close>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_close_r+0x1a>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_close_r+0x1a>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	24004a18 	.word	0x24004a18

08009fac <quorem>:
 8009fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	6903      	ldr	r3, [r0, #16]
 8009fb2:	690c      	ldr	r4, [r1, #16]
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	f2c0 8081 	blt.w	800a0be <quorem+0x112>
 8009fbc:	3c01      	subs	r4, #1
 8009fbe:	f101 0814 	add.w	r8, r1, #20
 8009fc2:	f100 0514 	add.w	r5, r0, #20
 8009fc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fca:	9301      	str	r3, [sp, #4]
 8009fcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fe0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fe4:	d331      	bcc.n	800a04a <quorem+0x9e>
 8009fe6:	f04f 0e00 	mov.w	lr, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	46ac      	mov	ip, r5
 8009fee:	46f2      	mov	sl, lr
 8009ff0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ff4:	b293      	uxth	r3, r2
 8009ff6:	fb06 e303 	mla	r3, r6, r3, lr
 8009ffa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	ebaa 0303 	sub.w	r3, sl, r3
 800a004:	f8dc a000 	ldr.w	sl, [ip]
 800a008:	0c12      	lsrs	r2, r2, #16
 800a00a:	fa13 f38a 	uxtah	r3, r3, sl
 800a00e:	fb06 e202 	mla	r2, r6, r2, lr
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	9b00      	ldr	r3, [sp, #0]
 800a016:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a01a:	b292      	uxth	r2, r2
 800a01c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a024:	f8bd 3000 	ldrh.w	r3, [sp]
 800a028:	4581      	cmp	r9, r0
 800a02a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a02e:	f84c 3b04 	str.w	r3, [ip], #4
 800a032:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a036:	d2db      	bcs.n	8009ff0 <quorem+0x44>
 800a038:	f855 300b 	ldr.w	r3, [r5, fp]
 800a03c:	b92b      	cbnz	r3, 800a04a <quorem+0x9e>
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	3b04      	subs	r3, #4
 800a042:	429d      	cmp	r5, r3
 800a044:	461a      	mov	r2, r3
 800a046:	d32e      	bcc.n	800a0a6 <quorem+0xfa>
 800a048:	613c      	str	r4, [r7, #16]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f001 f97e 	bl	800b34c <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	db24      	blt.n	800a09e <quorem+0xf2>
 800a054:	3601      	adds	r6, #1
 800a056:	4628      	mov	r0, r5
 800a058:	f04f 0c00 	mov.w	ip, #0
 800a05c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a060:	f8d0 e000 	ldr.w	lr, [r0]
 800a064:	b293      	uxth	r3, r2
 800a066:	ebac 0303 	sub.w	r3, ip, r3
 800a06a:	0c12      	lsrs	r2, r2, #16
 800a06c:	fa13 f38e 	uxtah	r3, r3, lr
 800a070:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a078:	b29b      	uxth	r3, r3
 800a07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a07e:	45c1      	cmp	r9, r8
 800a080:	f840 3b04 	str.w	r3, [r0], #4
 800a084:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a088:	d2e8      	bcs.n	800a05c <quorem+0xb0>
 800a08a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a08e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a092:	b922      	cbnz	r2, 800a09e <quorem+0xf2>
 800a094:	3b04      	subs	r3, #4
 800a096:	429d      	cmp	r5, r3
 800a098:	461a      	mov	r2, r3
 800a09a:	d30a      	bcc.n	800a0b2 <quorem+0x106>
 800a09c:	613c      	str	r4, [r7, #16]
 800a09e:	4630      	mov	r0, r6
 800a0a0:	b003      	add	sp, #12
 800a0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	d1cc      	bne.n	800a048 <quorem+0x9c>
 800a0ae:	3c01      	subs	r4, #1
 800a0b0:	e7c7      	b.n	800a042 <quorem+0x96>
 800a0b2:	6812      	ldr	r2, [r2, #0]
 800a0b4:	3b04      	subs	r3, #4
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	d1f0      	bne.n	800a09c <quorem+0xf0>
 800a0ba:	3c01      	subs	r4, #1
 800a0bc:	e7eb      	b.n	800a096 <quorem+0xea>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	e7ee      	b.n	800a0a0 <quorem+0xf4>
 800a0c2:	0000      	movs	r0, r0
 800a0c4:	0000      	movs	r0, r0
	...

0800a0c8 <_dtoa_r>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	ed2d 8b02 	vpush	{d8}
 800a0d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0d2:	b091      	sub	sp, #68	; 0x44
 800a0d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0d8:	ec59 8b10 	vmov	r8, r9, d0
 800a0dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a0de:	9106      	str	r1, [sp, #24]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	9208      	str	r2, [sp, #32]
 800a0e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a0e6:	b975      	cbnz	r5, 800a106 <_dtoa_r+0x3e>
 800a0e8:	2010      	movs	r0, #16
 800a0ea:	f000 fe99 	bl	800ae20 <malloc>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	6270      	str	r0, [r6, #36]	; 0x24
 800a0f2:	b920      	cbnz	r0, 800a0fe <_dtoa_r+0x36>
 800a0f4:	4baa      	ldr	r3, [pc, #680]	; (800a3a0 <_dtoa_r+0x2d8>)
 800a0f6:	21ea      	movs	r1, #234	; 0xea
 800a0f8:	48aa      	ldr	r0, [pc, #680]	; (800a3a4 <_dtoa_r+0x2dc>)
 800a0fa:	f001 fbf7 	bl	800b8ec <__assert_func>
 800a0fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a102:	6005      	str	r5, [r0, #0]
 800a104:	60c5      	str	r5, [r0, #12]
 800a106:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	b151      	cbz	r1, 800a122 <_dtoa_r+0x5a>
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	604a      	str	r2, [r1, #4]
 800a110:	2301      	movs	r3, #1
 800a112:	4093      	lsls	r3, r2
 800a114:	608b      	str	r3, [r1, #8]
 800a116:	4630      	mov	r0, r6
 800a118:	f000 fed6 	bl	800aec8 <_Bfree>
 800a11c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	f1b9 0300 	subs.w	r3, r9, #0
 800a126:	bfbb      	ittet	lt
 800a128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a12c:	9303      	strlt	r3, [sp, #12]
 800a12e:	2300      	movge	r3, #0
 800a130:	2201      	movlt	r2, #1
 800a132:	bfac      	ite	ge
 800a134:	6023      	strge	r3, [r4, #0]
 800a136:	6022      	strlt	r2, [r4, #0]
 800a138:	4b9b      	ldr	r3, [pc, #620]	; (800a3a8 <_dtoa_r+0x2e0>)
 800a13a:	9c03      	ldr	r4, [sp, #12]
 800a13c:	43a3      	bics	r3, r4
 800a13e:	d11c      	bne.n	800a17a <_dtoa_r+0xb2>
 800a140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a142:	f242 730f 	movw	r3, #9999	; 0x270f
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a14c:	ea53 0308 	orrs.w	r3, r3, r8
 800a150:	f000 84fd 	beq.w	800ab4e <_dtoa_r+0xa86>
 800a154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a156:	b963      	cbnz	r3, 800a172 <_dtoa_r+0xaa>
 800a158:	4b94      	ldr	r3, [pc, #592]	; (800a3ac <_dtoa_r+0x2e4>)
 800a15a:	e01f      	b.n	800a19c <_dtoa_r+0xd4>
 800a15c:	4b94      	ldr	r3, [pc, #592]	; (800a3b0 <_dtoa_r+0x2e8>)
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	3308      	adds	r3, #8
 800a162:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	9801      	ldr	r0, [sp, #4]
 800a168:	b011      	add	sp, #68	; 0x44
 800a16a:	ecbd 8b02 	vpop	{d8}
 800a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	4b8e      	ldr	r3, [pc, #568]	; (800a3ac <_dtoa_r+0x2e4>)
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	3303      	adds	r3, #3
 800a178:	e7f3      	b.n	800a162 <_dtoa_r+0x9a>
 800a17a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a17e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a186:	d10b      	bne.n	800a1a0 <_dtoa_r+0xd8>
 800a188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a18a:	2301      	movs	r3, #1
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 84d9 	beq.w	800ab48 <_dtoa_r+0xa80>
 800a196:	4887      	ldr	r0, [pc, #540]	; (800a3b4 <_dtoa_r+0x2ec>)
 800a198:	6018      	str	r0, [r3, #0]
 800a19a:	1e43      	subs	r3, r0, #1
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	e7e2      	b.n	800a166 <_dtoa_r+0x9e>
 800a1a0:	a90f      	add	r1, sp, #60	; 0x3c
 800a1a2:	aa0e      	add	r2, sp, #56	; 0x38
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	eeb0 0b48 	vmov.f64	d0, d8
 800a1aa:	f001 f975 	bl	800b498 <__d2b>
 800a1ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d046      	beq.n	800a248 <_dtoa_r+0x180>
 800a1ba:	ee18 4a90 	vmov	r4, s17
 800a1be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a1c2:	ec53 2b18 	vmov	r2, r3, d8
 800a1c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a1ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	ec43 2b16 	vmov	d6, r2, r3
 800a1d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a1dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a388 <_dtoa_r+0x2c0>
 800a1e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a1e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a390 <_dtoa_r+0x2c8>
 800a1e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a1ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a398 <_dtoa_r+0x2d0>
 800a1f0:	ee07 1a90 	vmov	s15, r1
 800a1f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a1f8:	eeb0 7b46 	vmov.f64	d7, d6
 800a1fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a200:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a204:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20c:	ee16 ba90 	vmov	fp, s13
 800a210:	940a      	str	r4, [sp, #40]	; 0x28
 800a212:	d508      	bpl.n	800a226 <_dtoa_r+0x15e>
 800a214:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a218:	eeb4 6b47 	vcmp.f64	d6, d7
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	bf18      	it	ne
 800a222:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a226:	f1bb 0f16 	cmp.w	fp, #22
 800a22a:	d82f      	bhi.n	800a28c <_dtoa_r+0x1c4>
 800a22c:	4b62      	ldr	r3, [pc, #392]	; (800a3b8 <_dtoa_r+0x2f0>)
 800a22e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a232:	ed93 7b00 	vldr	d7, [r3]
 800a236:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23e:	d501      	bpl.n	800a244 <_dtoa_r+0x17c>
 800a240:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a244:	2300      	movs	r3, #0
 800a246:	e022      	b.n	800a28e <_dtoa_r+0x1c6>
 800a248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a24a:	4401      	add	r1, r0
 800a24c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a250:	2b20      	cmp	r3, #32
 800a252:	bfc1      	itttt	gt
 800a254:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a258:	fa04 f303 	lslgt.w	r3, r4, r3
 800a25c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a260:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a264:	bfd6      	itet	le
 800a266:	f1c3 0320 	rsble	r3, r3, #32
 800a26a:	ea43 0808 	orrgt.w	r8, r3, r8
 800a26e:	fa08 f803 	lslle.w	r8, r8, r3
 800a272:	ee07 8a90 	vmov	s15, r8
 800a276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a27a:	3901      	subs	r1, #1
 800a27c:	ee17 4a90 	vmov	r4, s15
 800a280:	ec53 2b17 	vmov	r2, r3, d7
 800a284:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a288:	2401      	movs	r4, #1
 800a28a:	e7a3      	b.n	800a1d4 <_dtoa_r+0x10c>
 800a28c:	2301      	movs	r3, #1
 800a28e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a290:	1a43      	subs	r3, r0, r1
 800a292:	1e5a      	subs	r2, r3, #1
 800a294:	bf45      	ittet	mi
 800a296:	f1c3 0301 	rsbmi	r3, r3, #1
 800a29a:	9304      	strmi	r3, [sp, #16]
 800a29c:	2300      	movpl	r3, #0
 800a29e:	2300      	movmi	r3, #0
 800a2a0:	9205      	str	r2, [sp, #20]
 800a2a2:	bf54      	ite	pl
 800a2a4:	9304      	strpl	r3, [sp, #16]
 800a2a6:	9305      	strmi	r3, [sp, #20]
 800a2a8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ac:	db18      	blt.n	800a2e0 <_dtoa_r+0x218>
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a2b4:	445b      	add	r3, fp
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9a06      	ldr	r2, [sp, #24]
 800a2bc:	2a09      	cmp	r2, #9
 800a2be:	d849      	bhi.n	800a354 <_dtoa_r+0x28c>
 800a2c0:	2a05      	cmp	r2, #5
 800a2c2:	bfc4      	itt	gt
 800a2c4:	3a04      	subgt	r2, #4
 800a2c6:	9206      	strgt	r2, [sp, #24]
 800a2c8:	9a06      	ldr	r2, [sp, #24]
 800a2ca:	f1a2 0202 	sub.w	r2, r2, #2
 800a2ce:	bfcc      	ite	gt
 800a2d0:	2400      	movgt	r4, #0
 800a2d2:	2401      	movle	r4, #1
 800a2d4:	2a03      	cmp	r2, #3
 800a2d6:	d848      	bhi.n	800a36a <_dtoa_r+0x2a2>
 800a2d8:	e8df f002 	tbb	[pc, r2]
 800a2dc:	3a2c2e0b 	.word	0x3a2c2e0b
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	eba3 030b 	sub.w	r3, r3, fp
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ec:	f1cb 0300 	rsb	r3, fp, #0
 800a2f0:	e7e3      	b.n	800a2ba <_dtoa_r+0x1f2>
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	9207      	str	r2, [sp, #28]
 800a2f6:	9a08      	ldr	r2, [sp, #32]
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	dc39      	bgt.n	800a370 <_dtoa_r+0x2a8>
 800a2fc:	f04f 0a01 	mov.w	sl, #1
 800a300:	46d1      	mov	r9, sl
 800a302:	4652      	mov	r2, sl
 800a304:	f8cd a020 	str.w	sl, [sp, #32]
 800a308:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a30a:	2100      	movs	r1, #0
 800a30c:	6079      	str	r1, [r7, #4]
 800a30e:	2004      	movs	r0, #4
 800a310:	f100 0c14 	add.w	ip, r0, #20
 800a314:	4594      	cmp	ip, r2
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	d92f      	bls.n	800a37a <_dtoa_r+0x2b2>
 800a31a:	4630      	mov	r0, r6
 800a31c:	930d      	str	r3, [sp, #52]	; 0x34
 800a31e:	f000 fd93 	bl	800ae48 <_Balloc>
 800a322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a324:	9001      	str	r0, [sp, #4]
 800a326:	4602      	mov	r2, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	d149      	bne.n	800a3c0 <_dtoa_r+0x2f8>
 800a32c:	4b23      	ldr	r3, [pc, #140]	; (800a3bc <_dtoa_r+0x2f4>)
 800a32e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a332:	e6e1      	b.n	800a0f8 <_dtoa_r+0x30>
 800a334:	2201      	movs	r2, #1
 800a336:	e7dd      	b.n	800a2f4 <_dtoa_r+0x22c>
 800a338:	2200      	movs	r2, #0
 800a33a:	9207      	str	r2, [sp, #28]
 800a33c:	9a08      	ldr	r2, [sp, #32]
 800a33e:	eb0b 0a02 	add.w	sl, fp, r2
 800a342:	f10a 0901 	add.w	r9, sl, #1
 800a346:	464a      	mov	r2, r9
 800a348:	2a01      	cmp	r2, #1
 800a34a:	bfb8      	it	lt
 800a34c:	2201      	movlt	r2, #1
 800a34e:	e7db      	b.n	800a308 <_dtoa_r+0x240>
 800a350:	2201      	movs	r2, #1
 800a352:	e7f2      	b.n	800a33a <_dtoa_r+0x272>
 800a354:	2401      	movs	r4, #1
 800a356:	2200      	movs	r2, #0
 800a358:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a35c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a360:	2100      	movs	r1, #0
 800a362:	46d1      	mov	r9, sl
 800a364:	2212      	movs	r2, #18
 800a366:	9108      	str	r1, [sp, #32]
 800a368:	e7ce      	b.n	800a308 <_dtoa_r+0x240>
 800a36a:	2201      	movs	r2, #1
 800a36c:	9207      	str	r2, [sp, #28]
 800a36e:	e7f5      	b.n	800a35c <_dtoa_r+0x294>
 800a370:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a374:	46d1      	mov	r9, sl
 800a376:	4652      	mov	r2, sl
 800a378:	e7c6      	b.n	800a308 <_dtoa_r+0x240>
 800a37a:	3101      	adds	r1, #1
 800a37c:	6079      	str	r1, [r7, #4]
 800a37e:	0040      	lsls	r0, r0, #1
 800a380:	e7c6      	b.n	800a310 <_dtoa_r+0x248>
 800a382:	bf00      	nop
 800a384:	f3af 8000 	nop.w
 800a388:	636f4361 	.word	0x636f4361
 800a38c:	3fd287a7 	.word	0x3fd287a7
 800a390:	8b60c8b3 	.word	0x8b60c8b3
 800a394:	3fc68a28 	.word	0x3fc68a28
 800a398:	509f79fb 	.word	0x509f79fb
 800a39c:	3fd34413 	.word	0x3fd34413
 800a3a0:	0800be0d 	.word	0x0800be0d
 800a3a4:	0800be24 	.word	0x0800be24
 800a3a8:	7ff00000 	.word	0x7ff00000
 800a3ac:	0800be09 	.word	0x0800be09
 800a3b0:	0800be00 	.word	0x0800be00
 800a3b4:	0800bddd 	.word	0x0800bddd
 800a3b8:	0800bf18 	.word	0x0800bf18
 800a3bc:	0800be7f 	.word	0x0800be7f
 800a3c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a3c2:	9901      	ldr	r1, [sp, #4]
 800a3c4:	6011      	str	r1, [r2, #0]
 800a3c6:	f1b9 0f0e 	cmp.w	r9, #14
 800a3ca:	d86c      	bhi.n	800a4a6 <_dtoa_r+0x3de>
 800a3cc:	2c00      	cmp	r4, #0
 800a3ce:	d06a      	beq.n	800a4a6 <_dtoa_r+0x3de>
 800a3d0:	f1bb 0f00 	cmp.w	fp, #0
 800a3d4:	f340 80a0 	ble.w	800a518 <_dtoa_r+0x450>
 800a3d8:	49c1      	ldr	r1, [pc, #772]	; (800a6e0 <_dtoa_r+0x618>)
 800a3da:	f00b 020f 	and.w	r2, fp, #15
 800a3de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a3e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a3e6:	ed92 7b00 	vldr	d7, [r2]
 800a3ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a3ee:	f000 8087 	beq.w	800a500 <_dtoa_r+0x438>
 800a3f2:	4abc      	ldr	r2, [pc, #752]	; (800a6e4 <_dtoa_r+0x61c>)
 800a3f4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a3f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a3fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a400:	f001 010f 	and.w	r1, r1, #15
 800a404:	2203      	movs	r2, #3
 800a406:	48b7      	ldr	r0, [pc, #732]	; (800a6e4 <_dtoa_r+0x61c>)
 800a408:	2900      	cmp	r1, #0
 800a40a:	d17b      	bne.n	800a504 <_dtoa_r+0x43c>
 800a40c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a414:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a41a:	2900      	cmp	r1, #0
 800a41c:	f000 80a2 	beq.w	800a564 <_dtoa_r+0x49c>
 800a420:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a424:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a428:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a430:	f140 8098 	bpl.w	800a564 <_dtoa_r+0x49c>
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	f000 8094 	beq.w	800a564 <_dtoa_r+0x49c>
 800a43c:	f1ba 0f00 	cmp.w	sl, #0
 800a440:	dd2f      	ble.n	800a4a2 <_dtoa_r+0x3da>
 800a442:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a44a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a44e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a452:	3201      	adds	r2, #1
 800a454:	4650      	mov	r0, sl
 800a456:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a45a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a45e:	ee07 2a90 	vmov	s15, r2
 800a462:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a466:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a46a:	ee15 4a90 	vmov	r4, s11
 800a46e:	ec52 1b15 	vmov	r1, r2, d5
 800a472:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a476:	2800      	cmp	r0, #0
 800a478:	d177      	bne.n	800a56a <_dtoa_r+0x4a2>
 800a47a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a47e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a482:	ec42 1b17 	vmov	d7, r1, r2
 800a486:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48e:	f300 8263 	bgt.w	800a958 <_dtoa_r+0x890>
 800a492:	eeb1 7b47 	vneg.f64	d7, d7
 800a496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49e:	f100 8258 	bmi.w	800a952 <_dtoa_r+0x88a>
 800a4a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4a8:	2a00      	cmp	r2, #0
 800a4aa:	f2c0 811d 	blt.w	800a6e8 <_dtoa_r+0x620>
 800a4ae:	f1bb 0f0e 	cmp.w	fp, #14
 800a4b2:	f300 8119 	bgt.w	800a6e8 <_dtoa_r+0x620>
 800a4b6:	4b8a      	ldr	r3, [pc, #552]	; (800a6e0 <_dtoa_r+0x618>)
 800a4b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4bc:	ed93 6b00 	vldr	d6, [r3]
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f280 80b7 	bge.w	800a636 <_dtoa_r+0x56e>
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	f300 80b3 	bgt.w	800a636 <_dtoa_r+0x56e>
 800a4d0:	f040 823f 	bne.w	800a952 <_dtoa_r+0x88a>
 800a4d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a4d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a4dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e8:	464c      	mov	r4, r9
 800a4ea:	464f      	mov	r7, r9
 800a4ec:	f280 8215 	bge.w	800a91a <_dtoa_r+0x852>
 800a4f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4f4:	2331      	movs	r3, #49	; 0x31
 800a4f6:	f808 3b01 	strb.w	r3, [r8], #1
 800a4fa:	f10b 0b01 	add.w	fp, fp, #1
 800a4fe:	e211      	b.n	800a924 <_dtoa_r+0x85c>
 800a500:	2202      	movs	r2, #2
 800a502:	e780      	b.n	800a406 <_dtoa_r+0x33e>
 800a504:	07cc      	lsls	r4, r1, #31
 800a506:	d504      	bpl.n	800a512 <_dtoa_r+0x44a>
 800a508:	ed90 6b00 	vldr	d6, [r0]
 800a50c:	3201      	adds	r2, #1
 800a50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a512:	1049      	asrs	r1, r1, #1
 800a514:	3008      	adds	r0, #8
 800a516:	e777      	b.n	800a408 <_dtoa_r+0x340>
 800a518:	d022      	beq.n	800a560 <_dtoa_r+0x498>
 800a51a:	f1cb 0100 	rsb	r1, fp, #0
 800a51e:	4a70      	ldr	r2, [pc, #448]	; (800a6e0 <_dtoa_r+0x618>)
 800a520:	f001 000f 	and.w	r0, r1, #15
 800a524:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a528:	ed92 7b00 	vldr	d7, [r2]
 800a52c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a530:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a534:	486b      	ldr	r0, [pc, #428]	; (800a6e4 <_dtoa_r+0x61c>)
 800a536:	1109      	asrs	r1, r1, #4
 800a538:	2400      	movs	r4, #0
 800a53a:	2202      	movs	r2, #2
 800a53c:	b929      	cbnz	r1, 800a54a <_dtoa_r+0x482>
 800a53e:	2c00      	cmp	r4, #0
 800a540:	f43f af6a 	beq.w	800a418 <_dtoa_r+0x350>
 800a544:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a548:	e766      	b.n	800a418 <_dtoa_r+0x350>
 800a54a:	07cf      	lsls	r7, r1, #31
 800a54c:	d505      	bpl.n	800a55a <_dtoa_r+0x492>
 800a54e:	ed90 6b00 	vldr	d6, [r0]
 800a552:	3201      	adds	r2, #1
 800a554:	2401      	movs	r4, #1
 800a556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a55a:	1049      	asrs	r1, r1, #1
 800a55c:	3008      	adds	r0, #8
 800a55e:	e7ed      	b.n	800a53c <_dtoa_r+0x474>
 800a560:	2202      	movs	r2, #2
 800a562:	e759      	b.n	800a418 <_dtoa_r+0x350>
 800a564:	465f      	mov	r7, fp
 800a566:	4648      	mov	r0, r9
 800a568:	e775      	b.n	800a456 <_dtoa_r+0x38e>
 800a56a:	ec42 1b17 	vmov	d7, r1, r2
 800a56e:	4a5c      	ldr	r2, [pc, #368]	; (800a6e0 <_dtoa_r+0x618>)
 800a570:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a574:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a578:	9a01      	ldr	r2, [sp, #4]
 800a57a:	1814      	adds	r4, r2, r0
 800a57c:	9a07      	ldr	r2, [sp, #28]
 800a57e:	b352      	cbz	r2, 800a5d6 <_dtoa_r+0x50e>
 800a580:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a584:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a588:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a58c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a590:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a594:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a598:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a59c:	ee14 2a90 	vmov	r2, s9
 800a5a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5a4:	3230      	adds	r2, #48	; 0x30
 800a5a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	f808 2b01 	strb.w	r2, [r8], #1
 800a5b6:	d439      	bmi.n	800a62c <_dtoa_r+0x564>
 800a5b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a5bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	d472      	bmi.n	800a6ac <_dtoa_r+0x5e4>
 800a5c6:	45a0      	cmp	r8, r4
 800a5c8:	f43f af6b 	beq.w	800a4a2 <_dtoa_r+0x3da>
 800a5cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a5d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5d4:	e7e0      	b.n	800a598 <_dtoa_r+0x4d0>
 800a5d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5de:	4621      	mov	r1, r4
 800a5e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a5e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5e8:	ee14 2a90 	vmov	r2, s9
 800a5ec:	3230      	adds	r2, #48	; 0x30
 800a5ee:	f808 2b01 	strb.w	r2, [r8], #1
 800a5f2:	45a0      	cmp	r8, r4
 800a5f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5fc:	d118      	bne.n	800a630 <_dtoa_r+0x568>
 800a5fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a602:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a606:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60e:	dc4d      	bgt.n	800a6ac <_dtoa_r+0x5e4>
 800a610:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61c:	f57f af41 	bpl.w	800a4a2 <_dtoa_r+0x3da>
 800a620:	4688      	mov	r8, r1
 800a622:	3901      	subs	r1, #1
 800a624:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a628:	2b30      	cmp	r3, #48	; 0x30
 800a62a:	d0f9      	beq.n	800a620 <_dtoa_r+0x558>
 800a62c:	46bb      	mov	fp, r7
 800a62e:	e02a      	b.n	800a686 <_dtoa_r+0x5be>
 800a630:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a634:	e7d6      	b.n	800a5e4 <_dtoa_r+0x51c>
 800a636:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a63a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a63e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a642:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a646:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a64a:	ee15 3a10 	vmov	r3, s10
 800a64e:	3330      	adds	r3, #48	; 0x30
 800a650:	f808 3b01 	strb.w	r3, [r8], #1
 800a654:	9b01      	ldr	r3, [sp, #4]
 800a656:	eba8 0303 	sub.w	r3, r8, r3
 800a65a:	4599      	cmp	r9, r3
 800a65c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a660:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a664:	d133      	bne.n	800a6ce <_dtoa_r+0x606>
 800a666:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a66a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	dc1a      	bgt.n	800a6aa <_dtoa_r+0x5e2>
 800a674:	eeb4 7b46 	vcmp.f64	d7, d6
 800a678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67c:	d103      	bne.n	800a686 <_dtoa_r+0x5be>
 800a67e:	ee15 3a10 	vmov	r3, s10
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d411      	bmi.n	800a6aa <_dtoa_r+0x5e2>
 800a686:	4629      	mov	r1, r5
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 fc1d 	bl	800aec8 <_Bfree>
 800a68e:	2300      	movs	r3, #0
 800a690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a692:	f888 3000 	strb.w	r3, [r8]
 800a696:	f10b 0301 	add.w	r3, fp, #1
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f43f ad61 	beq.w	800a166 <_dtoa_r+0x9e>
 800a6a4:	f8c3 8000 	str.w	r8, [r3]
 800a6a8:	e55d      	b.n	800a166 <_dtoa_r+0x9e>
 800a6aa:	465f      	mov	r7, fp
 800a6ac:	4643      	mov	r3, r8
 800a6ae:	4698      	mov	r8, r3
 800a6b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b4:	2a39      	cmp	r2, #57	; 0x39
 800a6b6:	d106      	bne.n	800a6c6 <_dtoa_r+0x5fe>
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d1f7      	bne.n	800a6ae <_dtoa_r+0x5e6>
 800a6be:	9901      	ldr	r1, [sp, #4]
 800a6c0:	2230      	movs	r2, #48	; 0x30
 800a6c2:	3701      	adds	r7, #1
 800a6c4:	700a      	strb	r2, [r1, #0]
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	701a      	strb	r2, [r3, #0]
 800a6cc:	e7ae      	b.n	800a62c <_dtoa_r+0x564>
 800a6ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	d1b2      	bne.n	800a642 <_dtoa_r+0x57a>
 800a6dc:	e7d3      	b.n	800a686 <_dtoa_r+0x5be>
 800a6de:	bf00      	nop
 800a6e0:	0800bf18 	.word	0x0800bf18
 800a6e4:	0800bef0 	.word	0x0800bef0
 800a6e8:	9907      	ldr	r1, [sp, #28]
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	f000 80d0 	beq.w	800a890 <_dtoa_r+0x7c8>
 800a6f0:	9906      	ldr	r1, [sp, #24]
 800a6f2:	2901      	cmp	r1, #1
 800a6f4:	f300 80b4 	bgt.w	800a860 <_dtoa_r+0x798>
 800a6f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	f000 80ac 	beq.w	800a858 <_dtoa_r+0x790>
 800a700:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a704:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a708:	461c      	mov	r4, r3
 800a70a:	930a      	str	r3, [sp, #40]	; 0x28
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	4413      	add	r3, r2
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	2101      	movs	r1, #1
 800a716:	4413      	add	r3, r2
 800a718:	4630      	mov	r0, r6
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f000 fc8c 	bl	800b038 <__i2b>
 800a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a722:	4607      	mov	r7, r0
 800a724:	f1b8 0f00 	cmp.w	r8, #0
 800a728:	dd0d      	ble.n	800a746 <_dtoa_r+0x67e>
 800a72a:	9a05      	ldr	r2, [sp, #20]
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	dd0a      	ble.n	800a746 <_dtoa_r+0x67e>
 800a730:	4542      	cmp	r2, r8
 800a732:	9904      	ldr	r1, [sp, #16]
 800a734:	bfa8      	it	ge
 800a736:	4642      	movge	r2, r8
 800a738:	1a89      	subs	r1, r1, r2
 800a73a:	9104      	str	r1, [sp, #16]
 800a73c:	9905      	ldr	r1, [sp, #20]
 800a73e:	eba8 0802 	sub.w	r8, r8, r2
 800a742:	1a8a      	subs	r2, r1, r2
 800a744:	9205      	str	r2, [sp, #20]
 800a746:	b303      	cbz	r3, 800a78a <_dtoa_r+0x6c2>
 800a748:	9a07      	ldr	r2, [sp, #28]
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	f000 80a5 	beq.w	800a89a <_dtoa_r+0x7d2>
 800a750:	2c00      	cmp	r4, #0
 800a752:	dd13      	ble.n	800a77c <_dtoa_r+0x6b4>
 800a754:	4639      	mov	r1, r7
 800a756:	4622      	mov	r2, r4
 800a758:	4630      	mov	r0, r6
 800a75a:	930d      	str	r3, [sp, #52]	; 0x34
 800a75c:	f000 fd2c 	bl	800b1b8 <__pow5mult>
 800a760:	462a      	mov	r2, r5
 800a762:	4601      	mov	r1, r0
 800a764:	4607      	mov	r7, r0
 800a766:	4630      	mov	r0, r6
 800a768:	f000 fc7c 	bl	800b064 <__multiply>
 800a76c:	4629      	mov	r1, r5
 800a76e:	900a      	str	r0, [sp, #40]	; 0x28
 800a770:	4630      	mov	r0, r6
 800a772:	f000 fba9 	bl	800aec8 <_Bfree>
 800a776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a77a:	4615      	mov	r5, r2
 800a77c:	1b1a      	subs	r2, r3, r4
 800a77e:	d004      	beq.n	800a78a <_dtoa_r+0x6c2>
 800a780:	4629      	mov	r1, r5
 800a782:	4630      	mov	r0, r6
 800a784:	f000 fd18 	bl	800b1b8 <__pow5mult>
 800a788:	4605      	mov	r5, r0
 800a78a:	2101      	movs	r1, #1
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 fc53 	bl	800b038 <__i2b>
 800a792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	4604      	mov	r4, r0
 800a798:	f340 8081 	ble.w	800a89e <_dtoa_r+0x7d6>
 800a79c:	461a      	mov	r2, r3
 800a79e:	4601      	mov	r1, r0
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 fd09 	bl	800b1b8 <__pow5mult>
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	dd7a      	ble.n	800a8a4 <_dtoa_r+0x7dc>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b2:	6922      	ldr	r2, [r4, #16]
 800a7b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a7b8:	6910      	ldr	r0, [r2, #16]
 800a7ba:	f000 fbed 	bl	800af98 <__hi0bits>
 800a7be:	f1c0 0020 	rsb	r0, r0, #32
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	4418      	add	r0, r3
 800a7c6:	f010 001f 	ands.w	r0, r0, #31
 800a7ca:	f000 808c 	beq.w	800a8e6 <_dtoa_r+0x81e>
 800a7ce:	f1c0 0220 	rsb	r2, r0, #32
 800a7d2:	2a04      	cmp	r2, #4
 800a7d4:	f340 8085 	ble.w	800a8e2 <_dtoa_r+0x81a>
 800a7d8:	f1c0 001c 	rsb	r0, r0, #28
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	4403      	add	r3, r0
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	4403      	add	r3, r0
 800a7e6:	4480      	add	r8, r0
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd05      	ble.n	800a7fc <_dtoa_r+0x734>
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 fd39 	bl	800b26c <__lshift>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	9b05      	ldr	r3, [sp, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd05      	ble.n	800a80e <_dtoa_r+0x746>
 800a802:	4621      	mov	r1, r4
 800a804:	461a      	mov	r2, r3
 800a806:	4630      	mov	r0, r6
 800a808:	f000 fd30 	bl	800b26c <__lshift>
 800a80c:	4604      	mov	r4, r0
 800a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d06a      	beq.n	800a8ea <_dtoa_r+0x822>
 800a814:	4621      	mov	r1, r4
 800a816:	4628      	mov	r0, r5
 800a818:	f000 fd98 	bl	800b34c <__mcmp>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	da64      	bge.n	800a8ea <_dtoa_r+0x822>
 800a820:	2300      	movs	r3, #0
 800a822:	4629      	mov	r1, r5
 800a824:	220a      	movs	r2, #10
 800a826:	4630      	mov	r0, r6
 800a828:	f000 fb70 	bl	800af0c <__multadd>
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a832:	4605      	mov	r5, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8191 	beq.w	800ab5c <_dtoa_r+0xa94>
 800a83a:	4639      	mov	r1, r7
 800a83c:	2300      	movs	r3, #0
 800a83e:	220a      	movs	r2, #10
 800a840:	4630      	mov	r0, r6
 800a842:	f000 fb63 	bl	800af0c <__multadd>
 800a846:	f1ba 0f00 	cmp.w	sl, #0
 800a84a:	4607      	mov	r7, r0
 800a84c:	f300 808d 	bgt.w	800a96a <_dtoa_r+0x8a2>
 800a850:	9b06      	ldr	r3, [sp, #24]
 800a852:	2b02      	cmp	r3, #2
 800a854:	dc50      	bgt.n	800a8f8 <_dtoa_r+0x830>
 800a856:	e088      	b.n	800a96a <_dtoa_r+0x8a2>
 800a858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a85a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a85e:	e751      	b.n	800a704 <_dtoa_r+0x63c>
 800a860:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a864:	42a3      	cmp	r3, r4
 800a866:	bfbf      	itttt	lt
 800a868:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a86a:	1ae3      	sublt	r3, r4, r3
 800a86c:	18d2      	addlt	r2, r2, r3
 800a86e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a870:	bfb6      	itet	lt
 800a872:	4623      	movlt	r3, r4
 800a874:	1b1c      	subge	r4, r3, r4
 800a876:	2400      	movlt	r4, #0
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	bfb5      	itete	lt
 800a87e:	9a04      	ldrlt	r2, [sp, #16]
 800a880:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a884:	eba2 0809 	sublt.w	r8, r2, r9
 800a888:	464a      	movge	r2, r9
 800a88a:	bfb8      	it	lt
 800a88c:	2200      	movlt	r2, #0
 800a88e:	e73c      	b.n	800a70a <_dtoa_r+0x642>
 800a890:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a894:	9f07      	ldr	r7, [sp, #28]
 800a896:	461c      	mov	r4, r3
 800a898:	e744      	b.n	800a724 <_dtoa_r+0x65c>
 800a89a:	461a      	mov	r2, r3
 800a89c:	e770      	b.n	800a780 <_dtoa_r+0x6b8>
 800a89e:	9b06      	ldr	r3, [sp, #24]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	dc18      	bgt.n	800a8d6 <_dtoa_r+0x80e>
 800a8a4:	9b02      	ldr	r3, [sp, #8]
 800a8a6:	b9b3      	cbnz	r3, 800a8d6 <_dtoa_r+0x80e>
 800a8a8:	9b03      	ldr	r3, [sp, #12]
 800a8aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a8ae:	b9a2      	cbnz	r2, 800a8da <_dtoa_r+0x812>
 800a8b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8b4:	0d12      	lsrs	r2, r2, #20
 800a8b6:	0512      	lsls	r2, r2, #20
 800a8b8:	b18a      	cbz	r2, 800a8de <_dtoa_r+0x816>
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	9b05      	ldr	r3, [sp, #20]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	9305      	str	r3, [sp, #20]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f af70 	bne.w	800a7b2 <_dtoa_r+0x6ea>
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e775      	b.n	800a7c2 <_dtoa_r+0x6fa>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e7f6      	b.n	800a8c8 <_dtoa_r+0x800>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	e7f4      	b.n	800a8c8 <_dtoa_r+0x800>
 800a8de:	920a      	str	r2, [sp, #40]	; 0x28
 800a8e0:	e7f3      	b.n	800a8ca <_dtoa_r+0x802>
 800a8e2:	d082      	beq.n	800a7ea <_dtoa_r+0x722>
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	301c      	adds	r0, #28
 800a8e8:	e778      	b.n	800a7dc <_dtoa_r+0x714>
 800a8ea:	f1b9 0f00 	cmp.w	r9, #0
 800a8ee:	dc37      	bgt.n	800a960 <_dtoa_r+0x898>
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	dd34      	ble.n	800a960 <_dtoa_r+0x898>
 800a8f6:	46ca      	mov	sl, r9
 800a8f8:	f1ba 0f00 	cmp.w	sl, #0
 800a8fc:	d10d      	bne.n	800a91a <_dtoa_r+0x852>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4653      	mov	r3, sl
 800a902:	2205      	movs	r2, #5
 800a904:	4630      	mov	r0, r6
 800a906:	f000 fb01 	bl	800af0c <__multadd>
 800a90a:	4601      	mov	r1, r0
 800a90c:	4604      	mov	r4, r0
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 fd1c 	bl	800b34c <__mcmp>
 800a914:	2800      	cmp	r0, #0
 800a916:	f73f adeb 	bgt.w	800a4f0 <_dtoa_r+0x428>
 800a91a:	9b08      	ldr	r3, [sp, #32]
 800a91c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a920:	ea6f 0b03 	mvn.w	fp, r3
 800a924:	f04f 0900 	mov.w	r9, #0
 800a928:	4621      	mov	r1, r4
 800a92a:	4630      	mov	r0, r6
 800a92c:	f000 facc 	bl	800aec8 <_Bfree>
 800a930:	2f00      	cmp	r7, #0
 800a932:	f43f aea8 	beq.w	800a686 <_dtoa_r+0x5be>
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d005      	beq.n	800a948 <_dtoa_r+0x880>
 800a93c:	45b9      	cmp	r9, r7
 800a93e:	d003      	beq.n	800a948 <_dtoa_r+0x880>
 800a940:	4649      	mov	r1, r9
 800a942:	4630      	mov	r0, r6
 800a944:	f000 fac0 	bl	800aec8 <_Bfree>
 800a948:	4639      	mov	r1, r7
 800a94a:	4630      	mov	r0, r6
 800a94c:	f000 fabc 	bl	800aec8 <_Bfree>
 800a950:	e699      	b.n	800a686 <_dtoa_r+0x5be>
 800a952:	2400      	movs	r4, #0
 800a954:	4627      	mov	r7, r4
 800a956:	e7e0      	b.n	800a91a <_dtoa_r+0x852>
 800a958:	46bb      	mov	fp, r7
 800a95a:	4604      	mov	r4, r0
 800a95c:	4607      	mov	r7, r0
 800a95e:	e5c7      	b.n	800a4f0 <_dtoa_r+0x428>
 800a960:	9b07      	ldr	r3, [sp, #28]
 800a962:	46ca      	mov	sl, r9
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8100 	beq.w	800ab6a <_dtoa_r+0xaa2>
 800a96a:	f1b8 0f00 	cmp.w	r8, #0
 800a96e:	dd05      	ble.n	800a97c <_dtoa_r+0x8b4>
 800a970:	4639      	mov	r1, r7
 800a972:	4642      	mov	r2, r8
 800a974:	4630      	mov	r0, r6
 800a976:	f000 fc79 	bl	800b26c <__lshift>
 800a97a:	4607      	mov	r7, r0
 800a97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d05d      	beq.n	800aa3e <_dtoa_r+0x976>
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	4630      	mov	r0, r6
 800a986:	f000 fa5f 	bl	800ae48 <_Balloc>
 800a98a:	4680      	mov	r8, r0
 800a98c:	b928      	cbnz	r0, 800a99a <_dtoa_r+0x8d2>
 800a98e:	4b82      	ldr	r3, [pc, #520]	; (800ab98 <_dtoa_r+0xad0>)
 800a990:	4602      	mov	r2, r0
 800a992:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a996:	f7ff bbaf 	b.w	800a0f8 <_dtoa_r+0x30>
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	3202      	adds	r2, #2
 800a99e:	0092      	lsls	r2, r2, #2
 800a9a0:	f107 010c 	add.w	r1, r7, #12
 800a9a4:	300c      	adds	r0, #12
 800a9a6:	f7fe fc2e 	bl	8009206 <memcpy>
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4641      	mov	r1, r8
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 fc5c 	bl	800b26c <__lshift>
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	4453      	add	r3, sl
 800a9be:	9308      	str	r3, [sp, #32]
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	46b9      	mov	r9, r7
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	9302      	str	r3, [sp, #8]
 800a9d6:	f7ff fae9 	bl	8009fac <quorem>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	3330      	adds	r3, #48	; 0x30
 800a9de:	9005      	str	r0, [sp, #20]
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e6:	f000 fcb1 	bl	800b34c <__mcmp>
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f000 fcc7 	bl	800b384 <__mdiff>
 800a9f6:	68c2      	ldr	r2, [r0, #12]
 800a9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	bb0a      	cbnz	r2, 800aa42 <_dtoa_r+0x97a>
 800a9fe:	4601      	mov	r1, r0
 800aa00:	4628      	mov	r0, r5
 800aa02:	f000 fca3 	bl	800b34c <__mcmp>
 800aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa08:	4602      	mov	r2, r0
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800aa12:	f000 fa59 	bl	800aec8 <_Bfree>
 800aa16:	9b06      	ldr	r3, [sp, #24]
 800aa18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa1e:	ea43 0102 	orr.w	r1, r3, r2
 800aa22:	9b07      	ldr	r3, [sp, #28]
 800aa24:	430b      	orrs	r3, r1
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	d10d      	bne.n	800aa46 <_dtoa_r+0x97e>
 800aa2a:	2b39      	cmp	r3, #57	; 0x39
 800aa2c:	d029      	beq.n	800aa82 <_dtoa_r+0x9ba>
 800aa2e:	f1ba 0f00 	cmp.w	sl, #0
 800aa32:	dd01      	ble.n	800aa38 <_dtoa_r+0x970>
 800aa34:	9b05      	ldr	r3, [sp, #20]
 800aa36:	3331      	adds	r3, #49	; 0x31
 800aa38:	9a02      	ldr	r2, [sp, #8]
 800aa3a:	7013      	strb	r3, [r2, #0]
 800aa3c:	e774      	b.n	800a928 <_dtoa_r+0x860>
 800aa3e:	4638      	mov	r0, r7
 800aa40:	e7b8      	b.n	800a9b4 <_dtoa_r+0x8ec>
 800aa42:	2201      	movs	r2, #1
 800aa44:	e7e1      	b.n	800aa0a <_dtoa_r+0x942>
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	db06      	blt.n	800aa5a <_dtoa_r+0x992>
 800aa4c:	9906      	ldr	r1, [sp, #24]
 800aa4e:	ea41 0a0a 	orr.w	sl, r1, sl
 800aa52:	9907      	ldr	r1, [sp, #28]
 800aa54:	ea5a 0101 	orrs.w	r1, sl, r1
 800aa58:	d120      	bne.n	800aa9c <_dtoa_r+0x9d4>
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	ddec      	ble.n	800aa38 <_dtoa_r+0x970>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	2201      	movs	r2, #1
 800aa62:	4630      	mov	r0, r6
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	f000 fc01 	bl	800b26c <__lshift>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	f000 fc6d 	bl	800b34c <__mcmp>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	dc02      	bgt.n	800aa7e <_dtoa_r+0x9b6>
 800aa78:	d1de      	bne.n	800aa38 <_dtoa_r+0x970>
 800aa7a:	07da      	lsls	r2, r3, #31
 800aa7c:	d5dc      	bpl.n	800aa38 <_dtoa_r+0x970>
 800aa7e:	2b39      	cmp	r3, #57	; 0x39
 800aa80:	d1d8      	bne.n	800aa34 <_dtoa_r+0x96c>
 800aa82:	9a02      	ldr	r2, [sp, #8]
 800aa84:	2339      	movs	r3, #57	; 0x39
 800aa86:	7013      	strb	r3, [r2, #0]
 800aa88:	4643      	mov	r3, r8
 800aa8a:	4698      	mov	r8, r3
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aa92:	2a39      	cmp	r2, #57	; 0x39
 800aa94:	d051      	beq.n	800ab3a <_dtoa_r+0xa72>
 800aa96:	3201      	adds	r2, #1
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	e745      	b.n	800a928 <_dtoa_r+0x860>
 800aa9c:	2a00      	cmp	r2, #0
 800aa9e:	dd03      	ble.n	800aaa8 <_dtoa_r+0x9e0>
 800aaa0:	2b39      	cmp	r3, #57	; 0x39
 800aaa2:	d0ee      	beq.n	800aa82 <_dtoa_r+0x9ba>
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	e7c7      	b.n	800aa38 <_dtoa_r+0x970>
 800aaa8:	9a04      	ldr	r2, [sp, #16]
 800aaaa:	9908      	ldr	r1, [sp, #32]
 800aaac:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aab0:	428a      	cmp	r2, r1
 800aab2:	d02b      	beq.n	800ab0c <_dtoa_r+0xa44>
 800aab4:	4629      	mov	r1, r5
 800aab6:	2300      	movs	r3, #0
 800aab8:	220a      	movs	r2, #10
 800aaba:	4630      	mov	r0, r6
 800aabc:	f000 fa26 	bl	800af0c <__multadd>
 800aac0:	45b9      	cmp	r9, r7
 800aac2:	4605      	mov	r5, r0
 800aac4:	f04f 0300 	mov.w	r3, #0
 800aac8:	f04f 020a 	mov.w	r2, #10
 800aacc:	4649      	mov	r1, r9
 800aace:	4630      	mov	r0, r6
 800aad0:	d107      	bne.n	800aae2 <_dtoa_r+0xa1a>
 800aad2:	f000 fa1b 	bl	800af0c <__multadd>
 800aad6:	4681      	mov	r9, r0
 800aad8:	4607      	mov	r7, r0
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	3301      	adds	r3, #1
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	e774      	b.n	800a9cc <_dtoa_r+0x904>
 800aae2:	f000 fa13 	bl	800af0c <__multadd>
 800aae6:	4639      	mov	r1, r7
 800aae8:	4681      	mov	r9, r0
 800aaea:	2300      	movs	r3, #0
 800aaec:	220a      	movs	r2, #10
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f000 fa0c 	bl	800af0c <__multadd>
 800aaf4:	4607      	mov	r7, r0
 800aaf6:	e7f0      	b.n	800aada <_dtoa_r+0xa12>
 800aaf8:	f1ba 0f00 	cmp.w	sl, #0
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	bfcc      	ite	gt
 800ab00:	46d0      	movgt	r8, sl
 800ab02:	f04f 0801 	movle.w	r8, #1
 800ab06:	4490      	add	r8, r2
 800ab08:	f04f 0900 	mov.w	r9, #0
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	2201      	movs	r2, #1
 800ab10:	4630      	mov	r0, r6
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	f000 fbaa 	bl	800b26c <__lshift>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	f000 fc16 	bl	800b34c <__mcmp>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	dcb1      	bgt.n	800aa88 <_dtoa_r+0x9c0>
 800ab24:	d102      	bne.n	800ab2c <_dtoa_r+0xa64>
 800ab26:	9b02      	ldr	r3, [sp, #8]
 800ab28:	07db      	lsls	r3, r3, #31
 800ab2a:	d4ad      	bmi.n	800aa88 <_dtoa_r+0x9c0>
 800ab2c:	4643      	mov	r3, r8
 800ab2e:	4698      	mov	r8, r3
 800ab30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab34:	2a30      	cmp	r2, #48	; 0x30
 800ab36:	d0fa      	beq.n	800ab2e <_dtoa_r+0xa66>
 800ab38:	e6f6      	b.n	800a928 <_dtoa_r+0x860>
 800ab3a:	9a01      	ldr	r2, [sp, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d1a4      	bne.n	800aa8a <_dtoa_r+0x9c2>
 800ab40:	f10b 0b01 	add.w	fp, fp, #1
 800ab44:	2331      	movs	r3, #49	; 0x31
 800ab46:	e778      	b.n	800aa3a <_dtoa_r+0x972>
 800ab48:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <_dtoa_r+0xad4>)
 800ab4a:	f7ff bb27 	b.w	800a19c <_dtoa_r+0xd4>
 800ab4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f47f ab03 	bne.w	800a15c <_dtoa_r+0x94>
 800ab56:	4b12      	ldr	r3, [pc, #72]	; (800aba0 <_dtoa_r+0xad8>)
 800ab58:	f7ff bb20 	b.w	800a19c <_dtoa_r+0xd4>
 800ab5c:	f1ba 0f00 	cmp.w	sl, #0
 800ab60:	dc03      	bgt.n	800ab6a <_dtoa_r+0xaa2>
 800ab62:	9b06      	ldr	r3, [sp, #24]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	f73f aec7 	bgt.w	800a8f8 <_dtoa_r+0x830>
 800ab6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f7ff fa1b 	bl	8009fac <quorem>
 800ab76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab7a:	f808 3b01 	strb.w	r3, [r8], #1
 800ab7e:	9a01      	ldr	r2, [sp, #4]
 800ab80:	eba8 0202 	sub.w	r2, r8, r2
 800ab84:	4592      	cmp	sl, r2
 800ab86:	ddb7      	ble.n	800aaf8 <_dtoa_r+0xa30>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 f9bc 	bl	800af0c <__multadd>
 800ab94:	4605      	mov	r5, r0
 800ab96:	e7ea      	b.n	800ab6e <_dtoa_r+0xaa6>
 800ab98:	0800be7f 	.word	0x0800be7f
 800ab9c:	0800bddc 	.word	0x0800bddc
 800aba0:	0800be00 	.word	0x0800be00

0800aba4 <__sflush_r>:
 800aba4:	898a      	ldrh	r2, [r1, #12]
 800aba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abaa:	4605      	mov	r5, r0
 800abac:	0710      	lsls	r0, r2, #28
 800abae:	460c      	mov	r4, r1
 800abb0:	d458      	bmi.n	800ac64 <__sflush_r+0xc0>
 800abb2:	684b      	ldr	r3, [r1, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dc05      	bgt.n	800abc4 <__sflush_r+0x20>
 800abb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	dc02      	bgt.n	800abc4 <__sflush_r+0x20>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc6:	2e00      	cmp	r6, #0
 800abc8:	d0f9      	beq.n	800abbe <__sflush_r+0x1a>
 800abca:	2300      	movs	r3, #0
 800abcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abd0:	682f      	ldr	r7, [r5, #0]
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	d032      	beq.n	800ac3c <__sflush_r+0x98>
 800abd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	075a      	lsls	r2, r3, #29
 800abdc:	d505      	bpl.n	800abea <__sflush_r+0x46>
 800abde:	6863      	ldr	r3, [r4, #4]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abe4:	b10b      	cbz	r3, 800abea <__sflush_r+0x46>
 800abe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abe8:	1ac0      	subs	r0, r0, r3
 800abea:	2300      	movs	r3, #0
 800abec:	4602      	mov	r2, r0
 800abee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abf0:	6a21      	ldr	r1, [r4, #32]
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b0      	blx	r6
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	d106      	bne.n	800ac0a <__sflush_r+0x66>
 800abfc:	6829      	ldr	r1, [r5, #0]
 800abfe:	291d      	cmp	r1, #29
 800ac00:	d82c      	bhi.n	800ac5c <__sflush_r+0xb8>
 800ac02:	4a2a      	ldr	r2, [pc, #168]	; (800acac <__sflush_r+0x108>)
 800ac04:	40ca      	lsrs	r2, r1
 800ac06:	07d6      	lsls	r6, r2, #31
 800ac08:	d528      	bpl.n	800ac5c <__sflush_r+0xb8>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6062      	str	r2, [r4, #4]
 800ac0e:	04d9      	lsls	r1, r3, #19
 800ac10:	6922      	ldr	r2, [r4, #16]
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	d504      	bpl.n	800ac20 <__sflush_r+0x7c>
 800ac16:	1c42      	adds	r2, r0, #1
 800ac18:	d101      	bne.n	800ac1e <__sflush_r+0x7a>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b903      	cbnz	r3, 800ac20 <__sflush_r+0x7c>
 800ac1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac22:	602f      	str	r7, [r5, #0]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d0ca      	beq.n	800abbe <__sflush_r+0x1a>
 800ac28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	d002      	beq.n	800ac36 <__sflush_r+0x92>
 800ac30:	4628      	mov	r0, r5
 800ac32:	f000 fca3 	bl	800b57c <_free_r>
 800ac36:	2000      	movs	r0, #0
 800ac38:	6360      	str	r0, [r4, #52]	; 0x34
 800ac3a:	e7c1      	b.n	800abc0 <__sflush_r+0x1c>
 800ac3c:	6a21      	ldr	r1, [r4, #32]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b0      	blx	r6
 800ac44:	1c41      	adds	r1, r0, #1
 800ac46:	d1c7      	bne.n	800abd8 <__sflush_r+0x34>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0c4      	beq.n	800abd8 <__sflush_r+0x34>
 800ac4e:	2b1d      	cmp	r3, #29
 800ac50:	d001      	beq.n	800ac56 <__sflush_r+0xb2>
 800ac52:	2b16      	cmp	r3, #22
 800ac54:	d101      	bne.n	800ac5a <__sflush_r+0xb6>
 800ac56:	602f      	str	r7, [r5, #0]
 800ac58:	e7b1      	b.n	800abbe <__sflush_r+0x1a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	e7ad      	b.n	800abc0 <__sflush_r+0x1c>
 800ac64:	690f      	ldr	r7, [r1, #16]
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	d0a9      	beq.n	800abbe <__sflush_r+0x1a>
 800ac6a:	0793      	lsls	r3, r2, #30
 800ac6c:	680e      	ldr	r6, [r1, #0]
 800ac6e:	bf08      	it	eq
 800ac70:	694b      	ldreq	r3, [r1, #20]
 800ac72:	600f      	str	r7, [r1, #0]
 800ac74:	bf18      	it	ne
 800ac76:	2300      	movne	r3, #0
 800ac78:	eba6 0807 	sub.w	r8, r6, r7
 800ac7c:	608b      	str	r3, [r1, #8]
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	dd9c      	ble.n	800abbe <__sflush_r+0x1a>
 800ac84:	6a21      	ldr	r1, [r4, #32]
 800ac86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac88:	4643      	mov	r3, r8
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b0      	blx	r6
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dc06      	bgt.n	800aca2 <__sflush_r+0xfe>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aca0:	e78e      	b.n	800abc0 <__sflush_r+0x1c>
 800aca2:	4407      	add	r7, r0
 800aca4:	eba8 0800 	sub.w	r8, r8, r0
 800aca8:	e7e9      	b.n	800ac7e <__sflush_r+0xda>
 800acaa:	bf00      	nop
 800acac:	20400001 	.word	0x20400001

0800acb0 <_fflush_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	690b      	ldr	r3, [r1, #16]
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b913      	cbnz	r3, 800acc0 <_fflush_r+0x10>
 800acba:	2500      	movs	r5, #0
 800acbc:	4628      	mov	r0, r5
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	b118      	cbz	r0, 800acca <_fflush_r+0x1a>
 800acc2:	6983      	ldr	r3, [r0, #24]
 800acc4:	b90b      	cbnz	r3, 800acca <_fflush_r+0x1a>
 800acc6:	f7fe f9d9 	bl	800907c <__sinit>
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <_fflush_r+0x6c>)
 800accc:	429c      	cmp	r4, r3
 800acce:	d11b      	bne.n	800ad08 <_fflush_r+0x58>
 800acd0:	686c      	ldr	r4, [r5, #4]
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ef      	beq.n	800acba <_fflush_r+0xa>
 800acda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acdc:	07d0      	lsls	r0, r2, #31
 800acde:	d404      	bmi.n	800acea <_fflush_r+0x3a>
 800ace0:	0599      	lsls	r1, r3, #22
 800ace2:	d402      	bmi.n	800acea <_fflush_r+0x3a>
 800ace4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ace6:	f7fe fa8c 	bl	8009202 <__retarget_lock_acquire_recursive>
 800acea:	4628      	mov	r0, r5
 800acec:	4621      	mov	r1, r4
 800acee:	f7ff ff59 	bl	800aba4 <__sflush_r>
 800acf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acf4:	07da      	lsls	r2, r3, #31
 800acf6:	4605      	mov	r5, r0
 800acf8:	d4e0      	bmi.n	800acbc <_fflush_r+0xc>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	059b      	lsls	r3, r3, #22
 800acfe:	d4dd      	bmi.n	800acbc <_fflush_r+0xc>
 800ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad02:	f7fe fa7f 	bl	8009204 <__retarget_lock_release_recursive>
 800ad06:	e7d9      	b.n	800acbc <_fflush_r+0xc>
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <_fflush_r+0x70>)
 800ad0a:	429c      	cmp	r4, r3
 800ad0c:	d101      	bne.n	800ad12 <_fflush_r+0x62>
 800ad0e:	68ac      	ldr	r4, [r5, #8]
 800ad10:	e7df      	b.n	800acd2 <_fflush_r+0x22>
 800ad12:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <_fflush_r+0x74>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	bf08      	it	eq
 800ad18:	68ec      	ldreq	r4, [r5, #12]
 800ad1a:	e7da      	b.n	800acd2 <_fflush_r+0x22>
 800ad1c:	0800bd88 	.word	0x0800bd88
 800ad20:	0800bda8 	.word	0x0800bda8
 800ad24:	0800bd68 	.word	0x0800bd68

0800ad28 <_localeconv_r>:
 800ad28:	4800      	ldr	r0, [pc, #0]	; (800ad2c <_localeconv_r+0x4>)
 800ad2a:	4770      	bx	lr
 800ad2c:	24000168 	.word	0x24000168

0800ad30 <_lseek_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d07      	ldr	r5, [pc, #28]	; (800ad50 <_lseek_r+0x20>)
 800ad34:	4604      	mov	r4, r0
 800ad36:	4608      	mov	r0, r1
 800ad38:	4611      	mov	r1, r2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	602a      	str	r2, [r5, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7f6 fd9e 	bl	8001880 <_lseek>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_lseek_r+0x1e>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_lseek_r+0x1e>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	24004a18 	.word	0x24004a18

0800ad54 <__swhatbuf_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	460e      	mov	r6, r1
 800ad58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	b096      	sub	sp, #88	; 0x58
 800ad60:	4614      	mov	r4, r2
 800ad62:	461d      	mov	r5, r3
 800ad64:	da08      	bge.n	800ad78 <__swhatbuf_r+0x24>
 800ad66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	061a      	lsls	r2, r3, #24
 800ad70:	d410      	bmi.n	800ad94 <__swhatbuf_r+0x40>
 800ad72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad76:	e00e      	b.n	800ad96 <__swhatbuf_r+0x42>
 800ad78:	466a      	mov	r2, sp
 800ad7a:	f000 fde7 	bl	800b94c <_fstat_r>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	dbf1      	blt.n	800ad66 <__swhatbuf_r+0x12>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad8c:	425a      	negs	r2, r3
 800ad8e:	415a      	adcs	r2, r3
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	e7ee      	b.n	800ad72 <__swhatbuf_r+0x1e>
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	2000      	movs	r0, #0
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	b016      	add	sp, #88	; 0x58
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ada0 <__smakebuf_r>:
 800ada0:	898b      	ldrh	r3, [r1, #12]
 800ada2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada4:	079d      	lsls	r5, r3, #30
 800ada6:	4606      	mov	r6, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d507      	bpl.n	800adbc <__smakebuf_r+0x1c>
 800adac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	2301      	movs	r3, #1
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	b002      	add	sp, #8
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	ab01      	add	r3, sp, #4
 800adbe:	466a      	mov	r2, sp
 800adc0:	f7ff ffc8 	bl	800ad54 <__swhatbuf_r>
 800adc4:	9900      	ldr	r1, [sp, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	4630      	mov	r0, r6
 800adca:	f7fe fa53 	bl	8009274 <_malloc_r>
 800adce:	b948      	cbnz	r0, 800ade4 <__smakebuf_r+0x44>
 800add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add4:	059a      	lsls	r2, r3, #22
 800add6:	d4ef      	bmi.n	800adb8 <__smakebuf_r+0x18>
 800add8:	f023 0303 	bic.w	r3, r3, #3
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7e3      	b.n	800adac <__smakebuf_r+0xc>
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <__smakebuf_r+0x7c>)
 800ade6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	9b00      	ldr	r3, [sp, #0]
 800adf4:	6163      	str	r3, [r4, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	6120      	str	r0, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x74>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 fdb5 	bl	800b970 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x74>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a0      	ldrh	r0, [r4, #12]
 800ae16:	4305      	orrs	r5, r0
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cd      	b.n	800adb8 <__smakebuf_r+0x18>
 800ae1c:	08009015 	.word	0x08009015

0800ae20 <malloc>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <malloc+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f7fe ba25 	b.w	8009274 <_malloc_r>
 800ae2a:	bf00      	nop
 800ae2c:	24000014 	.word	0x24000014

0800ae30 <__malloc_lock>:
 800ae30:	4801      	ldr	r0, [pc, #4]	; (800ae38 <__malloc_lock+0x8>)
 800ae32:	f7fe b9e6 	b.w	8009202 <__retarget_lock_acquire_recursive>
 800ae36:	bf00      	nop
 800ae38:	24004a0c 	.word	0x24004a0c

0800ae3c <__malloc_unlock>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	; (800ae44 <__malloc_unlock+0x8>)
 800ae3e:	f7fe b9e1 	b.w	8009204 <__retarget_lock_release_recursive>
 800ae42:	bf00      	nop
 800ae44:	24004a0c 	.word	0x24004a0c

0800ae48 <_Balloc>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	b976      	cbnz	r6, 800ae70 <_Balloc+0x28>
 800ae52:	2010      	movs	r0, #16
 800ae54:	f7ff ffe4 	bl	800ae20 <malloc>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae5c:	b920      	cbnz	r0, 800ae68 <_Balloc+0x20>
 800ae5e:	4b18      	ldr	r3, [pc, #96]	; (800aec0 <_Balloc+0x78>)
 800ae60:	4818      	ldr	r0, [pc, #96]	; (800aec4 <_Balloc+0x7c>)
 800ae62:	2166      	movs	r1, #102	; 0x66
 800ae64:	f000 fd42 	bl	800b8ec <__assert_func>
 800ae68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae6c:	6006      	str	r6, [r0, #0]
 800ae6e:	60c6      	str	r6, [r0, #12]
 800ae70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae72:	68f3      	ldr	r3, [r6, #12]
 800ae74:	b183      	cbz	r3, 800ae98 <_Balloc+0x50>
 800ae76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae7e:	b9b8      	cbnz	r0, 800aeb0 <_Balloc+0x68>
 800ae80:	2101      	movs	r1, #1
 800ae82:	fa01 f605 	lsl.w	r6, r1, r5
 800ae86:	1d72      	adds	r2, r6, #5
 800ae88:	0092      	lsls	r2, r2, #2
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 fb60 	bl	800b550 <_calloc_r>
 800ae90:	b160      	cbz	r0, 800aeac <_Balloc+0x64>
 800ae92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae96:	e00e      	b.n	800aeb6 <_Balloc+0x6e>
 800ae98:	2221      	movs	r2, #33	; 0x21
 800ae9a:	2104      	movs	r1, #4
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 fb57 	bl	800b550 <_calloc_r>
 800aea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea4:	60f0      	str	r0, [r6, #12]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e4      	bne.n	800ae76 <_Balloc+0x2e>
 800aeac:	2000      	movs	r0, #0
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	6802      	ldr	r2, [r0, #0]
 800aeb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aebc:	e7f7      	b.n	800aeae <_Balloc+0x66>
 800aebe:	bf00      	nop
 800aec0:	0800be0d 	.word	0x0800be0d
 800aec4:	0800be90 	.word	0x0800be90

0800aec8 <_Bfree>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aecc:	4605      	mov	r5, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	b976      	cbnz	r6, 800aef0 <_Bfree+0x28>
 800aed2:	2010      	movs	r0, #16
 800aed4:	f7ff ffa4 	bl	800ae20 <malloc>
 800aed8:	4602      	mov	r2, r0
 800aeda:	6268      	str	r0, [r5, #36]	; 0x24
 800aedc:	b920      	cbnz	r0, 800aee8 <_Bfree+0x20>
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <_Bfree+0x3c>)
 800aee0:	4809      	ldr	r0, [pc, #36]	; (800af08 <_Bfree+0x40>)
 800aee2:	218a      	movs	r1, #138	; 0x8a
 800aee4:	f000 fd02 	bl	800b8ec <__assert_func>
 800aee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeec:	6006      	str	r6, [r0, #0]
 800aeee:	60c6      	str	r6, [r0, #12]
 800aef0:	b13c      	cbz	r4, 800af02 <_Bfree+0x3a>
 800aef2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aef4:	6862      	ldr	r2, [r4, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aefc:	6021      	str	r1, [r4, #0]
 800aefe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	0800be0d 	.word	0x0800be0d
 800af08:	0800be90 	.word	0x0800be90

0800af0c <__multadd>:
 800af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	690d      	ldr	r5, [r1, #16]
 800af12:	4607      	mov	r7, r0
 800af14:	460c      	mov	r4, r1
 800af16:	461e      	mov	r6, r3
 800af18:	f101 0c14 	add.w	ip, r1, #20
 800af1c:	2000      	movs	r0, #0
 800af1e:	f8dc 3000 	ldr.w	r3, [ip]
 800af22:	b299      	uxth	r1, r3
 800af24:	fb02 6101 	mla	r1, r2, r1, r6
 800af28:	0c1e      	lsrs	r6, r3, #16
 800af2a:	0c0b      	lsrs	r3, r1, #16
 800af2c:	fb02 3306 	mla	r3, r2, r6, r3
 800af30:	b289      	uxth	r1, r1
 800af32:	3001      	adds	r0, #1
 800af34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af38:	4285      	cmp	r5, r0
 800af3a:	f84c 1b04 	str.w	r1, [ip], #4
 800af3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af42:	dcec      	bgt.n	800af1e <__multadd+0x12>
 800af44:	b30e      	cbz	r6, 800af8a <__multadd+0x7e>
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	42ab      	cmp	r3, r5
 800af4a:	dc19      	bgt.n	800af80 <__multadd+0x74>
 800af4c:	6861      	ldr	r1, [r4, #4]
 800af4e:	4638      	mov	r0, r7
 800af50:	3101      	adds	r1, #1
 800af52:	f7ff ff79 	bl	800ae48 <_Balloc>
 800af56:	4680      	mov	r8, r0
 800af58:	b928      	cbnz	r0, 800af66 <__multadd+0x5a>
 800af5a:	4602      	mov	r2, r0
 800af5c:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <__multadd+0x84>)
 800af5e:	480d      	ldr	r0, [pc, #52]	; (800af94 <__multadd+0x88>)
 800af60:	21b5      	movs	r1, #181	; 0xb5
 800af62:	f000 fcc3 	bl	800b8ec <__assert_func>
 800af66:	6922      	ldr	r2, [r4, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	f104 010c 	add.w	r1, r4, #12
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	300c      	adds	r0, #12
 800af72:	f7fe f948 	bl	8009206 <memcpy>
 800af76:	4621      	mov	r1, r4
 800af78:	4638      	mov	r0, r7
 800af7a:	f7ff ffa5 	bl	800aec8 <_Bfree>
 800af7e:	4644      	mov	r4, r8
 800af80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af84:	3501      	adds	r5, #1
 800af86:	615e      	str	r6, [r3, #20]
 800af88:	6125      	str	r5, [r4, #16]
 800af8a:	4620      	mov	r0, r4
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	0800be7f 	.word	0x0800be7f
 800af94:	0800be90 	.word	0x0800be90

0800af98 <__hi0bits>:
 800af98:	0c03      	lsrs	r3, r0, #16
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	b9d3      	cbnz	r3, 800afd4 <__hi0bits+0x3c>
 800af9e:	0400      	lsls	r0, r0, #16
 800afa0:	2310      	movs	r3, #16
 800afa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afa6:	bf04      	itt	eq
 800afa8:	0200      	lsleq	r0, r0, #8
 800afaa:	3308      	addeq	r3, #8
 800afac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afb0:	bf04      	itt	eq
 800afb2:	0100      	lsleq	r0, r0, #4
 800afb4:	3304      	addeq	r3, #4
 800afb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afba:	bf04      	itt	eq
 800afbc:	0080      	lsleq	r0, r0, #2
 800afbe:	3302      	addeq	r3, #2
 800afc0:	2800      	cmp	r0, #0
 800afc2:	db05      	blt.n	800afd0 <__hi0bits+0x38>
 800afc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afc8:	f103 0301 	add.w	r3, r3, #1
 800afcc:	bf08      	it	eq
 800afce:	2320      	moveq	r3, #32
 800afd0:	4618      	mov	r0, r3
 800afd2:	4770      	bx	lr
 800afd4:	2300      	movs	r3, #0
 800afd6:	e7e4      	b.n	800afa2 <__hi0bits+0xa>

0800afd8 <__lo0bits>:
 800afd8:	6803      	ldr	r3, [r0, #0]
 800afda:	f013 0207 	ands.w	r2, r3, #7
 800afde:	4601      	mov	r1, r0
 800afe0:	d00b      	beq.n	800affa <__lo0bits+0x22>
 800afe2:	07da      	lsls	r2, r3, #31
 800afe4:	d423      	bmi.n	800b02e <__lo0bits+0x56>
 800afe6:	0798      	lsls	r0, r3, #30
 800afe8:	bf49      	itett	mi
 800afea:	085b      	lsrmi	r3, r3, #1
 800afec:	089b      	lsrpl	r3, r3, #2
 800afee:	2001      	movmi	r0, #1
 800aff0:	600b      	strmi	r3, [r1, #0]
 800aff2:	bf5c      	itt	pl
 800aff4:	600b      	strpl	r3, [r1, #0]
 800aff6:	2002      	movpl	r0, #2
 800aff8:	4770      	bx	lr
 800affa:	b298      	uxth	r0, r3
 800affc:	b9a8      	cbnz	r0, 800b02a <__lo0bits+0x52>
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	2010      	movs	r0, #16
 800b002:	b2da      	uxtb	r2, r3
 800b004:	b90a      	cbnz	r2, 800b00a <__lo0bits+0x32>
 800b006:	3008      	adds	r0, #8
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	071a      	lsls	r2, r3, #28
 800b00c:	bf04      	itt	eq
 800b00e:	091b      	lsreq	r3, r3, #4
 800b010:	3004      	addeq	r0, #4
 800b012:	079a      	lsls	r2, r3, #30
 800b014:	bf04      	itt	eq
 800b016:	089b      	lsreq	r3, r3, #2
 800b018:	3002      	addeq	r0, #2
 800b01a:	07da      	lsls	r2, r3, #31
 800b01c:	d403      	bmi.n	800b026 <__lo0bits+0x4e>
 800b01e:	085b      	lsrs	r3, r3, #1
 800b020:	f100 0001 	add.w	r0, r0, #1
 800b024:	d005      	beq.n	800b032 <__lo0bits+0x5a>
 800b026:	600b      	str	r3, [r1, #0]
 800b028:	4770      	bx	lr
 800b02a:	4610      	mov	r0, r2
 800b02c:	e7e9      	b.n	800b002 <__lo0bits+0x2a>
 800b02e:	2000      	movs	r0, #0
 800b030:	4770      	bx	lr
 800b032:	2020      	movs	r0, #32
 800b034:	4770      	bx	lr
	...

0800b038 <__i2b>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	460c      	mov	r4, r1
 800b03c:	2101      	movs	r1, #1
 800b03e:	f7ff ff03 	bl	800ae48 <_Balloc>
 800b042:	4602      	mov	r2, r0
 800b044:	b928      	cbnz	r0, 800b052 <__i2b+0x1a>
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <__i2b+0x24>)
 800b048:	4805      	ldr	r0, [pc, #20]	; (800b060 <__i2b+0x28>)
 800b04a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b04e:	f000 fc4d 	bl	800b8ec <__assert_func>
 800b052:	2301      	movs	r3, #1
 800b054:	6144      	str	r4, [r0, #20]
 800b056:	6103      	str	r3, [r0, #16]
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	0800be7f 	.word	0x0800be7f
 800b060:	0800be90 	.word	0x0800be90

0800b064 <__multiply>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	4691      	mov	r9, r2
 800b06a:	690a      	ldr	r2, [r1, #16]
 800b06c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	bfb8      	it	lt
 800b074:	460b      	movlt	r3, r1
 800b076:	460c      	mov	r4, r1
 800b078:	bfbc      	itt	lt
 800b07a:	464c      	movlt	r4, r9
 800b07c:	4699      	movlt	r9, r3
 800b07e:	6927      	ldr	r7, [r4, #16]
 800b080:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	6861      	ldr	r1, [r4, #4]
 800b088:	eb07 060a 	add.w	r6, r7, sl
 800b08c:	42b3      	cmp	r3, r6
 800b08e:	b085      	sub	sp, #20
 800b090:	bfb8      	it	lt
 800b092:	3101      	addlt	r1, #1
 800b094:	f7ff fed8 	bl	800ae48 <_Balloc>
 800b098:	b930      	cbnz	r0, 800b0a8 <__multiply+0x44>
 800b09a:	4602      	mov	r2, r0
 800b09c:	4b44      	ldr	r3, [pc, #272]	; (800b1b0 <__multiply+0x14c>)
 800b09e:	4845      	ldr	r0, [pc, #276]	; (800b1b4 <__multiply+0x150>)
 800b0a0:	f240 115d 	movw	r1, #349	; 0x15d
 800b0a4:	f000 fc22 	bl	800b8ec <__assert_func>
 800b0a8:	f100 0514 	add.w	r5, r0, #20
 800b0ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4543      	cmp	r3, r8
 800b0b6:	d321      	bcc.n	800b0fc <__multiply+0x98>
 800b0b8:	f104 0314 	add.w	r3, r4, #20
 800b0bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0c0:	f109 0314 	add.w	r3, r9, #20
 800b0c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	1b3a      	subs	r2, r7, r4
 800b0cc:	3a15      	subs	r2, #21
 800b0ce:	f022 0203 	bic.w	r2, r2, #3
 800b0d2:	3204      	adds	r2, #4
 800b0d4:	f104 0115 	add.w	r1, r4, #21
 800b0d8:	428f      	cmp	r7, r1
 800b0da:	bf38      	it	cc
 800b0dc:	2204      	movcc	r2, #4
 800b0de:	9201      	str	r2, [sp, #4]
 800b0e0:	9a02      	ldr	r2, [sp, #8]
 800b0e2:	9303      	str	r3, [sp, #12]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d80c      	bhi.n	800b102 <__multiply+0x9e>
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	dd03      	ble.n	800b0f4 <__multiply+0x90>
 800b0ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d05a      	beq.n	800b1aa <__multiply+0x146>
 800b0f4:	6106      	str	r6, [r0, #16]
 800b0f6:	b005      	add	sp, #20
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	f843 2b04 	str.w	r2, [r3], #4
 800b100:	e7d8      	b.n	800b0b4 <__multiply+0x50>
 800b102:	f8b3 a000 	ldrh.w	sl, [r3]
 800b106:	f1ba 0f00 	cmp.w	sl, #0
 800b10a:	d024      	beq.n	800b156 <__multiply+0xf2>
 800b10c:	f104 0e14 	add.w	lr, r4, #20
 800b110:	46a9      	mov	r9, r5
 800b112:	f04f 0c00 	mov.w	ip, #0
 800b116:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b11a:	f8d9 1000 	ldr.w	r1, [r9]
 800b11e:	fa1f fb82 	uxth.w	fp, r2
 800b122:	b289      	uxth	r1, r1
 800b124:	fb0a 110b 	mla	r1, sl, fp, r1
 800b128:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b12c:	f8d9 2000 	ldr.w	r2, [r9]
 800b130:	4461      	add	r1, ip
 800b132:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b136:	fb0a c20b 	mla	r2, sl, fp, ip
 800b13a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b13e:	b289      	uxth	r1, r1
 800b140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b144:	4577      	cmp	r7, lr
 800b146:	f849 1b04 	str.w	r1, [r9], #4
 800b14a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b14e:	d8e2      	bhi.n	800b116 <__multiply+0xb2>
 800b150:	9a01      	ldr	r2, [sp, #4]
 800b152:	f845 c002 	str.w	ip, [r5, r2]
 800b156:	9a03      	ldr	r2, [sp, #12]
 800b158:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b15c:	3304      	adds	r3, #4
 800b15e:	f1b9 0f00 	cmp.w	r9, #0
 800b162:	d020      	beq.n	800b1a6 <__multiply+0x142>
 800b164:	6829      	ldr	r1, [r5, #0]
 800b166:	f104 0c14 	add.w	ip, r4, #20
 800b16a:	46ae      	mov	lr, r5
 800b16c:	f04f 0a00 	mov.w	sl, #0
 800b170:	f8bc b000 	ldrh.w	fp, [ip]
 800b174:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b178:	fb09 220b 	mla	r2, r9, fp, r2
 800b17c:	4492      	add	sl, r2
 800b17e:	b289      	uxth	r1, r1
 800b180:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b184:	f84e 1b04 	str.w	r1, [lr], #4
 800b188:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b18c:	f8be 1000 	ldrh.w	r1, [lr]
 800b190:	0c12      	lsrs	r2, r2, #16
 800b192:	fb09 1102 	mla	r1, r9, r2, r1
 800b196:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b19a:	4567      	cmp	r7, ip
 800b19c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1a0:	d8e6      	bhi.n	800b170 <__multiply+0x10c>
 800b1a2:	9a01      	ldr	r2, [sp, #4]
 800b1a4:	50a9      	str	r1, [r5, r2]
 800b1a6:	3504      	adds	r5, #4
 800b1a8:	e79a      	b.n	800b0e0 <__multiply+0x7c>
 800b1aa:	3e01      	subs	r6, #1
 800b1ac:	e79c      	b.n	800b0e8 <__multiply+0x84>
 800b1ae:	bf00      	nop
 800b1b0:	0800be7f 	.word	0x0800be7f
 800b1b4:	0800be90 	.word	0x0800be90

0800b1b8 <__pow5mult>:
 800b1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1bc:	4615      	mov	r5, r2
 800b1be:	f012 0203 	ands.w	r2, r2, #3
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	d007      	beq.n	800b1d8 <__pow5mult+0x20>
 800b1c8:	4c25      	ldr	r4, [pc, #148]	; (800b260 <__pow5mult+0xa8>)
 800b1ca:	3a01      	subs	r2, #1
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1d2:	f7ff fe9b 	bl	800af0c <__multadd>
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	10ad      	asrs	r5, r5, #2
 800b1da:	d03d      	beq.n	800b258 <__pow5mult+0xa0>
 800b1dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1de:	b97c      	cbnz	r4, 800b200 <__pow5mult+0x48>
 800b1e0:	2010      	movs	r0, #16
 800b1e2:	f7ff fe1d 	bl	800ae20 <malloc>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ea:	b928      	cbnz	r0, 800b1f8 <__pow5mult+0x40>
 800b1ec:	4b1d      	ldr	r3, [pc, #116]	; (800b264 <__pow5mult+0xac>)
 800b1ee:	481e      	ldr	r0, [pc, #120]	; (800b268 <__pow5mult+0xb0>)
 800b1f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1f4:	f000 fb7a 	bl	800b8ec <__assert_func>
 800b1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1fc:	6004      	str	r4, [r0, #0]
 800b1fe:	60c4      	str	r4, [r0, #12]
 800b200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b208:	b94c      	cbnz	r4, 800b21e <__pow5mult+0x66>
 800b20a:	f240 2171 	movw	r1, #625	; 0x271
 800b20e:	4630      	mov	r0, r6
 800b210:	f7ff ff12 	bl	800b038 <__i2b>
 800b214:	2300      	movs	r3, #0
 800b216:	f8c8 0008 	str.w	r0, [r8, #8]
 800b21a:	4604      	mov	r4, r0
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	f04f 0900 	mov.w	r9, #0
 800b222:	07eb      	lsls	r3, r5, #31
 800b224:	d50a      	bpl.n	800b23c <__pow5mult+0x84>
 800b226:	4639      	mov	r1, r7
 800b228:	4622      	mov	r2, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff ff1a 	bl	800b064 <__multiply>
 800b230:	4639      	mov	r1, r7
 800b232:	4680      	mov	r8, r0
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff fe47 	bl	800aec8 <_Bfree>
 800b23a:	4647      	mov	r7, r8
 800b23c:	106d      	asrs	r5, r5, #1
 800b23e:	d00b      	beq.n	800b258 <__pow5mult+0xa0>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	b938      	cbnz	r0, 800b254 <__pow5mult+0x9c>
 800b244:	4622      	mov	r2, r4
 800b246:	4621      	mov	r1, r4
 800b248:	4630      	mov	r0, r6
 800b24a:	f7ff ff0b 	bl	800b064 <__multiply>
 800b24e:	6020      	str	r0, [r4, #0]
 800b250:	f8c0 9000 	str.w	r9, [r0]
 800b254:	4604      	mov	r4, r0
 800b256:	e7e4      	b.n	800b222 <__pow5mult+0x6a>
 800b258:	4638      	mov	r0, r7
 800b25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25e:	bf00      	nop
 800b260:	0800bfe0 	.word	0x0800bfe0
 800b264:	0800be0d 	.word	0x0800be0d
 800b268:	0800be90 	.word	0x0800be90

0800b26c <__lshift>:
 800b26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b270:	460c      	mov	r4, r1
 800b272:	6849      	ldr	r1, [r1, #4]
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b27a:	68a3      	ldr	r3, [r4, #8]
 800b27c:	4607      	mov	r7, r0
 800b27e:	4691      	mov	r9, r2
 800b280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b284:	f108 0601 	add.w	r6, r8, #1
 800b288:	42b3      	cmp	r3, r6
 800b28a:	db0b      	blt.n	800b2a4 <__lshift+0x38>
 800b28c:	4638      	mov	r0, r7
 800b28e:	f7ff fddb 	bl	800ae48 <_Balloc>
 800b292:	4605      	mov	r5, r0
 800b294:	b948      	cbnz	r0, 800b2aa <__lshift+0x3e>
 800b296:	4602      	mov	r2, r0
 800b298:	4b2a      	ldr	r3, [pc, #168]	; (800b344 <__lshift+0xd8>)
 800b29a:	482b      	ldr	r0, [pc, #172]	; (800b348 <__lshift+0xdc>)
 800b29c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2a0:	f000 fb24 	bl	800b8ec <__assert_func>
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	e7ee      	b.n	800b288 <__lshift+0x1c>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f100 0114 	add.w	r1, r0, #20
 800b2b0:	f100 0210 	add.w	r2, r0, #16
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	4553      	cmp	r3, sl
 800b2b8:	db37      	blt.n	800b32a <__lshift+0xbe>
 800b2ba:	6920      	ldr	r0, [r4, #16]
 800b2bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2c0:	f104 0314 	add.w	r3, r4, #20
 800b2c4:	f019 091f 	ands.w	r9, r9, #31
 800b2c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2d0:	d02f      	beq.n	800b332 <__lshift+0xc6>
 800b2d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2d6:	468a      	mov	sl, r1
 800b2d8:	f04f 0c00 	mov.w	ip, #0
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	fa02 f209 	lsl.w	r2, r2, r9
 800b2e2:	ea42 020c 	orr.w	r2, r2, ip
 800b2e6:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	4298      	cmp	r0, r3
 800b2f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2f4:	d8f2      	bhi.n	800b2dc <__lshift+0x70>
 800b2f6:	1b03      	subs	r3, r0, r4
 800b2f8:	3b15      	subs	r3, #21
 800b2fa:	f023 0303 	bic.w	r3, r3, #3
 800b2fe:	3304      	adds	r3, #4
 800b300:	f104 0215 	add.w	r2, r4, #21
 800b304:	4290      	cmp	r0, r2
 800b306:	bf38      	it	cc
 800b308:	2304      	movcc	r3, #4
 800b30a:	f841 c003 	str.w	ip, [r1, r3]
 800b30e:	f1bc 0f00 	cmp.w	ip, #0
 800b312:	d001      	beq.n	800b318 <__lshift+0xac>
 800b314:	f108 0602 	add.w	r6, r8, #2
 800b318:	3e01      	subs	r6, #1
 800b31a:	4638      	mov	r0, r7
 800b31c:	612e      	str	r6, [r5, #16]
 800b31e:	4621      	mov	r1, r4
 800b320:	f7ff fdd2 	bl	800aec8 <_Bfree>
 800b324:	4628      	mov	r0, r5
 800b326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b32e:	3301      	adds	r3, #1
 800b330:	e7c1      	b.n	800b2b6 <__lshift+0x4a>
 800b332:	3904      	subs	r1, #4
 800b334:	f853 2b04 	ldr.w	r2, [r3], #4
 800b338:	f841 2f04 	str.w	r2, [r1, #4]!
 800b33c:	4298      	cmp	r0, r3
 800b33e:	d8f9      	bhi.n	800b334 <__lshift+0xc8>
 800b340:	e7ea      	b.n	800b318 <__lshift+0xac>
 800b342:	bf00      	nop
 800b344:	0800be7f 	.word	0x0800be7f
 800b348:	0800be90 	.word	0x0800be90

0800b34c <__mcmp>:
 800b34c:	b530      	push	{r4, r5, lr}
 800b34e:	6902      	ldr	r2, [r0, #16]
 800b350:	690c      	ldr	r4, [r1, #16]
 800b352:	1b12      	subs	r2, r2, r4
 800b354:	d10e      	bne.n	800b374 <__mcmp+0x28>
 800b356:	f100 0314 	add.w	r3, r0, #20
 800b35a:	3114      	adds	r1, #20
 800b35c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b36c:	42a5      	cmp	r5, r4
 800b36e:	d003      	beq.n	800b378 <__mcmp+0x2c>
 800b370:	d305      	bcc.n	800b37e <__mcmp+0x32>
 800b372:	2201      	movs	r2, #1
 800b374:	4610      	mov	r0, r2
 800b376:	bd30      	pop	{r4, r5, pc}
 800b378:	4283      	cmp	r3, r0
 800b37a:	d3f3      	bcc.n	800b364 <__mcmp+0x18>
 800b37c:	e7fa      	b.n	800b374 <__mcmp+0x28>
 800b37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b382:	e7f7      	b.n	800b374 <__mcmp+0x28>

0800b384 <__mdiff>:
 800b384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	4606      	mov	r6, r0
 800b38c:	4611      	mov	r1, r2
 800b38e:	4620      	mov	r0, r4
 800b390:	4690      	mov	r8, r2
 800b392:	f7ff ffdb 	bl	800b34c <__mcmp>
 800b396:	1e05      	subs	r5, r0, #0
 800b398:	d110      	bne.n	800b3bc <__mdiff+0x38>
 800b39a:	4629      	mov	r1, r5
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff fd53 	bl	800ae48 <_Balloc>
 800b3a2:	b930      	cbnz	r0, 800b3b2 <__mdiff+0x2e>
 800b3a4:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <__mdiff+0x10c>)
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	f240 2132 	movw	r1, #562	; 0x232
 800b3ac:	4839      	ldr	r0, [pc, #228]	; (800b494 <__mdiff+0x110>)
 800b3ae:	f000 fa9d 	bl	800b8ec <__assert_func>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	bfa4      	itt	ge
 800b3be:	4643      	movge	r3, r8
 800b3c0:	46a0      	movge	r8, r4
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3c8:	bfa6      	itte	ge
 800b3ca:	461c      	movge	r4, r3
 800b3cc:	2500      	movge	r5, #0
 800b3ce:	2501      	movlt	r5, #1
 800b3d0:	f7ff fd3a 	bl	800ae48 <_Balloc>
 800b3d4:	b920      	cbnz	r0, 800b3e0 <__mdiff+0x5c>
 800b3d6:	4b2e      	ldr	r3, [pc, #184]	; (800b490 <__mdiff+0x10c>)
 800b3d8:	4602      	mov	r2, r0
 800b3da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3de:	e7e5      	b.n	800b3ac <__mdiff+0x28>
 800b3e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3e4:	6926      	ldr	r6, [r4, #16]
 800b3e6:	60c5      	str	r5, [r0, #12]
 800b3e8:	f104 0914 	add.w	r9, r4, #20
 800b3ec:	f108 0514 	add.w	r5, r8, #20
 800b3f0:	f100 0e14 	add.w	lr, r0, #20
 800b3f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3fc:	f108 0210 	add.w	r2, r8, #16
 800b400:	46f2      	mov	sl, lr
 800b402:	2100      	movs	r1, #0
 800b404:	f859 3b04 	ldr.w	r3, [r9], #4
 800b408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b40c:	fa1f f883 	uxth.w	r8, r3
 800b410:	fa11 f18b 	uxtah	r1, r1, fp
 800b414:	0c1b      	lsrs	r3, r3, #16
 800b416:	eba1 0808 	sub.w	r8, r1, r8
 800b41a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b41e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b422:	fa1f f888 	uxth.w	r8, r8
 800b426:	1419      	asrs	r1, r3, #16
 800b428:	454e      	cmp	r6, r9
 800b42a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b42e:	f84a 3b04 	str.w	r3, [sl], #4
 800b432:	d8e7      	bhi.n	800b404 <__mdiff+0x80>
 800b434:	1b33      	subs	r3, r6, r4
 800b436:	3b15      	subs	r3, #21
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	3304      	adds	r3, #4
 800b43e:	3415      	adds	r4, #21
 800b440:	42a6      	cmp	r6, r4
 800b442:	bf38      	it	cc
 800b444:	2304      	movcc	r3, #4
 800b446:	441d      	add	r5, r3
 800b448:	4473      	add	r3, lr
 800b44a:	469e      	mov	lr, r3
 800b44c:	462e      	mov	r6, r5
 800b44e:	4566      	cmp	r6, ip
 800b450:	d30e      	bcc.n	800b470 <__mdiff+0xec>
 800b452:	f10c 0203 	add.w	r2, ip, #3
 800b456:	1b52      	subs	r2, r2, r5
 800b458:	f022 0203 	bic.w	r2, r2, #3
 800b45c:	3d03      	subs	r5, #3
 800b45e:	45ac      	cmp	ip, r5
 800b460:	bf38      	it	cc
 800b462:	2200      	movcc	r2, #0
 800b464:	441a      	add	r2, r3
 800b466:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b46a:	b17b      	cbz	r3, 800b48c <__mdiff+0x108>
 800b46c:	6107      	str	r7, [r0, #16]
 800b46e:	e7a3      	b.n	800b3b8 <__mdiff+0x34>
 800b470:	f856 8b04 	ldr.w	r8, [r6], #4
 800b474:	fa11 f288 	uxtah	r2, r1, r8
 800b478:	1414      	asrs	r4, r2, #16
 800b47a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b47e:	b292      	uxth	r2, r2
 800b480:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b484:	f84e 2b04 	str.w	r2, [lr], #4
 800b488:	1421      	asrs	r1, r4, #16
 800b48a:	e7e0      	b.n	800b44e <__mdiff+0xca>
 800b48c:	3f01      	subs	r7, #1
 800b48e:	e7ea      	b.n	800b466 <__mdiff+0xe2>
 800b490:	0800be7f 	.word	0x0800be7f
 800b494:	0800be90 	.word	0x0800be90

0800b498 <__d2b>:
 800b498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b49c:	4689      	mov	r9, r1
 800b49e:	2101      	movs	r1, #1
 800b4a0:	ec57 6b10 	vmov	r6, r7, d0
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	f7ff fccf 	bl	800ae48 <_Balloc>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	b930      	cbnz	r0, 800b4bc <__d2b+0x24>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	4b25      	ldr	r3, [pc, #148]	; (800b548 <__d2b+0xb0>)
 800b4b2:	4826      	ldr	r0, [pc, #152]	; (800b54c <__d2b+0xb4>)
 800b4b4:	f240 310a 	movw	r1, #778	; 0x30a
 800b4b8:	f000 fa18 	bl	800b8ec <__assert_func>
 800b4bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4c4:	bb35      	cbnz	r5, 800b514 <__d2b+0x7c>
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	d028      	beq.n	800b51e <__d2b+0x86>
 800b4cc:	4668      	mov	r0, sp
 800b4ce:	9600      	str	r6, [sp, #0]
 800b4d0:	f7ff fd82 	bl	800afd8 <__lo0bits>
 800b4d4:	9900      	ldr	r1, [sp, #0]
 800b4d6:	b300      	cbz	r0, 800b51a <__d2b+0x82>
 800b4d8:	9a01      	ldr	r2, [sp, #4]
 800b4da:	f1c0 0320 	rsb	r3, r0, #32
 800b4de:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	40c2      	lsrs	r2, r0
 800b4e6:	6163      	str	r3, [r4, #20]
 800b4e8:	9201      	str	r2, [sp, #4]
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	61a3      	str	r3, [r4, #24]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bf14      	ite	ne
 800b4f2:	2202      	movne	r2, #2
 800b4f4:	2201      	moveq	r2, #1
 800b4f6:	6122      	str	r2, [r4, #16]
 800b4f8:	b1d5      	cbz	r5, 800b530 <__d2b+0x98>
 800b4fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4fe:	4405      	add	r5, r0
 800b500:	f8c9 5000 	str.w	r5, [r9]
 800b504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b508:	f8c8 0000 	str.w	r0, [r8]
 800b50c:	4620      	mov	r0, r4
 800b50e:	b003      	add	sp, #12
 800b510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b518:	e7d5      	b.n	800b4c6 <__d2b+0x2e>
 800b51a:	6161      	str	r1, [r4, #20]
 800b51c:	e7e5      	b.n	800b4ea <__d2b+0x52>
 800b51e:	a801      	add	r0, sp, #4
 800b520:	f7ff fd5a 	bl	800afd8 <__lo0bits>
 800b524:	9b01      	ldr	r3, [sp, #4]
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	2201      	movs	r2, #1
 800b52a:	6122      	str	r2, [r4, #16]
 800b52c:	3020      	adds	r0, #32
 800b52e:	e7e3      	b.n	800b4f8 <__d2b+0x60>
 800b530:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b534:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b538:	f8c9 0000 	str.w	r0, [r9]
 800b53c:	6918      	ldr	r0, [r3, #16]
 800b53e:	f7ff fd2b 	bl	800af98 <__hi0bits>
 800b542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b546:	e7df      	b.n	800b508 <__d2b+0x70>
 800b548:	0800be7f 	.word	0x0800be7f
 800b54c:	0800be90 	.word	0x0800be90

0800b550 <_calloc_r>:
 800b550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b552:	fba1 2402 	umull	r2, r4, r1, r2
 800b556:	b94c      	cbnz	r4, 800b56c <_calloc_r+0x1c>
 800b558:	4611      	mov	r1, r2
 800b55a:	9201      	str	r2, [sp, #4]
 800b55c:	f7fd fe8a 	bl	8009274 <_malloc_r>
 800b560:	9a01      	ldr	r2, [sp, #4]
 800b562:	4605      	mov	r5, r0
 800b564:	b930      	cbnz	r0, 800b574 <_calloc_r+0x24>
 800b566:	4628      	mov	r0, r5
 800b568:	b003      	add	sp, #12
 800b56a:	bd30      	pop	{r4, r5, pc}
 800b56c:	220c      	movs	r2, #12
 800b56e:	6002      	str	r2, [r0, #0]
 800b570:	2500      	movs	r5, #0
 800b572:	e7f8      	b.n	800b566 <_calloc_r+0x16>
 800b574:	4621      	mov	r1, r4
 800b576:	f7fd fe54 	bl	8009222 <memset>
 800b57a:	e7f4      	b.n	800b566 <_calloc_r+0x16>

0800b57c <_free_r>:
 800b57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b57e:	2900      	cmp	r1, #0
 800b580:	d044      	beq.n	800b60c <_free_r+0x90>
 800b582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b586:	9001      	str	r0, [sp, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f1a1 0404 	sub.w	r4, r1, #4
 800b58e:	bfb8      	it	lt
 800b590:	18e4      	addlt	r4, r4, r3
 800b592:	f7ff fc4d 	bl	800ae30 <__malloc_lock>
 800b596:	4a1e      	ldr	r2, [pc, #120]	; (800b610 <_free_r+0x94>)
 800b598:	9801      	ldr	r0, [sp, #4]
 800b59a:	6813      	ldr	r3, [r2, #0]
 800b59c:	b933      	cbnz	r3, 800b5ac <_free_r+0x30>
 800b59e:	6063      	str	r3, [r4, #4]
 800b5a0:	6014      	str	r4, [r2, #0]
 800b5a2:	b003      	add	sp, #12
 800b5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5a8:	f7ff bc48 	b.w	800ae3c <__malloc_unlock>
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	d908      	bls.n	800b5c2 <_free_r+0x46>
 800b5b0:	6825      	ldr	r5, [r4, #0]
 800b5b2:	1961      	adds	r1, r4, r5
 800b5b4:	428b      	cmp	r3, r1
 800b5b6:	bf01      	itttt	eq
 800b5b8:	6819      	ldreq	r1, [r3, #0]
 800b5ba:	685b      	ldreq	r3, [r3, #4]
 800b5bc:	1949      	addeq	r1, r1, r5
 800b5be:	6021      	streq	r1, [r4, #0]
 800b5c0:	e7ed      	b.n	800b59e <_free_r+0x22>
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	b10b      	cbz	r3, 800b5cc <_free_r+0x50>
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	d9fa      	bls.n	800b5c2 <_free_r+0x46>
 800b5cc:	6811      	ldr	r1, [r2, #0]
 800b5ce:	1855      	adds	r5, r2, r1
 800b5d0:	42a5      	cmp	r5, r4
 800b5d2:	d10b      	bne.n	800b5ec <_free_r+0x70>
 800b5d4:	6824      	ldr	r4, [r4, #0]
 800b5d6:	4421      	add	r1, r4
 800b5d8:	1854      	adds	r4, r2, r1
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	6011      	str	r1, [r2, #0]
 800b5de:	d1e0      	bne.n	800b5a2 <_free_r+0x26>
 800b5e0:	681c      	ldr	r4, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	6053      	str	r3, [r2, #4]
 800b5e6:	4421      	add	r1, r4
 800b5e8:	6011      	str	r1, [r2, #0]
 800b5ea:	e7da      	b.n	800b5a2 <_free_r+0x26>
 800b5ec:	d902      	bls.n	800b5f4 <_free_r+0x78>
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	6003      	str	r3, [r0, #0]
 800b5f2:	e7d6      	b.n	800b5a2 <_free_r+0x26>
 800b5f4:	6825      	ldr	r5, [r4, #0]
 800b5f6:	1961      	adds	r1, r4, r5
 800b5f8:	428b      	cmp	r3, r1
 800b5fa:	bf04      	itt	eq
 800b5fc:	6819      	ldreq	r1, [r3, #0]
 800b5fe:	685b      	ldreq	r3, [r3, #4]
 800b600:	6063      	str	r3, [r4, #4]
 800b602:	bf04      	itt	eq
 800b604:	1949      	addeq	r1, r1, r5
 800b606:	6021      	streq	r1, [r4, #0]
 800b608:	6054      	str	r4, [r2, #4]
 800b60a:	e7ca      	b.n	800b5a2 <_free_r+0x26>
 800b60c:	b003      	add	sp, #12
 800b60e:	bd30      	pop	{r4, r5, pc}
 800b610:	24004a10 	.word	0x24004a10

0800b614 <__sfputc_r>:
 800b614:	6893      	ldr	r3, [r2, #8]
 800b616:	3b01      	subs	r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	b410      	push	{r4}
 800b61c:	6093      	str	r3, [r2, #8]
 800b61e:	da08      	bge.n	800b632 <__sfputc_r+0x1e>
 800b620:	6994      	ldr	r4, [r2, #24]
 800b622:	42a3      	cmp	r3, r4
 800b624:	db01      	blt.n	800b62a <__sfputc_r+0x16>
 800b626:	290a      	cmp	r1, #10
 800b628:	d103      	bne.n	800b632 <__sfputc_r+0x1e>
 800b62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b62e:	f7fe bbdb 	b.w	8009de8 <__swbuf_r>
 800b632:	6813      	ldr	r3, [r2, #0]
 800b634:	1c58      	adds	r0, r3, #1
 800b636:	6010      	str	r0, [r2, #0]
 800b638:	7019      	strb	r1, [r3, #0]
 800b63a:	4608      	mov	r0, r1
 800b63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <__sfputs_r>:
 800b642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b644:	4606      	mov	r6, r0
 800b646:	460f      	mov	r7, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	18d5      	adds	r5, r2, r3
 800b64c:	42ac      	cmp	r4, r5
 800b64e:	d101      	bne.n	800b654 <__sfputs_r+0x12>
 800b650:	2000      	movs	r0, #0
 800b652:	e007      	b.n	800b664 <__sfputs_r+0x22>
 800b654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b658:	463a      	mov	r2, r7
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7ff ffda 	bl	800b614 <__sfputc_r>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d1f3      	bne.n	800b64c <__sfputs_r+0xa>
 800b664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b668 <_vfiprintf_r>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	460d      	mov	r5, r1
 800b66e:	b09d      	sub	sp, #116	; 0x74
 800b670:	4614      	mov	r4, r2
 800b672:	4698      	mov	r8, r3
 800b674:	4606      	mov	r6, r0
 800b676:	b118      	cbz	r0, 800b680 <_vfiprintf_r+0x18>
 800b678:	6983      	ldr	r3, [r0, #24]
 800b67a:	b90b      	cbnz	r3, 800b680 <_vfiprintf_r+0x18>
 800b67c:	f7fd fcfe 	bl	800907c <__sinit>
 800b680:	4b89      	ldr	r3, [pc, #548]	; (800b8a8 <_vfiprintf_r+0x240>)
 800b682:	429d      	cmp	r5, r3
 800b684:	d11b      	bne.n	800b6be <_vfiprintf_r+0x56>
 800b686:	6875      	ldr	r5, [r6, #4]
 800b688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b68a:	07d9      	lsls	r1, r3, #31
 800b68c:	d405      	bmi.n	800b69a <_vfiprintf_r+0x32>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	059a      	lsls	r2, r3, #22
 800b692:	d402      	bmi.n	800b69a <_vfiprintf_r+0x32>
 800b694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b696:	f7fd fdb4 	bl	8009202 <__retarget_lock_acquire_recursive>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	071b      	lsls	r3, r3, #28
 800b69e:	d501      	bpl.n	800b6a4 <_vfiprintf_r+0x3c>
 800b6a0:	692b      	ldr	r3, [r5, #16]
 800b6a2:	b9eb      	cbnz	r3, 800b6e0 <_vfiprintf_r+0x78>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7fe fc02 	bl	8009eb0 <__swsetup_r>
 800b6ac:	b1c0      	cbz	r0, 800b6e0 <_vfiprintf_r+0x78>
 800b6ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6b0:	07dc      	lsls	r4, r3, #31
 800b6b2:	d50e      	bpl.n	800b6d2 <_vfiprintf_r+0x6a>
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b8:	b01d      	add	sp, #116	; 0x74
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	4b7b      	ldr	r3, [pc, #492]	; (800b8ac <_vfiprintf_r+0x244>)
 800b6c0:	429d      	cmp	r5, r3
 800b6c2:	d101      	bne.n	800b6c8 <_vfiprintf_r+0x60>
 800b6c4:	68b5      	ldr	r5, [r6, #8]
 800b6c6:	e7df      	b.n	800b688 <_vfiprintf_r+0x20>
 800b6c8:	4b79      	ldr	r3, [pc, #484]	; (800b8b0 <_vfiprintf_r+0x248>)
 800b6ca:	429d      	cmp	r5, r3
 800b6cc:	bf08      	it	eq
 800b6ce:	68f5      	ldreq	r5, [r6, #12]
 800b6d0:	e7da      	b.n	800b688 <_vfiprintf_r+0x20>
 800b6d2:	89ab      	ldrh	r3, [r5, #12]
 800b6d4:	0598      	lsls	r0, r3, #22
 800b6d6:	d4ed      	bmi.n	800b6b4 <_vfiprintf_r+0x4c>
 800b6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6da:	f7fd fd93 	bl	8009204 <__retarget_lock_release_recursive>
 800b6de:	e7e9      	b.n	800b6b4 <_vfiprintf_r+0x4c>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ee:	2330      	movs	r3, #48	; 0x30
 800b6f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8b4 <_vfiprintf_r+0x24c>
 800b6f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6f8:	f04f 0901 	mov.w	r9, #1
 800b6fc:	4623      	mov	r3, r4
 800b6fe:	469a      	mov	sl, r3
 800b700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b704:	b10a      	cbz	r2, 800b70a <_vfiprintf_r+0xa2>
 800b706:	2a25      	cmp	r2, #37	; 0x25
 800b708:	d1f9      	bne.n	800b6fe <_vfiprintf_r+0x96>
 800b70a:	ebba 0b04 	subs.w	fp, sl, r4
 800b70e:	d00b      	beq.n	800b728 <_vfiprintf_r+0xc0>
 800b710:	465b      	mov	r3, fp
 800b712:	4622      	mov	r2, r4
 800b714:	4629      	mov	r1, r5
 800b716:	4630      	mov	r0, r6
 800b718:	f7ff ff93 	bl	800b642 <__sfputs_r>
 800b71c:	3001      	adds	r0, #1
 800b71e:	f000 80aa 	beq.w	800b876 <_vfiprintf_r+0x20e>
 800b722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b724:	445a      	add	r2, fp
 800b726:	9209      	str	r2, [sp, #36]	; 0x24
 800b728:	f89a 3000 	ldrb.w	r3, [sl]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80a2 	beq.w	800b876 <_vfiprintf_r+0x20e>
 800b732:	2300      	movs	r3, #0
 800b734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b73c:	f10a 0a01 	add.w	sl, sl, #1
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	9307      	str	r3, [sp, #28]
 800b744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b748:	931a      	str	r3, [sp, #104]	; 0x68
 800b74a:	4654      	mov	r4, sl
 800b74c:	2205      	movs	r2, #5
 800b74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b752:	4858      	ldr	r0, [pc, #352]	; (800b8b4 <_vfiprintf_r+0x24c>)
 800b754:	f7f4 fddc 	bl	8000310 <memchr>
 800b758:	9a04      	ldr	r2, [sp, #16]
 800b75a:	b9d8      	cbnz	r0, 800b794 <_vfiprintf_r+0x12c>
 800b75c:	06d1      	lsls	r1, r2, #27
 800b75e:	bf44      	itt	mi
 800b760:	2320      	movmi	r3, #32
 800b762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b766:	0713      	lsls	r3, r2, #28
 800b768:	bf44      	itt	mi
 800b76a:	232b      	movmi	r3, #43	; 0x2b
 800b76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b770:	f89a 3000 	ldrb.w	r3, [sl]
 800b774:	2b2a      	cmp	r3, #42	; 0x2a
 800b776:	d015      	beq.n	800b7a4 <_vfiprintf_r+0x13c>
 800b778:	9a07      	ldr	r2, [sp, #28]
 800b77a:	4654      	mov	r4, sl
 800b77c:	2000      	movs	r0, #0
 800b77e:	f04f 0c0a 	mov.w	ip, #10
 800b782:	4621      	mov	r1, r4
 800b784:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b788:	3b30      	subs	r3, #48	; 0x30
 800b78a:	2b09      	cmp	r3, #9
 800b78c:	d94e      	bls.n	800b82c <_vfiprintf_r+0x1c4>
 800b78e:	b1b0      	cbz	r0, 800b7be <_vfiprintf_r+0x156>
 800b790:	9207      	str	r2, [sp, #28]
 800b792:	e014      	b.n	800b7be <_vfiprintf_r+0x156>
 800b794:	eba0 0308 	sub.w	r3, r0, r8
 800b798:	fa09 f303 	lsl.w	r3, r9, r3
 800b79c:	4313      	orrs	r3, r2
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	46a2      	mov	sl, r4
 800b7a2:	e7d2      	b.n	800b74a <_vfiprintf_r+0xe2>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	1d19      	adds	r1, r3, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	9103      	str	r1, [sp, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfbb      	ittet	lt
 800b7b0:	425b      	neglt	r3, r3
 800b7b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b6:	9307      	strge	r3, [sp, #28]
 800b7b8:	9307      	strlt	r3, [sp, #28]
 800b7ba:	bfb8      	it	lt
 800b7bc:	9204      	strlt	r2, [sp, #16]
 800b7be:	7823      	ldrb	r3, [r4, #0]
 800b7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7c2:	d10c      	bne.n	800b7de <_vfiprintf_r+0x176>
 800b7c4:	7863      	ldrb	r3, [r4, #1]
 800b7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c8:	d135      	bne.n	800b836 <_vfiprintf_r+0x1ce>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	1d1a      	adds	r2, r3, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	9203      	str	r2, [sp, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	bfb8      	it	lt
 800b7d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7da:	3402      	adds	r4, #2
 800b7dc:	9305      	str	r3, [sp, #20]
 800b7de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8c4 <_vfiprintf_r+0x25c>
 800b7e2:	7821      	ldrb	r1, [r4, #0]
 800b7e4:	2203      	movs	r2, #3
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	f7f4 fd92 	bl	8000310 <memchr>
 800b7ec:	b140      	cbz	r0, 800b800 <_vfiprintf_r+0x198>
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	eba0 000a 	sub.w	r0, r0, sl
 800b7f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	4303      	orrs	r3, r0
 800b7fc:	3401      	adds	r4, #1
 800b7fe:	9304      	str	r3, [sp, #16]
 800b800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b804:	482c      	ldr	r0, [pc, #176]	; (800b8b8 <_vfiprintf_r+0x250>)
 800b806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b80a:	2206      	movs	r2, #6
 800b80c:	f7f4 fd80 	bl	8000310 <memchr>
 800b810:	2800      	cmp	r0, #0
 800b812:	d03f      	beq.n	800b894 <_vfiprintf_r+0x22c>
 800b814:	4b29      	ldr	r3, [pc, #164]	; (800b8bc <_vfiprintf_r+0x254>)
 800b816:	bb1b      	cbnz	r3, 800b860 <_vfiprintf_r+0x1f8>
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	3307      	adds	r3, #7
 800b81c:	f023 0307 	bic.w	r3, r3, #7
 800b820:	3308      	adds	r3, #8
 800b822:	9303      	str	r3, [sp, #12]
 800b824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b826:	443b      	add	r3, r7
 800b828:	9309      	str	r3, [sp, #36]	; 0x24
 800b82a:	e767      	b.n	800b6fc <_vfiprintf_r+0x94>
 800b82c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b830:	460c      	mov	r4, r1
 800b832:	2001      	movs	r0, #1
 800b834:	e7a5      	b.n	800b782 <_vfiprintf_r+0x11a>
 800b836:	2300      	movs	r3, #0
 800b838:	3401      	adds	r4, #1
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	4619      	mov	r1, r3
 800b83e:	f04f 0c0a 	mov.w	ip, #10
 800b842:	4620      	mov	r0, r4
 800b844:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b848:	3a30      	subs	r2, #48	; 0x30
 800b84a:	2a09      	cmp	r2, #9
 800b84c:	d903      	bls.n	800b856 <_vfiprintf_r+0x1ee>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0c5      	beq.n	800b7de <_vfiprintf_r+0x176>
 800b852:	9105      	str	r1, [sp, #20]
 800b854:	e7c3      	b.n	800b7de <_vfiprintf_r+0x176>
 800b856:	fb0c 2101 	mla	r1, ip, r1, r2
 800b85a:	4604      	mov	r4, r0
 800b85c:	2301      	movs	r3, #1
 800b85e:	e7f0      	b.n	800b842 <_vfiprintf_r+0x1da>
 800b860:	ab03      	add	r3, sp, #12
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	462a      	mov	r2, r5
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <_vfiprintf_r+0x258>)
 800b868:	a904      	add	r1, sp, #16
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7fd fe08 	bl	8009480 <_printf_float>
 800b870:	4607      	mov	r7, r0
 800b872:	1c78      	adds	r0, r7, #1
 800b874:	d1d6      	bne.n	800b824 <_vfiprintf_r+0x1bc>
 800b876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b878:	07d9      	lsls	r1, r3, #31
 800b87a:	d405      	bmi.n	800b888 <_vfiprintf_r+0x220>
 800b87c:	89ab      	ldrh	r3, [r5, #12]
 800b87e:	059a      	lsls	r2, r3, #22
 800b880:	d402      	bmi.n	800b888 <_vfiprintf_r+0x220>
 800b882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b884:	f7fd fcbe 	bl	8009204 <__retarget_lock_release_recursive>
 800b888:	89ab      	ldrh	r3, [r5, #12]
 800b88a:	065b      	lsls	r3, r3, #25
 800b88c:	f53f af12 	bmi.w	800b6b4 <_vfiprintf_r+0x4c>
 800b890:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b892:	e711      	b.n	800b6b8 <_vfiprintf_r+0x50>
 800b894:	ab03      	add	r3, sp, #12
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	462a      	mov	r2, r5
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <_vfiprintf_r+0x258>)
 800b89c:	a904      	add	r1, sp, #16
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7fe f87a 	bl	8009998 <_printf_i>
 800b8a4:	e7e4      	b.n	800b870 <_vfiprintf_r+0x208>
 800b8a6:	bf00      	nop
 800b8a8:	0800bd88 	.word	0x0800bd88
 800b8ac:	0800bda8 	.word	0x0800bda8
 800b8b0:	0800bd68 	.word	0x0800bd68
 800b8b4:	0800bfec 	.word	0x0800bfec
 800b8b8:	0800bff6 	.word	0x0800bff6
 800b8bc:	08009481 	.word	0x08009481
 800b8c0:	0800b643 	.word	0x0800b643
 800b8c4:	0800bff2 	.word	0x0800bff2

0800b8c8 <_read_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	; (800b8e8 <_read_r+0x20>)
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	602a      	str	r2, [r5, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f7f5 ffac 	bl	8001834 <_read>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_read_r+0x1e>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_read_r+0x1e>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	24004a18 	.word	0x24004a18

0800b8ec <__assert_func>:
 800b8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <__assert_func+0x2c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	68d8      	ldr	r0, [r3, #12]
 800b8fa:	b14c      	cbz	r4, 800b910 <__assert_func+0x24>
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <__assert_func+0x30>)
 800b8fe:	9100      	str	r1, [sp, #0]
 800b900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <__assert_func+0x34>)
 800b906:	462b      	mov	r3, r5
 800b908:	f000 f80e 	bl	800b928 <fiprintf>
 800b90c:	f7fd fb50 	bl	8008fb0 <abort>
 800b910:	4b04      	ldr	r3, [pc, #16]	; (800b924 <__assert_func+0x38>)
 800b912:	461c      	mov	r4, r3
 800b914:	e7f3      	b.n	800b8fe <__assert_func+0x12>
 800b916:	bf00      	nop
 800b918:	24000014 	.word	0x24000014
 800b91c:	0800bffd 	.word	0x0800bffd
 800b920:	0800c00a 	.word	0x0800c00a
 800b924:	0800c038 	.word	0x0800c038

0800b928 <fiprintf>:
 800b928:	b40e      	push	{r1, r2, r3}
 800b92a:	b503      	push	{r0, r1, lr}
 800b92c:	4601      	mov	r1, r0
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	4805      	ldr	r0, [pc, #20]	; (800b948 <fiprintf+0x20>)
 800b932:	f853 2b04 	ldr.w	r2, [r3], #4
 800b936:	6800      	ldr	r0, [r0, #0]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	f7ff fe95 	bl	800b668 <_vfiprintf_r>
 800b93e:	b002      	add	sp, #8
 800b940:	f85d eb04 	ldr.w	lr, [sp], #4
 800b944:	b003      	add	sp, #12
 800b946:	4770      	bx	lr
 800b948:	24000014 	.word	0x24000014

0800b94c <_fstat_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	; (800b96c <_fstat_r+0x20>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f7f5 ff8a 	bl	8001872 <_fstat>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_fstat_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_fstat_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	24004a18 	.word	0x24004a18

0800b970 <_isatty_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d06      	ldr	r5, [pc, #24]	; (800b98c <_isatty_r+0x1c>)
 800b974:	2300      	movs	r3, #0
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f5 ff7e 	bl	800187c <_isatty>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_isatty_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_isatty_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	24004a18 	.word	0x24004a18

0800b990 <__ascii_mbtowc>:
 800b990:	b082      	sub	sp, #8
 800b992:	b901      	cbnz	r1, 800b996 <__ascii_mbtowc+0x6>
 800b994:	a901      	add	r1, sp, #4
 800b996:	b142      	cbz	r2, 800b9aa <__ascii_mbtowc+0x1a>
 800b998:	b14b      	cbz	r3, 800b9ae <__ascii_mbtowc+0x1e>
 800b99a:	7813      	ldrb	r3, [r2, #0]
 800b99c:	600b      	str	r3, [r1, #0]
 800b99e:	7812      	ldrb	r2, [r2, #0]
 800b9a0:	1e10      	subs	r0, r2, #0
 800b9a2:	bf18      	it	ne
 800b9a4:	2001      	movne	r0, #1
 800b9a6:	b002      	add	sp, #8
 800b9a8:	4770      	bx	lr
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	e7fb      	b.n	800b9a6 <__ascii_mbtowc+0x16>
 800b9ae:	f06f 0001 	mvn.w	r0, #1
 800b9b2:	e7f8      	b.n	800b9a6 <__ascii_mbtowc+0x16>

0800b9b4 <__ascii_wctomb>:
 800b9b4:	b149      	cbz	r1, 800b9ca <__ascii_wctomb+0x16>
 800b9b6:	2aff      	cmp	r2, #255	; 0xff
 800b9b8:	bf85      	ittet	hi
 800b9ba:	238a      	movhi	r3, #138	; 0x8a
 800b9bc:	6003      	strhi	r3, [r0, #0]
 800b9be:	700a      	strbls	r2, [r1, #0]
 800b9c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b9c4:	bf98      	it	ls
 800b9c6:	2001      	movls	r0, #1
 800b9c8:	4770      	bx	lr
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4770      	bx	lr
	...

0800b9d0 <_init>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr

0800b9dc <_fini>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr
