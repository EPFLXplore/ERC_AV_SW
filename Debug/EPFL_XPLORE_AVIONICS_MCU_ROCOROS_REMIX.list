
EPFL_XPLORE_AVIONICS_MCU_ROCOROS_REMIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ca8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  08010f48  08010f48  00020f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011cdc  08011cdc  00021cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011ce4  08011ce4  00021ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011cec  08011cec  00021cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  08011cf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00011598  240001f4  08011ee8  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401178c  08011ee8  0003178c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000b34fd  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000baa8  00000000  00000000  000e371f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00053025  00000000  00000000  000ef1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b70  00000000  00000000  001421f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00008320  00000000  00000000  00144d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004cb26  00000000  00000000  0014d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a22c  00000000  00000000  00199ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001f6cc6  00000000  00000000  001f3dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  003eaa98  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009980  00000000  00000000  003eaae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010f30 	.word	0x08010f30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08010f30 	.word	0x08010f30

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b500      	push	{lr}
 80006b6:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b8:	2300      	movs	r3, #0
 80006ba:	9307      	str	r3, [sp, #28]
 80006bc:	9308      	str	r3, [sp, #32]
 80006be:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	9304      	str	r3, [sp, #16]
 80006ca:	9305      	str	r3, [sp, #20]
 80006cc:	9306      	str	r3, [sp, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <MX_ADC1_Init+0x94>)
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_ADC1_Init+0x98>)
 80006d2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006d6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006da:	2204      	movs	r2, #4
 80006dc:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006de:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	2201      	movs	r2, #1
 80006e4:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ee:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f0:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	f002 fa63 	bl	8002bc0 <HAL_ADC_Init>
 80006fa:	b9d8      	cbnz	r0, 8000734 <MX_ADC1_Init+0x80>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000700:	a907      	add	r1, sp, #28
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_ADC1_Init+0x94>)
 8000704:	f002 fb74 	bl	8002df0 <HAL_ADCEx_MultiModeConfigChannel>
 8000708:	b9b8      	cbnz	r0, 800073a <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ADC1_Init+0x9c>)
 800070c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000712:	2300      	movs	r3, #0
 8000714:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_ADC1_Init+0xa0>)
 8000718:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2204      	movs	r2, #4
 800071c:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800071e:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000720:	f88d 3019 	strb.w	r3, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	4669      	mov	r1, sp
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_ADC1_Init+0x94>)
 8000728:	f001 ff5c 	bl	80025e4 <HAL_ADC_ConfigChannel>
 800072c:	b940      	cbnz	r0, 8000740 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	b00b      	add	sp, #44	; 0x2c
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000734:	f000 fce6 	bl	8001104 <Error_Handler>
 8000738:	e7e0      	b.n	80006fc <MX_ADC1_Init+0x48>
    Error_Handler();
 800073a:	f000 fce3 	bl	8001104 <Error_Handler>
 800073e:	e7e4      	b.n	800070a <MX_ADC1_Init+0x56>
    Error_Handler();
 8000740:	f000 fce0 	bl	8001104 <Error_Handler>
}
 8000744:	e7f3      	b.n	800072e <MX_ADC1_Init+0x7a>
 8000746:	bf00      	nop
 8000748:	24000214 	.word	0x24000214
 800074c:	40022000 	.word	0x40022000
 8000750:	10c00010 	.word	0x10c00010
 8000754:	47ff0000 	.word	0x47ff0000

08000758 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000758:	b500      	push	{lr}
 800075a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075c:	2300      	movs	r3, #0
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	9304      	str	r3, [sp, #16]
 8000766:	9305      	str	r3, [sp, #20]
 8000768:	9306      	str	r3, [sp, #24]
 800076a:	9307      	str	r3, [sp, #28]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800076c:	4819      	ldr	r0, [pc, #100]	; (80007d4 <MX_ADC2_Init+0x7c>)
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <MX_ADC2_Init+0x80>)
 8000770:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000772:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000774:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	60c3      	str	r3, [r0, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000778:	2204      	movs	r2, #4
 800077a:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800077c:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800077e:	7543      	strb	r3, [r0, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000780:	2201      	movs	r2, #1
 8000782:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000784:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000786:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800078e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000790:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000794:	f002 fa14 	bl	8002bc0 <HAL_ADC_Init>
 8000798:	b9a8      	cbnz	r0, 80007c6 <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_ADC2_Init+0x84>)
 800079c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2306      	movs	r3, #6
 80007a0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a2:	2300      	movs	r3, #0
 80007a4:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <MX_ADC2_Init+0x88>)
 80007a8:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2204      	movs	r2, #4
 80007ac:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80007ae:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b0:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b4:	eb0d 0102 	add.w	r1, sp, r2
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_ADC2_Init+0x7c>)
 80007ba:	f001 ff13 	bl	80025e4 <HAL_ADC_ConfigChannel>
 80007be:	b928      	cbnz	r0, 80007cc <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007c0:	b009      	add	sp, #36	; 0x24
 80007c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007c6:	f000 fc9d 	bl	8001104 <Error_Handler>
 80007ca:	e7e6      	b.n	800079a <MX_ADC2_Init+0x42>
    Error_Handler();
 80007cc:	f000 fc9a 	bl	8001104 <Error_Handler>
}
 80007d0:	e7f6      	b.n	80007c0 <MX_ADC2_Init+0x68>
 80007d2:	bf00      	nop
 80007d4:	24000278 	.word	0x24000278
 80007d8:	40022100 	.word	0x40022100
 80007dc:	10c00010 	.word	0x10c00010
 80007e0:	47ff0000 	.word	0x47ff0000

080007e4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007e4:	b500      	push	{lr}
 80007e6:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e8:	2300      	movs	r3, #0
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	9303      	str	r3, [sp, #12]
 80007f0:	9304      	str	r3, [sp, #16]
 80007f2:	9305      	str	r3, [sp, #20]
 80007f4:	9306      	str	r3, [sp, #24]
 80007f6:	9307      	str	r3, [sp, #28]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_ADC3_Init+0x78>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_ADC3_Init+0x7c>)
 80007fc:	6002      	str	r2, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007fe:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000800:	60c3      	str	r3, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	2204      	movs	r2, #4
 8000804:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000806:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000808:	7543      	strb	r3, [r0, #21]
  hadc3.Init.NbrOfConversion = 1;
 800080a:	2201      	movs	r2, #1
 800080c:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800080e:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	6243      	str	r3, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	6283      	str	r3, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000816:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000818:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800081a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800081e:	f002 f9cf 	bl	8002bc0 <HAL_ADC_Init>
 8000822:	b9a8      	cbnz	r0, 8000850 <MX_ADC3_Init+0x6c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_ADC3_Init+0x80>)
 8000826:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2306      	movs	r3, #6
 800082a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <MX_ADC3_Init+0x84>)
 8000832:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000834:	2204      	movs	r2, #4
 8000836:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8000838:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083a:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800083e:	eb0d 0102 	add.w	r1, sp, r2
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_ADC3_Init+0x78>)
 8000844:	f001 fece 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8000848:	b928      	cbnz	r0, 8000856 <MX_ADC3_Init+0x72>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800084a:	b009      	add	sp, #36	; 0x24
 800084c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000850:	f000 fc58 	bl	8001104 <Error_Handler>
 8000854:	e7e6      	b.n	8000824 <MX_ADC3_Init+0x40>
    Error_Handler();
 8000856:	f000 fc55 	bl	8001104 <Error_Handler>
}
 800085a:	e7f6      	b.n	800084a <MX_ADC3_Init+0x66>
 800085c:	240002dc 	.word	0x240002dc
 8000860:	58026000 	.word	0x58026000
 8000864:	2a000400 	.word	0x2a000400
 8000868:	47ff0000 	.word	0x47ff0000

0800086c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800086c:	b530      	push	{r4, r5, lr}
 800086e:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2300      	movs	r3, #0
 8000872:	9309      	str	r3, [sp, #36]	; 0x24
 8000874:	930a      	str	r3, [sp, #40]	; 0x28
 8000876:	930b      	str	r3, [sp, #44]	; 0x2c
 8000878:	930c      	str	r3, [sp, #48]	; 0x30
 800087a:	930d      	str	r3, [sp, #52]	; 0x34
  if(adcHandle->Instance==ADC1)
 800087c:	6803      	ldr	r3, [r0, #0]
 800087e:	4a5e      	ldr	r2, [pc, #376]	; (80009f8 <HAL_ADC_MspInit+0x18c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d008      	beq.n	8000896 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000884:	4a5d      	ldr	r2, [pc, #372]	; (80009fc <HAL_ADC_MspInit+0x190>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d043      	beq.n	8000912 <HAL_ADC_MspInit+0xa6>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 800088a:	4a5d      	ldr	r2, [pc, #372]	; (8000a00 <HAL_ADC_MspInit+0x194>)
 800088c:	4293      	cmp	r3, r2
 800088e:	f000 8092 	beq.w	80009b6 <HAL_ADC_MspInit+0x14a>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000892:	b00f      	add	sp, #60	; 0x3c
 8000894:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000896:	4a5b      	ldr	r2, [pc, #364]	; (8000a04 <HAL_ADC_MspInit+0x198>)
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d029      	beq.n	80008f6 <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <HAL_ADC_MspInit+0x19c>)
 80008a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008a8:	f042 0204 	orr.w	r2, r2, #4
 80008ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008b4:	f002 0204 	and.w	r2, r2, #4
 80008b8:	9201      	str	r2, [sp, #4]
 80008ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008c0:	f042 0202 	orr.w	r2, r2, #2
 80008c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008d4:	2333      	movs	r3, #51	; 0x33
 80008d6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	2403      	movs	r4, #3
 80008da:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	a909      	add	r1, sp, #36	; 0x24
 80008de:	484b      	ldr	r0, [pc, #300]	; (8000a0c <HAL_ADC_MspInit+0x1a0>)
 80008e0:	f004 fa60 	bl	8004da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	a909      	add	r1, sp, #36	; 0x24
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <HAL_ADC_MspInit+0x1a4>)
 80008f0:	f004 fa58 	bl	8004da4 <HAL_GPIO_Init>
 80008f4:	e7cd      	b.n	8000892 <HAL_ADC_MspInit+0x26>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <HAL_ADC_MspInit+0x19c>)
 80008f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80008fc:	f042 0220 	orr.w	r2, r2, #32
 8000900:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000908:	f003 0320 	and.w	r3, r3, #32
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	9b00      	ldr	r3, [sp, #0]
 8000910:	e7c7      	b.n	80008a2 <HAL_ADC_MspInit+0x36>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000912:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <HAL_ADC_MspInit+0x198>)
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800091a:	2b01      	cmp	r3, #1
 800091c:	d03d      	beq.n	800099a <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <HAL_ADC_MspInit+0x19c>)
 8000920:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000924:	f042 0204 	orr.w	r2, r2, #4
 8000928:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800092c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000930:	f002 0204 	and.w	r2, r2, #4
 8000934:	9204      	str	r2, [sp, #16]
 8000936:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800093c:	f042 0201 	orr.w	r2, r2, #1
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000948:	f002 0201 	and.w	r2, r2, #1
 800094c:	9205      	str	r2, [sp, #20]
 800094e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000954:	f042 0202 	orr.w	r2, r2, #2
 8000958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000968:	2333      	movs	r3, #51	; 0x33
 800096a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096c:	2403      	movs	r4, #3
 800096e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	a909      	add	r1, sp, #36	; 0x24
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <HAL_ADC_MspInit+0x1a0>)
 8000974:	f004 fa16 	bl	8004da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000978:	2304      	movs	r3, #4
 800097a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2500      	movs	r5, #0
 8000980:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	a909      	add	r1, sp, #36	; 0x24
 8000984:	4823      	ldr	r0, [pc, #140]	; (8000a14 <HAL_ADC_MspInit+0x1a8>)
 8000986:	f004 fa0d 	bl	8004da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800098a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	a909      	add	r1, sp, #36	; 0x24
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <HAL_ADC_MspInit+0x1a4>)
 8000994:	f004 fa06 	bl	8004da4 <HAL_GPIO_Init>
 8000998:	e77b      	b.n	8000892 <HAL_ADC_MspInit+0x26>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_ADC_MspInit+0x19c>)
 800099c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80009a0:	f042 0220 	orr.w	r2, r2, #32
 80009a4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009ac:	f003 0320 	and.w	r3, r3, #32
 80009b0:	9303      	str	r3, [sp, #12]
 80009b2:	9b03      	ldr	r3, [sp, #12]
 80009b4:	e7b3      	b.n	800091e <HAL_ADC_MspInit+0xb2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_ADC_MspInit+0x19c>)
 80009b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80009c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009c8:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80009cc:	9207      	str	r2, [sp, #28]
 80009ce:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d4:	f042 0204 	orr.w	r2, r2, #4
 80009d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	9308      	str	r3, [sp, #32]
 80009e6:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009e8:	2303      	movs	r3, #3
 80009ea:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	a909      	add	r1, sp, #36	; 0x24
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <HAL_ADC_MspInit+0x1a0>)
 80009f2:	f004 f9d7 	bl	8004da4 <HAL_GPIO_Init>
}
 80009f6:	e74c      	b.n	8000892 <HAL_ADC_MspInit+0x26>
 80009f8:	40022000 	.word	0x40022000
 80009fc:	40022100 	.word	0x40022100
 8000a00:	58026000 	.word	0x58026000
 8000a04:	24000210 	.word	0x24000210
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	58020800 	.word	0x58020800
 8000a10:	58020400 	.word	0x58020400
 8000a14:	58020000 	.word	0x58020000

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a18:	b500      	push	{lr}
 8000a1a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_DMA_Init+0x64>)
 8000a1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	200b      	movs	r0, #11
 8000a3c:	f002 fa7c 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a40:	200b      	movs	r0, #11
 8000a42:	f002 faad 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	200c      	movs	r0, #12
 8000a4c:	f002 fa74 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a50:	200c      	movs	r0, #12
 8000a52:	f002 faa5 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	200d      	movs	r0, #13
 8000a5c:	f002 fa6c 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a60:	200d      	movs	r0, #13
 8000a62:	f002 fa9d 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	200e      	movs	r0, #14
 8000a6c:	f002 fa64 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a70:	200e      	movs	r0, #14
 8000a72:	f002 fa95 	bl	8002fa0 <HAL_NVIC_EnableIRQ>

}
 8000a76:	b003      	add	sp, #12
 8000a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a7c:	58024400 	.word	0x58024400

08000a80 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a80:	b508      	push	{r3, lr}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GetAcc */
//  GetAccHandle = osThreadNew(GetAcceleration, NULL, &GetAcc_attributes);
  setupTelemetry();
 8000a82:	f00c ff77 	bl	800d974 <_Z14setupTelemetryv>
  initCortex();
 8000a86:	f00c fe3b 	bl	800d700 <_Z10initCortexv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a8a:	bd08      	pop	{r3, pc}

08000a8c <MX_GPIO_Init>:
     PC11   ------> QUADSPI_BK2_NCS
     PC12   ------> UART5_TX
     PB3 (JTDO/TRACESWO)   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 8000a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a90:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	2400      	movs	r4, #0
 8000a94:	9407      	str	r4, [sp, #28]
 8000a96:	9408      	str	r4, [sp, #32]
 8000a98:	9409      	str	r4, [sp, #36]	; 0x24
 8000a9a:	940a      	str	r4, [sp, #40]	; 0x28
 8000a9c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <MX_GPIO_Init+0x1d8>)
 8000aa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aa4:	f042 0210 	orr.w	r2, r2, #16
 8000aa8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000aac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ab0:	f002 0210 	and.w	r2, r2, #16
 8000ab4:	9201      	str	r2, [sp, #4]
 8000ab6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000abc:	f042 0204 	orr.w	r2, r2, #4
 8000ac0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ac4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ac8:	f002 0204 	and.w	r2, r2, #4
 8000acc:	9202      	str	r2, [sp, #8]
 8000ace:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ad8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000adc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ae0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ae4:	9203      	str	r2, [sp, #12]
 8000ae6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aec:	f042 0201 	orr.w	r2, r2, #1
 8000af0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000af4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000af8:	f002 0201 	and.w	r2, r2, #1
 8000afc:	9204      	str	r2, [sp, #16]
 8000afe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b04:	f042 0202 	orr.w	r2, r2, #2
 8000b08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b10:	f002 0202 	and.w	r2, r2, #2
 8000b14:	9205      	str	r2, [sp, #20]
 8000b16:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b1c:	f042 0208 	orr.w	r2, r2, #8
 8000b20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	9306      	str	r3, [sp, #24]
 8000b2e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000b30:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8000c70 <MX_GPIO_Init+0x1e4>
 8000b34:	4622      	mov	r2, r4
 8000b36:	f24f 0118 	movw	r1, #61464	; 0xf018
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	f004 fb06 	bl	800514c <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|SPI3_CS1_Pin, GPIO_PIN_RESET);
 8000b40:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8000c74 <MX_GPIO_Init+0x1e8>
 8000b44:	4622      	mov	r2, r4
 8000b46:	f248 0101 	movw	r1, #32769	; 0x8001
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	f004 fafe 	bl	800514c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8000b50:	4e45      	ldr	r6, [pc, #276]	; (8000c68 <MX_GPIO_Init+0x1dc>)
 8000b52:	4622      	mov	r2, r4
 8000b54:	f647 0190 	movw	r1, #30864	; 0x7890
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f004 faf7 	bl	800514c <HAL_GPIO_WritePin>
                          |SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 8000b5e:	f24f 0318 	movw	r3, #61464	; 0xf018
 8000b62:	9307      	str	r3, [sp, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2701      	movs	r7, #1
 8000b66:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6c:	a907      	add	r1, sp, #28
 8000b6e:	4640      	mov	r0, r8
 8000b70:	f004 f918 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SPI3_CS1_Pin;
 8000b74:	f248 0301 	movw	r3, #32769	; 0x8001
 8000b78:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	a907      	add	r1, sp, #28
 8000b82:	4648      	mov	r0, r9
 8000b84:	f004 f90e 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2502      	movs	r5, #2
 8000b8e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b94:	2305      	movs	r3, #5
 8000b96:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	a907      	add	r1, sp, #28
 8000b9a:	4648      	mov	r0, r9
 8000b9c:	f004 f902 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba0:	f04f 0a04 	mov.w	sl, #4
 8000ba4:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bae:	f04f 0b09 	mov.w	fp, #9
 8000bb2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8000bba:	a907      	add	r1, sp, #28
 8000bbc:	4648      	mov	r0, r9
 8000bbe:	f004 f8f1 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bc2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000bc6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	a907      	add	r1, sp, #28
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	f004 f8e5 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_3_Pin|GPIO_AUX_2_Pin|GPIO_AUX_1_Pin
 8000bda:	f647 0390 	movw	r3, #30864	; 0x7890
 8000bde:	9307      	str	r3, [sp, #28]
                          |SPI3_CS0_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	a907      	add	r1, sp, #28
 8000be8:	4630      	mov	r0, r6
 8000bea:	f004 f8db 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	4f1c      	ldr	r7, [pc, #112]	; (8000c6c <MX_GPIO_Init+0x1e0>)
 8000bfa:	a907      	add	r1, sp, #28
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	f004 f8d1 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c06:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	a907      	add	r1, sp, #28
 8000c14:	4638      	mov	r0, r7
 8000c16:	f004 f8c5 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c26:	f04f 0808 	mov.w	r8, #8
 8000c2a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	a907      	add	r1, sp, #28
 8000c30:	4638      	mov	r0, r7
 8000c32:	f004 f8b7 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	a907      	add	r1, sp, #28
 8000c40:	4630      	mov	r0, r6
 8000c42:	f004 f8af 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c46:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c50:	2305      	movs	r3, #5
 8000c52:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	a907      	add	r1, sp, #28
 8000c56:	4648      	mov	r0, r9
 8000c58:	f004 f8a4 	bl	8004da4 <HAL_GPIO_Init>

}
 8000c5c:	b00d      	add	sp, #52	; 0x34
 8000c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c62:	bf00      	nop
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020c00 	.word	0x58020c00
 8000c6c:	58020800 	.word	0x58020800
 8000c70:	58021000 	.word	0x58021000
 8000c74:	58020000 	.word	0x58020000

08000c78 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c78:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <MX_I2C1_Init+0x4c>)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c82:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c92:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c94:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	f004 fc43 	bl	8005520 <HAL_I2C_Init>
 8000c9a:	b950      	cbnz	r0, 8000cb2 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <MX_I2C1_Init+0x4c>)
 8000ca0:	f004 ffcd 	bl	8005c3e <HAL_I2CEx_ConfigAnalogFilter>
 8000ca4:	b940      	cbnz	r0, 8000cb8 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_I2C1_Init+0x4c>)
 8000caa:	f004 fff6 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000cae:	b930      	cbnz	r0, 8000cbe <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cb2:	f000 fa27 	bl	8001104 <Error_Handler>
 8000cb6:	e7f1      	b.n	8000c9c <MX_I2C1_Init+0x24>
    Error_Handler();
 8000cb8:	f000 fa24 	bl	8001104 <Error_Handler>
 8000cbc:	e7f3      	b.n	8000ca6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000cbe:	f000 fa21 	bl	8001104 <Error_Handler>
}
 8000cc2:	e7f5      	b.n	8000cb0 <MX_I2C1_Init+0x38>
 8000cc4:	24000340 	.word	0x24000340
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	00707cbb 	.word	0x00707cbb

08000cd0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cd0:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MX_I2C2_Init+0x4c>)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_I2C2_Init+0x50>)
 8000cd6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C2_Init+0x54>)
 8000cda:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cea:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cee:	f004 fc17 	bl	8005520 <HAL_I2C_Init>
 8000cf2:	b950      	cbnz	r0, 8000d0a <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C2_Init+0x4c>)
 8000cf8:	f004 ffa1 	bl	8005c3e <HAL_I2CEx_ConfigAnalogFilter>
 8000cfc:	b940      	cbnz	r0, 8000d10 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_I2C2_Init+0x4c>)
 8000d02:	f004 ffca 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000d06:	b930      	cbnz	r0, 8000d16 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d0a:	f000 f9fb 	bl	8001104 <Error_Handler>
 8000d0e:	e7f1      	b.n	8000cf4 <MX_I2C2_Init+0x24>
    Error_Handler();
 8000d10:	f000 f9f8 	bl	8001104 <Error_Handler>
 8000d14:	e7f3      	b.n	8000cfe <MX_I2C2_Init+0x2e>
    Error_Handler();
 8000d16:	f000 f9f5 	bl	8001104 <Error_Handler>
}
 8000d1a:	e7f5      	b.n	8000d08 <MX_I2C2_Init+0x38>
 8000d1c:	2400038c 	.word	0x2400038c
 8000d20:	40005800 	.word	0x40005800
 8000d24:	00707cbb 	.word	0x00707cbb

08000d28 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000d28:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d2a:	4812      	ldr	r0, [pc, #72]	; (8000d74 <MX_I2C4_Init+0x4c>)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_I2C4_Init+0x50>)
 8000d2e:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_I2C4_Init+0x54>)
 8000d32:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3c:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d3e:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d42:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d46:	f004 fbeb 	bl	8005520 <HAL_I2C_Init>
 8000d4a:	b950      	cbnz	r0, 8000d62 <MX_I2C4_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MX_I2C4_Init+0x4c>)
 8000d50:	f004 ff75 	bl	8005c3e <HAL_I2CEx_ConfigAnalogFilter>
 8000d54:	b940      	cbnz	r0, 8000d68 <MX_I2C4_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_I2C4_Init+0x4c>)
 8000d5a:	f004 ff9e 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000d5e:	b930      	cbnz	r0, 8000d6e <MX_I2C4_Init+0x46>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d62:	f000 f9cf 	bl	8001104 <Error_Handler>
 8000d66:	e7f1      	b.n	8000d4c <MX_I2C4_Init+0x24>
    Error_Handler();
 8000d68:	f000 f9cc 	bl	8001104 <Error_Handler>
 8000d6c:	e7f3      	b.n	8000d56 <MX_I2C4_Init+0x2e>
    Error_Handler();
 8000d6e:	f000 f9c9 	bl	8001104 <Error_Handler>
}
 8000d72:	e7f5      	b.n	8000d60 <MX_I2C4_Init+0x38>
 8000d74:	240003d8 	.word	0x240003d8
 8000d78:	58001c00 	.word	0x58001c00
 8000d7c:	00707cbb 	.word	0x00707cbb

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b510      	push	{r4, lr}
 8000d82:	b0ba      	sub	sp, #232	; 0xe8
 8000d84:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	2100      	movs	r1, #0
 8000d88:	9135      	str	r1, [sp, #212]	; 0xd4
 8000d8a:	9136      	str	r1, [sp, #216]	; 0xd8
 8000d8c:	9137      	str	r1, [sp, #220]	; 0xdc
 8000d8e:	9138      	str	r1, [sp, #224]	; 0xe0
 8000d90:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d92:	22bc      	movs	r2, #188	; 0xbc
 8000d94:	a806      	add	r0, sp, #24
 8000d96:	f00d fc97 	bl	800e6c8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_I2C_MspInit+0x158>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_I2C_MspInit+0x15c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d034      	beq.n	8000e12 <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_I2C_MspInit+0x160>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d062      	beq.n	8000e74 <HAL_I2C_MspInit+0xf4>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000dae:	b03a      	add	sp, #232	; 0xe8
 8000db0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db2:	2308      	movs	r3, #8
 8000db4:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	a806      	add	r0, sp, #24
 8000db8:	f005 fed8 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	bb30      	cbnz	r0, 8000e0c <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4c49      	ldr	r4, [pc, #292]	; (8000ee4 <HAL_I2C_MspInit+0x164>)
 8000dc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000dcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	a935      	add	r1, sp, #212	; 0xd4
 8000dec:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <HAL_I2C_MspInit+0x168>)
 8000dee:	f003 ffd9 	bl	8004da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfa:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000dfe:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	e7d0      	b.n	8000dae <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000e0c:	f000 f97a 	bl	8001104 <Error_Handler>
 8000e10:	e7d5      	b.n	8000dbe <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e12:	2308      	movs	r3, #8
 8000e14:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	a806      	add	r0, sp, #24
 8000e18:	f005 fea8 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	bb38      	cbnz	r0, 8000e6e <HAL_I2C_MspInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4c31      	ldr	r4, [pc, #196]	; (8000ee4 <HAL_I2C_MspInit+0x164>)
 8000e20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e3c:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	a935      	add	r1, sp, #212	; 0xd4
 8000e4e:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <HAL_I2C_MspInit+0x168>)
 8000e50:	f003 ffa8 	bl	8004da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e54:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000e60:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	9b03      	ldr	r3, [sp, #12]
 8000e6c:	e79f      	b.n	8000dae <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000e6e:	f000 f949 	bl	8001104 <Error_Handler>
 8000e72:	e7d4      	b.n	8000e1e <HAL_I2C_MspInit+0x9e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e74:	2310      	movs	r3, #16
 8000e76:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	a806      	add	r0, sp, #24
 8000e7a:	f005 fe77 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	bb38      	cbnz	r0, 8000ed0 <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4c18      	ldr	r4, [pc, #96]	; (8000ee4 <HAL_I2C_MspInit+0x164>)
 8000e82:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e8e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9e:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	a935      	add	r1, sp, #212	; 0xd4
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <HAL_I2C_MspInit+0x168>)
 8000eb2:	f003 ff77 	bl	8004da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000eb6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebe:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000ec2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	9305      	str	r3, [sp, #20]
 8000ecc:	9b05      	ldr	r3, [sp, #20]
}
 8000ece:	e76e      	b.n	8000dae <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8000ed0:	f000 f918 	bl	8001104 <Error_Handler>
 8000ed4:	e7d4      	b.n	8000e80 <HAL_I2C_MspInit+0x100>
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	58001c00 	.word	0x58001c00
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58020400 	.word	0x58020400

08000eec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eec:	b510      	push	{r4, lr}

  if(i2cHandle->Instance==I2C1)
 8000eee:	6803      	ldr	r3, [r0, #0]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_I2C_MspDeInit+0x88>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d006      	beq.n	8000f04 <HAL_I2C_MspDeInit+0x18>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_I2C_MspDeInit+0x8c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d014      	beq.n	8000f26 <HAL_I2C_MspDeInit+0x3a>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_I2C_MspDeInit+0x90>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d024      	beq.n	8000f4c <HAL_I2C_MspDeInit+0x60>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8000f02:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_I2C_MspDeInit+0x94>)
 8000f06:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000f12:	4c1c      	ldr	r4, [pc, #112]	; (8000f84 <HAL_I2C_MspDeInit+0x98>)
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	4620      	mov	r0, r4
 8000f18:	f004 f862 	bl	8004fe0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f004 f85e 	bl	8004fe0 <HAL_GPIO_DeInit>
 8000f24:	e7ed      	b.n	8000f02 <HAL_I2C_MspDeInit+0x16>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_I2C_MspDeInit+0x94>)
 8000f28:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000f2c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000f34:	4c13      	ldr	r4, [pc, #76]	; (8000f84 <HAL_I2C_MspDeInit+0x98>)
 8000f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f004 f850 	bl	8004fe0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	4620      	mov	r0, r4
 8000f46:	f004 f84b 	bl	8004fe0 <HAL_GPIO_DeInit>
 8000f4a:	e7da      	b.n	8000f02 <HAL_I2C_MspDeInit+0x16>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000f4c:	f502 320a 	add.w	r2, r2, #141312	; 0x22800
 8000f50:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8000f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000f5c:	4c09      	ldr	r4, [pc, #36]	; (8000f84 <HAL_I2C_MspDeInit+0x98>)
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	4620      	mov	r0, r4
 8000f64:	f004 f83c 	bl	8004fe0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f004 f837 	bl	8004fe0 <HAL_GPIO_DeInit>
}
 8000f72:	e7c6      	b.n	8000f02 <HAL_I2C_MspDeInit+0x16>
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	58001c00 	.word	0x58001c00
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020400 	.word	0x58020400

08000f88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b500      	push	{lr}
 8000f8a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8c:	224c      	movs	r2, #76	; 0x4c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	a809      	add	r0, sp, #36	; 0x24
 8000f92:	f00d fb99 	bl	800e6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f96:	2220      	movs	r2, #32
 8000f98:	2100      	movs	r1, #0
 8000f9a:	a801      	add	r0, sp, #4
 8000f9c:	f00d fb94 	bl	800e6c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f004 febf 	bl	8005d24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <_Z18SystemClock_Configv+0xac>)
 8000fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <_Z18SystemClock_Configv+0xb0>)
 8000fbe:	6993      	ldr	r3, [r2, #24]
 8000fc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	6993      	ldr	r3, [r2, #24]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fd4:	6993      	ldr	r3, [r2, #24]
 8000fd6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000fda:	d0fb      	beq.n	8000fd4 <_Z18SystemClock_Configv+0x4c>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <_Z18SystemClock_Configv+0xb4>)
 8000fde:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000fe0:	f023 0303 	bic.w	r3, r3, #3
 8000fe4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	a809      	add	r0, sp, #36	; 0x24
 8000ffa:	f004 febb 	bl	8005d74 <HAL_RCC_OscConfig>
 8000ffe:	b9a0      	cbnz	r0, 800102a <_Z18SystemClock_Configv+0xa2>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	233f      	movs	r3, #63	; 0x3f
 8001002:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800100a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001010:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001018:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800101a:	2101      	movs	r1, #1
 800101c:	a801      	add	r0, sp, #4
 800101e:	f005 fad9 	bl	80065d4 <HAL_RCC_ClockConfig>
 8001022:	b920      	cbnz	r0, 800102e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
  }
}
 8001024:	b01d      	add	sp, #116	; 0x74
 8001026:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <_Z18SystemClock_Configv+0xa4>
 800102e:	b672      	cpsid	i
 8001030:	e7fe      	b.n	8001030 <_Z18SystemClock_Configv+0xa8>
 8001032:	bf00      	nop
 8001034:	58000400 	.word	0x58000400
 8001038:	58024800 	.word	0x58024800
 800103c:	58024400 	.word	0x58024400

08001040 <_Z24PeriphCommonClock_Configv>:
{
 8001040:	b500      	push	{lr}
 8001042:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	2298      	movs	r2, #152	; 0x98
 8001046:	2100      	movs	r1, #0
 8001048:	a80a      	add	r0, sp, #40	; 0x28
 800104a:	f00d fb3d 	bl	800e6c8 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800104e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001052:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001054:	2304      	movs	r3, #4
 8001056:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001058:	2209      	movs	r2, #9
 800105a:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800105c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001062:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001064:	23c0      	movs	r3, #192	; 0xc0
 8001066:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001068:	2320      	movs	r3, #32
 800106a:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800106c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001070:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001072:	a801      	add	r0, sp, #4
 8001074:	f005 fd7a 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001078:	b910      	cbnz	r0, 8001080 <_Z24PeriphCommonClock_Configv+0x40>
}
 800107a:	b031      	add	sp, #196	; 0xc4
 800107c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001080:	b672      	cpsid	i
  while (1)
 8001082:	e7fe      	b.n	8001082 <_Z24PeriphCommonClock_Configv+0x42>

08001084 <main>:
{
 8001084:	b508      	push	{r3, lr}
  HAL_Init();
 8001086:	f001 fa67 	bl	8002558 <HAL_Init>
  SystemClock_Config();
 800108a:	f7ff ff7d 	bl	8000f88 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 800108e:	f7ff ffd7 	bl	8001040 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 8001092:	f7ff fcfb 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001096:	f7ff fcbf 	bl	8000a18 <MX_DMA_Init>
  MX_I2C1_Init();
 800109a:	f7ff fded 	bl	8000c78 <MX_I2C1_Init>
  MX_I2C2_Init();
 800109e:	f7ff fe17 	bl	8000cd0 <MX_I2C2_Init>
  MX_I2C4_Init();
 80010a2:	f7ff fe41 	bl	8000d28 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 80010a6:	f000 fca5 	bl	80019f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010aa:	f000 fcd9 	bl	8001a60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010ae:	f000 fd0d 	bl	8001acc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80010b2:	f7ff faff 	bl	80006b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010b6:	f7ff fb4f 	bl	8000758 <MX_ADC2_Init>
  MX_ADC3_Init();
 80010ba:	f7ff fb93 	bl	80007e4 <MX_ADC3_Init>
  MX_USART6_UART_Init();
 80010be:	f000 fd3b 	bl	8001b38 <MX_USART6_UART_Init>
  MX_LPUART1_UART_Init();
 80010c2:	f000 fbf5 	bl	80018b0 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80010c6:	f000 fc29 	bl	800191c <MX_UART4_Init>
  MX_UART8_Init();
 80010ca:	f000 fc5d 	bl	8001988 <MX_UART8_Init>
  MX_TIM1_Init();
 80010ce:	f000 fa75 	bl	80015bc <MX_TIM1_Init>
  MX_TIM5_Init();
 80010d2:	f000 fb31 	bl	8001738 <MX_TIM5_Init>
  MX_TIM15_Init();
 80010d6:	f000 fb73 	bl	80017c0 <MX_TIM15_Init>
  MX_TIM4_Init();
 80010da:	f000 fad5 	bl	8001688 <MX_TIM4_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80010de:	f008 fe8f 	bl	8009e00 <osKernelInitialize>
  MX_FREERTOS_Init();
 80010e2:	f7ff fccd 	bl	8000a80 <_Z16MX_FREERTOS_Initv>
  osKernelStart();
 80010e6:	f008 fe9d 	bl	8009e24 <osKernelStart>
  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x66>

080010ec <HAL_TIM_PeriodElapsedCallback>:
{
 80010ec:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 80010ee:	6802      	ldr	r2, [r0, #0]
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d000      	beq.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80010f6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80010f8:	f001 fa5c 	bl	80025b4 <HAL_IncTick>
}
 80010fc:	e7fb      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80010fe:	bf00      	nop
 8001100:	40001000 	.word	0x40001000

08001104 <Error_Handler>:
 8001104:	b672      	cpsid	i
  while (1)
 8001106:	e7fe      	b.n	8001106 <Error_Handler+0x2>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b500      	push	{lr}
 800110a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x30>)
 800110e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001112:	f042 0202 	orr.w	r2, r2, #2
 8001116:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800111a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	210f      	movs	r1, #15
 800112a:	f06f 0001 	mvn.w	r0, #1
 800112e:	f001 ff03 	bl	8002f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	b003      	add	sp, #12
 8001134:	f85d fb04 	ldr.w	pc, [sp], #4
 8001138:	58024400 	.word	0x58024400

0800113c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	280f      	cmp	r0, #15
 800113e:	d901      	bls.n	8001144 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001140:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001142:	4770      	bx	lr
{
 8001144:	b510      	push	{r4, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800114a:	2200      	movs	r2, #0
 800114c:	4601      	mov	r1, r0
 800114e:	2036      	movs	r0, #54	; 0x36
 8001150:	f001 fef2 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001154:	2036      	movs	r0, #54	; 0x36
 8001156:	f001 ff23 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_InitTick+0x88>)
 800115c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_InitTick+0x8c>)
 8001160:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001164:	f042 0210 	orr.w	r2, r2, #16
 8001168:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001178:	a901      	add	r1, sp, #4
 800117a:	a802      	add	r0, sp, #8
 800117c:	f005 fbc8 	bl	8006910 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001180:	9b07      	ldr	r3, [sp, #28]
 8001182:	b9bb      	cbnz	r3, 80011b4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001184:	f005 fba0 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8001188:	4603      	mov	r3, r0
  htim6.Instance = TIM6;
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <HAL_InitTick+0x90>)
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_InitTick+0x94>)
 800118e:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001194:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_InitTick+0x98>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80011a0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011a8:	f007 fa96 	bl	80086d8 <HAL_TIM_Base_Init>
 80011ac:	b130      	cbz	r0, 80011bc <HAL_InitTick+0x80>
  return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
}
 80011b0:	b00a      	add	sp, #40	; 0x28
 80011b2:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b4:	f005 fb88 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 80011b8:	0043      	lsls	r3, r0, #1
 80011ba:	e7e6      	b.n	800118a <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <HAL_InitTick+0x90>)
 80011be:	f007 f8ef 	bl	80083a0 <HAL_TIM_Base_Start_IT>
 80011c2:	e7f5      	b.n	80011b0 <HAL_InitTick+0x74>
 80011c4:	24000014 	.word	0x24000014
 80011c8:	58024400 	.word	0x58024400
 80011cc:	24000424 	.word	0x24000424
 80011d0:	40001000 	.word	0x40001000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler>

080011da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler>

080011dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler>

080011de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler>

080011e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler>

080011e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	4770      	bx	lr

080011e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <DMA1_Stream0_IRQHandler+0xc>)
 80011e8:	f003 f920 	bl	800442c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011ec:	bd08      	pop	{r3, pc}
 80011ee:	bf00      	nop
 80011f0:	24000694 	.word	0x24000694

080011f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA1_Stream1_IRQHandler+0xc>)
 80011f8:	f003 f918 	bl	800442c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011fc:	bd08      	pop	{r3, pc}
 80011fe:	bf00      	nop
 8001200:	2400070c 	.word	0x2400070c

08001204 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA1_Stream2_IRQHandler+0xc>)
 8001208:	f003 f910 	bl	800442c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800120c:	bd08      	pop	{r3, pc}
 800120e:	bf00      	nop
 8001210:	2400061c 	.word	0x2400061c

08001214 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Stream3_IRQHandler+0xc>)
 8001218:	f003 f908 	bl	800442c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800121c:	bd08      	pop	{r3, pc}
 800121e:	bf00      	nop
 8001220:	240005a4 	.word	0x240005a4

08001224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <USART1_IRQHandler+0xc>)
 8001228:	f007 fd9e 	bl	8008d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800122c:	bd08      	pop	{r3, pc}
 800122e:	bf00      	nop
 8001230:	24000814 	.word	0x24000814

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART2_IRQHandler+0xc>)
 8001238:	f007 fd96 	bl	8008d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123c:	bd08      	pop	{r3, pc}
 800123e:	bf00      	nop
 8001240:	240008a4 	.word	0x240008a4

08001244 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001246:	4802      	ldr	r0, [pc, #8]	; (8001250 <USART3_IRQHandler+0xc>)
 8001248:	f007 fd8e 	bl	8008d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800124c:	bd08      	pop	{r3, pc}
 800124e:	bf00      	nop
 8001250:	24000934 	.word	0x24000934

08001254 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001254:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM6_DAC_IRQHandler+0xc>)
 8001258:	f007 f8fe 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800125c:	bd08      	pop	{r3, pc}
 800125e:	bf00      	nop
 8001260:	24000424 	.word	0x24000424

08001264 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <USART6_IRQHandler+0xc>)
 8001268:	f007 fd7e 	bl	8008d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	24000a54 	.word	0x24000a54

08001274 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001274:	2001      	movs	r0, #1
 8001276:	4770      	bx	lr

08001278 <_kill>:

int _kill(int pid, int sig)
{
 8001278:	b508      	push	{r3, lr}
	errno = EINVAL;
 800127a:	f00d f8d9 	bl	800e430 <__errno>
 800127e:	2316      	movs	r3, #22
 8001280:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001282:	f04f 30ff 	mov.w	r0, #4294967295
 8001286:	bd08      	pop	{r3, pc}

08001288 <_exit>:

void _exit (int status)
{
 8001288:	b508      	push	{r3, lr}
	errno = EINVAL;
 800128a:	f00d f8d1 	bl	800e430 <__errno>
 800128e:	2316      	movs	r3, #22
 8001290:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001292:	e7fe      	b.n	8001292 <_exit+0xa>

08001294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	1e16      	subs	r6, r2, #0
 8001298:	dd07      	ble.n	80012aa <_read+0x16>
 800129a:	460c      	mov	r4, r1
 800129c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	42a5      	cmp	r5, r4
 80012a8:	d1f9      	bne.n	800129e <_read+0xa>
	}

return len;
}
 80012aa:	4630      	mov	r0, r6
 80012ac:	bd70      	pop	{r4, r5, r6, pc}

080012ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ae:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	1e16      	subs	r6, r2, #0
 80012b2:	dd07      	ble.n	80012c4 <_write+0x16>
 80012b4:	460c      	mov	r4, r1
 80012b6:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80012b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80012bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	42a5      	cmp	r5, r4
 80012c2:	d1f9      	bne.n	80012b8 <_write+0xa>
	}
	return len;
}
 80012c4:	4630      	mov	r0, r6
 80012c6:	bd70      	pop	{r4, r5, r6, pc}

080012c8 <_close>:

int _close(int file)
{
	return -1;
}
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr

080012d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80012d8:	2001      	movs	r0, #1
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80012dc:	2000      	movs	r0, #0
 80012de:	4770      	bx	lr

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b508      	push	{r3, lr}
 80012e2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <_sbrk+0x38>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	b152      	cbz	r2, 8001300 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <_sbrk+0x38>)
 80012ec:	6810      	ldr	r0, [r2, #0]
 80012ee:	4403      	add	r3, r0
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <_sbrk+0x3c>)
 80012f2:	490b      	ldr	r1, [pc, #44]	; (8001320 <_sbrk+0x40>)
 80012f4:	1a52      	subs	r2, r2, r1
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <_sbrk+0x38>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80012fe:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x38>)
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <_sbrk+0x44>)
 8001304:	6011      	str	r1, [r2, #0]
 8001306:	e7f0      	b.n	80012ea <_sbrk+0xa>
    errno = ENOMEM;
 8001308:	f00d f892 	bl	800e430 <__errno>
 800130c:	230c      	movs	r3, #12
 800130e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	e7f3      	b.n	80012fe <_sbrk+0x1e>
 8001316:	bf00      	nop
 8001318:	24000470 	.word	0x24000470
 800131c:	24080000 	.word	0x24080000
 8001320:	00000400 	.word	0x00000400
 8001324:	24011790 	.word	0x24011790

08001328 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <SystemInit+0xa8>)
 800132a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800132e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <SystemInit+0xac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	2b06      	cmp	r3, #6
 8001340:	d806      	bhi.n	8001350 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <SystemInit+0xac>)
 8001344:	6813      	ldr	r3, [r2, #0]
 8001346:	f023 030f 	bic.w	r3, r3, #15
 800134a:	f043 0307 	orr.w	r3, r3, #7
 800134e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <SystemInit+0xb0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <SystemInit+0xb4>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
  
//  SCB->VTOR = FLASH_BASE; /* sets the initial address of interrupt vector */

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <SystemInit+0xac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f013 0f08 	tst.w	r3, #8
 800136e:	d006      	beq.n	800137e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <SystemInit+0xac>)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f023 030f 	bic.w	r3, r3, #15
 8001378:	f043 0307 	orr.w	r3, r3, #7
 800137c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <SystemInit+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001384:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001386:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001388:	4915      	ldr	r1, [pc, #84]	; (80013e0 <SystemInit+0xb8>)
 800138a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800138c:	4915      	ldr	r1, [pc, #84]	; (80013e4 <SystemInit+0xbc>)
 800138e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001390:	4915      	ldr	r1, [pc, #84]	; (80013e8 <SystemInit+0xc0>)
 8001392:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001396:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001398:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800139a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80013a4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <SystemInit+0xc4>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <SystemInit+0xc8>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b4:	d203      	bcs.n	80013be <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <SystemInit+0xcc>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SystemInit+0xd0>)
 80013c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c6:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <SystemInit+0xa8>)
 80013c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	52002000 	.word	0x52002000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e0:	02020200 	.word	0x02020200
 80013e4:	01ff0000 	.word	0x01ff0000
 80013e8:	01010280 	.word	0x01010280
 80013ec:	5c001000 	.word	0x5c001000
 80013f0:	ffff0000 	.word	0xffff0000
 80013f4:	51008000 	.word	0x51008000
 80013f8:	52004000 	.word	0x52004000

080013fc <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim15);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013fc:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM1)
 80013fe:	6803      	ldr	r3, [r0, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_TIM_PWM_MspInit+0x4c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d004      	beq.n	8001410 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM5)
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_TIM_PWM_MspInit+0x50>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00f      	beq.n	800142c <HAL_TIM_PWM_MspInit+0x30>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800140c:	b002      	add	sp, #8
 800140e:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_TIM_PWM_MspInit+0x54>)
 8001412:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800141e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	e7ef      	b.n	800140c <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_TIM_PWM_MspInit+0x54>)
 800142e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800143a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9b01      	ldr	r3, [sp, #4]
}
 8001446:	e7e1      	b.n	800140c <HAL_TIM_PWM_MspInit+0x10>
 8001448:	40010000 	.word	0x40010000
 800144c:	40000c00 	.word	0x40000c00
 8001450:	58024400 	.word	0x58024400

08001454 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001454:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM4)
 8001456:	6803      	ldr	r3, [r0, #0]
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_TIM_Base_MspInit+0x4c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d004      	beq.n	8001468 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_TIM_Base_MspInit+0x50>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00f      	beq.n	8001484 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001464:	b002      	add	sp, #8
 8001466:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_TIM_Base_MspInit+0x54>)
 800146a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800146e:	f042 0204 	orr.w	r2, r2, #4
 8001472:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	9b00      	ldr	r3, [sp, #0]
 8001482:	e7ef      	b.n	8001464 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_TIM_Base_MspInit+0x54>)
 8001486:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800148a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800148e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9b01      	ldr	r3, [sp, #4]
}
 800149e:	e7e1      	b.n	8001464 <HAL_TIM_Base_MspInit+0x10>
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40014000 	.word	0x40014000
 80014a8:	58024400 	.word	0x58024400

080014ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ac:	b500      	push	{lr}
 80014ae:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	2300      	movs	r3, #0
 80014b2:	9305      	str	r3, [sp, #20]
 80014b4:	9306      	str	r3, [sp, #24]
 80014b6:	9307      	str	r3, [sp, #28]
 80014b8:	9308      	str	r3, [sp, #32]
 80014ba:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 80014bc:	6803      	ldr	r3, [r0, #0]
 80014be:	4a37      	ldr	r2, [pc, #220]	; (800159c <HAL_TIM_MspPostInit+0xf0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d00b      	beq.n	80014dc <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80014c4:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <HAL_TIM_MspPostInit+0xf4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d021      	beq.n	800150e <HAL_TIM_MspPostInit+0x62>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 80014ca:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <HAL_TIM_MspPostInit+0xf8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d036      	beq.n	800153e <HAL_TIM_MspPostInit+0x92>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_TIM_MspPostInit+0xfc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d049      	beq.n	800156a <HAL_TIM_MspPostInit+0xbe>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80014d6:	b00b      	add	sp, #44	; 0x2c
 80014d8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_TIM_MspPostInit+0x100>)
 80014de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014e2:	f042 0210 	orr.w	r2, r2, #16
 80014e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001500:	2301      	movs	r3, #1
 8001502:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001504:	a905      	add	r1, sp, #20
 8001506:	482a      	ldr	r0, [pc, #168]	; (80015b0 <HAL_TIM_MspPostInit+0x104>)
 8001508:	f003 fc4c 	bl	8004da4 <HAL_GPIO_Init>
 800150c:	e7e3      	b.n	80014d6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_TIM_MspPostInit+0x100>)
 8001510:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001514:	f042 0208 	orr.w	r2, r2, #8
 8001518:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001532:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001534:	a905      	add	r1, sp, #20
 8001536:	481f      	ldr	r0, [pc, #124]	; (80015b4 <HAL_TIM_MspPostInit+0x108>)
 8001538:	f003 fc34 	bl	8004da4 <HAL_GPIO_Init>
 800153c:	e7cb      	b.n	80014d6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_TIM_MspPostInit+0x100>)
 8001540:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	9303      	str	r3, [sp, #12]
 8001556:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001558:	2302      	movs	r3, #2
 800155a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800155e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	a905      	add	r1, sp, #20
 8001562:	4815      	ldr	r0, [pc, #84]	; (80015b8 <HAL_TIM_MspPostInit+0x10c>)
 8001564:	f003 fc1e 	bl	8004da4 <HAL_GPIO_Init>
 8001568:	e7b5      	b.n	80014d6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_TIM_MspPostInit+0x100>)
 800156c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	9304      	str	r3, [sp, #16]
 8001582:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001584:	2308      	movs	r3, #8
 8001586:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800158c:	2304      	movs	r3, #4
 800158e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	a905      	add	r1, sp, #20
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <HAL_TIM_MspPostInit+0x10c>)
 8001594:	f003 fc06 	bl	8004da4 <HAL_GPIO_Init>
}
 8001598:	e79d      	b.n	80014d6 <HAL_TIM_MspPostInit+0x2a>
 800159a:	bf00      	nop
 800159c:	40010000 	.word	0x40010000
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40000c00 	.word	0x40000c00
 80015a8:	40014000 	.word	0x40014000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58021000 	.word	0x58021000
 80015b4:	58020c00 	.word	0x58020c00
 80015b8:	58020000 	.word	0x58020000

080015bc <MX_TIM1_Init>:
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	2400      	movs	r4, #0
 80015c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80015c4:	9414      	str	r4, [sp, #80]	; 0x50
 80015c6:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	940c      	str	r4, [sp, #48]	; 0x30
 80015ca:	940d      	str	r4, [sp, #52]	; 0x34
 80015cc:	940e      	str	r4, [sp, #56]	; 0x38
 80015ce:	940f      	str	r4, [sp, #60]	; 0x3c
 80015d0:	9410      	str	r4, [sp, #64]	; 0x40
 80015d2:	9411      	str	r4, [sp, #68]	; 0x44
 80015d4:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d6:	222c      	movs	r2, #44	; 0x2c
 80015d8:	4621      	mov	r1, r4
 80015da:	a801      	add	r0, sp, #4
 80015dc:	f00d f874 	bl	800e6c8 <memset>
  htim1.Instance = TIM1;
 80015e0:	4827      	ldr	r0, [pc, #156]	; (8001680 <MX_TIM1_Init+0xc4>)
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_TIM1_Init+0xc8>)
 80015e4:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 64000-1;
 80015e6:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 80015ea:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 20-1;
 80015ee:	2313      	movs	r3, #19
 80015f0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f8:	f007 f89e 	bl	8008738 <HAL_TIM_PWM_Init>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d133      	bne.n	8001668 <MX_TIM1_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001604:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001608:	a913      	add	r1, sp, #76	; 0x4c
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_TIM1_Init+0xc4>)
 800160c:	f007 fa82 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	2800      	cmp	r0, #0
 8001612:	d12c      	bne.n	800166e <MX_TIM1_Init+0xb2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001614:	2360      	movs	r3, #96	; 0x60
 8001616:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 15;
 8001618:	230f      	movs	r3, #15
 800161a:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001620:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001624:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001626:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001628:	2204      	movs	r2, #4
 800162a:	a90c      	add	r1, sp, #48	; 0x30
 800162c:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_TIM1_Init+0xc4>)
 800162e:	f007 f8f5 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8001632:	b9f8      	cbnz	r0, 8001674 <MX_TIM1_Init+0xb8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001638:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800163c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001644:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001646:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001648:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164e:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001650:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001652:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001654:	a901      	add	r1, sp, #4
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <MX_TIM1_Init+0xc4>)
 8001658:	f007 faba 	bl	8008bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800165c:	b968      	cbnz	r0, 800167a <MX_TIM1_Init+0xbe>
  HAL_TIM_MspPostInit(&htim1);
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_TIM1_Init+0xc4>)
 8001660:	f7ff ff24 	bl	80014ac <HAL_TIM_MspPostInit>
}
 8001664:	b016      	add	sp, #88	; 0x58
 8001666:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001668:	f7ff fd4c 	bl	8001104 <Error_Handler>
 800166c:	e7c8      	b.n	8001600 <MX_TIM1_Init+0x44>
    Error_Handler();
 800166e:	f7ff fd49 	bl	8001104 <Error_Handler>
 8001672:	e7cf      	b.n	8001614 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001674:	f7ff fd46 	bl	8001104 <Error_Handler>
 8001678:	e7dc      	b.n	8001634 <MX_TIM1_Init+0x78>
    Error_Handler();
 800167a:	f7ff fd43 	bl	8001104 <Error_Handler>
 800167e:	e7ee      	b.n	800165e <MX_TIM1_Init+0xa2>
 8001680:	24000474 	.word	0x24000474
 8001684:	40010000 	.word	0x40010000

08001688 <MX_TIM4_Init>:
{
 8001688:	b500      	push	{lr}
 800168a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168c:	2300      	movs	r3, #0
 800168e:	930a      	str	r3, [sp, #40]	; 0x28
 8001690:	930b      	str	r3, [sp, #44]	; 0x2c
 8001692:	930c      	str	r3, [sp, #48]	; 0x30
 8001694:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	9307      	str	r3, [sp, #28]
 8001698:	9308      	str	r3, [sp, #32]
 800169a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	9303      	str	r3, [sp, #12]
 80016a4:	9304      	str	r3, [sp, #16]
 80016a6:	9305      	str	r3, [sp, #20]
 80016a8:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 80016aa:	4821      	ldr	r0, [pc, #132]	; (8001730 <MX_TIM4_Init+0xa8>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <MX_TIM4_Init+0xac>)
 80016ae:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80016b0:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80016b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016be:	f007 f80b 	bl	80086d8 <HAL_TIM_Base_Init>
 80016c2:	bb28      	cbnz	r0, 8001710 <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016ca:	a90a      	add	r1, sp, #40	; 0x28
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM4_Init+0xa8>)
 80016ce:	f007 f94f 	bl	8008970 <HAL_TIM_ConfigClockSource>
 80016d2:	bb00      	cbnz	r0, 8001716 <MX_TIM4_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <MX_TIM4_Init+0xa8>)
 80016d6:	f007 f82f 	bl	8008738 <HAL_TIM_PWM_Init>
 80016da:	b9f8      	cbnz	r0, 800171c <MX_TIM4_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e2:	a907      	add	r1, sp, #28
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_TIM4_Init+0xa8>)
 80016e6:	f007 fa15 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	b9d0      	cbnz	r0, 8001722 <MX_TIM4_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016f8:	220c      	movs	r2, #12
 80016fa:	4669      	mov	r1, sp
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM4_Init+0xa8>)
 80016fe:	f007 f88d 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8001702:	b988      	cbnz	r0, 8001728 <MX_TIM4_Init+0xa0>
  HAL_TIM_MspPostInit(&htim4);
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <MX_TIM4_Init+0xa8>)
 8001706:	f7ff fed1 	bl	80014ac <HAL_TIM_MspPostInit>
}
 800170a:	b00f      	add	sp, #60	; 0x3c
 800170c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001710:	f7ff fcf8 	bl	8001104 <Error_Handler>
 8001714:	e7d6      	b.n	80016c4 <MX_TIM4_Init+0x3c>
    Error_Handler();
 8001716:	f7ff fcf5 	bl	8001104 <Error_Handler>
 800171a:	e7db      	b.n	80016d4 <MX_TIM4_Init+0x4c>
    Error_Handler();
 800171c:	f7ff fcf2 	bl	8001104 <Error_Handler>
 8001720:	e7dc      	b.n	80016dc <MX_TIM4_Init+0x54>
    Error_Handler();
 8001722:	f7ff fcef 	bl	8001104 <Error_Handler>
 8001726:	e7e1      	b.n	80016ec <MX_TIM4_Init+0x64>
    Error_Handler();
 8001728:	f7ff fcec 	bl	8001104 <Error_Handler>
 800172c:	e7ea      	b.n	8001704 <MX_TIM4_Init+0x7c>
 800172e:	bf00      	nop
 8001730:	2400050c 	.word	0x2400050c
 8001734:	40000800 	.word	0x40000800

08001738 <MX_TIM5_Init>:
{
 8001738:	b500      	push	{lr}
 800173a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	2300      	movs	r3, #0
 800173e:	9307      	str	r3, [sp, #28]
 8001740:	9308      	str	r3, [sp, #32]
 8001742:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	9305      	str	r3, [sp, #20]
 8001750:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <MX_TIM5_Init+0x80>)
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <MX_TIM5_Init+0x84>)
 8001756:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 6400-1;
 8001758:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800175c:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 200-1;
 8001760:	22c7      	movs	r2, #199	; 0xc7
 8001762:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001768:	f006 ffe6 	bl	8008738 <HAL_TIM_PWM_Init>
 800176c:	b9d0      	cbnz	r0, 80017a4 <MX_TIM5_Init+0x6c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001774:	a907      	add	r1, sp, #28
 8001776:	4810      	ldr	r0, [pc, #64]	; (80017b8 <MX_TIM5_Init+0x80>)
 8001778:	f007 f9cc 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	b9a8      	cbnz	r0, 80017aa <MX_TIM5_Init+0x72>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177e:	2360      	movs	r3, #96	; 0x60
 8001780:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 100-1;
 8001782:	2363      	movs	r3, #99	; 0x63
 8001784:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178c:	2204      	movs	r2, #4
 800178e:	4669      	mov	r1, sp
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <MX_TIM5_Init+0x80>)
 8001792:	f007 f843 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8001796:	b958      	cbnz	r0, 80017b0 <MX_TIM5_Init+0x78>
  HAL_TIM_MspPostInit(&htim5);
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <MX_TIM5_Init+0x80>)
 800179a:	f7ff fe87 	bl	80014ac <HAL_TIM_MspPostInit>
}
 800179e:	b00b      	add	sp, #44	; 0x2c
 80017a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017a4:	f7ff fcae 	bl	8001104 <Error_Handler>
 80017a8:	e7e1      	b.n	800176e <MX_TIM5_Init+0x36>
    Error_Handler();
 80017aa:	f7ff fcab 	bl	8001104 <Error_Handler>
 80017ae:	e7e6      	b.n	800177e <MX_TIM5_Init+0x46>
    Error_Handler();
 80017b0:	f7ff fca8 	bl	8001104 <Error_Handler>
 80017b4:	e7f0      	b.n	8001798 <MX_TIM5_Init+0x60>
 80017b6:	bf00      	nop
 80017b8:	24000558 	.word	0x24000558
 80017bc:	40000c00 	.word	0x40000c00

080017c0 <MX_TIM15_Init>:
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	b09a      	sub	sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c4:	2400      	movs	r4, #0
 80017c6:	9416      	str	r4, [sp, #88]	; 0x58
 80017c8:	9417      	str	r4, [sp, #92]	; 0x5c
 80017ca:	9418      	str	r4, [sp, #96]	; 0x60
 80017cc:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80017d0:	9414      	str	r4, [sp, #80]	; 0x50
 80017d2:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d4:	940c      	str	r4, [sp, #48]	; 0x30
 80017d6:	940d      	str	r4, [sp, #52]	; 0x34
 80017d8:	940e      	str	r4, [sp, #56]	; 0x38
 80017da:	940f      	str	r4, [sp, #60]	; 0x3c
 80017dc:	9410      	str	r4, [sp, #64]	; 0x40
 80017de:	9411      	str	r4, [sp, #68]	; 0x44
 80017e0:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e2:	222c      	movs	r2, #44	; 0x2c
 80017e4:	4621      	mov	r1, r4
 80017e6:	a801      	add	r0, sp, #4
 80017e8:	f00c ff6e 	bl	800e6c8 <memset>
  htim15.Instance = TIM15;
 80017ec:	482e      	ldr	r0, [pc, #184]	; (80018a8 <MX_TIM15_Init+0xe8>)
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <MX_TIM15_Init+0xec>)
 80017f0:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 6400;
 80017f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017f6:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 200-1;
 80017fa:	23c7      	movs	r3, #199	; 0xc7
 80017fc:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8001800:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001804:	f006 ff68 	bl	80086d8 <HAL_TIM_Base_Init>
 8001808:	2800      	cmp	r0, #0
 800180a:	d13b      	bne.n	8001884 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001810:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001812:	a916      	add	r1, sp, #88	; 0x58
 8001814:	4824      	ldr	r0, [pc, #144]	; (80018a8 <MX_TIM15_Init+0xe8>)
 8001816:	f007 f8ab 	bl	8008970 <HAL_TIM_ConfigClockSource>
 800181a:	2800      	cmp	r0, #0
 800181c:	d135      	bne.n	800188a <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800181e:	4822      	ldr	r0, [pc, #136]	; (80018a8 <MX_TIM15_Init+0xe8>)
 8001820:	f006 ff8a 	bl	8008738 <HAL_TIM_PWM_Init>
 8001824:	2800      	cmp	r0, #0
 8001826:	d133      	bne.n	8001890 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800182e:	a913      	add	r1, sp, #76	; 0x4c
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <MX_TIM15_Init+0xe8>)
 8001832:	f007 f96f 	bl	8008b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	2800      	cmp	r0, #0
 8001838:	d12d      	bne.n	8001896 <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	2360      	movs	r3, #96	; 0x60
 800183c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 800183e:	2363      	movs	r3, #99	; 0x63
 8001840:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001842:	2300      	movs	r3, #0
 8001844:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001846:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800184c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184e:	2204      	movs	r2, #4
 8001850:	a90c      	add	r1, sp, #48	; 0x30
 8001852:	4815      	ldr	r0, [pc, #84]	; (80018a8 <MX_TIM15_Init+0xe8>)
 8001854:	f006 ffe2 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8001858:	bb00      	cbnz	r0, 800189c <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001860:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001862:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001864:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800186c:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800186e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001870:	a901      	add	r1, sp, #4
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_TIM15_Init+0xe8>)
 8001874:	f007 f9ac 	bl	8008bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001878:	b998      	cbnz	r0, 80018a2 <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 800187a:	480b      	ldr	r0, [pc, #44]	; (80018a8 <MX_TIM15_Init+0xe8>)
 800187c:	f7ff fe16 	bl	80014ac <HAL_TIM_MspPostInit>
}
 8001880:	b01a      	add	sp, #104	; 0x68
 8001882:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001884:	f7ff fc3e 	bl	8001104 <Error_Handler>
 8001888:	e7c0      	b.n	800180c <MX_TIM15_Init+0x4c>
    Error_Handler();
 800188a:	f7ff fc3b 	bl	8001104 <Error_Handler>
 800188e:	e7c6      	b.n	800181e <MX_TIM15_Init+0x5e>
    Error_Handler();
 8001890:	f7ff fc38 	bl	8001104 <Error_Handler>
 8001894:	e7c8      	b.n	8001828 <MX_TIM15_Init+0x68>
    Error_Handler();
 8001896:	f7ff fc35 	bl	8001104 <Error_Handler>
 800189a:	e7ce      	b.n	800183a <MX_TIM15_Init+0x7a>
    Error_Handler();
 800189c:	f7ff fc32 	bl	8001104 <Error_Handler>
 80018a0:	e7db      	b.n	800185a <MX_TIM15_Init+0x9a>
    Error_Handler();
 80018a2:	f7ff fc2f 	bl	8001104 <Error_Handler>
 80018a6:	e7e8      	b.n	800187a <MX_TIM15_Init+0xba>
 80018a8:	240004c0 	.word	0x240004c0
 80018ac:	40014000 	.word	0x40014000

080018b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <MX_LPUART1_UART_Init+0x60>)
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_LPUART1_UART_Init+0x64>)
 80018b6:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 576000;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_LPUART1_UART_Init+0x68>)
 80018ba:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018bc:	2300      	movs	r3, #0
 80018be:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018c0:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	220c      	movs	r2, #12
 80018c6:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c8:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018cc:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ce:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018d0:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018d2:	f008 f93d 	bl	8009b50 <HAL_UART_Init>
 80018d6:	b970      	cbnz	r0, 80018f6 <MX_LPUART1_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d8:	2100      	movs	r1, #0
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_LPUART1_UART_Init+0x60>)
 80018dc:	f008 fa0e 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 80018e0:	b960      	cbnz	r0, 80018fc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	480a      	ldr	r0, [pc, #40]	; (8001910 <MX_LPUART1_UART_Init+0x60>)
 80018e6:	f008 fa2e 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 80018ea:	b950      	cbnz	r0, 8001902 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <MX_LPUART1_UART_Init+0x60>)
 80018ee:	f008 f9e6 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 80018f2:	b948      	cbnz	r0, 8001908 <MX_LPUART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80018f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018f6:	f7ff fc05 	bl	8001104 <Error_Handler>
 80018fa:	e7ed      	b.n	80018d8 <MX_LPUART1_UART_Init+0x28>
    Error_Handler();
 80018fc:	f7ff fc02 	bl	8001104 <Error_Handler>
 8001900:	e7ef      	b.n	80018e2 <MX_LPUART1_UART_Init+0x32>
    Error_Handler();
 8001902:	f7ff fbff 	bl	8001104 <Error_Handler>
 8001906:	e7f1      	b.n	80018ec <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8001908:	f7ff fbfc 	bl	8001104 <Error_Handler>
}
 800190c:	e7f2      	b.n	80018f4 <MX_LPUART1_UART_Init+0x44>
 800190e:	bf00      	nop
 8001910:	24000784 	.word	0x24000784
 8001914:	58000c00 	.word	0x58000c00
 8001918:	0008ca00 	.word	0x0008ca00

0800191c <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 800191c:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <MX_UART4_Init+0x60>)
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_UART4_Init+0x64>)
 8001922:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 576000;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_UART4_Init+0x68>)
 8001926:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001928:	2300      	movs	r3, #0
 800192a:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800192c:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800192e:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001930:	220c      	movs	r2, #12
 8001932:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001934:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001936:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001938:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800193a:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193c:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800193e:	f008 f907 	bl	8009b50 <HAL_UART_Init>
 8001942:	b970      	cbnz	r0, 8001962 <MX_UART4_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001944:	2100      	movs	r1, #0
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_UART4_Init+0x60>)
 8001948:	f008 f9d8 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 800194c:	b960      	cbnz	r0, 8001968 <MX_UART4_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	480a      	ldr	r0, [pc, #40]	; (800197c <MX_UART4_Init+0x60>)
 8001952:	f008 f9f8 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	b950      	cbnz	r0, 800196e <MX_UART4_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <MX_UART4_Init+0x60>)
 800195a:	f008 f9b0 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 800195e:	b948      	cbnz	r0, 8001974 <MX_UART4_Init+0x58>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001960:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001962:	f7ff fbcf 	bl	8001104 <Error_Handler>
 8001966:	e7ed      	b.n	8001944 <MX_UART4_Init+0x28>
    Error_Handler();
 8001968:	f7ff fbcc 	bl	8001104 <Error_Handler>
 800196c:	e7ef      	b.n	800194e <MX_UART4_Init+0x32>
    Error_Handler();
 800196e:	f7ff fbc9 	bl	8001104 <Error_Handler>
 8001972:	e7f1      	b.n	8001958 <MX_UART4_Init+0x3c>
    Error_Handler();
 8001974:	f7ff fbc6 	bl	8001104 <Error_Handler>
}
 8001978:	e7f2      	b.n	8001960 <MX_UART4_Init+0x44>
 800197a:	bf00      	nop
 800197c:	240009c4 	.word	0x240009c4
 8001980:	40004c00 	.word	0x40004c00
 8001984:	0008ca00 	.word	0x0008ca00

08001988 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001988:	b508      	push	{r3, lr}
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800198a:	4817      	ldr	r0, [pc, #92]	; (80019e8 <MX_UART8_Init+0x60>)
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_UART8_Init+0x64>)
 800198e:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 576000;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_UART8_Init+0x68>)
 8001992:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001994:	2300      	movs	r3, #0
 8001996:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001998:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800199a:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800199c:	220c      	movs	r2, #12
 800199e:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a0:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a2:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a4:	6203      	str	r3, [r0, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a6:	6243      	str	r3, [r0, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80019aa:	f008 f8d1 	bl	8009b50 <HAL_UART_Init>
 80019ae:	b970      	cbnz	r0, 80019ce <MX_UART8_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_UART8_Init+0x60>)
 80019b4:	f008 f9a2 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 80019b8:	b960      	cbnz	r0, 80019d4 <MX_UART8_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ba:	2100      	movs	r1, #0
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <MX_UART8_Init+0x60>)
 80019be:	f008 f9c2 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 80019c2:	b950      	cbnz	r0, 80019da <MX_UART8_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <MX_UART8_Init+0x60>)
 80019c6:	f008 f97a 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 80019ca:	b948      	cbnz	r0, 80019e0 <MX_UART8_Init+0x58>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80019cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019ce:	f7ff fb99 	bl	8001104 <Error_Handler>
 80019d2:	e7ed      	b.n	80019b0 <MX_UART8_Init+0x28>
    Error_Handler();
 80019d4:	f7ff fb96 	bl	8001104 <Error_Handler>
 80019d8:	e7ef      	b.n	80019ba <MX_UART8_Init+0x32>
    Error_Handler();
 80019da:	f7ff fb93 	bl	8001104 <Error_Handler>
 80019de:	e7f1      	b.n	80019c4 <MX_UART8_Init+0x3c>
    Error_Handler();
 80019e0:	f7ff fb90 	bl	8001104 <Error_Handler>
}
 80019e4:	e7f2      	b.n	80019cc <MX_UART8_Init+0x44>
 80019e6:	bf00      	nop
 80019e8:	24000ae4 	.word	0x24000ae4
 80019ec:	40007c00 	.word	0x40007c00
 80019f0:	0008ca00 	.word	0x0008ca00

080019f4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019f4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f6:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_USART1_UART_Init+0x60>)
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_USART1_UART_Init+0x64>)
 80019fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 576000;
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_USART1_UART_Init+0x68>)
 80019fe:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a00:	2300      	movs	r3, #0
 8001a02:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a08:	220c      	movs	r2, #12
 8001a0a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a10:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a12:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a16:	f008 f89b 	bl	8009b50 <HAL_UART_Init>
 8001a1a:	b970      	cbnz	r0, 8001a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_USART1_UART_Init+0x60>)
 8001a20:	f008 f96c 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 8001a24:	b960      	cbnz	r0, 8001a40 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <MX_USART1_UART_Init+0x60>)
 8001a2a:	f008 f98c 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8001a2e:	b950      	cbnz	r0, 8001a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <MX_USART1_UART_Init+0x60>)
 8001a32:	f008 f944 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8001a36:	b948      	cbnz	r0, 8001a4c <MX_USART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a3a:	f7ff fb63 	bl	8001104 <Error_Handler>
 8001a3e:	e7ed      	b.n	8001a1c <MX_USART1_UART_Init+0x28>
    Error_Handler();
 8001a40:	f7ff fb60 	bl	8001104 <Error_Handler>
 8001a44:	e7ef      	b.n	8001a26 <MX_USART1_UART_Init+0x32>
    Error_Handler();
 8001a46:	f7ff fb5d 	bl	8001104 <Error_Handler>
 8001a4a:	e7f1      	b.n	8001a30 <MX_USART1_UART_Init+0x3c>
    Error_Handler();
 8001a4c:	f7ff fb5a 	bl	8001104 <Error_Handler>
}
 8001a50:	e7f2      	b.n	8001a38 <MX_USART1_UART_Init+0x44>
 8001a52:	bf00      	nop
 8001a54:	24000814 	.word	0x24000814
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	0008ca00 	.word	0x0008ca00

08001a60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a60:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a62:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <MX_USART2_UART_Init+0x60>)
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_USART2_UART_Init+0x64>)
 8001a66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 576000;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_USART2_UART_Init+0x68>)
 8001a6a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a72:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	220c      	movs	r2, #12
 8001a76:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a78:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7a:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7c:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7e:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a80:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a82:	f008 f865 	bl	8009b50 <HAL_UART_Init>
 8001a86:	b970      	cbnz	r0, 8001aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_USART2_UART_Init+0x60>)
 8001a8c:	f008 f936 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 8001a90:	b960      	cbnz	r0, 8001aac <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a92:	2100      	movs	r1, #0
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <MX_USART2_UART_Init+0x60>)
 8001a96:	f008 f956 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9a:	b950      	cbnz	r0, 8001ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <MX_USART2_UART_Init+0x60>)
 8001a9e:	f008 f90e 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8001aa2:	b948      	cbnz	r0, 8001ab8 <MX_USART2_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001aa6:	f7ff fb2d 	bl	8001104 <Error_Handler>
 8001aaa:	e7ed      	b.n	8001a88 <MX_USART2_UART_Init+0x28>
    Error_Handler();
 8001aac:	f7ff fb2a 	bl	8001104 <Error_Handler>
 8001ab0:	e7ef      	b.n	8001a92 <MX_USART2_UART_Init+0x32>
    Error_Handler();
 8001ab2:	f7ff fb27 	bl	8001104 <Error_Handler>
 8001ab6:	e7f1      	b.n	8001a9c <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 8001ab8:	f7ff fb24 	bl	8001104 <Error_Handler>
}
 8001abc:	e7f2      	b.n	8001aa4 <MX_USART2_UART_Init+0x44>
 8001abe:	bf00      	nop
 8001ac0:	240008a4 	.word	0x240008a4
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	0008ca00 	.word	0x0008ca00

08001acc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001acc:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <MX_USART3_UART_Init+0x60>)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART3_UART_Init+0x64>)
 8001ad2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 576000;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_USART3_UART_Init+0x68>)
 8001ad6:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001adc:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ade:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae4:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae6:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae8:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aea:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aee:	f008 f82f 	bl	8009b50 <HAL_UART_Init>
 8001af2:	b970      	cbnz	r0, 8001b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af4:	2100      	movs	r1, #0
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_USART3_UART_Init+0x60>)
 8001af8:	f008 f900 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 8001afc:	b960      	cbnz	r0, 8001b18 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	480a      	ldr	r0, [pc, #40]	; (8001b2c <MX_USART3_UART_Init+0x60>)
 8001b02:	f008 f920 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8001b06:	b950      	cbnz	r0, 8001b1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <MX_USART3_UART_Init+0x60>)
 8001b0a:	f008 f8d8 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8001b0e:	b948      	cbnz	r0, 8001b24 <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b12:	f7ff faf7 	bl	8001104 <Error_Handler>
 8001b16:	e7ed      	b.n	8001af4 <MX_USART3_UART_Init+0x28>
    Error_Handler();
 8001b18:	f7ff faf4 	bl	8001104 <Error_Handler>
 8001b1c:	e7ef      	b.n	8001afe <MX_USART3_UART_Init+0x32>
    Error_Handler();
 8001b1e:	f7ff faf1 	bl	8001104 <Error_Handler>
 8001b22:	e7f1      	b.n	8001b08 <MX_USART3_UART_Init+0x3c>
    Error_Handler();
 8001b24:	f7ff faee 	bl	8001104 <Error_Handler>
}
 8001b28:	e7f2      	b.n	8001b10 <MX_USART3_UART_Init+0x44>
 8001b2a:	bf00      	nop
 8001b2c:	24000934 	.word	0x24000934
 8001b30:	40004800 	.word	0x40004800
 8001b34:	0008ca00 	.word	0x0008ca00

08001b38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b38:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <MX_USART6_UART_Init+0x60>)
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_USART6_UART_Init+0x64>)
 8001b3e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 576000;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_USART6_UART_Init+0x68>)
 8001b42:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b44:	2300      	movs	r3, #0
 8001b46:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b48:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b4a:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b50:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b52:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b54:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b56:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b58:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b5a:	f007 fff9 	bl	8009b50 <HAL_UART_Init>
 8001b5e:	b970      	cbnz	r0, 8001b7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b60:	2100      	movs	r1, #0
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_USART6_UART_Init+0x60>)
 8001b64:	f008 f8ca 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 8001b68:	b960      	cbnz	r0, 8001b84 <MX_USART6_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <MX_USART6_UART_Init+0x60>)
 8001b6e:	f008 f8ea 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	b950      	cbnz	r0, 8001b8a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <MX_USART6_UART_Init+0x60>)
 8001b76:	f008 f8a2 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8001b7a:	b948      	cbnz	r0, 8001b90 <MX_USART6_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b7e:	f7ff fac1 	bl	8001104 <Error_Handler>
 8001b82:	e7ed      	b.n	8001b60 <MX_USART6_UART_Init+0x28>
    Error_Handler();
 8001b84:	f7ff fabe 	bl	8001104 <Error_Handler>
 8001b88:	e7ef      	b.n	8001b6a <MX_USART6_UART_Init+0x32>
    Error_Handler();
 8001b8a:	f7ff fabb 	bl	8001104 <Error_Handler>
 8001b8e:	e7f1      	b.n	8001b74 <MX_USART6_UART_Init+0x3c>
    Error_Handler();
 8001b90:	f7ff fab8 	bl	8001104 <Error_Handler>
}
 8001b94:	e7f2      	b.n	8001b7c <MX_USART6_UART_Init+0x44>
 8001b96:	bf00      	nop
 8001b98:	24000a54 	.word	0x24000a54
 8001b9c:	40011400 	.word	0x40011400
 8001ba0:	0008ca00 	.word	0x0008ca00

08001ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba4:	b530      	push	{r4, r5, lr}
 8001ba6:	b0c3      	sub	sp, #268	; 0x10c
 8001ba8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	2100      	movs	r1, #0
 8001bac:	913d      	str	r1, [sp, #244]	; 0xf4
 8001bae:	913e      	str	r1, [sp, #248]	; 0xf8
 8001bb0:	913f      	str	r1, [sp, #252]	; 0xfc
 8001bb2:	9140      	str	r1, [sp, #256]	; 0x100
 8001bb4:	9141      	str	r1, [sp, #260]	; 0x104
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb6:	22bc      	movs	r2, #188	; 0xbc
 8001bb8:	a80e      	add	r0, sp, #56	; 0x38
 8001bba:	f00c fd85 	bl	800e6c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	4aab      	ldr	r2, [pc, #684]	; (8001e70 <HAL_UART_MspInit+0x2cc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d017      	beq.n	8001bf6 <HAL_UART_MspInit+0x52>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==UART4)
 8001bc6:	4aab      	ldr	r2, [pc, #684]	; (8001e74 <HAL_UART_MspInit+0x2d0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d045      	beq.n	8001c58 <HAL_UART_MspInit+0xb4>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8001bcc:	4aaa      	ldr	r2, [pc, #680]	; (8001e78 <HAL_UART_MspInit+0x2d4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d072      	beq.n	8001cb8 <HAL_UART_MspInit+0x114>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8001bd2:	4aaa      	ldr	r2, [pc, #680]	; (8001e7c <HAL_UART_MspInit+0x2d8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f000 809f 	beq.w	8001d18 <HAL_UART_MspInit+0x174>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001bda:	4aa9      	ldr	r2, [pc, #676]	; (8001e80 <HAL_UART_MspInit+0x2dc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f000 80f1 	beq.w	8001dc4 <HAL_UART_MspInit+0x220>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8001be2:	4aa8      	ldr	r2, [pc, #672]	; (8001e84 <HAL_UART_MspInit+0x2e0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f000 8163 	beq.w	8001eb0 <HAL_UART_MspInit+0x30c>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8001bea:	4aa7      	ldr	r2, [pc, #668]	; (8001e88 <HAL_UART_MspInit+0x2e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f000 81b5 	beq.w	8001f5c <HAL_UART_MspInit+0x3b8>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bf2:	b043      	add	sp, #268	; 0x10c
 8001bf4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfa:	a80e      	add	r0, sp, #56	; 0x38
 8001bfc:	f004 ffb6 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001c00:	bb38      	cbnz	r0, 8001c52 <HAL_UART_MspInit+0xae>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c02:	4ba2      	ldr	r3, [pc, #648]	; (8001e8c <HAL_UART_MspInit+0x2e8>)
 8001c04:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c08:	f042 0208 	orr.w	r2, r2, #8
 8001c0c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c10:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c14:	f002 0208 	and.w	r2, r2, #8
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c38:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001c44:	2303      	movs	r3, #3
 8001c46:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	a93d      	add	r1, sp, #244	; 0xf4
 8001c4a:	4891      	ldr	r0, [pc, #580]	; (8001e90 <HAL_UART_MspInit+0x2ec>)
 8001c4c:	f003 f8aa 	bl	8004da4 <HAL_GPIO_Init>
 8001c50:	e7cf      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001c52:	f7ff fa57 	bl	8001104 <Error_Handler>
 8001c56:	e7d4      	b.n	8001c02 <HAL_UART_MspInit+0x5e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5c:	a80e      	add	r0, sp, #56	; 0x38
 8001c5e:	f004 ff85 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	bb30      	cbnz	r0, 8001cb2 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_UART_MspInit+0x2e8>)
 8001c66:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001c72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c76:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001c7a:	9202      	str	r2, [sp, #8]
 8001c7c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c82:	f042 0208 	orr.w	r2, r2, #8
 8001c86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c96:	2303      	movs	r3, #3
 8001c98:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	a93d      	add	r1, sp, #244	; 0xf4
 8001caa:	487a      	ldr	r0, [pc, #488]	; (8001e94 <HAL_UART_MspInit+0x2f0>)
 8001cac:	f003 f87a 	bl	8004da4 <HAL_GPIO_Init>
 8001cb0:	e79f      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001cb2:	f7ff fa27 	bl	8001104 <Error_Handler>
 8001cb6:	e7d5      	b.n	8001c64 <HAL_UART_MspInit+0xc0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbc:	a80e      	add	r0, sp, #56	; 0x38
 8001cbe:	f004 ff55 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	bb30      	cbnz	r0, 8001d12 <HAL_UART_MspInit+0x16e>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001cc4:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <HAL_UART_MspInit+0x2e8>)
 8001cc6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cce:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001cd2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cda:	9204      	str	r2, [sp, #16]
 8001cdc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	9305      	str	r3, [sp, #20]
 8001cf4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001d04:	2308      	movs	r3, #8
 8001d06:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d08:	a93d      	add	r1, sp, #244	; 0xf4
 8001d0a:	4863      	ldr	r0, [pc, #396]	; (8001e98 <HAL_UART_MspInit+0x2f4>)
 8001d0c:	f003 f84a 	bl	8004da4 <HAL_GPIO_Init>
 8001d10:	e76f      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001d12:	f7ff f9f7 	bl	8001104 <Error_Handler>
 8001d16:	e7d5      	b.n	8001cc4 <HAL_UART_MspInit+0x120>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	a80e      	add	r0, sp, #56	; 0x38
 8001d1e:	f004 ff25 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d148      	bne.n	8001db8 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_UART_MspInit+0x2e8>)
 8001d28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001d2c:	f042 0210 	orr.w	r2, r2, #16
 8001d30:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001d34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001d38:	f002 0210 	and.w	r2, r2, #16
 8001d3c:	9206      	str	r2, [sp, #24]
 8001d3e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d44:	f042 0202 	orr.w	r2, r2, #2
 8001d48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	9307      	str	r3, [sp, #28]
 8001d56:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d5c:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2500      	movs	r5, #0
 8001d64:	953f      	str	r5, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	9540      	str	r5, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	a93d      	add	r1, sp, #244	; 0xf4
 8001d6e:	484b      	ldr	r0, [pc, #300]	; (8001e9c <HAL_UART_MspInit+0x2f8>)
 8001d70:	f003 f818 	bl	8004da4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001d74:	484a      	ldr	r0, [pc, #296]	; (8001ea0 <HAL_UART_MspInit+0x2fc>)
 8001d76:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_UART_MspInit+0x300>)
 8001d78:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d7a:	2329      	movs	r3, #41	; 0x29
 8001d7c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d80:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d86:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d88:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d90:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d98:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d9a:	f001 fb6d 	bl	8003478 <HAL_DMA_Init>
 8001d9e:	b970      	cbnz	r0, 8001dbe <HAL_UART_MspInit+0x21a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_UART_MspInit+0x2fc>)
 8001da2:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001da4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2105      	movs	r1, #5
 8001daa:	2025      	movs	r0, #37	; 0x25
 8001dac:	f001 f8c4 	bl	8002f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f001 f8f5 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
 8001db6:	e71c      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001db8:	f7ff f9a4 	bl	8001104 <Error_Handler>
 8001dbc:	e7b3      	b.n	8001d26 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001dbe:	f7ff f9a1 	bl	8001104 <Error_Handler>
 8001dc2:	e7ed      	b.n	8001da0 <HAL_UART_MspInit+0x1fc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	a80e      	add	r0, sp, #56	; 0x38
 8001dca:	f004 fecf 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d147      	bne.n	8001e62 <HAL_UART_MspInit+0x2be>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_UART_MspInit+0x2e8>)
 8001dd4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001dd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ddc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001de0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001de4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001de8:	9208      	str	r2, [sp, #32]
 8001dea:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001df0:	f042 0208 	orr.w	r2, r2, #8
 8001df4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	9309      	str	r3, [sp, #36]	; 0x24
 8001e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e04:	2360      	movs	r3, #96	; 0x60
 8001e06:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	953f      	str	r5, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	9540      	str	r5, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e12:	2307      	movs	r3, #7
 8001e14:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e16:	a93d      	add	r1, sp, #244	; 0xf4
 8001e18:	481e      	ldr	r0, [pc, #120]	; (8001e94 <HAL_UART_MspInit+0x2f0>)
 8001e1a:	f002 ffc3 	bl	8004da4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001e1e:	4822      	ldr	r0, [pc, #136]	; (8001ea8 <HAL_UART_MspInit+0x304>)
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_UART_MspInit+0x308>)
 8001e22:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e24:	232b      	movs	r3, #43	; 0x2b
 8001e26:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e42:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e44:	f001 fb18 	bl	8003478 <HAL_DMA_Init>
 8001e48:	b970      	cbnz	r0, 8001e68 <HAL_UART_MspInit+0x2c4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x304>)
 8001e4c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e4e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2105      	movs	r1, #5
 8001e54:	2026      	movs	r0, #38	; 0x26
 8001e56:	f001 f86f 	bl	8002f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f001 f8a0 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
 8001e60:	e6c7      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001e62:	f7ff f94f 	bl	8001104 <Error_Handler>
 8001e66:	e7b4      	b.n	8001dd2 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8001e68:	f7ff f94c 	bl	8001104 <Error_Handler>
 8001e6c:	e7ed      	b.n	8001e4a <HAL_UART_MspInit+0x2a6>
 8001e6e:	bf00      	nop
 8001e70:	58000c00 	.word	0x58000c00
 8001e74:	40004c00 	.word	0x40004c00
 8001e78:	40007c00 	.word	0x40007c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40004400 	.word	0x40004400
 8001e84:	40004800 	.word	0x40004800
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58020000 	.word	0x58020000
 8001e94:	58020c00 	.word	0x58020c00
 8001e98:	58021000 	.word	0x58021000
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	240005a4 	.word	0x240005a4
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	2400061c 	.word	0x2400061c
 8001eac:	40020040 	.word	0x40020040
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb4:	a80e      	add	r0, sp, #56	; 0x38
 8001eb6:	f004 fe59 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d148      	bne.n	8001f50 <HAL_UART_MspInit+0x3ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_UART_MspInit+0x464>)
 8001ec0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ec4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ec8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001ecc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ed0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8001ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001edc:	f042 0208 	orr.w	r2, r2, #8
 8001ee0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8001eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef4:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2500      	movs	r5, #0
 8001efc:	953f      	str	r5, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	9540      	str	r5, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f00:	2307      	movs	r3, #7
 8001f02:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f04:	a93d      	add	r1, sp, #244	; 0xf4
 8001f06:	4841      	ldr	r0, [pc, #260]	; (800200c <HAL_UART_MspInit+0x468>)
 8001f08:	f002 ff4c 	bl	8004da4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001f0c:	4840      	ldr	r0, [pc, #256]	; (8002010 <HAL_UART_MspInit+0x46c>)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_UART_MspInit+0x470>)
 8001f10:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001f12:	232d      	movs	r3, #45	; 0x2d
 8001f14:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f20:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f22:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2e:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f30:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f32:	f001 faa1 	bl	8003478 <HAL_DMA_Init>
 8001f36:	b970      	cbnz	r0, 8001f56 <HAL_UART_MspInit+0x3b2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_UART_MspInit+0x46c>)
 8001f3a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001f3c:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2105      	movs	r1, #5
 8001f42:	2027      	movs	r0, #39	; 0x27
 8001f44:	f000 fff8 	bl	8002f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f48:	2027      	movs	r0, #39	; 0x27
 8001f4a:	f001 f829 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
 8001f4e:	e650      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001f50:	f7ff f8d8 	bl	8001104 <Error_Handler>
 8001f54:	e7b3      	b.n	8001ebe <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001f56:	f7ff f8d5 	bl	8001104 <Error_Handler>
 8001f5a:	e7ed      	b.n	8001f38 <HAL_UART_MspInit+0x394>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f60:	a80e      	add	r0, sp, #56	; 0x38
 8001f62:	f004 fe03 	bl	8006b6c <HAL_RCCEx_PeriphCLKConfig>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d147      	bne.n	8001ffa <HAL_UART_MspInit+0x456>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_UART_MspInit+0x464>)
 8001f6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f70:	f042 0220 	orr.w	r2, r2, #32
 8001f74:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001f78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f7c:	f002 0220 	and.w	r2, r2, #32
 8001f80:	920c      	str	r2, [sp, #48]	; 0x30
 8001f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001f88:	f042 0204 	orr.w	r2, r2, #4
 8001f8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	930d      	str	r3, [sp, #52]	; 0x34
 8001f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	933d      	str	r3, [sp, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	933e      	str	r3, [sp, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	953f      	str	r5, [sp, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	9540      	str	r5, [sp, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001faa:	2307      	movs	r3, #7
 8001fac:	9341      	str	r3, [sp, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	a93d      	add	r1, sp, #244	; 0xf4
 8001fb0:	4819      	ldr	r0, [pc, #100]	; (8002018 <HAL_UART_MspInit+0x474>)
 8001fb2:	f002 fef7 	bl	8004da4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream1;
 8001fb6:	4819      	ldr	r0, [pc, #100]	; (800201c <HAL_UART_MspInit+0x478>)
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_MspInit+0x47c>)
 8001fba:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001fbc:	2347      	movs	r3, #71	; 0x47
 8001fbe:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc0:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc2:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc8:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fca:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fcc:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd2:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd8:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fda:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001fdc:	f001 fa4c 	bl	8003478 <HAL_DMA_Init>
 8001fe0:	b970      	cbnz	r0, 8002000 <HAL_UART_MspInit+0x45c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0x478>)
 8001fe4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001fe6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2105      	movs	r1, #5
 8001fec:	2047      	movs	r0, #71	; 0x47
 8001fee:	f000 ffa3 	bl	8002f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ff2:	2047      	movs	r0, #71	; 0x47
 8001ff4:	f000 ffd4 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	e5fb      	b.n	8001bf2 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8001ffa:	f7ff f883 	bl	8001104 <Error_Handler>
 8001ffe:	e7b4      	b.n	8001f6a <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8002000:	f7ff f880 	bl	8001104 <Error_Handler>
 8002004:	e7ed      	b.n	8001fe2 <HAL_UART_MspInit+0x43e>
 8002006:	bf00      	nop
 8002008:	58024400 	.word	0x58024400
 800200c:	58020c00 	.word	0x58020c00
 8002010:	24000694 	.word	0x24000694
 8002014:	40020010 	.word	0x40020010
 8002018:	58020800 	.word	0x58020800
 800201c:	2400070c 	.word	0x2400070c
 8002020:	40020028 	.word	0x40020028

08002024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800205c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002028:	f7ff f97e 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202e:	490d      	ldr	r1, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002044:	4c0a      	ldr	r4, [pc, #40]	; (8002070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002052:	f00c fae9 	bl	800e628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002056:	f7ff f815 	bl	8001084 <main>
  bx  lr
 800205a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002060:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002064:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002068:	08011cf4 	.word	0x08011cf4
  ldr r2, =_sbss
 800206c:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8002070:	2401178c 	.word	0x2401178c

08002074 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC3_IRQHandler>

08002076 <writeRegister>:
/*============================================================================*/
/* Local functions														      */
/*============================================================================*/

// Write the register
bool writeRegister(ads1113_t *i2c, uint8_t reg, uint16_t value) {
 8002076:	b530      	push	{r4, r5, lr}
 8002078:	b087      	sub	sp, #28
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
//	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
//	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
	uint8_t pData[2];
	pData[0] = (value >> 8);
 800207e:	0a13      	lsrs	r3, r2, #8
 8002080:	f88d 3014 	strb.w	r3, [sp, #20]
	pData[1] = value & 0xff;
 8002084:	f88d 2015 	strb.w	r2, [sp, #21]

	if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK) {
 8002088:	230a      	movs	r3, #10
 800208a:	461a      	mov	r2, r3
 800208c:	8801      	ldrh	r1, [r0, #0]
 800208e:	6940      	ldr	r0, [r0, #20]
 8002090:	f003 fd1a 	bl	8005ac8 <HAL_I2C_IsDeviceReady>
 8002094:	b110      	cbz	r0, 800209c <writeRegister+0x26>
		return false;
 8002096:	2000      	movs	r0, #0
	}

	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
}
 8002098:	b007      	add	sp, #28
 800209a:	bd30      	pop	{r4, r5, pc}
	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
 800209c:	230a      	movs	r3, #10
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	ab05      	add	r3, sp, #20
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2301      	movs	r3, #1
 80020aa:	462a      	mov	r2, r5
 80020ac:	8821      	ldrh	r1, [r4, #0]
 80020ae:	6960      	ldr	r0, [r4, #20]
 80020b0:	f003 fc32 	bl	8005918 <HAL_I2C_Mem_Write>
 80020b4:	fab0 f080 	clz	r0, r0
 80020b8:	0940      	lsrs	r0, r0, #5
 80020ba:	e7ed      	b.n	8002098 <writeRegister+0x22>

080020bc <readRegister>:

// Read the register
uint16_t readRegister(ads1113_t *i2c, uint8_t reg) {
 80020bc:	b530      	push	{r4, r5, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	4604      	mov	r4, r0
 80020c2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 80020c6:	250a      	movs	r5, #10
 80020c8:	9500      	str	r5, [sp, #0]
 80020ca:	2301      	movs	r3, #1
 80020cc:	f10d 020f 	add.w	r2, sp, #15
 80020d0:	8801      	ldrh	r1, [r0, #0]
 80020d2:	6940      	ldr	r0, [r0, #20]
 80020d4:	f003 fa98 	bl	8005608 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 80020d8:	2300      	movs	r3, #0
 80020da:	f8ad 3014 	strh.w	r3, [sp, #20]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 80020de:	9500      	str	r5, [sp, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	aa05      	add	r2, sp, #20
 80020e4:	8821      	ldrh	r1, [r4, #0]
 80020e6:	6960      	ldr	r0, [r4, #20]
 80020e8:	f003 fb52 	bl	8005790 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 80020ec:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80020f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 80020f4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80020f8:	b007      	add	sp, #28
 80020fa:	bd30      	pop	{r4, r5, pc}

080020fc <ADSbegin>:

// Check if we have correct connection.
bool ADSbegin(ads1113_t *i2c) {
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4604      	mov	r4, r0
//	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
	if (HAL_I2C_Init(i2c->hi2c) == HAL_OK){
 8002100:	6940      	ldr	r0, [r0, #20]
 8002102:	f003 fa0d 	bl	8005520 <HAL_I2C_Init>
 8002106:	b108      	cbz	r0, 800210c <ADSbegin+0x10>
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
			return HAL_OK;
	}
	return HAL_ERROR;
 8002108:	2001      	movs	r0, #1
}
 800210a:	bd10      	pop	{r4, pc}
		if(HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100) == HAL_OK)
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	220a      	movs	r2, #10
 8002110:	8821      	ldrh	r1, [r4, #0]
 8002112:	6960      	ldr	r0, [r4, #20]
 8002114:	f003 fcd8 	bl	8005ac8 <HAL_I2C_IsDeviceReady>
 8002118:	3800      	subs	r0, #0
 800211a:	bf18      	it	ne
 800211c:	2001      	movne	r0, #1
 800211e:	e7f4      	b.n	800210a <ADSbegin+0xe>

08002120 <ADS1113_init>:

// Declare an ADS1115 structure
bool ADS1113_init(ads1113_t *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8002120:	b510      	push	{r4, lr}
 8002122:	4604      	mov	r4, r0
 8002124:	4608      	mov	r0, r1
//	i2c->m_bitShift = 0;
//	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
//	i2c->full_scale = 4.096f;
//	ADSbegin(i2c);

	i2c->hi2c = hi2c;
 8002126:	6161      	str	r1, [r4, #20]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 8002128:	0052      	lsls	r2, r2, #1
 800212a:	8022      	strh	r2, [r4, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 800212c:	2308      	movs	r3, #8
 800212e:	6063      	str	r3, [r4, #4]
	i2c->m_bitShift = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	7223      	strb	r3, [r4, #8]
	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
 8002134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002138:	8223      	strh	r3, [r4, #16]
	i2c->full_scale = 4.096f;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <ADS1113_init+0x90>)
 800213c:	60e3      	str	r3, [r4, #12]

	//Deinit the port
	if (HAL_I2C_DeInit(i2c->hi2c) != HAL_OK){
 800213e:	f003 fa49 	bl	80055d4 <HAL_I2C_DeInit>
 8002142:	b108      	cbz	r0, 8002148 <ADS1113_init+0x28>
		return false;
 8002144:	2000      	movs	r0, #0
		return false;
	}

	return true;

}
 8002146:	bd10      	pop	{r4, pc}
	i2c->hi2c->Instance = I2C1;
 8002148:	6963      	ldr	r3, [r4, #20]
 800214a:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <ADS1113_init+0x94>)
 800214c:	601a      	str	r2, [r3, #0]
	i2c->hi2c->Init.Timing = 0x00401242;
 800214e:	6963      	ldr	r3, [r4, #20]
 8002150:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <ADS1113_init+0x98>)
 8002152:	605a      	str	r2, [r3, #4]
	i2c->hi2c->Init.OwnAddress1 = 0;
 8002154:	6962      	ldr	r2, [r4, #20]
 8002156:	2300      	movs	r3, #0
 8002158:	6093      	str	r3, [r2, #8]
	i2c->hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215a:	6962      	ldr	r2, [r4, #20]
 800215c:	2101      	movs	r1, #1
 800215e:	60d1      	str	r1, [r2, #12]
	i2c->hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	6962      	ldr	r2, [r4, #20]
 8002162:	6113      	str	r3, [r2, #16]
	i2c->hi2c->Init.OwnAddress2 = 0;
 8002164:	6962      	ldr	r2, [r4, #20]
 8002166:	6153      	str	r3, [r2, #20]
	i2c->hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002168:	6962      	ldr	r2, [r4, #20]
 800216a:	6193      	str	r3, [r2, #24]
	i2c->hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216c:	6962      	ldr	r2, [r4, #20]
 800216e:	61d3      	str	r3, [r2, #28]
	i2c->hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002170:	6962      	ldr	r2, [r4, #20]
 8002172:	6213      	str	r3, [r2, #32]
	if (HAL_I2C_Init(i2c->hi2c) != HAL_OK)
 8002174:	6960      	ldr	r0, [r4, #20]
 8002176:	f003 f9d3 	bl	8005520 <HAL_I2C_Init>
 800217a:	b108      	cbz	r0, 8002180 <ADS1113_init+0x60>
		return false;
 800217c:	2000      	movs	r0, #0
 800217e:	e7e2      	b.n	8002146 <ADS1113_init+0x26>
	if (HAL_I2CEx_ConfigAnalogFilter(i2c->hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	6960      	ldr	r0, [r4, #20]
 8002184:	f003 fd5b 	bl	8005c3e <HAL_I2CEx_ConfigAnalogFilter>
 8002188:	b108      	cbz	r0, 800218e <ADS1113_init+0x6e>
		return false;
 800218a:	2000      	movs	r0, #0
 800218c:	e7db      	b.n	8002146 <ADS1113_init+0x26>
	if (HAL_I2CEx_ConfigDigitalFilter(i2c->hi2c, 0x0F) != HAL_OK)
 800218e:	210f      	movs	r1, #15
 8002190:	6960      	ldr	r0, [r4, #20]
 8002192:	f003 fd82 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 8002196:	b108      	cbz	r0, 800219c <ADS1113_init+0x7c>
		return false;
 8002198:	2000      	movs	r0, #0
 800219a:	e7d4      	b.n	8002146 <ADS1113_init+0x26>
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800219c:	2001      	movs	r0, #1
 800219e:	f003 fda9 	bl	8005cf4 <HAL_I2CEx_EnableFastModePlus>
	if (ADSbegin(i2c) != HAL_OK)
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff ffaa 	bl	80020fc <ADSbegin>
 80021a8:	f080 0001 	eor.w	r0, r0, #1
 80021ac:	b2c0      	uxtb	r0, r0
 80021ae:	e7ca      	b.n	8002146 <ADS1113_init+0x26>
 80021b0:	4083126f 	.word	0x4083126f
 80021b4:	40005400 	.word	0x40005400
 80021b8:	00401242 	.word	0x00401242

080021bc <ADSsetGain>:
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ads1113_t *i2c, adsGain_t gain) {
	i2c->m_gain = gain;
 80021bc:	8201      	strh	r1, [r0, #16]
	switch(gain) {
 80021be:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80021c2:	d01b      	beq.n	80021fc <ADSsetGain+0x40>
 80021c4:	d80d      	bhi.n	80021e2 <ADSsetGain+0x26>
 80021c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80021ca:	d014      	beq.n	80021f6 <ADSsetGain+0x3a>
 80021cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80021d0:	d102      	bne.n	80021d8 <ADSsetGain+0x1c>
		break;
	case GAIN_ONE:
		i2c->full_scale = 4.096;
		break;
	case GAIN_TWO:
		i2c->full_scale = 2.048;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <ADSsetGain+0x4c>)
 80021d4:	60c3      	str	r3, [r0, #12]
		break;
 80021d6:	4770      	bx	lr
	switch(gain) {
 80021d8:	b911      	cbnz	r1, 80021e0 <ADSsetGain+0x24>
		i2c->full_scale = 6.6144;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <ADSsetGain+0x50>)
 80021dc:	60c3      	str	r3, [r0, #12]
		break;
 80021de:	4770      	bx	lr
 80021e0:	4770      	bx	lr
	switch(gain) {
 80021e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80021e6:	d00c      	beq.n	8002202 <ADSsetGain+0x46>
 80021e8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80021ec:	d102      	bne.n	80021f4 <ADSsetGain+0x38>
		break;
	case GAIN_EIGHT:
		i2c->full_scale = 0.512;
		break;
	case GAIN_SIXTEEN:
		i2c->full_scale = 0.256;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <ADSsetGain+0x54>)
 80021f0:	60c3      	str	r3, [r0, #12]
		break;
	}
}
 80021f2:	4770      	bx	lr
 80021f4:	4770      	bx	lr
		i2c->full_scale = 4.096;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <ADSsetGain+0x58>)
 80021f8:	60c3      	str	r3, [r0, #12]
		break;
 80021fa:	4770      	bx	lr
		i2c->full_scale = 1.024;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <ADSsetGain+0x5c>)
 80021fe:	60c3      	str	r3, [r0, #12]
		break;
 8002200:	4770      	bx	lr
		i2c->full_scale = 0.512;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <ADSsetGain+0x60>)
 8002204:	60c3      	str	r3, [r0, #12]
		break;
 8002206:	4770      	bx	lr
 8002208:	4003126f 	.word	0x4003126f
 800220c:	40d3a92a 	.word	0x40d3a92a
 8002210:	3e83126f 	.word	0x3e83126f
 8002214:	4083126f 	.word	0x4083126f
 8002218:	3f83126f 	.word	0x3f83126f
 800221c:	3f03126f 	.word	0x3f03126f

08002220 <ADSreadADC_Differential_0_1>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ads1113_t *i2c) {
 8002220:	b510      	push	{r4, lr}
 8002222:	4604      	mov	r4, r0

	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8002224:	8a03      	ldrh	r3, [r0, #16]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 8002226:	f248 1283 	movw	r2, #33155	; 0x8183
 800222a:	431a      	orrs	r2, r3
 800222c:	2101      	movs	r1, #1
 800222e:	f7ff ff22 	bl	8002076 <writeRegister>
  osDelay(time);
 8002232:	6860      	ldr	r0, [r4, #4]
 8002234:	f007 fe4f 	bl	8009ed6 <osDelay>

	// Wait for the conversion to complete
	ads_delay(i2c->m_conversionDelay);

	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8002238:	2100      	movs	r1, #0
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff3e 	bl	80020bc <readRegister>
 8002240:	7a23      	ldrb	r3, [r4, #8]
 8002242:	4118      	asrs	r0, r3
	if (i2c->m_bitShift == 0) {
 8002244:	b90b      	cbnz	r3, 800224a <ADSreadADC_Differential_0_1+0x2a>
		return (int16_t) res;
 8002246:	b200      	sxth	r0, r0
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
		}
		return (int16_t) res;
	}
}
 8002248:	bd10      	pop	{r4, pc}
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 800224a:	b280      	uxth	r0, r0
		if (res > 0x07FF) {
 800224c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
			res |= 0xF000;
 8002250:	bf28      	it	cs
 8002252:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
		return (int16_t) res;
 8002256:	b200      	sxth	r0, r0
 8002258:	e7f6      	b.n	8002248 <ADSreadADC_Differential_0_1+0x28>
	...

0800225c <ADSreadADC_Voltage>:


float ADSreadADC_Voltage(ads1113_t *i2c) {
 800225c:	b508      	push	{r3, lr}
//	float coeff = i2c->full_scale/(ADS_MAX_VALUE*ADS_VOLTAGE_DIVIDER_RATIO);
//	return ADSreadADC_Differential_0_1(i2c) * coeff;
	float coeff = i2c->full_scale*ADS_VOLTAGE_DIVIDER_RATIO/ADS_MAX_VALUE;
	return ADSreadADC_Differential_0_1(i2c) * ADS_COEFF + ADS_OFFSET;
 800225e:	f7ff ffdf 	bl	8002220 <ADSreadADC_Differential_0_1>
 8002262:	ee07 0a90 	vmov	s15, r0
 8002266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800227c <ADSreadADC_Voltage+0x20>
 800226e:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8002272:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8002280 <ADSreadADC_Voltage+0x24>
 8002276:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800227a:	bd08      	pop	{r3, pc}
 800227c:	3b14fd53 	.word	0x3b14fd53
 8002280:	41f5c011 	.word	0x41f5c011

08002284 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002284:	b508      	push	{r3, lr}
 8002286:	4601      	mov	r1, r0
 8002288:	2007      	movs	r0, #7
 800228a:	f000 f929 	bl	80024e0 <bno055_writeData>
 800228e:	bd08      	pop	{r3, pc}

08002290 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002290:	b510      	push	{r4, lr}
 8002292:	4604      	mov	r4, r0
  bno055_writeData(BNO055_OPR_MODE, mode);
 8002294:	4601      	mov	r1, r0
 8002296:	203d      	movs	r0, #61	; 0x3d
 8002298:	f000 f922 	bl	80024e0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800229c:	b91c      	cbnz	r4, 80022a6 <bno055_setOperationMode+0x16>
    bno055_delay(19);
 800229e:	2013      	movs	r0, #19
 80022a0:	f000 f91a 	bl	80024d8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80022a4:	bd10      	pop	{r4, pc}
    bno055_delay(7);
 80022a6:	2007      	movs	r0, #7
 80022a8:	f000 f916 	bl	80024d8 <bno055_delay>
}
 80022ac:	e7fa      	b.n	80022a4 <bno055_setOperationMode+0x14>

080022ae <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80022ae:	b508      	push	{r3, lr}
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff ffed 	bl	8002290 <bno055_setOperationMode>
}
 80022b6:	bd08      	pop	{r3, pc}

080022b8 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80022b8:	b508      	push	{r3, lr}
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80022ba:	200c      	movs	r0, #12
 80022bc:	f7ff ffe8 	bl	8002290 <bno055_setOperationMode>
}
 80022c0:	bd08      	pop	{r3, pc}

080022c2 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80022c2:	b508      	push	{r3, lr}
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80022c4:	2120      	movs	r1, #32
 80022c6:	203f      	movs	r0, #63	; 0x3f
 80022c8:	f000 f90a 	bl	80024e0 <bno055_writeData>
  bno055_delay(700);
 80022cc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80022d0:	f000 f902 	bl	80024d8 <bno055_delay>
}
 80022d4:	bd08      	pop	{r3, pc}

080022d6 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80022d6:	b510      	push	{r4, lr}
 80022d8:	b082      	sub	sp, #8
  bno055_reset();
 80022da:	f7ff fff2 	bl	80022c2 <bno055_reset>

  uint8_t id = 0;
 80022de:	2400      	movs	r4, #0
 80022e0:	f88d 4007 	strb.w	r4, [sp, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f10d 0107 	add.w	r1, sp, #7
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 f918 	bl	8002520 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff ffc7 	bl	8002284 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80022f6:	4621      	mov	r1, r4
 80022f8:	203f      	movs	r0, #63	; 0x3f
 80022fa:	f000 f8f1 	bl	80024e0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80022fe:	f7ff ffd6 	bl	80022ae <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f000 f8e8 	bl	80024d8 <bno055_delay>
}
 8002308:	b002      	add	sp, #8
 800230a:	bd10      	pop	{r4, pc}

0800230c <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 800230c:	b500      	push	{lr}
 800230e:	b083      	sub	sp, #12
  bno055_setPage(0);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ffb7 	bl	8002284 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	f10d 0107 	add.w	r1, sp, #7
 800231c:	203a      	movs	r0, #58	; 0x3a
 800231e:	f000 f8ff 	bl	8002520 <bno055_readData>
  return tmp;
}
 8002322:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002326:	b003      	add	sp, #12
 8002328:	f85d fb04 	ldr.w	pc, [sp], #4
 800232c:	0000      	movs	r0, r0
	...

08002330 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002330:	b510      	push	{r4, lr}
 8002332:	b092      	sub	sp, #72	; 0x48
 8002334:	4604      	mov	r4, r0
  bno055_setPage(0);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff ffa4 	bl	8002284 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800233c:	2c20      	cmp	r4, #32
 800233e:	d038      	beq.n	80023b2 <bno055_getVector+0x82>
    bno055_readData(vec, buffer, 8);
  else
    bno055_readData(vec, buffer, 6);
 8002340:	2206      	movs	r2, #6
 8002342:	a910      	add	r1, sp, #64	; 0x40
 8002344:	4620      	mov	r0, r4
 8002346:	f000 f8eb 	bl	8002520 <bno055_readData>

  double scale = 1;

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800234a:	2c0e      	cmp	r4, #14
 800234c:	f040 8086 	bne.w	800245c <bno055_getVector+0x12c>
    scale = magScale;
 8002350:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <bno055_getVector+0x158>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	ee06 3a10 	vmov	s12, r3
 8002358:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800235c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8002360:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002368:	b21b      	sxth	r3, r3
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002372:	ee87 1b06 	vdiv.f64	d1, d7, d6
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002376:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800237a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800237e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002382:	b21b      	sxth	r3, r3
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800238c:	ee87 2b06 	vdiv.f64	d2, d7, d6
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002390:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8002394:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8002398:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800239c:	b21b      	sxth	r3, r3
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023a6:	ee87 3b06 	vdiv.f64	d3, d7, d6
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80023aa:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8002480 <bno055_getVector+0x150>
  }

  return xyz;
}
 80023ae:	b012      	add	sp, #72	; 0x48
 80023b0:	bd10      	pop	{r4, pc}
    bno055_readData(vec, buffer, 8);
 80023b2:	2208      	movs	r2, #8
 80023b4:	a910      	add	r1, sp, #64	; 0x40
 80023b6:	2020      	movs	r0, #32
 80023b8:	f000 f8b2 	bl	8002520 <bno055_readData>
    scale = quaScale;
 80023bc:	4b33      	ldr	r3, [pc, #204]	; (800248c <bno055_getVector+0x15c>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	ee06 3a10 	vmov	s12, r3
 80023c4:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80023c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80023cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80023d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023de:	ee87 0b06 	vdiv.f64	d0, d7, d6
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80023e2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80023e6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80023ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023f8:	ee87 1b06 	vdiv.f64	d1, d7, d6
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80023fc:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8002400:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8002404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002408:	b21b      	sxth	r3, r3
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002412:	ee87 2b06 	vdiv.f64	d2, d7, d6
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002416:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800241a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800241e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002422:	b21b      	sxth	r3, r3
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800242c:	ee87 3b06 	vdiv.f64	d3, d7, d6
 8002430:	e7bd      	b.n	80023ae <bno055_getVector+0x7e>
    scale = angularRateScale;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <bno055_getVector+0x160>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	ee06 3a10 	vmov	s12, r3
 800243a:	eeb8 6b46 	vcvt.f64.u32	d6, s12
 800243e:	e78d      	b.n	800235c <bno055_getVector+0x2c>
    scale = eulerScale;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <bno055_getVector+0x164>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	ee06 3a10 	vmov	s12, r3
 8002448:	eeb8 6b46 	vcvt.f64.u32	d6, s12
 800244c:	e786      	b.n	800235c <bno055_getVector+0x2c>
    scale = accelScale;
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <bno055_getVector+0x168>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	ee06 3a10 	vmov	s12, r3
 8002456:	eeb8 6b46 	vcvt.f64.u32	d6, s12
  if (vec == BNO055_VECTOR_QUATERNION) {
 800245a:	e77f      	b.n	800235c <bno055_getVector+0x2c>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800245c:	f004 03df 	and.w	r3, r4, #223	; 0xdf
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002460:	2b08      	cmp	r3, #8
 8002462:	d0f4      	beq.n	800244e <bno055_getVector+0x11e>
 8002464:	2c2e      	cmp	r4, #46	; 0x2e
 8002466:	d0f2      	beq.n	800244e <bno055_getVector+0x11e>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002468:	2c14      	cmp	r4, #20
 800246a:	d0e2      	beq.n	8002432 <bno055_getVector+0x102>
  } else if (vec == BNO055_VECTOR_EULER) {
 800246c:	2c1a      	cmp	r4, #26
 800246e:	d0e7      	beq.n	8002440 <bno055_getVector+0x110>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002470:	2c20      	cmp	r4, #32
 8002472:	d0a3      	beq.n	80023bc <bno055_getVector+0x8c>
  double scale = 1;
 8002474:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002478:	e770      	b.n	800235c <bno055_getVector+0x2c>
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
	...
 8002488:	2400000e 	.word	0x2400000e
 800248c:	24000010 	.word	0x24000010
 8002490:	2400000a 	.word	0x2400000a
 8002494:	2400000c 	.word	0x2400000c
 8002498:	24000008 	.word	0x24000008

0800249c <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 800249c:	b500      	push	{lr}
 800249e:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80024a0:	2008      	movs	r0, #8
 80024a2:	f7ff ff45 	bl	8002330 <bno055_getVector>
}
 80024a6:	b011      	add	sp, #68	; 0x44
 80024a8:	f85d fb04 	ldr.w	pc, [sp], #4

080024ac <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 80024ac:	b500      	push	{lr}
 80024ae:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 80024b0:	200e      	movs	r0, #14
 80024b2:	f7ff ff3d 	bl	8002330 <bno055_getVector>
}
 80024b6:	b011      	add	sp, #68	; 0x44
 80024b8:	f85d fb04 	ldr.w	pc, [sp], #4

080024bc <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 80024bc:	b500      	push	{lr}
 80024be:	b091      	sub	sp, #68	; 0x44
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80024c0:	2014      	movs	r0, #20
 80024c2:	f7ff ff35 	bl	8002330 <bno055_getVector>
}
 80024c6:	b011      	add	sp, #68	; 0x44
 80024c8:	f85d fb04 	ldr.w	pc, [sp], #4

080024cc <bno055_assignI2C>:
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
  _bno055_i2c_port = hi2c_device;
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <bno055_assignI2C+0x8>)
 80024ce:	6018      	str	r0, [r3, #0]
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24000b74 	.word	0x24000b74

080024d8 <bno055_delay>:

void bno055_delay(int time) {
 80024d8:	b508      	push	{r3, lr}
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80024da:	f007 fcfc 	bl	8009ed6 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 80024de:	bd08      	pop	{r3, pc}

080024e0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80024e0:	b500      	push	{lr}
 80024e2:	b085      	sub	sp, #20
  uint8_t txdata[2] = {reg, data};
 80024e4:	f88d 000c 	strb.w	r0, [sp, #12]
 80024e8:	f88d 100d 	strb.w	r1, [sp, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80024ec:	230a      	movs	r3, #10
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	aa03      	add	r2, sp, #12
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4809      	ldr	r0, [pc, #36]	; (800251c <bno055_writeData+0x3c>)
 80024f8:	6800      	ldr	r0, [r0, #0]
 80024fa:	f003 f885 	bl	8005608 <HAL_I2C_Master_Transmit>
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 80024fe:	b910      	cbnz	r0, 8002506 <bno055_writeData+0x26>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
    //printf("HAL_I2C_STATE_TIMEOUT\r\n");
  } else if (state == HAL_I2C_STATE_ERROR) {
    //printf("HAL_I2C_STATE_ERROR\r\n");
  }
}
 8002500:	b005      	add	sp, #20
 8002502:	f85d fb04 	ldr.w	pc, [sp], #4
  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <bno055_writeData+0x3c>)
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	f003 fb96 	bl	8005c3a <HAL_I2C_GetError>
  if (error == HAL_I2C_ERROR_NONE) {
 800250e:	2800      	cmp	r0, #0
 8002510:	d0f6      	beq.n	8002500 <bno055_writeData+0x20>
  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002512:	4b02      	ldr	r3, [pc, #8]	; (800251c <bno055_writeData+0x3c>)
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	f003 fb8d 	bl	8005c34 <HAL_I2C_GetState>
  }
 800251a:	e7f1      	b.n	8002500 <bno055_writeData+0x20>
 800251c:	24000b74 	.word	0x24000b74

08002520 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	460c      	mov	r4, r1
 8002526:	4615      	mov	r5, r2
 8002528:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800252c:	4e09      	ldr	r6, [pc, #36]	; (8002554 <bno055_readData+0x34>)
 800252e:	2764      	movs	r7, #100	; 0x64
 8002530:	9700      	str	r7, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	f10d 020f 	add.w	r2, sp, #15
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	6830      	ldr	r0, [r6, #0]
 800253c:	f003 f864 	bl	8005608 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002540:	9700      	str	r7, [sp, #0]
 8002542:	462b      	mov	r3, r5
 8002544:	4622      	mov	r2, r4
 8002546:	2150      	movs	r1, #80	; 0x50
 8002548:	6830      	ldr	r0, [r6, #0]
 800254a:	f003 f921 	bl	8005790 <HAL_I2C_Master_Receive>
                         100);
}
 800254e:	b005      	add	sp, #20
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002552:	bf00      	nop
 8002554:	24000b74 	.word	0x24000b74

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255a:	2003      	movs	r0, #3
 800255c:	f000 fcda 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002560:	f003 ff40 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 8002564:	490f      	ldr	r1, [pc, #60]	; (80025a4 <HAL_Init+0x4c>)
 8002566:	698b      	ldr	r3, [r1, #24]
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_Init+0x50>)
 800256a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002576:	698b      	ldr	r3, [r1, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	fa20 f303 	lsr.w	r3, r0, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_Init+0x54>)
 8002588:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_Init+0x58>)
 800258c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800258e:	200f      	movs	r0, #15
 8002590:	f7fe fdd4 	bl	800113c <HAL_InitTick>
 8002594:	b110      	cbz	r0, 800259c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8002596:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002598:	4620      	mov	r0, r4
 800259a:	bd10      	pop	{r4, pc}
 800259c:	4604      	mov	r4, r0
  HAL_MspInit();
 800259e:	f7fe fdb3 	bl	8001108 <HAL_MspInit>
  return HAL_OK;
 80025a2:	e7f9      	b.n	8002598 <HAL_Init+0x40>
 80025a4:	58024400 	.word	0x58024400
 80025a8:	08010f68 	.word	0x08010f68
 80025ac:	24000004 	.word	0x24000004
 80025b0:	24000000 	.word	0x24000000

080025b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80025b4:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <HAL_IncTick+0x10>)
 80025b6:	6811      	ldr	r1, [r2, #0]
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_IncTick+0x14>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	440b      	add	r3, r1
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	24000b78 	.word	0x24000b78
 80025c8:	24000012 	.word	0x24000012

080025cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <HAL_GetTick+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	24000b78 	.word	0x24000b78

080025d8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80025d8:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <HAL_GetREVID+0x8>)
 80025da:	6818      	ldr	r0, [r3, #0]
}
 80025dc:	0c00      	lsrs	r0, r0, #16
 80025de:	4770      	bx	lr
 80025e0:	5c001000 	.word	0x5c001000

080025e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025e8:	2200      	movs	r2, #0
 80025ea:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	f000 820e 	beq.w	8002a12 <HAL_ADC_ConfigChannel+0x42e>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2201      	movs	r2, #1
 80025fa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025fe:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002600:	68a2      	ldr	r2, [r4, #8]
 8002602:	f012 0f04 	tst.w	r2, #4
 8002606:	d009      	beq.n	800261c <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	6542      	str	r2, [r0, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002610:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002618:	b002      	add	sp, #8
 800261a:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800261c:	680a      	ldr	r2, [r1, #0]
 800261e:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002622:	2800      	cmp	r0, #0
 8002624:	d149      	bne.n	80026ba <HAL_ADC_ConfigChannel+0xd6>
 8002626:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800262a:	2001      	movs	r0, #1
 800262c:	4090      	lsls	r0, r2
 800262e:	69e2      	ldr	r2, [r4, #28]
 8002630:	4302      	orrs	r2, r0
 8002632:	61e2      	str	r2, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002634:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002636:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 800263a:	f00e 0e0c 	and.w	lr, lr, #12
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8002644:	f85e 400c 	ldr.w	r4, [lr, ip]
 8002648:	f000 001f 	and.w	r0, r0, #31
 800264c:	680a      	ldr	r2, [r1, #0]
 800264e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002652:	4082      	lsls	r2, r0
 8002654:	251f      	movs	r5, #31
 8002656:	fa05 f000 	lsl.w	r0, r5, r0
 800265a:	ea24 0000 	bic.w	r0, r4, r0
 800265e:	4302      	orrs	r2, r0
 8002660:	f84e 200c 	str.w	r2, [lr, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002664:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002666:	68a2      	ldr	r2, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002668:	68a0      	ldr	r0, [r4, #8]
 800266a:	f000 0008 	and.w	r0, r0, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266e:	f002 0204 	and.w	r2, r2, #4
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002672:	4302      	orrs	r2, r0
 8002674:	d02a      	beq.n	80026cc <HAL_ADC_ConfigChannel+0xe8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002676:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002678:	6882      	ldr	r2, [r0, #8]
 800267a:	f012 0f01 	tst.w	r2, #1
 800267e:	f040 81be 	bne.w	80029fe <HAL_ADC_ConfigChannel+0x41a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002682:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002684:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
 8002688:	68ca      	ldr	r2, [r1, #12]
 800268a:	f002 0c18 	and.w	ip, r2, #24
 800268e:	4ab7      	ldr	r2, [pc, #732]	; (800296c <HAL_ADC_ConfigChannel+0x388>)
 8002690:	fa22 f20c 	lsr.w	r2, r2, ip
 8002694:	4022      	ands	r2, r4
 8002696:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800269a:	ea25 0404 	bic.w	r4, r5, r4
 800269e:	4322      	orrs	r2, r4
 80026a0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026a4:	68c8      	ldr	r0, [r1, #12]
 80026a6:	4ab2      	ldr	r2, [pc, #712]	; (8002970 <HAL_ADC_ConfigChannel+0x38c>)
 80026a8:	4290      	cmp	r0, r2
 80026aa:	f000 80b0 	beq.w	800280e <HAL_ADC_ConfigChannel+0x22a>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ae:	680a      	ldr	r2, [r1, #0]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	f2c0 812e 	blt.w	8002912 <HAL_ADC_ConfigChannel+0x32e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b6:	2000      	movs	r0, #0
 80026b8:	e7ab      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80026be:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026c2:	f002 021f 	and.w	r2, r2, #31
 80026c6:	2001      	movs	r0, #1
 80026c8:	4090      	lsls	r0, r2
 80026ca:	e7b0      	b.n	800262e <HAL_ADC_ConfigChannel+0x4a>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026cc:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026ce:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 80026d2:	f00c 0c04 	and.w	ip, ip, #4
 80026d6:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 80026d8:	f85c 0004 	ldr.w	r0, [ip, r4]
 80026dc:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80026e0:	f04f 0e07 	mov.w	lr, #7
 80026e4:	fa0e fe05 	lsl.w	lr, lr, r5
 80026e8:	ea20 000e 	bic.w	r0, r0, lr
 80026ec:	688e      	ldr	r6, [r1, #8]
 80026ee:	fa06 f505 	lsl.w	r5, r6, r5
 80026f2:	4328      	orrs	r0, r5
 80026f4:	f84c 0004 	str.w	r0, [ip, r4]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026f8:	489e      	ldr	r0, [pc, #632]	; (8002974 <HAL_ADC_ConfigChannel+0x390>)
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8002700:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8002704:	d00c      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x13c>
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	68c4      	ldr	r4, [r0, #12]
 800270a:	f014 0f10 	tst.w	r4, #16
 800270e:	d141      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1b0>
 8002710:	68c4      	ldr	r4, [r0, #12]
 8002712:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002716:	0064      	lsls	r4, r4, #1
 8002718:	6948      	ldr	r0, [r1, #20]
 800271a:	fa00 f404 	lsl.w	r4, r0, r4
 800271e:	e007      	b.n	8002730 <HAL_ADC_ConfigChannel+0x14c>
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	68c4      	ldr	r4, [r0, #12]
 8002724:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002728:	0064      	lsls	r4, r4, #1
 800272a:	6948      	ldr	r0, [r1, #20]
 800272c:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002730:	690d      	ldr	r5, [r1, #16]
 8002732:	2d04      	cmp	r5, #4
 8002734:	d036      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x1c0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	f100 0c60 	add.w	ip, r0, #96	; 0x60
    MODIFY_REG(*preg,
 800273c:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8002740:	6808      	ldr	r0, [r1, #0]
 8002742:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002746:	f006 4e00 	and.w	lr, r6, #2147483648	; 0x80000000
 800274a:	ea40 000e 	orr.w	r0, r0, lr
 800274e:	4320      	orrs	r0, r4
 8002750:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002754:	681c      	ldr	r4, [r3, #0]
 8002756:	690d      	ldr	r5, [r1, #16]
 8002758:	7e48      	ldrb	r0, [r1, #25]
 800275a:	2801      	cmp	r0, #1
 800275c:	bf14      	ite	ne
 800275e:	4616      	movne	r6, r2
 8002760:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002764:	3460      	adds	r4, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002766:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800276a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800276e:	4330      	orrs	r0, r6
 8002770:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002774:	681d      	ldr	r5, [r3, #0]
 8002776:	690c      	ldr	r4, [r1, #16]
 8002778:	7e08      	ldrb	r0, [r1, #24]
 800277a:	2801      	cmp	r0, #1
 800277c:	bf08      	it	eq
 800277e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002782:	6928      	ldr	r0, [r5, #16]
 8002784:	f004 041f 	and.w	r4, r4, #31
 8002788:	40a2      	lsls	r2, r4
 800278a:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 800278e:	4302      	orrs	r2, r0
 8002790:	612a      	str	r2, [r5, #16]
}
 8002792:	e770      	b.n	8002676 <HAL_ADC_ConfigChannel+0x92>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002794:	68c4      	ldr	r4, [r0, #12]
 8002796:	0864      	lsrs	r4, r4, #1
 8002798:	f004 0408 	and.w	r4, r4, #8
 800279c:	6948      	ldr	r0, [r1, #20]
 800279e:	fa00 f404 	lsl.w	r4, r0, r4
 80027a2:	e7c5      	b.n	8002730 <HAL_ADC_ConfigChannel+0x14c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80027a8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027ac:	680c      	ldr	r4, [r1, #0]
 80027ae:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80027b2:	d01d      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0x20c>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80027b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027bc:	680c      	ldr	r4, [r1, #0]
 80027be:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80027c2:	d01a      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x216>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80027c8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027cc:	680c      	ldr	r4, [r1, #0]
 80027ce:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80027d2:	d017      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x220>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80027d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027dc:	680c      	ldr	r4, [r1, #0]
 80027de:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80027e2:	f47f af48 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x92>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027e6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80027e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ec:	66c2      	str	r2, [r0, #108]	; 0x6c
 80027ee:	e742      	b.n	8002676 <HAL_ADC_ConfigChannel+0x92>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027f0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80027f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027f6:	6602      	str	r2, [r0, #96]	; 0x60
 80027f8:	e7dc      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x1d0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027fa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80027fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002800:	6642      	str	r2, [r0, #100]	; 0x64
 8002802:	e7df      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1e0>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002804:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002806:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800280a:	6682      	str	r2, [r0, #104]	; 0x68
 800280c:	e7e2      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1f0>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280e:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002810:	680a      	ldr	r2, [r1, #0]
 8002812:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002816:	b9b8      	cbnz	r0, 8002848 <HAL_ADC_ConfigChannel+0x264>
 8002818:	0e90      	lsrs	r0, r2, #26
 800281a:	3001      	adds	r0, #1
 800281c:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	2d09      	cmp	r5, #9
 8002822:	d93e      	bls.n	80028a2 <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002824:	0e92      	lsrs	r2, r2, #26
 8002826:	3201      	adds	r2, #1
 8002828:	f002 001f 	and.w	r0, r2, #31
 800282c:	0692      	lsls	r2, r2, #26
 800282e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002832:	2501      	movs	r5, #1
 8002834:	4085      	lsls	r5, r0
 8002836:	4315      	orrs	r5, r2
 8002838:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800283c:	3a1e      	subs	r2, #30
 800283e:	0512      	lsls	r2, r2, #20
 8002840:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	432a      	orrs	r2, r5
 8002846:	e036      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800284c:	2800      	cmp	r0, #0
 800284e:	d043      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0x2f4>
  return __builtin_clz(value);
 8002850:	fab0 f080 	clz	r0, r0
 8002854:	3001      	adds	r0, #1
 8002856:	f000 001f 	and.w	r0, r0, #31
 800285a:	2809      	cmp	r0, #9
 800285c:	d93c      	bls.n	80028d8 <HAL_ADC_ConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8002862:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002866:	3501      	adds	r5, #1
 8002868:	06ad      	lsls	r5, r5, #26
 800286a:	f005 40f8 	and.w	r0, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8002872:	fab5 f585 	clz	r5, r5
 8002876:	3501      	adds	r5, #1
 8002878:	f005 051f 	and.w	r5, r5, #31
 800287c:	2601      	movs	r6, #1
 800287e:	fa06 f505 	lsl.w	r5, r6, r5
 8002882:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 8002888:	fab0 f080 	clz	r0, r0
 800288c:	4430      	add	r0, r6
 800288e:	f000 001f 	and.w	r0, r0, #31
 8002892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002896:	f1a0 021e 	sub.w	r2, r0, #30
 800289a:	0512      	lsls	r2, r2, #20
 800289c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80028a0:	e7d0      	b.n	8002844 <HAL_ADC_ConfigChannel+0x260>
 80028a2:	0680      	lsls	r0, r0, #26
 80028a4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80028a8:	2201      	movs	r2, #1
 80028aa:	40aa      	lsls	r2, r5
 80028ac:	4310      	orrs	r0, r2
 80028ae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80028b2:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028b6:	0dd5      	lsrs	r5, r2, #23
 80028b8:	f005 0504 	and.w	r5, r5, #4
 80028bc:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 80028be:	5928      	ldr	r0, [r5, r4]
 80028c0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80028c4:	2607      	movs	r6, #7
 80028c6:	4096      	lsls	r6, r2
 80028c8:	ea20 0006 	bic.w	r0, r0, r6
 80028cc:	688e      	ldr	r6, [r1, #8]
 80028ce:	fa06 f202 	lsl.w	r2, r6, r2
 80028d2:	4302      	orrs	r2, r0
 80028d4:	512a      	str	r2, [r5, r4]
}
 80028d6:	e6ea      	b.n	80026ae <HAL_ADC_ConfigChannel+0xca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 80028dc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e0:	3001      	adds	r0, #1
 80028e2:	0680      	lsls	r0, r0, #26
 80028e4:	f000 45f8 	and.w	r5, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	fa92 f0a2 	rbit	r0, r2
  return __builtin_clz(value);
 80028ec:	fab0 f080 	clz	r0, r0
 80028f0:	3001      	adds	r0, #1
 80028f2:	f000 061f 	and.w	r6, r0, #31
 80028f6:	2001      	movs	r0, #1
 80028f8:	40b0      	lsls	r0, r6
 80028fa:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	3201      	adds	r2, #1
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800290e:	0512      	lsls	r2, r2, #20
 8002910:	e7d0      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x2d0>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	4818      	ldr	r0, [pc, #96]	; (8002978 <HAL_ADC_ConfigChannel+0x394>)
 8002916:	4281      	cmp	r1, r0
 8002918:	d07d      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x432>
 800291a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800291e:	4281      	cmp	r1, r0
 8002920:	d079      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x432>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002922:	4816      	ldr	r0, [pc, #88]	; (800297c <HAL_ADC_ConfigChannel+0x398>)
 8002924:	6880      	ldr	r0, [r0, #8]
 8002926:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800292a:	4c15      	ldr	r4, [pc, #84]	; (8002980 <HAL_ADC_ConfigChannel+0x39c>)
 800292c:	68a4      	ldr	r4, [r4, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292e:	f014 0f01 	tst.w	r4, #1
 8002932:	d17d      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x44c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002934:	4e11      	ldr	r6, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x398>)
 8002936:	e000      	b.n	800293a <HAL_ADC_ConfigChannel+0x356>
 8002938:	4e12      	ldr	r6, [pc, #72]	; (8002984 <HAL_ADC_ConfigChannel+0x3a0>)
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800293a:	4c13      	ldr	r4, [pc, #76]	; (8002988 <HAL_ADC_ConfigChannel+0x3a4>)
 800293c:	42a2      	cmp	r2, r4
 800293e:	d00d      	beq.n	800295c <HAL_ADC_ConfigChannel+0x378>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002940:	4c12      	ldr	r4, [pc, #72]	; (800298c <HAL_ADC_ConfigChannel+0x3a8>)
 8002942:	42a2      	cmp	r2, r4
 8002944:	d041      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x3e6>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002946:	4c12      	ldr	r4, [pc, #72]	; (8002990 <HAL_ADC_ConfigChannel+0x3ac>)
 8002948:	42a2      	cmp	r2, r4
 800294a:	d160      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x42a>
            if (ADC_VREFINT_INSTANCE(hadc))
 800294c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002950:	d102      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x374>
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_ADC_ConfigChannel+0x39c>)
 8002954:	4291      	cmp	r1, r2
 8002956:	d049      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x408>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2000      	movs	r0, #0
 800295a:	e65a      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800295c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002960:	d14f      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x41e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_ADC_ConfigChannel+0x39c>)
 8002964:	4291      	cmp	r1, r2
 8002966:	d015      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x3b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2000      	movs	r0, #0
 800296a:	e652      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 800296c:	000fffff 	.word	0x000fffff
 8002970:	47ff0000 	.word	0x47ff0000
 8002974:	5c001000 	.word	0x5c001000
 8002978:	40022000 	.word	0x40022000
 800297c:	58026300 	.word	0x58026300
 8002980:	58026000 	.word	0x58026000
 8002984:	40022300 	.word	0x40022300
 8002988:	cb840000 	.word	0xcb840000
 800298c:	c7520000 	.word	0xc7520000
 8002990:	cfb80000 	.word	0xcfb80000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002994:	68b2      	ldr	r2, [r6, #8]
 8002996:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800299a:	432a      	orrs	r2, r5
 800299c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029a0:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_ADC_ConfigChannel+0x458>)
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	0992      	lsrs	r2, r2, #6
 80029a8:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_ADC_ConfigChannel+0x45c>)
 80029aa:	fba1 1202 	umull	r1, r2, r1, r2
 80029ae:	0992      	lsrs	r2, r2, #6
 80029b0:	3201      	adds	r2, #1
 80029b2:	0052      	lsls	r2, r2, #1
 80029b4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80029b6:	9a01      	ldr	r2, [sp, #4]
 80029b8:	b32a      	cbz	r2, 8002a06 <HAL_ADC_ConfigChannel+0x422>
                wait_loop_index--;
 80029ba:	9a01      	ldr	r2, [sp, #4]
 80029bc:	3a01      	subs	r2, #1
 80029be:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80029c0:	9a01      	ldr	r2, [sp, #4]
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2000      	movs	r0, #0
 80029c8:	e623      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ca:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80029ce:	d11c      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x426>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_ADC_ConfigChannel+0x460>)
 80029d2:	4291      	cmp	r1, r2
 80029d4:	d001      	beq.n	80029da <HAL_ADC_ConfigChannel+0x3f6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2000      	movs	r0, #0
 80029d8:	e61b      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 80029da:	68b2      	ldr	r2, [r6, #8]
 80029dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80029e0:	432a      	orrs	r2, r5
 80029e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029e6:	60b2      	str	r2, [r6, #8]
 80029e8:	2000      	movs	r0, #0
}
 80029ea:	e612      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ec:	68b2      	ldr	r2, [r6, #8]
 80029ee:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80029f2:	432a      	orrs	r2, r5
 80029f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029f8:	60b2      	str	r2, [r6, #8]
 80029fa:	2000      	movs	r0, #0
}
 80029fc:	e609      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 80029fe:	2000      	movs	r0, #0
 8002a00:	e607      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e605      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 8002a06:	2000      	movs	r0, #0
 8002a08:	e603      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	e601      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 8002a0e:	2000      	movs	r0, #0
 8002a10:	e5ff      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002a12:	2002      	movs	r0, #2
 8002a14:	e600      	b.n	8002618 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <HAL_ADC_ConfigChannel+0x464>)
 8002a18:	6880      	ldr	r0, [r0, #8]
 8002a1a:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a1e:	4c0b      	ldr	r4, [pc, #44]	; (8002a4c <HAL_ADC_ConfigChannel+0x468>)
 8002a20:	68a6      	ldr	r6, [r4, #8]
 8002a22:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8002a26:	68a4      	ldr	r4, [r4, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a28:	4334      	orrs	r4, r6
 8002a2a:	f014 0f01 	tst.w	r4, #1
 8002a2e:	d083      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x354>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e5ea      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2e>
 8002a3c:	24000000 	.word	0x24000000
 8002a40:	053e2d63 	.word	0x053e2d63
 8002a44:	58026000 	.word	0x58026000
 8002a48:	40022300 	.word	0x40022300
 8002a4c:	40022000 	.word	0x40022000

08002a50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <ADC_ConfigureBoostMode+0x150>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x24>
 8002a5c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x24>
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <ADC_ConfigureBoostMode+0x154>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	e006      	b.n	8002a82 <ADC_ConfigureBoostMode+0x32>
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <ADC_ConfigureBoostMode+0x158>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b993      	cbnz	r3, 8002aaa <ADC_ConfigureBoostMode+0x5a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a88:	f005 f85c 	bl	8007b44 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a8c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002a8e:	6863      	ldr	r3, [r4, #4]
 8002a90:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a94:	d057      	beq.n	8002b46 <ADC_ConfigureBoostMode+0xf6>
 8002a96:	d842      	bhi.n	8002b1e <ADC_ConfigureBoostMode+0xce>
 8002a98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a9c:	d051      	beq.n	8002b42 <ADC_ConfigureBoostMode+0xf2>
 8002a9e:	d926      	bls.n	8002aee <ADC_ConfigureBoostMode+0x9e>
 8002aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aa4:	d10e      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
        break;
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
        break;
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002aa6:	0945      	lsrs	r5, r0, #5
        break;
 8002aa8:	e00c      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
    freq = HAL_RCC_GetHCLKFreq();
 8002aaa:	f003 feeb 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 8002aae:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab6:	d014      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x92>
 8002ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002abc:	d015      	beq.n	8002aea <ADC_ConfigureBoostMode+0x9a>
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d00e      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x92>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ac4:	f7ff fd88 	bl	80025d8 <HAL_GetREVID>
 8002ac8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002acc:	4298      	cmp	r0, r3
 8002ace:	d849      	bhi.n	8002b64 <ADC_ConfigureBoostMode+0x114>
  {
    if (freq > 20000000UL)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <ADC_ConfigureBoostMode+0x15c>)
 8002ad2:	429d      	cmp	r5, r3
 8002ad4:	d92f      	bls.n	8002b36 <ADC_ConfigureBoostMode+0xe6>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	6893      	ldr	r3, [r2, #8]
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ae0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002ae8:	e7ec      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
        freq /= 4UL;
 8002aea:	0885      	lsrs	r5, r0, #2
        break;
 8002aec:	e7ea      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
    switch (hadc->Init.ClockPrescaler)
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d00f      	beq.n	8002b14 <ADC_ConfigureBoostMode+0xc4>
 8002af4:	d906      	bls.n	8002b04 <ADC_ConfigureBoostMode+0xb4>
 8002af6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002afa:	d00b      	beq.n	8002b14 <ADC_ConfigureBoostMode+0xc4>
 8002afc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b00:	d008      	beq.n	8002b14 <ADC_ConfigureBoostMode+0xc4>
 8002b02:	e7df      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
 8002b04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b08:	d004      	beq.n	8002b14 <ADC_ConfigureBoostMode+0xc4>
 8002b0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002b0e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002b12:	d1d7      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002b1c:	e7d2      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
    switch (hadc->Init.ClockPrescaler)
 8002b1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b22:	d012      	beq.n	8002b4a <ADC_ConfigureBoostMode+0xfa>
 8002b24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b28:	d1cc      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002b2a:	f7ff fd55 	bl	80025d8 <HAL_GetREVID>
 8002b2e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b32:	4298      	cmp	r0, r3
 8002b34:	d80b      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0xfe>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b36:	6822      	ldr	r2, [r4, #0]
 8002b38:	6893      	ldr	r3, [r2, #8]
 8002b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	e7ce      	b.n	8002ae0 <ADC_ConfigureBoostMode+0x90>
        freq /= 16UL;
 8002b42:	0905      	lsrs	r5, r0, #4
        break;
 8002b44:	e7be      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
        freq /= 64UL;
 8002b46:	0985      	lsrs	r5, r0, #6
        break;
 8002b48:	e7bc      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
        freq /= 128UL;
 8002b4a:	09c5      	lsrs	r5, r0, #7
        break;
 8002b4c:	e7ba      	b.n	8002ac4 <ADC_ConfigureBoostMode+0x74>
    if (freq <= 6250000UL)
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <ADC_ConfigureBoostMode+0x160>)
 8002b50:	429d      	cmp	r5, r3
 8002b52:	d90a      	bls.n	8002b6a <ADC_ConfigureBoostMode+0x11a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	6893      	ldr	r3, [r2, #8]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	6093      	str	r3, [r2, #8]
 8002b62:	e7bd      	b.n	8002ae0 <ADC_ConfigureBoostMode+0x90>
    if (freq <= 6250000UL)
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <ADC_ConfigureBoostMode+0x164>)
 8002b66:	429d      	cmp	r5, r3
 8002b68:	d805      	bhi.n	8002b76 <ADC_ConfigureBoostMode+0x126>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	6893      	ldr	r3, [r2, #8]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	6093      	str	r3, [r2, #8]
 8002b74:	e7b4      	b.n	8002ae0 <ADC_ConfigureBoostMode+0x90>
    else if (freq <= 12500000UL)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <ADC_ConfigureBoostMode+0x168>)
 8002b78:	429d      	cmp	r5, r3
 8002b7a:	d9eb      	bls.n	8002b54 <ADC_ConfigureBoostMode+0x104>
    else if (freq <= 25000000UL)
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <ADC_ConfigureBoostMode+0x16c>)
 8002b7e:	429d      	cmp	r5, r3
 8002b80:	d807      	bhi.n	8002b92 <ADC_ConfigureBoostMode+0x142>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	6893      	ldr	r3, [r2, #8]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6093      	str	r3, [r2, #8]
 8002b90:	e7a6      	b.n	8002ae0 <ADC_ConfigureBoostMode+0x90>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	6893      	ldr	r3, [r2, #8]
 8002b96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b9a:	6093      	str	r3, [r2, #8]
}
 8002b9c:	e7a0      	b.n	8002ae0 <ADC_ConfigureBoostMode+0x90>
 8002b9e:	bf00      	nop
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	58026300 	.word	0x58026300
 8002ba8:	40022300 	.word	0x40022300
 8002bac:	01312d00 	.word	0x01312d00
 8002bb0:	bebc21ff 	.word	0xbebc21ff
 8002bb4:	00bebc21 	.word	0x00bebc21
 8002bb8:	017d7841 	.word	0x017d7841
 8002bbc:	02faf081 	.word	0x02faf081

08002bc0 <HAL_ADC_Init>:
{
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f000 80f8 	beq.w	8002dbe <HAL_ADC_Init+0x1fe>
 8002bce:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d042      	beq.n	8002c5c <HAL_ADC_Init+0x9c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bd6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002bde:	d003      	beq.n	8002be8 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	4a78      	ldr	r2, [pc, #480]	; (8002dc4 <HAL_ADC_Init+0x204>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002be8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002bf0:	d116      	bne.n	8002c20 <HAL_ADC_Init+0x60>
  MODIFY_REG(ADCx->CR,
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	4a74      	ldr	r2, [pc, #464]	; (8002dc8 <HAL_ADC_Init+0x208>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bfc:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bfe:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <HAL_ADC_Init+0x20c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	4a72      	ldr	r2, [pc, #456]	; (8002dd0 <HAL_ADC_Init+0x210>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c10:	9b01      	ldr	r3, [sp, #4]
 8002c12:	b12b      	cbz	r3, 8002c20 <HAL_ADC_Init+0x60>
      wait_loop_index--;
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_Init+0x54>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c20:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c22:	688b      	ldr	r3, [r1, #8]
 8002c24:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c28:	d11f      	bne.n	8002c6a <HAL_ADC_Init+0xaa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002c3a:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3c:	688b      	ldr	r3, [r1, #8]
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c40:	f002 0210 	and.w	r2, r2, #16
 8002c44:	f003 0304 	and.w	r3, r3, #4
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	d010      	beq.n	8002c6e <HAL_ADC_Init+0xae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002c54:	2501      	movs	r5, #1
}
 8002c56:	4628      	mov	r0, r5
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8002c5c:	f7fd fe06 	bl	800086c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002c60:	2300      	movs	r3, #0
 8002c62:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002c64:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002c68:	e7b5      	b.n	8002bd6 <HAL_ADC_Init+0x16>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2500      	movs	r5, #0
 8002c6c:	e7e6      	b.n	8002c3c <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c7a:	688b      	ldr	r3, [r1, #8]
 8002c7c:	f013 0f01 	tst.w	r3, #1
 8002c80:	d112      	bne.n	8002ca8 <HAL_ADC_Init+0xe8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c82:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_ADC_Init+0x214>)
 8002c84:	4299      	cmp	r1, r3
 8002c86:	d065      	beq.n	8002d54 <HAL_ADC_Init+0x194>
 8002c88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	d061      	beq.n	8002d54 <HAL_ADC_Init+0x194>
 8002c90:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_ADC_Init+0x218>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f013 0f01 	tst.w	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c9a:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c9c:	6893      	ldr	r3, [r2, #8]
 8002c9e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ca2:	6861      	ldr	r1, [r4, #4]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ca8:	f7ff fc96 	bl	80025d8 <HAL_GetREVID>
 8002cac:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d902      	bls.n	8002cba <HAL_ADC_Init+0xfa>
 8002cb4:	68a3      	ldr	r3, [r4, #8]
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d057      	beq.n	8002d6a <HAL_ADC_Init+0x1aa>
                  hadc->Init.Overrun                                                    |
 8002cba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cbc:	68a2      	ldr	r2, [r4, #8]
 8002cbe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cc0:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8002cc2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cc6:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ccc:	7f22      	ldrb	r2, [r4, #28]
 8002cce:	2a01      	cmp	r2, #1
 8002cd0:	d055      	beq.n	8002d7e <HAL_ADC_Init+0x1be>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cd4:	b122      	cbz	r2, 8002ce0 <HAL_ADC_Init+0x120>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd6:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002cdc:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cde:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ce0:	6821      	ldr	r1, [r4, #0]
 8002ce2:	68c8      	ldr	r0, [r1, #12]
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <HAL_ADC_Init+0x220>)
 8002ce6:	4002      	ands	r2, r0
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cec:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cee:	688b      	ldr	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf6:	f003 0304 	and.w	r3, r3, #4
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	d11b      	bne.n	8002d36 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cfe:	68c8      	ldr	r0, [r1, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d00:	7d22      	ldrb	r2, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_ADC_Init+0x224>)
 8002d04:	4003      	ands	r3, r0
 8002d06:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8002d0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002d10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d037      	beq.n	8002d88 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	6913      	ldr	r3, [r2, #16]
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	6913      	ldr	r3, [r2, #16]
 8002d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fe8d 	bl	8002a50 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d36:	68e3      	ldr	r3, [r4, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d037      	beq.n	8002dac <HAL_ADC_Init+0x1ec>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d48:	f023 0303 	bic.w	r3, r3, #3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6563      	str	r3, [r4, #84]	; 0x54
 8002d52:	e780      	b.n	8002c56 <HAL_ADC_Init+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_ADC_Init+0x214>)
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d5c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f013 0f01 	tst.w	r3, #1
 8002d64:	d1a0      	bne.n	8002ca8 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d66:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <HAL_ADC_Init+0x228>)
 8002d68:	e798      	b.n	8002c9c <HAL_ADC_Init+0xdc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d6a:	7d62      	ldrb	r2, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d6c:	7f23      	ldrb	r3, [r4, #28]
 8002d6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d70:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002d74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f043 031c 	orr.w	r3, r3, #28
 8002d7c:	e7a6      	b.n	8002ccc <HAL_ADC_Init+0x10c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d7e:	6a22      	ldr	r2, [r4, #32]
 8002d80:	3a01      	subs	r2, #1
 8002d82:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002d86:	e7a4      	b.n	8002cd2 <HAL_ADC_Init+0x112>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d88:	6821      	ldr	r1, [r4, #0]
 8002d8a:	6908      	ldr	r0, [r1, #16]
 8002d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d92:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002d94:	4333      	orrs	r3, r6
 8002d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <HAL_ADC_Init+0x22c>)
 8002da0:	4002      	ands	r2, r0
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	610b      	str	r3, [r1, #16]
 8002daa:	e7ba      	b.n	8002d22 <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dac:	6821      	ldr	r1, [r4, #0]
 8002dae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002db0:	69a3      	ldr	r3, [r4, #24]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f022 020f 	bic.w	r2, r2, #15
 8002db8:	4313      	orrs	r3, r2
 8002dba:	630b      	str	r3, [r1, #48]	; 0x30
 8002dbc:	e7c3      	b.n	8002d46 <HAL_ADC_Init+0x186>
    return HAL_ERROR;
 8002dbe:	2501      	movs	r5, #1
 8002dc0:	e749      	b.n	8002c56 <HAL_ADC_Init+0x96>
 8002dc2:	bf00      	nop
 8002dc4:	5fffffc0 	.word	0x5fffffc0
 8002dc8:	6fffffc0 	.word	0x6fffffc0
 8002dcc:	24000000 	.word	0x24000000
 8002dd0:	053e2d63 	.word	0x053e2d63
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	58026000 	.word	0x58026000
 8002ddc:	58026300 	.word	0x58026300
 8002de0:	fff0c003 	.word	0xfff0c003
 8002de4:	ffffbffc 	.word	0xffffbffc
 8002de8:	40022300 	.word	0x40022300
 8002dec:	fc00f81e 	.word	0xfc00f81e

08002df0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002df4:	2a01      	cmp	r2, #1
 8002df6:	d06b      	beq.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
{
 8002df8:	b410      	push	{r4}
 8002dfa:	b09b      	sub	sp, #108	; 0x6c
 8002dfc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e04:	2200      	movs	r2, #0
 8002e06:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e08:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002e0e:	4290      	cmp	r0, r2
 8002e10:	d060      	beq.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e14:	f042 0220 	orr.w	r2, r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e20:	2001      	movs	r0, #1
 8002e22:	e068      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x106>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e24:	680a      	ldr	r2, [r1, #0]
 8002e26:	b352      	cbz	r2, 8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e28:	4836      	ldr	r0, [pc, #216]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002e2a:	6882      	ldr	r2, [r0, #8]
 8002e2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002e30:	684c      	ldr	r4, [r1, #4]
 8002e32:	4322      	orrs	r2, r4
 8002e34:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8002e3c:	4282      	cmp	r2, r0
 8002e3e:	d013      	beq.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002e40:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002e44:	4282      	cmp	r2, r0
 8002e46:	d00f      	beq.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	f012 0f01 	tst.w	r2, #1
 8002e50:	d13a      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e52:	482c      	ldr	r0, [pc, #176]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002e54:	6884      	ldr	r4, [r0, #8]
 8002e56:	680a      	ldr	r2, [r1, #0]
 8002e58:	6889      	ldr	r1, [r1, #8]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	492b      	ldr	r1, [pc, #172]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002e5e:	4021      	ands	r1, r4
 8002e60:	430a      	orrs	r2, r1
 8002e62:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e043      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002e6a:	6890      	ldr	r0, [r2, #8]
 8002e6c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002e70:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e72:	4302      	orrs	r2, r0
 8002e74:	f012 0f01 	tst.w	r2, #1
 8002e78:	d0eb      	beq.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x62>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e038      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002e80:	688a      	ldr	r2, [r1, #8]
 8002e82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002e86:	608a      	str	r2, [r1, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f5a1 7140 	sub.w	r1, r1, #768	; 0x300
 8002e8e:	428a      	cmp	r2, r1
 8002e90:	d00f      	beq.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002e92:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002e96:	428a      	cmp	r2, r1
 8002e98:	d00b      	beq.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	f012 0f01 	tst.w	r2, #1
 8002ea2:	d113      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea4:	4917      	ldr	r1, [pc, #92]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002ea6:	6888      	ldr	r0, [r1, #8]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002eaa:	4002      	ands	r2, r0
 8002eac:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002eb4:	6891      	ldr	r1, [r2, #8]
 8002eb6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002eba:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	f012 0f01 	tst.w	r2, #1
 8002ec2:	d0ef      	beq.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	e013      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e011      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e00f      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  __HAL_LOCK(hadc);
 8002ed0:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002ed2:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002ed6:	6890      	ldr	r0, [r2, #8]
 8002ed8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002edc:	6892      	ldr	r2, [r2, #8]
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ede:	4302      	orrs	r2, r0
 8002ee0:	f012 0f04 	tst.w	r2, #4
 8002ee4:	d09e      	beq.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002eee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002ef6:	b01b      	add	sp, #108	; 0x6c
 8002ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40022300 	.word	0x40022300
 8002f08:	58026000 	.word	0x58026000
 8002f0c:	fffff0e0 	.word	0xfffff0e0
 8002f10:	40022100 	.word	0x40022100

08002f14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002f16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	0200      	lsls	r0, r0, #8
 8002f1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f26:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002f28:	4b02      	ldr	r3, [pc, #8]	; (8002f34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f2a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002f2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00
 8002f34:	05fa0000 	.word	0x05fa0000

08002f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_NVIC_SetPriority+0x5c>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f42:	f1c3 0c07 	rsb	ip, r3, #7
 8002f46:	f1bc 0f04 	cmp.w	ip, #4
 8002f4a:	bf28      	it	cs
 8002f4c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f50:	f103 0e04 	add.w	lr, r3, #4
 8002f54:	f1be 0f06 	cmp.w	lr, #6
 8002f58:	bf8c      	ite	hi
 8002f5a:	3b03      	subhi	r3, #3
 8002f5c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5e:	f04f 3eff 	mov.w	lr, #4294967295
 8002f62:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002f66:	ea21 010c 	bic.w	r1, r1, ip
 8002f6a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	fa0e f303 	lsl.w	r3, lr, r3
 8002f70:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002f76:	2800      	cmp	r0, #0
 8002f78:	db05      	blt.n	8002f86 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	0109      	lsls	r1, r1, #4
 8002f7c:	b2c9      	uxtb	r1, r1
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_NVIC_SetPriority+0x60>)
 8002f80:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f82:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	f000 000f 	and.w	r0, r0, #15
 8002f8a:	0109      	lsls	r1, r1, #4
 8002f8c:	b2c9      	uxtb	r1, r1
 8002f8e:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_NVIC_SetPriority+0x64>)
 8002f90:	5419      	strb	r1, [r3, r0]
 8002f92:	e7f6      	b.n	8002f82 <HAL_NVIC_SetPriority+0x4a>
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	e000e400 	.word	0xe000e400
 8002f9c:	e000ed14 	.word	0xe000ed14

08002fa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	db08      	blt.n	8002fb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa4:	0942      	lsrs	r2, r0, #5
 8002fa6:	f000 001f 	and.w	r0, r0, #31
 8002faa:	2301      	movs	r3, #1
 8002fac:	fa03 f000 	lsl.w	r0, r3, r0
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <HAL_NVIC_EnableIRQ+0x18>)
 8002fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fb6:	4770      	bx	lr
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fc0:	6805      	ldr	r5, [r0, #0]
 8002fc2:	4c91      	ldr	r4, [pc, #580]	; (8003208 <DMA_SetConfig+0x24c>)
 8002fc4:	4f91      	ldr	r7, [pc, #580]	; (800320c <DMA_SetConfig+0x250>)
 8002fc6:	42bd      	cmp	r5, r7
 8002fc8:	bf18      	it	ne
 8002fca:	42a5      	cmpne	r5, r4
 8002fcc:	bf0c      	ite	eq
 8002fce:	2401      	moveq	r4, #1
 8002fd0:	2400      	movne	r4, #0
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	42bd      	cmp	r5, r7
 8002fd6:	bf08      	it	eq
 8002fd8:	f044 0401 	orreq.w	r4, r4, #1
 8002fdc:	3718      	adds	r7, #24
 8002fde:	42bd      	cmp	r5, r7
 8002fe0:	bf08      	it	eq
 8002fe2:	f044 0401 	orreq.w	r4, r4, #1
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	42bd      	cmp	r5, r7
 8002fea:	bf08      	it	eq
 8002fec:	f044 0401 	orreq.w	r4, r4, #1
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	42bd      	cmp	r5, r7
 8002ff4:	bf08      	it	eq
 8002ff6:	f044 0401 	orreq.w	r4, r4, #1
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	42bd      	cmp	r5, r7
 8002ffe:	bf08      	it	eq
 8003000:	f044 0401 	orreq.w	r4, r4, #1
 8003004:	3718      	adds	r7, #24
 8003006:	42bd      	cmp	r5, r7
 8003008:	bf08      	it	eq
 800300a:	f044 0401 	orreq.w	r4, r4, #1
 800300e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003012:	42bd      	cmp	r5, r7
 8003014:	bf08      	it	eq
 8003016:	f044 0401 	orreq.w	r4, r4, #1
 800301a:	3718      	adds	r7, #24
 800301c:	42bd      	cmp	r5, r7
 800301e:	bf08      	it	eq
 8003020:	f044 0401 	orreq.w	r4, r4, #1
 8003024:	3718      	adds	r7, #24
 8003026:	42bd      	cmp	r5, r7
 8003028:	bf08      	it	eq
 800302a:	f044 0401 	orreq.w	r4, r4, #1
 800302e:	3718      	adds	r7, #24
 8003030:	42bd      	cmp	r5, r7
 8003032:	bf08      	it	eq
 8003034:	f044 0401 	orreq.w	r4, r4, #1
 8003038:	3718      	adds	r7, #24
 800303a:	42bd      	cmp	r5, r7
 800303c:	bf08      	it	eq
 800303e:	f044 0401 	orreq.w	r4, r4, #1
 8003042:	3718      	adds	r7, #24
 8003044:	42bd      	cmp	r5, r7
 8003046:	bf08      	it	eq
 8003048:	f044 0401 	orreq.w	r4, r4, #1
 800304c:	3718      	adds	r7, #24
 800304e:	42bd      	cmp	r5, r7
 8003050:	bf08      	it	eq
 8003052:	f044 0401 	orreq.w	r4, r4, #1
 8003056:	3718      	adds	r7, #24
 8003058:	42bd      	cmp	r5, r7
 800305a:	bf08      	it	eq
 800305c:	f044 0401 	orreq.w	r4, r4, #1
 8003060:	4f6b      	ldr	r7, [pc, #428]	; (8003210 <DMA_SetConfig+0x254>)
 8003062:	42bd      	cmp	r5, r7
 8003064:	bf08      	it	eq
 8003066:	f044 0401 	orreq.w	r4, r4, #1
 800306a:	3714      	adds	r7, #20
 800306c:	42bd      	cmp	r5, r7
 800306e:	bf08      	it	eq
 8003070:	f044 0401 	orreq.w	r4, r4, #1
 8003074:	3714      	adds	r7, #20
 8003076:	42bd      	cmp	r5, r7
 8003078:	bf08      	it	eq
 800307a:	f044 0401 	orreq.w	r4, r4, #1
 800307e:	3714      	adds	r7, #20
 8003080:	42bd      	cmp	r5, r7
 8003082:	bf08      	it	eq
 8003084:	f044 0401 	orreq.w	r4, r4, #1
 8003088:	3714      	adds	r7, #20
 800308a:	42bd      	cmp	r5, r7
 800308c:	bf08      	it	eq
 800308e:	f044 0401 	orreq.w	r4, r4, #1
 8003092:	3714      	adds	r7, #20
 8003094:	42bd      	cmp	r5, r7
 8003096:	bf08      	it	eq
 8003098:	f044 0401 	orreq.w	r4, r4, #1
 800309c:	3714      	adds	r7, #20
 800309e:	42bd      	cmp	r5, r7
 80030a0:	bf08      	it	eq
 80030a2:	f044 0401 	orreq.w	r4, r4, #1
 80030a6:	b914      	cbnz	r4, 80030ae <DMA_SetConfig+0xf2>
 80030a8:	4c5a      	ldr	r4, [pc, #360]	; (8003214 <DMA_SetConfig+0x258>)
 80030aa:	42a5      	cmp	r5, r4
 80030ac:	d107      	bne.n	80030be <DMA_SetConfig+0x102>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ae:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80030b0:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80030b2:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80030b4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80030b6:	b114      	cbz	r4, 80030be <DMA_SetConfig+0x102>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80030ba:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80030bc:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030be:	6805      	ldr	r5, [r0, #0]
 80030c0:	4c51      	ldr	r4, [pc, #324]	; (8003208 <DMA_SetConfig+0x24c>)
 80030c2:	4f52      	ldr	r7, [pc, #328]	; (800320c <DMA_SetConfig+0x250>)
 80030c4:	42bd      	cmp	r5, r7
 80030c6:	bf18      	it	ne
 80030c8:	42a5      	cmpne	r5, r4
 80030ca:	bf0c      	ite	eq
 80030cc:	2401      	moveq	r4, #1
 80030ce:	2400      	movne	r4, #0
 80030d0:	3718      	adds	r7, #24
 80030d2:	42bd      	cmp	r5, r7
 80030d4:	bf08      	it	eq
 80030d6:	f044 0401 	orreq.w	r4, r4, #1
 80030da:	3718      	adds	r7, #24
 80030dc:	42bd      	cmp	r5, r7
 80030de:	bf08      	it	eq
 80030e0:	f044 0401 	orreq.w	r4, r4, #1
 80030e4:	3718      	adds	r7, #24
 80030e6:	42bd      	cmp	r5, r7
 80030e8:	bf08      	it	eq
 80030ea:	f044 0401 	orreq.w	r4, r4, #1
 80030ee:	3718      	adds	r7, #24
 80030f0:	42bd      	cmp	r5, r7
 80030f2:	bf08      	it	eq
 80030f4:	f044 0401 	orreq.w	r4, r4, #1
 80030f8:	3718      	adds	r7, #24
 80030fa:	42bd      	cmp	r5, r7
 80030fc:	bf08      	it	eq
 80030fe:	f044 0401 	orreq.w	r4, r4, #1
 8003102:	3718      	adds	r7, #24
 8003104:	42bd      	cmp	r5, r7
 8003106:	bf08      	it	eq
 8003108:	f044 0401 	orreq.w	r4, r4, #1
 800310c:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003110:	42bd      	cmp	r5, r7
 8003112:	bf08      	it	eq
 8003114:	f044 0401 	orreq.w	r4, r4, #1
 8003118:	3718      	adds	r7, #24
 800311a:	42bd      	cmp	r5, r7
 800311c:	bf08      	it	eq
 800311e:	f044 0401 	orreq.w	r4, r4, #1
 8003122:	3718      	adds	r7, #24
 8003124:	42bd      	cmp	r5, r7
 8003126:	bf08      	it	eq
 8003128:	f044 0401 	orreq.w	r4, r4, #1
 800312c:	3718      	adds	r7, #24
 800312e:	42bd      	cmp	r5, r7
 8003130:	bf08      	it	eq
 8003132:	f044 0401 	orreq.w	r4, r4, #1
 8003136:	3718      	adds	r7, #24
 8003138:	42bd      	cmp	r5, r7
 800313a:	bf08      	it	eq
 800313c:	f044 0401 	orreq.w	r4, r4, #1
 8003140:	3718      	adds	r7, #24
 8003142:	42bd      	cmp	r5, r7
 8003144:	bf08      	it	eq
 8003146:	f044 0401 	orreq.w	r4, r4, #1
 800314a:	3718      	adds	r7, #24
 800314c:	42bd      	cmp	r5, r7
 800314e:	bf08      	it	eq
 8003150:	f044 0401 	orreq.w	r4, r4, #1
 8003154:	b914      	cbnz	r4, 800315c <DMA_SetConfig+0x1a0>
 8003156:	4c30      	ldr	r4, [pc, #192]	; (8003218 <DMA_SetConfig+0x25c>)
 8003158:	42a5      	cmp	r5, r4
 800315a:	d115      	bne.n	8003188 <DMA_SetConfig+0x1cc>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800315c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800315e:	f004 051f 	and.w	r5, r4, #31
 8003162:	243f      	movs	r4, #63	; 0x3f
 8003164:	40ac      	lsls	r4, r5
 8003166:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003168:	6805      	ldr	r5, [r0, #0]
 800316a:	682c      	ldr	r4, [r5, #0]
 800316c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003170:	602c      	str	r4, [r5, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003172:	6804      	ldr	r4, [r0, #0]
 8003174:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003176:	6883      	ldr	r3, [r0, #8]
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d03a      	beq.n	80031f2 <DMA_SetConfig+0x236>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800317c:	6803      	ldr	r3, [r0, #0]
 800317e:	6099      	str	r1, [r3, #8]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003184:	bcf0      	pop	{r4, r5, r6, r7}
 8003186:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003188:	4c21      	ldr	r4, [pc, #132]	; (8003210 <DMA_SetConfig+0x254>)
 800318a:	4f24      	ldr	r7, [pc, #144]	; (800321c <DMA_SetConfig+0x260>)
 800318c:	42bd      	cmp	r5, r7
 800318e:	bf18      	it	ne
 8003190:	42a5      	cmpne	r5, r4
 8003192:	bf0c      	ite	eq
 8003194:	2401      	moveq	r4, #1
 8003196:	2400      	movne	r4, #0
 8003198:	3714      	adds	r7, #20
 800319a:	42bd      	cmp	r5, r7
 800319c:	bf08      	it	eq
 800319e:	f044 0401 	orreq.w	r4, r4, #1
 80031a2:	3714      	adds	r7, #20
 80031a4:	42bd      	cmp	r5, r7
 80031a6:	bf08      	it	eq
 80031a8:	f044 0401 	orreq.w	r4, r4, #1
 80031ac:	3714      	adds	r7, #20
 80031ae:	42bd      	cmp	r5, r7
 80031b0:	bf08      	it	eq
 80031b2:	f044 0401 	orreq.w	r4, r4, #1
 80031b6:	3714      	adds	r7, #20
 80031b8:	42bd      	cmp	r5, r7
 80031ba:	bf08      	it	eq
 80031bc:	f044 0401 	orreq.w	r4, r4, #1
 80031c0:	3714      	adds	r7, #20
 80031c2:	42bd      	cmp	r5, r7
 80031c4:	bf08      	it	eq
 80031c6:	f044 0401 	orreq.w	r4, r4, #1
 80031ca:	b914      	cbnz	r4, 80031d2 <DMA_SetConfig+0x216>
 80031cc:	4c11      	ldr	r4, [pc, #68]	; (8003214 <DMA_SetConfig+0x258>)
 80031ce:	42a5      	cmp	r5, r4
 80031d0:	d1d8      	bne.n	8003184 <DMA_SetConfig+0x1c8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031d2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80031d4:	f004 051f 	and.w	r5, r4, #31
 80031d8:	2401      	movs	r4, #1
 80031da:	40ac      	lsls	r4, r5
 80031dc:	6074      	str	r4, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80031de:	6804      	ldr	r4, [r0, #0]
 80031e0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031e2:	6883      	ldr	r3, [r0, #8]
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d009      	beq.n	80031fc <DMA_SetConfig+0x240>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80031e8:	6803      	ldr	r3, [r0, #0]
 80031ea:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80031ec:	6803      	ldr	r3, [r0, #0]
 80031ee:	60da      	str	r2, [r3, #12]
}
 80031f0:	e7c8      	b.n	8003184 <DMA_SetConfig+0x1c8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	60d9      	str	r1, [r3, #12]
 80031fa:	e7c3      	b.n	8003184 <DMA_SetConfig+0x1c8>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80031fc:	6803      	ldr	r3, [r0, #0]
 80031fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	60d9      	str	r1, [r3, #12]
 8003204:	e7be      	b.n	8003184 <DMA_SetConfig+0x1c8>
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	58025408 	.word	0x58025408
 8003214:	58025494 	.word	0x58025494
 8003218:	400204b8 	.word	0x400204b8
 800321c:	5802541c 	.word	0x5802541c

08003220 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	6802      	ldr	r2, [r0, #0]
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <DMA_CalcBaseAndBitshift+0xd4>)
 8003224:	4934      	ldr	r1, [pc, #208]	; (80032f8 <DMA_CalcBaseAndBitshift+0xd8>)
 8003226:	428a      	cmp	r2, r1
 8003228:	bf18      	it	ne
 800322a:	429a      	cmpne	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	3118      	adds	r1, #24
 8003234:	428a      	cmp	r2, r1
 8003236:	bf08      	it	eq
 8003238:	f043 0301 	orreq.w	r3, r3, #1
 800323c:	3118      	adds	r1, #24
 800323e:	428a      	cmp	r2, r1
 8003240:	bf08      	it	eq
 8003242:	f043 0301 	orreq.w	r3, r3, #1
 8003246:	3118      	adds	r1, #24
 8003248:	428a      	cmp	r2, r1
 800324a:	bf08      	it	eq
 800324c:	f043 0301 	orreq.w	r3, r3, #1
 8003250:	3118      	adds	r1, #24
 8003252:	428a      	cmp	r2, r1
 8003254:	bf08      	it	eq
 8003256:	f043 0301 	orreq.w	r3, r3, #1
 800325a:	3118      	adds	r1, #24
 800325c:	428a      	cmp	r2, r1
 800325e:	bf08      	it	eq
 8003260:	f043 0301 	orreq.w	r3, r3, #1
 8003264:	3118      	adds	r1, #24
 8003266:	428a      	cmp	r2, r1
 8003268:	bf08      	it	eq
 800326a:	f043 0301 	orreq.w	r3, r3, #1
 800326e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003272:	428a      	cmp	r2, r1
 8003274:	bf08      	it	eq
 8003276:	f043 0301 	orreq.w	r3, r3, #1
 800327a:	3118      	adds	r1, #24
 800327c:	428a      	cmp	r2, r1
 800327e:	bf08      	it	eq
 8003280:	f043 0301 	orreq.w	r3, r3, #1
 8003284:	3118      	adds	r1, #24
 8003286:	428a      	cmp	r2, r1
 8003288:	bf08      	it	eq
 800328a:	f043 0301 	orreq.w	r3, r3, #1
 800328e:	3118      	adds	r1, #24
 8003290:	428a      	cmp	r2, r1
 8003292:	bf08      	it	eq
 8003294:	f043 0301 	orreq.w	r3, r3, #1
 8003298:	3118      	adds	r1, #24
 800329a:	428a      	cmp	r2, r1
 800329c:	bf08      	it	eq
 800329e:	f043 0301 	orreq.w	r3, r3, #1
 80032a2:	3118      	adds	r1, #24
 80032a4:	428a      	cmp	r2, r1
 80032a6:	bf08      	it	eq
 80032a8:	f043 0301 	orreq.w	r3, r3, #1
 80032ac:	3118      	adds	r1, #24
 80032ae:	428a      	cmp	r2, r1
 80032b0:	bf08      	it	eq
 80032b2:	f043 0301 	orreq.w	r3, r3, #1
 80032b6:	b913      	cbnz	r3, 80032be <DMA_CalcBaseAndBitshift+0x9e>
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <DMA_CalcBaseAndBitshift+0xdc>)
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d115      	bne.n	80032ea <DMA_CalcBaseAndBitshift+0xca>
{
 80032be:	b410      	push	{r4}
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032c0:	b2d1      	uxtb	r1, r2
 80032c2:	3910      	subs	r1, #16
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <DMA_CalcBaseAndBitshift+0xe0>)
 80032c6:	fba3 4301 	umull	r4, r3, r3, r1

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80032ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032ce:	4c0d      	ldr	r4, [pc, #52]	; (8003304 <DMA_CalcBaseAndBitshift+0xe4>)
 80032d0:	5ce3      	ldrb	r3, [r4, r3]
 80032d2:	65c3      	str	r3, [r0, #92]	; 0x5c

    if (stream_number > 3U)
 80032d4:	295f      	cmp	r1, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <DMA_CalcBaseAndBitshift+0xe8>)
 80032d8:	ea03 0302 	and.w	r3, r3, r2
 80032dc:	bf88      	it	hi
 80032de:	3304      	addhi	r3, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032e0:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80032e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80032e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80032ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ee:	6582      	str	r2, [r0, #88]	; 0x58
}
 80032f0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80032f2:	4770      	bx	lr
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	400204b8 	.word	0x400204b8
 8003300:	aaaaaaab 	.word	0xaaaaaaab
 8003304:	08010f78 	.word	0x08010f78
 8003308:	fffffc00 	.word	0xfffffc00

0800330c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800330c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800330e:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8003310:	4928      	ldr	r1, [pc, #160]	; (80033b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8003312:	428b      	cmp	r3, r1
 8003314:	bf18      	it	ne
 8003316:	4293      	cmpne	r3, r2
 8003318:	bf0c      	ite	eq
 800331a:	2201      	moveq	r2, #1
 800331c:	2200      	movne	r2, #0
 800331e:	3114      	adds	r1, #20
 8003320:	428b      	cmp	r3, r1
 8003322:	bf08      	it	eq
 8003324:	f042 0201 	orreq.w	r2, r2, #1
 8003328:	3114      	adds	r1, #20
 800332a:	428b      	cmp	r3, r1
 800332c:	bf08      	it	eq
 800332e:	f042 0201 	orreq.w	r2, r2, #1
 8003332:	3114      	adds	r1, #20
 8003334:	428b      	cmp	r3, r1
 8003336:	bf08      	it	eq
 8003338:	f042 0201 	orreq.w	r2, r2, #1
 800333c:	3114      	adds	r1, #20
 800333e:	428b      	cmp	r3, r1
 8003340:	bf08      	it	eq
 8003342:	f042 0201 	orreq.w	r2, r2, #1
 8003346:	3114      	adds	r1, #20
 8003348:	428b      	cmp	r3, r1
 800334a:	bf08      	it	eq
 800334c:	f042 0201 	orreq.w	r2, r2, #1
 8003350:	b912      	cbnz	r2, 8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d112      	bne.n	800337e <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3b08      	subs	r3, #8
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8003364:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800336e:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003370:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003374:	2201      	movs	r2, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	6683      	str	r3, [r0, #104]	; 0x68
 800337c:	4770      	bx	lr
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800337e:	b2da      	uxtb	r2, r3
 8003380:	3a10      	subs	r2, #16
 8003382:	4911      	ldr	r1, [pc, #68]	; (80033c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8003384:	fba1 1202 	umull	r1, r2, r1, r2
 8003388:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800338a:	4910      	ldr	r1, [pc, #64]	; (80033cc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 800338c:	4419      	add	r1, r3
 800338e:	29a8      	cmp	r1, #168	; 0xa8
 8003390:	d90c      	bls.n	80033ac <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 800339c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800339e:	f002 021f 	and.w	r2, r2, #31
 80033a2:	2301      	movs	r3, #1
 80033a4:	fa03 f202 	lsl.w	r2, r3, r2
 80033a8:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 80033aa:	4770      	bx	lr
      stream_number += 8U;
 80033ac:	3208      	adds	r2, #8
 80033ae:	e7f0      	b.n	8003392 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
 80033b0:	58025408 	.word	0x58025408
 80033b4:	5802541c 	.word	0x5802541c
 80033b8:	58025494 	.word	0x58025494
 80033bc:	cccccccd 	.word	0xcccccccd
 80033c0:	16009600 	.word	0x16009600
 80033c4:	58025880 	.word	0x58025880
 80033c8:	aaaaaaab 	.word	0xaaaaaaab
 80033cc:	bffdfbf0 	.word	0xbffdfbf0
 80033d0:	10008200 	.word	0x10008200
 80033d4:	40020880 	.word	0x40020880

080033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033d8:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80033dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80033e0:	2907      	cmp	r1, #7
 80033e2:	d83a      	bhi.n	800345a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x82>
{
 80033e4:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033e6:	6802      	ldr	r2, [r0, #0]
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80033ea:	4c1d      	ldr	r4, [pc, #116]	; (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80033ec:	42a2      	cmp	r2, r4
 80033ee:	bf18      	it	ne
 80033f0:	429a      	cmpne	r2, r3
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	3414      	adds	r4, #20
 80033fa:	42a2      	cmp	r2, r4
 80033fc:	bf08      	it	eq
 80033fe:	f043 0301 	orreq.w	r3, r3, #1
 8003402:	3414      	adds	r4, #20
 8003404:	42a2      	cmp	r2, r4
 8003406:	bf08      	it	eq
 8003408:	f043 0301 	orreq.w	r3, r3, #1
 800340c:	3414      	adds	r4, #20
 800340e:	42a2      	cmp	r2, r4
 8003410:	bf08      	it	eq
 8003412:	f043 0301 	orreq.w	r3, r3, #1
 8003416:	3414      	adds	r4, #20
 8003418:	42a2      	cmp	r2, r4
 800341a:	bf08      	it	eq
 800341c:	f043 0301 	orreq.w	r3, r3, #1
 8003420:	3414      	adds	r4, #20
 8003422:	42a2      	cmp	r2, r4
 8003424:	bf08      	it	eq
 8003426:	f043 0301 	orreq.w	r3, r3, #1
 800342a:	b913      	cbnz	r3, 8003432 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5a>
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 800342e:	429a      	cmp	r2, r3
 8003430:	d10c      	bne.n	800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
 8003434:	4463      	add	r3, ip
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 800343c:	6703      	str	r3, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800343e:	2301      	movs	r3, #1
 8003440:	fa03 f101 	lsl.w	r1, r3, r1
 8003444:	6741      	str	r1, [r0, #116]	; 0x74
  }
}
 8003446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800344a:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 800344e:	4463      	add	r3, ip
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x9c>)
 8003456:	6703      	str	r3, [r0, #112]	; 0x70
 8003458:	e7f1      	b.n	800343e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x66>
 800345a:	4770      	bx	lr
 800345c:	58025408 	.word	0x58025408
 8003460:	5802541c 	.word	0x5802541c
 8003464:	58025494 	.word	0x58025494
 8003468:	1600963f 	.word	0x1600963f
 800346c:	58025940 	.word	0x58025940
 8003470:	1000823f 	.word	0x1000823f
 8003474:	40020940 	.word	0x40020940

08003478 <HAL_DMA_Init>:
{
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff f8a6 	bl	80025cc <HAL_GetTick>
  if(hdma == NULL)
 8003480:	2c00      	cmp	r4, #0
 8003482:	f000 820c 	beq.w	800389e <HAL_DMA_Init+0x426>
 8003486:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	4b64      	ldr	r3, [pc, #400]	; (800361c <HAL_DMA_Init+0x1a4>)
 800348c:	4964      	ldr	r1, [pc, #400]	; (8003620 <HAL_DMA_Init+0x1a8>)
 800348e:	428a      	cmp	r2, r1
 8003490:	bf18      	it	ne
 8003492:	429a      	cmpne	r2, r3
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	3118      	adds	r1, #24
 800349c:	428a      	cmp	r2, r1
 800349e:	bf08      	it	eq
 80034a0:	f043 0301 	orreq.w	r3, r3, #1
 80034a4:	3118      	adds	r1, #24
 80034a6:	428a      	cmp	r2, r1
 80034a8:	bf08      	it	eq
 80034aa:	f043 0301 	orreq.w	r3, r3, #1
 80034ae:	3118      	adds	r1, #24
 80034b0:	428a      	cmp	r2, r1
 80034b2:	bf08      	it	eq
 80034b4:	f043 0301 	orreq.w	r3, r3, #1
 80034b8:	3118      	adds	r1, #24
 80034ba:	428a      	cmp	r2, r1
 80034bc:	bf08      	it	eq
 80034be:	f043 0301 	orreq.w	r3, r3, #1
 80034c2:	3118      	adds	r1, #24
 80034c4:	428a      	cmp	r2, r1
 80034c6:	bf08      	it	eq
 80034c8:	f043 0301 	orreq.w	r3, r3, #1
 80034cc:	3118      	adds	r1, #24
 80034ce:	428a      	cmp	r2, r1
 80034d0:	bf08      	it	eq
 80034d2:	f043 0301 	orreq.w	r3, r3, #1
 80034d6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80034da:	428a      	cmp	r2, r1
 80034dc:	bf08      	it	eq
 80034de:	f043 0301 	orreq.w	r3, r3, #1
 80034e2:	3118      	adds	r1, #24
 80034e4:	428a      	cmp	r2, r1
 80034e6:	bf08      	it	eq
 80034e8:	f043 0301 	orreq.w	r3, r3, #1
 80034ec:	3118      	adds	r1, #24
 80034ee:	428a      	cmp	r2, r1
 80034f0:	bf08      	it	eq
 80034f2:	f043 0301 	orreq.w	r3, r3, #1
 80034f6:	3118      	adds	r1, #24
 80034f8:	428a      	cmp	r2, r1
 80034fa:	bf08      	it	eq
 80034fc:	f043 0301 	orreq.w	r3, r3, #1
 8003500:	3118      	adds	r1, #24
 8003502:	428a      	cmp	r2, r1
 8003504:	bf08      	it	eq
 8003506:	f043 0301 	orreq.w	r3, r3, #1
 800350a:	3118      	adds	r1, #24
 800350c:	428a      	cmp	r2, r1
 800350e:	bf08      	it	eq
 8003510:	f043 0301 	orreq.w	r3, r3, #1
 8003514:	3118      	adds	r1, #24
 8003516:	428a      	cmp	r2, r1
 8003518:	bf08      	it	eq
 800351a:	f043 0301 	orreq.w	r3, r3, #1
 800351e:	b913      	cbnz	r3, 8003526 <HAL_DMA_Init+0xae>
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_DMA_Init+0x1ac>)
 8003522:	429a      	cmp	r2, r3
 8003524:	d11a      	bne.n	800355c <HAL_DMA_Init+0xe4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800352c:	2300      	movs	r3, #0
 800352e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	f012 0f01 	tst.w	r2, #1
 8003542:	d07d      	beq.n	8003640 <HAL_DMA_Init+0x1c8>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003544:	f7ff f842 	bl	80025cc <HAL_GetTick>
 8003548:	1b43      	subs	r3, r0, r5
 800354a:	2b05      	cmp	r3, #5
 800354c:	d9f5      	bls.n	800353a <HAL_DMA_Init+0xc2>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354e:	2320      	movs	r3, #32
 8003550:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003552:	2303      	movs	r3, #3
 8003554:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
}
 800355a:	bd38      	pop	{r3, r4, r5, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_DMA_Init+0x1b0>)
 800355e:	4933      	ldr	r1, [pc, #204]	; (800362c <HAL_DMA_Init+0x1b4>)
 8003560:	428a      	cmp	r2, r1
 8003562:	bf18      	it	ne
 8003564:	429a      	cmpne	r2, r3
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	3114      	adds	r1, #20
 800356e:	428a      	cmp	r2, r1
 8003570:	bf08      	it	eq
 8003572:	f043 0301 	orreq.w	r3, r3, #1
 8003576:	3114      	adds	r1, #20
 8003578:	428a      	cmp	r2, r1
 800357a:	bf08      	it	eq
 800357c:	f043 0301 	orreq.w	r3, r3, #1
 8003580:	3114      	adds	r1, #20
 8003582:	428a      	cmp	r2, r1
 8003584:	bf08      	it	eq
 8003586:	f043 0301 	orreq.w	r3, r3, #1
 800358a:	3114      	adds	r1, #20
 800358c:	428a      	cmp	r2, r1
 800358e:	bf08      	it	eq
 8003590:	f043 0301 	orreq.w	r3, r3, #1
 8003594:	3114      	adds	r1, #20
 8003596:	428a      	cmp	r2, r1
 8003598:	bf08      	it	eq
 800359a:	f043 0301 	orreq.w	r3, r3, #1
 800359e:	b91b      	cbnz	r3, 80035a8 <HAL_DMA_Init+0x130>
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_DMA_Init+0x1b8>)
 80035a2:	429a      	cmp	r2, r3
 80035a4:	f040 8165 	bne.w	8003872 <HAL_DMA_Init+0x3fa>
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80035ae:	2300      	movs	r3, #0
 80035b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035b4:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035b6:	481f      	ldr	r0, [pc, #124]	; (8003634 <HAL_DMA_Init+0x1bc>)
 80035b8:	4018      	ands	r0, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ba:	68a3      	ldr	r3, [r4, #8]
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	f000 815f 	beq.w	8003880 <HAL_DMA_Init+0x408>
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	bf0c      	ite	eq
 80035c6:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 80035ca:	2100      	movne	r1, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035cc:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035d6:	6965      	ldr	r5, [r4, #20]
 80035d8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035dc:	69a5      	ldr	r5, [r4, #24]
 80035de:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035e2:	69e5      	ldr	r5, [r4, #28]
 80035e4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035e8:	6a25      	ldr	r5, [r4, #32]
 80035ea:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80035ee:	4303      	orrs	r3, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f0:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035f2:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_DMA_Init+0x1c0>)
 80035f8:	4413      	add	r3, r2
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_DMA_Init+0x1c4>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003606:	4620      	mov	r0, r4
 8003608:	f7ff fe0a 	bl	8003220 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800360c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800360e:	f002 011f 	and.w	r1, r2, #31
 8003612:	2201      	movs	r2, #1
 8003614:	408a      	lsls	r2, r1
 8003616:	6042      	str	r2, [r0, #4]
 8003618:	e05e      	b.n	80036d8 <HAL_DMA_Init+0x260>
 800361a:	bf00      	nop
 800361c:	40020010 	.word	0x40020010
 8003620:	40020028 	.word	0x40020028
 8003624:	400204b8 	.word	0x400204b8
 8003628:	58025408 	.word	0x58025408
 800362c:	5802541c 	.word	0x5802541c
 8003630:	58025494 	.word	0x58025494
 8003634:	fffe000f 	.word	0xfffe000f
 8003638:	a7fdabf8 	.word	0xa7fdabf8
 800363c:	cccccccd 	.word	0xcccccccd
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003640:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003642:	489a      	ldr	r0, [pc, #616]	; (80038ac <HAL_DMA_Init+0x434>)
 8003644:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8003646:	68a1      	ldr	r1, [r4, #8]
 8003648:	68e2      	ldr	r2, [r4, #12]
 800364a:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	6921      	ldr	r1, [r4, #16]
 800364e:	430a      	orrs	r2, r1
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003654:	69a1      	ldr	r1, [r4, #24]
 8003656:	430a      	orrs	r2, r1
 8003658:	69e1      	ldr	r1, [r4, #28]
 800365a:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800365c:	6a21      	ldr	r1, [r4, #32]
 800365e:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8003660:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003662:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003664:	2904      	cmp	r1, #4
 8003666:	f000 80c8 	beq.w	80037fa <HAL_DMA_Init+0x382>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800366a:	4991      	ldr	r1, [pc, #580]	; (80038b0 <HAL_DMA_Init+0x438>)
 800366c:	6808      	ldr	r0, [r1, #0]
 800366e:	4991      	ldr	r1, [pc, #580]	; (80038b4 <HAL_DMA_Init+0x43c>)
 8003670:	4001      	ands	r1, r0
 8003672:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003676:	d30d      	bcc.n	8003694 <HAL_DMA_Init+0x21c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003678:	6861      	ldr	r1, [r4, #4]
 800367a:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 800367e:	281f      	cmp	r0, #31
 8003680:	f200 810f 	bhi.w	80038a2 <HAL_DMA_Init+0x42a>
 8003684:	498c      	ldr	r1, [pc, #560]	; (80038b8 <HAL_DMA_Init+0x440>)
 8003686:	fa21 f000 	lsr.w	r0, r1, r0
 800368a:	f010 0f01 	tst.w	r0, #1
 800368e:	d001      	beq.n	8003694 <HAL_DMA_Init+0x21c>
        registerValue |= DMA_SxCR_TRBUFF;
 8003690:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003694:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	694a      	ldr	r2, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800369a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800369e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a0:	431a      	orrs	r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d10e      	bne.n	80036c4 <HAL_DMA_Init+0x24c>
      registerValue |= hdma->Init.FIFOThreshold;
 80036a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80036a8:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ac:	b153      	cbz	r3, 80036c4 <HAL_DMA_Init+0x24c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ae:	69a5      	ldr	r5, [r4, #24]
 80036b0:	2d00      	cmp	r5, #0
 80036b2:	f040 80b8 	bne.w	8003826 <HAL_DMA_Init+0x3ae>
    switch (hdma->Init.FIFOThreshold)
 80036b6:	2801      	cmp	r0, #1
 80036b8:	f000 80af 	beq.w	800381a <HAL_DMA_Init+0x3a2>
 80036bc:	f030 0002 	bics.w	r0, r0, #2
 80036c0:	f000 80a0 	beq.w	8003804 <HAL_DMA_Init+0x38c>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036c4:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fdaa 	bl	8003220 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	233f      	movs	r3, #63	; 0x3f
 80036d4:	4093      	lsls	r3, r2
 80036d6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d8:	6822      	ldr	r2, [r4, #0]
 80036da:	4b78      	ldr	r3, [pc, #480]	; (80038bc <HAL_DMA_Init+0x444>)
 80036dc:	4978      	ldr	r1, [pc, #480]	; (80038c0 <HAL_DMA_Init+0x448>)
 80036de:	428a      	cmp	r2, r1
 80036e0:	bf18      	it	ne
 80036e2:	429a      	cmpne	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	3118      	adds	r1, #24
 80036ec:	428a      	cmp	r2, r1
 80036ee:	bf08      	it	eq
 80036f0:	f043 0301 	orreq.w	r3, r3, #1
 80036f4:	3118      	adds	r1, #24
 80036f6:	428a      	cmp	r2, r1
 80036f8:	bf08      	it	eq
 80036fa:	f043 0301 	orreq.w	r3, r3, #1
 80036fe:	3118      	adds	r1, #24
 8003700:	428a      	cmp	r2, r1
 8003702:	bf08      	it	eq
 8003704:	f043 0301 	orreq.w	r3, r3, #1
 8003708:	3118      	adds	r1, #24
 800370a:	428a      	cmp	r2, r1
 800370c:	bf08      	it	eq
 800370e:	f043 0301 	orreq.w	r3, r3, #1
 8003712:	3118      	adds	r1, #24
 8003714:	428a      	cmp	r2, r1
 8003716:	bf08      	it	eq
 8003718:	f043 0301 	orreq.w	r3, r3, #1
 800371c:	3118      	adds	r1, #24
 800371e:	428a      	cmp	r2, r1
 8003720:	bf08      	it	eq
 8003722:	f043 0301 	orreq.w	r3, r3, #1
 8003726:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800372a:	428a      	cmp	r2, r1
 800372c:	bf08      	it	eq
 800372e:	f043 0301 	orreq.w	r3, r3, #1
 8003732:	3118      	adds	r1, #24
 8003734:	428a      	cmp	r2, r1
 8003736:	bf08      	it	eq
 8003738:	f043 0301 	orreq.w	r3, r3, #1
 800373c:	3118      	adds	r1, #24
 800373e:	428a      	cmp	r2, r1
 8003740:	bf08      	it	eq
 8003742:	f043 0301 	orreq.w	r3, r3, #1
 8003746:	3118      	adds	r1, #24
 8003748:	428a      	cmp	r2, r1
 800374a:	bf08      	it	eq
 800374c:	f043 0301 	orreq.w	r3, r3, #1
 8003750:	3118      	adds	r1, #24
 8003752:	428a      	cmp	r2, r1
 8003754:	bf08      	it	eq
 8003756:	f043 0301 	orreq.w	r3, r3, #1
 800375a:	3118      	adds	r1, #24
 800375c:	428a      	cmp	r2, r1
 800375e:	bf08      	it	eq
 8003760:	f043 0301 	orreq.w	r3, r3, #1
 8003764:	3118      	adds	r1, #24
 8003766:	428a      	cmp	r2, r1
 8003768:	bf08      	it	eq
 800376a:	f043 0301 	orreq.w	r3, r3, #1
 800376e:	3118      	adds	r1, #24
 8003770:	428a      	cmp	r2, r1
 8003772:	bf08      	it	eq
 8003774:	f043 0301 	orreq.w	r3, r3, #1
 8003778:	4952      	ldr	r1, [pc, #328]	; (80038c4 <HAL_DMA_Init+0x44c>)
 800377a:	428a      	cmp	r2, r1
 800377c:	bf08      	it	eq
 800377e:	f043 0301 	orreq.w	r3, r3, #1
 8003782:	3114      	adds	r1, #20
 8003784:	428a      	cmp	r2, r1
 8003786:	bf08      	it	eq
 8003788:	f043 0301 	orreq.w	r3, r3, #1
 800378c:	3114      	adds	r1, #20
 800378e:	428a      	cmp	r2, r1
 8003790:	bf08      	it	eq
 8003792:	f043 0301 	orreq.w	r3, r3, #1
 8003796:	3114      	adds	r1, #20
 8003798:	428a      	cmp	r2, r1
 800379a:	bf08      	it	eq
 800379c:	f043 0301 	orreq.w	r3, r3, #1
 80037a0:	3114      	adds	r1, #20
 80037a2:	428a      	cmp	r2, r1
 80037a4:	bf08      	it	eq
 80037a6:	f043 0301 	orreq.w	r3, r3, #1
 80037aa:	3114      	adds	r1, #20
 80037ac:	428a      	cmp	r2, r1
 80037ae:	bf08      	it	eq
 80037b0:	f043 0301 	orreq.w	r3, r3, #1
 80037b4:	3114      	adds	r1, #20
 80037b6:	428a      	cmp	r2, r1
 80037b8:	bf08      	it	eq
 80037ba:	f043 0301 	orreq.w	r3, r3, #1
 80037be:	b913      	cbnz	r3, 80037c6 <HAL_DMA_Init+0x34e>
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_DMA_Init+0x450>)
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d113      	bne.n	80037ee <HAL_DMA_Init+0x376>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff fda0 	bl	800330c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d058      	beq.n	8003884 <HAL_DMA_Init+0x40c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037d4:	7922      	ldrb	r2, [r4, #4]
 80037d6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037da:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80037dc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	2b07      	cmp	r3, #7
 80037e4:	d951      	bls.n	800388a <HAL_DMA_Init+0x412>
      hdma->DMAmuxRequestGen = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ea:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ec:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ee:	2000      	movs	r0, #0
 80037f0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80037f8:	e6af      	b.n	800355a <HAL_DMA_Init+0xe2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80037fe:	4301      	orrs	r1, r0
 8003800:	430a      	orrs	r2, r1
 8003802:	e732      	b.n	800366a <HAL_DMA_Init+0x1f2>
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003808:	2b00      	cmp	r3, #0
 800380a:	f43f af5b 	beq.w	80036c4 <HAL_DMA_Init+0x24c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800380e:	2340      	movs	r3, #64	; 0x40
 8003810:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	2001      	movs	r0, #1
 8003814:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8003818:	e69f      	b.n	800355a <HAL_DMA_Init+0xe2>
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800381e:	bf14      	ite	ne
 8003820:	2300      	movne	r3, #0
 8003822:	2301      	moveq	r3, #1
 8003824:	e7f0      	b.n	8003808 <HAL_DMA_Init+0x390>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003826:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800382a:	d00a      	beq.n	8003842 <HAL_DMA_Init+0x3ca>
    switch (hdma->Init.FIFOThreshold)
 800382c:	2802      	cmp	r0, #2
 800382e:	d9ee      	bls.n	800380e <HAL_DMA_Init+0x396>
 8003830:	2803      	cmp	r0, #3
 8003832:	f47f af47 	bne.w	80036c4 <HAL_DMA_Init+0x24c>
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800383a:	2b00      	cmp	r3, #0
 800383c:	f43f af42 	beq.w	80036c4 <HAL_DMA_Init+0x24c>
 8003840:	e7e5      	b.n	800380e <HAL_DMA_Init+0x396>
    switch (hdma->Init.FIFOThreshold)
 8003842:	2803      	cmp	r0, #3
 8003844:	f63f af3e 	bhi.w	80036c4 <HAL_DMA_Init+0x24c>
 8003848:	a501      	add	r5, pc, #4	; (adr r5, 8003850 <HAL_DMA_Init+0x3d8>)
 800384a:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 800384e:	bf00      	nop
 8003850:	0800380f 	.word	0x0800380f
 8003854:	08003861 	.word	0x08003861
 8003858:	0800380f 	.word	0x0800380f
 800385c:	08003867 	.word	0x08003867
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8003864:	e7e9      	b.n	800383a <HAL_DMA_Init+0x3c2>
 8003866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800386a:	bf14      	ite	ne
 800386c:	2300      	movne	r3, #0
 800386e:	2301      	moveq	r3, #1
 8003870:	e7e3      	b.n	800383a <HAL_DMA_Init+0x3c2>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003872:	2340      	movs	r3, #64	; 0x40
 8003874:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003876:	2303      	movs	r3, #3
 8003878:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800387c:	2001      	movs	r0, #1
 800387e:	e66c      	b.n	800355a <HAL_DMA_Init+0xe2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003880:	2110      	movs	r1, #16
 8003882:	e6a3      	b.n	80035cc <HAL_DMA_Init+0x154>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003884:	2300      	movs	r3, #0
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	e7a3      	b.n	80037d2 <HAL_DMA_Init+0x35a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fda4 	bl	80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003890:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003896:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003898:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	e7a7      	b.n	80037ee <HAL_DMA_Init+0x376>
    return HAL_ERROR;
 800389e:	2001      	movs	r0, #1
 80038a0:	e65b      	b.n	800355a <HAL_DMA_Init+0xe2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80038a2:	394f      	subs	r1, #79	; 0x4f
 80038a4:	2903      	cmp	r1, #3
 80038a6:	f67f aef3 	bls.w	8003690 <HAL_DMA_Init+0x218>
 80038aa:	e6f3      	b.n	8003694 <HAL_DMA_Init+0x21c>
 80038ac:	fe10803f 	.word	0xfe10803f
 80038b0:	5c001000 	.word	0x5c001000
 80038b4:	ffff0000 	.word	0xffff0000
 80038b8:	c3c0003f 	.word	0xc3c0003f
 80038bc:	40020010 	.word	0x40020010
 80038c0:	40020028 	.word	0x40020028
 80038c4:	58025408 	.word	0x58025408
 80038c8:	58025494 	.word	0x58025494

080038cc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80038cc:	2800      	cmp	r0, #0
 80038ce:	f000 81d2 	beq.w	8003c76 <HAL_DMA_Start_IT+0x3aa>
{
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80038d6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80038da:	2801      	cmp	r0, #1
 80038dc:	f000 81cd 	beq.w	8003c7a <HAL_DMA_Start_IT+0x3ae>
 80038e0:	2001      	movs	r0, #1
 80038e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80038e6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80038ea:	b2c0      	uxtb	r0, r0
 80038ec:	2801      	cmp	r0, #1
 80038ee:	d007      	beq.n	8003900 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038f4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80038f6:	2300      	movs	r3, #0
 80038f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
}
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003900:	2002      	movs	r0, #2
 8003902:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003906:	2000      	movs	r0, #0
 8003908:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800390a:	6825      	ldr	r5, [r4, #0]
 800390c:	4895      	ldr	r0, [pc, #596]	; (8003b64 <HAL_DMA_Start_IT+0x298>)
 800390e:	4e96      	ldr	r6, [pc, #600]	; (8003b68 <HAL_DMA_Start_IT+0x29c>)
 8003910:	42b5      	cmp	r5, r6
 8003912:	bf18      	it	ne
 8003914:	4285      	cmpne	r5, r0
 8003916:	bf0c      	ite	eq
 8003918:	2001      	moveq	r0, #1
 800391a:	2000      	movne	r0, #0
 800391c:	3618      	adds	r6, #24
 800391e:	42b5      	cmp	r5, r6
 8003920:	bf08      	it	eq
 8003922:	f040 0001 	orreq.w	r0, r0, #1
 8003926:	3618      	adds	r6, #24
 8003928:	42b5      	cmp	r5, r6
 800392a:	bf08      	it	eq
 800392c:	f040 0001 	orreq.w	r0, r0, #1
 8003930:	3618      	adds	r6, #24
 8003932:	42b5      	cmp	r5, r6
 8003934:	bf08      	it	eq
 8003936:	f040 0001 	orreq.w	r0, r0, #1
 800393a:	3618      	adds	r6, #24
 800393c:	42b5      	cmp	r5, r6
 800393e:	bf08      	it	eq
 8003940:	f040 0001 	orreq.w	r0, r0, #1
 8003944:	3618      	adds	r6, #24
 8003946:	42b5      	cmp	r5, r6
 8003948:	bf08      	it	eq
 800394a:	f040 0001 	orreq.w	r0, r0, #1
 800394e:	3618      	adds	r6, #24
 8003950:	42b5      	cmp	r5, r6
 8003952:	bf08      	it	eq
 8003954:	f040 0001 	orreq.w	r0, r0, #1
 8003958:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800395c:	42b5      	cmp	r5, r6
 800395e:	bf08      	it	eq
 8003960:	f040 0001 	orreq.w	r0, r0, #1
 8003964:	3618      	adds	r6, #24
 8003966:	42b5      	cmp	r5, r6
 8003968:	bf08      	it	eq
 800396a:	f040 0001 	orreq.w	r0, r0, #1
 800396e:	3618      	adds	r6, #24
 8003970:	42b5      	cmp	r5, r6
 8003972:	bf08      	it	eq
 8003974:	f040 0001 	orreq.w	r0, r0, #1
 8003978:	3618      	adds	r6, #24
 800397a:	42b5      	cmp	r5, r6
 800397c:	bf08      	it	eq
 800397e:	f040 0001 	orreq.w	r0, r0, #1
 8003982:	3618      	adds	r6, #24
 8003984:	42b5      	cmp	r5, r6
 8003986:	bf08      	it	eq
 8003988:	f040 0001 	orreq.w	r0, r0, #1
 800398c:	3618      	adds	r6, #24
 800398e:	42b5      	cmp	r5, r6
 8003990:	bf08      	it	eq
 8003992:	f040 0001 	orreq.w	r0, r0, #1
 8003996:	3618      	adds	r6, #24
 8003998:	42b5      	cmp	r5, r6
 800399a:	bf08      	it	eq
 800399c:	f040 0001 	orreq.w	r0, r0, #1
 80039a0:	b918      	cbnz	r0, 80039aa <HAL_DMA_Start_IT+0xde>
 80039a2:	4872      	ldr	r0, [pc, #456]	; (8003b6c <HAL_DMA_Start_IT+0x2a0>)
 80039a4:	4285      	cmp	r5, r0
 80039a6:	f040 814b 	bne.w	8003c40 <HAL_DMA_Start_IT+0x374>
 80039aa:	6828      	ldr	r0, [r5, #0]
 80039ac:	f020 0001 	bic.w	r0, r0, #1
 80039b0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff fb02 	bl	8002fbc <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_DMA_Start_IT+0x298>)
 80039bc:	496a      	ldr	r1, [pc, #424]	; (8003b68 <HAL_DMA_Start_IT+0x29c>)
 80039be:	428a      	cmp	r2, r1
 80039c0:	bf18      	it	ne
 80039c2:	429a      	cmpne	r2, r3
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	3118      	adds	r1, #24
 80039cc:	428a      	cmp	r2, r1
 80039ce:	bf08      	it	eq
 80039d0:	f043 0301 	orreq.w	r3, r3, #1
 80039d4:	3118      	adds	r1, #24
 80039d6:	428a      	cmp	r2, r1
 80039d8:	bf08      	it	eq
 80039da:	f043 0301 	orreq.w	r3, r3, #1
 80039de:	3118      	adds	r1, #24
 80039e0:	428a      	cmp	r2, r1
 80039e2:	bf08      	it	eq
 80039e4:	f043 0301 	orreq.w	r3, r3, #1
 80039e8:	3118      	adds	r1, #24
 80039ea:	428a      	cmp	r2, r1
 80039ec:	bf08      	it	eq
 80039ee:	f043 0301 	orreq.w	r3, r3, #1
 80039f2:	3118      	adds	r1, #24
 80039f4:	428a      	cmp	r2, r1
 80039f6:	bf08      	it	eq
 80039f8:	f043 0301 	orreq.w	r3, r3, #1
 80039fc:	3118      	adds	r1, #24
 80039fe:	428a      	cmp	r2, r1
 8003a00:	bf08      	it	eq
 8003a02:	f043 0301 	orreq.w	r3, r3, #1
 8003a06:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003a0a:	428a      	cmp	r2, r1
 8003a0c:	bf08      	it	eq
 8003a0e:	f043 0301 	orreq.w	r3, r3, #1
 8003a12:	3118      	adds	r1, #24
 8003a14:	428a      	cmp	r2, r1
 8003a16:	bf08      	it	eq
 8003a18:	f043 0301 	orreq.w	r3, r3, #1
 8003a1c:	3118      	adds	r1, #24
 8003a1e:	428a      	cmp	r2, r1
 8003a20:	bf08      	it	eq
 8003a22:	f043 0301 	orreq.w	r3, r3, #1
 8003a26:	3118      	adds	r1, #24
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	bf08      	it	eq
 8003a2c:	f043 0301 	orreq.w	r3, r3, #1
 8003a30:	3118      	adds	r1, #24
 8003a32:	428a      	cmp	r2, r1
 8003a34:	bf08      	it	eq
 8003a36:	f043 0301 	orreq.w	r3, r3, #1
 8003a3a:	3118      	adds	r1, #24
 8003a3c:	428a      	cmp	r2, r1
 8003a3e:	bf08      	it	eq
 8003a40:	f043 0301 	orreq.w	r3, r3, #1
 8003a44:	3118      	adds	r1, #24
 8003a46:	428a      	cmp	r2, r1
 8003a48:	bf08      	it	eq
 8003a4a:	f043 0301 	orreq.w	r3, r3, #1
 8003a4e:	b91b      	cbnz	r3, 8003a58 <HAL_DMA_Start_IT+0x18c>
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_DMA_Start_IT+0x2a0>)
 8003a52:	429a      	cmp	r2, r3
 8003a54:	f040 80f9 	bne.w	8003c4a <HAL_DMA_Start_IT+0x37e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	f023 031e 	bic.w	r3, r3, #30
 8003a5e:	f043 0316 	orr.w	r3, r3, #22
 8003a62:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a66:	b123      	cbz	r3, 8003a72 <HAL_DMA_Start_IT+0x1a6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_DMA_Start_IT+0x298>)
 8003a76:	493c      	ldr	r1, [pc, #240]	; (8003b68 <HAL_DMA_Start_IT+0x29c>)
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	bf18      	it	ne
 8003a7c:	429a      	cmpne	r2, r3
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	3118      	adds	r1, #24
 8003a86:	428a      	cmp	r2, r1
 8003a88:	bf08      	it	eq
 8003a8a:	f043 0301 	orreq.w	r3, r3, #1
 8003a8e:	3118      	adds	r1, #24
 8003a90:	428a      	cmp	r2, r1
 8003a92:	bf08      	it	eq
 8003a94:	f043 0301 	orreq.w	r3, r3, #1
 8003a98:	3118      	adds	r1, #24
 8003a9a:	428a      	cmp	r2, r1
 8003a9c:	bf08      	it	eq
 8003a9e:	f043 0301 	orreq.w	r3, r3, #1
 8003aa2:	3118      	adds	r1, #24
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	bf08      	it	eq
 8003aa8:	f043 0301 	orreq.w	r3, r3, #1
 8003aac:	3118      	adds	r1, #24
 8003aae:	428a      	cmp	r2, r1
 8003ab0:	bf08      	it	eq
 8003ab2:	f043 0301 	orreq.w	r3, r3, #1
 8003ab6:	3118      	adds	r1, #24
 8003ab8:	428a      	cmp	r2, r1
 8003aba:	bf08      	it	eq
 8003abc:	f043 0301 	orreq.w	r3, r3, #1
 8003ac0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003ac4:	428a      	cmp	r2, r1
 8003ac6:	bf08      	it	eq
 8003ac8:	f043 0301 	orreq.w	r3, r3, #1
 8003acc:	3118      	adds	r1, #24
 8003ace:	428a      	cmp	r2, r1
 8003ad0:	bf08      	it	eq
 8003ad2:	f043 0301 	orreq.w	r3, r3, #1
 8003ad6:	3118      	adds	r1, #24
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	bf08      	it	eq
 8003adc:	f043 0301 	orreq.w	r3, r3, #1
 8003ae0:	3118      	adds	r1, #24
 8003ae2:	428a      	cmp	r2, r1
 8003ae4:	bf08      	it	eq
 8003ae6:	f043 0301 	orreq.w	r3, r3, #1
 8003aea:	3118      	adds	r1, #24
 8003aec:	428a      	cmp	r2, r1
 8003aee:	bf08      	it	eq
 8003af0:	f043 0301 	orreq.w	r3, r3, #1
 8003af4:	3118      	adds	r1, #24
 8003af6:	428a      	cmp	r2, r1
 8003af8:	bf08      	it	eq
 8003afa:	f043 0301 	orreq.w	r3, r3, #1
 8003afe:	3118      	adds	r1, #24
 8003b00:	428a      	cmp	r2, r1
 8003b02:	bf08      	it	eq
 8003b04:	f043 0301 	orreq.w	r3, r3, #1
 8003b08:	3118      	adds	r1, #24
 8003b0a:	428a      	cmp	r2, r1
 8003b0c:	bf08      	it	eq
 8003b0e:	f043 0301 	orreq.w	r3, r3, #1
 8003b12:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_DMA_Start_IT+0x2a4>)
 8003b14:	428a      	cmp	r2, r1
 8003b16:	bf08      	it	eq
 8003b18:	f043 0301 	orreq.w	r3, r3, #1
 8003b1c:	3114      	adds	r1, #20
 8003b1e:	428a      	cmp	r2, r1
 8003b20:	bf08      	it	eq
 8003b22:	f043 0301 	orreq.w	r3, r3, #1
 8003b26:	3114      	adds	r1, #20
 8003b28:	428a      	cmp	r2, r1
 8003b2a:	bf08      	it	eq
 8003b2c:	f043 0301 	orreq.w	r3, r3, #1
 8003b30:	3114      	adds	r1, #20
 8003b32:	428a      	cmp	r2, r1
 8003b34:	bf08      	it	eq
 8003b36:	f043 0301 	orreq.w	r3, r3, #1
 8003b3a:	3114      	adds	r1, #20
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	bf08      	it	eq
 8003b40:	f043 0301 	orreq.w	r3, r3, #1
 8003b44:	3114      	adds	r1, #20
 8003b46:	428a      	cmp	r2, r1
 8003b48:	bf08      	it	eq
 8003b4a:	f043 0301 	orreq.w	r3, r3, #1
 8003b4e:	3114      	adds	r1, #20
 8003b50:	428a      	cmp	r2, r1
 8003b52:	bf08      	it	eq
 8003b54:	f043 0301 	orreq.w	r3, r3, #1
 8003b58:	b973      	cbnz	r3, 8003b78 <HAL_DMA_Start_IT+0x2ac>
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_DMA_Start_IT+0x2a8>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d11a      	bne.n	8003b96 <HAL_DMA_Start_IT+0x2ca>
 8003b60:	e00a      	b.n	8003b78 <HAL_DMA_Start_IT+0x2ac>
 8003b62:	bf00      	nop
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	58025408 	.word	0x58025408
 8003b74:	58025494 	.word	0x58025494
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA_Start_IT+0x2be>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b88:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003b8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b8c:	b11b      	cbz	r3, 8003b96 <HAL_DMA_Start_IT+0x2ca>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b94:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_DMA_Start_IT+0x3b4>)
 8003b9a:	493a      	ldr	r1, [pc, #232]	; (8003c84 <HAL_DMA_Start_IT+0x3b8>)
 8003b9c:	428a      	cmp	r2, r1
 8003b9e:	bf18      	it	ne
 8003ba0:	429a      	cmpne	r2, r3
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	3118      	adds	r1, #24
 8003baa:	428a      	cmp	r2, r1
 8003bac:	bf08      	it	eq
 8003bae:	f043 0301 	orreq.w	r3, r3, #1
 8003bb2:	3118      	adds	r1, #24
 8003bb4:	428a      	cmp	r2, r1
 8003bb6:	bf08      	it	eq
 8003bb8:	f043 0301 	orreq.w	r3, r3, #1
 8003bbc:	3118      	adds	r1, #24
 8003bbe:	428a      	cmp	r2, r1
 8003bc0:	bf08      	it	eq
 8003bc2:	f043 0301 	orreq.w	r3, r3, #1
 8003bc6:	3118      	adds	r1, #24
 8003bc8:	428a      	cmp	r2, r1
 8003bca:	bf08      	it	eq
 8003bcc:	f043 0301 	orreq.w	r3, r3, #1
 8003bd0:	3118      	adds	r1, #24
 8003bd2:	428a      	cmp	r2, r1
 8003bd4:	bf08      	it	eq
 8003bd6:	f043 0301 	orreq.w	r3, r3, #1
 8003bda:	3118      	adds	r1, #24
 8003bdc:	428a      	cmp	r2, r1
 8003bde:	bf08      	it	eq
 8003be0:	f043 0301 	orreq.w	r3, r3, #1
 8003be4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003be8:	428a      	cmp	r2, r1
 8003bea:	bf08      	it	eq
 8003bec:	f043 0301 	orreq.w	r3, r3, #1
 8003bf0:	3118      	adds	r1, #24
 8003bf2:	428a      	cmp	r2, r1
 8003bf4:	bf08      	it	eq
 8003bf6:	f043 0301 	orreq.w	r3, r3, #1
 8003bfa:	3118      	adds	r1, #24
 8003bfc:	428a      	cmp	r2, r1
 8003bfe:	bf08      	it	eq
 8003c00:	f043 0301 	orreq.w	r3, r3, #1
 8003c04:	3118      	adds	r1, #24
 8003c06:	428a      	cmp	r2, r1
 8003c08:	bf08      	it	eq
 8003c0a:	f043 0301 	orreq.w	r3, r3, #1
 8003c0e:	3118      	adds	r1, #24
 8003c10:	428a      	cmp	r2, r1
 8003c12:	bf08      	it	eq
 8003c14:	f043 0301 	orreq.w	r3, r3, #1
 8003c18:	3118      	adds	r1, #24
 8003c1a:	428a      	cmp	r2, r1
 8003c1c:	bf08      	it	eq
 8003c1e:	f043 0301 	orreq.w	r3, r3, #1
 8003c22:	3118      	adds	r1, #24
 8003c24:	428a      	cmp	r2, r1
 8003c26:	bf08      	it	eq
 8003c28:	f043 0301 	orreq.w	r3, r3, #1
 8003c2c:	b913      	cbnz	r3, 8003c34 <HAL_DMA_Start_IT+0x368>
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_DMA_Start_IT+0x3bc>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d11a      	bne.n	8003c6a <HAL_DMA_Start_IT+0x39e>
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c3e:	e65e      	b.n	80038fe <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_DISABLE(hdma);
 8003c40:	6828      	ldr	r0, [r5, #0]
 8003c42:	f020 0001 	bic.w	r0, r0, #1
 8003c46:	6028      	str	r0, [r5, #0]
 8003c48:	e6b3      	b.n	80039b2 <HAL_DMA_Start_IT+0xe6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c4a:	6813      	ldr	r3, [r2, #0]
 8003c4c:	f023 030e 	bic.w	r3, r3, #14
 8003c50:	f043 030a 	orr.w	r3, r3, #10
 8003c54:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f43f af0a 	beq.w	8003a72 <HAL_DMA_Start_IT+0x1a6>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e703      	b.n	8003a72 <HAL_DMA_Start_IT+0x1a6>
    __HAL_DMA_ENABLE(hdma);
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2000      	movs	r0, #0
 8003c74:	e643      	b.n	80038fe <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
}
 8003c78:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	e63f      	b.n	80038fe <HAL_DMA_Start_IT+0x32>
 8003c7e:	bf00      	nop
 8003c80:	40020010 	.word	0x40020010
 8003c84:	40020028 	.word	0x40020028
 8003c88:	400204b8 	.word	0x400204b8

08003c8c <HAL_DMA_Abort>:
{
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7fe fc9c 	bl	80025cc <HAL_GetTick>
  if(hdma == NULL)
 8003c94:	2c00      	cmp	r4, #0
 8003c96:	f000 8248 	beq.w	800412a <HAL_DMA_Abort+0x49e>
 8003c9a:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c9c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d006      	beq.n	8003cb4 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003caa:	2300      	movs	r3, #0
 8003cac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
}
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	4b92      	ldr	r3, [pc, #584]	; (8003f00 <HAL_DMA_Abort+0x274>)
 8003cb8:	4992      	ldr	r1, [pc, #584]	; (8003f04 <HAL_DMA_Abort+0x278>)
 8003cba:	428a      	cmp	r2, r1
 8003cbc:	bf18      	it	ne
 8003cbe:	429a      	cmpne	r2, r3
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	3118      	adds	r1, #24
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	bf08      	it	eq
 8003ccc:	f043 0301 	orreq.w	r3, r3, #1
 8003cd0:	3118      	adds	r1, #24
 8003cd2:	428a      	cmp	r2, r1
 8003cd4:	bf08      	it	eq
 8003cd6:	f043 0301 	orreq.w	r3, r3, #1
 8003cda:	3118      	adds	r1, #24
 8003cdc:	428a      	cmp	r2, r1
 8003cde:	bf08      	it	eq
 8003ce0:	f043 0301 	orreq.w	r3, r3, #1
 8003ce4:	3118      	adds	r1, #24
 8003ce6:	428a      	cmp	r2, r1
 8003ce8:	bf08      	it	eq
 8003cea:	f043 0301 	orreq.w	r3, r3, #1
 8003cee:	3118      	adds	r1, #24
 8003cf0:	428a      	cmp	r2, r1
 8003cf2:	bf08      	it	eq
 8003cf4:	f043 0301 	orreq.w	r3, r3, #1
 8003cf8:	3118      	adds	r1, #24
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	bf08      	it	eq
 8003cfe:	f043 0301 	orreq.w	r3, r3, #1
 8003d02:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003d06:	428a      	cmp	r2, r1
 8003d08:	bf08      	it	eq
 8003d0a:	f043 0301 	orreq.w	r3, r3, #1
 8003d0e:	3118      	adds	r1, #24
 8003d10:	428a      	cmp	r2, r1
 8003d12:	bf08      	it	eq
 8003d14:	f043 0301 	orreq.w	r3, r3, #1
 8003d18:	3118      	adds	r1, #24
 8003d1a:	428a      	cmp	r2, r1
 8003d1c:	bf08      	it	eq
 8003d1e:	f043 0301 	orreq.w	r3, r3, #1
 8003d22:	3118      	adds	r1, #24
 8003d24:	428a      	cmp	r2, r1
 8003d26:	bf08      	it	eq
 8003d28:	f043 0301 	orreq.w	r3, r3, #1
 8003d2c:	3118      	adds	r1, #24
 8003d2e:	428a      	cmp	r2, r1
 8003d30:	bf08      	it	eq
 8003d32:	f043 0301 	orreq.w	r3, r3, #1
 8003d36:	3118      	adds	r1, #24
 8003d38:	428a      	cmp	r2, r1
 8003d3a:	bf08      	it	eq
 8003d3c:	f043 0301 	orreq.w	r3, r3, #1
 8003d40:	3118      	adds	r1, #24
 8003d42:	428a      	cmp	r2, r1
 8003d44:	bf08      	it	eq
 8003d46:	f043 0301 	orreq.w	r3, r3, #1
 8003d4a:	b91b      	cbnz	r3, 8003d54 <HAL_DMA_Abort+0xc8>
 8003d4c:	4b6e      	ldr	r3, [pc, #440]	; (8003f08 <HAL_DMA_Abort+0x27c>)
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	f040 80f7 	bne.w	8003f42 <HAL_DMA_Abort+0x2b6>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f023 031e 	bic.w	r3, r3, #30
 8003d5a:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	6953      	ldr	r3, [r2, #20]
 8003d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d64:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003d66:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_DMA_Abort+0x274>)
 8003d6c:	4965      	ldr	r1, [pc, #404]	; (8003f04 <HAL_DMA_Abort+0x278>)
 8003d6e:	428a      	cmp	r2, r1
 8003d70:	bf18      	it	ne
 8003d72:	429a      	cmpne	r2, r3
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	3118      	adds	r1, #24
 8003d7c:	428a      	cmp	r2, r1
 8003d7e:	bf08      	it	eq
 8003d80:	f043 0301 	orreq.w	r3, r3, #1
 8003d84:	3118      	adds	r1, #24
 8003d86:	428a      	cmp	r2, r1
 8003d88:	bf08      	it	eq
 8003d8a:	f043 0301 	orreq.w	r3, r3, #1
 8003d8e:	3118      	adds	r1, #24
 8003d90:	428a      	cmp	r2, r1
 8003d92:	bf08      	it	eq
 8003d94:	f043 0301 	orreq.w	r3, r3, #1
 8003d98:	3118      	adds	r1, #24
 8003d9a:	428a      	cmp	r2, r1
 8003d9c:	bf08      	it	eq
 8003d9e:	f043 0301 	orreq.w	r3, r3, #1
 8003da2:	3118      	adds	r1, #24
 8003da4:	428a      	cmp	r2, r1
 8003da6:	bf08      	it	eq
 8003da8:	f043 0301 	orreq.w	r3, r3, #1
 8003dac:	3118      	adds	r1, #24
 8003dae:	428a      	cmp	r2, r1
 8003db0:	bf08      	it	eq
 8003db2:	f043 0301 	orreq.w	r3, r3, #1
 8003db6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003dba:	428a      	cmp	r2, r1
 8003dbc:	bf08      	it	eq
 8003dbe:	f043 0301 	orreq.w	r3, r3, #1
 8003dc2:	3118      	adds	r1, #24
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	bf08      	it	eq
 8003dc8:	f043 0301 	orreq.w	r3, r3, #1
 8003dcc:	3118      	adds	r1, #24
 8003dce:	428a      	cmp	r2, r1
 8003dd0:	bf08      	it	eq
 8003dd2:	f043 0301 	orreq.w	r3, r3, #1
 8003dd6:	3118      	adds	r1, #24
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	bf08      	it	eq
 8003ddc:	f043 0301 	orreq.w	r3, r3, #1
 8003de0:	3118      	adds	r1, #24
 8003de2:	428a      	cmp	r2, r1
 8003de4:	bf08      	it	eq
 8003de6:	f043 0301 	orreq.w	r3, r3, #1
 8003dea:	3118      	adds	r1, #24
 8003dec:	428a      	cmp	r2, r1
 8003dee:	bf08      	it	eq
 8003df0:	f043 0301 	orreq.w	r3, r3, #1
 8003df4:	3118      	adds	r1, #24
 8003df6:	428a      	cmp	r2, r1
 8003df8:	bf08      	it	eq
 8003dfa:	f043 0301 	orreq.w	r3, r3, #1
 8003dfe:	3118      	adds	r1, #24
 8003e00:	428a      	cmp	r2, r1
 8003e02:	bf08      	it	eq
 8003e04:	f043 0301 	orreq.w	r3, r3, #1
 8003e08:	4940      	ldr	r1, [pc, #256]	; (8003f0c <HAL_DMA_Abort+0x280>)
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	bf08      	it	eq
 8003e0e:	f043 0301 	orreq.w	r3, r3, #1
 8003e12:	3114      	adds	r1, #20
 8003e14:	428a      	cmp	r2, r1
 8003e16:	bf08      	it	eq
 8003e18:	f043 0301 	orreq.w	r3, r3, #1
 8003e1c:	3114      	adds	r1, #20
 8003e1e:	428a      	cmp	r2, r1
 8003e20:	bf08      	it	eq
 8003e22:	f043 0301 	orreq.w	r3, r3, #1
 8003e26:	3114      	adds	r1, #20
 8003e28:	428a      	cmp	r2, r1
 8003e2a:	bf08      	it	eq
 8003e2c:	f043 0301 	orreq.w	r3, r3, #1
 8003e30:	3114      	adds	r1, #20
 8003e32:	428a      	cmp	r2, r1
 8003e34:	bf08      	it	eq
 8003e36:	f043 0301 	orreq.w	r3, r3, #1
 8003e3a:	3114      	adds	r1, #20
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	bf08      	it	eq
 8003e40:	f043 0301 	orreq.w	r3, r3, #1
 8003e44:	3114      	adds	r1, #20
 8003e46:	428a      	cmp	r2, r1
 8003e48:	bf08      	it	eq
 8003e4a:	f043 0301 	orreq.w	r3, r3, #1
 8003e4e:	b913      	cbnz	r3, 8003e56 <HAL_DMA_Abort+0x1ca>
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <HAL_DMA_Abort+0x284>)
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d104      	bne.n	8003e60 <HAL_DMA_Abort+0x1d4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e58:	6813      	ldr	r3, [r2, #0]
 8003e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_DMA_Abort+0x274>)
 8003e64:	4927      	ldr	r1, [pc, #156]	; (8003f04 <HAL_DMA_Abort+0x278>)
 8003e66:	428a      	cmp	r2, r1
 8003e68:	bf18      	it	ne
 8003e6a:	429a      	cmpne	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	3118      	adds	r1, #24
 8003e74:	428a      	cmp	r2, r1
 8003e76:	bf08      	it	eq
 8003e78:	f043 0301 	orreq.w	r3, r3, #1
 8003e7c:	3118      	adds	r1, #24
 8003e7e:	428a      	cmp	r2, r1
 8003e80:	bf08      	it	eq
 8003e82:	f043 0301 	orreq.w	r3, r3, #1
 8003e86:	3118      	adds	r1, #24
 8003e88:	428a      	cmp	r2, r1
 8003e8a:	bf08      	it	eq
 8003e8c:	f043 0301 	orreq.w	r3, r3, #1
 8003e90:	3118      	adds	r1, #24
 8003e92:	428a      	cmp	r2, r1
 8003e94:	bf08      	it	eq
 8003e96:	f043 0301 	orreq.w	r3, r3, #1
 8003e9a:	3118      	adds	r1, #24
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	bf08      	it	eq
 8003ea0:	f043 0301 	orreq.w	r3, r3, #1
 8003ea4:	3118      	adds	r1, #24
 8003ea6:	428a      	cmp	r2, r1
 8003ea8:	bf08      	it	eq
 8003eaa:	f043 0301 	orreq.w	r3, r3, #1
 8003eae:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003eb2:	428a      	cmp	r2, r1
 8003eb4:	bf08      	it	eq
 8003eb6:	f043 0301 	orreq.w	r3, r3, #1
 8003eba:	3118      	adds	r1, #24
 8003ebc:	428a      	cmp	r2, r1
 8003ebe:	bf08      	it	eq
 8003ec0:	f043 0301 	orreq.w	r3, r3, #1
 8003ec4:	3118      	adds	r1, #24
 8003ec6:	428a      	cmp	r2, r1
 8003ec8:	bf08      	it	eq
 8003eca:	f043 0301 	orreq.w	r3, r3, #1
 8003ece:	3118      	adds	r1, #24
 8003ed0:	428a      	cmp	r2, r1
 8003ed2:	bf08      	it	eq
 8003ed4:	f043 0301 	orreq.w	r3, r3, #1
 8003ed8:	3118      	adds	r1, #24
 8003eda:	428a      	cmp	r2, r1
 8003edc:	bf08      	it	eq
 8003ede:	f043 0301 	orreq.w	r3, r3, #1
 8003ee2:	3118      	adds	r1, #24
 8003ee4:	428a      	cmp	r2, r1
 8003ee6:	bf08      	it	eq
 8003ee8:	f043 0301 	orreq.w	r3, r3, #1
 8003eec:	3118      	adds	r1, #24
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	bf08      	it	eq
 8003ef2:	f043 0301 	orreq.w	r3, r3, #1
 8003ef6:	b96b      	cbnz	r3, 8003f14 <HAL_DMA_Abort+0x288>
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_DMA_Abort+0x27c>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d127      	bne.n	8003f4e <HAL_DMA_Abort+0x2c2>
 8003efe:	e009      	b.n	8003f14 <HAL_DMA_Abort+0x288>
 8003f00:	40020010 	.word	0x40020010
 8003f04:	40020028 	.word	0x40020028
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	58025408 	.word	0x58025408
 8003f10:	58025494 	.word	0x58025494
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f1c:	6833      	ldr	r3, [r6, #0]
 8003f1e:	f013 0f01 	tst.w	r3, #1
 8003f22:	d019      	beq.n	8003f58 <HAL_DMA_Abort+0x2cc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f24:	f7fe fb52 	bl	80025cc <HAL_GetTick>
 8003f28:	1b40      	subs	r0, r0, r5
 8003f2a:	2805      	cmp	r0, #5
 8003f2c:	d9f6      	bls.n	8003f1c <HAL_DMA_Abort+0x290>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f32:	2303      	movs	r3, #3
 8003f34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e6b7      	b.n	8003cb2 <HAL_DMA_Abort+0x26>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	f023 030e 	bic.w	r3, r3, #14
 8003f48:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f4a:	6826      	ldr	r6, [r4, #0]
 8003f4c:	e70c      	b.n	8003d68 <HAL_DMA_Abort+0xdc>
    __HAL_DMA_DISABLE(hdma);
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e7e1      	b.n	8003f1c <HAL_DMA_Abort+0x290>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	6822      	ldr	r2, [r4, #0]
 8003f5a:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_DMA_Abort+0x4a4>)
 8003f5c:	4975      	ldr	r1, [pc, #468]	; (8004134 <HAL_DMA_Abort+0x4a8>)
 8003f5e:	428a      	cmp	r2, r1
 8003f60:	bf18      	it	ne
 8003f62:	429a      	cmpne	r2, r3
 8003f64:	bf0c      	ite	eq
 8003f66:	2301      	moveq	r3, #1
 8003f68:	2300      	movne	r3, #0
 8003f6a:	3118      	adds	r1, #24
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	bf08      	it	eq
 8003f70:	f043 0301 	orreq.w	r3, r3, #1
 8003f74:	3118      	adds	r1, #24
 8003f76:	428a      	cmp	r2, r1
 8003f78:	bf08      	it	eq
 8003f7a:	f043 0301 	orreq.w	r3, r3, #1
 8003f7e:	3118      	adds	r1, #24
 8003f80:	428a      	cmp	r2, r1
 8003f82:	bf08      	it	eq
 8003f84:	f043 0301 	orreq.w	r3, r3, #1
 8003f88:	3118      	adds	r1, #24
 8003f8a:	428a      	cmp	r2, r1
 8003f8c:	bf08      	it	eq
 8003f8e:	f043 0301 	orreq.w	r3, r3, #1
 8003f92:	3118      	adds	r1, #24
 8003f94:	428a      	cmp	r2, r1
 8003f96:	bf08      	it	eq
 8003f98:	f043 0301 	orreq.w	r3, r3, #1
 8003f9c:	3118      	adds	r1, #24
 8003f9e:	428a      	cmp	r2, r1
 8003fa0:	bf08      	it	eq
 8003fa2:	f043 0301 	orreq.w	r3, r3, #1
 8003fa6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003faa:	428a      	cmp	r2, r1
 8003fac:	bf08      	it	eq
 8003fae:	f043 0301 	orreq.w	r3, r3, #1
 8003fb2:	3118      	adds	r1, #24
 8003fb4:	428a      	cmp	r2, r1
 8003fb6:	bf08      	it	eq
 8003fb8:	f043 0301 	orreq.w	r3, r3, #1
 8003fbc:	3118      	adds	r1, #24
 8003fbe:	428a      	cmp	r2, r1
 8003fc0:	bf08      	it	eq
 8003fc2:	f043 0301 	orreq.w	r3, r3, #1
 8003fc6:	3118      	adds	r1, #24
 8003fc8:	428a      	cmp	r2, r1
 8003fca:	bf08      	it	eq
 8003fcc:	f043 0301 	orreq.w	r3, r3, #1
 8003fd0:	3118      	adds	r1, #24
 8003fd2:	428a      	cmp	r2, r1
 8003fd4:	bf08      	it	eq
 8003fd6:	f043 0301 	orreq.w	r3, r3, #1
 8003fda:	3118      	adds	r1, #24
 8003fdc:	428a      	cmp	r2, r1
 8003fde:	bf08      	it	eq
 8003fe0:	f043 0301 	orreq.w	r3, r3, #1
 8003fe4:	3118      	adds	r1, #24
 8003fe6:	428a      	cmp	r2, r1
 8003fe8:	bf08      	it	eq
 8003fea:	f043 0301 	orreq.w	r3, r3, #1
 8003fee:	b91b      	cbnz	r3, 8003ff8 <HAL_DMA_Abort+0x36c>
 8003ff0:	4b51      	ldr	r3, [pc, #324]	; (8004138 <HAL_DMA_Abort+0x4ac>)
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	f040 8091 	bne.w	800411a <HAL_DMA_Abort+0x48e>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff8:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ffa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	233f      	movs	r3, #63	; 0x3f
 8004002:	4093      	lsls	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_DMA_Abort+0x4a4>)
 800400a:	494a      	ldr	r1, [pc, #296]	; (8004134 <HAL_DMA_Abort+0x4a8>)
 800400c:	428a      	cmp	r2, r1
 800400e:	bf18      	it	ne
 8004010:	429a      	cmpne	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	3118      	adds	r1, #24
 800401a:	428a      	cmp	r2, r1
 800401c:	bf08      	it	eq
 800401e:	f043 0301 	orreq.w	r3, r3, #1
 8004022:	3118      	adds	r1, #24
 8004024:	428a      	cmp	r2, r1
 8004026:	bf08      	it	eq
 8004028:	f043 0301 	orreq.w	r3, r3, #1
 800402c:	3118      	adds	r1, #24
 800402e:	428a      	cmp	r2, r1
 8004030:	bf08      	it	eq
 8004032:	f043 0301 	orreq.w	r3, r3, #1
 8004036:	3118      	adds	r1, #24
 8004038:	428a      	cmp	r2, r1
 800403a:	bf08      	it	eq
 800403c:	f043 0301 	orreq.w	r3, r3, #1
 8004040:	3118      	adds	r1, #24
 8004042:	428a      	cmp	r2, r1
 8004044:	bf08      	it	eq
 8004046:	f043 0301 	orreq.w	r3, r3, #1
 800404a:	3118      	adds	r1, #24
 800404c:	428a      	cmp	r2, r1
 800404e:	bf08      	it	eq
 8004050:	f043 0301 	orreq.w	r3, r3, #1
 8004054:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004058:	428a      	cmp	r2, r1
 800405a:	bf08      	it	eq
 800405c:	f043 0301 	orreq.w	r3, r3, #1
 8004060:	3118      	adds	r1, #24
 8004062:	428a      	cmp	r2, r1
 8004064:	bf08      	it	eq
 8004066:	f043 0301 	orreq.w	r3, r3, #1
 800406a:	3118      	adds	r1, #24
 800406c:	428a      	cmp	r2, r1
 800406e:	bf08      	it	eq
 8004070:	f043 0301 	orreq.w	r3, r3, #1
 8004074:	3118      	adds	r1, #24
 8004076:	428a      	cmp	r2, r1
 8004078:	bf08      	it	eq
 800407a:	f043 0301 	orreq.w	r3, r3, #1
 800407e:	3118      	adds	r1, #24
 8004080:	428a      	cmp	r2, r1
 8004082:	bf08      	it	eq
 8004084:	f043 0301 	orreq.w	r3, r3, #1
 8004088:	3118      	adds	r1, #24
 800408a:	428a      	cmp	r2, r1
 800408c:	bf08      	it	eq
 800408e:	f043 0301 	orreq.w	r3, r3, #1
 8004092:	3118      	adds	r1, #24
 8004094:	428a      	cmp	r2, r1
 8004096:	bf08      	it	eq
 8004098:	f043 0301 	orreq.w	r3, r3, #1
 800409c:	3118      	adds	r1, #24
 800409e:	428a      	cmp	r2, r1
 80040a0:	bf08      	it	eq
 80040a2:	f043 0301 	orreq.w	r3, r3, #1
 80040a6:	4925      	ldr	r1, [pc, #148]	; (800413c <HAL_DMA_Abort+0x4b0>)
 80040a8:	428a      	cmp	r2, r1
 80040aa:	bf08      	it	eq
 80040ac:	f043 0301 	orreq.w	r3, r3, #1
 80040b0:	3114      	adds	r1, #20
 80040b2:	428a      	cmp	r2, r1
 80040b4:	bf08      	it	eq
 80040b6:	f043 0301 	orreq.w	r3, r3, #1
 80040ba:	3114      	adds	r1, #20
 80040bc:	428a      	cmp	r2, r1
 80040be:	bf08      	it	eq
 80040c0:	f043 0301 	orreq.w	r3, r3, #1
 80040c4:	3114      	adds	r1, #20
 80040c6:	428a      	cmp	r2, r1
 80040c8:	bf08      	it	eq
 80040ca:	f043 0301 	orreq.w	r3, r3, #1
 80040ce:	3114      	adds	r1, #20
 80040d0:	428a      	cmp	r2, r1
 80040d2:	bf08      	it	eq
 80040d4:	f043 0301 	orreq.w	r3, r3, #1
 80040d8:	3114      	adds	r1, #20
 80040da:	428a      	cmp	r2, r1
 80040dc:	bf08      	it	eq
 80040de:	f043 0301 	orreq.w	r3, r3, #1
 80040e2:	3114      	adds	r1, #20
 80040e4:	428a      	cmp	r2, r1
 80040e6:	bf08      	it	eq
 80040e8:	f043 0301 	orreq.w	r3, r3, #1
 80040ec:	b913      	cbnz	r3, 80040f4 <HAL_DMA_Abort+0x468>
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_DMA_Abort+0x4b4>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10b      	bne.n	800410c <HAL_DMA_Abort+0x480>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80040f8:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80040fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80040fc:	b133      	cbz	r3, 800410c <HAL_DMA_Abort+0x480>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004106:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004108:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800410a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800410c:	2301      	movs	r3, #1
 800410e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004112:	2000      	movs	r0, #0
 8004114:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004118:	e5cb      	b.n	8003cb2 <HAL_DMA_Abort+0x26>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800411a:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800411c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	2301      	movs	r3, #1
 8004124:	4093      	lsls	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
 8004128:	e76d      	b.n	8004006 <HAL_DMA_Abort+0x37a>
    return HAL_ERROR;
 800412a:	2001      	movs	r0, #1
 800412c:	e5c1      	b.n	8003cb2 <HAL_DMA_Abort+0x26>
 800412e:	bf00      	nop
 8004130:	40020010 	.word	0x40020010
 8004134:	40020028 	.word	0x40020028
 8004138:	400204b8 	.word	0x400204b8
 800413c:	58025408 	.word	0x58025408
 8004140:	58025494 	.word	0x58025494

08004144 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004144:	2800      	cmp	r0, #0
 8004146:	f000 8162 	beq.w	800440e <HAL_DMA_Abort_IT+0x2ca>
{
 800414a:	b508      	push	{r3, lr}
 800414c:	4601      	mov	r1, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d003      	beq.n	8004160 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800415c:	2001      	movs	r0, #1
}
 800415e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_DMA_Abort_IT+0xcc>)
 8004164:	482b      	ldr	r0, [pc, #172]	; (8004214 <HAL_DMA_Abort_IT+0xd0>)
 8004166:	4282      	cmp	r2, r0
 8004168:	bf18      	it	ne
 800416a:	429a      	cmpne	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	3018      	adds	r0, #24
 8004174:	4282      	cmp	r2, r0
 8004176:	bf08      	it	eq
 8004178:	f043 0301 	orreq.w	r3, r3, #1
 800417c:	3018      	adds	r0, #24
 800417e:	4282      	cmp	r2, r0
 8004180:	bf08      	it	eq
 8004182:	f043 0301 	orreq.w	r3, r3, #1
 8004186:	3018      	adds	r0, #24
 8004188:	4282      	cmp	r2, r0
 800418a:	bf08      	it	eq
 800418c:	f043 0301 	orreq.w	r3, r3, #1
 8004190:	3018      	adds	r0, #24
 8004192:	4282      	cmp	r2, r0
 8004194:	bf08      	it	eq
 8004196:	f043 0301 	orreq.w	r3, r3, #1
 800419a:	3018      	adds	r0, #24
 800419c:	4282      	cmp	r2, r0
 800419e:	bf08      	it	eq
 80041a0:	f043 0301 	orreq.w	r3, r3, #1
 80041a4:	3018      	adds	r0, #24
 80041a6:	4282      	cmp	r2, r0
 80041a8:	bf08      	it	eq
 80041aa:	f043 0301 	orreq.w	r3, r3, #1
 80041ae:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80041b2:	4282      	cmp	r2, r0
 80041b4:	bf08      	it	eq
 80041b6:	f043 0301 	orreq.w	r3, r3, #1
 80041ba:	3018      	adds	r0, #24
 80041bc:	4282      	cmp	r2, r0
 80041be:	bf08      	it	eq
 80041c0:	f043 0301 	orreq.w	r3, r3, #1
 80041c4:	3018      	adds	r0, #24
 80041c6:	4282      	cmp	r2, r0
 80041c8:	bf08      	it	eq
 80041ca:	f043 0301 	orreq.w	r3, r3, #1
 80041ce:	3018      	adds	r0, #24
 80041d0:	4282      	cmp	r2, r0
 80041d2:	bf08      	it	eq
 80041d4:	f043 0301 	orreq.w	r3, r3, #1
 80041d8:	3018      	adds	r0, #24
 80041da:	4282      	cmp	r2, r0
 80041dc:	bf08      	it	eq
 80041de:	f043 0301 	orreq.w	r3, r3, #1
 80041e2:	3018      	adds	r0, #24
 80041e4:	4282      	cmp	r2, r0
 80041e6:	bf08      	it	eq
 80041e8:	f043 0301 	orreq.w	r3, r3, #1
 80041ec:	3018      	adds	r0, #24
 80041ee:	4282      	cmp	r2, r0
 80041f0:	bf08      	it	eq
 80041f2:	f043 0301 	orreq.w	r3, r3, #1
 80041f6:	b913      	cbnz	r3, 80041fe <HAL_DMA_Abort_IT+0xba>
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <HAL_DMA_Abort_IT+0xd4>)
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d10e      	bne.n	800421c <HAL_DMA_Abort_IT+0xd8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80041fe:	2304      	movs	r3, #4
 8004200:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800420c:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800420e:	e7a6      	b.n	800415e <HAL_DMA_Abort_IT+0x1a>
 8004210:	40020010 	.word	0x40020010
 8004214:	40020028 	.word	0x40020028
 8004218:	400204b8 	.word	0x400204b8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800421c:	6813      	ldr	r3, [r2, #0]
 800421e:	f023 030e 	bic.w	r3, r3, #14
 8004222:	6013      	str	r3, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8004224:	680a      	ldr	r2, [r1, #0]
 8004226:	4b7c      	ldr	r3, [pc, #496]	; (8004418 <HAL_DMA_Abort_IT+0x2d4>)
 8004228:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 800422c:	4282      	cmp	r2, r0
 800422e:	bf18      	it	ne
 8004230:	429a      	cmpne	r2, r3
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	3018      	adds	r0, #24
 800423a:	4282      	cmp	r2, r0
 800423c:	bf08      	it	eq
 800423e:	f043 0301 	orreq.w	r3, r3, #1
 8004242:	3018      	adds	r0, #24
 8004244:	4282      	cmp	r2, r0
 8004246:	bf08      	it	eq
 8004248:	f043 0301 	orreq.w	r3, r3, #1
 800424c:	3018      	adds	r0, #24
 800424e:	4282      	cmp	r2, r0
 8004250:	bf08      	it	eq
 8004252:	f043 0301 	orreq.w	r3, r3, #1
 8004256:	3018      	adds	r0, #24
 8004258:	4282      	cmp	r2, r0
 800425a:	bf08      	it	eq
 800425c:	f043 0301 	orreq.w	r3, r3, #1
 8004260:	3018      	adds	r0, #24
 8004262:	4282      	cmp	r2, r0
 8004264:	bf08      	it	eq
 8004266:	f043 0301 	orreq.w	r3, r3, #1
 800426a:	3018      	adds	r0, #24
 800426c:	4282      	cmp	r2, r0
 800426e:	bf08      	it	eq
 8004270:	f043 0301 	orreq.w	r3, r3, #1
 8004274:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004278:	4282      	cmp	r2, r0
 800427a:	bf08      	it	eq
 800427c:	f043 0301 	orreq.w	r3, r3, #1
 8004280:	3018      	adds	r0, #24
 8004282:	4282      	cmp	r2, r0
 8004284:	bf08      	it	eq
 8004286:	f043 0301 	orreq.w	r3, r3, #1
 800428a:	3018      	adds	r0, #24
 800428c:	4282      	cmp	r2, r0
 800428e:	bf08      	it	eq
 8004290:	f043 0301 	orreq.w	r3, r3, #1
 8004294:	3018      	adds	r0, #24
 8004296:	4282      	cmp	r2, r0
 8004298:	bf08      	it	eq
 800429a:	f043 0301 	orreq.w	r3, r3, #1
 800429e:	3018      	adds	r0, #24
 80042a0:	4282      	cmp	r2, r0
 80042a2:	bf08      	it	eq
 80042a4:	f043 0301 	orreq.w	r3, r3, #1
 80042a8:	3018      	adds	r0, #24
 80042aa:	4282      	cmp	r2, r0
 80042ac:	bf08      	it	eq
 80042ae:	f043 0301 	orreq.w	r3, r3, #1
 80042b2:	3018      	adds	r0, #24
 80042b4:	4282      	cmp	r2, r0
 80042b6:	bf08      	it	eq
 80042b8:	f043 0301 	orreq.w	r3, r3, #1
 80042bc:	b91b      	cbnz	r3, 80042c6 <HAL_DMA_Abort_IT+0x182>
 80042be:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_DMA_Abort_IT+0x2d8>)
 80042c0:	429a      	cmp	r2, r3
 80042c2:	f040 809f 	bne.w	8004404 <HAL_DMA_Abort_IT+0x2c0>
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ce:	680a      	ldr	r2, [r1, #0]
 80042d0:	4b51      	ldr	r3, [pc, #324]	; (8004418 <HAL_DMA_Abort_IT+0x2d4>)
 80042d2:	4853      	ldr	r0, [pc, #332]	; (8004420 <HAL_DMA_Abort_IT+0x2dc>)
 80042d4:	4282      	cmp	r2, r0
 80042d6:	bf18      	it	ne
 80042d8:	429a      	cmpne	r2, r3
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	3018      	adds	r0, #24
 80042e2:	4282      	cmp	r2, r0
 80042e4:	bf08      	it	eq
 80042e6:	f043 0301 	orreq.w	r3, r3, #1
 80042ea:	3018      	adds	r0, #24
 80042ec:	4282      	cmp	r2, r0
 80042ee:	bf08      	it	eq
 80042f0:	f043 0301 	orreq.w	r3, r3, #1
 80042f4:	3018      	adds	r0, #24
 80042f6:	4282      	cmp	r2, r0
 80042f8:	bf08      	it	eq
 80042fa:	f043 0301 	orreq.w	r3, r3, #1
 80042fe:	3018      	adds	r0, #24
 8004300:	4282      	cmp	r2, r0
 8004302:	bf08      	it	eq
 8004304:	f043 0301 	orreq.w	r3, r3, #1
 8004308:	3018      	adds	r0, #24
 800430a:	4282      	cmp	r2, r0
 800430c:	bf08      	it	eq
 800430e:	f043 0301 	orreq.w	r3, r3, #1
 8004312:	3018      	adds	r0, #24
 8004314:	4282      	cmp	r2, r0
 8004316:	bf08      	it	eq
 8004318:	f043 0301 	orreq.w	r3, r3, #1
 800431c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004320:	4282      	cmp	r2, r0
 8004322:	bf08      	it	eq
 8004324:	f043 0301 	orreq.w	r3, r3, #1
 8004328:	3018      	adds	r0, #24
 800432a:	4282      	cmp	r2, r0
 800432c:	bf08      	it	eq
 800432e:	f043 0301 	orreq.w	r3, r3, #1
 8004332:	3018      	adds	r0, #24
 8004334:	4282      	cmp	r2, r0
 8004336:	bf08      	it	eq
 8004338:	f043 0301 	orreq.w	r3, r3, #1
 800433c:	3018      	adds	r0, #24
 800433e:	4282      	cmp	r2, r0
 8004340:	bf08      	it	eq
 8004342:	f043 0301 	orreq.w	r3, r3, #1
 8004346:	3018      	adds	r0, #24
 8004348:	4282      	cmp	r2, r0
 800434a:	bf08      	it	eq
 800434c:	f043 0301 	orreq.w	r3, r3, #1
 8004350:	3018      	adds	r0, #24
 8004352:	4282      	cmp	r2, r0
 8004354:	bf08      	it	eq
 8004356:	f043 0301 	orreq.w	r3, r3, #1
 800435a:	3018      	adds	r0, #24
 800435c:	4282      	cmp	r2, r0
 800435e:	bf08      	it	eq
 8004360:	f043 0301 	orreq.w	r3, r3, #1
 8004364:	3018      	adds	r0, #24
 8004366:	4282      	cmp	r2, r0
 8004368:	bf08      	it	eq
 800436a:	f043 0301 	orreq.w	r3, r3, #1
 800436e:	482d      	ldr	r0, [pc, #180]	; (8004424 <HAL_DMA_Abort_IT+0x2e0>)
 8004370:	4282      	cmp	r2, r0
 8004372:	bf08      	it	eq
 8004374:	f043 0301 	orreq.w	r3, r3, #1
 8004378:	3014      	adds	r0, #20
 800437a:	4282      	cmp	r2, r0
 800437c:	bf08      	it	eq
 800437e:	f043 0301 	orreq.w	r3, r3, #1
 8004382:	3014      	adds	r0, #20
 8004384:	4282      	cmp	r2, r0
 8004386:	bf08      	it	eq
 8004388:	f043 0301 	orreq.w	r3, r3, #1
 800438c:	3014      	adds	r0, #20
 800438e:	4282      	cmp	r2, r0
 8004390:	bf08      	it	eq
 8004392:	f043 0301 	orreq.w	r3, r3, #1
 8004396:	3014      	adds	r0, #20
 8004398:	4282      	cmp	r2, r0
 800439a:	bf08      	it	eq
 800439c:	f043 0301 	orreq.w	r3, r3, #1
 80043a0:	3014      	adds	r0, #20
 80043a2:	4282      	cmp	r2, r0
 80043a4:	bf08      	it	eq
 80043a6:	f043 0301 	orreq.w	r3, r3, #1
 80043aa:	3014      	adds	r0, #20
 80043ac:	4282      	cmp	r2, r0
 80043ae:	bf08      	it	eq
 80043b0:	f043 0301 	orreq.w	r3, r3, #1
 80043b4:	b913      	cbnz	r3, 80043bc <HAL_DMA_Abort_IT+0x278>
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <HAL_DMA_Abort_IT+0x2e4>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d117      	bne.n	80043ec <HAL_DMA_Abort_IT+0x2a8>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043bc:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043c6:	6d88      	ldr	r0, [r1, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043c8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80043ca:	f003 021f 	and.w	r2, r3, #31
 80043ce:	2301      	movs	r3, #1
 80043d0:	4093      	lsls	r3, r2
 80043d2:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80043d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80043d8:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80043da:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 80043dc:	b133      	cbz	r3, 80043ec <HAL_DMA_Abort_IT+0x2a8>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80043e8:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 80043ea:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80043f2:	2300      	movs	r3, #0
 80043f4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80043f8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80043fa:	b153      	cbz	r3, 8004412 <HAL_DMA_Abort_IT+0x2ce>
        hdma->XferAbortCallback(hdma);
 80043fc:	4608      	mov	r0, r1
 80043fe:	4798      	blx	r3
  return HAL_OK;
 8004400:	2000      	movs	r0, #0
 8004402:	e6ac      	b.n	800415e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e75f      	b.n	80042ce <HAL_DMA_Abort_IT+0x18a>
    return HAL_ERROR;
 800440e:	2001      	movs	r0, #1
}
 8004410:	4770      	bx	lr
  return HAL_OK;
 8004412:	2000      	movs	r0, #0
 8004414:	e6a3      	b.n	800415e <HAL_DMA_Abort_IT+0x1a>
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	400204b8 	.word	0x400204b8
 8004420:	40020028 	.word	0x40020028
 8004424:	58025408 	.word	0x58025408
 8004428:	58025494 	.word	0x58025494

0800442c <HAL_DMA_IRQHandler>:
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b083      	sub	sp, #12
 8004430:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004436:	4b95      	ldr	r3, [pc, #596]	; (800468c <HAL_DMA_IRQHandler+0x260>)
 8004438:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 800443c:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800443e:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004440:	6802      	ldr	r2, [r0, #0]
 8004442:	4b93      	ldr	r3, [pc, #588]	; (8004690 <HAL_DMA_IRQHandler+0x264>)
 8004444:	4893      	ldr	r0, [pc, #588]	; (8004694 <HAL_DMA_IRQHandler+0x268>)
 8004446:	4282      	cmp	r2, r0
 8004448:	bf18      	it	ne
 800444a:	429a      	cmpne	r2, r3
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	3018      	adds	r0, #24
 8004454:	4282      	cmp	r2, r0
 8004456:	bf08      	it	eq
 8004458:	f043 0301 	orreq.w	r3, r3, #1
 800445c:	3018      	adds	r0, #24
 800445e:	4282      	cmp	r2, r0
 8004460:	bf08      	it	eq
 8004462:	f043 0301 	orreq.w	r3, r3, #1
 8004466:	3018      	adds	r0, #24
 8004468:	4282      	cmp	r2, r0
 800446a:	bf08      	it	eq
 800446c:	f043 0301 	orreq.w	r3, r3, #1
 8004470:	3018      	adds	r0, #24
 8004472:	4282      	cmp	r2, r0
 8004474:	bf08      	it	eq
 8004476:	f043 0301 	orreq.w	r3, r3, #1
 800447a:	3018      	adds	r0, #24
 800447c:	4282      	cmp	r2, r0
 800447e:	bf08      	it	eq
 8004480:	f043 0301 	orreq.w	r3, r3, #1
 8004484:	3018      	adds	r0, #24
 8004486:	4282      	cmp	r2, r0
 8004488:	bf08      	it	eq
 800448a:	f043 0301 	orreq.w	r3, r3, #1
 800448e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004492:	4282      	cmp	r2, r0
 8004494:	bf08      	it	eq
 8004496:	f043 0301 	orreq.w	r3, r3, #1
 800449a:	3018      	adds	r0, #24
 800449c:	4282      	cmp	r2, r0
 800449e:	bf08      	it	eq
 80044a0:	f043 0301 	orreq.w	r3, r3, #1
 80044a4:	3018      	adds	r0, #24
 80044a6:	4282      	cmp	r2, r0
 80044a8:	bf08      	it	eq
 80044aa:	f043 0301 	orreq.w	r3, r3, #1
 80044ae:	3018      	adds	r0, #24
 80044b0:	4282      	cmp	r2, r0
 80044b2:	bf08      	it	eq
 80044b4:	f043 0301 	orreq.w	r3, r3, #1
 80044b8:	3018      	adds	r0, #24
 80044ba:	4282      	cmp	r2, r0
 80044bc:	bf08      	it	eq
 80044be:	f043 0301 	orreq.w	r3, r3, #1
 80044c2:	3018      	adds	r0, #24
 80044c4:	4282      	cmp	r2, r0
 80044c6:	bf08      	it	eq
 80044c8:	f043 0301 	orreq.w	r3, r3, #1
 80044cc:	3018      	adds	r0, #24
 80044ce:	4282      	cmp	r2, r0
 80044d0:	bf08      	it	eq
 80044d2:	f043 0301 	orreq.w	r3, r3, #1
 80044d6:	b91b      	cbnz	r3, 80044e0 <HAL_DMA_IRQHandler+0xb4>
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_DMA_IRQHandler+0x26c>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	f040 8082 	bne.w	80045e4 <HAL_DMA_IRQHandler+0x1b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2108      	movs	r1, #8
 80044e8:	4099      	lsls	r1, r3
 80044ea:	4229      	tst	r1, r5
 80044ec:	f000 83be 	beq.w	8004c6c <HAL_DMA_IRQHandler+0x840>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044f0:	6811      	ldr	r1, [r2, #0]
 80044f2:	f011 0f04 	tst.w	r1, #4
 80044f6:	f000 83b9 	beq.w	8004c6c <HAL_DMA_IRQHandler+0x840>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6013      	str	r3, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004502:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	2308      	movs	r3, #8
 800450a:	4093      	lsls	r3, r2
 800450c:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800450e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004516:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	fa25 f203 	lsr.w	r2, r5, r3
 8004520:	f012 0f01 	tst.w	r2, #1
 8004524:	f000 80c8 	beq.w	80046b8 <HAL_DMA_IRQHandler+0x28c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	4959      	ldr	r1, [pc, #356]	; (8004690 <HAL_DMA_IRQHandler+0x264>)
 800452c:	4859      	ldr	r0, [pc, #356]	; (8004694 <HAL_DMA_IRQHandler+0x268>)
 800452e:	4282      	cmp	r2, r0
 8004530:	bf18      	it	ne
 8004532:	428a      	cmpne	r2, r1
 8004534:	bf0c      	ite	eq
 8004536:	2101      	moveq	r1, #1
 8004538:	2100      	movne	r1, #0
 800453a:	3018      	adds	r0, #24
 800453c:	4282      	cmp	r2, r0
 800453e:	bf08      	it	eq
 8004540:	f041 0101 	orreq.w	r1, r1, #1
 8004544:	3018      	adds	r0, #24
 8004546:	4282      	cmp	r2, r0
 8004548:	bf08      	it	eq
 800454a:	f041 0101 	orreq.w	r1, r1, #1
 800454e:	3018      	adds	r0, #24
 8004550:	4282      	cmp	r2, r0
 8004552:	bf08      	it	eq
 8004554:	f041 0101 	orreq.w	r1, r1, #1
 8004558:	3018      	adds	r0, #24
 800455a:	4282      	cmp	r2, r0
 800455c:	bf08      	it	eq
 800455e:	f041 0101 	orreq.w	r1, r1, #1
 8004562:	3018      	adds	r0, #24
 8004564:	4282      	cmp	r2, r0
 8004566:	bf08      	it	eq
 8004568:	f041 0101 	orreq.w	r1, r1, #1
 800456c:	3018      	adds	r0, #24
 800456e:	4282      	cmp	r2, r0
 8004570:	bf08      	it	eq
 8004572:	f041 0101 	orreq.w	r1, r1, #1
 8004576:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800457a:	4282      	cmp	r2, r0
 800457c:	bf08      	it	eq
 800457e:	f041 0101 	orreq.w	r1, r1, #1
 8004582:	3018      	adds	r0, #24
 8004584:	4282      	cmp	r2, r0
 8004586:	bf08      	it	eq
 8004588:	f041 0101 	orreq.w	r1, r1, #1
 800458c:	3018      	adds	r0, #24
 800458e:	4282      	cmp	r2, r0
 8004590:	bf08      	it	eq
 8004592:	f041 0101 	orreq.w	r1, r1, #1
 8004596:	3018      	adds	r0, #24
 8004598:	4282      	cmp	r2, r0
 800459a:	bf08      	it	eq
 800459c:	f041 0101 	orreq.w	r1, r1, #1
 80045a0:	3018      	adds	r0, #24
 80045a2:	4282      	cmp	r2, r0
 80045a4:	bf08      	it	eq
 80045a6:	f041 0101 	orreq.w	r1, r1, #1
 80045aa:	3018      	adds	r0, #24
 80045ac:	4282      	cmp	r2, r0
 80045ae:	bf08      	it	eq
 80045b0:	f041 0101 	orreq.w	r1, r1, #1
 80045b4:	3018      	adds	r0, #24
 80045b6:	4282      	cmp	r2, r0
 80045b8:	bf08      	it	eq
 80045ba:	f041 0101 	orreq.w	r1, r1, #1
 80045be:	b911      	cbnz	r1, 80045c6 <HAL_DMA_IRQHandler+0x19a>
 80045c0:	4935      	ldr	r1, [pc, #212]	; (8004698 <HAL_DMA_IRQHandler+0x26c>)
 80045c2:	428a      	cmp	r2, r1
 80045c4:	d151      	bne.n	800466a <HAL_DMA_IRQHandler+0x23e>
 80045c6:	6952      	ldr	r2, [r2, #20]
 80045c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045cc:	d16c      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x27c>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80045d0:	f001 011f 	and.w	r1, r1, #31
 80045d4:	2304      	movs	r3, #4
 80045d6:	fa03 f101 	lsl.w	r1, r3, r1
 80045da:	420d      	tst	r5, r1
 80045dc:	f000 80d9 	beq.w	8004792 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	e353      	b.n	8004c8c <HAL_DMA_IRQHandler+0x860>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_DMA_IRQHandler+0x270>)
 80045e6:	482e      	ldr	r0, [pc, #184]	; (80046a0 <HAL_DMA_IRQHandler+0x274>)
 80045e8:	4282      	cmp	r2, r0
 80045ea:	bf18      	it	ne
 80045ec:	429a      	cmpne	r2, r3
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	3014      	adds	r0, #20
 80045f6:	4282      	cmp	r2, r0
 80045f8:	bf08      	it	eq
 80045fa:	f043 0301 	orreq.w	r3, r3, #1
 80045fe:	3014      	adds	r0, #20
 8004600:	4282      	cmp	r2, r0
 8004602:	bf08      	it	eq
 8004604:	f043 0301 	orreq.w	r3, r3, #1
 8004608:	3014      	adds	r0, #20
 800460a:	4282      	cmp	r2, r0
 800460c:	bf08      	it	eq
 800460e:	f043 0301 	orreq.w	r3, r3, #1
 8004612:	3014      	adds	r0, #20
 8004614:	4282      	cmp	r2, r0
 8004616:	bf08      	it	eq
 8004618:	f043 0301 	orreq.w	r3, r3, #1
 800461c:	3014      	adds	r0, #20
 800461e:	4282      	cmp	r2, r0
 8004620:	bf08      	it	eq
 8004622:	f043 0301 	orreq.w	r3, r3, #1
 8004626:	b91b      	cbnz	r3, 8004630 <HAL_DMA_IRQHandler+0x204>
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_DMA_IRQHandler+0x278>)
 800462a:	429a      	cmp	r2, r3
 800462c:	f040 81fd 	bne.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004630:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004632:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004634:	f000 001f 	and.w	r0, r0, #31
 8004638:	2504      	movs	r5, #4
 800463a:	4085      	lsls	r5, r0
 800463c:	420d      	tst	r5, r1
 800463e:	f000 8262 	beq.w	8004b06 <HAL_DMA_IRQHandler+0x6da>
 8004642:	f013 0f04 	tst.w	r3, #4
 8004646:	f000 825e 	beq.w	8004b06 <HAL_DMA_IRQHandler+0x6da>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800464a:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004650:	f000 81f8 	beq.w	8004a44 <HAL_DMA_IRQHandler+0x618>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004658:	f040 81ee 	bne.w	8004a38 <HAL_DMA_IRQHandler+0x60c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800465c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 81e3 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1HalfCpltCallback(hdma);
 8004664:	4620      	mov	r0, r4
 8004666:	4798      	blx	r3
 8004668:	e1df      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800466a:	6811      	ldr	r1, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800466c:	2104      	movs	r1, #4
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	422b      	tst	r3, r5
 8004674:	d17a      	bne.n	800476c <HAL_DMA_IRQHandler+0x340>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004676:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2110      	movs	r1, #16
 800467e:	4099      	lsls	r1, r3
 8004680:	420d      	tst	r5, r1
 8004682:	f000 8310 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	e07a      	b.n	8004780 <HAL_DMA_IRQHandler+0x354>
 800468a:	bf00      	nop
 800468c:	24000000 	.word	0x24000000
 8004690:	40020010 	.word	0x40020010
 8004694:	40020028 	.word	0x40020028
 8004698:	400204b8 	.word	0x400204b8
 800469c:	58025408 	.word	0x58025408
 80046a0:	5802541c 	.word	0x5802541c
 80046a4:	58025494 	.word	0x58025494
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046a8:	2201      	movs	r2, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80046ba:	f001 011f 	and.w	r1, r1, #31
 80046be:	2304      	movs	r3, #4
 80046c0:	fa03 f101 	lsl.w	r1, r3, r1
 80046c4:	4229      	tst	r1, r5
 80046c6:	d064      	beq.n	8004792 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	4b8e      	ldr	r3, [pc, #568]	; (8004904 <HAL_DMA_IRQHandler+0x4d8>)
 80046cc:	488e      	ldr	r0, [pc, #568]	; (8004908 <HAL_DMA_IRQHandler+0x4dc>)
 80046ce:	4282      	cmp	r2, r0
 80046d0:	bf18      	it	ne
 80046d2:	429a      	cmpne	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	3018      	adds	r0, #24
 80046dc:	4282      	cmp	r2, r0
 80046de:	bf08      	it	eq
 80046e0:	f043 0301 	orreq.w	r3, r3, #1
 80046e4:	3018      	adds	r0, #24
 80046e6:	4282      	cmp	r2, r0
 80046e8:	bf08      	it	eq
 80046ea:	f043 0301 	orreq.w	r3, r3, #1
 80046ee:	3018      	adds	r0, #24
 80046f0:	4282      	cmp	r2, r0
 80046f2:	bf08      	it	eq
 80046f4:	f043 0301 	orreq.w	r3, r3, #1
 80046f8:	3018      	adds	r0, #24
 80046fa:	4282      	cmp	r2, r0
 80046fc:	bf08      	it	eq
 80046fe:	f043 0301 	orreq.w	r3, r3, #1
 8004702:	3018      	adds	r0, #24
 8004704:	4282      	cmp	r2, r0
 8004706:	bf08      	it	eq
 8004708:	f043 0301 	orreq.w	r3, r3, #1
 800470c:	3018      	adds	r0, #24
 800470e:	4282      	cmp	r2, r0
 8004710:	bf08      	it	eq
 8004712:	f043 0301 	orreq.w	r3, r3, #1
 8004716:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800471a:	4282      	cmp	r2, r0
 800471c:	bf08      	it	eq
 800471e:	f043 0301 	orreq.w	r3, r3, #1
 8004722:	3018      	adds	r0, #24
 8004724:	4282      	cmp	r2, r0
 8004726:	bf08      	it	eq
 8004728:	f043 0301 	orreq.w	r3, r3, #1
 800472c:	3018      	adds	r0, #24
 800472e:	4282      	cmp	r2, r0
 8004730:	bf08      	it	eq
 8004732:	f043 0301 	orreq.w	r3, r3, #1
 8004736:	3018      	adds	r0, #24
 8004738:	4282      	cmp	r2, r0
 800473a:	bf08      	it	eq
 800473c:	f043 0301 	orreq.w	r3, r3, #1
 8004740:	3018      	adds	r0, #24
 8004742:	4282      	cmp	r2, r0
 8004744:	bf08      	it	eq
 8004746:	f043 0301 	orreq.w	r3, r3, #1
 800474a:	3018      	adds	r0, #24
 800474c:	4282      	cmp	r2, r0
 800474e:	bf08      	it	eq
 8004750:	f043 0301 	orreq.w	r3, r3, #1
 8004754:	3018      	adds	r0, #24
 8004756:	4282      	cmp	r2, r0
 8004758:	bf08      	it	eq
 800475a:	f043 0301 	orreq.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 8294 	bne.w	8004c8c <HAL_DMA_IRQHandler+0x860>
 8004764:	4b69      	ldr	r3, [pc, #420]	; (800490c <HAL_DMA_IRQHandler+0x4e0>)
 8004766:	429a      	cmp	r2, r3
 8004768:	f000 8290 	beq.w	8004c8c <HAL_DMA_IRQHandler+0x860>
 800476c:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800476e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2110      	movs	r1, #16
 8004776:	4099      	lsls	r1, r3
 8004778:	420d      	tst	r5, r1
 800477a:	f000 8294 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004786:	e062      	b.n	800484e <HAL_DMA_IRQHandler+0x422>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004788:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800478a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004792:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004794:	f001 011f 	and.w	r1, r1, #31
 8004798:	2310      	movs	r3, #16
 800479a:	fa03 f101 	lsl.w	r1, r3, r1
 800479e:	4229      	tst	r1, r5
 80047a0:	f000 8281 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80047ae:	4856      	ldr	r0, [pc, #344]	; (8004908 <HAL_DMA_IRQHandler+0x4dc>)
 80047b0:	4282      	cmp	r2, r0
 80047b2:	bf18      	it	ne
 80047b4:	429a      	cmpne	r2, r3
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	3018      	adds	r0, #24
 80047be:	4282      	cmp	r2, r0
 80047c0:	bf08      	it	eq
 80047c2:	f043 0301 	orreq.w	r3, r3, #1
 80047c6:	3018      	adds	r0, #24
 80047c8:	4282      	cmp	r2, r0
 80047ca:	bf08      	it	eq
 80047cc:	f043 0301 	orreq.w	r3, r3, #1
 80047d0:	3018      	adds	r0, #24
 80047d2:	4282      	cmp	r2, r0
 80047d4:	bf08      	it	eq
 80047d6:	f043 0301 	orreq.w	r3, r3, #1
 80047da:	3018      	adds	r0, #24
 80047dc:	4282      	cmp	r2, r0
 80047de:	bf08      	it	eq
 80047e0:	f043 0301 	orreq.w	r3, r3, #1
 80047e4:	3018      	adds	r0, #24
 80047e6:	4282      	cmp	r2, r0
 80047e8:	bf08      	it	eq
 80047ea:	f043 0301 	orreq.w	r3, r3, #1
 80047ee:	3018      	adds	r0, #24
 80047f0:	4282      	cmp	r2, r0
 80047f2:	bf08      	it	eq
 80047f4:	f043 0301 	orreq.w	r3, r3, #1
 80047f8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80047fc:	4282      	cmp	r2, r0
 80047fe:	bf08      	it	eq
 8004800:	f043 0301 	orreq.w	r3, r3, #1
 8004804:	3018      	adds	r0, #24
 8004806:	4282      	cmp	r2, r0
 8004808:	bf08      	it	eq
 800480a:	f043 0301 	orreq.w	r3, r3, #1
 800480e:	3018      	adds	r0, #24
 8004810:	4282      	cmp	r2, r0
 8004812:	bf08      	it	eq
 8004814:	f043 0301 	orreq.w	r3, r3, #1
 8004818:	3018      	adds	r0, #24
 800481a:	4282      	cmp	r2, r0
 800481c:	bf08      	it	eq
 800481e:	f043 0301 	orreq.w	r3, r3, #1
 8004822:	3018      	adds	r0, #24
 8004824:	4282      	cmp	r2, r0
 8004826:	bf08      	it	eq
 8004828:	f043 0301 	orreq.w	r3, r3, #1
 800482c:	3018      	adds	r0, #24
 800482e:	4282      	cmp	r2, r0
 8004830:	bf08      	it	eq
 8004832:	f043 0301 	orreq.w	r3, r3, #1
 8004836:	3018      	adds	r0, #24
 8004838:	4282      	cmp	r2, r0
 800483a:	bf08      	it	eq
 800483c:	f043 0301 	orreq.w	r3, r3, #1
 8004840:	b913      	cbnz	r3, 8004848 <HAL_DMA_IRQHandler+0x41c>
 8004842:	4b32      	ldr	r3, [pc, #200]	; (800490c <HAL_DMA_IRQHandler+0x4e0>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d19b      	bne.n	8004780 <HAL_DMA_IRQHandler+0x354>
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8229 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004854:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800485e:	d011      	beq.n	8004884 <HAL_DMA_IRQHandler+0x458>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004866:	d106      	bne.n	8004876 <HAL_DMA_IRQHandler+0x44a>
            if(hdma->XferHalfCpltCallback != NULL)
 8004868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 821b 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
              hdma->XferHalfCpltCallback(hdma);
 8004870:	4620      	mov	r0, r4
 8004872:	4798      	blx	r3
 8004874:	e217      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x87a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004876:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8214 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
              hdma->XferM1HalfCpltCallback(hdma);
 800487e:	4620      	mov	r0, r4
 8004880:	4798      	blx	r3
 8004882:	e210      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x87a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	f412 7f80 	tst.w	r2, #256	; 0x100
 800488a:	d103      	bne.n	8004894 <HAL_DMA_IRQHandler+0x468>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f022 0208 	bic.w	r2, r2, #8
 8004892:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8205 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x87a>
            hdma->XferHalfCpltCallback(hdma);
 800489c:	4620      	mov	r0, r4
 800489e:	4798      	blx	r3
 80048a0:	e201      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048a2:	680b      	ldr	r3, [r1, #0]
 80048a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048a8:	e259      	b.n	8004d5e <HAL_DMA_IRQHandler+0x932>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	f023 0316 	bic.w	r3, r3, #22
 80048b2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	6953      	ldr	r3, [r2, #20]
 80048b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048bc:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c0:	b1bb      	cbz	r3, 80048f2 <HAL_DMA_IRQHandler+0x4c6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	f023 0308 	bic.w	r3, r3, #8
 80048ca:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048ce:	f003 021f 	and.w	r2, r3, #31
 80048d2:	233f      	movs	r3, #63	; 0x3f
 80048d4:	4093      	lsls	r3, r2
 80048d6:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80048d8:	2301      	movs	r3, #1
 80048da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80048de:	2300      	movs	r3, #0
 80048e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80048e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 809f 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferAbortCallback(hdma);
 80048ec:	4620      	mov	r0, r4
 80048ee:	4798      	blx	r3
 80048f0:	e09b      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e4      	bne.n	80048c2 <HAL_DMA_IRQHandler+0x496>
 80048f8:	e7e8      	b.n	80048cc <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferCpltCallback != NULL)
 80048fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048fc:	b1d3      	cbz	r3, 8004934 <HAL_DMA_IRQHandler+0x508>
              hdma->XferCpltCallback(hdma);
 80048fe:	4620      	mov	r0, r4
 8004900:	4798      	blx	r3
 8004902:	e017      	b.n	8004934 <HAL_DMA_IRQHandler+0x508>
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	400204b8 	.word	0x400204b8
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004916:	d109      	bne.n	800492c <HAL_DMA_IRQHandler+0x500>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f022 0210 	bic.w	r2, r2, #16
 800491e:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004920:	2301      	movs	r3, #1
 8004922:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8004926:	2300      	movs	r3, #0
 8004928:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 800492c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800492e:	b10b      	cbz	r3, 8004934 <HAL_DMA_IRQHandler+0x508>
            hdma->XferCpltCallback(hdma);
 8004930:	4620      	mov	r0, r4
 8004932:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004936:	2b00      	cmp	r3, #0
 8004938:	d077      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800493a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800493c:	f013 0f01 	tst.w	r3, #1
 8004940:	d06f      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x5f6>
        hdma->State = HAL_DMA_STATE_ABORT;
 8004942:	2304      	movs	r3, #4
 8004944:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <HAL_DMA_IRQHandler+0x718>)
 800494c:	497e      	ldr	r1, [pc, #504]	; (8004b48 <HAL_DMA_IRQHandler+0x71c>)
 800494e:	428a      	cmp	r2, r1
 8004950:	bf18      	it	ne
 8004952:	429a      	cmpne	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	3118      	adds	r1, #24
 800495c:	428a      	cmp	r2, r1
 800495e:	bf08      	it	eq
 8004960:	f043 0301 	orreq.w	r3, r3, #1
 8004964:	3118      	adds	r1, #24
 8004966:	428a      	cmp	r2, r1
 8004968:	bf08      	it	eq
 800496a:	f043 0301 	orreq.w	r3, r3, #1
 800496e:	3118      	adds	r1, #24
 8004970:	428a      	cmp	r2, r1
 8004972:	bf08      	it	eq
 8004974:	f043 0301 	orreq.w	r3, r3, #1
 8004978:	3118      	adds	r1, #24
 800497a:	428a      	cmp	r2, r1
 800497c:	bf08      	it	eq
 800497e:	f043 0301 	orreq.w	r3, r3, #1
 8004982:	3118      	adds	r1, #24
 8004984:	428a      	cmp	r2, r1
 8004986:	bf08      	it	eq
 8004988:	f043 0301 	orreq.w	r3, r3, #1
 800498c:	3118      	adds	r1, #24
 800498e:	428a      	cmp	r2, r1
 8004990:	bf08      	it	eq
 8004992:	f043 0301 	orreq.w	r3, r3, #1
 8004996:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800499a:	428a      	cmp	r2, r1
 800499c:	bf08      	it	eq
 800499e:	f043 0301 	orreq.w	r3, r3, #1
 80049a2:	3118      	adds	r1, #24
 80049a4:	428a      	cmp	r2, r1
 80049a6:	bf08      	it	eq
 80049a8:	f043 0301 	orreq.w	r3, r3, #1
 80049ac:	3118      	adds	r1, #24
 80049ae:	428a      	cmp	r2, r1
 80049b0:	bf08      	it	eq
 80049b2:	f043 0301 	orreq.w	r3, r3, #1
 80049b6:	3118      	adds	r1, #24
 80049b8:	428a      	cmp	r2, r1
 80049ba:	bf08      	it	eq
 80049bc:	f043 0301 	orreq.w	r3, r3, #1
 80049c0:	3118      	adds	r1, #24
 80049c2:	428a      	cmp	r2, r1
 80049c4:	bf08      	it	eq
 80049c6:	f043 0301 	orreq.w	r3, r3, #1
 80049ca:	3118      	adds	r1, #24
 80049cc:	428a      	cmp	r2, r1
 80049ce:	bf08      	it	eq
 80049d0:	f043 0301 	orreq.w	r3, r3, #1
 80049d4:	3118      	adds	r1, #24
 80049d6:	428a      	cmp	r2, r1
 80049d8:	bf08      	it	eq
 80049da:	f043 0301 	orreq.w	r3, r3, #1
 80049de:	b913      	cbnz	r3, 80049e6 <HAL_DMA_IRQHandler+0x5ba>
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_DMA_IRQHandler+0x720>)
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d123      	bne.n	8004a2e <HAL_DMA_IRQHandler+0x602>
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049ee:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <HAL_DMA_IRQHandler+0x724>)
 80049f0:	fba3 3707 	umull	r3, r7, r3, r7
 80049f4:	0abf      	lsrs	r7, r7, #10
          if (++count > timeout)
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	3301      	adds	r3, #1
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	42bb      	cmp	r3, r7
 80049fe:	d804      	bhi.n	8004a0a <HAL_DMA_IRQHandler+0x5de>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f013 0f01 	tst.w	r3, #1
 8004a08:	d1f5      	bne.n	80049f6 <HAL_DMA_IRQHandler+0x5ca>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f013 0f01 	tst.w	r3, #1
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a12:	bf14      	ite	ne
 8004a14:	2303      	movne	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004a16:	2301      	moveq	r3, #1
 8004a18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8004a22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a24:	b10b      	cbz	r3, 8004a2a <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 8004a26:	4620      	mov	r0, r4
 8004a28:	4798      	blx	r3
}
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e7da      	b.n	80049ee <HAL_DMA_IRQHandler+0x5c2>
          if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f5      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferHalfCpltCallback(hdma);
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4798      	blx	r3
 8004a42:	e7f2      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a44:	f013 0f20 	tst.w	r3, #32
 8004a48:	d152      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x6c4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_DMA_IRQHandler+0x718>)
 8004a4e:	493e      	ldr	r1, [pc, #248]	; (8004b48 <HAL_DMA_IRQHandler+0x71c>)
 8004a50:	428a      	cmp	r2, r1
 8004a52:	bf18      	it	ne
 8004a54:	429a      	cmpne	r2, r3
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	3118      	adds	r1, #24
 8004a5e:	428a      	cmp	r2, r1
 8004a60:	bf08      	it	eq
 8004a62:	f043 0301 	orreq.w	r3, r3, #1
 8004a66:	3118      	adds	r1, #24
 8004a68:	428a      	cmp	r2, r1
 8004a6a:	bf08      	it	eq
 8004a6c:	f043 0301 	orreq.w	r3, r3, #1
 8004a70:	3118      	adds	r1, #24
 8004a72:	428a      	cmp	r2, r1
 8004a74:	bf08      	it	eq
 8004a76:	f043 0301 	orreq.w	r3, r3, #1
 8004a7a:	3118      	adds	r1, #24
 8004a7c:	428a      	cmp	r2, r1
 8004a7e:	bf08      	it	eq
 8004a80:	f043 0301 	orreq.w	r3, r3, #1
 8004a84:	3118      	adds	r1, #24
 8004a86:	428a      	cmp	r2, r1
 8004a88:	bf08      	it	eq
 8004a8a:	f043 0301 	orreq.w	r3, r3, #1
 8004a8e:	3118      	adds	r1, #24
 8004a90:	428a      	cmp	r2, r1
 8004a92:	bf08      	it	eq
 8004a94:	f043 0301 	orreq.w	r3, r3, #1
 8004a98:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004a9c:	428a      	cmp	r2, r1
 8004a9e:	bf08      	it	eq
 8004aa0:	f043 0301 	orreq.w	r3, r3, #1
 8004aa4:	3118      	adds	r1, #24
 8004aa6:	428a      	cmp	r2, r1
 8004aa8:	bf08      	it	eq
 8004aaa:	f043 0301 	orreq.w	r3, r3, #1
 8004aae:	3118      	adds	r1, #24
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	bf08      	it	eq
 8004ab4:	f043 0301 	orreq.w	r3, r3, #1
 8004ab8:	3118      	adds	r1, #24
 8004aba:	428a      	cmp	r2, r1
 8004abc:	bf08      	it	eq
 8004abe:	f043 0301 	orreq.w	r3, r3, #1
 8004ac2:	3118      	adds	r1, #24
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	bf08      	it	eq
 8004ac8:	f043 0301 	orreq.w	r3, r3, #1
 8004acc:	3118      	adds	r1, #24
 8004ace:	428a      	cmp	r2, r1
 8004ad0:	bf08      	it	eq
 8004ad2:	f043 0301 	orreq.w	r3, r3, #1
 8004ad6:	3118      	adds	r1, #24
 8004ad8:	428a      	cmp	r2, r1
 8004ada:	bf08      	it	eq
 8004adc:	f043 0301 	orreq.w	r3, r3, #1
 8004ae0:	b913      	cbnz	r3, 8004ae8 <HAL_DMA_IRQHandler+0x6bc>
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_DMA_IRQHandler+0x720>)
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d109      	bne.n	8004afc <HAL_DMA_IRQHandler+0x6d0>
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	f023 0308 	bic.w	r3, r3, #8
 8004aee:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d099      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferHalfCpltCallback(hdma);
 8004af6:	4620      	mov	r0, r4
 8004af8:	4798      	blx	r3
 8004afa:	e796      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004afc:	6813      	ldr	r3, [r2, #0]
 8004afe:	f023 0304 	bic.w	r3, r3, #4
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e7f4      	b.n	8004af0 <HAL_DMA_IRQHandler+0x6c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b06:	2502      	movs	r5, #2
 8004b08:	4085      	lsls	r5, r0
 8004b0a:	420d      	tst	r5, r1
 8004b0c:	f000 808a 	beq.w	8004c24 <HAL_DMA_IRQHandler+0x7f8>
 8004b10:	f013 0f02 	tst.w	r3, #2
 8004b14:	f000 8086 	beq.w	8004c24 <HAL_DMA_IRQHandler+0x7f8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b18:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004b1e:	d019      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x728>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b24:	d106      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x708>
          if(hdma->XferM1CpltCallback != NULL)
 8004b26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f43f af7e 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1CpltCallback(hdma);
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4798      	blx	r3
 8004b32:	e77a      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          if(hdma->XferCpltCallback != NULL)
 8004b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f43f af77 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferCpltCallback(hdma);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4798      	blx	r3
 8004b40:	e773      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
 8004b42:	bf00      	nop
 8004b44:	40020010 	.word	0x40020010
 8004b48:	40020028 	.word	0x40020028
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	1b4e81b5 	.word	0x1b4e81b5
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b54:	f013 0f20 	tst.w	r3, #32
 8004b58:	d158      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x7e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	4b8e      	ldr	r3, [pc, #568]	; (8004d98 <HAL_DMA_IRQHandler+0x96c>)
 8004b5e:	498f      	ldr	r1, [pc, #572]	; (8004d9c <HAL_DMA_IRQHandler+0x970>)
 8004b60:	428a      	cmp	r2, r1
 8004b62:	bf18      	it	ne
 8004b64:	429a      	cmpne	r2, r3
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	3118      	adds	r1, #24
 8004b6e:	428a      	cmp	r2, r1
 8004b70:	bf08      	it	eq
 8004b72:	f043 0301 	orreq.w	r3, r3, #1
 8004b76:	3118      	adds	r1, #24
 8004b78:	428a      	cmp	r2, r1
 8004b7a:	bf08      	it	eq
 8004b7c:	f043 0301 	orreq.w	r3, r3, #1
 8004b80:	3118      	adds	r1, #24
 8004b82:	428a      	cmp	r2, r1
 8004b84:	bf08      	it	eq
 8004b86:	f043 0301 	orreq.w	r3, r3, #1
 8004b8a:	3118      	adds	r1, #24
 8004b8c:	428a      	cmp	r2, r1
 8004b8e:	bf08      	it	eq
 8004b90:	f043 0301 	orreq.w	r3, r3, #1
 8004b94:	3118      	adds	r1, #24
 8004b96:	428a      	cmp	r2, r1
 8004b98:	bf08      	it	eq
 8004b9a:	f043 0301 	orreq.w	r3, r3, #1
 8004b9e:	3118      	adds	r1, #24
 8004ba0:	428a      	cmp	r2, r1
 8004ba2:	bf08      	it	eq
 8004ba4:	f043 0301 	orreq.w	r3, r3, #1
 8004ba8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004bac:	428a      	cmp	r2, r1
 8004bae:	bf08      	it	eq
 8004bb0:	f043 0301 	orreq.w	r3, r3, #1
 8004bb4:	3118      	adds	r1, #24
 8004bb6:	428a      	cmp	r2, r1
 8004bb8:	bf08      	it	eq
 8004bba:	f043 0301 	orreq.w	r3, r3, #1
 8004bbe:	3118      	adds	r1, #24
 8004bc0:	428a      	cmp	r2, r1
 8004bc2:	bf08      	it	eq
 8004bc4:	f043 0301 	orreq.w	r3, r3, #1
 8004bc8:	3118      	adds	r1, #24
 8004bca:	428a      	cmp	r2, r1
 8004bcc:	bf08      	it	eq
 8004bce:	f043 0301 	orreq.w	r3, r3, #1
 8004bd2:	3118      	adds	r1, #24
 8004bd4:	428a      	cmp	r2, r1
 8004bd6:	bf08      	it	eq
 8004bd8:	f043 0301 	orreq.w	r3, r3, #1
 8004bdc:	3118      	adds	r1, #24
 8004bde:	428a      	cmp	r2, r1
 8004be0:	bf08      	it	eq
 8004be2:	f043 0301 	orreq.w	r3, r3, #1
 8004be6:	3118      	adds	r1, #24
 8004be8:	428a      	cmp	r2, r1
 8004bea:	bf08      	it	eq
 8004bec:	f043 0301 	orreq.w	r3, r3, #1
 8004bf0:	b913      	cbnz	r3, 8004bf8 <HAL_DMA_IRQHandler+0x7cc>
 8004bf2:	4b6b      	ldr	r3, [pc, #428]	; (8004da0 <HAL_DMA_IRQHandler+0x974>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d110      	bne.n	8004c1a <HAL_DMA_IRQHandler+0x7ee>
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	f023 0314 	bic.w	r3, r3, #20
 8004bfe:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004c06:	2300      	movs	r3, #0
 8004c08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8004c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f43f af0b 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferCpltCallback(hdma);
 8004c14:	4620      	mov	r0, r4
 8004c16:	4798      	blx	r3
 8004c18:	e707      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	f023 030a 	bic.w	r3, r3, #10
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e7ed      	b.n	8004c00 <HAL_DMA_IRQHandler+0x7d4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c24:	2508      	movs	r5, #8
 8004c26:	fa05 f000 	lsl.w	r0, r5, r0
 8004c2a:	4208      	tst	r0, r1
 8004c2c:	f43f aefd 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
 8004c30:	f013 0f08 	tst.w	r3, #8
 8004c34:	f43f aef9 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	f023 030e 	bic.w	r3, r3, #14
 8004c3e:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2201      	movs	r2, #1
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	6073      	str	r3, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c4e:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8004c50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8004c5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f43f aee4 	beq.w	8004a2a <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 8004c62:	4620      	mov	r0, r4
 8004c64:	4798      	blx	r3
  }
 8004c66:	e6e0      	b.n	8004a2a <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	e5ed      	b.n	8004848 <HAL_DMA_IRQHandler+0x41c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c6c:	fa25 f103 	lsr.w	r1, r5, r3
 8004c70:	f011 0f01 	tst.w	r1, #1
 8004c74:	f47f aca7 	bne.w	80045c6 <HAL_DMA_IRQHandler+0x19a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c7a:	f001 011f 	and.w	r1, r1, #31
 8004c7e:	2304      	movs	r3, #4
 8004c80:	fa03 f101 	lsl.w	r1, r3, r1
 8004c84:	420d      	tst	r5, r1
 8004c86:	f43f ad84 	beq.w	8004792 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	f013 0f02 	tst.w	r3, #2
 8004c92:	f47f ad79 	bne.w	8004788 <HAL_DMA_IRQHandler+0x35c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c98:	f001 011f 	and.w	r1, r1, #31
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	fa03 f101 	lsl.w	r1, r3, r1
 8004ca2:	420d      	tst	r5, r1
 8004ca4:	d1e0      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x83c>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ca6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ca8:	f002 021f 	and.w	r2, r2, #31
 8004cac:	2320      	movs	r3, #32
 8004cae:	fa03 f202 	lsl.w	r2, r3, r2
 8004cb2:	422a      	tst	r2, r5
 8004cb4:	f43f ae3e 	beq.w	8004934 <HAL_DMA_IRQHandler+0x508>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_DMA_IRQHandler+0x96c>)
 8004cbc:	4837      	ldr	r0, [pc, #220]	; (8004d9c <HAL_DMA_IRQHandler+0x970>)
 8004cbe:	4281      	cmp	r1, r0
 8004cc0:	bf18      	it	ne
 8004cc2:	4299      	cmpne	r1, r3
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	3018      	adds	r0, #24
 8004ccc:	4281      	cmp	r1, r0
 8004cce:	bf08      	it	eq
 8004cd0:	f043 0301 	orreq.w	r3, r3, #1
 8004cd4:	3018      	adds	r0, #24
 8004cd6:	4281      	cmp	r1, r0
 8004cd8:	bf08      	it	eq
 8004cda:	f043 0301 	orreq.w	r3, r3, #1
 8004cde:	3018      	adds	r0, #24
 8004ce0:	4281      	cmp	r1, r0
 8004ce2:	bf08      	it	eq
 8004ce4:	f043 0301 	orreq.w	r3, r3, #1
 8004ce8:	3018      	adds	r0, #24
 8004cea:	4281      	cmp	r1, r0
 8004cec:	bf08      	it	eq
 8004cee:	f043 0301 	orreq.w	r3, r3, #1
 8004cf2:	3018      	adds	r0, #24
 8004cf4:	4281      	cmp	r1, r0
 8004cf6:	bf08      	it	eq
 8004cf8:	f043 0301 	orreq.w	r3, r3, #1
 8004cfc:	3018      	adds	r0, #24
 8004cfe:	4281      	cmp	r1, r0
 8004d00:	bf08      	it	eq
 8004d02:	f043 0301 	orreq.w	r3, r3, #1
 8004d06:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004d0a:	4281      	cmp	r1, r0
 8004d0c:	bf08      	it	eq
 8004d0e:	f043 0301 	orreq.w	r3, r3, #1
 8004d12:	3018      	adds	r0, #24
 8004d14:	4281      	cmp	r1, r0
 8004d16:	bf08      	it	eq
 8004d18:	f043 0301 	orreq.w	r3, r3, #1
 8004d1c:	3018      	adds	r0, #24
 8004d1e:	4281      	cmp	r1, r0
 8004d20:	bf08      	it	eq
 8004d22:	f043 0301 	orreq.w	r3, r3, #1
 8004d26:	3018      	adds	r0, #24
 8004d28:	4281      	cmp	r1, r0
 8004d2a:	bf08      	it	eq
 8004d2c:	f043 0301 	orreq.w	r3, r3, #1
 8004d30:	3018      	adds	r0, #24
 8004d32:	4281      	cmp	r1, r0
 8004d34:	bf08      	it	eq
 8004d36:	f043 0301 	orreq.w	r3, r3, #1
 8004d3a:	3018      	adds	r0, #24
 8004d3c:	4281      	cmp	r1, r0
 8004d3e:	bf08      	it	eq
 8004d40:	f043 0301 	orreq.w	r3, r3, #1
 8004d44:	3018      	adds	r0, #24
 8004d46:	4281      	cmp	r1, r0
 8004d48:	bf08      	it	eq
 8004d4a:	f043 0301 	orreq.w	r3, r3, #1
 8004d4e:	b91b      	cbnz	r3, 8004d58 <HAL_DMA_IRQHandler+0x92c>
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_DMA_IRQHandler+0x974>)
 8004d52:	4299      	cmp	r1, r3
 8004d54:	f47f ada5 	bne.w	80048a2 <HAL_DMA_IRQHandler+0x476>
 8004d58:	680b      	ldr	r3, [r1, #0]
 8004d5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f43f ade8 	beq.w	8004934 <HAL_DMA_IRQHandler+0x508>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d64:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d66:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	f43f ad9c 	beq.w	80048aa <HAL_DMA_IRQHandler+0x47e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004d7a:	f43f adc9 	beq.w	8004910 <HAL_DMA_IRQHandler+0x4e4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004d84:	f47f adb9 	bne.w	80048fa <HAL_DMA_IRQHandler+0x4ce>
            if(hdma->XferM1CpltCallback != NULL)
 8004d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f43f add2 	beq.w	8004934 <HAL_DMA_IRQHandler+0x508>
              hdma->XferM1CpltCallback(hdma);
 8004d90:	4620      	mov	r0, r4
 8004d92:	4798      	blx	r3
 8004d94:	e5ce      	b.n	8004934 <HAL_DMA_IRQHandler+0x508>
 8004d96:	bf00      	nop
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	400204b8 	.word	0x400204b8

08004da4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 810f 	beq.w	8004fca <HAL_GPIO_Init+0x226>
{
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004db2:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 8004db6:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db8:	4c84      	ldr	r4, [pc, #528]	; (8004fcc <HAL_GPIO_Init+0x228>)
 8004dba:	4d85      	ldr	r5, [pc, #532]	; (8004fd0 <HAL_GPIO_Init+0x22c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dbc:	4e85      	ldr	r6, [pc, #532]	; (8004fd4 <HAL_GPIO_Init+0x230>)
 8004dbe:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8004fdc <HAL_GPIO_Init+0x238>
 8004dc2:	e061      	b.n	8004e88 <HAL_GPIO_Init+0xe4>
        temp = GPIOx->OSPEEDR;
 8004dc4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dc6:	f04f 0a03 	mov.w	sl, #3
 8004dca:	fa0a fa0c 	lsl.w	sl, sl, ip
 8004dce:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd2:	68cb      	ldr	r3, [r1, #12]
 8004dd4:	fa03 f30c 	lsl.w	r3, r3, ip
 8004dd8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8004ddc:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8004dde:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de0:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de4:	684b      	ldr	r3, [r1, #4]
 8004de6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dea:	4093      	lsls	r3, r2
 8004dec:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->OTYPER = temp;
 8004df0:	6043      	str	r3, [r0, #4]
 8004df2:	e056      	b.n	8004ea2 <HAL_GPIO_Init+0xfe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df4:	2300      	movs	r3, #0
 8004df6:	fa03 f30b 	lsl.w	r3, r3, fp
 8004dfa:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dfe:	f8ce 3008 	str.w	r3, [lr, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e06:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8004e08:	ea6f 0e09 	mvn.w	lr, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e0c:	684f      	ldr	r7, [r1, #4]
 8004e0e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8004e12:	bf0c      	ite	eq
 8004e14:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004e18:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004e1c:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004e20:	f8ca 3000 	str.w	r3, [sl]

        temp = EXTI->FTSR1;
 8004e24:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e28:	684f      	ldr	r7, [r1, #4]
 8004e2a:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004e2e:	bf0c      	ite	eq
 8004e30:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004e34:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8004e38:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004e3c:	f8ca 3004 	str.w	r3, [sl, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e40:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e44:	684f      	ldr	r7, [r1, #4]
 8004e46:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 8004e4a:	bf0c      	ite	eq
 8004e4c:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004e50:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e54:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8004e58:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e5c:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e60:	684f      	ldr	r7, [r1, #4]
 8004e62:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 8004e66:	bf0c      	ite	eq
 8004e68:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8004e6c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e70:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 8004e74:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
      }
    }

    position++;
 8004e78:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e7a:	680b      	ldr	r3, [r1, #0]
 8004e7c:	f10c 0c02 	add.w	ip, ip, #2
 8004e80:	fa33 f702 	lsrs.w	r7, r3, r2
 8004e84:	f000 809e 	beq.w	8004fc4 <HAL_GPIO_Init+0x220>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e88:	f04f 0e01 	mov.w	lr, #1
 8004e8c:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00U)
 8004e90:	ea1e 0903 	ands.w	r9, lr, r3
 8004e94:	d0f0      	beq.n	8004e78 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e96:	684b      	ldr	r3, [r1, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d990      	bls.n	8004dc4 <HAL_GPIO_Init+0x20>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea2:	684b      	ldr	r3, [r1, #4]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d027      	beq.n	8004efc <HAL_GPIO_Init+0x158>
      temp = GPIOx->PUPDR;
 8004eac:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eae:	f04f 0e03 	mov.w	lr, #3
 8004eb2:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004eb6:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eba:	688b      	ldr	r3, [r1, #8]
 8004ebc:	fa03 f30c 	lsl.w	r3, r3, ip
 8004ec0:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->PUPDR = temp;
 8004ec4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec6:	684b      	ldr	r3, [r1, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d115      	bne.n	8004efc <HAL_GPIO_Init+0x158>
        temp = GPIOx->AFR[position >> 3U];
 8004ed0:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 8004ed4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004ed8:	f8de a020 	ldr.w	sl, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004edc:	f002 0307 	and.w	r3, r2, #7
 8004ee0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004ee4:	230f      	movs	r3, #15
 8004ee6:	fa03 f30b 	lsl.w	r3, r3, fp
 8004eea:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	fa03 f30b 	lsl.w	r3, r3, fp
 8004ef4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004ef8:	f8ce 3020 	str.w	r3, [lr, #32]
      temp = GPIOx->MODER;
 8004efc:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004efe:	f04f 0e03 	mov.w	lr, #3
 8004f02:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004f06:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	fa03 f30c 	lsl.w	r3, r3, ip
 8004f14:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 8004f18:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f1a:	684b      	ldr	r3, [r1, #4]
 8004f1c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004f20:	d0aa      	beq.n	8004e78 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f22:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004f2e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004f3a:	f022 0e03 	bic.w	lr, r2, #3
 8004f3e:	44ae      	add	lr, r5
 8004f40:	f8de a008 	ldr.w	sl, [lr, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f44:	f002 0303 	and.w	r3, r2, #3
 8004f48:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004f4c:	230f      	movs	r3, #15
 8004f4e:	fa03 f30b 	lsl.w	r3, r3, fp
 8004f52:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f56:	42b0      	cmp	r0, r6
 8004f58:	f43f af4c 	beq.w	8004df4 <HAL_GPIO_Init+0x50>
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <HAL_GPIO_Init+0x234>)
 8004f5e:	4298      	cmp	r0, r3
 8004f60:	d020      	beq.n	8004fa4 <HAL_GPIO_Init+0x200>
 8004f62:	4540      	cmp	r0, r8
 8004f64:	d020      	beq.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	4298      	cmp	r0, r3
 8004f6c:	d01e      	beq.n	8004fac <HAL_GPIO_Init+0x208>
 8004f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f72:	4298      	cmp	r0, r3
 8004f74:	d01c      	beq.n	8004fb0 <HAL_GPIO_Init+0x20c>
 8004f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	d01a      	beq.n	8004fb4 <HAL_GPIO_Init+0x210>
 8004f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f82:	4298      	cmp	r0, r3
 8004f84:	d018      	beq.n	8004fb8 <HAL_GPIO_Init+0x214>
 8004f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8a:	4298      	cmp	r0, r3
 8004f8c:	d016      	beq.n	8004fbc <HAL_GPIO_Init+0x218>
 8004f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f92:	4298      	cmp	r0, r3
 8004f94:	d014      	beq.n	8004fc0 <HAL_GPIO_Init+0x21c>
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	4298      	cmp	r0, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2309      	moveq	r3, #9
 8004fa0:	230a      	movne	r3, #10
 8004fa2:	e728      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e726      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e724      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fac:	2303      	movs	r3, #3
 8004fae:	e722      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	e720      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fb4:	2305      	movs	r3, #5
 8004fb6:	e71e      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fb8:	2306      	movs	r3, #6
 8004fba:	e71c      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	e71a      	b.n	8004df6 <HAL_GPIO_Init+0x52>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	e718      	b.n	8004df6 <HAL_GPIO_Init+0x52>
  }
}
 8004fc4:	b003      	add	sp, #12
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	4770      	bx	lr
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	58000400 	.word	0x58000400
 8004fd4:	58020000 	.word	0x58020000
 8004fd8:	58020400 	.word	0x58020400
 8004fdc:	58020800 	.word	0x58020800

08004fe0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	f000 80a5 	beq.w	8005130 <HAL_GPIO_DeInit+0x150>
{
 8004fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	b083      	sub	sp, #12
 8004fec:	468c      	mov	ip, r1
  uint32_t position = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8005138 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004ff4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800513c <HAL_GPIO_DeInit+0x15c>
 8004ff8:	f8df a144 	ldr.w	sl, [pc, #324]	; 8005140 <HAL_GPIO_DeInit+0x160>
 8004ffc:	f8df b144 	ldr.w	fp, [pc, #324]	; 8005144 <HAL_GPIO_DeInit+0x164>
 8005000:	e02a      	b.n	8005058 <HAL_GPIO_DeInit+0x78>
 8005002:	f04f 0e00 	mov.w	lr, #0
 8005006:	fa0e f101 	lsl.w	r1, lr, r1
 800500a:	9e01      	ldr	r6, [sp, #4]
 800500c:	42b1      	cmp	r1, r6
 800500e:	d071      	beq.n	80050f4 <HAL_GPIO_DeInit+0x114>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005010:	6804      	ldr	r4, [r0, #0]
 8005012:	0059      	lsls	r1, r3, #1
 8005014:	2503      	movs	r5, #3
 8005016:	fa05 f101 	lsl.w	r1, r5, r1
 800501a:	430c      	orrs	r4, r1
 800501c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800501e:	fa23 f405 	lsr.w	r4, r3, r5
 8005022:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005026:	6a25      	ldr	r5, [r4, #32]
 8005028:	f003 0607 	and.w	r6, r3, #7
 800502c:	00b7      	lsls	r7, r6, #2
 800502e:	260f      	movs	r6, #15
 8005030:	40be      	lsls	r6, r7
 8005032:	ea25 0506 	bic.w	r5, r5, r6
 8005036:	6225      	str	r5, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005038:	68c4      	ldr	r4, [r0, #12]
 800503a:	ea24 0401 	bic.w	r4, r4, r1
 800503e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005040:	6844      	ldr	r4, [r0, #4]
 8005042:	ea24 0202 	bic.w	r2, r4, r2
 8005046:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005048:	6882      	ldr	r2, [r0, #8]
 800504a:	ea22 0101 	bic.w	r1, r2, r1
 800504e:	6081      	str	r1, [r0, #8]
    }

    position++;
 8005050:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8005052:	fa3c f203 	lsrs.w	r2, ip, r3
 8005056:	d068      	beq.n	800512a <HAL_GPIO_DeInit+0x14a>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800505c:	ea12 070c 	ands.w	r7, r2, ip
 8005060:	d0f6      	beq.n	8005050 <HAL_GPIO_DeInit+0x70>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005062:	f023 0403 	bic.w	r4, r3, #3
 8005066:	444c      	add	r4, r9
 8005068:	68a6      	ldr	r6, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800506a:	f003 0103 	and.w	r1, r3, #3
 800506e:	0089      	lsls	r1, r1, #2
 8005070:	250f      	movs	r5, #15
 8005072:	408d      	lsls	r5, r1
 8005074:	402e      	ands	r6, r5
 8005076:	9601      	str	r6, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005078:	4540      	cmp	r0, r8
 800507a:	d0c2      	beq.n	8005002 <HAL_GPIO_DeInit+0x22>
 800507c:	4550      	cmp	r0, sl
 800507e:	d021      	beq.n	80050c4 <HAL_GPIO_DeInit+0xe4>
 8005080:	4558      	cmp	r0, fp
 8005082:	d022      	beq.n	80050ca <HAL_GPIO_DeInit+0xea>
 8005084:	4e2b      	ldr	r6, [pc, #172]	; (8005134 <HAL_GPIO_DeInit+0x154>)
 8005086:	42b0      	cmp	r0, r6
 8005088:	d022      	beq.n	80050d0 <HAL_GPIO_DeInit+0xf0>
 800508a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800508e:	42b0      	cmp	r0, r6
 8005090:	d021      	beq.n	80050d6 <HAL_GPIO_DeInit+0xf6>
 8005092:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005096:	42b0      	cmp	r0, r6
 8005098:	d020      	beq.n	80050dc <HAL_GPIO_DeInit+0xfc>
 800509a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800509e:	42b0      	cmp	r0, r6
 80050a0:	d01f      	beq.n	80050e2 <HAL_GPIO_DeInit+0x102>
 80050a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050a6:	42b0      	cmp	r0, r6
 80050a8:	d01e      	beq.n	80050e8 <HAL_GPIO_DeInit+0x108>
 80050aa:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8005148 <HAL_GPIO_DeInit+0x168>
 80050ae:	4570      	cmp	r0, lr
 80050b0:	d01d      	beq.n	80050ee <HAL_GPIO_DeInit+0x10e>
 80050b2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80050b6:	4570      	cmp	r0, lr
 80050b8:	bf0c      	ite	eq
 80050ba:	f04f 0e09 	moveq.w	lr, #9
 80050be:	f04f 0e0a 	movne.w	lr, #10
 80050c2:	e7a0      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050c4:	f04f 0e01 	mov.w	lr, #1
 80050c8:	e79d      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050ca:	f04f 0e02 	mov.w	lr, #2
 80050ce:	e79a      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050d0:	f04f 0e03 	mov.w	lr, #3
 80050d4:	e797      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050d6:	f04f 0e04 	mov.w	lr, #4
 80050da:	e794      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050dc:	f04f 0e05 	mov.w	lr, #5
 80050e0:	e791      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050e2:	f04f 0e06 	mov.w	lr, #6
 80050e6:	e78e      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050e8:	f04f 0e07 	mov.w	lr, #7
 80050ec:	e78b      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
 80050ee:	f04f 0e08 	mov.w	lr, #8
 80050f2:	e788      	b.n	8005006 <HAL_GPIO_DeInit+0x26>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80050f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f8:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 80050fc:	ea26 0607 	bic.w	r6, r6, r7
 8005100:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005104:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
 8005108:	ea26 0607 	bic.w	r6, r6, r7
 800510c:	f8c1 6084 	str.w	r6, [r1, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8005110:	684e      	ldr	r6, [r1, #4]
 8005112:	ea26 0607 	bic.w	r6, r6, r7
 8005116:	604e      	str	r6, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005118:	680e      	ldr	r6, [r1, #0]
 800511a:	ea26 0707 	bic.w	r7, r6, r7
 800511e:	600f      	str	r7, [r1, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005120:	68a1      	ldr	r1, [r4, #8]
 8005122:	ea21 0505 	bic.w	r5, r1, r5
 8005126:	60a5      	str	r5, [r4, #8]
 8005128:	e772      	b.n	8005010 <HAL_GPIO_DeInit+0x30>
  }
}
 800512a:	b003      	add	sp, #12
 800512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	58020c00 	.word	0x58020c00
 8005138:	58000400 	.word	0x58000400
 800513c:	58020000 	.word	0x58020000
 8005140:	58020400 	.word	0x58020400
 8005144:	58020800 	.word	0x58020800
 8005148:	58022000 	.word	0x58022000

0800514c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800514c:	b10a      	cbz	r2, 8005152 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800514e:	6181      	str	r1, [r0, #24]
 8005150:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005152:	0409      	lsls	r1, r1, #16
 8005154:	6181      	str	r1, [r0, #24]
  }
}
 8005156:	4770      	bx	lr

08005158 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005158:	6803      	ldr	r3, [r0, #0]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	f012 0f02 	tst.w	r2, #2
 8005160:	d001      	beq.n	8005166 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005162:	2200      	movs	r2, #0
 8005164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005166:	6803      	ldr	r3, [r0, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	f012 0f01 	tst.w	r2, #1
 800516e:	d103      	bne.n	8005178 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	619a      	str	r2, [r3, #24]
  }
}
 8005178:	4770      	bx	lr

0800517a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800517a:	b430      	push	{r4, r5}
 800517c:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800517e:	6805      	ldr	r5, [r0, #0]
 8005180:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005182:	4323      	orrs	r3, r4
 8005184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005188:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800518c:	430b      	orrs	r3, r1
 800518e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005192:	0d64      	lsrs	r4, r4, #21
 8005194:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005198:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800519c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80051a0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80051a4:	f044 0403 	orr.w	r4, r4, #3
 80051a8:	ea20 0404 	bic.w	r4, r0, r4
 80051ac:	4323      	orrs	r3, r4
 80051ae:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051b0:	bc30      	pop	{r4, r5}
 80051b2:	4770      	bx	lr

080051b4 <I2C_IsErrorOccurred>:
{
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80051ba:	6803      	ldr	r3, [r0, #0]
 80051bc:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051be:	f017 0710 	ands.w	r7, r7, #16
 80051c2:	d051      	beq.n	8005268 <I2C_IsErrorOccurred+0xb4>
 80051c4:	460e      	mov	r6, r1
 80051c6:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c8:	2210      	movs	r2, #16
 80051ca:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2500      	movs	r5, #0
 80051ce:	462f      	mov	r7, r5
              hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	698b      	ldr	r3, [r1, #24]
 80051d8:	f013 0f20 	tst.w	r3, #32
 80051dc:	d13d      	bne.n	800525a <I2C_IsErrorOccurred+0xa6>
 80051de:	2d00      	cmp	r5, #0
 80051e0:	d13b      	bne.n	800525a <I2C_IsErrorOccurred+0xa6>
      if (Timeout != HAL_MAX_DELAY)
 80051e2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80051e6:	d0f6      	beq.n	80051d6 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7fd f9f0 	bl	80025cc <HAL_GetTick>
 80051ec:	463d      	mov	r5, r7
 80051ee:	eba0 0008 	sub.w	r0, r0, r8
 80051f2:	42b0      	cmp	r0, r6
 80051f4:	d801      	bhi.n	80051fa <I2C_IsErrorOccurred+0x46>
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	d1ec      	bne.n	80051d4 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80051fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005202:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005204:	6991      	ldr	r1, [r2, #24]
 8005206:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800520a:	d004      	beq.n	8005216 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 800520c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005210:	d101      	bne.n	8005216 <I2C_IsErrorOccurred+0x62>
 8005212:	2b20      	cmp	r3, #32
 8005214:	d119      	bne.n	800524a <I2C_IsErrorOccurred+0x96>
{
 8005216:	463d      	mov	r5, r7
              status = HAL_ERROR;
 8005218:	f04f 0a01 	mov.w	sl, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f013 0f20 	tst.w	r3, #32
 8005224:	d1d6      	bne.n	80051d4 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005226:	f7fd f9d1 	bl	80025cc <HAL_GetTick>
 800522a:	eba0 0008 	sub.w	r0, r0, r8
 800522e:	2819      	cmp	r0, #25
 8005230:	d9f4      	bls.n	800521c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005232:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005234:	f043 0320 	orr.w	r3, r3, #32
 8005238:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800523a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8005242:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005246:	4655      	mov	r5, sl
 8005248:	e7e8      	b.n	800521c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800524a:	6853      	ldr	r3, [r2, #4]
 800524c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005250:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8005252:	f7fd f9bb 	bl	80025cc <HAL_GetTick>
 8005256:	4680      	mov	r8, r0
 8005258:	e7dd      	b.n	8005216 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 800525a:	2d00      	cmp	r5, #0
 800525c:	d13f      	bne.n	80052de <I2C_IsErrorOccurred+0x12a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525e:	2320      	movs	r3, #32
 8005260:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005262:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8005264:	2501      	movs	r5, #1
 8005266:	e000      	b.n	800526a <I2C_IsErrorOccurred+0xb6>
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800526e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005272:	d005      	beq.n	8005280 <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_BERR;
 8005274:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800527c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800527e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005280:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005284:	d02d      	beq.n	80052e2 <I2C_IsErrorOccurred+0x12e>
    error_code |= HAL_I2C_ERROR_OVR;
 8005286:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005290:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005292:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005296:	d005      	beq.n	80052a4 <I2C_IsErrorOccurred+0xf0>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005298:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a2:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7ff ff57 	bl	8005158 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	6853      	ldr	r3, [r2, #4]
 80052ae:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80052b2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80052b6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80052c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052c2:	431f      	orrs	r7, r3
 80052c4:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	2320      	movs	r3, #32
 80052c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80052d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80052d6:	2501      	movs	r5, #1
}
 80052d8:	4628      	mov	r0, r5
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80052de:	2704      	movs	r7, #4
 80052e0:	e7c3      	b.n	800526a <I2C_IsErrorOccurred+0xb6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052e6:	d1d7      	bne.n	8005298 <I2C_IsErrorOccurred+0xe4>
  if (status != HAL_OK)
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	d0f5      	beq.n	80052d8 <I2C_IsErrorOccurred+0x124>
 80052ec:	e7da      	b.n	80052a4 <I2C_IsErrorOccurred+0xf0>

080052ee <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f013 0f02 	tst.w	r3, #2
 80052fe:	d11d      	bne.n	800533c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005300:	4632      	mov	r2, r6
 8005302:	4629      	mov	r1, r5
 8005304:	4620      	mov	r0, r4
 8005306:	f7ff ff55 	bl	80051b4 <I2C_IsErrorOccurred>
 800530a:	b9c8      	cbnz	r0, 8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800530c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005310:	d0f1      	beq.n	80052f6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fd f95b 	bl	80025cc <HAL_GetTick>
 8005316:	1b80      	subs	r0, r0, r6
 8005318:	42a8      	cmp	r0, r5
 800531a:	d801      	bhi.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800531c:	2d00      	cmp	r5, #0
 800531e:	d1ea      	bne.n	80052f6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005322:	f043 0320 	orr.w	r3, r3, #32
 8005326:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005328:	2320      	movs	r3, #32
 800532a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	2300      	movs	r3, #0
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005334:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005338:	2001      	movs	r0, #1
 800533a:	e000      	b.n	800533e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800533c:	2000      	movs	r0, #0
}
 800533e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005340:	2001      	movs	r0, #1
 8005342:	e7fc      	b.n	800533e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005344 <I2C_WaitOnFlagUntilTimeout>:
{
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	4680      	mov	r8, r0
 800534a:	460f      	mov	r7, r1
 800534c:	4616      	mov	r6, r2
 800534e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005350:	f8d8 3000 	ldr.w	r3, [r8]
 8005354:	699c      	ldr	r4, [r3, #24]
 8005356:	ea37 0204 	bics.w	r2, r7, r4
 800535a:	bf0c      	ite	eq
 800535c:	f04f 0c01 	moveq.w	ip, #1
 8005360:	f04f 0c00 	movne.w	ip, #0
 8005364:	45b4      	cmp	ip, r6
 8005366:	d11a      	bne.n	800539e <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005368:	f1b5 3fff 	cmp.w	r5, #4294967295
 800536c:	d0f2      	beq.n	8005354 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fd f92d 	bl	80025cc <HAL_GetTick>
 8005372:	9b06      	ldr	r3, [sp, #24]
 8005374:	1ac0      	subs	r0, r0, r3
 8005376:	42a8      	cmp	r0, r5
 8005378:	d801      	bhi.n	800537e <I2C_WaitOnFlagUntilTimeout+0x3a>
 800537a:	2d00      	cmp	r5, #0
 800537c:	d1e8      	bne.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800537e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8005382:	f043 0320 	orr.w	r3, r3, #32
 8005386:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800538a:	2320      	movs	r3, #32
 800538c:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	2300      	movs	r3, #0
 8005392:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005396:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 800539a:	2001      	movs	r0, #1
 800539c:	e000      	b.n	80053a0 <I2C_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 800539e:	2000      	movs	r0, #0
}
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053a4 <I2C_RequestMemoryWrite>:
{
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	4604      	mov	r4, r0
 80053ac:	4690      	mov	r8, r2
 80053ae:	461d      	mov	r5, r3
 80053b0:	9e08      	ldr	r6, [sp, #32]
 80053b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <I2C_RequestMemoryWrite+0x78>)
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053bc:	b2ea      	uxtb	r2, r5
 80053be:	f7ff fedc 	bl	800517a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	463a      	mov	r2, r7
 80053c4:	4631      	mov	r1, r6
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff ff91 	bl	80052ee <I2C_WaitOnTXISFlagUntilTimeout>
 80053cc:	bb08      	cbnz	r0, 8005412 <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ce:	2d01      	cmp	r5, #1
 80053d0:	d110      	bne.n	80053f4 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	fa5f f288 	uxtb.w	r2, r8
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053da:	9700      	str	r7, [sp, #0]
 80053dc:	4633      	mov	r3, r6
 80053de:	2200      	movs	r2, #0
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7ff ffae 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80053e8:	3800      	subs	r0, #0
 80053ea:	bf18      	it	ne
 80053ec:	2001      	movne	r0, #1
}
 80053ee:	b002      	add	sp, #8
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fc:	463a      	mov	r2, r7
 80053fe:	4631      	mov	r1, r6
 8005400:	4620      	mov	r0, r4
 8005402:	f7ff ff74 	bl	80052ee <I2C_WaitOnTXISFlagUntilTimeout>
 8005406:	b930      	cbnz	r0, 8005416 <I2C_RequestMemoryWrite+0x72>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	fa5f f288 	uxtb.w	r2, r8
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
 8005410:	e7e3      	b.n	80053da <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8005412:	2001      	movs	r0, #1
 8005414:	e7eb      	b.n	80053ee <I2C_RequestMemoryWrite+0x4a>
      return HAL_ERROR;
 8005416:	2001      	movs	r0, #1
 8005418:	e7e9      	b.n	80053ee <I2C_RequestMemoryWrite+0x4a>
 800541a:	bf00      	nop
 800541c:	80002000 	.word	0x80002000

08005420 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4605      	mov	r5, r0
 8005424:	460c      	mov	r4, r1
 8005426:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f013 0f20 	tst.w	r3, #32
 8005430:	d11a      	bne.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005432:	4632      	mov	r2, r6
 8005434:	4621      	mov	r1, r4
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff febc 	bl	80051b4 <I2C_IsErrorOccurred>
 800543c:	b9b0      	cbnz	r0, 800546c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd f8c5 	bl	80025cc <HAL_GetTick>
 8005442:	1b80      	subs	r0, r0, r6
 8005444:	42a0      	cmp	r0, r4
 8005446:	d801      	bhi.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005448:	2c00      	cmp	r4, #0
 800544a:	d1ed      	bne.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800544c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800544e:	f043 0320 	orr.w	r3, r3, #32
 8005452:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005454:	2320      	movs	r3, #32
 8005456:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800545a:	2300      	movs	r3, #0
 800545c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005460:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005464:	2001      	movs	r0, #1
}
 8005466:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005468:	2000      	movs	r0, #0
 800546a:	e7fc      	b.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800546c:	2001      	movs	r0, #1
 800546e:	e7fa      	b.n	8005466 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005470 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	460d      	mov	r5, r1
 8005476:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f013 0f04 	tst.w	r3, #4
 8005480:	d149      	bne.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	4632      	mov	r2, r6
 8005484:	4629      	mov	r1, r5
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff fe94 	bl	80051b4 <I2C_IsErrorOccurred>
 800548c:	4601      	mov	r1, r0
 800548e:	2800      	cmp	r0, #0
 8005490:	d143      	bne.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	f012 0f20 	tst.w	r2, #32
 800549a:	d113      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549c:	f7fd f896 	bl	80025cc <HAL_GetTick>
 80054a0:	1b80      	subs	r0, r0, r6
 80054a2:	42a8      	cmp	r0, r5
 80054a4:	d801      	bhi.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	d1e6      	bne.n	8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054ac:	f043 0320 	orr.w	r3, r3, #32
 80054b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	2320      	movs	r3, #32
 80054b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80054b8:	2300      	movs	r3, #0
 80054ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80054be:	2101      	movs	r1, #1
}
 80054c0:	4608      	mov	r0, r1
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	f012 0f04 	tst.w	r2, #4
 80054ca:	d002      	beq.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80054cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d1f6      	bne.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	f012 0f10 	tst.w	r2, #16
 80054d8:	d01a      	beq.n	8005510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054da:	2210      	movs	r2, #16
 80054dc:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80054de:	2304      	movs	r3, #4
 80054e0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	2220      	movs	r2, #32
 80054e6:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	684b      	ldr	r3, [r1, #4]
 80054ec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054f0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	2300      	movs	r3, #0
 8005504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005508:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800550c:	2101      	movs	r1, #1
 800550e:	e7d7      	b.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005510:	2300      	movs	r3, #0
 8005512:	6463      	str	r3, [r4, #68]	; 0x44
 8005514:	e7e5      	b.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8005516:	2100      	movs	r1, #0
 8005518:	e7d2      	b.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 800551a:	2101      	movs	r1, #1
 800551c:	e7d0      	b.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
	...

08005520 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005520:	2800      	cmp	r0, #0
 8005522:	d053      	beq.n	80055cc <HAL_I2C_Init+0xac>
{
 8005524:	b510      	push	{r4, lr}
 8005526:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005528:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800552c:	2b00      	cmp	r3, #0
 800552e:	d043      	beq.n	80055b8 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	2324      	movs	r3, #36	; 0x24
 8005532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005548:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	6893      	ldr	r3, [r2, #8]
 800554e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005552:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005554:	68e3      	ldr	r3, [r4, #12]
 8005556:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	68a3      	ldr	r3, [r4, #8]
 800555c:	bf0c      	ite	eq
 800555e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005562:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8005566:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d029      	beq.n	80055c2 <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	6851      	ldr	r1, [r2, #4]
 8005572:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <HAL_I2C_Init+0xb0>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	68d3      	ldr	r3, [r2, #12]
 800557c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005580:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	6961      	ldr	r1, [r4, #20]
 8005588:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800558a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800558c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005590:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	69e3      	ldr	r3, [r4, #28]
 8005596:	6a21      	ldr	r1, [r4, #32]
 8005598:	430b      	orrs	r3, r1
 800559a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a6:	2000      	movs	r0, #0
 80055a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	2320      	movs	r3, #32
 80055ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80055b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80055b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80055bc:	f7fb fbe0 	bl	8000d80 <HAL_I2C_MspInit>
 80055c0:	e7b6      	b.n	8005530 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e7d0      	b.n	800556e <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
}
 80055ce:	4770      	bx	lr
 80055d0:	02008000 	.word	0x02008000

080055d4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80055d4:	b1a8      	cbz	r0, 8005602 <HAL_I2C_DeInit+0x2e>
{
 80055d6:	b510      	push	{r4, lr}
 80055d8:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055da:	2324      	movs	r3, #36	; 0x24
 80055dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055e0:	6802      	ldr	r2, [r0, #0]
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80055ea:	f7fb fc7f 	bl	8000eec <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ee:	2000      	movs	r0, #0
 80055f0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80055f2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80055fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005600:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005602:	2001      	movs	r0, #1
}
 8005604:	4770      	bx	lr
	...

08005608 <HAL_I2C_Master_Transmit>:
{
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	460f      	mov	r7, r1
 8005610:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005612:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005616:	b2c9      	uxtb	r1, r1
 8005618:	2920      	cmp	r1, #32
 800561a:	f040 80a8 	bne.w	800576e <HAL_I2C_Master_Transmit+0x166>
 800561e:	4604      	mov	r4, r0
 8005620:	4690      	mov	r8, r2
 8005622:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005624:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005628:	2b01      	cmp	r3, #1
 800562a:	f000 80a4 	beq.w	8005776 <HAL_I2C_Master_Transmit+0x16e>
 800562e:	f04f 0a01 	mov.w	sl, #1
 8005632:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005636:	f7fc ffc9 	bl	80025cc <HAL_GetTick>
 800563a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800563c:	9000      	str	r0, [sp, #0]
 800563e:	2319      	movs	r3, #25
 8005640:	4652      	mov	r2, sl
 8005642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005646:	4620      	mov	r0, r4
 8005648:	f7ff fe7c 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 800564c:	2800      	cmp	r0, #0
 800564e:	f040 8094 	bne.w	800577a <HAL_I2C_Master_Transmit+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005652:	2321      	movs	r3, #33	; 0x21
 8005654:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005658:	2310      	movs	r3, #16
 800565a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800565e:	2300      	movs	r3, #0
 8005660:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005662:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005666:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800566a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800566c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2bff      	cmp	r3, #255	; 0xff
 8005672:	d947      	bls.n	8005704 <HAL_I2C_Master_Transmit+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005678:	4b44      	ldr	r3, [pc, #272]	; (800578c <HAL_I2C_Master_Transmit+0x184>)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005680:	4639      	mov	r1, r7
 8005682:	4620      	mov	r0, r4
 8005684:	f7ff fd79 	bl	800517a <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005688:	f04f 0800 	mov.w	r8, #0
 800568c:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005690:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8005694:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d04c      	beq.n	8005736 <HAL_I2C_Master_Transmit+0x12e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569c:	462a      	mov	r2, r5
 800569e:	4631      	mov	r1, r6
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff fe24 	bl	80052ee <I2C_WaitOnTXISFlagUntilTimeout>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d169      	bne.n	800577e <HAL_I2C_Master_Transmit+0x176>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80056ae:	7812      	ldrb	r2, [r2, #0]
 80056b0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80056b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80056b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056ca:	b292      	uxth	r2, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e1      	bne.n	8005694 <HAL_I2C_Master_Transmit+0x8c>
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	d0df      	beq.n	8005694 <HAL_I2C_Master_Transmit+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056d4:	9500      	str	r5, [sp, #0]
 80056d6:	4633      	mov	r3, r6
 80056d8:	4642      	mov	r2, r8
 80056da:	4649      	mov	r1, r9
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff fe31 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d14d      	bne.n	8005782 <HAL_I2C_Master_Transmit+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d917      	bls.n	800571e <HAL_I2C_Master_Transmit+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	22ff      	movs	r2, #255	; 0xff
 80056f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056f2:	f8cd 8000 	str.w	r8, [sp]
 80056f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056fa:	4639      	mov	r1, r7
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7ff fd3c 	bl	800517a <I2C_TransferConfig>
 8005702:	e7c7      	b.n	8005694 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8005704:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005706:	b292      	uxth	r2, r2
 8005708:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800570a:	4b20      	ldr	r3, [pc, #128]	; (800578c <HAL_I2C_Master_Transmit+0x184>)
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	4639      	mov	r1, r7
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fd2f 	bl	800517a <I2C_TransferConfig>
 800571c:	e7b4      	b.n	8005688 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 800571e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005720:	b292      	uxth	r2, r2
 8005722:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005724:	f8cd 8000 	str.w	r8, [sp]
 8005728:	4653      	mov	r3, sl
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	4639      	mov	r1, r7
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff fd23 	bl	800517a <I2C_TransferConfig>
 8005734:	e7ae      	b.n	8005694 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005736:	462a      	mov	r2, r5
 8005738:	4631      	mov	r1, r6
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fe70 	bl	8005420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005740:	bb08      	cbnz	r0, 8005786 <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	2220      	movs	r2, #32
 8005746:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005748:	6821      	ldr	r1, [r4, #0]
 800574a:	684b      	ldr	r3, [r1, #4]
 800574c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005750:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005754:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800575e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005762:	2300      	movs	r3, #0
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005768:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800576c:	e000      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 800576e:	2002      	movs	r0, #2
}
 8005770:	b002      	add	sp, #8
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005776:	2002      	movs	r0, #2
 8005778:	e7fa      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 800577a:	2001      	movs	r0, #1
 800577c:	e7f8      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 800577e:	2001      	movs	r0, #1
 8005780:	e7f6      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 8005782:	2001      	movs	r0, #1
 8005784:	e7f4      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8005786:	2001      	movs	r0, #1
 8005788:	e7f2      	b.n	8005770 <HAL_I2C_Master_Transmit+0x168>
 800578a:	bf00      	nop
 800578c:	80002000 	.word	0x80002000

08005790 <HAL_I2C_Master_Receive>:
{
 8005790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	460f      	mov	r7, r1
 8005798:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800579a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800579e:	b2c9      	uxtb	r1, r1
 80057a0:	2920      	cmp	r1, #32
 80057a2:	f040 80a8 	bne.w	80058f6 <HAL_I2C_Master_Receive+0x166>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4690      	mov	r8, r2
 80057aa:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80057ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f000 80a4 	beq.w	80058fe <HAL_I2C_Master_Receive+0x16e>
 80057b6:	f04f 0a01 	mov.w	sl, #1
 80057ba:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80057be:	f7fc ff05 	bl	80025cc <HAL_GetTick>
 80057c2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c4:	9000      	str	r0, [sp, #0]
 80057c6:	2319      	movs	r3, #25
 80057c8:	4652      	mov	r2, sl
 80057ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff fdb8 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 8094 	bne.w	8005902 <HAL_I2C_Master_Receive+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057da:	2322      	movs	r3, #34	; 0x22
 80057dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057e0:	2310      	movs	r3, #16
 80057e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80057ea:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80057ee:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057f2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2bff      	cmp	r3, #255	; 0xff
 80057fa:	d947      	bls.n	800588c <HAL_I2C_Master_Receive+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005800:	4b44      	ldr	r3, [pc, #272]	; (8005914 <HAL_I2C_Master_Receive+0x184>)
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005808:	4639      	mov	r1, r7
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff fcb5 	bl	800517a <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005810:	f04f 0800 	mov.w	r8, #0
 8005814:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005818:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 800581c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d04c      	beq.n	80058be <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005824:	462a      	mov	r2, r5
 8005826:	4631      	mov	r1, r6
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff fe21 	bl	8005470 <I2C_WaitOnRXNEFlagUntilTimeout>
 800582e:	2800      	cmp	r0, #0
 8005830:	d169      	bne.n	8005906 <HAL_I2C_Master_Receive+0x176>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005838:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800583a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800583c:	3301      	adds	r3, #1
 800583e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005840:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29b      	uxth	r3, r3
 8005846:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005848:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800584a:	3a01      	subs	r2, #1
 800584c:	b292      	uxth	r2, r2
 800584e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005850:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005852:	b292      	uxth	r2, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e1      	bne.n	800581c <HAL_I2C_Master_Receive+0x8c>
 8005858:	2a00      	cmp	r2, #0
 800585a:	d0df      	beq.n	800581c <HAL_I2C_Master_Receive+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800585c:	9500      	str	r5, [sp, #0]
 800585e:	4633      	mov	r3, r6
 8005860:	4642      	mov	r2, r8
 8005862:	4649      	mov	r1, r9
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff fd6d 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 800586a:	2800      	cmp	r0, #0
 800586c:	d14d      	bne.n	800590a <HAL_I2C_Master_Receive+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800586e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2bff      	cmp	r3, #255	; 0xff
 8005874:	d917      	bls.n	80058a6 <HAL_I2C_Master_Receive+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800587a:	f8cd 8000 	str.w	r8, [sp]
 800587e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005882:	4639      	mov	r1, r7
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff fc78 	bl	800517a <I2C_TransferConfig>
 800588a:	e7c7      	b.n	800581c <HAL_I2C_Master_Receive+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 800588c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800588e:	b292      	uxth	r2, r2
 8005890:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_I2C_Master_Receive+0x184>)
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	4639      	mov	r1, r7
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff fc6b 	bl	800517a <I2C_TransferConfig>
 80058a4:	e7b4      	b.n	8005810 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80058a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058a8:	b292      	uxth	r2, r2
 80058aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ac:	f8cd 8000 	str.w	r8, [sp]
 80058b0:	4653      	mov	r3, sl
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	4639      	mov	r1, r7
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff fc5f 	bl	800517a <I2C_TransferConfig>
 80058bc:	e7ae      	b.n	800581c <HAL_I2C_Master_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058be:	462a      	mov	r2, r5
 80058c0:	4631      	mov	r1, r6
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff fdac 	bl	8005420 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058c8:	bb08      	cbnz	r0, 800590e <HAL_I2C_Master_Receive+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	2220      	movs	r2, #32
 80058ce:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80058d0:	6821      	ldr	r1, [r4, #0]
 80058d2:	684b      	ldr	r3, [r1, #4]
 80058d4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80058d8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80058dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80058f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80058f4:	e000      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 80058f6:	2002      	movs	r0, #2
}
 80058f8:	b002      	add	sp, #8
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80058fe:	2002      	movs	r0, #2
 8005900:	e7fa      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8005902:	2001      	movs	r0, #1
 8005904:	e7f8      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 8005906:	2001      	movs	r0, #1
 8005908:	e7f6      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
 800590c:	e7f4      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 800590e:	2001      	movs	r0, #1
 8005910:	e7f2      	b.n	80058f8 <HAL_I2C_Master_Receive+0x168>
 8005912:	bf00      	nop
 8005914:	80002400 	.word	0x80002400

08005918 <HAL_I2C_Mem_Write>:
{
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	b083      	sub	sp, #12
 800591e:	460d      	mov	r5, r1
 8005920:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005924:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005926:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800592a:	b2c9      	uxtb	r1, r1
 800592c:	2920      	cmp	r1, #32
 800592e:	f040 80bf 	bne.w	8005ab0 <HAL_I2C_Mem_Write+0x198>
 8005932:	4604      	mov	r4, r0
 8005934:	4690      	mov	r8, r2
 8005936:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800593a:	b1cb      	cbz	r3, 8005970 <HAL_I2C_Mem_Write+0x58>
 800593c:	f1ba 0f00 	cmp.w	sl, #0
 8005940:	d016      	beq.n	8005970 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8005942:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005946:	2b01      	cmp	r3, #1
 8005948:	f000 80b6 	beq.w	8005ab8 <HAL_I2C_Mem_Write+0x1a0>
 800594c:	f04f 0b01 	mov.w	fp, #1
 8005950:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005954:	f7fc fe3a 	bl	80025cc <HAL_GetTick>
 8005958:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800595a:	9000      	str	r0, [sp, #0]
 800595c:	2319      	movs	r3, #25
 800595e:	465a      	mov	r2, fp
 8005960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fced 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 800596a:	b130      	cbz	r0, 800597a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800596c:	2001      	movs	r0, #1
 800596e:	e0a0      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005974:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005976:	2001      	movs	r0, #1
 8005978:	e09b      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800597a:	2321      	movs	r3, #33	; 0x21
 800597c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005986:	2300      	movs	r3, #0
 8005988:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800598a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800598c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800598e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005992:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005994:	9601      	str	r6, [sp, #4]
 8005996:	9700      	str	r7, [sp, #0]
 8005998:	464b      	mov	r3, r9
 800599a:	4642      	mov	r2, r8
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff fd00 	bl	80053a4 <I2C_RequestMemoryWrite>
 80059a4:	b9a0      	cbnz	r0, 80059d0 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2bff      	cmp	r3, #255	; 0xff
 80059ac:	d915      	bls.n	80059da <HAL_I2C_Mem_Write+0xc2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ae:	22ff      	movs	r2, #255	; 0xff
 80059b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059b2:	2300      	movs	r3, #0
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059ba:	4629      	mov	r1, r5
 80059bc:	4620      	mov	r0, r4
 80059be:	f7ff fbdc 	bl	800517a <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ca:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 80059ce:	e020      	b.n	8005a12 <HAL_I2C_Mem_Write+0xfa>
      __HAL_UNLOCK(hi2c);
 80059d0:	2300      	movs	r3, #0
 80059d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80059d6:	4658      	mov	r0, fp
 80059d8:	e06b      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 80059da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059dc:	b292      	uxth	r2, r2
 80059de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059e0:	2300      	movs	r3, #0
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4629      	mov	r1, r5
 80059ec:	4620      	mov	r0, r4
 80059ee:	f7ff fbc4 	bl	800517a <I2C_TransferConfig>
 80059f2:	e7e6      	b.n	80059c2 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80059f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059f6:	b292      	uxth	r2, r2
 80059f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059fa:	f8cd 8000 	str.w	r8, [sp]
 80059fe:	4653      	mov	r3, sl
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	4629      	mov	r1, r5
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff fbb8 	bl	800517a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d032      	beq.n	8005a78 <HAL_I2C_Mem_Write+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a12:	4632      	mov	r2, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7ff fc69 	bl	80052ee <I2C_WaitOnTXISFlagUntilTimeout>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d14d      	bne.n	8005abc <HAL_I2C_Mem_Write+0x1a4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005a36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a40:	b292      	uxth	r2, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e1      	bne.n	8005a0a <HAL_I2C_Mem_Write+0xf2>
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	d0df      	beq.n	8005a0a <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a4a:	9600      	str	r6, [sp, #0]
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	4642      	mov	r2, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fc76 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005a58:	bb90      	cbnz	r0, 8005ac0 <HAL_I2C_Mem_Write+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2bff      	cmp	r3, #255	; 0xff
 8005a60:	d9c8      	bls.n	80059f4 <HAL_I2C_Mem_Write+0xdc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a66:	f8cd 8000 	str.w	r8, [sp]
 8005a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7ff fb82 	bl	800517a <I2C_TransferConfig>
 8005a76:	e7c8      	b.n	8005a0a <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a78:	4632      	mov	r2, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff fccf 	bl	8005420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a82:	b9f8      	cbnz	r0, 8005ac4 <HAL_I2C_Mem_Write+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	2220      	movs	r2, #32
 8005a88:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005a8a:	6821      	ldr	r1, [r4, #0]
 8005a8c:	684b      	ldr	r3, [r1, #4]
 8005a8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005a92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005a96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005aaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005aae:	e000      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
    return HAL_BUSY;
 8005ab0:	2002      	movs	r0, #2
}
 8005ab2:	b003      	add	sp, #12
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005ab8:	2002      	movs	r0, #2
 8005aba:	e7fa      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
        return HAL_ERROR;
 8005abc:	2001      	movs	r0, #1
 8005abe:	e7f8      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
          return HAL_ERROR;
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e7f6      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>
      return HAL_ERROR;
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	e7f4      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x19a>

08005ac8 <HAL_I2C_IsDeviceReady>:
{
 8005ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005acc:	b085      	sub	sp, #20
 8005ace:	4617      	mov	r7, r2
 8005ad0:	461c      	mov	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	9203      	str	r2, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	f040 809a 	bne.w	8005c16 <HAL_I2C_IsDeviceReady+0x14e>
 8005ae2:	4605      	mov	r5, r0
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ae4:	6803      	ldr	r3, [r0, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005aec:	f040 8095 	bne.w	8005c1a <HAL_I2C_IsDeviceReady+0x152>
    __HAL_LOCK(hi2c);
 8005af0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	f000 8092 	beq.w	8005c1e <HAL_I2C_IsDeviceReady+0x156>
 8005afa:	2301      	movs	r3, #1
 8005afc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b00:	2324      	movs	r3, #36	; 0x24
 8005b02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b06:	6442      	str	r2, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b08:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8005b0c:	f443 5920 	orr.w	r9, r3, #10240	; 0x2800
 8005b10:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8005c30 <HAL_I2C_IsDeviceReady+0x168>
 8005b14:	ea43 0808 	orr.w	r8, r3, r8
 8005b18:	68eb      	ldr	r3, [r5, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	464a      	movne	r2, r9
 8005b20:	4642      	moveq	r2, r8
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 8005b26:	f7fc fd51 	bl	80025cc <HAL_GetTick>
 8005b2a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b30:	699b      	ldr	r3, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b32:	f002 0220 	and.w	r2, r2, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b36:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_I2C_IsDeviceReady+0xda>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f013 0f10 	tst.w	r3, #16
 8005b46:	d044      	beq.n	8005bd2 <HAL_I2C_IsDeviceReady+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b48:	9600      	str	r6, [sp, #0]
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2120      	movs	r1, #32
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff fbf7 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d165      	bne.n	8005c26 <HAL_I2C_IsDeviceReady+0x15e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2220      	movs	r2, #32
 8005b64:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	42bb      	cmp	r3, r7
 8005b6a:	d043      	beq.n	8005bf4 <HAL_I2C_IsDeviceReady+0x12c>
      I2C_Trials++;
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	42bb      	cmp	r3, r7
 8005b76:	d3cf      	bcc.n	8005b18 <HAL_I2C_IsDeviceReady+0x50>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8005b86:	2300      	movs	r3, #0
 8005b88:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e01d      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b90:	682a      	ldr	r2, [r5, #0]
 8005b92:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b94:	6991      	ldr	r1, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b96:	f003 0320 	and.w	r3, r3, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	d1cd      	bne.n	8005b3e <HAL_I2C_IsDeviceReady+0x76>
        if (Timeout != HAL_MAX_DELAY)
 8005ba2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005ba6:	d0f3      	beq.n	8005b90 <HAL_I2C_IsDeviceReady+0xc8>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	f7fc fd10 	bl	80025cc <HAL_GetTick>
 8005bac:	1b80      	subs	r0, r0, r6
 8005bae:	42a0      	cmp	r0, r4
 8005bb0:	d801      	bhi.n	8005bb6 <HAL_I2C_IsDeviceReady+0xee>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	d1ec      	bne.n	8005b90 <HAL_I2C_IsDeviceReady+0xc8>
            hi2c->State = HAL_I2C_STATE_READY;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bbc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005bbe:	f043 0320 	orr.w	r3, r3, #32
 8005bc2:	646b      	str	r3, [r5, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
            return HAL_ERROR;
 8005bca:	2001      	movs	r0, #1
}
 8005bcc:	b005      	add	sp, #20
 8005bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005bd2:	9600      	str	r6, [sp, #0]
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2120      	movs	r1, #32
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7ff fbb2 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	b9f8      	cbnz	r0, 8005c22 <HAL_I2C_IsDeviceReady+0x15a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be2:	682a      	ldr	r2, [r5, #0]
 8005be4:	2320      	movs	r3, #32
 8005be6:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8005bec:	2300      	movs	r3, #0
 8005bee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_OK;
 8005bf2:	e7eb      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bf4:	682a      	ldr	r2, [r5, #0]
 8005bf6:	6853      	ldr	r3, [r2, #4]
 8005bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bfc:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005bfe:	9600      	str	r6, [sp, #0]
 8005c00:	4623      	mov	r3, r4
 8005c02:	2200      	movs	r2, #0
 8005c04:	2120      	movs	r1, #32
 8005c06:	4628      	mov	r0, r5
 8005c08:	f7ff fb9c 	bl	8005344 <I2C_WaitOnFlagUntilTimeout>
 8005c0c:	b968      	cbnz	r0, 8005c2a <HAL_I2C_IsDeviceReady+0x162>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	2220      	movs	r2, #32
 8005c12:	61da      	str	r2, [r3, #28]
 8005c14:	e7aa      	b.n	8005b6c <HAL_I2C_IsDeviceReady+0xa4>
    return HAL_BUSY;
 8005c16:	2002      	movs	r0, #2
 8005c18:	e7d8      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
      return HAL_BUSY;
 8005c1a:	2002      	movs	r0, #2
 8005c1c:	e7d6      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
    __HAL_LOCK(hi2c);
 8005c1e:	2002      	movs	r0, #2
 8005c20:	e7d4      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7d2      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 8005c26:	2001      	movs	r0, #1
 8005c28:	e7d0      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
          return HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e7ce      	b.n	8005bcc <HAL_I2C_IsDeviceReady+0x104>
 8005c2e:	bf00      	nop
 8005c30:	02002000 	.word	0x02002000

08005c34 <HAL_I2C_GetState>:
  return hi2c->State;
 8005c34:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005c38:	4770      	bx	lr

08005c3a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005c3a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d124      	bne.n	8005c92 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c48:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d022      	beq.n	8005c96 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c56:	2324      	movs	r3, #36	; 0x24
 8005c58:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c5c:	6802      	ldr	r2, [r0, #0]
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c66:	6802      	ldr	r2, [r0, #0]
 8005c68:	6813      	ldr	r3, [r2, #0]
 8005c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c70:	6802      	ldr	r2, [r0, #0]
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	4319      	orrs	r1, r3
 8005c76:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c78:	6802      	ldr	r2, [r0, #0]
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	2320      	movs	r3, #32
 8005c84:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005c8e:	4618      	mov	r0, r3
 8005c90:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2002      	movs	r0, #2
 8005c94:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005c96:	2002      	movs	r0, #2
  }
}
 8005c98:	4770      	bx	lr

08005c9a <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d122      	bne.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d020      	beq.n	8005cee <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005cac:	2301      	movs	r3, #1
 8005cae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb2:	2324      	movs	r3, #36	; 0x24
 8005cb4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cb8:	6802      	ldr	r2, [r0, #0]
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cc2:	6802      	ldr	r2, [r0, #0]
 8005cc4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cca:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cce:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cd0:	6802      	ldr	r2, [r0, #0]
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	2320      	movs	r3, #32
 8005cdc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2002      	movs	r0, #2
 8005cec:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005cee:	2002      	movs	r0, #2
  }
}
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005cf4:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <HAL_I2CEx_EnableFastModePlus+0x28>)
 8005cf8:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8005cfc:	f041 0102 	orr.w	r1, r1, #2
 8005d00:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
 8005d04:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8005d08:	f002 0202 	and.w	r2, r2, #2
 8005d0c:	9201      	str	r2, [sp, #4]
 8005d0e:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8005d12:	6853      	ldr	r3, [r2, #4]
 8005d14:	4303      	orrs	r3, r0
 8005d16:	6053      	str	r3, [r2, #4]
}
 8005d18:	b002      	add	sp, #8
 8005d1a:	4770      	bx	lr
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	58000400 	.word	0x58000400

08005d24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d24:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_PWREx_ConfigSupply+0x4c>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f013 0f04 	tst.w	r3, #4
 8005d2e:	d107      	bne.n	8005d40 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <HAL_PWREx_ConfigSupply+0x4c>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d38:	1a18      	subs	r0, r3, r0
 8005d3a:	bf18      	it	ne
 8005d3c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d40:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <HAL_PWREx_ConfigSupply+0x4c>)
 8005d42:	68d3      	ldr	r3, [r2, #12]
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	4318      	orrs	r0, r3
 8005d4a:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 8005d4c:	f7fc fc3e 	bl	80025cc <HAL_GetTick>
 8005d50:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d52:	4d07      	ldr	r5, [pc, #28]	; (8005d70 <HAL_PWREx_ConfigSupply+0x4c>)
 8005d54:	686b      	ldr	r3, [r5, #4]
 8005d56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005d5a:	d107      	bne.n	8005d6c <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d5c:	f7fc fc36 	bl	80025cc <HAL_GetTick>
 8005d60:	1b00      	subs	r0, r0, r4
 8005d62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005d66:	d9f5      	bls.n	8005d54 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7e8      	b.n	8005d3e <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7e6      	b.n	8005d3e <HAL_PWREx_ConfigSupply+0x1a>
 8005d70:	58024800 	.word	0x58024800

08005d74 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f000 8318 	beq.w	80063aa <HAL_RCC_OscConfig+0x636>
{
 8005d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	6803      	ldr	r3, [r0, #0]
 8005d80:	f013 0f01 	tst.w	r3, #1
 8005d84:	d025      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d86:	4a94      	ldr	r2, [pc, #592]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005d88:	6913      	ldr	r3, [r2, #16]
 8005d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d015      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x4c>
 8005d94:	2b18      	cmp	r3, #24
 8005d96:	d00f      	beq.n	8005db8 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d03f      	beq.n	8005e20 <HAL_RCC_OscConfig+0xac>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d153      	bne.n	8005e4c <HAL_RCC_OscConfig+0xd8>
 8005da4:	4b8c      	ldr	r3, [pc, #560]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e038      	b.n	8005e2a <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005db8:	f002 0203 	and.w	r2, r2, #3
 8005dbc:	2a02      	cmp	r2, #2
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc0:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x5e>
 8005dca:	6863      	ldr	r3, [r4, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 82ee 	beq.w	80063ae <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	f013 0f02 	tst.w	r3, #2
 8005dd8:	f000 80a1 	beq.w	8005f1e <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ddc:	4a7e      	ldr	r2, [pc, #504]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005dde:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005de0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005de2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005de6:	d05a      	beq.n	8005e9e <HAL_RCC_OscConfig+0x12a>
 8005de8:	2b18      	cmp	r3, #24
 8005dea:	d055      	beq.n	8005e98 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dec:	68e2      	ldr	r2, [r4, #12]
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	f000 80de 	beq.w	8005fb0 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005df4:	4978      	ldr	r1, [pc, #480]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005df6:	680b      	ldr	r3, [r1, #0]
 8005df8:	f023 0319 	bic.w	r3, r3, #25
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc fbe4 	bl	80025cc <HAL_GetTick>
 8005e04:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e06:	4e74      	ldr	r6, [pc, #464]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	f013 0f04 	tst.w	r3, #4
 8005e0e:	f040 80ad 	bne.w	8005f6c <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e12:	f7fc fbdb 	bl	80025cc <HAL_GetTick>
 8005e16:	1b40      	subs	r0, r0, r5
 8005e18:	2802      	cmp	r0, #2
 8005e1a:	d9f5      	bls.n	8005e08 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8005e1c:	2003      	movs	r0, #3
 8005e1e:	e2cd      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e20:	4a6d      	ldr	r2, [pc, #436]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	b32b      	cbz	r3, 8005e7a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8005e2e:	f7fc fbcd 	bl	80025cc <HAL_GetTick>
 8005e32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e34:	4e68      	ldr	r6, [pc, #416]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e36:	6833      	ldr	r3, [r6, #0]
 8005e38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e3c:	d1c9      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3e:	f7fc fbc5 	bl	80025cc <HAL_GetTick>
 8005e42:	1b40      	subs	r0, r0, r5
 8005e44:	2864      	cmp	r0, #100	; 0x64
 8005e46:	d9f6      	bls.n	8005e36 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8005e48:	2003      	movs	r0, #3
 8005e4a:	e2b7      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e50:	d009      	beq.n	8005e66 <HAL_RCC_OscConfig+0xf2>
 8005e52:	4b61      	ldr	r3, [pc, #388]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e7e1      	b.n	8005e2a <HAL_RCC_OscConfig+0xb6>
 8005e66:	4b5c      	ldr	r3, [pc, #368]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e7d7      	b.n	8005e2a <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8005e7a:	f7fc fba7 	bl	80025cc <HAL_GetTick>
 8005e7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e80:	4e55      	ldr	r6, [pc, #340]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005e82:	6833      	ldr	r3, [r6, #0]
 8005e84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e88:	d0a3      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e8a:	f7fc fb9f 	bl	80025cc <HAL_GetTick>
 8005e8e:	1b40      	subs	r0, r0, r5
 8005e90:	2864      	cmp	r0, #100	; 0x64
 8005e92:	d9f6      	bls.n	8005e82 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8005e94:	2003      	movs	r0, #3
 8005e96:	e291      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e98:	f012 0f03 	tst.w	r2, #3
 8005e9c:	d1a6      	bne.n	8005dec <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f013 0f04 	tst.w	r3, #4
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x13c>
 8005ea8:	68e3      	ldr	r3, [r4, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8281 	beq.w	80063b2 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb0:	4a49      	ldr	r2, [pc, #292]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	f023 0319 	bic.w	r3, r3, #25
 8005eb8:	68e1      	ldr	r1, [r4, #12]
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8005ebe:	f7fc fb85 	bl	80025cc <HAL_GetTick>
 8005ec2:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec4:	4e44      	ldr	r6, [pc, #272]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005ec6:	6833      	ldr	r3, [r6, #0]
 8005ec8:	f013 0f04 	tst.w	r3, #4
 8005ecc:	d106      	bne.n	8005edc <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ece:	f7fc fb7d 	bl	80025cc <HAL_GetTick>
 8005ed2:	1b40      	subs	r0, r0, r5
 8005ed4:	2802      	cmp	r0, #2
 8005ed6:	d9f6      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x152>
              return HAL_TIMEOUT;
 8005ed8:	2003      	movs	r0, #3
 8005eda:	e26f      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005edc:	f7fc fb7c 	bl	80025d8 <HAL_GetREVID>
 8005ee0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ee4:	4298      	cmp	r0, r3
 8005ee6:	d812      	bhi.n	8005f0e <HAL_RCC_OscConfig+0x19a>
 8005ee8:	6922      	ldr	r2, [r4, #16]
 8005eea:	2a40      	cmp	r2, #64	; 0x40
 8005eec:	d007      	beq.n	8005efe <HAL_RCC_OscConfig+0x18a>
 8005eee:	493a      	ldr	r1, [pc, #232]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005ef0:	684b      	ldr	r3, [r1, #4]
 8005ef2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ef6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005efa:	604b      	str	r3, [r1, #4]
 8005efc:	e00f      	b.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
 8005efe:	4a36      	ldr	r2, [pc, #216]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f00:	6853      	ldr	r3, [r2, #4]
 8005f02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	e007      	b.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
 8005f0e:	4a32      	ldr	r2, [pc, #200]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f10:	6853      	ldr	r3, [r2, #4]
 8005f12:	6921      	ldr	r1, [r4, #16]
 8005f14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f1c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	f013 0f10 	tst.w	r3, #16
 8005f24:	f000 8088 	beq.w	8006038 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f28:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f2a:	6913      	ldr	r3, [r2, #16]
 8005f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f30:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d056      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x270>
 8005f36:	2b18      	cmp	r3, #24
 8005f38:	d050      	beq.n	8005fdc <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f3a:	69e3      	ldr	r3, [r4, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80b8 	beq.w	80060b2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f42:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f44:	6813      	ldr	r3, [r2, #0]
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fc fb3e 	bl	80025cc <HAL_GetTick>
 8005f50:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f52:	4e21      	ldr	r6, [pc, #132]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f54:	6833      	ldr	r3, [r6, #0]
 8005f56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f5a:	f040 8088 	bne.w	800606e <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f5e:	f7fc fb35 	bl	80025cc <HAL_GetTick>
 8005f62:	1b40      	subs	r0, r0, r5
 8005f64:	2802      	cmp	r0, #2
 8005f66:	d9f5      	bls.n	8005f54 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005f68:	2003      	movs	r0, #3
 8005f6a:	e227      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	f7fc fb34 	bl	80025d8 <HAL_GetREVID>
 8005f70:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f74:	4298      	cmp	r0, r3
 8005f76:	d812      	bhi.n	8005f9e <HAL_RCC_OscConfig+0x22a>
 8005f78:	6922      	ldr	r2, [r4, #16]
 8005f7a:	2a40      	cmp	r2, #64	; 0x40
 8005f7c:	d007      	beq.n	8005f8e <HAL_RCC_OscConfig+0x21a>
 8005f7e:	4916      	ldr	r1, [pc, #88]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f80:	684b      	ldr	r3, [r1, #4]
 8005f82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f86:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005f8a:	604b      	str	r3, [r1, #4]
 8005f8c:	e7c7      	b.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
 8005f8e:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005f90:	6853      	ldr	r3, [r2, #4]
 8005f92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9a:	6053      	str	r3, [r2, #4]
 8005f9c:	e7bf      	b.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005fa0:	6853      	ldr	r3, [r2, #4]
 8005fa2:	6921      	ldr	r1, [r4, #16]
 8005fa4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fa8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005fac:	6053      	str	r3, [r2, #4]
 8005fae:	e7b6      	b.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8005fb0:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005fba:	f7fc fb07 	bl	80025cc <HAL_GetTick>
 8005fbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fc0:	4e05      	ldr	r6, [pc, #20]	; (8005fd8 <HAL_RCC_OscConfig+0x264>)
 8005fc2:	6833      	ldr	r3, [r6, #0]
 8005fc4:	f013 0f04 	tst.w	r3, #4
 8005fc8:	d0a9      	beq.n	8005f1e <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fca:	f7fc faff 	bl	80025cc <HAL_GetTick>
 8005fce:	1b40      	subs	r0, r0, r5
 8005fd0:	2802      	cmp	r0, #2
 8005fd2:	d9f6      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8005fd4:	2003      	movs	r0, #3
 8005fd6:	e1f1      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 8005fd8:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fdc:	f002 0203 	and.w	r2, r2, #3
 8005fe0:	2a01      	cmp	r2, #1
 8005fe2:	d1aa      	bne.n	8005f3a <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe4:	4ba1      	ldr	r3, [pc, #644]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x282>
 8005fee:	69e3      	ldr	r3, [r4, #28]
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	f040 81e0 	bne.w	80063b6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ff6:	f7fc faef 	bl	80025d8 <HAL_GetREVID>
 8005ffa:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ffe:	4298      	cmp	r0, r3
 8006000:	d812      	bhi.n	8006028 <HAL_RCC_OscConfig+0x2b4>
 8006002:	6a22      	ldr	r2, [r4, #32]
 8006004:	2a20      	cmp	r2, #32
 8006006:	d007      	beq.n	8006018 <HAL_RCC_OscConfig+0x2a4>
 8006008:	4998      	ldr	r1, [pc, #608]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 800600a:	684b      	ldr	r3, [r1, #4]
 800600c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006010:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006014:	604b      	str	r3, [r1, #4]
 8006016:	e00f      	b.n	8006038 <HAL_RCC_OscConfig+0x2c4>
 8006018:	4a94      	ldr	r2, [pc, #592]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 800601a:	6853      	ldr	r3, [r2, #4]
 800601c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	e007      	b.n	8006038 <HAL_RCC_OscConfig+0x2c4>
 8006028:	4a90      	ldr	r2, [pc, #576]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 800602a:	68d3      	ldr	r3, [r2, #12]
 800602c:	6a21      	ldr	r1, [r4, #32]
 800602e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006032:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006036:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f013 0f08 	tst.w	r3, #8
 800603e:	d060      	beq.n	8006102 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006040:	6963      	ldr	r3, [r4, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d049      	beq.n	80060da <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006046:	4a89      	ldr	r2, [pc, #548]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006048:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fc fabc 	bl	80025cc <HAL_GetTick>
 8006054:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006056:	4e85      	ldr	r6, [pc, #532]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006058:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800605a:	f013 0f02 	tst.w	r3, #2
 800605e:	d150      	bne.n	8006102 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006060:	f7fc fab4 	bl	80025cc <HAL_GetTick>
 8006064:	1b40      	subs	r0, r0, r5
 8006066:	2802      	cmp	r0, #2
 8006068:	d9f6      	bls.n	8006058 <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 800606a:	2003      	movs	r0, #3
 800606c:	e1a6      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800606e:	f7fc fab3 	bl	80025d8 <HAL_GetREVID>
 8006072:	f241 0303 	movw	r3, #4099	; 0x1003
 8006076:	4298      	cmp	r0, r3
 8006078:	d812      	bhi.n	80060a0 <HAL_RCC_OscConfig+0x32c>
 800607a:	6a22      	ldr	r2, [r4, #32]
 800607c:	2a20      	cmp	r2, #32
 800607e:	d007      	beq.n	8006090 <HAL_RCC_OscConfig+0x31c>
 8006080:	497a      	ldr	r1, [pc, #488]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006082:	684b      	ldr	r3, [r1, #4]
 8006084:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006088:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800608c:	604b      	str	r3, [r1, #4]
 800608e:	e7d3      	b.n	8006038 <HAL_RCC_OscConfig+0x2c4>
 8006090:	4a76      	ldr	r2, [pc, #472]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006092:	6853      	ldr	r3, [r2, #4]
 8006094:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	e7cb      	b.n	8006038 <HAL_RCC_OscConfig+0x2c4>
 80060a0:	4a72      	ldr	r2, [pc, #456]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80060a2:	68d3      	ldr	r3, [r2, #12]
 80060a4:	6a21      	ldr	r1, [r4, #32]
 80060a6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80060aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060ae:	60d3      	str	r3, [r2, #12]
 80060b0:	e7c2      	b.n	8006038 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80060b2:	4a6e      	ldr	r2, [pc, #440]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060bc:	f7fc fa86 	bl	80025cc <HAL_GetTick>
 80060c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060c2:	4e6a      	ldr	r6, [pc, #424]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060ca:	d0b5      	beq.n	8006038 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060cc:	f7fc fa7e 	bl	80025cc <HAL_GetTick>
 80060d0:	1b40      	subs	r0, r0, r5
 80060d2:	2802      	cmp	r0, #2
 80060d4:	d9f6      	bls.n	80060c4 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80060d6:	2003      	movs	r0, #3
 80060d8:	e170      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060da:	4a64      	ldr	r2, [pc, #400]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80060dc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fc fa72 	bl	80025cc <HAL_GetTick>
 80060e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ea:	4e60      	ldr	r6, [pc, #384]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80060ee:	f013 0f02 	tst.w	r3, #2
 80060f2:	d006      	beq.n	8006102 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f4:	f7fc fa6a 	bl	80025cc <HAL_GetTick>
 80060f8:	1b40      	subs	r0, r0, r5
 80060fa:	2802      	cmp	r0, #2
 80060fc:	d9f6      	bls.n	80060ec <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80060fe:	2003      	movs	r0, #3
 8006100:	e15c      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f013 0f20 	tst.w	r3, #32
 8006108:	d029      	beq.n	800615e <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800610a:	69a3      	ldr	r3, [r4, #24]
 800610c:	b19b      	cbz	r3, 8006136 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610e:	4a57      	ldr	r2, [pc, #348]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006110:	6813      	ldr	r3, [r2, #0]
 8006112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006118:	f7fc fa58 	bl	80025cc <HAL_GetTick>
 800611c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800611e:	4e53      	ldr	r6, [pc, #332]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006126:	d11a      	bne.n	800615e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006128:	f7fc fa50 	bl	80025cc <HAL_GetTick>
 800612c:	1b40      	subs	r0, r0, r5
 800612e:	2802      	cmp	r0, #2
 8006130:	d9f6      	bls.n	8006120 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 8006132:	2003      	movs	r0, #3
 8006134:	e142      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006136:	4a4d      	ldr	r2, [pc, #308]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006140:	f7fc fa44 	bl	80025cc <HAL_GetTick>
 8006144:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006146:	4e49      	ldr	r6, [pc, #292]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800614e:	d006      	beq.n	800615e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006150:	f7fc fa3c 	bl	80025cc <HAL_GetTick>
 8006154:	1b40      	subs	r0, r0, r5
 8006156:	2802      	cmp	r0, #2
 8006158:	d9f6      	bls.n	8006148 <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 800615a:	2003      	movs	r0, #3
 800615c:	e12e      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f013 0f04 	tst.w	r3, #4
 8006164:	d121      	bne.n	80061aa <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006166:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006168:	2a00      	cmp	r2, #0
 800616a:	f000 8126 	beq.w	80063ba <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800616e:	4b3f      	ldr	r3, [pc, #252]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006176:	2b18      	cmp	r3, #24
 8006178:	f000 80ee 	beq.w	8006358 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617c:	2a02      	cmp	r2, #2
 800617e:	d079      	beq.n	8006274 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006180:	4a3a      	ldr	r2, [pc, #232]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fc fa1f 	bl	80025cc <HAL_GetTick>
 800618e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006190:	4d36      	ldr	r5, [pc, #216]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006198:	f000 80dc 	beq.w	8006354 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619c:	f7fc fa16 	bl	80025cc <HAL_GetTick>
 80061a0:	1b00      	subs	r0, r0, r4
 80061a2:	2802      	cmp	r0, #2
 80061a4:	d9f5      	bls.n	8006192 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 80061a6:	2003      	movs	r0, #3
 80061a8:	e108      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 80061aa:	4a31      	ldr	r2, [pc, #196]	; (8006270 <HAL_RCC_OscConfig+0x4fc>)
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061b4:	f7fc fa0a 	bl	80025cc <HAL_GetTick>
 80061b8:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ba:	4e2d      	ldr	r6, [pc, #180]	; (8006270 <HAL_RCC_OscConfig+0x4fc>)
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061c2:	d106      	bne.n	80061d2 <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061c4:	f7fc fa02 	bl	80025cc <HAL_GetTick>
 80061c8:	1b40      	subs	r0, r0, r5
 80061ca:	2864      	cmp	r0, #100	; 0x64
 80061cc:	d9f6      	bls.n	80061bc <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 80061ce:	2003      	movs	r0, #3
 80061d0:	e0f4      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d00a      	beq.n	80061ee <HAL_RCC_OscConfig+0x47a>
 80061d8:	bb0b      	cbnz	r3, 800621e <HAL_RCC_OscConfig+0x4aa>
 80061da:	4b24      	ldr	r3, [pc, #144]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80061dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	671a      	str	r2, [r3, #112]	; 0x70
 80061e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	671a      	str	r2, [r3, #112]	; 0x70
 80061ec:	e004      	b.n	80061f8 <HAL_RCC_OscConfig+0x484>
 80061ee:	4a1f      	ldr	r2, [pc, #124]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	b333      	cbz	r3, 800624a <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80061fc:	f7fc f9e6 	bl	80025cc <HAL_GetTick>
 8006200:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006202:	4e1a      	ldr	r6, [pc, #104]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006204:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006208:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800620a:	f013 0f02 	tst.w	r3, #2
 800620e:	d1aa      	bne.n	8006166 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006210:	f7fc f9dc 	bl	80025cc <HAL_GetTick>
 8006214:	1b40      	subs	r0, r0, r5
 8006216:	42b8      	cmp	r0, r7
 8006218:	d9f6      	bls.n	8006208 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 800621a:	2003      	movs	r0, #3
 800621c:	e0ce      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621e:	2b05      	cmp	r3, #5
 8006220:	d009      	beq.n	8006236 <HAL_RCC_OscConfig+0x4c2>
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006224:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	671a      	str	r2, [r3, #112]	; 0x70
 800622c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	671a      	str	r2, [r3, #112]	; 0x70
 8006234:	e7e0      	b.n	80061f8 <HAL_RCC_OscConfig+0x484>
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
 8006238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800623a:	f042 0204 	orr.w	r2, r2, #4
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
 8006240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	671a      	str	r2, [r3, #112]	; 0x70
 8006248:	e7d6      	b.n	80061f8 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800624a:	f7fc f9bf 	bl	80025cc <HAL_GetTick>
 800624e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006250:	4e06      	ldr	r6, [pc, #24]	; (800626c <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006256:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006258:	f013 0f02 	tst.w	r3, #2
 800625c:	d083      	beq.n	8006166 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fc f9b5 	bl	80025cc <HAL_GetTick>
 8006262:	1b40      	subs	r0, r0, r5
 8006264:	42b8      	cmp	r0, r7
 8006266:	d9f6      	bls.n	8006256 <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 8006268:	2003      	movs	r0, #3
 800626a:	e0a7      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 800626c:	58024400 	.word	0x58024400
 8006270:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8006274:	4a58      	ldr	r2, [pc, #352]	; (80063d8 <HAL_RCC_OscConfig+0x664>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800627c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800627e:	f7fc f9a5 	bl	80025cc <HAL_GetTick>
 8006282:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006284:	4e54      	ldr	r6, [pc, #336]	; (80063d8 <HAL_RCC_OscConfig+0x664>)
 8006286:	6833      	ldr	r3, [r6, #0]
 8006288:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800628c:	d006      	beq.n	800629c <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628e:	f7fc f99d 	bl	80025cc <HAL_GetTick>
 8006292:	1b40      	subs	r0, r0, r5
 8006294:	2802      	cmp	r0, #2
 8006296:	d9f6      	bls.n	8006286 <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 8006298:	2003      	movs	r0, #3
 800629a:	e08f      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800629c:	4b4e      	ldr	r3, [pc, #312]	; (80063d8 <HAL_RCC_OscConfig+0x664>)
 800629e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80062a0:	4a4e      	ldr	r2, [pc, #312]	; (80063dc <HAL_RCC_OscConfig+0x668>)
 80062a2:	400a      	ands	r2, r1
 80062a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80062a6:	430a      	orrs	r2, r1
 80062a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062aa:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
 80062b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062b2:	3a01      	subs	r2, #1
 80062b4:	0252      	lsls	r2, r2, #9
 80062b6:	b292      	uxth	r2, r2
 80062b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062ba:	3901      	subs	r1, #1
 80062bc:	0409      	lsls	r1, r1, #16
 80062be:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80062c2:	430a      	orrs	r2, r1
 80062c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80062c6:	3901      	subs	r1, #1
 80062c8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80062cc:	430a      	orrs	r2, r1
 80062ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80062d0:	3901      	subs	r1, #1
 80062d2:	0609      	lsls	r1, r1, #24
 80062d4:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80062d8:	430a      	orrs	r2, r1
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062e8:	4a3d      	ldr	r2, [pc, #244]	; (80063e0 <HAL_RCC_OscConfig+0x66c>)
 80062ea:	4002      	ands	r2, r0
 80062ec:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80062f0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	f022 020c 	bic.w	r2, r2, #12
 80062f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80062fa:	430a      	orrs	r2, r1
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	f022 0202 	bic.w	r2, r2, #2
 8006304:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006306:	430a      	orrs	r2, r1
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006310:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006330:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006332:	f7fc f94b 	bl	80025cc <HAL_GetTick>
 8006336:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006338:	4d27      	ldr	r5, [pc, #156]	; (80063d8 <HAL_RCC_OscConfig+0x664>)
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006340:	d106      	bne.n	8006350 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006342:	f7fc f943 	bl	80025cc <HAL_GetTick>
 8006346:	1b00      	subs	r0, r0, r4
 8006348:	2802      	cmp	r0, #2
 800634a:	d9f6      	bls.n	800633a <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 800634c:	2003      	movs	r0, #3
 800634e:	e035      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006350:	2000      	movs	r0, #0
 8006352:	e033      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 8006354:	2000      	movs	r0, #0
 8006356:	e031      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006358:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <HAL_RCC_OscConfig+0x664>)
 800635a:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635e:	2a01      	cmp	r2, #1
 8006360:	d02d      	beq.n	80063be <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006362:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006366:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006368:	4282      	cmp	r2, r0
 800636a:	d12a      	bne.n	80063c2 <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800636c:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006370:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006372:	4291      	cmp	r1, r2
 8006374:	d127      	bne.n	80063c6 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006376:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800637a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800637c:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800637e:	4291      	cmp	r1, r2
 8006380:	d123      	bne.n	80063ca <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006382:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8006386:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006388:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800638a:	4291      	cmp	r1, r2
 800638c:	d11f      	bne.n	80063ce <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800638e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8006392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006394:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006396:	4291      	cmp	r1, r2
 8006398:	d11b      	bne.n	80063d2 <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800639a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800639e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80063a0:	3801      	subs	r0, #1
  return HAL_OK;
 80063a2:	1a18      	subs	r0, r3, r0
 80063a4:	bf18      	it	ne
 80063a6:	2001      	movne	r0, #1
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 80063aa:	2001      	movs	r0, #1
}
 80063ac:	4770      	bx	lr
        return HAL_ERROR;
 80063ae:	2001      	movs	r0, #1
 80063b0:	e004      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80063b2:	2001      	movs	r0, #1
 80063b4:	e002      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80063b6:	2001      	movs	r0, #1
 80063b8:	e000      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 80063ba:	2000      	movs	r0, #0
}
 80063bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80063be:	2001      	movs	r0, #1
 80063c0:	e7fc      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063c2:	2001      	movs	r0, #1
 80063c4:	e7fa      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7f8      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063ca:	2001      	movs	r0, #1
 80063cc:	e7f6      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063ce:	2001      	movs	r0, #1
 80063d0:	e7f4      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063d2:	2001      	movs	r0, #1
 80063d4:	e7f2      	b.n	80063bc <HAL_RCC_OscConfig+0x648>
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	fffffc0c 	.word	0xfffffc0c
 80063e0:	ffff0007 	.word	0xffff0007

080063e4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063e4:	4b73      	ldr	r3, [pc, #460]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	f000 80dc 	beq.w	80065aa <HAL_RCC_GetSysClockFreq+0x1c6>
 80063f2:	2b18      	cmp	r3, #24
 80063f4:	d010      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x34>
 80063f6:	b10b      	cbz	r3, 80063fc <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063f8:	486f      	ldr	r0, [pc, #444]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80063fa:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f013 0f20 	tst.w	r3, #32
 8006404:	f000 80d3 	beq.w	80065ae <HAL_RCC_GetSysClockFreq+0x1ca>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006408:	4b6a      	ldr	r3, [pc, #424]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8006410:	4b6a      	ldr	r3, [pc, #424]	; (80065bc <HAL_RCC_GetSysClockFreq+0x1d8>)
 8006412:	fa23 f000 	lsr.w	r0, r3, r0
 8006416:	4770      	bx	lr
{
 8006418:	b430      	push	{r4, r5}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800641a:	4a66      	ldr	r2, [pc, #408]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800641c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800641e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8006420:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006424:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006426:	6b53      	ldr	r3, [r2, #52]	; 0x34

    if (pllm != 0U)
 8006428:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800642c:	f000 809e 	beq.w	800656c <HAL_RCC_GetSysClockFreq+0x188>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006430:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006434:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006438:	fb05 f303 	mul.w	r3, r5, r3
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006444:	f001 0103 	and.w	r1, r1, #3
 8006448:	2901      	cmp	r1, #1
 800644a:	d064      	beq.n	8006516 <HAL_RCC_GetSysClockFreq+0x132>
 800644c:	2902      	cmp	r1, #2
 800644e:	f000 808f 	beq.w	8006570 <HAL_RCC_GetSysClockFreq+0x18c>
 8006452:	b1e1      	cbz	r1, 800648e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006454:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	ee07 3a10 	vmov	s14, r3
 8006460:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006464:	eddf 6a56 	vldr	s13, [pc, #344]	; 80065c0 <HAL_RCC_GetSysClockFreq+0x1dc>
 8006468:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800646c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006478:	ee07 0a10 	vmov	s14, r0
 800647c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006480:	ed9f 6a50 	vldr	s12, [pc, #320]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006484:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006488:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800648c:	e05f      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	f013 0f20 	tst.w	r3, #32
 8006494:	d022      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006496:	6811      	ldr	r1, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006498:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800649a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800649e:	4a47      	ldr	r2, [pc, #284]	; (80065bc <HAL_RCC_GetSysClockFreq+0x1d8>)
 80064a0:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064a2:	ee07 2a10 	vmov	s14, r2
 80064a6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80064aa:	ee07 0a10 	vmov	s14, r0
 80064ae:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80064b2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee06 3a90 	vmov	s13, r3
 80064be:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80064c2:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80065c0 <HAL_RCC_GetSysClockFreq+0x1dc>
 80064c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	e038      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064dc:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e4:	ee07 3a10 	vmov	s14, r3
 80064e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80064ec:	eddf 6a34 	vldr	s13, [pc, #208]	; 80065c0 <HAL_RCC_GetSysClockFreq+0x1dc>
 80064f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006500:	ee07 0a10 	vmov	s14, r0
 8006504:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006508:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80065c8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800650c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006514:	e01b      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006516:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651e:	ee07 3a10 	vmov	s14, r3
 8006522:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006526:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065c0 <HAL_RCC_GetSysClockFreq+0x1dc>
 800652a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800652e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800653a:	ee07 0a10 	vmov	s14, r0
 800653e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006542:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006546:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800654a:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006556:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006558:	ee07 3a10 	vmov	s14, r3
 800655c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006560:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006564:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006568:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800656c:	bc30      	pop	{r4, r5}
 800656e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	ee07 3a10 	vmov	s14, r3
 800657c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006580:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80065c0 <HAL_RCC_GetSysClockFreq+0x1dc>
 8006584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800658c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006594:	ee07 0a10 	vmov	s14, r0
 8006598:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800659c:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80065cc <HAL_RCC_GetSysClockFreq+0x1e8>
 80065a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80065a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 80065a8:	e7d1      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x16a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065aa:	4809      	ldr	r0, [pc, #36]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80065ac:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065ae:	4803      	ldr	r0, [pc, #12]	; (80065bc <HAL_RCC_GetSysClockFreq+0x1d8>)
}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	58024400 	.word	0x58024400
 80065b8:	003d0900 	.word	0x003d0900
 80065bc:	03d09000 	.word	0x03d09000
 80065c0:	39000000 	.word	0x39000000
 80065c4:	4a742400 	.word	0x4a742400
 80065c8:	4c742400 	.word	0x4c742400
 80065cc:	4c371b00 	.word	0x4c371b00
 80065d0:	02dc6c00 	.word	0x02dc6c00

080065d4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f000 80c3 	beq.w	8006760 <HAL_RCC_ClockConfig+0x18c>
{
 80065da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065de:	460d      	mov	r5, r1
 80065e0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065e2:	4b65      	ldr	r3, [pc, #404]	; (8006778 <HAL_RCC_ClockConfig+0x1a4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	428b      	cmp	r3, r1
 80065ec:	d20b      	bcs.n	8006606 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4a62      	ldr	r2, [pc, #392]	; (8006778 <HAL_RCC_ClockConfig+0x1a4>)
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	f023 030f 	bic.w	r3, r3, #15
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	428b      	cmp	r3, r1
 8006602:	f040 80af 	bne.w	8006764 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f013 0f04 	tst.w	r3, #4
 800660c:	d00c      	beq.n	8006628 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800660e:	6922      	ldr	r2, [r4, #16]
 8006610:	4b5a      	ldr	r3, [pc, #360]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006618:	429a      	cmp	r2, r3
 800661a:	d905      	bls.n	8006628 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800661c:	4957      	ldr	r1, [pc, #348]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 800661e:	698b      	ldr	r3, [r1, #24]
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	4313      	orrs	r3, r2
 8006626:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f013 0f08 	tst.w	r3, #8
 800662e:	d00c      	beq.n	800664a <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006630:	6962      	ldr	r2, [r4, #20]
 8006632:	4b52      	ldr	r3, [pc, #328]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800663a:	429a      	cmp	r2, r3
 800663c:	d905      	bls.n	800664a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800663e:	494f      	ldr	r1, [pc, #316]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006640:	69cb      	ldr	r3, [r1, #28]
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	4313      	orrs	r3, r2
 8006648:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f013 0f10 	tst.w	r3, #16
 8006650:	d00c      	beq.n	800666c <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006652:	69a2      	ldr	r2, [r4, #24]
 8006654:	4b49      	ldr	r3, [pc, #292]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800665c:	429a      	cmp	r2, r3
 800665e:	d905      	bls.n	800666c <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006660:	4946      	ldr	r1, [pc, #280]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006662:	69cb      	ldr	r3, [r1, #28]
 8006664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006668:	4313      	orrs	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f013 0f20 	tst.w	r3, #32
 8006672:	d00c      	beq.n	800668e <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006674:	69e2      	ldr	r2, [r4, #28]
 8006676:	4b41      	ldr	r3, [pc, #260]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800667e:	429a      	cmp	r2, r3
 8006680:	d905      	bls.n	800668e <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006682:	493e      	ldr	r1, [pc, #248]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006684:	6a0b      	ldr	r3, [r1, #32]
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	4313      	orrs	r3, r2
 800668c:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f013 0f02 	tst.w	r3, #2
 8006694:	d074      	beq.n	8006780 <HAL_RCC_ClockConfig+0x1ac>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006696:	68e1      	ldr	r1, [r4, #12]
 8006698:	4a38      	ldr	r2, [pc, #224]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 800669a:	6992      	ldr	r2, [r2, #24]
 800669c:	f002 020f 	and.w	r2, r2, #15
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d965      	bls.n	8006770 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a4:	4a35      	ldr	r2, [pc, #212]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 80066a6:	6993      	ldr	r3, [r2, #24]
 80066a8:	f023 030f 	bic.w	r3, r3, #15
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	f013 0f01 	tst.w	r3, #1
 80066b6:	d041      	beq.n	800673c <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066b8:	4a30      	ldr	r2, [pc, #192]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 80066ba:	6993      	ldr	r3, [r2, #24]
 80066bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066c0:	68a1      	ldr	r1, [r4, #8]
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	2a02      	cmp	r2, #2
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066cc:	2a03      	cmp	r2, #3
 80066ce:	d027      	beq.n	8006720 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066d0:	2a01      	cmp	r2, #1
 80066d2:	d02c      	beq.n	800672e <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d4:	4b29      	ldr	r3, [pc, #164]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f013 0f04 	tst.w	r3, #4
 80066dc:	d106      	bne.n	80066ec <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80066de:	2001      	movs	r0, #1
 80066e0:	e0c1      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066e2:	4b26      	ldr	r3, [pc, #152]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80066ea:	d03d      	beq.n	8006768 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ec:	4923      	ldr	r1, [pc, #140]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80066f8:	f7fb ff68 	bl	80025cc <HAL_GetTick>
 80066fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066fe:	4f1f      	ldr	r7, [pc, #124]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006700:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670a:	6862      	ldr	r2, [r4, #4]
 800670c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006710:	d014      	beq.n	800673c <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006712:	f7fb ff5b 	bl	80025cc <HAL_GetTick>
 8006716:	1b80      	subs	r0, r0, r6
 8006718:	4540      	cmp	r0, r8
 800671a:	d9f3      	bls.n	8006704 <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 800671c:	2003      	movs	r0, #3
 800671e:	e0a2      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006728:	d1e0      	bne.n	80066ec <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 800672a:	2001      	movs	r0, #1
 800672c:	e09b      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006736:	d1d9      	bne.n	80066ec <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8006738:	2001      	movs	r0, #1
 800673a:	e094      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	f013 0f02 	tst.w	r3, #2
 8006742:	d020      	beq.n	8006786 <HAL_RCC_ClockConfig+0x1b2>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006744:	68e2      	ldr	r2, [r4, #12]
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	429a      	cmp	r2, r3
 8006750:	d219      	bcs.n	8006786 <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006752:	490a      	ldr	r1, [pc, #40]	; (800677c <HAL_RCC_ClockConfig+0x1a8>)
 8006754:	698b      	ldr	r3, [r1, #24]
 8006756:	f023 030f 	bic.w	r3, r3, #15
 800675a:	4313      	orrs	r3, r2
 800675c:	618b      	str	r3, [r1, #24]
 800675e:	e012      	b.n	8006786 <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8006760:	2001      	movs	r0, #1
}
 8006762:	4770      	bx	lr
      return HAL_ERROR;
 8006764:	2001      	movs	r0, #1
 8006766:	e07e      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
          return HAL_ERROR;
 8006768:	2001      	movs	r0, #1
 800676a:	e07c      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 800676c:	2001      	movs	r0, #1
 800676e:	e07a      	b.n	8006866 <HAL_RCC_ClockConfig+0x292>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006770:	f013 0f01 	tst.w	r3, #1
 8006774:	d1a0      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe4>
 8006776:	e7e5      	b.n	8006744 <HAL_RCC_ClockConfig+0x170>
 8006778:	52002000 	.word	0x52002000
 800677c:	58024400 	.word	0x58024400
 8006780:	f013 0f01 	tst.w	r3, #1
 8006784:	d198      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <HAL_RCC_ClockConfig+0x298>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	42ab      	cmp	r3, r5
 8006790:	d90a      	bls.n	80067a8 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4a36      	ldr	r2, [pc, #216]	; (800686c <HAL_RCC_ClockConfig+0x298>)
 8006794:	6813      	ldr	r3, [r2, #0]
 8006796:	f023 030f 	bic.w	r3, r3, #15
 800679a:	432b      	orrs	r3, r5
 800679c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	d1e1      	bne.n	800676c <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	f013 0f04 	tst.w	r3, #4
 80067ae:	d00c      	beq.n	80067ca <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d205      	bcs.n	80067ca <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067be:	492c      	ldr	r1, [pc, #176]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 80067c0:	698b      	ldr	r3, [r1, #24]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	4313      	orrs	r3, r2
 80067c8:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f013 0f08 	tst.w	r3, #8
 80067d0:	d00c      	beq.n	80067ec <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067d2:	6962      	ldr	r2, [r4, #20]
 80067d4:	4b26      	ldr	r3, [pc, #152]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067dc:	429a      	cmp	r2, r3
 80067de:	d205      	bcs.n	80067ec <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067e0:	4923      	ldr	r1, [pc, #140]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 80067e2:	69cb      	ldr	r3, [r1, #28]
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	f013 0f10 	tst.w	r3, #16
 80067f2:	d00c      	beq.n	800680e <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f4:	69a2      	ldr	r2, [r4, #24]
 80067f6:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fe:	429a      	cmp	r2, r3
 8006800:	d205      	bcs.n	800680e <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006802:	491b      	ldr	r1, [pc, #108]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 8006804:	69cb      	ldr	r3, [r1, #28]
 8006806:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800680a:	4313      	orrs	r3, r2
 800680c:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f013 0f20 	tst.w	r3, #32
 8006814:	d00c      	beq.n	8006830 <HAL_RCC_ClockConfig+0x25c>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006816:	69e2      	ldr	r2, [r4, #28]
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006820:	429a      	cmp	r2, r3
 8006822:	d205      	bcs.n	8006830 <HAL_RCC_ClockConfig+0x25c>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006824:	4912      	ldr	r1, [pc, #72]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 8006826:	6a0b      	ldr	r3, [r1, #32]
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	4313      	orrs	r3, r2
 800682e:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006830:	f7ff fdd8 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 8006834:	490e      	ldr	r1, [pc, #56]	; (8006870 <HAL_RCC_ClockConfig+0x29c>)
 8006836:	698b      	ldr	r3, [r1, #24]
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <HAL_RCC_ClockConfig+0x2a0>)
 800683a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800683e:	5cd3      	ldrb	r3, [r2, r3]
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006846:	698b      	ldr	r3, [r1, #24]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	5cd3      	ldrb	r3, [r2, r3]
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	fa20 f303 	lsr.w	r3, r0, r3
 8006856:	4a08      	ldr	r2, [pc, #32]	; (8006878 <HAL_RCC_ClockConfig+0x2a4>)
 8006858:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800685a:	4b08      	ldr	r3, [pc, #32]	; (800687c <HAL_RCC_ClockConfig+0x2a8>)
 800685c:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <HAL_RCC_ClockConfig+0x2ac>)
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f7fa fc6b 	bl	800113c <HAL_InitTick>
}
 8006866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686a:	bf00      	nop
 800686c:	52002000 	.word	0x52002000
 8006870:	58024400 	.word	0x58024400
 8006874:	08010f68 	.word	0x08010f68
 8006878:	24000004 	.word	0x24000004
 800687c:	24000000 	.word	0x24000000
 8006880:	24000014 	.word	0x24000014

08006884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006884:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006886:	f7ff fdad 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 800688a:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x34>)
 800688c:	6993      	ldr	r3, [r2, #24]
 800688e:	490b      	ldr	r1, [pc, #44]	; (80068bc <HAL_RCC_GetHCLKFreq+0x38>)
 8006890:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006894:	5ccb      	ldrb	r3, [r1, r3]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800689e:	6992      	ldr	r2, [r2, #24]
 80068a0:	f002 020f 	and.w	r2, r2, #15
 80068a4:	5c88      	ldrb	r0, [r1, r2]
 80068a6:	f000 001f 	and.w	r0, r0, #31
 80068aa:	fa23 f000 	lsr.w	r0, r3, r0
 80068ae:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80068b0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068b2:	4a04      	ldr	r2, [pc, #16]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x40>)
 80068b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80068b6:	bd08      	pop	{r3, pc}
 80068b8:	58024400 	.word	0x58024400
 80068bc:	08010f68 	.word	0x08010f68
 80068c0:	24000004 	.word	0x24000004
 80068c4:	24000000 	.word	0x24000000

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068ca:	f7ff ffdb 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80068d6:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d8:	5cd3      	ldrb	r3, [r2, r3]
 80068da:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068de:	40d8      	lsrs	r0, r3
 80068e0:	bd08      	pop	{r3, pc}
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
 80068e8:	08010f68 	.word	0x08010f68

080068ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068ee:	f7ff ffc9 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80068fa:	4a04      	ldr	r2, [pc, #16]	; (800690c <HAL_RCC_GetPCLK2Freq+0x20>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006902:	40d8      	lsrs	r0, r3
 8006904:	bd08      	pop	{r3, pc}
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	08010f68 	.word	0x08010f68

08006910 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006910:	233f      	movs	r3, #63	; 0x3f
 8006912:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_RCC_GetClockConfig+0x4c>)
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	f002 0207 	and.w	r2, r2, #7
 800691c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006924:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	f002 020f 	and.w	r2, r2, #15
 800692c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006934:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800693c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006944:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800694c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800694e:	4b04      	ldr	r3, [pc, #16]	; (8006960 <HAL_RCC_GetClockConfig+0x50>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	600b      	str	r3, [r1, #0]
}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	52002000 	.word	0x52002000

08006964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006966:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d074      	beq.n	8006a5c <RCCEx_PLL2_Config+0xf8>
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006976:	4a3a      	ldr	r2, [pc, #232]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006978:	6813      	ldr	r3, [r2, #0]
 800697a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800697e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006980:	f7fb fe24 	bl	80025cc <HAL_GetTick>
 8006984:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006986:	4d36      	ldr	r5, [pc, #216]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800698e:	d006      	beq.n	800699e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006990:	f7fb fe1c 	bl	80025cc <HAL_GetTick>
 8006994:	1b03      	subs	r3, r0, r4
 8006996:	2b02      	cmp	r3, #2
 8006998:	d9f6      	bls.n	8006988 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 800699a:	2003      	movs	r0, #3
 800699c:	e05f      	b.n	8006a5e <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 80069a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a2:	6831      	ldr	r1, [r6, #0]
 80069a4:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80069a8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80069ac:	629a      	str	r2, [r3, #40]	; 0x28
 80069ae:	68b2      	ldr	r2, [r6, #8]
 80069b0:	3a01      	subs	r2, #1
 80069b2:	0252      	lsls	r2, r2, #9
 80069b4:	b292      	uxth	r2, r2
 80069b6:	68f1      	ldr	r1, [r6, #12]
 80069b8:	3901      	subs	r1, #1
 80069ba:	0409      	lsls	r1, r1, #16
 80069bc:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80069c0:	430a      	orrs	r2, r1
 80069c2:	6871      	ldr	r1, [r6, #4]
 80069c4:	3901      	subs	r1, #1
 80069c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80069ca:	430a      	orrs	r2, r1
 80069cc:	6931      	ldr	r1, [r6, #16]
 80069ce:	3901      	subs	r1, #1
 80069d0:	0609      	lsls	r1, r1, #24
 80069d2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80069d6:	430a      	orrs	r2, r1
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069e0:	6971      	ldr	r1, [r6, #20]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	f022 0220 	bic.w	r2, r2, #32
 80069ec:	69b1      	ldr	r1, [r6, #24]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	f022 0210 	bic.w	r2, r2, #16
 80069f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80069fc:	69f1      	ldr	r1, [r6, #28]
 80069fe:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <RCCEx_PLL2_Config+0x100>)
 8006a00:	4002      	ands	r2, r0
 8006a02:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	f042 0210 	orr.w	r2, r2, #16
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a10:	b9c7      	cbnz	r7, 8006a44 <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a12:	461a      	mov	r2, r3
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a1c:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006a1e:	6813      	ldr	r3, [r2, #0]
 8006a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a26:	f7fb fdd1 	bl	80025cc <HAL_GetTick>
 8006a2a:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a2c:	4d0c      	ldr	r5, [pc, #48]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006a34:	d110      	bne.n	8006a58 <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a36:	f7fb fdc9 	bl	80025cc <HAL_GetTick>
 8006a3a:	1b00      	subs	r0, r0, r4
 8006a3c:	2802      	cmp	r0, #2
 8006a3e:	d9f6      	bls.n	8006a2e <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8006a40:	2003      	movs	r0, #3
 8006a42:	e00c      	b.n	8006a5e <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a44:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a46:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <RCCEx_PLL2_Config+0xfc>)
 8006a48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a4a:	bf0c      	ite	eq
 8006a4c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a50:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a56:	e7e1      	b.n	8006a1c <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e000      	b.n	8006a5e <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8006a5c:	2001      	movs	r0, #1
}
 8006a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a60:	58024400 	.word	0x58024400
 8006a64:	ffff0007 	.word	0xffff0007

08006a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a6a:	4b3e      	ldr	r3, [pc, #248]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d074      	beq.n	8006b60 <RCCEx_PLL3_Config+0xf8>
 8006a76:	4606      	mov	r6, r0
 8006a78:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a7a:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006a7c:	6813      	ldr	r3, [r2, #0]
 8006a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fb fda2 	bl	80025cc <HAL_GetTick>
 8006a88:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a8a:	4d36      	ldr	r5, [pc, #216]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006a92:	d006      	beq.n	8006aa2 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a94:	f7fb fd9a 	bl	80025cc <HAL_GetTick>
 8006a98:	1b03      	subs	r3, r0, r4
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d9f6      	bls.n	8006a8c <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	e05f      	b.n	8006b62 <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006aa2:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8006aac:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8006ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ab2:	68b2      	ldr	r2, [r6, #8]
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	0252      	lsls	r2, r2, #9
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	68f1      	ldr	r1, [r6, #12]
 8006abc:	3901      	subs	r1, #1
 8006abe:	0409      	lsls	r1, r1, #16
 8006ac0:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	6871      	ldr	r1, [r6, #4]
 8006ac8:	3901      	subs	r1, #1
 8006aca:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	6931      	ldr	r1, [r6, #16]
 8006ad2:	3901      	subs	r1, #1
 8006ad4:	0609      	lsls	r1, r1, #24
 8006ad6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006ada:	430a      	orrs	r2, r1
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ae4:	6971      	ldr	r1, [r6, #20]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006af0:	69b1      	ldr	r1, [r6, #24]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006afe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006b00:	69f1      	ldr	r1, [r6, #28]
 8006b02:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <RCCEx_PLL3_Config+0x100>)
 8006b04:	4002      	ands	r2, r0
 8006b06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b14:	b9c7      	cbnz	r7, 8006b48 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b16:	461a      	mov	r2, r3
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b20:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2a:	f7fb fd4f 	bl	80025cc <HAL_GetTick>
 8006b2e:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b30:	4d0c      	ldr	r5, [pc, #48]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006b38:	d110      	bne.n	8006b5c <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b3a:	f7fb fd47 	bl	80025cc <HAL_GetTick>
 8006b3e:	1b00      	subs	r0, r0, r4
 8006b40:	2802      	cmp	r0, #2
 8006b42:	d9f6      	bls.n	8006b32 <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 8006b44:	2003      	movs	r0, #3
 8006b46:	e00c      	b.n	8006b62 <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b48:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b4a:	4a06      	ldr	r2, [pc, #24]	; (8006b64 <RCCEx_PLL3_Config+0xfc>)
 8006b4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b4e:	bf0c      	ite	eq
 8006b50:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b54:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006b58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b5a:	e7e1      	b.n	8006b20 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e000      	b.n	8006b62 <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8006b60:	2001      	movs	r0, #1
}
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	58024400 	.word	0x58024400
 8006b68:	ffff0007 	.word	0xffff0007

08006b6c <HAL_RCCEx_PeriphCLKConfig>:
{
 8006b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b70:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b72:	6803      	ldr	r3, [r0, #0]
 8006b74:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006b78:	d02b      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b7a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b80:	d021      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8006b82:	d80c      	bhi.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b84:	b1cb      	cbz	r3, 8006bba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	3004      	adds	r0, #4
 8006b90:	f7ff fee8 	bl	8006964 <RCCEx_PLL2_Config>
 8006b94:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8006b96:	b9ee      	cbnz	r6, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006b98:	e004      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b9a:	2601      	movs	r6, #1
 8006b9c:	e01a      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ba2:	d108      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ba4:	4a96      	ldr	r2, [pc, #600]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006ba6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ba8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bac:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6513      	str	r3, [r2, #80]	; 0x50
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	e00e      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006bb6:	2601      	movs	r6, #1
 8006bb8:	e00c      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bba:	4a91      	ldr	r2, [pc, #580]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006bbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006bc4:	e7ee      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	3024      	adds	r0, #36	; 0x24
 8006bca:	f7ff ff4d 	bl	8006a68 <RCCEx_PLL3_Config>
 8006bce:	4606      	mov	r6, r0
      break;
 8006bd0:	e7e1      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bd2:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bda:	d025      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d834      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8006be2:	e8df f003 	tbb	[pc, r3]
 8006be6:	0a03      	.short	0x0a03
 8006be8:	1710      	.short	0x1710
 8006bea:	17          	.byte	0x17
 8006beb:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bec:	4a84      	ldr	r2, [pc, #528]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006bf6:	4635      	mov	r5, r6
 8006bf8:	e00d      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	1d20      	adds	r0, r4, #4
 8006bfe:	f7ff feb1 	bl	8006964 <RCCEx_PLL2_Config>
 8006c02:	4605      	mov	r5, r0
      break;
 8006c04:	e007      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c06:	2100      	movs	r1, #0
 8006c08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c0c:	f7ff ff2c 	bl	8006a68 <RCCEx_PLL3_Config>
 8006c10:	4605      	mov	r5, r0
      break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c14:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8006c16:	b9e5      	cbnz	r5, 8006c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c18:	4a79      	ldr	r2, [pc, #484]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006c1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6513      	str	r3, [r2, #80]	; 0x50
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006c28:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c30:	d021      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d03b      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8006c38:	d810      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8006c3a:	b39b      	cbz	r3, 8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d10a      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c40:	2100      	movs	r1, #0
 8006c42:	1d20      	adds	r0, r4, #4
 8006c44:	f7ff fe8e 	bl	8006964 <RCCEx_PLL2_Config>
 8006c48:	4605      	mov	r5, r0
      break;
 8006c4a:	e00c      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c4c:	2601      	movs	r6, #1
 8006c4e:	4635      	mov	r5, r6
 8006c50:	e7eb      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006c52:	462e      	mov	r6, r5
 8006c54:	e7e9      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c56:	2601      	movs	r6, #1
 8006c58:	4635      	mov	r5, r6
 8006c5a:	e00c      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8006c5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5e:	d002      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c64:	d11b      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8006c66:	bb55      	cbnz	r5, 8006cbe <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c68:	4a65      	ldr	r2, [pc, #404]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006c6a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006c6c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8006c70:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c72:	430b      	orrs	r3, r1
 8006c74:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c7c:	d045      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006c7e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8006c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c86:	d038      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006c88:	d81e      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006c8a:	b383      	cbz	r3, 8006cee <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c90:	d117      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c92:	2100      	movs	r1, #0
 8006c94:	1d20      	adds	r0, r4, #4
 8006c96:	f7ff fe65 	bl	8006964 <RCCEx_PLL2_Config>
 8006c9a:	4605      	mov	r5, r0
      break;
 8006c9c:	e01a      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c9e:	2601      	movs	r6, #1
 8006ca0:	4635      	mov	r5, r6
 8006ca2:	e7e8      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca4:	4a56      	ldr	r2, [pc, #344]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006ca6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006cae:	e7da      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006cb6:	f7ff fed7 	bl	8006a68 <RCCEx_PLL3_Config>
 8006cba:	4605      	mov	r5, r0
      break;
 8006cbc:	e7d3      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006cbe:	462e      	mov	r6, r5
 8006cc0:	e7d9      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006cc2:	2601      	movs	r6, #1
 8006cc4:	4635      	mov	r5, r6
 8006cc6:	e020      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ccc:	d002      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8006cd4:	b9c5      	cbnz	r5, 8006d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006cd6:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006cd8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006cda:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8006cde:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ce6:	e010      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ce8:	2601      	movs	r6, #1
 8006cea:	4635      	mov	r5, r6
 8006cec:	e00d      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cee:	4a44      	ldr	r2, [pc, #272]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006cf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006cf8:	e7ec      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006d00:	f7ff feb2 	bl	8006a68 <RCCEx_PLL3_Config>
 8006d04:	4605      	mov	r5, r0
      break;
 8006d06:	e7e5      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006d08:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006d10:	d023      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d12:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d1a:	d041      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d1c:	d80d      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d038      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d28:	2100      	movs	r1, #0
 8006d2a:	1d20      	adds	r0, r4, #4
 8006d2c:	f7ff fe1a 	bl	8006964 <RCCEx_PLL2_Config>
 8006d30:	4605      	mov	r5, r0
      break;
 8006d32:	e008      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d34:	2601      	movs	r6, #1
 8006d36:	4635      	mov	r5, r6
 8006d38:	e00f      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d3e:	d002      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8006d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d44:	d123      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x222>
    if(ret == HAL_OK)
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	d131      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d4a:	4a2d      	ldr	r2, [pc, #180]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006d4c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006d52:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8006d56:	430b      	orrs	r3, r1
 8006d58:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d60:	d02e      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->QspiClockSelection)
 8006d62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d03f      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006d68:	d826      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006d6a:	b133      	cbz	r3, 8006d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d120      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4a23      	ldr	r2, [pc, #140]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006d72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	d13a      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d7e:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006d80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006d82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d8c:	e018      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d8e:	2601      	movs	r6, #1
 8006d90:	4635      	mov	r5, r6
 8006d92:	e7e2      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d94:	4a1a      	ldr	r2, [pc, #104]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006d96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006d9e:	e7d2      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006da0:	2100      	movs	r1, #0
 8006da2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006da6:	f7ff fe5f 	bl	8006a68 <RCCEx_PLL3_Config>
 8006daa:	4605      	mov	r5, r0
      break;
 8006dac:	e7cb      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8006dae:	462e      	mov	r6, r5
 8006db0:	e7d3      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->QspiClockSelection)
 8006db2:	2601      	movs	r6, #1
 8006db4:	4635      	mov	r5, r6
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006db8:	2b30      	cmp	r3, #48	; 0x30
 8006dba:	d0de      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006dbc:	2601      	movs	r6, #1
 8006dbe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006dc6:	d02c      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006dc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dce:	d04d      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006dd0:	d818      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d044      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	d10d      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	1d20      	adds	r0, r4, #4
 8006de0:	f7ff fdc0 	bl	8006964 <RCCEx_PLL2_Config>
 8006de4:	4605      	mov	r5, r0
      break;
 8006de6:	e013      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006de8:	2102      	movs	r1, #2
 8006dea:	1d20      	adds	r0, r4, #4
 8006dec:	f7ff fdba 	bl	8006964 <RCCEx_PLL2_Config>
 8006df0:	4605      	mov	r5, r0
      break;
 8006df2:	e7c2      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006df4:	462e      	mov	r6, r5
 8006df6:	e7e3      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006df8:	2601      	movs	r6, #1
 8006dfa:	4635      	mov	r5, r6
 8006dfc:	e011      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006dfe:	bf00      	nop
 8006e00:	58024400 	.word	0x58024400
 8006e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e08:	d002      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e0e:	d124      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	d132      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e14:	4a80      	ldr	r2, [pc, #512]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e16:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006e28:	d036      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e30:	d050      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e32:	d827      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006e34:	b13b      	cbz	r3, 8006e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3a:	d120      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	1d20      	adds	r0, r4, #4
 8006e40:	f7ff fd90 	bl	8006964 <RCCEx_PLL2_Config>
 8006e44:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	d14b      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e4a:	4a73      	ldr	r2, [pc, #460]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006e4e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006e52:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6513      	str	r3, [r2, #80]	; 0x50
 8006e58:	e01e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e5a:	2601      	movs	r6, #1
 8006e5c:	4635      	mov	r5, r6
 8006e5e:	e7e0      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4a6d      	ldr	r2, [pc, #436]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e68:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006e6a:	e7d1      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006e72:	f7ff fdf9 	bl	8006a68 <RCCEx_PLL3_Config>
 8006e76:	4605      	mov	r5, r0
      break;
 8006e78:	e7ca      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006e7a:	462e      	mov	r6, r5
 8006e7c:	e7d1      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e7e:	2601      	movs	r6, #1
 8006e80:	4635      	mov	r5, r6
 8006e82:	e009      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e88:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006e8c:	d0db      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e92:	d0d8      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e94:	2601      	movs	r6, #1
 8006e96:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e9e:	d02f      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ea0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea8:	d043      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006eaa:	d81f      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006eac:	b13b      	cbz	r3, 8006ebe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb2:	d118      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	1d20      	adds	r0, r4, #4
 8006eb8:	f7ff fd54 	bl	8006964 <RCCEx_PLL2_Config>
 8006ebc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	d13e      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ec2:	4a55      	ldr	r2, [pc, #340]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006ec6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006eca:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ed2:	e015      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006eda:	f7ff fdc5 	bl	8006a68 <RCCEx_PLL3_Config>
 8006ede:	4605      	mov	r5, r0
      break;
 8006ee0:	e7b1      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ee2:	462e      	mov	r6, r5
 8006ee4:	e7d8      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ee6:	2601      	movs	r6, #1
 8006ee8:	4635      	mov	r5, r6
 8006eea:	e009      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006eec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ef0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006ef4:	d0e3      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006efa:	d0e0      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006efc:	2601      	movs	r6, #1
 8006efe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006f06:	d009      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8006f08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f0e:	d019      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f14:	d024      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006f16:	b1d3      	cbz	r3, 8006f4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006f18:	2601      	movs	r6, #1
 8006f1a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006f22:	d032      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->FmcClockSelection)
 8006f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d859      	bhi.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x472>
 8006f2a:	e8df f003 	tbb	[pc, r3]
 8006f2e:	2126      	.short	0x2126
 8006f30:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f32:	2101      	movs	r1, #1
 8006f34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f38:	f7ff fd96 	bl	8006a68 <RCCEx_PLL3_Config>
 8006f3c:	4605      	mov	r5, r0
      break;
 8006f3e:	e7be      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006f40:	462e      	mov	r6, r5
 8006f42:	e7dd      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f44:	4a34      	ldr	r2, [pc, #208]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006f4e:	b96d      	cbnz	r5, 8006f6c <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f50:	4a31      	ldr	r2, [pc, #196]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f52:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006f54:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006f58:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	6513      	str	r3, [r2, #80]	; 0x50
 8006f5e:	e7dd      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f60:	2101      	movs	r1, #1
 8006f62:	1d20      	adds	r0, r4, #4
 8006f64:	f7ff fcfe 	bl	8006964 <RCCEx_PLL2_Config>
 8006f68:	4605      	mov	r5, r0
      break;
 8006f6a:	e7f0      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006f6c:	462e      	mov	r6, r5
 8006f6e:	e7d5      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f70:	4a29      	ldr	r2, [pc, #164]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006f7a:	bb9d      	cbnz	r5, 8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f7e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f86:	430b      	orrs	r3, r1
 8006f88:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006f90:	d12a      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f013 0f01 	tst.w	r3, #1
 8006f98:	f000 80aa 	beq.w	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006f9e:	2b28      	cmp	r3, #40	; 0x28
 8006fa0:	f200 80a4 	bhi.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x580>
 8006fa4:	e8df f003 	tbb	[pc, r3]
 8006fa8:	a2a2a292 	.word	0xa2a2a292
 8006fac:	a2a2a2a2 	.word	0xa2a2a2a2
 8006fb0:	a2a2a28d 	.word	0xa2a2a28d
 8006fb4:	a2a2a2a2 	.word	0xa2a2a2a2
 8006fb8:	a2a2a29b 	.word	0xa2a2a29b
 8006fbc:	a2a2a2a2 	.word	0xa2a2a2a2
 8006fc0:	a2a2a292 	.word	0xa2a2a292
 8006fc4:	a2a2a2a2 	.word	0xa2a2a2a2
 8006fc8:	a2a2a292 	.word	0xa2a2a292
 8006fcc:	a2a2a2a2 	.word	0xa2a2a2a2
 8006fd0:	92          	.byte	0x92
 8006fd1:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	1d20      	adds	r0, r4, #4
 8006fd6:	f7ff fcc5 	bl	8006964 <RCCEx_PLL2_Config>
 8006fda:	4605      	mov	r5, r0
      break;
 8006fdc:	e7cd      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 8006fde:	2601      	movs	r6, #1
 8006fe0:	4635      	mov	r5, r6
 8006fe2:	e7d2      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006fe4:	462e      	mov	r6, r5
 8006fe6:	e7d0      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006ff2:	f7fb faeb 	bl	80025cc <HAL_GetTick>
 8006ff6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800701c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8007000:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007004:	d10c      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007006:	f7fb fae1 	bl	80025cc <HAL_GetTick>
 800700a:	1bc0      	subs	r0, r0, r7
 800700c:	2864      	cmp	r0, #100	; 0x64
 800700e:	d9f5      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 8007010:	2603      	movs	r6, #3
 8007012:	4635      	mov	r5, r6
 8007014:	e7bd      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	58024800 	.word	0x58024800
    if(ret == HAL_OK)
 8007020:	2d00      	cmp	r5, #0
 8007022:	d14c      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007024:	4b9f      	ldr	r3, [pc, #636]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800702c:	4053      	eors	r3, r2
 800702e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007032:	d00c      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007034:	4b9b      	ldr	r3, [pc, #620]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8007036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007038:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800703c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800703e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007042:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007044:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007046:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800704a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800704c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800704e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007056:	d014      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007058:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800705c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007060:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007064:	d021      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8007066:	4a8f      	ldr	r2, [pc, #572]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8007068:	6913      	ldr	r3, [r2, #16]
 800706a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800706e:	6113      	str	r3, [r2, #16]
 8007070:	4a8c      	ldr	r2, [pc, #560]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8007072:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007074:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707c:	430b      	orrs	r3, r1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	e787      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x426>
        tickstart = HAL_GetTick();
 8007082:	f7fb faa3 	bl	80025cc <HAL_GetTick>
 8007086:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007088:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007090:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007094:	f013 0f02 	tst.w	r3, #2
 8007098:	d1de      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709a:	f7fb fa97 	bl	80025cc <HAL_GetTick>
 800709e:	1bc0      	subs	r0, r0, r7
 80070a0:	4548      	cmp	r0, r9
 80070a2:	d9f5      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x524>
            ret = HAL_TIMEOUT;
 80070a4:	2603      	movs	r6, #3
 80070a6:	4635      	mov	r5, r6
 80070a8:	e773      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x426>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070aa:	487e      	ldr	r0, [pc, #504]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80070ac:	6901      	ldr	r1, [r0, #16]
 80070ae:	4a7e      	ldr	r2, [pc, #504]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070b0:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 80070b4:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 80070b8:	4313      	orrs	r3, r2
 80070ba:	6103      	str	r3, [r0, #16]
 80070bc:	e7d8      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80070be:	462e      	mov	r6, r5
 80070c0:	e767      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c2:	2101      	movs	r1, #1
 80070c4:	1d20      	adds	r0, r4, #4
 80070c6:	f7ff fc4d 	bl	8006964 <RCCEx_PLL2_Config>
 80070ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80070cc:	b9e5      	cbnz	r5, 8007108 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070ce:	4a75      	ldr	r2, [pc, #468]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80070d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070d2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80070d6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80070d8:	430b      	orrs	r3, r1
 80070da:	6553      	str	r3, [r2, #84]	; 0x54
 80070dc:	e008      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070de:	2101      	movs	r1, #1
 80070e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80070e4:	f7ff fcc0 	bl	8006a68 <RCCEx_PLL3_Config>
 80070e8:	4605      	mov	r5, r0
      break;
 80070ea:	e7ef      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 80070ec:	2601      	movs	r6, #1
 80070ee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	f013 0f02 	tst.w	r3, #2
 80070f6:	d016      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80070f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d827      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 80070fe:	e8df f003 	tbb	[pc, r3]
 8007102:	050a      	.short	0x050a
 8007104:	0a0a0a1f 	.word	0x0a0a0a1f
 8007108:	462e      	mov	r6, r5
 800710a:	e7f1      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800710c:	2101      	movs	r1, #1
 800710e:	1d20      	adds	r0, r4, #4
 8007110:	f7ff fc28 	bl	8006964 <RCCEx_PLL2_Config>
 8007114:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007116:	b9ed      	cbnz	r5, 8007154 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007118:	4a62      	ldr	r2, [pc, #392]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800711a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800711c:	f023 0307 	bic.w	r3, r3, #7
 8007120:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007122:	430b      	orrs	r3, r1
 8007124:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f013 0f04 	tst.w	r3, #4
 800712c:	d022      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800712e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007132:	2b05      	cmp	r3, #5
 8007134:	d843      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007136:	e8df f003 	tbb	[pc, r3]
 800713a:	0f14      	.short	0x0f14
 800713c:	1414143b 	.word	0x1414143b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007140:	2101      	movs	r1, #1
 8007142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007146:	f7ff fc8f 	bl	8006a68 <RCCEx_PLL3_Config>
 800714a:	4605      	mov	r5, r0
      break;
 800714c:	e7e3      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800714e:	2601      	movs	r6, #1
 8007150:	4635      	mov	r5, r6
 8007152:	e7e8      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8007154:	462e      	mov	r6, r5
 8007156:	e7e6      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007158:	2101      	movs	r1, #1
 800715a:	1d20      	adds	r0, r4, #4
 800715c:	f7ff fc02 	bl	8006964 <RCCEx_PLL2_Config>
 8007160:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007162:	bb7d      	cbnz	r5, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007164:	4a4f      	ldr	r2, [pc, #316]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8007166:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007170:	430b      	orrs	r3, r1
 8007172:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	f013 0f20 	tst.w	r3, #32
 800717a:	d032      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800717c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007184:	d04b      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007186:	d822      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007188:	b13b      	cbz	r3, 800719a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718e:	d11b      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007190:	2100      	movs	r1, #0
 8007192:	1d20      	adds	r0, r4, #4
 8007194:	f7ff fbe6 	bl	8006964 <RCCEx_PLL2_Config>
 8007198:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800719a:	2d00      	cmp	r5, #0
 800719c:	d146      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800719e:	4a41      	ldr	r2, [pc, #260]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80071a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071a2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80071a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80071aa:	430b      	orrs	r3, r1
 80071ac:	6553      	str	r3, [r2, #84]	; 0x54
 80071ae:	e018      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071b0:	2101      	movs	r1, #1
 80071b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071b6:	f7ff fc57 	bl	8006a68 <RCCEx_PLL3_Config>
 80071ba:	4605      	mov	r5, r0
      break;
 80071bc:	e7d1      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80071be:	2601      	movs	r6, #1
 80071c0:	4635      	mov	r5, r6
 80071c2:	e7d7      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80071c4:	462e      	mov	r6, r5
 80071c6:	e7d5      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80071c8:	2601      	movs	r6, #1
 80071ca:	4635      	mov	r5, r6
 80071cc:	e009      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80071ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071d2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80071d6:	d0e0      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80071d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071dc:	d0dd      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80071de:	2601      	movs	r6, #1
 80071e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071e8:	d02f      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80071ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80071ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f2:	d04a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80071f4:	d81f      	bhi.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 80071f6:	b13b      	cbz	r3, 8007208 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80071f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fc:	d118      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071fe:	2100      	movs	r1, #0
 8007200:	1d20      	adds	r0, r4, #4
 8007202:	f7ff fbaf 	bl	8006964 <RCCEx_PLL2_Config>
 8007206:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007208:	2d00      	cmp	r5, #0
 800720a:	d145      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800720c:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800720e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007210:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007214:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007218:	430b      	orrs	r3, r1
 800721a:	6593      	str	r3, [r2, #88]	; 0x58
 800721c:	e015      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800721e:	2102      	movs	r1, #2
 8007220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007224:	f7ff fc20 	bl	8006a68 <RCCEx_PLL3_Config>
 8007228:	4605      	mov	r5, r0
      break;
 800722a:	e7b6      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800722c:	462e      	mov	r6, r5
 800722e:	e7d8      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007230:	2601      	movs	r6, #1
 8007232:	4635      	mov	r5, r6
 8007234:	e009      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8007236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800723a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800723e:	d0e3      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8007240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007244:	d0e0      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8007246:	2601      	movs	r6, #1
 8007248:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007250:	d036      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007252:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725a:	f000 80e6 	beq.w	800742a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800725e:	d825      	bhi.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007260:	b13b      	cbz	r3, 8007272 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007266:	d119      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x730>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007268:	2100      	movs	r1, #0
 800726a:	1d20      	adds	r0, r4, #4
 800726c:	f7ff fb7a 	bl	8006964 <RCCEx_PLL2_Config>
 8007270:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007272:	2d00      	cmp	r5, #0
 8007274:	f040 80e0 	bne.w	8007438 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007278:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800727a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800727c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007280:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007284:	430b      	orrs	r3, r1
 8007286:	6593      	str	r3, [r2, #88]	; 0x58
 8007288:	e01a      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800728a:	2102      	movs	r1, #2
 800728c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007290:	f7ff fbea 	bl	8006a68 <RCCEx_PLL3_Config>
 8007294:	4605      	mov	r5, r0
      break;
 8007296:	e7b7      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8007298:	462e      	mov	r6, r5
 800729a:	e7d6      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800729c:	2601      	movs	r6, #1
 800729e:	4635      	mov	r5, r6
 80072a0:	e00e      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80072a2:	bf00      	nop
 80072a4:	58024400 	.word	0x58024400
 80072a8:	00ffffcf 	.word	0x00ffffcf
 80072ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80072b4:	d0dd      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80072b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072ba:	d0da      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80072bc:	2601      	movs	r6, #1
 80072be:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	f013 0f08 	tst.w	r3, #8
 80072c6:	d00d      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80072c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d0:	f000 80b4 	beq.w	800743c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80072d4:	4a97      	ldr	r2, [pc, #604]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80072d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072dc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	f013 0f10 	tst.w	r3, #16
 80072ea:	d00d      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80072ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f4:	f000 80ab 	beq.w	800744e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072f8:	4a8e      	ldr	r2, [pc, #568]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80072fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80072fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007300:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007304:	430b      	orrs	r3, r1
 8007306:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800730e:	d00e      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8007310:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007318:	f000 80b1 	beq.w	800747e <HAL_RCCEx_PeriphCLKConfig+0x912>
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007320:	f000 80a3 	beq.w	800746a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 809b 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800732a:	2601      	movs	r6, #1
 800732c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007334:	d00f      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch(PeriphClkInit->UsbClockSelection)
 8007336:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800733a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800733e:	f000 80b6 	beq.w	80074ae <HAL_RCCEx_PeriphCLKConfig+0x942>
 8007342:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007346:	f000 80a8 	beq.w	800749a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734e:	f000 809f 	beq.w	8007490 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007352:	2601      	movs	r6, #1
 8007354:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800735c:	d009      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch(PeriphClkInit->SdmmcClockSelection)
 800735e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80ad 	beq.w	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736a:	f000 80b7 	beq.w	80074dc <HAL_RCCEx_PeriphCLKConfig+0x970>
 800736e:	2601      	movs	r6, #1
 8007370:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007378:	f040 80b8 	bne.w	80074ec <HAL_RCCEx_PeriphCLKConfig+0x980>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007382:	d00d      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch(PeriphClkInit->RngClockSelection)
 8007384:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738a:	f000 80bb 	beq.w	8007504 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800738e:	f240 80b6 	bls.w	80074fe <HAL_RCCEx_PeriphCLKConfig+0x992>
 8007392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739a:	f000 80b8 	beq.w	800750e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800739e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80073a6:	d006      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073a8:	4a62      	ldr	r2, [pc, #392]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80073aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80073ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80073bc:	d007      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x862>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80073be:	4a5d      	ldr	r2, [pc, #372]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80073c0:	6913      	ldr	r3, [r2, #16]
 80073c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80073ca:	430b      	orrs	r3, r1
 80073cc:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80073d4:	d006      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073d6:	4a57      	ldr	r2, [pc, #348]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80073d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80073da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80073ea:	d009      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x894>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073ec:	4b51      	ldr	r3, [pc, #324]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f4:	611a      	str	r2, [r3, #16]
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80073fc:	430a      	orrs	r2, r1
 80073fe:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f2c0 808e 	blt.w	8007524 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800740e:	d007      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007410:	4a48      	ldr	r2, [pc, #288]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007412:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007414:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007418:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800741c:	430b      	orrs	r3, r1
 800741e:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007420:	1e30      	subs	r0, r6, #0
 8007422:	bf18      	it	ne
 8007424:	2001      	movne	r0, #1
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800742a:	2102      	movs	r1, #2
 800742c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007430:	f7ff fb1a 	bl	8006a68 <RCCEx_PLL3_Config>
 8007434:	4605      	mov	r5, r0
      break;
 8007436:	e71c      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007438:	462e      	mov	r6, r5
 800743a:	e741      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800743c:	2102      	movs	r1, #2
 800743e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007442:	f7ff fb11 	bl	8006a68 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8007446:	2800      	cmp	r0, #0
 8007448:	bf18      	it	ne
 800744a:	2601      	movne	r6, #1
 800744c:	e742      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x768>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800744e:	2102      	movs	r1, #2
 8007450:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007454:	f7ff fb08 	bl	8006a68 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007458:	2800      	cmp	r0, #0
 800745a:	bf18      	it	ne
 800745c:	2601      	movne	r6, #1
 800745e:	e74b      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007460:	2100      	movs	r1, #0
 8007462:	1d20      	adds	r0, r4, #4
 8007464:	f7ff fa7e 	bl	8006964 <RCCEx_PLL2_Config>
 8007468:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800746a:	b97d      	cbnz	r5, 800748c <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800746c:	4a31      	ldr	r2, [pc, #196]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800746e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007470:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007474:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007478:	430b      	orrs	r3, r1
 800747a:	6593      	str	r3, [r2, #88]	; 0x58
 800747c:	e757      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800747e:	2102      	movs	r1, #2
 8007480:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007484:	f7ff faf0 	bl	8006a68 <RCCEx_PLL3_Config>
 8007488:	4605      	mov	r5, r0
      break;
 800748a:	e7ee      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800748c:	462e      	mov	r6, r5
 800748e:	e74e      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007490:	4a28      	ldr	r2, [pc, #160]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007492:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007498:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800749a:	b97d      	cbnz	r5, 80074bc <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800749c:	4a25      	ldr	r2, [pc, #148]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800749e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074a4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6553      	str	r3, [r2, #84]	; 0x54
 80074ac:	e753      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ae:	2101      	movs	r1, #1
 80074b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074b4:	f7ff fad8 	bl	8006a68 <RCCEx_PLL3_Config>
 80074b8:	4605      	mov	r5, r0
      break;
 80074ba:	e7ee      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 80074bc:	462e      	mov	r6, r5
 80074be:	e74a      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80074c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80074c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80074ca:	b96d      	cbnz	r5, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074cc:	4a19      	ldr	r2, [pc, #100]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80074ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80074d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80074d6:	430b      	orrs	r3, r1
 80074d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074da:	e74a      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074dc:	2102      	movs	r1, #2
 80074de:	1d20      	adds	r0, r4, #4
 80074e0:	f7ff fa40 	bl	8006964 <RCCEx_PLL2_Config>
 80074e4:	4605      	mov	r5, r0
      break;
 80074e6:	e7f0      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x95e>
 80074e8:	462e      	mov	r6, r5
 80074ea:	e742      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x806>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80074ec:	2102      	movs	r1, #2
 80074ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074f2:	f7ff fab9 	bl	8006a68 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80074f6:	2800      	cmp	r0, #0
 80074f8:	bf18      	it	ne
 80074fa:	2601      	movne	r6, #1
 80074fc:	e73e      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch(PeriphClkInit->RngClockSelection)
 80074fe:	b133      	cbz	r3, 800750e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007500:	2601      	movs	r6, #1
 8007502:	e74d      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007504:	4a0b      	ldr	r2, [pc, #44]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007506:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800750e:	b93d      	cbnz	r5, 8007520 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007510:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007512:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007518:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800751a:	430b      	orrs	r3, r1
 800751c:	6553      	str	r3, [r2, #84]	; 0x54
 800751e:	e73f      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8007520:	462e      	mov	r6, r5
 8007522:	e73d      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007524:	4a03      	ldr	r2, [pc, #12]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007526:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007528:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800752c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800752e:	430b      	orrs	r3, r1
 8007530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007532:	e769      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007534:	58024400 	.word	0x58024400

08007538 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007538:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800753a:	f7ff f9a3 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007546:	4a04      	ldr	r2, [pc, #16]	; (8007558 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007548:	5cd3      	ldrb	r3, [r2, r3]
 800754a:	f003 031f 	and.w	r3, r3, #31
}
 800754e:	40d8      	lsrs	r0, r3
 8007550:	bd08      	pop	{r3, pc}
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	08010f68 	.word	0x08010f68

0800755c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800755c:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800755e:	4a77      	ldr	r2, [pc, #476]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007560:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007562:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8007564:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007568:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800756a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800756c:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 8007570:	f000 80de 	beq.w	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007574:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007578:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800757c:	fb06 f303 	mul.w	r3, r6, r3
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007588:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800758c:	2c01      	cmp	r4, #1
 800758e:	d064      	beq.n	800765a <HAL_RCCEx_GetPLL2ClockFreq+0xfe>
 8007590:	2c02      	cmp	r4, #2
 8007592:	f000 80b0 	beq.w	80076f6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8007596:	b1e4      	cbz	r4, 80075d2 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007598:	4b68      	ldr	r3, [pc, #416]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80075ac:	ee66 6a87 	vmul.f32	s13, s13, s14
 80075b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075bc:	ee07 1a10 	vmov	s14, r1
 80075c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075c4:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80075c8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80075cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80075d0:	e05f      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	f013 0f20 	tst.w	r3, #32
 80075d8:	d022      	beq.n	8007620 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075da:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075de:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80075e2:	4a59      	ldr	r2, [pc, #356]	; (8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 80075e4:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075e6:	ee07 2a90 	vmov	s15, r2
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	ee07 1a10 	vmov	s14, r1
 80075f2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80075f6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800760a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800760e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007612:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	e038      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007620:	4b46      	ldr	r3, [pc, #280]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007630:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8007634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800763c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007644:	ee07 1a10 	vmov	s14, r1
 8007648:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800764c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800774c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8007650:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007658:	e01b      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800765a:	4b38      	ldr	r3, [pc, #224]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800766e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800767a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800767e:	ee07 1a10 	vmov	s14, r1
 8007682:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007686:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800768a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800768e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007692:	4a2a      	ldr	r2, [pc, #168]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8007694:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007696:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800769a:	ee06 3a90 	vmov	s13, r3
 800769e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80076a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80076a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80076aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80076ae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80076b2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80076b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80076b8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80076bc:	ee06 3a90 	vmov	s13, r3
 80076c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80076c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80076c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80076cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80076d0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80076d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80076d6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80076da:	ee07 3a10 	vmov	s14, r3
 80076de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80076e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80076e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80076ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80076ee:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80076f2:	bc70      	pop	{r4, r5, r6}
 80076f4:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800770a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800771a:	ee07 1a10 	vmov	s14, r1
 800771e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007722:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8007726:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800772a:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 800772e:	e7b0      	b.n	8007692 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007734:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007736:	6083      	str	r3, [r0, #8]
}
 8007738:	e7db      	b.n	80076f2 <HAL_RCCEx_GetPLL2ClockFreq+0x196>
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	39000000 	.word	0x39000000
 8007744:	4a742400 	.word	0x4a742400
 8007748:	03d09000 	.word	0x03d09000
 800774c:	4c742400 	.word	0x4c742400
 8007750:	4c371b00 	.word	0x4c371b00

08007754 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8007754:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007756:	4a77      	ldr	r2, [pc, #476]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007758:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800775a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800775c:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007760:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007762:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8007764:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 8007768:	f000 80de 	beq.w	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800776c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007770:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007774:	fb06 f303 	mul.w	r3, r6, r3
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007780:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8007784:	2c01      	cmp	r4, #1
 8007786:	d064      	beq.n	8007852 <HAL_RCCEx_GetPLL3ClockFreq+0xfe>
 8007788:	2c02      	cmp	r4, #2
 800778a:	f000 80b0 	beq.w	80078ee <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800778e:	b1e4      	cbz	r4, 80077ca <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007790:	4b68      	ldr	r3, [pc, #416]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80077a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80077a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077b4:	ee07 1a10 	vmov	s14, r1
 80077b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80077bc:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80077c0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80077c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80077c8:	e05f      	b.n	800788a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	f013 0f20 	tst.w	r3, #32
 80077d0:	d022      	beq.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077d2:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077d6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80077da:	4a59      	ldr	r2, [pc, #356]	; (8007940 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 80077dc:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077de:	ee07 2a90 	vmov	s15, r2
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	ee07 1a10 	vmov	s14, r1
 80077ea:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80077ee:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80077f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8007802:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007806:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800780a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800780e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	e038      	b.n	800788a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007818:	4b46      	ldr	r3, [pc, #280]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007828:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800782c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800783c:	ee07 1a10 	vmov	s14, r1
 8007840:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007844:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8007944 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8007848:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800784c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007850:	e01b      	b.n	800788a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007852:	4b38      	ldr	r3, [pc, #224]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8007866:	ee66 6a87 	vmul.f32	s13, s13, s14
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007876:	ee07 1a10 	vmov	s14, r1
 800787a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800787e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8007882:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007886:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800788a:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800788c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800788e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007892:	ee06 3a90 	vmov	s13, r3
 8007896:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800789a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800789e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80078a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80078a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80078aa:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80078b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80078b4:	ee06 3a90 	vmov	s13, r3
 80078b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80078bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80078c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80078c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80078c8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80078ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80078d2:	ee07 3a10 	vmov	s14, r3
 80078d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80078da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80078de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80078e6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80078ea:	bc70      	pop	{r4, r5, r6}
 80078ec:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078ee:	4b11      	ldr	r3, [pc, #68]	; (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8007902:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800790e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007912:	ee07 1a10 	vmov	s14, r1
 8007916:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800791a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800791e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007922:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8007926:	e7b0      	b.n	800788a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800792c:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800792e:	6083      	str	r3, [r0, #8]
}
 8007930:	e7db      	b.n	80078ea <HAL_RCCEx_GetPLL3ClockFreq+0x196>
 8007932:	bf00      	nop
 8007934:	58024400 	.word	0x58024400
 8007938:	39000000 	.word	0x39000000
 800793c:	4a742400 	.word	0x4a742400
 8007940:	03d09000 	.word	0x03d09000
 8007944:	4c742400 	.word	0x4c742400
 8007948:	4c371b00 	.word	0x4c371b00

0800794c <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800794c:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800794e:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007950:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007952:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8007954:	f3c5 1105 	ubfx	r1, r5, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007958:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800795a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800795c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
 8007960:	f000 80de 	beq.w	8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007964:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007968:	f006 0601 	and.w	r6, r6, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800796c:	fb06 f303 	mul.w	r3, r6, r3
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007978:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800797c:	2c01      	cmp	r4, #1
 800797e:	d064      	beq.n	8007a4a <HAL_RCCEx_GetPLL1ClockFreq+0xfe>
 8007980:	2c02      	cmp	r4, #2
 8007982:	f000 80b0 	beq.w	8007ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8007986:	b1e4      	cbz	r4, 80079c2 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007988:	4b68      	ldr	r3, [pc, #416]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 800799c:	ee66 6a87 	vmul.f32	s13, s13, s14
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079ac:	ee07 1a10 	vmov	s14, r1
 80079b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80079b4:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80079b8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80079bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 80079c0:	e05f      	b.n	8007a82 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	f013 0f20 	tst.w	r3, #32
 80079c8:	d022      	beq.n	8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ca:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ce:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80079d2:	4a59      	ldr	r2, [pc, #356]	; (8007b38 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 80079d4:	40e2      	lsrs	r2, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079d6:	ee07 2a90 	vmov	s15, r2
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	ee07 1a10 	vmov	s14, r1
 80079e2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80079e6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 80079fa:	ee66 6a86 	vmul.f32	s13, s13, s12
 80079fe:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007a02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	e038      	b.n	8007a82 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a10:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a20:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8007a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a34:	ee07 1a10 	vmov	s14, r1
 8007a38:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007a3c:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8007a40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a48:	e01b      	b.n	8007a82 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a4a:	4b38      	ldr	r3, [pc, #224]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8007a5e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a6e:	ee07 1a10 	vmov	s14, r1
 8007a72:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007a76:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8007a7a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007a84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a86:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007a8a:	ee06 3a90 	vmov	s13, r3
 8007a8e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007a92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007a96:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007a9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a9e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007aa2:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007aa6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007aa8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007aac:	ee06 3a90 	vmov	s13, r3
 8007ab0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007ab4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007ab8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007abc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007ac0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ac4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007ac6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007aca:	ee07 3a10 	vmov	s14, r3
 8007ace:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007ad2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007ad6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007ada:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007ade:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007ae2:	bc70      	pop	{r4, r5, r6}
 8007ae4:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8007afa:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b0a:	ee07 1a10 	vmov	s14, r1
 8007b0e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007b12:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8007b16:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8007b1e:	e7b0      	b.n	8007a82 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b24:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b26:	6083      	str	r3, [r0, #8]
}
 8007b28:	e7db      	b.n	8007ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x196>
 8007b2a:	bf00      	nop
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	39000000 	.word	0x39000000
 8007b34:	4c742400 	.word	0x4c742400
 8007b38:	03d09000 	.word	0x03d09000
 8007b3c:	4a742400 	.word	0x4a742400
 8007b40:	4c371b00 	.word	0x4c371b00

08007b44 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8007b44:	b500      	push	{lr}
 8007b46:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b48:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007b4c:	d020      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b4e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007b52:	d071      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007b58:	f000 80c8 	beq.w	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b5c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007b60:	f000 8121 	beq.w	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b64:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007b68:	f000 817e 	beq.w	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b6c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007b70:	f000 81d7 	beq.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b74:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007b78:	f000 821a 	beq.w	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b7c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007b80:	f000 8234 	beq.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007b84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b88:	f000 8282 	beq.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
      frequency = 0;
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e2ae      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007b90:	4b9b      	ldr	r3, [pc, #620]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b94:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d806      	bhi.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007b9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ba0:	00120007 	.word	0x00120007
 8007ba4:	02a0001d 	.word	0x02a0001d
 8007ba8:	0028      	.short	0x0028
 8007baa:	2000      	movs	r0, #0
 8007bac:	e29f      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bae:	4b94      	ldr	r3, [pc, #592]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007bb6:	f000 829a 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bba:	a807      	add	r0, sp, #28
 8007bbc:	f7ff fec6 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc0:	9808      	ldr	r0, [sp, #32]
 8007bc2:	e294      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc4:	4b8e      	ldr	r3, [pc, #568]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007bcc:	f000 828f 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd0:	a804      	add	r0, sp, #16
 8007bd2:	f7ff fcc3 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bd6:	9804      	ldr	r0, [sp, #16]
 8007bd8:	e289      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bda:	4b89      	ldr	r3, [pc, #548]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007be2:	f000 8284 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be6:	a801      	add	r0, sp, #4
 8007be8:	f7ff fdb4 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bec:	9801      	ldr	r0, [sp, #4]
 8007bee:	e27e      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bf0:	4a83      	ldr	r2, [pc, #524]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007bf2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	f012 0f04 	tst.w	r2, #4
 8007bfe:	d000      	beq.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8007c00:	b19b      	cbz	r3, 8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c02:	4a7f      	ldr	r2, [pc, #508]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8007c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c10:	f000 8268 	beq.w	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c14:	4a7a      	ldr	r2, [pc, #488]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007c1c:	d003      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8007c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c22:	f000 8261 	beq.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
            frequency = 0;
 8007c26:	2000      	movs	r0, #0
 8007c28:	e261      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c2a:	4b75      	ldr	r3, [pc, #468]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c32:	4874      	ldr	r0, [pc, #464]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007c34:	40d8      	lsrs	r0, r3
 8007c36:	e25a      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007c38:	4b71      	ldr	r3, [pc, #452]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d041      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007c44:	d923      	bls.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c46:	2bc0      	cmp	r3, #192	; 0xc0
 8007c48:	f000 8250 	beq.w	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c50:	d12d      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c52:	4a6b      	ldr	r2, [pc, #428]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c54:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	f012 0f04 	tst.w	r2, #4
 8007c60:	d001      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d03b      	beq.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c66:	4a66      	ldr	r2, [pc, #408]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c68:	6812      	ldr	r2, [r2, #0]
 8007c6a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007c6e:	d003      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c74:	f000 823e 	beq.w	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c78:	4a61      	ldr	r2, [pc, #388]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007c80:	d003      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c86:	f000 8237 	beq.w	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
            frequency = 0;
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e22f      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007c8e:	b183      	cbz	r3, 8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d10a      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c94:	4b5a      	ldr	r3, [pc, #360]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007c9c:	f000 8227 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca0:	a804      	add	r0, sp, #16
 8007ca2:	f7ff fc5b 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ca6:	9804      	ldr	r0, [sp, #16]
 8007ca8:	e221      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007caa:	2000      	movs	r0, #0
 8007cac:	e21f      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e21d      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb2:	4b53      	ldr	r3, [pc, #332]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007cba:	f000 8218 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cbe:	a807      	add	r0, sp, #28
 8007cc0:	f7ff fe44 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc4:	9808      	ldr	r0, [sp, #32]
 8007cc6:	e212      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cc8:	4b4d      	ldr	r3, [pc, #308]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007cd0:	f000 820d 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd4:	a801      	add	r0, sp, #4
 8007cd6:	f7ff fd3d 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cda:	9801      	ldr	r0, [sp, #4]
 8007cdc:	e207      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cde:	4b48      	ldr	r3, [pc, #288]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007ce6:	4847      	ldr	r0, [pc, #284]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ce8:	40d8      	lsrs	r0, r3
 8007cea:	e200      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007cec:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8007cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cf8:	d043      	beq.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007cfa:	d924      	bls.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007cfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d00:	f000 81fc 	beq.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8007d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d08:	d12e      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d0a:	4a3d      	ldr	r2, [pc, #244]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	f012 0f04 	tst.w	r2, #4
 8007d18:	d001      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d03c      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d1e:	4a38      	ldr	r2, [pc, #224]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007d26:	d003      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8007d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d2c:	f000 81e8 	beq.w	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d30:	4a33      	ldr	r2, [pc, #204]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007d38:	d003      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8007d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3e:	f000 81e1 	beq.w	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8007d42:	2000      	movs	r0, #0
 8007d44:	e1d3      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007d46:	b18b      	cbz	r3, 8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d4c:	d10a      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d4e:	4b2c      	ldr	r3, [pc, #176]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007d56:	f000 81ca 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d5a:	a804      	add	r0, sp, #16
 8007d5c:	f7ff fbfe 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	e1c4      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007d64:	2000      	movs	r0, #0
 8007d66:	e1c2      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e1c0      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d6c:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007d74:	f000 81bb 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d78:	a807      	add	r0, sp, #28
 8007d7a:	f7ff fde7 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d7e:	9808      	ldr	r0, [sp, #32]
 8007d80:	e1b5      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d82:	4b1f      	ldr	r3, [pc, #124]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007d8a:	f000 81b0 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d8e:	a801      	add	r0, sp, #4
 8007d90:	f7ff fce0 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d94:	9801      	ldr	r0, [sp, #4]
 8007d96:	e1aa      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d98:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007da0:	4818      	ldr	r0, [pc, #96]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007da2:	40d8      	lsrs	r0, r3
 8007da4:	e1a3      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007daa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8007dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007db2:	d047      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8007db4:	d928      	bls.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dba:	f000 81a5 	beq.w	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dc2:	d132      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dc4:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007dc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	f012 0f04 	tst.w	r2, #4
 8007dd2:	d001      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d040      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dd8:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007de0:	d003      	beq.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8007de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de6:	f000 8191 	beq.w	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dea:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007df2:	d003      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df8:	f000 818a 	beq.w	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            frequency = 0;
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e176      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007e00:	58024400 	.word	0x58024400
 8007e04:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8007e08:	b18b      	cbz	r3, 8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e0e:	d10a      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e10:	4b9b      	ldr	r3, [pc, #620]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007e18:	f000 8169 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1c:	a804      	add	r0, sp, #16
 8007e1e:	f7ff fb9d 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e22:	9804      	ldr	r0, [sp, #16]
 8007e24:	e163      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8007e26:	2000      	movs	r0, #0
 8007e28:	e161      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e15f      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e2e:	4b94      	ldr	r3, [pc, #592]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007e36:	f000 815a 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3a:	a807      	add	r0, sp, #28
 8007e3c:	f7ff fd86 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e40:	9808      	ldr	r0, [sp, #32]
 8007e42:	e154      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e44:	4b8e      	ldr	r3, [pc, #568]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007e4c:	f000 814f 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e50:	a801      	add	r0, sp, #4
 8007e52:	f7ff fc7f 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e56:	9801      	ldr	r0, [sp, #4]
 8007e58:	e149      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e5a:	4b89      	ldr	r3, [pc, #548]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e62:	4888      	ldr	r0, [pc, #544]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007e64:	40d8      	lsrs	r0, r3
 8007e66:	e142      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007e68:	4b85      	ldr	r3, [pc, #532]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8007e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e74:	d043      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007e76:	d924      	bls.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e7c:	f000 814a 	beq.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8007e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e84:	d12e      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e86:	4a7e      	ldr	r2, [pc, #504]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e88:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	f012 0f04 	tst.w	r2, #4
 8007e94:	d001      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03c      	beq.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e9a:	4a79      	ldr	r2, [pc, #484]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ea2:	d003      	beq.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea8:	f000 8136 	beq.w	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eac:	4a74      	ldr	r2, [pc, #464]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007eb4:	d003      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eba:	f000 812f 	beq.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
            frequency = 0;
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e115      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007ec2:	b18b      	cbz	r3, 8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d10a      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eca:	4b6d      	ldr	r3, [pc, #436]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007ed2:	f000 810c 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed6:	a804      	add	r0, sp, #16
 8007ed8:	f7ff fb40 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007edc:	9804      	ldr	r0, [sp, #16]
 8007ede:	e106      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e104      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e102      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ee8:	4b65      	ldr	r3, [pc, #404]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007ef0:	f000 80fd 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef4:	a807      	add	r0, sp, #28
 8007ef6:	f7ff fd29 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007efa:	9808      	ldr	r0, [sp, #32]
 8007efc:	e0f7      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007efe:	4b60      	ldr	r3, [pc, #384]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007f06:	f000 80f2 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f0a:	a801      	add	r0, sp, #4
 8007f0c:	f7ff fc22 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f10:	9801      	ldr	r0, [sp, #4]
 8007f12:	e0ec      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f14:	4b5a      	ldr	r3, [pc, #360]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007f1c:	4859      	ldr	r0, [pc, #356]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f1e:	40d8      	lsrs	r0, r3
 8007f20:	e0e5      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f22:	4b57      	ldr	r3, [pc, #348]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f2e:	d010      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f34:	d018      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8007f36:	b10b      	cbz	r3, 8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e0d8      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f3c:	4b50      	ldr	r3, [pc, #320]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007f44:	f000 80d3 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f48:	a804      	add	r0, sp, #16
 8007f4a:	f7ff fb07 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f4e:	9804      	ldr	r0, [sp, #16]
 8007f50:	e0cd      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f52:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007f5a:	f000 80c8 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5e:	a801      	add	r0, sp, #4
 8007f60:	f7ff fbf8 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f64:	9803      	ldr	r0, [sp, #12]
 8007f66:	e0c2      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f68:	4a45      	ldr	r2, [pc, #276]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	f012 0f04 	tst.w	r2, #4
 8007f76:	d000      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007f78:	b19b      	cbz	r3, 8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f7a:	4a41      	ldr	r2, [pc, #260]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007f82:	d003      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8007f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f88:	f000 80ca 	beq.w	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f8c:	4a3c      	ldr	r2, [pc, #240]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007f94:	d003      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
 8007f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9a:	f000 80c3 	beq.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e0a5      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fa2:	4b37      	ldr	r3, [pc, #220]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007faa:	4836      	ldr	r0, [pc, #216]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007fac:	40d8      	lsrs	r0, r3
 8007fae:	e09e      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007fb0:	4b33      	ldr	r3, [pc, #204]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 8007fb4:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8007fb8:	d00d      	beq.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f000 8097 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc0:	4b2f      	ldr	r3, [pc, #188]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007fc8:	f000 8091 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fcc:	a804      	add	r0, sp, #16
 8007fce:	f7ff fac5 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fd2:	9806      	ldr	r0, [sp, #24]
 8007fd4:	e08b      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007fde:	f000 8086 	beq.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe2:	a807      	add	r0, sp, #28
 8007fe4:	f7ff fcb2 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe8:	9808      	ldr	r0, [sp, #32]
 8007fea:	e080      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007fec:	4b24      	ldr	r3, [pc, #144]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007ff4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ff8:	d02f      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007ffa:	d815      	bhi.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d021      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008006:	d109      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008008:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008010:	d06d      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008012:	a801      	add	r0, sp, #4
 8008014:	f7ff fb9e 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008018:	9802      	ldr	r0, [sp, #8]
 800801a:	e068      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 800801c:	b913      	cbnz	r3, 8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800801e:	f7ff fa8b 	bl	8007538 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8008022:	e064      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8008024:	2000      	movs	r0, #0
 8008026:	e062      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d020      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 800802e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008034:	4b12      	ldr	r3, [pc, #72]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800803c:	d057      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 800803e:	4812      	ldr	r0, [pc, #72]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008040:	e055      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8008042:	2000      	movs	r0, #0
 8008044:	e053      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800804e:	d04e      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008050:	a804      	add	r0, sp, #16
 8008052:	f7ff fa83 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008056:	9805      	ldr	r0, [sp, #20]
 8008058:	e049      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800805a:	4b09      	ldr	r3, [pc, #36]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f010 0004 	ands.w	r0, r0, #4
 8008062:	d044      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800806a:	4806      	ldr	r0, [pc, #24]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800806c:	40d8      	lsrs	r0, r3
 800806e:	e03e      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008070:	4b03      	ldr	r3, [pc, #12]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008078:	d039      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = CSI_VALUE;
 800807a:	4804      	ldr	r0, [pc, #16]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800807c:	e037      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
 8008084:	03d09000 	.word	0x03d09000
 8008088:	02dc6c00 	.word	0x02dc6c00
 800808c:	003d0900 	.word	0x003d0900
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008090:	4b25      	ldr	r3, [pc, #148]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8008098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800809c:	d00c      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800809e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a2:	d013      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 80080a4:	b10b      	cbz	r3, 80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e021      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80080b2:	d01c      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 80080b4:	481d      	ldr	r0, [pc, #116]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
  return frequency;
 80080b6:	e01a      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80080c0:	d015      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c2:	a807      	add	r0, sp, #28
 80080c4:	f7ff fc42 	bl	800794c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080c8:	9808      	ldr	r0, [sp, #32]
 80080ca:	e010      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080cc:	4b16      	ldr	r3, [pc, #88]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80080d4:	d00b      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d6:	a804      	add	r0, sp, #16
 80080d8:	f7ff fa40 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080dc:	9805      	ldr	r0, [sp, #20]
 80080de:	e006      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 80080e0:	4813      	ldr	r0, [pc, #76]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80080e2:	e004      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 80080e4:	4813      	ldr	r0, [pc, #76]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80080e6:	e002      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 80080e8:	4810      	ldr	r0, [pc, #64]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 80080ec:	4810      	ldr	r0, [pc, #64]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
}
 80080ee:	b00b      	add	sp, #44	; 0x2c
 80080f0:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 80080f4:	480f      	ldr	r0, [pc, #60]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80080f6:	e7fa      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 80080f8:	480c      	ldr	r0, [pc, #48]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80080fa:	e7f8      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 80080fc:	480c      	ldr	r0, [pc, #48]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80080fe:	e7f6      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8008100:	480c      	ldr	r0, [pc, #48]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8008102:	e7f4      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8008104:	4809      	ldr	r0, [pc, #36]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8008106:	e7f2      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800810a:	e7f0      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 800810c:	4809      	ldr	r0, [pc, #36]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800810e:	e7ee      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8008110:	4806      	ldr	r0, [pc, #24]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8008112:	e7ec      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008114:	4806      	ldr	r0, [pc, #24]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8008116:	e7ea      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8008118:	4806      	ldr	r0, [pc, #24]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800811a:	e7e8      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 800811c:	4803      	ldr	r0, [pc, #12]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800811e:	e7e6      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8008120:	4804      	ldr	r0, [pc, #16]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8008122:	e7e4      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8008126:	e7e2      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8008128:	58024400 	.word	0x58024400
 800812c:	02dc6c00 	.word	0x02dc6c00
 8008130:	00bb8000 	.word	0x00bb8000
 8008134:	003d0900 	.word	0x003d0900

08008138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813a:	6a03      	ldr	r3, [r0, #32]
 800813c:	f023 0301 	bic.w	r3, r3, #1
 8008140:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008144:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008146:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <TIM_OC1_SetConfig+0x90>)
 800814a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800814c:	680d      	ldr	r5, [r1, #0]
 800814e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008150:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008154:	688d      	ldr	r5, [r1, #8]
 8008156:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008158:	4d1c      	ldr	r5, [pc, #112]	; (80081cc <TIM_OC1_SetConfig+0x94>)
 800815a:	42a8      	cmp	r0, r5
 800815c:	d01f      	beq.n	800819e <TIM_OC1_SetConfig+0x66>
 800815e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008162:	42a8      	cmp	r0, r5
 8008164:	d01b      	beq.n	800819e <TIM_OC1_SetConfig+0x66>
 8008166:	4e1a      	ldr	r6, [pc, #104]	; (80081d0 <TIM_OC1_SetConfig+0x98>)
 8008168:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800816c:	42a8      	cmp	r0, r5
 800816e:	bf18      	it	ne
 8008170:	42b0      	cmpne	r0, r6
 8008172:	d003      	beq.n	800817c <TIM_OC1_SetConfig+0x44>
 8008174:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008178:	42a8      	cmp	r0, r5
 800817a:	d11e      	bne.n	80081ba <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800817c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008180:	68cd      	ldr	r5, [r1, #12]
 8008182:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008184:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008188:	4e11      	ldr	r6, [pc, #68]	; (80081d0 <TIM_OC1_SetConfig+0x98>)
 800818a:	4d12      	ldr	r5, [pc, #72]	; (80081d4 <TIM_OC1_SetConfig+0x9c>)
 800818c:	42a8      	cmp	r0, r5
 800818e:	bf18      	it	ne
 8008190:	42b0      	cmpne	r0, r6
 8008192:	d00a      	beq.n	80081aa <TIM_OC1_SetConfig+0x72>
 8008194:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008198:	42a8      	cmp	r0, r5
 800819a:	d006      	beq.n	80081aa <TIM_OC1_SetConfig+0x72>
 800819c:	e00d      	b.n	80081ba <TIM_OC1_SetConfig+0x82>
    tmpccer &= ~TIM_CCER_CC1NP;
 800819e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80081a2:	68cd      	ldr	r5, [r1, #12]
 80081a4:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80081a6:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081aa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081ae:	698d      	ldr	r5, [r1, #24]
 80081b0:	694e      	ldr	r6, [r1, #20]
 80081b2:	ea46 0c05 	orr.w	ip, r6, r5
 80081b6:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081be:	684a      	ldr	r2, [r1, #4]
 80081c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	6203      	str	r3, [r0, #32]
}
 80081c4:	bc70      	pop	{r4, r5, r6}
 80081c6:	4770      	bx	lr
 80081c8:	fffeff8c 	.word	0xfffeff8c
 80081cc:	40010000 	.word	0x40010000
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400

080081d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081d8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081da:	6a03      	ldr	r3, [r0, #32]
 80081dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e6:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e8:	4a18      	ldr	r2, [pc, #96]	; (800824c <TIM_OC3_SetConfig+0x74>)
 80081ea:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ec:	680d      	ldr	r5, [r1, #0]
 80081ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081f4:	688d      	ldr	r5, [r1, #8]
 80081f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081fa:	4d15      	ldr	r5, [pc, #84]	; (8008250 <TIM_OC3_SetConfig+0x78>)
 80081fc:	42a8      	cmp	r0, r5
 80081fe:	d00e      	beq.n	800821e <TIM_OC3_SetConfig+0x46>
 8008200:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008204:	42a8      	cmp	r0, r5
 8008206:	d00a      	beq.n	800821e <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	4e12      	ldr	r6, [pc, #72]	; (8008254 <TIM_OC3_SetConfig+0x7c>)
 800820a:	4d13      	ldr	r5, [pc, #76]	; (8008258 <TIM_OC3_SetConfig+0x80>)
 800820c:	42a8      	cmp	r0, r5
 800820e:	bf18      	it	ne
 8008210:	42b0      	cmpne	r0, r6
 8008212:	d00b      	beq.n	800822c <TIM_OC3_SetConfig+0x54>
 8008214:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008218:	42a8      	cmp	r0, r5
 800821a:	d10f      	bne.n	800823c <TIM_OC3_SetConfig+0x64>
 800821c:	e006      	b.n	800822c <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 800821e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008222:	68cd      	ldr	r5, [r1, #12]
 8008224:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008230:	698d      	ldr	r5, [r1, #24]
 8008232:	694e      	ldr	r6, [r1, #20]
 8008234:	ea46 0c05 	orr.w	ip, r6, r5
 8008238:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008240:	684a      	ldr	r2, [r1, #4]
 8008242:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008244:	6203      	str	r3, [r0, #32]
}
 8008246:	bc70      	pop	{r4, r5, r6}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	fffeff8c 	.word	0xfffeff8c
 8008250:	40010000 	.word	0x40010000
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400

0800825c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800825e:	6a03      	ldr	r3, [r0, #32]
 8008260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008264:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <TIM_OC4_SetConfig+0x60>)
 800826e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008270:	680d      	ldr	r5, [r1, #0]
 8008272:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800827a:	688d      	ldr	r5, [r1, #8]
 800827c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008280:	4d0f      	ldr	r5, [pc, #60]	; (80082c0 <TIM_OC4_SetConfig+0x64>)
 8008282:	42a8      	cmp	r0, r5
 8008284:	d00e      	beq.n	80082a4 <TIM_OC4_SetConfig+0x48>
 8008286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800828a:	42a8      	cmp	r0, r5
 800828c:	d00a      	beq.n	80082a4 <TIM_OC4_SetConfig+0x48>
 800828e:	4e0d      	ldr	r6, [pc, #52]	; (80082c4 <TIM_OC4_SetConfig+0x68>)
 8008290:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8008294:	42a8      	cmp	r0, r5
 8008296:	bf18      	it	ne
 8008298:	42b0      	cmpne	r0, r6
 800829a:	d003      	beq.n	80082a4 <TIM_OC4_SetConfig+0x48>
 800829c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082a0:	42a8      	cmp	r0, r5
 80082a2:	d104      	bne.n	80082ae <TIM_OC4_SetConfig+0x52>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082a4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a8:	694d      	ldr	r5, [r1, #20]
 80082aa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b2:	684a      	ldr	r2, [r1, #4]
 80082b4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b6:	6203      	str	r3, [r0, #32]
}
 80082b8:	bc70      	pop	{r4, r5, r6}
 80082ba:	4770      	bx	lr
 80082bc:	feff8cff 	.word	0xfeff8cff
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40014000 	.word	0x40014000

080082c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082ca:	6a03      	ldr	r3, [r0, #32]
 80082cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082d6:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082d8:	4a13      	ldr	r2, [pc, #76]	; (8008328 <TIM_OC5_SetConfig+0x60>)
 80082da:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	680d      	ldr	r5, [r1, #0]
 80082de:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082e4:	688d      	ldr	r5, [r1, #8]
 80082e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ea:	4d10      	ldr	r5, [pc, #64]	; (800832c <TIM_OC5_SetConfig+0x64>)
 80082ec:	42a8      	cmp	r0, r5
 80082ee:	d00e      	beq.n	800830e <TIM_OC5_SetConfig+0x46>
 80082f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082f4:	42a8      	cmp	r0, r5
 80082f6:	d00a      	beq.n	800830e <TIM_OC5_SetConfig+0x46>
 80082f8:	4e0d      	ldr	r6, [pc, #52]	; (8008330 <TIM_OC5_SetConfig+0x68>)
 80082fa:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80082fe:	42a8      	cmp	r0, r5
 8008300:	bf18      	it	ne
 8008302:	42b0      	cmpne	r0, r6
 8008304:	d003      	beq.n	800830e <TIM_OC5_SetConfig+0x46>
 8008306:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800830a:	42a8      	cmp	r0, r5
 800830c:	d104      	bne.n	8008318 <TIM_OC5_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800830e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008312:	694d      	ldr	r5, [r1, #20]
 8008314:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008318:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800831a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800831c:	684a      	ldr	r2, [r1, #4]
 800831e:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008320:	6203      	str	r3, [r0, #32]
}
 8008322:	bc70      	pop	{r4, r5, r6}
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	fffeff8f 	.word	0xfffeff8f
 800832c:	40010000 	.word	0x40010000
 8008330:	40014000 	.word	0x40014000

08008334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800833c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008342:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <TIM_OC6_SetConfig+0x60>)
 8008346:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008348:	680d      	ldr	r5, [r1, #0]
 800834a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800834e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008352:	688d      	ldr	r5, [r1, #8]
 8008354:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	4d0f      	ldr	r5, [pc, #60]	; (8008398 <TIM_OC6_SetConfig+0x64>)
 800835a:	42a8      	cmp	r0, r5
 800835c:	d00e      	beq.n	800837c <TIM_OC6_SetConfig+0x48>
 800835e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008362:	42a8      	cmp	r0, r5
 8008364:	d00a      	beq.n	800837c <TIM_OC6_SetConfig+0x48>
 8008366:	4e0d      	ldr	r6, [pc, #52]	; (800839c <TIM_OC6_SetConfig+0x68>)
 8008368:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800836c:	42a8      	cmp	r0, r5
 800836e:	bf18      	it	ne
 8008370:	42b0      	cmpne	r0, r6
 8008372:	d003      	beq.n	800837c <TIM_OC6_SetConfig+0x48>
 8008374:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008378:	42a8      	cmp	r0, r5
 800837a:	d104      	bne.n	8008386 <TIM_OC6_SetConfig+0x52>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800837c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008380:	694d      	ldr	r5, [r1, #20]
 8008382:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008386:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008388:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800838a:	684a      	ldr	r2, [r1, #4]
 800838c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838e:	6203      	str	r3, [r0, #32]
}
 8008390:	bc70      	pop	{r4, r5, r6}
 8008392:	4770      	bx	lr
 8008394:	feff8fff 	.word	0xfeff8fff
 8008398:	40010000 	.word	0x40010000
 800839c:	40014000 	.word	0x40014000

080083a0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80083a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d145      	bne.n	8008436 <HAL_TIM_Base_Start_IT+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 80083aa:	2302      	movs	r3, #2
 80083ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	6802      	ldr	r2, [r0, #0]
 80083b2:	68d3      	ldr	r3, [r2, #12]
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ba:	6802      	ldr	r2, [r0, #0]
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <HAL_TIM_Base_Start_IT+0xa0>)
 80083be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80083c2:	bf18      	it	ne
 80083c4:	429a      	cmpne	r2, r3
 80083c6:	bf0c      	ite	eq
 80083c8:	2301      	moveq	r3, #1
 80083ca:	2300      	movne	r3, #0
 80083cc:	491d      	ldr	r1, [pc, #116]	; (8008444 <HAL_TIM_Base_Start_IT+0xa4>)
 80083ce:	428a      	cmp	r2, r1
 80083d0:	bf08      	it	eq
 80083d2:	f043 0301 	orreq.w	r3, r3, #1
 80083d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083da:	428a      	cmp	r2, r1
 80083dc:	bf08      	it	eq
 80083de:	f043 0301 	orreq.w	r3, r3, #1
 80083e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083e6:	428a      	cmp	r2, r1
 80083e8:	bf08      	it	eq
 80083ea:	f043 0301 	orreq.w	r3, r3, #1
 80083ee:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80083f2:	428a      	cmp	r2, r1
 80083f4:	bf08      	it	eq
 80083f6:	f043 0301 	orreq.w	r3, r3, #1
 80083fa:	f5a1 416c 	sub.w	r1, r1, #60416	; 0xec00
 80083fe:	428a      	cmp	r2, r1
 8008400:	bf08      	it	eq
 8008402:	f043 0301 	orreq.w	r3, r3, #1
 8008406:	b913      	cbnz	r3, 800840e <HAL_TIM_Base_Start_IT+0x6e>
 8008408:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <HAL_TIM_Base_Start_IT+0xa8>)
 800840a:	429a      	cmp	r2, r3
 800840c:	d10d      	bne.n	800842a <HAL_TIM_Base_Start_IT+0x8a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840e:	6891      	ldr	r1, [r2, #8]
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <HAL_TIM_Base_Start_IT+0xac>)
 8008412:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008414:	2b06      	cmp	r3, #6
 8008416:	d010      	beq.n	800843a <HAL_TIM_Base_Start_IT+0x9a>
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841c:	d00d      	beq.n	800843a <HAL_TIM_Base_Start_IT+0x9a>
      __HAL_TIM_ENABLE(htim);
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008426:	2000      	movs	r0, #0
 8008428:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008432:	2000      	movs	r0, #0
 8008434:	4770      	bx	lr
    return HAL_ERROR;
 8008436:	2001      	movs	r0, #1
 8008438:	4770      	bx	lr
  return HAL_OK;
 800843a:	2000      	movs	r0, #0
}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40010000 	.word	0x40010000
 8008444:	40000400 	.word	0x40000400
 8008448:	40014000 	.word	0x40014000
 800844c:	00010007 	.word	0x00010007

08008450 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008450:	4770      	bx	lr

08008452 <HAL_TIM_IC_CaptureCallback>:
}
 8008452:	4770      	bx	lr

08008454 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008454:	4770      	bx	lr

08008456 <HAL_TIM_TriggerCallback>:
}
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_IRQHandler>:
{
 8008458:	b510      	push	{r4, lr}
 800845a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800845c:	6803      	ldr	r3, [r0, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	f012 0f02 	tst.w	r2, #2
 8008464:	d011      	beq.n	800848a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	f012 0f02 	tst.w	r2, #2
 800846c:	d00d      	beq.n	800848a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800846e:	f06f 0202 	mvn.w	r2, #2
 8008472:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008474:	2301      	movs	r3, #1
 8008476:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008478:	6803      	ldr	r3, [r0, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f013 0f03 	tst.w	r3, #3
 8008480:	d079      	beq.n	8008576 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008482:	f7ff ffe6 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008486:	2300      	movs	r3, #0
 8008488:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	f012 0f04 	tst.w	r2, #4
 8008492:	d012      	beq.n	80084ba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	f012 0f04 	tst.w	r2, #4
 800849a:	d00e      	beq.n	80084ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800849c:	f06f 0204 	mvn.w	r2, #4
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084a2:	2302      	movs	r3, #2
 80084a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80084ae:	d068      	beq.n	8008582 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80084b0:	4620      	mov	r0, r4
 80084b2:	f7ff ffce 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	2300      	movs	r3, #0
 80084b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	f012 0f08 	tst.w	r2, #8
 80084c2:	d012      	beq.n	80084ea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	f012 0f08 	tst.w	r2, #8
 80084ca:	d00e      	beq.n	80084ea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084cc:	f06f 0208 	mvn.w	r2, #8
 80084d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084d2:	2304      	movs	r3, #4
 80084d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f013 0f03 	tst.w	r3, #3
 80084de:	d057      	beq.n	8008590 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80084e0:	4620      	mov	r0, r4
 80084e2:	f7ff ffb6 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	2300      	movs	r3, #0
 80084e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	691a      	ldr	r2, [r3, #16]
 80084ee:	f012 0f10 	tst.w	r2, #16
 80084f2:	d012      	beq.n	800851a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	f012 0f10 	tst.w	r2, #16
 80084fa:	d00e      	beq.n	800851a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084fc:	f06f 0210 	mvn.w	r2, #16
 8008500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008502:	2308      	movs	r3, #8
 8008504:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800850e:	d046      	beq.n	800859e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff ff9e 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008516:	2300      	movs	r3, #0
 8008518:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	f012 0f01 	tst.w	r2, #1
 8008522:	d003      	beq.n	800852c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	f012 0f01 	tst.w	r2, #1
 800852a:	d13f      	bne.n	80085ac <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	f012 0f80 	tst.w	r2, #128	; 0x80
 800853c:	d13d      	bne.n	80085ba <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008546:	d003      	beq.n	8008550 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800854e:	d13b      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008560:	d139      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	f012 0f20 	tst.w	r2, #32
 800856a:	d003      	beq.n	8008574 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	f012 0f20 	tst.w	r2, #32
 8008572:	d137      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x18c>
}
 8008574:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	f7ff ff6b 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff ff6a 	bl	8008454 <HAL_TIM_PWM_PulseFinishedCallback>
 8008580:	e781      	b.n	8008486 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff ff64 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008588:	4620      	mov	r0, r4
 800858a:	f7ff ff63 	bl	8008454 <HAL_TIM_PWM_PulseFinishedCallback>
 800858e:	e792      	b.n	80084b6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008590:	4620      	mov	r0, r4
 8008592:	f7ff ff5d 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008596:	4620      	mov	r0, r4
 8008598:	f7ff ff5c 	bl	8008454 <HAL_TIM_PWM_PulseFinishedCallback>
 800859c:	e7a3      	b.n	80084e6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff ff56 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff ff55 	bl	8008454 <HAL_TIM_PWM_PulseFinishedCallback>
 80085aa:	e7b4      	b.n	8008516 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085ac:	f06f 0201 	mvn.w	r2, #1
 80085b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7f8 fd9a 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
 80085b8:	e7b8      	b.n	800852c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fb4e 	bl	8008c62 <HAL_TIMEx_BreakCallback>
 80085c6:	e7ba      	b.n	800853e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fb48 	bl	8008c64 <HAL_TIMEx_Break2Callback>
 80085d4:	e7bc      	b.n	8008550 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80085dc:	4620      	mov	r0, r4
 80085de:	f7ff ff3a 	bl	8008456 <HAL_TIM_TriggerCallback>
 80085e2:	e7be      	b.n	8008562 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085e4:	f06f 0220 	mvn.w	r2, #32
 80085e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fb38 	bl	8008c60 <HAL_TIMEx_CommutCallback>
}
 80085f0:	e7c0      	b.n	8008574 <HAL_TIM_IRQHandler+0x11c>
	...

080085f4 <TIM_Base_SetConfig>:
{
 80085f4:	b430      	push	{r4, r5}
  tmpcr1 = TIMx->CR1;
 80085f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f8:	4a32      	ldr	r2, [pc, #200]	; (80086c4 <TIM_Base_SetConfig+0xd0>)
 80085fa:	4290      	cmp	r0, r2
 80085fc:	bf14      	ite	ne
 80085fe:	2200      	movne	r2, #0
 8008600:	2201      	moveq	r2, #1
 8008602:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008606:	d037      	beq.n	8008678 <TIM_Base_SetConfig+0x84>
 8008608:	2a00      	cmp	r2, #0
 800860a:	d135      	bne.n	8008678 <TIM_Base_SetConfig+0x84>
 800860c:	4c2e      	ldr	r4, [pc, #184]	; (80086c8 <TIM_Base_SetConfig+0xd4>)
 800860e:	42a0      	cmp	r0, r4
 8008610:	d00b      	beq.n	800862a <TIM_Base_SetConfig+0x36>
 8008612:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008616:	42a0      	cmp	r0, r4
 8008618:	d007      	beq.n	800862a <TIM_Base_SetConfig+0x36>
 800861a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800861e:	42a0      	cmp	r0, r4
 8008620:	d003      	beq.n	800862a <TIM_Base_SetConfig+0x36>
 8008622:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8008626:	42a0      	cmp	r0, r4
 8008628:	d10a      	bne.n	8008640 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800862e:	684c      	ldr	r4, [r1, #4]
 8008630:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008632:	4c25      	ldr	r4, [pc, #148]	; (80086c8 <TIM_Base_SetConfig+0xd4>)
 8008634:	42a0      	cmp	r0, r4
 8008636:	d023      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
 8008638:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800863c:	42a0      	cmp	r0, r4
 800863e:	d01f      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
 8008640:	4c22      	ldr	r4, [pc, #136]	; (80086cc <TIM_Base_SetConfig+0xd8>)
 8008642:	42a0      	cmp	r0, r4
 8008644:	d01c      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
 8008646:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800864a:	42a0      	cmp	r0, r4
 800864c:	d018      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
 800864e:	4d20      	ldr	r5, [pc, #128]	; (80086d0 <TIM_Base_SetConfig+0xdc>)
 8008650:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8008654:	42a0      	cmp	r0, r4
 8008656:	bf18      	it	ne
 8008658:	42a8      	cmpne	r0, r5
 800865a:	d011      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
 800865c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008660:	42a0      	cmp	r0, r4
 8008662:	d00d      	beq.n	8008680 <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008668:	694a      	ldr	r2, [r1, #20]
 800866a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800866c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800866e:	688b      	ldr	r3, [r1, #8]
 8008670:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008672:	680b      	ldr	r3, [r1, #0]
 8008674:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008676:	e021      	b.n	80086bc <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800867c:	684c      	ldr	r4, [r1, #4]
 800867e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8008680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008684:	68cc      	ldr	r4, [r1, #12]
 8008686:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868c:	694c      	ldr	r4, [r1, #20]
 800868e:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8008690:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008692:	688b      	ldr	r3, [r1, #8]
 8008694:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008696:	680b      	ldr	r3, [r1, #0]
 8008698:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <TIM_Base_SetConfig+0xe0>)
 800869c:	4298      	cmp	r0, r3
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0xc4>
 80086a0:	b952      	cbnz	r2, 80086b8 <TIM_Base_SetConfig+0xc4>
 80086a2:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <TIM_Base_SetConfig+0xdc>)
 80086a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80086a8:	4298      	cmp	r0, r3
 80086aa:	bf18      	it	ne
 80086ac:	4290      	cmpne	r0, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0xc4>
 80086b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b4:	4298      	cmp	r0, r3
 80086b6:	d101      	bne.n	80086bc <TIM_Base_SetConfig+0xc8>
    TIMx->RCR = Structure->RepetitionCounter;
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80086bc:	2301      	movs	r3, #1
 80086be:	6143      	str	r3, [r0, #20]
}
 80086c0:	bc30      	pop	{r4, r5}
 80086c2:	4770      	bx	lr
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40000400 	.word	0x40000400
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40010400 	.word	0x40010400

080086d8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80086d8:	b360      	cbz	r0, 8008734 <HAL_TIM_Base_Init+0x5c>
{
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80086de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80086e2:	b313      	cbz	r3, 800872a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	2302      	movs	r3, #2
 80086e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ea:	4621      	mov	r1, r4
 80086ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80086f0:	f7ff ff80 	bl	80085f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80086fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008702:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008706:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800870a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800870e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008712:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800871a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800871e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008726:	2000      	movs	r0, #0
}
 8008728:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800872a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800872e:	f7f8 fe91 	bl	8001454 <HAL_TIM_Base_MspInit>
 8008732:	e7d7      	b.n	80086e4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008734:	2001      	movs	r0, #1
}
 8008736:	4770      	bx	lr

08008738 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008738:	b360      	cbz	r0, 8008794 <HAL_TIM_PWM_Init+0x5c>
{
 800873a:	b510      	push	{r4, lr}
 800873c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800873e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008742:	b313      	cbz	r3, 800878a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	2302      	movs	r3, #2
 8008746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874a:	4621      	mov	r1, r4
 800874c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008750:	f7ff ff50 	bl	80085f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008754:	2301      	movs	r3, #1
 8008756:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800875e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008762:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008766:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800876a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800876e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800877a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800877e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008786:	2000      	movs	r0, #0
}
 8008788:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800878a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800878e:	f7f8 fe35 	bl	80013fc <HAL_TIM_PWM_MspInit>
 8008792:	e7d7      	b.n	8008744 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8008794:	2001      	movs	r0, #1
}
 8008796:	4770      	bx	lr

08008798 <TIM_OC2_SetConfig>:
{
 8008798:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	f023 0310 	bic.w	r3, r3, #16
 80087a0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80087a2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80087a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80087a6:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087a8:	4a18      	ldr	r2, [pc, #96]	; (800880c <TIM_OC2_SetConfig+0x74>)
 80087aa:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ac:	680d      	ldr	r5, [r1, #0]
 80087ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80087b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b6:	688d      	ldr	r5, [r1, #8]
 80087b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087bc:	4d14      	ldr	r5, [pc, #80]	; (8008810 <TIM_OC2_SetConfig+0x78>)
 80087be:	42a8      	cmp	r0, r5
 80087c0:	d00e      	beq.n	80087e0 <TIM_OC2_SetConfig+0x48>
 80087c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087c6:	42a8      	cmp	r0, r5
 80087c8:	d00a      	beq.n	80087e0 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ca:	4e12      	ldr	r6, [pc, #72]	; (8008814 <TIM_OC2_SetConfig+0x7c>)
 80087cc:	4d12      	ldr	r5, [pc, #72]	; (8008818 <TIM_OC2_SetConfig+0x80>)
 80087ce:	42a8      	cmp	r0, r5
 80087d0:	bf18      	it	ne
 80087d2:	42b0      	cmpne	r0, r6
 80087d4:	d00b      	beq.n	80087ee <TIM_OC2_SetConfig+0x56>
 80087d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087da:	42a8      	cmp	r0, r5
 80087dc:	d10f      	bne.n	80087fe <TIM_OC2_SetConfig+0x66>
 80087de:	e006      	b.n	80087ee <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 80087e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087e4:	68cd      	ldr	r5, [r1, #12]
 80087e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80087ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087ee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087f2:	698d      	ldr	r5, [r1, #24]
 80087f4:	694e      	ldr	r6, [r1, #20]
 80087f6:	ea46 0c05 	orr.w	ip, r6, r5
 80087fa:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80087fe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008800:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008802:	684a      	ldr	r2, [r1, #4]
 8008804:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008806:	6203      	str	r3, [r0, #32]
}
 8008808:	bc70      	pop	{r4, r5, r6}
 800880a:	4770      	bx	lr
 800880c:	feff8cff 	.word	0xfeff8cff
 8008810:	40010000 	.word	0x40010000
 8008814:	40014000 	.word	0x40014000
 8008818:	40014400 	.word	0x40014400

0800881c <HAL_TIM_PWM_ConfigChannel>:
{
 800881c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800881e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008822:	2b01      	cmp	r3, #1
 8008824:	f000 8095 	beq.w	8008952 <HAL_TIM_PWM_ConfigChannel+0x136>
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	2301      	movs	r3, #1
 800882e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008832:	2a14      	cmp	r2, #20
 8008834:	f200 8088 	bhi.w	8008948 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008838:	e8df f002 	tbb	[pc, r2]
 800883c:	8686860b 	.word	0x8686860b
 8008840:	8686861f 	.word	0x8686861f
 8008844:	86868634 	.word	0x86868634
 8008848:	86868648 	.word	0x86868648
 800884c:	8686865d 	.word	0x8686865d
 8008850:	71          	.byte	0x71
 8008851:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008852:	6800      	ldr	r0, [r0, #0]
 8008854:	f7ff fc70 	bl	8008138 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	6993      	ldr	r3, [r2, #24]
 800885c:	f043 0308 	orr.w	r3, r3, #8
 8008860:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	6993      	ldr	r3, [r2, #24]
 8008866:	f023 0304 	bic.w	r3, r3, #4
 800886a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	6993      	ldr	r3, [r2, #24]
 8008870:	6929      	ldr	r1, [r5, #16]
 8008872:	430b      	orrs	r3, r1
 8008874:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008876:	2000      	movs	r0, #0
      break;
 8008878:	e067      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	f7ff ff8c 	bl	8008798 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	6993      	ldr	r3, [r2, #24]
 8008884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008888:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800888a:	6822      	ldr	r2, [r4, #0]
 800888c:	6993      	ldr	r3, [r2, #24]
 800888e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008892:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008894:	6822      	ldr	r2, [r4, #0]
 8008896:	6993      	ldr	r3, [r2, #24]
 8008898:	6929      	ldr	r1, [r5, #16]
 800889a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800889e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2000      	movs	r0, #0
      break;
 80088a2:	e052      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a4:	6800      	ldr	r0, [r0, #0]
 80088a6:	f7ff fc97 	bl	80081d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	69d3      	ldr	r3, [r2, #28]
 80088ae:	f043 0308 	orr.w	r3, r3, #8
 80088b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088b4:	6822      	ldr	r2, [r4, #0]
 80088b6:	69d3      	ldr	r3, [r2, #28]
 80088b8:	f023 0304 	bic.w	r3, r3, #4
 80088bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088be:	6822      	ldr	r2, [r4, #0]
 80088c0:	69d3      	ldr	r3, [r2, #28]
 80088c2:	6929      	ldr	r1, [r5, #16]
 80088c4:	430b      	orrs	r3, r1
 80088c6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80088c8:	2000      	movs	r0, #0
      break;
 80088ca:	e03e      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f7ff fcc5 	bl	800825c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	69d3      	ldr	r3, [r2, #28]
 80088d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80088da:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	69d3      	ldr	r3, [r2, #28]
 80088e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088e4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	69d3      	ldr	r3, [r2, #28]
 80088ea:	6929      	ldr	r1, [r5, #16]
 80088ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80088f0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80088f2:	2000      	movs	r0, #0
      break;
 80088f4:	e029      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088f6:	6800      	ldr	r0, [r0, #0]
 80088f8:	f7ff fce6 	bl	80082c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088fc:	6822      	ldr	r2, [r4, #0]
 80088fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008900:	f043 0308 	orr.w	r3, r3, #8
 8008904:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800890a:	f023 0304 	bic.w	r3, r3, #4
 800890e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008914:	6929      	ldr	r1, [r5, #16]
 8008916:	430b      	orrs	r3, r1
 8008918:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800891a:	2000      	movs	r0, #0
      break;
 800891c:	e015      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	f7ff fd08 	bl	8008334 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800892c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008936:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800893c:	6929      	ldr	r1, [r5, #16]
 800893e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008942:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8008944:	2000      	movs	r0, #0
      break;
 8008946:	e000      	b.n	800894a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8008948:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800894a:	2300      	movs	r3, #0
 800894c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008950:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8008952:	2002      	movs	r0, #2
 8008954:	e7fc      	b.n	8008950 <HAL_TIM_PWM_ConfigChannel+0x134>

08008956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008956:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008958:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800895a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800895e:	430a      	orrs	r2, r1
 8008960:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008964:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008968:	6082      	str	r2, [r0, #8]
}
 800896a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008970:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008974:	2b01      	cmp	r3, #1
 8008976:	f000 80c2 	beq.w	8008afe <HAL_TIM_ConfigClockSource+0x18e>
{
 800897a:	b570      	push	{r4, r5, r6, lr}
 800897c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800897e:	2301      	movs	r3, #1
 8008980:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	2302      	movs	r3, #2
 8008986:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800898a:	6802      	ldr	r2, [r0, #0]
 800898c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800898e:	4b5d      	ldr	r3, [pc, #372]	; (8008b04 <HAL_TIM_ConfigClockSource+0x194>)
 8008990:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8008992:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008994:	680b      	ldr	r3, [r1, #0]
 8008996:	2b70      	cmp	r3, #112	; 0x70
 8008998:	d07a      	beq.n	8008a90 <HAL_TIM_ConfigClockSource+0x120>
 800899a:	d84d      	bhi.n	8008a38 <HAL_TIM_ConfigClockSource+0xc8>
 800899c:	2b50      	cmp	r3, #80	; 0x50
 800899e:	f000 8091 	beq.w	8008ac4 <HAL_TIM_ConfigClockSource+0x154>
 80089a2:	d91d      	bls.n	80089e0 <HAL_TIM_ConfigClockSource+0x70>
 80089a4:	2b60      	cmp	r3, #96	; 0x60
 80089a6:	d145      	bne.n	8008a34 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	684d      	ldr	r5, [r1, #4]
 80089ac:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ae:	6a18      	ldr	r0, [r3, #32]
 80089b0:	f020 0010 	bic.w	r0, r0, #16
 80089b4:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80089b8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ba:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089be:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80089c6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80089ca:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80089cc:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089ce:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80089d0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80089d2:	4b4d      	ldr	r3, [pc, #308]	; (8008b08 <HAL_TIM_ConfigClockSource+0x198>)
 80089d4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80089da:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089dc:	2000      	movs	r0, #0
}
 80089de:	e047      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d11a      	bne.n	8008a1a <HAL_TIM_ConfigClockSource+0xaa>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	6848      	ldr	r0, [r1, #4]
 80089e8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80089ea:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008a02:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a06:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a08:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008a0a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a0c:	4b3e      	ldr	r3, [pc, #248]	; (8008b08 <HAL_TIM_ConfigClockSource+0x198>)
 8008a0e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a10:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8008a14:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a16:	2000      	movs	r0, #0
}
 8008a18:	e02a      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 8008a1a:	d86e      	bhi.n	8008afa <HAL_TIM_ConfigClockSource+0x18a>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d019      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a20:	d903      	bls.n	8008a2a <HAL_TIM_ConfigClockSource+0xba>
 8008a22:	2b30      	cmp	r3, #48	; 0x30
 8008a24:	d016      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a26:	2001      	movs	r0, #1
 8008a28:	e022      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
 8008a2a:	f033 0210 	bics.w	r2, r3, #16
 8008a2e:	d011      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a30:	2001      	movs	r0, #1
 8008a32:	e01d      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
 8008a34:	2001      	movs	r0, #1
 8008a36:	e01b      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
 8008a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3c:	d035      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x13a>
 8008a3e:	d913      	bls.n	8008a68 <HAL_TIM_ConfigClockSource+0xf8>
 8008a40:	4a32      	ldr	r2, [pc, #200]	; (8008b0c <HAL_TIM_ConfigClockSource+0x19c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d006      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a46:	d91a      	bls.n	8008a7e <HAL_TIM_ConfigClockSource+0x10e>
 8008a48:	4a31      	ldr	r2, [pc, #196]	; (8008b10 <HAL_TIM_ConfigClockSource+0x1a0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d002      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a4e:	3210      	adds	r2, #16
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d11b      	bne.n	8008a8c <HAL_TIM_ConfigClockSource+0x11c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a54:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008a56:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a58:	4a2b      	ldr	r2, [pc, #172]	; (8008b08 <HAL_TIM_ConfigClockSource+0x198>)
 8008a5a:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008a62:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a64:	2000      	movs	r0, #0
}
 8008a66:	e003      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
  HAL_StatusTypeDef status = HAL_OK;
 8008a68:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8008a6c:	bf18      	it	ne
 8008a6e:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008a76:	2300      	movs	r3, #0
 8008a78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8008a7e:	f023 0210 	bic.w	r2, r3, #16
 8008a82:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008a86:	d0e5      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0xe4>
 8008a88:	2001      	movs	r0, #1
 8008a8a:	e7f1      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	e7ef      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8008a90:	68cb      	ldr	r3, [r1, #12]
 8008a92:	684a      	ldr	r2, [r1, #4]
 8008a94:	6889      	ldr	r1, [r1, #8]
 8008a96:	6820      	ldr	r0, [r4, #0]
 8008a98:	f7ff ff5d 	bl	8008956 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008aa4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa6:	2000      	movs	r0, #0
      break;
 8008aa8:	e7e2      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8008aaa:	68cb      	ldr	r3, [r1, #12]
 8008aac:	684a      	ldr	r2, [r1, #4]
 8008aae:	6889      	ldr	r1, [r1, #8]
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	f7ff ff50 	bl	8008956 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	6893      	ldr	r3, [r2, #8]
 8008aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008abe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac0:	2000      	movs	r0, #0
      break;
 8008ac2:	e7d5      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	6848      	ldr	r0, [r1, #4]
 8008ac8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008aca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	f022 0201 	bic.w	r2, r2, #1
 8008ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ad6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ada:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ade:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008ae2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008aea:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <HAL_TIM_ConfigClockSource+0x198>)
 8008aee:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008af0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8008af4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008af6:	2000      	movs	r0, #0
}
 8008af8:	e7ba      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 8008afa:	2001      	movs	r0, #1
 8008afc:	e7b8      	b.n	8008a70 <HAL_TIM_ConfigClockSource+0x100>
  __HAL_LOCK(htim);
 8008afe:	2002      	movs	r0, #2
}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	ffce0088 	.word	0xffce0088
 8008b08:	ffcfff8f 	.word	0xffcfff8f
 8008b0c:	00100020 	.word	0x00100020
 8008b10:	00100030 	.word	0x00100030

08008b14 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d051      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008b1c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	2302      	movs	r3, #2
 8008b26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b2a:	6802      	ldr	r2, [r0, #0]
 8008b2c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b2e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b30:	4d24      	ldr	r5, [pc, #144]	; (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b32:	42aa      	cmp	r2, r5
 8008b34:	d003      	beq.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8008b36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b3a:	42aa      	cmp	r2, r5
 8008b3c:	d103      	bne.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b42:	684d      	ldr	r5, [r1, #4]
 8008b44:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b4a:	680d      	ldr	r5, [r1, #0]
 8008b4c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b50:	6802      	ldr	r2, [r0, #0]
 8008b52:	4b1c      	ldr	r3, [pc, #112]	; (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008b58:	bf18      	it	ne
 8008b5a:	429a      	cmpne	r2, r3
 8008b5c:	bf0c      	ite	eq
 8008b5e:	2301      	moveq	r3, #1
 8008b60:	2300      	movne	r3, #0
 8008b62:	4d19      	ldr	r5, [pc, #100]	; (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b64:	42aa      	cmp	r2, r5
 8008b66:	bf08      	it	eq
 8008b68:	f043 0301 	orreq.w	r3, r3, #1
 8008b6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b70:	42aa      	cmp	r2, r5
 8008b72:	bf08      	it	eq
 8008b74:	f043 0301 	orreq.w	r3, r3, #1
 8008b78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b7c:	42aa      	cmp	r2, r5
 8008b7e:	bf08      	it	eq
 8008b80:	f043 0301 	orreq.w	r3, r3, #1
 8008b84:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8008b88:	42aa      	cmp	r2, r5
 8008b8a:	bf08      	it	eq
 8008b8c:	f043 0301 	orreq.w	r3, r3, #1
 8008b90:	f5a5 456c 	sub.w	r5, r5, #60416	; 0xec00
 8008b94:	42aa      	cmp	r2, r5
 8008b96:	bf08      	it	eq
 8008b98:	f043 0301 	orreq.w	r3, r3, #1
 8008b9c:	b913      	cbnz	r3, 8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d104      	bne.n	8008bae <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ba8:	688b      	ldr	r3, [r1, #8]
 8008baa:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bac:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008bba:	4618      	mov	r0, r3
}
 8008bbc:	bc30      	pop	{r4, r5}
 8008bbe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008bc0:	2002      	movs	r0, #2
}
 8008bc2:	4770      	bx	lr
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40000400 	.word	0x40000400
 8008bcc:	40014000 	.word	0x40014000

08008bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d03e      	beq.n	8008c56 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8008bd8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008be0:	68cb      	ldr	r3, [r1, #12]
 8008be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be6:	688a      	ldr	r2, [r1, #8]
 8008be8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bee:	684a      	ldr	r2, [r1, #4]
 8008bf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf6:	680a      	ldr	r2, [r1, #0]
 8008bf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bfe:	690a      	ldr	r2, [r1, #16]
 8008c00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c06:	694a      	ldr	r2, [r1, #20]
 8008c08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008c10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c12:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008c16:	698a      	ldr	r2, [r1, #24]
 8008c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c1c:	6802      	ldr	r2, [r0, #0]
 8008c1e:	4c0f      	ldr	r4, [pc, #60]	; (8008c5c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8008c20:	42a2      	cmp	r2, r4
 8008c22:	d003      	beq.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008c24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c28:	42a2      	cmp	r2, r4
 8008c2a:	d10c      	bne.n	8008c46 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c30:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008c32:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3a:	69cc      	ldr	r4, [r1, #28]
 8008c3c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008c42:	6a09      	ldr	r1, [r1, #32]
 8008c44:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c46:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008c4e:	4618      	mov	r0, r3
}
 8008c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008c56:	2002      	movs	r0, #2
}
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	40010000 	.word	0x40010000

08008c60 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c60:	4770      	bx	lr

08008c62 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c64:	4770      	bx	lr

08008c66 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c66:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	e852 3f00 	ldrex	r3, [r2]
 8008c6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	e842 3100 	strex	r1, r3, [r2]
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d1f6      	bne.n	8008c66 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	f102 0308 	add.w	r3, r2, #8
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	3208      	adds	r2, #8
 8008c88:	e842 3100 	strex	r1, r3, [r2]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d1f3      	bne.n	8008c78 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	2320      	movs	r3, #32
 8008c92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8008c96:	4770      	bx	lr

08008c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c98:	b410      	push	{r4}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	e852 3f00 	ldrex	r3, [r2]
 8008ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	e842 3100 	strex	r1, r3, [r2]
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	d1f6      	bne.n	8008c9a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cac:	4c10      	ldr	r4, [pc, #64]	; (8008cf0 <UART_EndRxTransfer+0x58>)
 8008cae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	f102 0308 	add.w	r3, r2, #8
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	3208      	adds	r2, #8
 8008cbc:	e842 3100 	strex	r1, r3, [r2]
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	d1f4      	bne.n	8008cae <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d008      	beq.n	8008cdc <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	2320      	movs	r3, #32
 8008ccc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd4:	6703      	str	r3, [r0, #112]	; 0x70
}
 8008cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cda:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cdc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	e852 3f00 	ldrex	r3, [r2]
 8008ce2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	e842 3100 	strex	r1, r3, [r2]
 8008cea:	2900      	cmp	r1, #0
 8008cec:	d1f6      	bne.n	8008cdc <UART_EndRxTransfer+0x44>
 8008cee:	e7ec      	b.n	8008cca <UART_EndRxTransfer+0x32>
 8008cf0:	effffffe 	.word	0xeffffffe

08008cf4 <HAL_UART_TxCpltCallback>:
}
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_UART_RxCpltCallback>:
}
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_UART_RxHalfCpltCallback>:
}
 8008cf8:	4770      	bx	lr

08008cfa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cfa:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cfc:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cfe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d02:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d0e:	d001      	beq.n	8008d14 <UART_DMAError+0x1a>
 8008d10:	2a21      	cmp	r2, #33	; 0x21
 8008d12:	d010      	beq.n	8008d36 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d1c:	d001      	beq.n	8008d22 <UART_DMAError+0x28>
 8008d1e:	2d22      	cmp	r5, #34	; 0x22
 8008d20:	d010      	beq.n	8008d44 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008d26:	f043 0310 	orr.w	r3, r3, #16
 8008d2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f004 fdad 	bl	800d88e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d34:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7ff ff92 	bl	8008c66 <UART_EndTxTransfer>
 8008d42:	e7e7      	b.n	8008d14 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7ff ffa4 	bl	8008c98 <UART_EndRxTransfer>
 8008d50:	e7e7      	b.n	8008d22 <UART_DMAError+0x28>

08008d52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d52:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d54:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d5c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d60:	f004 fd95 	bl	800d88e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d64:	bd08      	pop	{r3, pc}
	...

08008d68 <HAL_UART_IRQHandler>:
{
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d70:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d72:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008d74:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8008d78:	ea13 0f0c 	tst.w	r3, ip
 8008d7c:	d10e      	bne.n	8008d9c <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d7e:	f013 0f20 	tst.w	r3, #32
 8008d82:	d014      	beq.n	8008dae <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d84:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d88:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8008d8c:	ea55 050c 	orrs.w	r5, r5, ip
 8008d90:	d00d      	beq.n	8008dae <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8008d92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d94:	b3a3      	cbz	r3, 8008e00 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8008d96:	4620      	mov	r0, r4
 8008d98:	4798      	blx	r3
 8008d9a:	e031      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d9c:	4d66      	ldr	r5, [pc, #408]	; (8008f38 <HAL_UART_IRQHandler+0x1d0>)
 8008d9e:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008da0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008f40 <HAL_UART_IRQHandler+0x1d8>
 8008da4:	ea00 0c0c 	and.w	ip, r0, ip
 8008da8:	ea5c 0605 	orrs.w	r6, ip, r5
 8008dac:	d129      	bne.n	8008e02 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8008db0:	2d01      	cmp	r5, #1
 8008db2:	f000 80c7 	beq.w	8008f44 <HAL_UART_IRQHandler+0x1dc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008db6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008dba:	d003      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x5c>
 8008dbc:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8008dc0:	f040 81a6 	bne.w	8009110 <HAL_UART_IRQHandler+0x3a8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008dc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008dc8:	d006      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008dca:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008dce:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	f040 81a3 	bne.w	800911e <HAL_UART_IRQHandler+0x3b6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008dd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ddc:	d003      	beq.n	8008de6 <HAL_UART_IRQHandler+0x7e>
 8008dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008de2:	f040 81a3 	bne.w	800912c <HAL_UART_IRQHandler+0x3c4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008de6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008dea:	d003      	beq.n	8008df4 <HAL_UART_IRQHandler+0x8c>
 8008dec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008df0:	f040 81ae 	bne.w	8009150 <HAL_UART_IRQHandler+0x3e8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008df4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_IRQHandler+0x98>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f2c0 81ac 	blt.w	8009158 <HAL_UART_IRQHandler+0x3f0>
}
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e02:	f013 0f01 	tst.w	r3, #1
 8008e06:	d009      	beq.n	8008e1c <HAL_UART_IRQHandler+0xb4>
 8008e08:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008e0c:	d006      	beq.n	8008e1c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e0e:	2601      	movs	r6, #1
 8008e10:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e16:	4332      	orrs	r2, r6
 8008e18:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e1c:	f013 0f02 	tst.w	r3, #2
 8008e20:	d074      	beq.n	8008f0c <HAL_UART_IRQHandler+0x1a4>
 8008e22:	f011 0f01 	tst.w	r1, #1
 8008e26:	d014      	beq.n	8008e52 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	2602      	movs	r6, #2
 8008e2c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e2e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e32:	f042 0204 	orr.w	r2, r2, #4
 8008e36:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e3a:	f013 0f04 	tst.w	r3, #4
 8008e3e:	d008      	beq.n	8008e52 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	2604      	movs	r6, #4
 8008e44:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e46:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e4a:	f042 0202 	orr.w	r2, r2, #2
 8008e4e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e52:	f013 0f08 	tst.w	r3, #8
 8008e56:	d00b      	beq.n	8008e70 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e58:	f000 0220 	and.w	r2, r0, #32
 8008e5c:	432a      	orrs	r2, r5
 8008e5e:	d007      	beq.n	8008e70 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e60:	6822      	ldr	r2, [r4, #0]
 8008e62:	2508      	movs	r5, #8
 8008e64:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e66:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e6a:	432a      	orrs	r2, r5
 8008e6c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e70:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008e74:	d00c      	beq.n	8008e90 <HAL_UART_IRQHandler+0x128>
 8008e76:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8008e7a:	d009      	beq.n	8008e90 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008e82:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e84:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e88:	f042 0220 	orr.w	r2, r2, #32
 8008e8c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	d0b3      	beq.n	8008e00 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e98:	f013 0f20 	tst.w	r3, #32
 8008e9c:	d00a      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9e:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ea2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8008ea6:	ea50 0301 	orrs.w	r3, r0, r1
 8008eaa:	d003      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8008eac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008eae:	b10b      	cbz	r3, 8008eb4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008eb4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	6892      	ldr	r2, [r2, #8]
 8008ebc:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ec0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	d030      	beq.n	8008f2a <HAL_UART_IRQHandler+0x1c2>
        UART_EndRxTransfer(huart);
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7ff fee5 	bl	8008c98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ed6:	d024      	beq.n	8008f22 <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	f102 0308 	add.w	r3, r2, #8
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	3208      	adds	r2, #8
 8008ee8:	e842 3100 	strex	r1, r3, [r2]
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d1f3      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8008ef0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008ef2:	b193      	cbz	r3, 8008f1a <HAL_UART_IRQHandler+0x1b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ef4:	4a11      	ldr	r2, [pc, #68]	; (8008f3c <HAL_UART_IRQHandler+0x1d4>)
 8008ef6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ef8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008efa:	f7fb f923 	bl	8004144 <HAL_DMA_Abort_IT>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f43f af7e 	beq.w	8008e00 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008f06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008f08:	4798      	blx	r3
 8008f0a:	e779      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f0c:	f013 0f04 	tst.w	r3, #4
 8008f10:	d09f      	beq.n	8008e52 <HAL_UART_IRQHandler+0xea>
 8008f12:	f011 0f01 	tst.w	r1, #1
 8008f16:	d09c      	beq.n	8008e52 <HAL_UART_IRQHandler+0xea>
 8008f18:	e792      	b.n	8008e40 <HAL_UART_IRQHandler+0xd8>
            HAL_UART_ErrorCallback(huart);
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f004 fcb7 	bl	800d88e <HAL_UART_ErrorCallback>
 8008f20:	e76e      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8008f22:	4620      	mov	r0, r4
 8008f24:	f004 fcb3 	bl	800d88e <HAL_UART_ErrorCallback>
 8008f28:	e76a      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f004 fcaf 	bl	800d88e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008f36:	e763      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
 8008f38:	10000001 	.word	0x10000001
 8008f3c:	08008d53 	.word	0x08008d53
 8008f40:	04000120 	.word	0x04000120
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f44:	f013 0f10 	tst.w	r3, #16
 8008f48:	f43f af35 	beq.w	8008db6 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f4c:	f010 0f10 	tst.w	r0, #16
 8008f50:	f43f af31 	beq.w	8008db6 <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f54:	2310      	movs	r3, #16
 8008f56:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f60:	f000 809f 	beq.w	80090a2 <HAL_UART_IRQHandler+0x33a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f64:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008f66:	680a      	ldr	r2, [r1, #0]
 8008f68:	4b7d      	ldr	r3, [pc, #500]	; (8009160 <HAL_UART_IRQHandler+0x3f8>)
 8008f6a:	487e      	ldr	r0, [pc, #504]	; (8009164 <HAL_UART_IRQHandler+0x3fc>)
 8008f6c:	4282      	cmp	r2, r0
 8008f6e:	bf18      	it	ne
 8008f70:	429a      	cmpne	r2, r3
 8008f72:	bf0c      	ite	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2300      	movne	r3, #0
 8008f78:	3018      	adds	r0, #24
 8008f7a:	4282      	cmp	r2, r0
 8008f7c:	bf08      	it	eq
 8008f7e:	f043 0301 	orreq.w	r3, r3, #1
 8008f82:	3018      	adds	r0, #24
 8008f84:	4282      	cmp	r2, r0
 8008f86:	bf08      	it	eq
 8008f88:	f043 0301 	orreq.w	r3, r3, #1
 8008f8c:	3018      	adds	r0, #24
 8008f8e:	4282      	cmp	r2, r0
 8008f90:	bf08      	it	eq
 8008f92:	f043 0301 	orreq.w	r3, r3, #1
 8008f96:	3018      	adds	r0, #24
 8008f98:	4282      	cmp	r2, r0
 8008f9a:	bf08      	it	eq
 8008f9c:	f043 0301 	orreq.w	r3, r3, #1
 8008fa0:	3018      	adds	r0, #24
 8008fa2:	4282      	cmp	r2, r0
 8008fa4:	bf08      	it	eq
 8008fa6:	f043 0301 	orreq.w	r3, r3, #1
 8008faa:	3018      	adds	r0, #24
 8008fac:	4282      	cmp	r2, r0
 8008fae:	bf08      	it	eq
 8008fb0:	f043 0301 	orreq.w	r3, r3, #1
 8008fb4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008fb8:	4282      	cmp	r2, r0
 8008fba:	bf08      	it	eq
 8008fbc:	f043 0301 	orreq.w	r3, r3, #1
 8008fc0:	3018      	adds	r0, #24
 8008fc2:	4282      	cmp	r2, r0
 8008fc4:	bf08      	it	eq
 8008fc6:	f043 0301 	orreq.w	r3, r3, #1
 8008fca:	3018      	adds	r0, #24
 8008fcc:	4282      	cmp	r2, r0
 8008fce:	bf08      	it	eq
 8008fd0:	f043 0301 	orreq.w	r3, r3, #1
 8008fd4:	3018      	adds	r0, #24
 8008fd6:	4282      	cmp	r2, r0
 8008fd8:	bf08      	it	eq
 8008fda:	f043 0301 	orreq.w	r3, r3, #1
 8008fde:	3018      	adds	r0, #24
 8008fe0:	4282      	cmp	r2, r0
 8008fe2:	bf08      	it	eq
 8008fe4:	f043 0301 	orreq.w	r3, r3, #1
 8008fe8:	3018      	adds	r0, #24
 8008fea:	4282      	cmp	r2, r0
 8008fec:	bf08      	it	eq
 8008fee:	f043 0301 	orreq.w	r3, r3, #1
 8008ff2:	3018      	adds	r0, #24
 8008ff4:	4282      	cmp	r2, r0
 8008ff6:	bf08      	it	eq
 8008ff8:	f043 0301 	orreq.w	r3, r3, #1
 8008ffc:	b913      	cbnz	r3, 8009004 <HAL_UART_IRQHandler+0x29c>
 8008ffe:	4b5a      	ldr	r3, [pc, #360]	; (8009168 <HAL_UART_IRQHandler+0x400>)
 8009000:	429a      	cmp	r2, r3
 8009002:	d14b      	bne.n	800909c <HAL_UART_IRQHandler+0x334>
 8009004:	6853      	ldr	r3, [r2, #4]
 8009006:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009008:	2b00      	cmp	r3, #0
 800900a:	f43f aef9 	beq.w	8008e00 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800900e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8009012:	429a      	cmp	r2, r3
 8009014:	f67f aef4 	bls.w	8008e00 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8009018:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800901c:	69cb      	ldr	r3, [r1, #28]
 800901e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009022:	d031      	beq.n	8009088 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009024:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	e852 3f00 	ldrex	r3, [r2]
 800902a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	e842 3100 	strex	r1, r3, [r2]
 8009032:	2900      	cmp	r1, #0
 8009034:	d1f6      	bne.n	8009024 <HAL_UART_IRQHandler+0x2bc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009036:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	f102 0308 	add.w	r3, r2, #8
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	3208      	adds	r2, #8
 8009046:	e842 3100 	strex	r1, r3, [r2]
 800904a:	2900      	cmp	r1, #0
 800904c:	d1f3      	bne.n	8009036 <HAL_UART_IRQHandler+0x2ce>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	f102 0308 	add.w	r3, r2, #8
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	3208      	adds	r2, #8
 800905e:	e842 3100 	strex	r1, r3, [r2]
 8009062:	2900      	cmp	r1, #0
 8009064:	d1f3      	bne.n	800904e <HAL_UART_IRQHandler+0x2e6>
          huart->RxState = HAL_UART_STATE_READY;
 8009066:	2320      	movs	r3, #32
 8009068:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	2300      	movs	r3, #0
 800906e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009070:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	e852 3f00 	ldrex	r3, [r2]
 8009076:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	e842 3100 	strex	r1, r3, [r2]
 800907e:	2900      	cmp	r1, #0
 8009080:	d1f6      	bne.n	8009070 <HAL_UART_IRQHandler+0x308>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009082:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009084:	f7fa fe02 	bl	8003c8c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009088:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800908c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009090:	1ac9      	subs	r1, r1, r3
 8009092:	b289      	uxth	r1, r1
 8009094:	4620      	mov	r0, r4
 8009096:	f004 fbf1 	bl	800d87c <HAL_UARTEx_RxEventCallback>
 800909a:	e6b1      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800909c:	6853      	ldr	r3, [r2, #4]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	e7b2      	b.n	8009008 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80090a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80090aa:	1ac9      	subs	r1, r1, r3
 80090ac:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80090ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80090b2:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 80090b4:	2900      	cmp	r1, #0
 80090b6:	f43f aea3 	beq.w	8008e00 <HAL_UART_IRQHandler+0x98>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f43f aea0 	beq.w	8008e00 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	e852 3f00 	ldrex	r3, [r2]
 80090c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	e842 3000 	strex	r0, r3, [r2]
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1f6      	bne.n	80090c0 <HAL_UART_IRQHandler+0x358>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d2:	4d26      	ldr	r5, [pc, #152]	; (800916c <HAL_UART_IRQHandler+0x404>)
 80090d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	f102 0308 	add.w	r3, r2, #8
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	402b      	ands	r3, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	3208      	adds	r2, #8
 80090e2:	e842 3000 	strex	r0, r3, [r2]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d1f4      	bne.n	80090d4 <HAL_UART_IRQHandler+0x36c>
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	2320      	movs	r3, #32
 80090ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	2300      	movs	r3, #0
 80090f2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80090f4:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	e852 3f00 	ldrex	r3, [r2]
 80090fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	e842 3000 	strex	r0, r3, [r2]
 8009104:	2800      	cmp	r0, #0
 8009106:	d1f6      	bne.n	80090f6 <HAL_UART_IRQHandler+0x38e>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009108:	4620      	mov	r0, r4
 800910a:	f004 fbb7 	bl	800d87c <HAL_UARTEx_RxEventCallback>
 800910e:	e677      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009114:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fdce 	bl	8009cb8 <HAL_UARTEx_WakeupCallback>
    return;
 800911c:	e670      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 800911e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009120:	2b00      	cmp	r3, #0
 8009122:	f43f ae6d 	beq.w	8008e00 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8009126:	4620      	mov	r0, r4
 8009128:	4798      	blx	r3
 800912a:	e669      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	e852 3f00 	ldrex	r3, [r2]
 8009132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	e842 3100 	strex	r1, r3, [r2]
 800913a:	2900      	cmp	r1, #0
 800913c:	d1f6      	bne.n	800912c <HAL_UART_IRQHandler+0x3c4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913e:	2320      	movs	r3, #32
 8009140:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009148:	4620      	mov	r0, r4
 800914a:	f7ff fdd3 	bl	8008cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914e:	e657      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fdb3 	bl	8009cbc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009156:	e653      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fdae 	bl	8009cba <HAL_UARTEx_RxFifoFullCallback>
    return;
 800915e:	e64f      	b.n	8008e00 <HAL_UART_IRQHandler+0x98>
 8009160:	40020010 	.word	0x40020010
 8009164:	40020028 	.word	0x40020028
 8009168:	400204b8 	.word	0x400204b8
 800916c:	effffffe 	.word	0xeffffffe

08009170 <UART_DMARxHalfCplt>:
{
 8009170:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009172:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009174:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009176:	2b01      	cmp	r3, #1
 8009178:	d002      	beq.n	8009180 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800917a:	f7ff fdbd 	bl	8008cf8 <HAL_UART_RxHalfCpltCallback>
}
 800917e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009180:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009184:	0849      	lsrs	r1, r1, #1
 8009186:	f004 fb79 	bl	800d87c <HAL_UARTEx_RxEventCallback>
 800918a:	e7f8      	b.n	800917e <UART_DMARxHalfCplt+0xe>

0800918c <UART_DMAReceiveCplt>:
{
 800918c:	b508      	push	{r3, lr}
 800918e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009190:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d029      	beq.n	80091ee <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	e852 3f00 	ldrex	r3, [r2]
 80091a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	e842 3100 	strex	r1, r3, [r2]
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d1f6      	bne.n	80091a0 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	f102 0308 	add.w	r3, r2, #8
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	3208      	adds	r2, #8
 80091c2:	e842 3100 	strex	r1, r3, [r2]
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d1f3      	bne.n	80091b2 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	f102 0308 	add.w	r3, r2, #8
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	3208      	adds	r2, #8
 80091da:	e842 3100 	strex	r1, r3, [r2]
 80091de:	2900      	cmp	r1, #0
 80091e0:	d1f3      	bne.n	80091ca <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 80091e2:	2320      	movs	r3, #32
 80091e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d005      	beq.n	80091fa <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d00c      	beq.n	800920e <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 80091f4:	f7ff fd7f 	bl	8008cf6 <HAL_UART_RxCpltCallback>
}
 80091f8:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	e852 3f00 	ldrex	r3, [r2]
 8009200:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	e842 3100 	strex	r1, r3, [r2]
 8009208:	2900      	cmp	r1, #0
 800920a:	d1f6      	bne.n	80091fa <UART_DMAReceiveCplt+0x6e>
 800920c:	e7ef      	b.n	80091ee <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800920e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009212:	f004 fb33 	bl	800d87c <HAL_UARTEx_RxEventCallback>
 8009216:	e7ef      	b.n	80091f8 <UART_DMAReceiveCplt+0x6c>

08009218 <UART_SetConfig>:
{
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800921e:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009220:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	6962      	ldr	r2, [r4, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	69e2      	ldr	r2, [r4, #28]
 800922e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009230:	4a84      	ldr	r2, [pc, #528]	; (8009444 <UART_SetConfig+0x22c>)
 8009232:	4002      	ands	r2, r0
 8009234:	4313      	orrs	r3, r2
 8009236:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009238:	6822      	ldr	r2, [r4, #0]
 800923a:	6853      	ldr	r3, [r2, #4]
 800923c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009240:	68e1      	ldr	r1, [r4, #12]
 8009242:	430b      	orrs	r3, r1
 8009244:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009246:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009248:	6822      	ldr	r2, [r4, #0]
 800924a:	4b7f      	ldr	r3, [pc, #508]	; (8009448 <UART_SetConfig+0x230>)
 800924c:	429a      	cmp	r2, r3
 800924e:	d001      	beq.n	8009254 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8009250:	6a23      	ldr	r3, [r4, #32]
 8009252:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009254:	6890      	ldr	r0, [r2, #8]
 8009256:	4b7d      	ldr	r3, [pc, #500]	; (800944c <UART_SetConfig+0x234>)
 8009258:	4003      	ands	r3, r0
 800925a:	430b      	orrs	r3, r1
 800925c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009262:	f023 030f 	bic.w	r3, r3, #15
 8009266:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009268:	430b      	orrs	r3, r1
 800926a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800926c:	6822      	ldr	r2, [r4, #0]
 800926e:	4b78      	ldr	r3, [pc, #480]	; (8009450 <UART_SetConfig+0x238>)
 8009270:	429a      	cmp	r2, r3
 8009272:	d021      	beq.n	80092b8 <UART_SetConfig+0xa0>
 8009274:	4b77      	ldr	r3, [pc, #476]	; (8009454 <UART_SetConfig+0x23c>)
 8009276:	429a      	cmp	r2, r3
 8009278:	f000 8084 	beq.w	8009384 <UART_SetConfig+0x16c>
 800927c:	4b76      	ldr	r3, [pc, #472]	; (8009458 <UART_SetConfig+0x240>)
 800927e:	429a      	cmp	r2, r3
 8009280:	f000 8098 	beq.w	80093b4 <UART_SetConfig+0x19c>
 8009284:	4b75      	ldr	r3, [pc, #468]	; (800945c <UART_SetConfig+0x244>)
 8009286:	429a      	cmp	r2, r3
 8009288:	f000 80ac 	beq.w	80093e4 <UART_SetConfig+0x1cc>
 800928c:	4b74      	ldr	r3, [pc, #464]	; (8009460 <UART_SetConfig+0x248>)
 800928e:	429a      	cmp	r2, r3
 8009290:	f000 80c0 	beq.w	8009414 <UART_SetConfig+0x1fc>
 8009294:	4b73      	ldr	r3, [pc, #460]	; (8009464 <UART_SetConfig+0x24c>)
 8009296:	429a      	cmp	r2, r3
 8009298:	f000 80ec 	beq.w	8009474 <UART_SetConfig+0x25c>
 800929c:	4b72      	ldr	r3, [pc, #456]	; (8009468 <UART_SetConfig+0x250>)
 800929e:	429a      	cmp	r2, r3
 80092a0:	f000 8123 	beq.w	80094ea <UART_SetConfig+0x2d2>
 80092a4:	4b71      	ldr	r3, [pc, #452]	; (800946c <UART_SetConfig+0x254>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f000 8137 	beq.w	800951a <UART_SetConfig+0x302>
 80092ac:	4b66      	ldr	r3, [pc, #408]	; (8009448 <UART_SetConfig+0x230>)
 80092ae:	429a      	cmp	r2, r3
 80092b0:	f000 814b 	beq.w	800954a <UART_SetConfig+0x332>
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	e033      	b.n	8009320 <UART_SetConfig+0x108>
 80092b8:	4b6d      	ldr	r3, [pc, #436]	; (8009470 <UART_SetConfig+0x258>)
 80092ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092c0:	2b28      	cmp	r3, #40	; 0x28
 80092c2:	d85d      	bhi.n	8009380 <UART_SetConfig+0x168>
 80092c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092c8:	005c0151 	.word	0x005c0151
 80092cc:	005c005c 	.word	0x005c005c
 80092d0:	005c005c 	.word	0x005c005c
 80092d4:	005c005c 	.word	0x005c005c
 80092d8:	005c029f 	.word	0x005c029f
 80092dc:	005c005c 	.word	0x005c005c
 80092e0:	005c005c 	.word	0x005c005c
 80092e4:	005c005c 	.word	0x005c005c
 80092e8:	005c0029 	.word	0x005c0029
 80092ec:	005c005c 	.word	0x005c005c
 80092f0:	005c005c 	.word	0x005c005c
 80092f4:	005c005c 	.word	0x005c005c
 80092f8:	005c02a1 	.word	0x005c02a1
 80092fc:	005c005c 	.word	0x005c005c
 8009300:	005c005c 	.word	0x005c005c
 8009304:	005c005c 	.word	0x005c005c
 8009308:	005c002b 	.word	0x005c002b
 800930c:	005c005c 	.word	0x005c005c
 8009310:	005c005c 	.word	0x005c005c
 8009314:	005c005c 	.word	0x005c005c
 8009318:	005a      	.short	0x005a
 800931a:	2308      	movs	r3, #8
 800931c:	e000      	b.n	8009320 <UART_SetConfig+0x108>
 800931e:	2320      	movs	r3, #32
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009320:	69e0      	ldr	r0, [r4, #28]
 8009322:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009326:	f000 81b7 	beq.w	8009698 <UART_SetConfig+0x480>
    switch (clocksource)
 800932a:	2b20      	cmp	r3, #32
 800932c:	f200 820f 	bhi.w	800974e <UART_SetConfig+0x536>
 8009330:	2b20      	cmp	r3, #32
 8009332:	f200 825b 	bhi.w	80097ec <UART_SetConfig+0x5d4>
 8009336:	e8df f013 	tbh	[pc, r3, lsl #1]
 800933a:	0226      	.short	0x0226
 800933c:	0259022c 	.word	0x0259022c
 8009340:	022f0259 	.word	0x022f0259
 8009344:	02590259 	.word	0x02590259
 8009348:	02340259 	.word	0x02340259
 800934c:	02590259 	.word	0x02590259
 8009350:	02590259 	.word	0x02590259
 8009354:	02590259 	.word	0x02590259
 8009358:	02390259 	.word	0x02390259
 800935c:	02590259 	.word	0x02590259
 8009360:	02590259 	.word	0x02590259
 8009364:	02590259 	.word	0x02590259
 8009368:	02590259 	.word	0x02590259
 800936c:	02590259 	.word	0x02590259
 8009370:	02590259 	.word	0x02590259
 8009374:	02590259 	.word	0x02590259
 8009378:	02450259 	.word	0x02450259
  UART_GETCLOCKSOURCE(huart, clocksource);
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	e7cf      	b.n	8009320 <UART_SetConfig+0x108>
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	e7cd      	b.n	8009320 <UART_SetConfig+0x108>
 8009384:	4b3a      	ldr	r3, [pc, #232]	; (8009470 <UART_SetConfig+0x258>)
 8009386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	2b05      	cmp	r3, #5
 800938e:	d80f      	bhi.n	80093b0 <UART_SetConfig+0x198>
 8009390:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009394:	023d00ed 	.word	0x023d00ed
 8009398:	00080006 	.word	0x00080006
 800939c:	000c000a 	.word	0x000c000a
 80093a0:	2308      	movs	r3, #8
 80093a2:	e7bd      	b.n	8009320 <UART_SetConfig+0x108>
 80093a4:	2310      	movs	r3, #16
 80093a6:	e7bb      	b.n	8009320 <UART_SetConfig+0x108>
 80093a8:	2320      	movs	r3, #32
 80093aa:	e7b9      	b.n	8009320 <UART_SetConfig+0x108>
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	e7b7      	b.n	8009320 <UART_SetConfig+0x108>
 80093b0:	2380      	movs	r3, #128	; 0x80
 80093b2:	e7b5      	b.n	8009320 <UART_SetConfig+0x108>
 80093b4:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <UART_SetConfig+0x258>)
 80093b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	2b05      	cmp	r3, #5
 80093be:	d80f      	bhi.n	80093e0 <UART_SetConfig+0x1c8>
 80093c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093c4:	02270104 	.word	0x02270104
 80093c8:	00080006 	.word	0x00080006
 80093cc:	000c000a 	.word	0x000c000a
 80093d0:	2308      	movs	r3, #8
 80093d2:	e7a5      	b.n	8009320 <UART_SetConfig+0x108>
 80093d4:	2310      	movs	r3, #16
 80093d6:	e7a3      	b.n	8009320 <UART_SetConfig+0x108>
 80093d8:	2320      	movs	r3, #32
 80093da:	e7a1      	b.n	8009320 <UART_SetConfig+0x108>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	e79f      	b.n	8009320 <UART_SetConfig+0x108>
 80093e0:	2380      	movs	r3, #128	; 0x80
 80093e2:	e79d      	b.n	8009320 <UART_SetConfig+0x108>
 80093e4:	4b22      	ldr	r3, [pc, #136]	; (8009470 <UART_SetConfig+0x258>)
 80093e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d80f      	bhi.n	8009410 <UART_SetConfig+0x1f8>
 80093f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093f4:	021100ee 	.word	0x021100ee
 80093f8:	00080006 	.word	0x00080006
 80093fc:	000c000a 	.word	0x000c000a
 8009400:	2308      	movs	r3, #8
 8009402:	e78d      	b.n	8009320 <UART_SetConfig+0x108>
 8009404:	2310      	movs	r3, #16
 8009406:	e78b      	b.n	8009320 <UART_SetConfig+0x108>
 8009408:	2320      	movs	r3, #32
 800940a:	e789      	b.n	8009320 <UART_SetConfig+0x108>
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	e787      	b.n	8009320 <UART_SetConfig+0x108>
 8009410:	2380      	movs	r3, #128	; 0x80
 8009412:	e785      	b.n	8009320 <UART_SetConfig+0x108>
 8009414:	4b16      	ldr	r3, [pc, #88]	; (8009470 <UART_SetConfig+0x258>)
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	2b05      	cmp	r3, #5
 800941e:	d80f      	bhi.n	8009440 <UART_SetConfig+0x228>
 8009420:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009424:	01fb00d8 	.word	0x01fb00d8
 8009428:	00080006 	.word	0x00080006
 800942c:	000c000a 	.word	0x000c000a
 8009430:	2308      	movs	r3, #8
 8009432:	e775      	b.n	8009320 <UART_SetConfig+0x108>
 8009434:	2310      	movs	r3, #16
 8009436:	e773      	b.n	8009320 <UART_SetConfig+0x108>
 8009438:	2320      	movs	r3, #32
 800943a:	e771      	b.n	8009320 <UART_SetConfig+0x108>
 800943c:	2340      	movs	r3, #64	; 0x40
 800943e:	e76f      	b.n	8009320 <UART_SetConfig+0x108>
 8009440:	2380      	movs	r3, #128	; 0x80
 8009442:	e76d      	b.n	8009320 <UART_SetConfig+0x108>
 8009444:	cfff69f3 	.word	0xcfff69f3
 8009448:	58000c00 	.word	0x58000c00
 800944c:	11fff4ff 	.word	0x11fff4ff
 8009450:	40011000 	.word	0x40011000
 8009454:	40004400 	.word	0x40004400
 8009458:	40004800 	.word	0x40004800
 800945c:	40004c00 	.word	0x40004c00
 8009460:	40005000 	.word	0x40005000
 8009464:	40011400 	.word	0x40011400
 8009468:	40007800 	.word	0x40007800
 800946c:	40007c00 	.word	0x40007c00
 8009470:	58024400 	.word	0x58024400
 8009474:	4b82      	ldr	r3, [pc, #520]	; (8009680 <UART_SetConfig+0x468>)
 8009476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800947c:	2b28      	cmp	r3, #40	; 0x28
 800947e:	d832      	bhi.n	80094e6 <UART_SetConfig+0x2ce>
 8009480:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009484:	003100aa 	.word	0x003100aa
 8009488:	00310031 	.word	0x00310031
 800948c:	00310031 	.word	0x00310031
 8009490:	00310031 	.word	0x00310031
 8009494:	003101cd 	.word	0x003101cd
 8009498:	00310031 	.word	0x00310031
 800949c:	00310031 	.word	0x00310031
 80094a0:	00310031 	.word	0x00310031
 80094a4:	00310029 	.word	0x00310029
 80094a8:	00310031 	.word	0x00310031
 80094ac:	00310031 	.word	0x00310031
 80094b0:	00310031 	.word	0x00310031
 80094b4:	0031002b 	.word	0x0031002b
 80094b8:	00310031 	.word	0x00310031
 80094bc:	00310031 	.word	0x00310031
 80094c0:	00310031 	.word	0x00310031
 80094c4:	0031002d 	.word	0x0031002d
 80094c8:	00310031 	.word	0x00310031
 80094cc:	00310031 	.word	0x00310031
 80094d0:	00310031 	.word	0x00310031
 80094d4:	002f      	.short	0x002f
 80094d6:	2308      	movs	r3, #8
 80094d8:	e722      	b.n	8009320 <UART_SetConfig+0x108>
 80094da:	2310      	movs	r3, #16
 80094dc:	e720      	b.n	8009320 <UART_SetConfig+0x108>
 80094de:	2320      	movs	r3, #32
 80094e0:	e71e      	b.n	8009320 <UART_SetConfig+0x108>
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	e71c      	b.n	8009320 <UART_SetConfig+0x108>
 80094e6:	2380      	movs	r3, #128	; 0x80
 80094e8:	e71a      	b.n	8009320 <UART_SetConfig+0x108>
 80094ea:	4b65      	ldr	r3, [pc, #404]	; (8009680 <UART_SetConfig+0x468>)
 80094ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	d80f      	bhi.n	8009516 <UART_SetConfig+0x2fe>
 80094f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80094fa:	0071      	.short	0x0071
 80094fc:	00060194 	.word	0x00060194
 8009500:	000a0008 	.word	0x000a0008
 8009504:	000c      	.short	0x000c
 8009506:	2308      	movs	r3, #8
 8009508:	e70a      	b.n	8009320 <UART_SetConfig+0x108>
 800950a:	2310      	movs	r3, #16
 800950c:	e708      	b.n	8009320 <UART_SetConfig+0x108>
 800950e:	2320      	movs	r3, #32
 8009510:	e706      	b.n	8009320 <UART_SetConfig+0x108>
 8009512:	2340      	movs	r3, #64	; 0x40
 8009514:	e704      	b.n	8009320 <UART_SetConfig+0x108>
 8009516:	2380      	movs	r3, #128	; 0x80
 8009518:	e702      	b.n	8009320 <UART_SetConfig+0x108>
 800951a:	4b59      	ldr	r3, [pc, #356]	; (8009680 <UART_SetConfig+0x468>)
 800951c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	2b05      	cmp	r3, #5
 8009524:	d80f      	bhi.n	8009546 <UART_SetConfig+0x32e>
 8009526:	e8df f013 	tbh	[pc, r3, lsl #1]
 800952a:	005b      	.short	0x005b
 800952c:	0006017e 	.word	0x0006017e
 8009530:	000a0008 	.word	0x000a0008
 8009534:	000c      	.short	0x000c
 8009536:	2308      	movs	r3, #8
 8009538:	e6f2      	b.n	8009320 <UART_SetConfig+0x108>
 800953a:	2310      	movs	r3, #16
 800953c:	e6f0      	b.n	8009320 <UART_SetConfig+0x108>
 800953e:	2320      	movs	r3, #32
 8009540:	e6ee      	b.n	8009320 <UART_SetConfig+0x108>
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	e6ec      	b.n	8009320 <UART_SetConfig+0x108>
 8009546:	2380      	movs	r3, #128	; 0x80
 8009548:	e6ea      	b.n	8009320 <UART_SetConfig+0x108>
 800954a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	f003 0307 	and.w	r3, r3, #7
 8009554:	2b05      	cmp	r3, #5
 8009556:	f200 8139 	bhi.w	80097cc <UART_SetConfig+0x5b4>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	4a43      	.short	0x4a43
 8009560:	038a544f 	.word	0x038a544f
 8009564:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009568:	e058      	b.n	800961c <UART_SetConfig+0x404>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <UART_SetConfig+0x358>
 800956e:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009570:	4944      	ldr	r1, [pc, #272]	; (8009684 <UART_SetConfig+0x46c>)
 8009572:	428a      	cmp	r2, r1
 8009574:	f040 8159 	bne.w	800982a <UART_SetConfig+0x612>
    switch (clocksource)
 8009578:	1e9a      	subs	r2, r3, #2
 800957a:	b2d2      	uxtb	r2, r2
 800957c:	2a1e      	cmp	r2, #30
 800957e:	f200 8127 	bhi.w	80097d0 <UART_SetConfig+0x5b8>
 8009582:	3b02      	subs	r3, #2
 8009584:	2b1e      	cmp	r3, #30
 8009586:	f200 8125 	bhi.w	80097d4 <UART_SetConfig+0x5bc>
 800958a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800958e:	002d      	.short	0x002d
 8009590:	00320123 	.word	0x00320123
 8009594:	01230123 	.word	0x01230123
 8009598:	00370123 	.word	0x00370123
 800959c:	01230123 	.word	0x01230123
 80095a0:	01230123 	.word	0x01230123
 80095a4:	01230123 	.word	0x01230123
 80095a8:	003c0123 	.word	0x003c0123
 80095ac:	01230123 	.word	0x01230123
 80095b0:	01230123 	.word	0x01230123
 80095b4:	01230123 	.word	0x01230123
 80095b8:	01230123 	.word	0x01230123
 80095bc:	01230123 	.word	0x01230123
 80095c0:	01230123 	.word	0x01230123
 80095c4:	01230123 	.word	0x01230123
 80095c8:	00740123 	.word	0x00740123
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095cc:	2300      	movs	r3, #0
 80095ce:	e7cf      	b.n	8009570 <UART_SetConfig+0x358>
 80095d0:	2300      	movs	r3, #0
 80095d2:	e7cd      	b.n	8009570 <UART_SetConfig+0x358>
 80095d4:	2300      	movs	r3, #0
 80095d6:	e7cb      	b.n	8009570 <UART_SetConfig+0x358>
 80095d8:	2301      	movs	r3, #1
 80095da:	e7c9      	b.n	8009570 <UART_SetConfig+0x358>
 80095dc:	2300      	movs	r3, #0
 80095de:	e7c7      	b.n	8009570 <UART_SetConfig+0x358>
 80095e0:	2300      	movs	r3, #0
 80095e2:	e7c5      	b.n	8009570 <UART_SetConfig+0x358>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e7c3      	b.n	8009570 <UART_SetConfig+0x358>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80095e8:	f7fd ffa6 	bl	8007538 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80095ec:	b9b0      	cbnz	r0, 800961c <UART_SetConfig+0x404>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e0fd      	b.n	80097ee <UART_SetConfig+0x5d6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095f2:	a803      	add	r0, sp, #12
 80095f4:	f7fd ffb2 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095f8:	9804      	ldr	r0, [sp, #16]
        break;
 80095fa:	e7f7      	b.n	80095ec <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fc:	4668      	mov	r0, sp
 80095fe:	f7fe f8a9 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009602:	9801      	ldr	r0, [sp, #4]
        break;
 8009604:	e7f2      	b.n	80095ec <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009606:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <UART_SetConfig+0x468>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f013 0f20 	tst.w	r3, #32
 800960e:	d034      	beq.n	800967a <UART_SetConfig+0x462>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009610:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <UART_SetConfig+0x468>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009618:	481b      	ldr	r0, [pc, #108]	; (8009688 <UART_SetConfig+0x470>)
 800961a:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800961c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800961e:	4b1b      	ldr	r3, [pc, #108]	; (800968c <UART_SetConfig+0x474>)
 8009620:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009624:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009628:	6865      	ldr	r5, [r4, #4]
 800962a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800962e:	4299      	cmp	r1, r3
 8009630:	f200 80d2 	bhi.w	80097d8 <UART_SetConfig+0x5c0>
 8009634:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009638:	f200 80d0 	bhi.w	80097dc <UART_SetConfig+0x5c4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963c:	2600      	movs	r6, #0
 800963e:	4633      	mov	r3, r6
 8009640:	4631      	mov	r1, r6
 8009642:	f7f6 feb5 	bl	80003b0 <__aeabi_uldivmod>
 8009646:	0209      	lsls	r1, r1, #8
 8009648:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800964c:	0200      	lsls	r0, r0, #8
 800964e:	086b      	lsrs	r3, r5, #1
 8009650:	18c0      	adds	r0, r0, r3
 8009652:	462a      	mov	r2, r5
 8009654:	4633      	mov	r3, r6
 8009656:	f141 0100 	adc.w	r1, r1, #0
 800965a:	f7f6 fea9 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800965e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009662:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <UART_SetConfig+0x478>)
 8009664:	429a      	cmp	r2, r3
 8009666:	f200 80bb 	bhi.w	80097e0 <UART_SetConfig+0x5c8>
          huart->Instance->BRR = usartdiv;
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	60d8      	str	r0, [r3, #12]
 800966e:	4630      	mov	r0, r6
 8009670:	e0bd      	b.n	80097ee <UART_SetConfig+0x5d6>
        pclk = (uint32_t) CSI_VALUE;
 8009672:	4808      	ldr	r0, [pc, #32]	; (8009694 <UART_SetConfig+0x47c>)
 8009674:	e7d2      	b.n	800961c <UART_SetConfig+0x404>
    switch (clocksource)
 8009676:	4807      	ldr	r0, [pc, #28]	; (8009694 <UART_SetConfig+0x47c>)
 8009678:	e7d0      	b.n	800961c <UART_SetConfig+0x404>
          pclk = (uint32_t) HSI_VALUE;
 800967a:	4803      	ldr	r0, [pc, #12]	; (8009688 <UART_SetConfig+0x470>)
 800967c:	e7ce      	b.n	800961c <UART_SetConfig+0x404>
 800967e:	bf00      	nop
 8009680:	58024400 	.word	0x58024400
 8009684:	58000c00 	.word	0x58000c00
 8009688:	03d09000 	.word	0x03d09000
 800968c:	08010f80 	.word	0x08010f80
 8009690:	000ffcff 	.word	0x000ffcff
 8009694:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8009698:	2b20      	cmp	r3, #32
 800969a:	d815      	bhi.n	80096c8 <UART_SetConfig+0x4b0>
 800969c:	2b20      	cmp	r3, #32
 800969e:	f200 80a1 	bhi.w	80097e4 <UART_SetConfig+0x5cc>
 80096a2:	e8df f003 	tbb	[pc, r3]
 80096a6:	3731      	.short	0x3731
 80096a8:	9f3a9f9f 	.word	0x9f3a9f9f
 80096ac:	9f3f9f9f 	.word	0x9f3f9f9f
 80096b0:	9f9f9f9f 	.word	0x9f9f9f9f
 80096b4:	9f449f9f 	.word	0x9f449f9f
 80096b8:	9f9f9f9f 	.word	0x9f9f9f9f
 80096bc:	9f9f9f9f 	.word	0x9f9f9f9f
 80096c0:	9f9f9f9f 	.word	0x9f9f9f9f
 80096c4:	9f9f      	.short	0x9f9f
 80096c6:	50          	.byte	0x50
 80096c7:	00          	.byte	0x00
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d11b      	bne.n	8009704 <UART_SetConfig+0x4ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096cc:	6862      	ldr	r2, [r4, #4]
 80096ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096d0:	4b59      	ldr	r3, [pc, #356]	; (8009838 <UART_SetConfig+0x620>)
 80096d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80096d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80096da:	0853      	lsrs	r3, r2, #1
 80096dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80096e0:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096e4:	f1a0 0210 	sub.w	r2, r0, #16
 80096e8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d87b      	bhi.n	80097e8 <UART_SetConfig+0x5d0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096f0:	f020 030f 	bic.w	r3, r0, #15
 80096f4:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80096f6:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096f8:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80096fc:	4318      	orrs	r0, r3
 80096fe:	60d0      	str	r0, [r2, #12]
 8009700:	2000      	movs	r0, #0
 8009702:	e074      	b.n	80097ee <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009704:	2001      	movs	r0, #1
 8009706:	e072      	b.n	80097ee <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009708:	f7fd f8de 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800970c:	2800      	cmp	r0, #0
 800970e:	d1dd      	bne.n	80096cc <UART_SetConfig+0x4b4>
 8009710:	2000      	movs	r0, #0
 8009712:	e06c      	b.n	80097ee <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009714:	f7fd f8ea 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
        break;
 8009718:	e7f8      	b.n	800970c <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800971a:	a803      	add	r0, sp, #12
 800971c:	f7fd ff1e 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009720:	9804      	ldr	r0, [sp, #16]
        break;
 8009722:	e7f3      	b.n	800970c <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009724:	4668      	mov	r0, sp
 8009726:	f7fe f815 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800972a:	9801      	ldr	r0, [sp, #4]
        break;
 800972c:	e7ee      	b.n	800970c <UART_SetConfig+0x4f4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800972e:	4b43      	ldr	r3, [pc, #268]	; (800983c <UART_SetConfig+0x624>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f013 0f20 	tst.w	r3, #32
 8009736:	d008      	beq.n	800974a <UART_SetConfig+0x532>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009738:	4b40      	ldr	r3, [pc, #256]	; (800983c <UART_SetConfig+0x624>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009740:	483f      	ldr	r0, [pc, #252]	; (8009840 <UART_SetConfig+0x628>)
 8009742:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009744:	e7c2      	b.n	80096cc <UART_SetConfig+0x4b4>
        pclk = (uint32_t) CSI_VALUE;
 8009746:	483f      	ldr	r0, [pc, #252]	; (8009844 <UART_SetConfig+0x62c>)
 8009748:	e7c0      	b.n	80096cc <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 800974a:	483d      	ldr	r0, [pc, #244]	; (8009840 <UART_SetConfig+0x628>)
 800974c:	e7be      	b.n	80096cc <UART_SetConfig+0x4b4>
    switch (clocksource)
 800974e:	2b40      	cmp	r3, #64	; 0x40
 8009750:	d117      	bne.n	8009782 <UART_SetConfig+0x56a>
 8009752:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800975a:	4a37      	ldr	r2, [pc, #220]	; (8009838 <UART_SetConfig+0x620>)
 800975c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009760:	fbb0 f0f2 	udiv	r0, r0, r2
 8009764:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009768:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976c:	f1a0 0210 	sub.w	r2, r0, #16
 8009770:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009774:	429a      	cmp	r2, r3
 8009776:	d844      	bhi.n	8009802 <UART_SetConfig+0x5ea>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	b280      	uxth	r0, r0
 800977c:	60d8      	str	r0, [r3, #12]
 800977e:	2000      	movs	r0, #0
 8009780:	e035      	b.n	80097ee <UART_SetConfig+0x5d6>
    switch (clocksource)
 8009782:	2001      	movs	r0, #1
 8009784:	e033      	b.n	80097ee <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009786:	f7fd f89f 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800978a:	2800      	cmp	r0, #0
 800978c:	d1e3      	bne.n	8009756 <UART_SetConfig+0x53e>
 800978e:	2000      	movs	r0, #0
 8009790:	e02d      	b.n	80097ee <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009792:	f7fd f8ab 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
        break;
 8009796:	e7f8      	b.n	800978a <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009798:	a803      	add	r0, sp, #12
 800979a:	f7fd fedf 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800979e:	9804      	ldr	r0, [sp, #16]
        break;
 80097a0:	e7f3      	b.n	800978a <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a2:	4668      	mov	r0, sp
 80097a4:	f7fd ffd6 	bl	8007754 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097a8:	9801      	ldr	r0, [sp, #4]
        break;
 80097aa:	e7ee      	b.n	800978a <UART_SetConfig+0x572>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ac:	4b23      	ldr	r3, [pc, #140]	; (800983c <UART_SetConfig+0x624>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f013 0f20 	tst.w	r3, #32
 80097b4:	d008      	beq.n	80097c8 <UART_SetConfig+0x5b0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097b6:	4b21      	ldr	r3, [pc, #132]	; (800983c <UART_SetConfig+0x624>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80097be:	4820      	ldr	r0, [pc, #128]	; (8009840 <UART_SetConfig+0x628>)
 80097c0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80097c2:	e7c8      	b.n	8009756 <UART_SetConfig+0x53e>
        pclk = (uint32_t) CSI_VALUE;
 80097c4:	481f      	ldr	r0, [pc, #124]	; (8009844 <UART_SetConfig+0x62c>)
 80097c6:	e7c6      	b.n	8009756 <UART_SetConfig+0x53e>
          pclk = (uint32_t) HSI_VALUE;
 80097c8:	481d      	ldr	r0, [pc, #116]	; (8009840 <UART_SetConfig+0x628>)
 80097ca:	e7c4      	b.n	8009756 <UART_SetConfig+0x53e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097cc:	2001      	movs	r0, #1
 80097ce:	e00e      	b.n	80097ee <UART_SetConfig+0x5d6>
    switch (clocksource)
 80097d0:	2001      	movs	r0, #1
 80097d2:	e00c      	b.n	80097ee <UART_SetConfig+0x5d6>
 80097d4:	2001      	movs	r0, #1
 80097d6:	e00a      	b.n	80097ee <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 80097d8:	2001      	movs	r0, #1
 80097da:	e008      	b.n	80097ee <UART_SetConfig+0x5d6>
 80097dc:	2001      	movs	r0, #1
 80097de:	e006      	b.n	80097ee <UART_SetConfig+0x5d6>
          ret = HAL_ERROR;
 80097e0:	2001      	movs	r0, #1
 80097e2:	e004      	b.n	80097ee <UART_SetConfig+0x5d6>
    switch (clocksource)
 80097e4:	2001      	movs	r0, #1
 80097e6:	e002      	b.n	80097ee <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 80097e8:	2001      	movs	r0, #1
 80097ea:	e000      	b.n	80097ee <UART_SetConfig+0x5d6>
    switch (clocksource)
 80097ec:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097f4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80097fc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80097fe:	b006      	add	sp, #24
 8009800:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8009802:	2001      	movs	r0, #1
 8009804:	e7f3      	b.n	80097ee <UART_SetConfig+0x5d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009806:	2304      	movs	r3, #4
 8009808:	e58a      	b.n	8009320 <UART_SetConfig+0x108>
 800980a:	2310      	movs	r3, #16
 800980c:	e588      	b.n	8009320 <UART_SetConfig+0x108>
 800980e:	2304      	movs	r3, #4
 8009810:	e586      	b.n	8009320 <UART_SetConfig+0x108>
 8009812:	2304      	movs	r3, #4
 8009814:	e584      	b.n	8009320 <UART_SetConfig+0x108>
 8009816:	2304      	movs	r3, #4
 8009818:	e582      	b.n	8009320 <UART_SetConfig+0x108>
 800981a:	2304      	movs	r3, #4
 800981c:	e580      	b.n	8009320 <UART_SetConfig+0x108>
 800981e:	2304      	movs	r3, #4
 8009820:	e57e      	b.n	8009320 <UART_SetConfig+0x108>
 8009822:	2304      	movs	r3, #4
 8009824:	e57c      	b.n	8009320 <UART_SetConfig+0x108>
 8009826:	2304      	movs	r3, #4
 8009828:	e57a      	b.n	8009320 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800982a:	69e2      	ldr	r2, [r4, #28]
 800982c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009830:	f47f ad7b 	bne.w	800932a <UART_SetConfig+0x112>
 8009834:	e732      	b.n	800969c <UART_SetConfig+0x484>
 8009836:	bf00      	nop
 8009838:	08010f80 	.word	0x08010f80
 800983c:	58024400 	.word	0x58024400
 8009840:	03d09000 	.word	0x03d09000
 8009844:	003d0900 	.word	0x003d0900

08009848 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009848:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800984a:	f013 0f01 	tst.w	r3, #1
 800984e:	d006      	beq.n	800985e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009850:	6802      	ldr	r2, [r0, #0]
 8009852:	6853      	ldr	r3, [r2, #4]
 8009854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009858:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800985a:	430b      	orrs	r3, r1
 800985c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800985e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009860:	f013 0f02 	tst.w	r3, #2
 8009864:	d006      	beq.n	8009874 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009866:	6802      	ldr	r2, [r0, #0]
 8009868:	6853      	ldr	r3, [r2, #4]
 800986a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800986e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009870:	430b      	orrs	r3, r1
 8009872:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009874:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009876:	f013 0f04 	tst.w	r3, #4
 800987a:	d006      	beq.n	800988a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800987c:	6802      	ldr	r2, [r0, #0]
 800987e:	6853      	ldr	r3, [r2, #4]
 8009880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009884:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009886:	430b      	orrs	r3, r1
 8009888:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800988a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800988c:	f013 0f08 	tst.w	r3, #8
 8009890:	d006      	beq.n	80098a0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009892:	6802      	ldr	r2, [r0, #0]
 8009894:	6853      	ldr	r3, [r2, #4]
 8009896:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800989a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800989c:	430b      	orrs	r3, r1
 800989e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098a2:	f013 0f10 	tst.w	r3, #16
 80098a6:	d006      	beq.n	80098b6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098a8:	6802      	ldr	r2, [r0, #0]
 80098aa:	6893      	ldr	r3, [r2, #8]
 80098ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80098b2:	430b      	orrs	r3, r1
 80098b4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098b8:	f013 0f20 	tst.w	r3, #32
 80098bc:	d006      	beq.n	80098cc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098be:	6802      	ldr	r2, [r0, #0]
 80098c0:	6893      	ldr	r3, [r2, #8]
 80098c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098d4:	6802      	ldr	r2, [r0, #0]
 80098d6:	6853      	ldr	r3, [r2, #4]
 80098d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80098de:	430b      	orrs	r3, r1
 80098e0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80098e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098e8:	d00b      	beq.n	8009902 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80098ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098f0:	d006      	beq.n	8009900 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098f2:	6802      	ldr	r2, [r0, #0]
 80098f4:	6853      	ldr	r3, [r2, #4]
 80098f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80098fa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6053      	str	r3, [r2, #4]
}
 8009900:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009902:	6802      	ldr	r2, [r0, #0]
 8009904:	6853      	ldr	r3, [r2, #4]
 8009906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800990a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800990c:	430b      	orrs	r3, r1
 800990e:	6053      	str	r3, [r2, #4]
 8009910:	e7eb      	b.n	80098ea <UART_AdvFeatureConfig+0xa2>

08009912 <UART_WaitOnFlagUntilTimeout>:
{
 8009912:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009916:	4680      	mov	r8, r0
 8009918:	460e      	mov	r6, r1
 800991a:	4615      	mov	r5, r2
 800991c:	4699      	mov	r9, r3
 800991e:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009920:	f8d8 2000 	ldr.w	r2, [r8]
 8009924:	69d4      	ldr	r4, [r2, #28]
 8009926:	ea36 0304 	bics.w	r3, r6, r4
 800992a:	bf0c      	ite	eq
 800992c:	f04f 0c01 	moveq.w	ip, #1
 8009930:	f04f 0c00 	movne.w	ip, #0
 8009934:	45ac      	cmp	ip, r5
 8009936:	d15a      	bne.n	80099ee <UART_WaitOnFlagUntilTimeout+0xdc>
    if (Timeout != HAL_MAX_DELAY)
 8009938:	f1b7 3fff 	cmp.w	r7, #4294967295
 800993c:	d0f2      	beq.n	8009924 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800993e:	f7f8 fe45 	bl	80025cc <HAL_GetTick>
 8009942:	eba0 0009 	sub.w	r0, r0, r9
 8009946:	42b8      	cmp	r0, r7
 8009948:	d830      	bhi.n	80099ac <UART_WaitOnFlagUntilTimeout+0x9a>
 800994a:	b37f      	cbz	r7, 80099ac <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800994c:	f8d8 3000 	ldr.w	r3, [r8]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	f012 0f04 	tst.w	r2, #4
 8009956:	d0e3      	beq.n	8009920 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009958:	69da      	ldr	r2, [r3, #28]
 800995a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800995e:	d0df      	beq.n	8009920 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009964:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009966:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	e852 3f00 	ldrex	r3, [r2]
 800996e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	e842 3100 	strex	r1, r3, [r2]
 8009976:	2900      	cmp	r1, #0
 8009978:	d1f5      	bne.n	8009966 <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	f102 0308 	add.w	r3, r2, #8
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	3208      	adds	r2, #8
 800998c:	e842 3100 	strex	r1, r3, [r2]
 8009990:	2900      	cmp	r1, #0
 8009992:	d1f2      	bne.n	800997a <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8009994:	2320      	movs	r3, #32
 8009996:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800999a:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800999e:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80099a2:	2300      	movs	r3, #0
 80099a4:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 80099a8:	2003      	movs	r0, #3
 80099aa:	e021      	b.n	80099f0 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099ac:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	e852 3f00 	ldrex	r3, [r2]
 80099b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	e842 3100 	strex	r1, r3, [r2]
 80099bc:	2900      	cmp	r1, #0
 80099be:	d1f5      	bne.n	80099ac <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c0:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	f102 0308 	add.w	r3, r2, #8
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	3208      	adds	r2, #8
 80099d2:	e842 3100 	strex	r1, r3, [r2]
 80099d6:	2900      	cmp	r1, #0
 80099d8:	d1f2      	bne.n	80099c0 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 80099da:	2320      	movs	r3, #32
 80099dc:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80099e0:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80099e4:	2300      	movs	r3, #0
 80099e6:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 80099ea:	2003      	movs	r0, #3
 80099ec:	e000      	b.n	80099f0 <UART_WaitOnFlagUntilTimeout+0xde>
  return HAL_OK;
 80099ee:	2000      	movs	r0, #0
}
 80099f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099f4 <HAL_UART_Transmit>:
{
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80099fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d15f      	bne.n	8009ac4 <HAL_UART_Transmit+0xd0>
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d05e      	beq.n	8009acc <HAL_UART_Transmit+0xd8>
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d05c      	beq.n	8009acc <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 8009a12:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d05a      	beq.n	8009ad0 <HAL_UART_Transmit+0xdc>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a26:	2321      	movs	r3, #33	; 0x21
 8009a28:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8009a2c:	f7f8 fdce 	bl	80025cc <HAL_GetTick>
 8009a30:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8009a32:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8009a36:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a40:	d00d      	beq.n	8009a5e <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 8009a42:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8009a46:	2300      	movs	r3, #0
 8009a48:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009a4c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	b35b      	cbz	r3, 8009aac <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a54:	f04f 0900 	mov.w	r9, #0
 8009a58:	f04f 0880 	mov.w	r8, #128	; 0x80
 8009a5c:	e015      	b.n	8009a8a <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	b913      	cbnz	r3, 8009a68 <HAL_UART_Transmit+0x74>
      pdata16bits = (const uint16_t *) pData;
 8009a62:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8009a64:	2500      	movs	r5, #0
 8009a66:	e7ee      	b.n	8009a46 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8009a68:	f04f 0a00 	mov.w	sl, #0
 8009a6c:	e7eb      	b.n	8009a46 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009a74:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8009a76:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	b292      	uxth	r2, r2
 8009a7e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a82:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	b183      	cbz	r3, 8009aac <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a8a:	9600      	str	r6, [sp, #0]
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	464a      	mov	r2, r9
 8009a90:	4641      	mov	r1, r8
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff ff3d 	bl	8009912 <UART_WaitOnFlagUntilTimeout>
 8009a98:	b9e0      	cbnz	r0, 8009ad4 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	d1e7      	bne.n	8009a6e <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8009aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa8:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8009aaa:	e7e4      	b.n	8009a76 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009aac:	9600      	str	r6, [sp, #0]
 8009aae:	463b      	mov	r3, r7
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2140      	movs	r1, #64	; 0x40
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f7ff ff2c 	bl	8009912 <UART_WaitOnFlagUntilTimeout>
 8009aba:	b968      	cbnz	r0, 8009ad8 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 8009abc:	2320      	movs	r3, #32
 8009abe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8009ac2:	e000      	b.n	8009ac6 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;
 8009ac4:	2002      	movs	r0, #2
}
 8009ac6:	b002      	add	sp, #8
 8009ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8009acc:	2001      	movs	r0, #1
 8009ace:	e7fa      	b.n	8009ac6 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8009ad0:	2002      	movs	r0, #2
 8009ad2:	e7f8      	b.n	8009ac6 <HAL_UART_Transmit+0xd2>
        return HAL_TIMEOUT;
 8009ad4:	2003      	movs	r0, #3
 8009ad6:	e7f6      	b.n	8009ac6 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8009ad8:	2003      	movs	r0, #3
 8009ada:	e7f4      	b.n	8009ac6 <HAL_UART_Transmit+0xd2>

08009adc <UART_CheckIdleState>:
{
 8009adc:	b530      	push	{r4, r5, lr}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009ae8:	f7f8 fd70 	bl	80025cc <HAL_GetTick>
 8009aec:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	f012 0f08 	tst.w	r2, #8
 8009af6:	d10f      	bne.n	8009b18 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f013 0f04 	tst.w	r3, #4
 8009b00:	d118      	bne.n	8009b34 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8009b02:	2320      	movs	r3, #32
 8009b04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8009b10:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009b14:	b003      	add	sp, #12
 8009b16:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2200      	movs	r2, #0
 8009b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff fef3 	bl	8009912 <UART_WaitOnFlagUntilTimeout>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d0e3      	beq.n	8009af8 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8009b30:	2003      	movs	r0, #3
 8009b32:	e7ef      	b.n	8009b14 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff fee5 	bl	8009912 <UART_WaitOnFlagUntilTimeout>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0da      	beq.n	8009b02 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8009b4c:	2003      	movs	r0, #3
 8009b4e:	e7e1      	b.n	8009b14 <UART_CheckIdleState+0x38>

08009b50 <HAL_UART_Init>:
  if (huart == NULL)
 8009b50:	b378      	cbz	r0, 8009bb2 <HAL_UART_Init+0x62>
{
 8009b52:	b510      	push	{r4, lr}
 8009b54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009b56:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009b5a:	b30b      	cbz	r3, 8009ba0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8009b5c:	2324      	movs	r3, #36	; 0x24
 8009b5e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8009b62:	6822      	ldr	r2, [r4, #0]
 8009b64:	6813      	ldr	r3, [r2, #0]
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7ff fb53 	bl	8009218 <UART_SetConfig>
 8009b72:	2801      	cmp	r0, #1
 8009b74:	d013      	beq.n	8009b9e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b78:	b9bb      	cbnz	r3, 8009baa <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	6853      	ldr	r3, [r2, #4]
 8009b7e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009b82:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	6893      	ldr	r3, [r2, #8]
 8009b88:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009b8c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009b8e:	6822      	ldr	r2, [r4, #0]
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	f043 0301 	orr.w	r3, r3, #1
 8009b96:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7ff ff9f 	bl	8009adc <UART_CheckIdleState>
}
 8009b9e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009ba0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009ba4:	f7f7 fffe 	bl	8001ba4 <HAL_UART_MspInit>
 8009ba8:	e7d8      	b.n	8009b5c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fe4c 	bl	8009848 <UART_AdvFeatureConfig>
 8009bb0:	e7e3      	b.n	8009b7a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009bb2:	2001      	movs	r0, #1
}
 8009bb4:	4770      	bx	lr
	...

08009bb8 <UART_Start_Receive_DMA>:
{
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8009bbe:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009bc0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bca:	2222      	movs	r2, #34	; 0x22
 8009bcc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009bd0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009bd2:	b18a      	cbz	r2, 8009bf8 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009bd4:	4922      	ldr	r1, [pc, #136]	; (8009c60 <UART_Start_Receive_DMA+0xa8>)
 8009bd6:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009bd8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009bda:	4922      	ldr	r1, [pc, #136]	; (8009c64 <UART_Start_Receive_DMA+0xac>)
 8009bdc:	6411      	str	r1, [r2, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bde:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009be0:	4921      	ldr	r1, [pc, #132]	; (8009c68 <UART_Start_Receive_DMA+0xb0>)
 8009be2:	64d1      	str	r1, [r2, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8009be4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8009be6:	2100      	movs	r1, #0
 8009be8:	6511      	str	r1, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009bea:	6801      	ldr	r1, [r0, #0]
 8009bec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009bee:	3124      	adds	r1, #36	; 0x24
 8009bf0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009bf2:	f7f9 fe6b 	bl	80038cc <HAL_DMA_Start_IT>
 8009bf6:	bb38      	cbnz	r0, 8009c48 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	b143      	cbz	r3, 8009c14 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	e852 3f00 	ldrex	r3, [r2]
 8009c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	e842 3100 	strex	r1, r3, [r2]
 8009c10:	2900      	cmp	r1, #0
 8009c12:	d1f6      	bne.n	8009c02 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	f102 0308 	add.w	r3, r2, #8
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	3208      	adds	r2, #8
 8009c24:	e842 3100 	strex	r1, r3, [r2]
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d1f3      	bne.n	8009c14 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	f102 0308 	add.w	r3, r2, #8
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	3208      	adds	r2, #8
 8009c3c:	e842 3100 	strex	r1, r3, [r2]
 8009c40:	2900      	cmp	r1, #0
 8009c42:	d1f3      	bne.n	8009c2c <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 8009c44:	2000      	movs	r0, #0
}
 8009c46:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c48:	2310      	movs	r3, #16
 8009c4a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8009c54:	2320      	movs	r3, #32
 8009c56:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	e7f3      	b.n	8009c46 <UART_Start_Receive_DMA+0x8e>
 8009c5e:	bf00      	nop
 8009c60:	0800918d 	.word	0x0800918d
 8009c64:	08009171 	.word	0x08009171
 8009c68:	08008cfb 	.word	0x08008cfb

08009c6c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c6c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009c6e:	b92b      	cbnz	r3, 8009c7c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c76:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8009c7a:	4770      	bx	lr
{
 8009c7c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c7e:	6803      	ldr	r3, [r0, #0]
 8009c80:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c82:	6899      	ldr	r1, [r3, #8]
 8009c84:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c86:	4d0a      	ldr	r5, [pc, #40]	; (8009cb0 <UARTEx_SetNbDataToProcess+0x44>)
 8009c88:	5c6b      	ldrb	r3, [r5, r1]
 8009c8a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c8c:	4c09      	ldr	r4, [pc, #36]	; (8009cb4 <UARTEx_SetNbDataToProcess+0x48>)
 8009c8e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c90:	fb93 f3f1 	sdiv	r3, r3, r1
 8009c94:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c98:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8009c9c:	5cab      	ldrb	r3, [r5, r2]
 8009c9e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ca0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8009caa:	bc30      	pop	{r4, r5}
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	08010fa0 	.word	0x08010fa0
 8009cb4:	08010f98 	.word	0x08010f98

08009cb8 <HAL_UARTEx_WakeupCallback>:
}
 8009cb8:	4770      	bx	lr

08009cba <HAL_UARTEx_RxFifoFullCallback>:
}
 8009cba:	4770      	bx	lr

08009cbc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009cbc:	4770      	bx	lr

08009cbe <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009cbe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d018      	beq.n	8009cf8 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009ccc:	2324      	movs	r3, #36	; 0x24
 8009cce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	f021 0101 	bic.w	r1, r1, #1
 8009cdc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cde:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce6:	6801      	ldr	r1, [r0, #0]
 8009ce8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009cf0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009cf8:	2002      	movs	r0, #2
}
 8009cfa:	4770      	bx	lr

08009cfc <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009cfe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d01d      	beq.n	8009d42 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009d06:	4604      	mov	r4, r0
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	2324      	movs	r3, #36	; 0x24
 8009d10:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d20:	6802      	ldr	r2, [r0, #0]
 8009d22:	6893      	ldr	r3, [r2, #8]
 8009d24:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009d28:	4319      	orrs	r1, r3
 8009d2a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009d2c:	f7ff ff9e 	bl	8009c6c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009d34:	2320      	movs	r3, #32
 8009d36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009d42:	2002      	movs	r0, #2
 8009d44:	e7fc      	b.n	8009d40 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009d46 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009d46:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009d48:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d01d      	beq.n	8009d8c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009d50:	4604      	mov	r4, r0
 8009d52:	2301      	movs	r3, #1
 8009d54:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009d58:	2324      	movs	r3, #36	; 0x24
 8009d5a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d5e:	6803      	ldr	r3, [r0, #0]
 8009d60:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	f022 0201 	bic.w	r2, r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d6a:	6802      	ldr	r2, [r0, #0]
 8009d6c:	6893      	ldr	r3, [r2, #8]
 8009d6e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8009d72:	4319      	orrs	r1, r3
 8009d74:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009d76:	f7ff ff79 	bl	8009c6c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009d84:	2000      	movs	r0, #0
 8009d86:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009d8c:	2002      	movs	r0, #2
 8009d8e:	e7fc      	b.n	8009d8a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08009d90 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d90:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d120      	bne.n	8009dda <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
{
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8009d9c:	b1f9      	cbz	r1, 8009dde <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 8009d9e:	b1f2      	cbz	r2, 8009dde <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
    __HAL_LOCK(huart);
 8009da0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d01c      	beq.n	8009de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
 8009da8:	2301      	movs	r3, #1
 8009daa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009dae:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009db0:	f7ff ff02 	bl	8009bb8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8009db4:	b9a0      	cbnz	r0, 8009de0 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d001      	beq.n	8009dc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
        status = HAL_ERROR;
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e00f      	b.n	8009de0 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	2210      	movs	r2, #16
 8009dc4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	e852 3f00 	ldrex	r3, [r2]
 8009dcc:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	e842 3100 	strex	r1, r3, [r2]
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	d1f6      	bne.n	8009dc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8009dd8:	e002      	b.n	8009de0 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>
    return HAL_BUSY;
 8009dda:	2002      	movs	r0, #2
}
 8009ddc:	4770      	bx	lr
      return HAL_ERROR;
 8009dde:	2001      	movs	r0, #1
}
 8009de0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 8009de2:	2002      	movs	r0, #2
 8009de4:	e7fc      	b.n	8009de0 <HAL_UARTEx_ReceiveToIdle_DMA+0x50>

08009de6 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009de6:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009dec:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009dee:	f001 fa2b 	bl	800b248 <xTaskGetSchedulerState>
 8009df2:	2801      	cmp	r0, #1
 8009df4:	d100      	bne.n	8009df8 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009df6:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8009df8:	f001 fdfc 	bl	800b9f4 <xPortSysTickHandler>
}
 8009dfc:	e7fb      	b.n	8009df6 <SysTick_Handler+0x10>
	...

08009e00 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e00:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e04:	b92b      	cbnz	r3, 8009e12 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <osKernelInitialize+0x20>)
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	b928      	cbnz	r0, 8009e18 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e10:	4770      	bx	lr
    stat = osErrorISR;
 8009e12:	f06f 0005 	mvn.w	r0, #5
 8009e16:	4770      	bx	lr
    } else {
      stat = osError;
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	24000b7c 	.word	0x24000b7c

08009e24 <osKernelStart>:
 8009e24:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e28:	b973      	cbnz	r3, 8009e48 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <osKernelStart+0x30>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d10d      	bne.n	8009e4e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8009e32:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e34:	2400      	movs	r4, #0
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <osKernelStart+0x34>)
 8009e38:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e3a:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <osKernelStart+0x30>)
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e40:	f000 ff40 	bl	800acc4 <vTaskStartScheduler>
      stat = osOK;
 8009e44:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009e46:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009e48:	f06f 0005 	mvn.w	r0, #5
 8009e4c:	4770      	bx	lr
      stat = osError;
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009e52:	4770      	bx	lr
 8009e54:	24000b7c 	.word	0x24000b7c
 8009e58:	e000ed00 	.word	0xe000ed00

08009e5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e62:	2200      	movs	r2, #0
 8009e64:	9203      	str	r2, [sp, #12]
 8009e66:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009e6a:	b198      	cbz	r0, 8009e94 <osThreadNew+0x38>
 8009e6c:	b993      	cbnz	r3, 8009e94 <osThreadNew+0x38>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009e6e:	b304      	cbz	r4, 8009eb2 <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009e70:	69a3      	ldr	r3, [r4, #24]
 8009e72:	b12b      	cbz	r3, 8009e80 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
 8009e74:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e76:	3b01      	subs	r3, #1
 8009e78:	2b37      	cmp	r3, #55	; 0x37
 8009e7a:	d902      	bls.n	8009e82 <osThreadNew+0x26>
        return (NULL);
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e00a      	b.n	8009e96 <osThreadNew+0x3a>
 8009e80:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	f013 0f01 	tst.w	r3, #1
 8009e88:	d123      	bne.n	8009ed2 <osThreadNew+0x76>
      }

      if (attr->stack_size > 0U) {
 8009e8a:	6962      	ldr	r2, [r4, #20]
 8009e8c:	b12a      	cbz	r2, 8009e9a <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e8e:	0892      	lsrs	r2, r2, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	b12b      	cbz	r3, 8009ea0 <osThreadNew+0x44>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e94:	9803      	ldr	r0, [sp, #12]
}
 8009e96:	b004      	add	sp, #16
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
    stack = configMINIMAL_STACK_SIZE;
 8009e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e9e:	e7f7      	b.n	8009e90 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ea0:	68e3      	ldr	r3, [r4, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1f6      	bne.n	8009e94 <osThreadNew+0x38>
      if (attr->name != NULL) {
 8009ea6:	6826      	ldr	r6, [r4, #0]
      if (mem == 0) {
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1f2      	bne.n	8009e94 <osThreadNew+0x38>
 8009eae:	4634      	mov	r4, r6
 8009eb0:	e002      	b.n	8009eb8 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8009eb2:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8009eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009eb8:	ab03      	add	r3, sp, #12
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	9500      	str	r5, [sp, #0]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	b292      	uxth	r2, r2
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	f000 fda6 	bl	800aa14 <xTaskCreate>
 8009ec8:	2801      	cmp	r0, #1
 8009eca:	d0e3      	beq.n	8009e94 <osThreadNew+0x38>
            hTask = NULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9303      	str	r3, [sp, #12]
 8009ed0:	e7e0      	b.n	8009e94 <osThreadNew+0x38>
        return (NULL);
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e7df      	b.n	8009e96 <osThreadNew+0x3a>

08009ed6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ed6:	b508      	push	{r3, lr}
 8009ed8:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009edc:	b933      	cbnz	r3, 8009eec <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009ede:	b908      	cbnz	r0, 8009ee4 <osDelay+0xe>
    stat = osOK;
 8009ee0:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009ee2:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8009ee4:	f001 f864 	bl	800afb0 <vTaskDelay>
    stat = osOK;
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e7fa      	b.n	8009ee2 <osDelay+0xc>
    stat = osErrorISR;
 8009eec:	f06f 0005 	mvn.w	r0, #5
 8009ef0:	e7f7      	b.n	8009ee2 <osDelay+0xc>

08009ef2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef2:	f100 0308 	add.w	r3, r0, #8
 8009ef6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8009efc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f00:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f06:	4770      	bx	lr

08009f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f0c:	4770      	bx	lr

08009f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f0e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f16:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f18:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f1a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009f1c:	6803      	ldr	r3, [r0, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	6003      	str	r3, [r0, #0]
}
 8009f22:	4770      	bx	lr

08009f24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f24:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f26:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009f2c:	d011      	beq.n	8009f52 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f2e:	f100 0308 	add.w	r3, r0, #8
 8009f32:	461c      	mov	r4, r3
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	42aa      	cmp	r2, r5
 8009f3a:	d9fa      	bls.n	8009f32 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f3c:	6863      	ldr	r3, [r4, #4]
 8009f3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f40:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f42:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f44:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f46:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009f48:	6803      	ldr	r3, [r0, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	6003      	str	r3, [r0, #0]
}
 8009f4e:	bc30      	pop	{r4, r5}
 8009f50:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f52:	6904      	ldr	r4, [r0, #16]
 8009f54:	e7f2      	b.n	8009f3c <vListInsert+0x18>

08009f56 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f56:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f58:	6841      	ldr	r1, [r0, #4]
 8009f5a:	6882      	ldr	r2, [r0, #8]
 8009f5c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f5e:	6841      	ldr	r1, [r0, #4]
 8009f60:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	4282      	cmp	r2, r0
 8009f66:	d006      	beq.n	8009f76 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f68:	2200      	movs	r2, #0
 8009f6a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	3a01      	subs	r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f72:	6818      	ldr	r0, [r3, #0]
}
 8009f74:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f76:	6882      	ldr	r2, [r0, #8]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	e7f5      	b.n	8009f68 <uxListRemove+0x12>

08009f7c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f80:	f001 fcc8 	bl	800b914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f84:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009f86:	f001 fce7 	bl	800b958 <vPortExitCritical>

	return xReturn;
}
 8009f8a:	fab4 f084 	clz	r0, r4
 8009f8e:	0940      	lsrs	r0, r0, #5
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <prvCopyDataToQueue>:
{
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	4604      	mov	r4, r0
 8009f96:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f98:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009f9c:	b95a      	cbnz	r2, 8009fb6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f9e:	6803      	ldr	r3, [r0, #0]
 8009fa0:	b11b      	cbz	r3, 8009faa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009fa2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fa4:	3601      	adds	r6, #1
 8009fa6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009faa:	6880      	ldr	r0, [r0, #8]
 8009fac:	f001 f9a6 	bl	800b2fc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7f6      	b.n	8009fa4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009fb6:	b96d      	cbnz	r5, 8009fd4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fb8:	6840      	ldr	r0, [r0, #4]
 8009fba:	f004 fb5d 	bl	800e678 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009fc2:	4413      	add	r3, r2
 8009fc4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc6:	68a2      	ldr	r2, [r4, #8]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d319      	bcc.n	800a000 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e7e7      	b.n	8009fa4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fd4:	68c0      	ldr	r0, [r0, #12]
 8009fd6:	f004 fb4f 	bl	800e678 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009fdc:	4251      	negs	r1, r2
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d202      	bcs.n	8009ff0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	440b      	add	r3, r1
 8009fee:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ff0:	b10e      	cbz	r6, 8009ff6 <prvCopyDataToQueue+0x64>
 8009ff2:	2d02      	cmp	r5, #2
 8009ff4:	d001      	beq.n	8009ffa <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e7d4      	b.n	8009fa4 <prvCopyDataToQueue+0x12>
				--uxMessagesWaiting;
 8009ffa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e7d1      	b.n	8009fa4 <prvCopyDataToQueue+0x12>
 800a000:	4628      	mov	r0, r5
 800a002:	e7cf      	b.n	8009fa4 <prvCopyDataToQueue+0x12>

0800a004 <prvCopyDataFromQueue>:
{
 800a004:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a006:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a008:	b16a      	cbz	r2, 800a026 <prvCopyDataFromQueue+0x22>
{
 800a00a:	b510      	push	{r4, lr}
 800a00c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a00e:	68d9      	ldr	r1, [r3, #12]
 800a010:	4411      	add	r1, r2
 800a012:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a014:	689c      	ldr	r4, [r3, #8]
 800a016:	42a1      	cmp	r1, r4
 800a018:	d301      	bcc.n	800a01e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a01e:	68d9      	ldr	r1, [r3, #12]
 800a020:	f004 fb2a 	bl	800e678 <memcpy>
}
 800a024:	bd10      	pop	{r4, pc}
 800a026:	4770      	bx	lr

0800a028 <prvUnlockQueue>:
{
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a02c:	f001 fc72 	bl	800b914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a030:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800a034:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a036:	2c00      	cmp	r4, #0
 800a038:	dd0f      	ble.n	800a05a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a03a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800a03e:	e002      	b.n	800a046 <prvUnlockQueue+0x1e>
			--cTxLock;
 800a040:	3c01      	subs	r4, #1
 800a042:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a044:	b14c      	cbz	r4, 800a05a <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a048:	b13b      	cbz	r3, 800a05a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a04a:	4630      	mov	r0, r6
 800a04c:	f001 f862 	bl	800b114 <xTaskRemoveFromEventList>
 800a050:	2800      	cmp	r0, #0
 800a052:	d0f5      	beq.n	800a040 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800a054:	f001 f8f2 	bl	800b23c <vTaskMissedYield>
 800a058:	e7f2      	b.n	800a040 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 800a05a:	23ff      	movs	r3, #255	; 0xff
 800a05c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a060:	f001 fc7a 	bl	800b958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a064:	f001 fc56 	bl	800b914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a068:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800a06c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a06e:	2c00      	cmp	r4, #0
 800a070:	dd0f      	ble.n	800a092 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a072:	f105 0610 	add.w	r6, r5, #16
 800a076:	e002      	b.n	800a07e <prvUnlockQueue+0x56>
				--cRxLock;
 800a078:	3c01      	subs	r4, #1
 800a07a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a07c:	b14c      	cbz	r4, 800a092 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a07e:	692b      	ldr	r3, [r5, #16]
 800a080:	b13b      	cbz	r3, 800a092 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a082:	4630      	mov	r0, r6
 800a084:	f001 f846 	bl	800b114 <xTaskRemoveFromEventList>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d0f5      	beq.n	800a078 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 800a08c:	f001 f8d6 	bl	800b23c <vTaskMissedYield>
 800a090:	e7f2      	b.n	800a078 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800a092:	23ff      	movs	r3, #255	; 0xff
 800a094:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a098:	f001 fc5e 	bl	800b958 <vPortExitCritical>
}
 800a09c:	bd70      	pop	{r4, r5, r6, pc}

0800a09e <xQueueGenericReset>:
{
 800a09e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800a0a0:	b1e0      	cbz	r0, 800a0dc <xQueueGenericReset+0x3e>
 800a0a2:	460d      	mov	r5, r1
 800a0a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a0a6:	f001 fc35 	bl	800b914 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a0ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0b0:	fb01 f303 	mul.w	r3, r1, r3
 800a0b4:	18d0      	adds	r0, r2, r3
 800a0b6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0bc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0be:	1a5b      	subs	r3, r3, r1
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0c4:	23ff      	movs	r3, #255	; 0xff
 800a0c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a0ce:	b9fd      	cbnz	r5, 800a110 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	b963      	cbnz	r3, 800a0ee <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800a0d4:	f001 fc40 	bl	800b958 <vPortExitCritical>
}
 800a0d8:	2001      	movs	r0, #1
 800a0da:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a0ec:	e7fe      	b.n	800a0ec <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ee:	f104 0010 	add.w	r0, r4, #16
 800a0f2:	f001 f80f 	bl	800b114 <xTaskRemoveFromEventList>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d0ec      	beq.n	800a0d4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800a0fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a102:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	e7e1      	b.n	800a0d4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a110:	f104 0010 	add.w	r0, r4, #16
 800a114:	f7ff feed 	bl	8009ef2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a11c:	f7ff fee9 	bl	8009ef2 <vListInitialise>
 800a120:	e7d8      	b.n	800a0d4 <xQueueGenericReset+0x36>

0800a122 <xQueueGenericCreate>:
	{
 800a122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a124:	b940      	cbnz	r0, 800a138 <xQueueGenericCreate+0x16>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	e7fe      	b.n	800a136 <xQueueGenericCreate+0x14>
 800a138:	460d      	mov	r5, r1
 800a13a:	4614      	mov	r4, r2
 800a13c:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a142:	3050      	adds	r0, #80	; 0x50
 800a144:	f001 fd6c 	bl	800bc20 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a148:	4606      	mov	r6, r0
 800a14a:	b158      	cbz	r0, 800a164 <xQueueGenericCreate+0x42>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a14c:	b165      	cbz	r5, 800a168 <xQueueGenericCreate+0x46>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a14e:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a152:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a154:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a156:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a158:	2101      	movs	r1, #1
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff ff9f 	bl	800a09e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a160:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 800a164:	4630      	mov	r0, r6
 800a166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a168:	4603      	mov	r3, r0
 800a16a:	e7f2      	b.n	800a152 <xQueueGenericCreate+0x30>

0800a16c <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800a16c:	b940      	cbnz	r0, 800a180 <xQueueCreateCountingSemaphore+0x14>
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	e7fe      	b.n	800a17e <xQueueCreateCountingSemaphore+0x12>
	{
 800a180:	b510      	push	{r4, lr}
 800a182:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800a184:	4288      	cmp	r0, r1
 800a186:	d208      	bcs.n	800a19a <xQueueCreateCountingSemaphore+0x2e>
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	e7fe      	b.n	800a198 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a19a:	2202      	movs	r2, #2
 800a19c:	2100      	movs	r1, #0
 800a19e:	f7ff ffc0 	bl	800a122 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a1a2:	b100      	cbz	r0, 800a1a6 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a1a4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a1a6:	bd10      	pop	{r4, pc}

0800a1a8 <xQueueGenericSend>:
{
 800a1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a1b0:	b188      	cbz	r0, 800a1d6 <xQueueGenericSend+0x2e>
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	461d      	mov	r5, r3
 800a1b6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1b8:	b1b1      	cbz	r1, 800a1e8 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1ba:	2d02      	cmp	r5, #2
 800a1bc:	d120      	bne.n	800a200 <xQueueGenericSend+0x58>
 800a1be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d01d      	beq.n	800a200 <xQueueGenericSend+0x58>
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueGenericSend+0x2c>
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a1e6:	e7fe      	b.n	800a1e6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0e5      	beq.n	800a1ba <xQueueGenericSend+0x12>
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	e7fe      	b.n	800a1fe <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a200:	f001 f822 	bl	800b248 <xTaskGetSchedulerState>
 800a204:	b950      	cbnz	r0, 800a21c <xQueueGenericSend+0x74>
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	b163      	cbz	r3, 800a224 <xQueueGenericSend+0x7c>
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	e7fe      	b.n	800a21a <xQueueGenericSend+0x72>
 800a21c:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800a220:	2700      	movs	r7, #0
 800a222:	e040      	b.n	800a2a6 <xQueueGenericSend+0xfe>
 800a224:	f04f 0800 	mov.w	r8, #0
 800a228:	e7fa      	b.n	800a220 <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a22a:	462a      	mov	r2, r5
 800a22c:	4631      	mov	r1, r6
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff feaf 	bl	8009f92 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a236:	b983      	cbnz	r3, 800a25a <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 800a238:	b148      	cbz	r0, 800a24e <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 800a23a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a242:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a24e:	f001 fb83 	bl	800b958 <vPortExitCritical>
				return pdPASS;
 800a252:	2001      	movs	r0, #1
}
 800a254:	b005      	add	sp, #20
 800a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a25a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a25e:	f000 ff59 	bl	800b114 <xTaskRemoveFromEventList>
 800a262:	2800      	cmp	r0, #0
 800a264:	d0f3      	beq.n	800a24e <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 800a266:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	e7e8      	b.n	800a24e <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 800a27c:	f001 fb6c 	bl	800b958 <vPortExitCritical>
					return errQUEUE_FULL;
 800a280:	2000      	movs	r0, #0
 800a282:	e7e7      	b.n	800a254 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a284:	a802      	add	r0, sp, #8
 800a286:	f000 ff8b 	bl	800b1a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a28a:	e01a      	b.n	800a2c2 <xQueueGenericSend+0x11a>
		prvLockQueue( pxQueue );
 800a28c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a290:	e023      	b.n	800a2da <xQueueGenericSend+0x132>
 800a292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a296:	e026      	b.n	800a2e6 <xQueueGenericSend+0x13e>
				prvUnlockQueue( pxQueue );
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff fec5 	bl	800a028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a29e:	f000 fe05 	bl	800aeac <xTaskResumeAll>
 800a2a2:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800a2a6:	f001 fb35 	bl	800b914 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a2ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d3bb      	bcc.n	800a22a <xQueueGenericSend+0x82>
 800a2b2:	2d02      	cmp	r5, #2
 800a2b4:	d0b9      	beq.n	800a22a <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2b6:	9b01      	ldr	r3, [sp, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0df      	beq.n	800a27c <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 800a2bc:	f1b8 0f00 	cmp.w	r8, #0
 800a2c0:	d0e0      	beq.n	800a284 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800a2c2:	f001 fb49 	bl	800b958 <vPortExitCritical>
		vTaskSuspendAll();
 800a2c6:	f000 fd49 	bl	800ad5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2ca:	f001 fb23 	bl	800b914 <vPortEnterCritical>
 800a2ce:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800a2d2:	b252      	sxtb	r2, r2
 800a2d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2d8:	d0d8      	beq.n	800a28c <xQueueGenericSend+0xe4>
 800a2da:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800a2de:	b252      	sxtb	r2, r2
 800a2e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2e4:	d0d5      	beq.n	800a292 <xQueueGenericSend+0xea>
 800a2e6:	f001 fb37 	bl	800b958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ea:	a901      	add	r1, sp, #4
 800a2ec:	a802      	add	r0, sp, #8
 800a2ee:	f000 ff63 	bl	800b1b8 <xTaskCheckForTimeOut>
 800a2f2:	bb00      	cbnz	r0, 800a336 <xQueueGenericSend+0x18e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2f4:	f001 fb0e 	bl	800b914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2f8:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800a2fc:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a300:	f001 fb2a 	bl	800b958 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a304:	45c1      	cmp	r9, r8
 800a306:	d1c7      	bne.n	800a298 <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a308:	9901      	ldr	r1, [sp, #4]
 800a30a:	f104 0010 	add.w	r0, r4, #16
 800a30e:	f000 fecb 	bl	800b0a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a312:	4620      	mov	r0, r4
 800a314:	f7ff fe88 	bl	800a028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a318:	f000 fdc8 	bl	800aeac <xTaskResumeAll>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d1c0      	bne.n	800a2a2 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800a320:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a328:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	e7b5      	b.n	800a2a2 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800a336:	4620      	mov	r0, r4
 800a338:	f7ff fe76 	bl	800a028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a33c:	f000 fdb6 	bl	800aeac <xTaskResumeAll>
			return errQUEUE_FULL;
 800a340:	2000      	movs	r0, #0
 800a342:	e787      	b.n	800a254 <xQueueGenericSend+0xac>

0800a344 <xQueueGenericSendFromISR>:
{
 800a344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a348:	b190      	cbz	r0, 800a370 <xQueueGenericSendFromISR+0x2c>
 800a34a:	460f      	mov	r7, r1
 800a34c:	4616      	mov	r6, r2
 800a34e:	461c      	mov	r4, r3
 800a350:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a352:	b1b1      	cbz	r1, 800a382 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a354:	2c02      	cmp	r4, #2
 800a356:	d120      	bne.n	800a39a <xQueueGenericSendFromISR+0x56>
 800a358:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d01d      	beq.n	800a39a <xQueueGenericSendFromISR+0x56>
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	e7fe      	b.n	800a36e <xQueueGenericSendFromISR+0x2a>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a380:	e7fe      	b.n	800a380 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a382:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0e5      	beq.n	800a354 <xQueueGenericSendFromISR+0x10>
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f001 fbe3 	bl	800bb64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a39e:	f3ef 8911 	mrs	r9, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a3b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d306      	bcc.n	800a3c8 <xQueueGenericSendFromISR+0x84>
 800a3ba:	2c02      	cmp	r4, #2
 800a3bc:	d004      	beq.n	800a3c8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800a3be:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3c0:	f389 8811 	msr	BASEPRI, r9
}
 800a3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3c8:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800a3cc:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f7ff fddb 	bl	8009f92 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a3dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a3e0:	d006      	beq.n	800a3f0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3e2:	f108 0301 	add.w	r3, r8, #1
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	e7e7      	b.n	800a3c0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3f2:	b90b      	cbnz	r3, 800a3f8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	e7e3      	b.n	800a3c0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a3fc:	f000 fe8a 	bl	800b114 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a400:	b11e      	cbz	r6, 800a40a <xQueueGenericSendFromISR+0xc6>
 800a402:	b110      	cbz	r0, 800a40a <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a404:	2001      	movs	r0, #1
 800a406:	6030      	str	r0, [r6, #0]
 800a408:	e7da      	b.n	800a3c0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800a40a:	2001      	movs	r0, #1
 800a40c:	e7d8      	b.n	800a3c0 <xQueueGenericSendFromISR+0x7c>

0800a40e <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800a40e:	b168      	cbz	r0, 800a42c <xQueueGiveFromISR+0x1e>
{
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	460c      	mov	r4, r1
 800a414:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a416:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a418:	b18b      	cbz	r3, 800a43e <xQueueGiveFromISR+0x30>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	e7fe      	b.n	800a42a <xQueueGiveFromISR+0x1c>
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a43c:	e7fe      	b.n	800a43c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a43e:	6803      	ldr	r3, [r0, #0]
 800a440:	b1eb      	cbz	r3, 800a47e <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a442:	f001 fb8f 	bl	800bb64 <vPortValidateInterruptPriority>
	__asm volatile
 800a446:	f3ef 8611 	mrs	r6, BASEPRI
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a45a:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a45c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a45e:	4293      	cmp	r3, r2
 800a460:	d926      	bls.n	800a4b0 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a462:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800a466:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a468:	3201      	adds	r2, #1
 800a46a:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d011      	beq.n	800a496 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a472:	3301      	adds	r3, #1
 800a474:	b25b      	sxtb	r3, r3
 800a476:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800a47a:	2001      	movs	r0, #1
 800a47c:	e019      	b.n	800a4b2 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a47e:	6883      	ldr	r3, [r0, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0de      	beq.n	800a442 <xQueueGiveFromISR+0x34>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	e7fe      	b.n	800a494 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a498:	b90b      	cbnz	r3, 800a49e <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800a49a:	2001      	movs	r0, #1
 800a49c:	e009      	b.n	800a4b2 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a49e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a4a2:	f000 fe37 	bl	800b114 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a4a6:	b13c      	cbz	r4, 800a4b8 <xQueueGiveFromISR+0xaa>
 800a4a8:	b130      	cbz	r0, 800a4b8 <xQueueGiveFromISR+0xaa>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	6020      	str	r0, [r4, #0]
 800a4ae:	e000      	b.n	800a4b2 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800a4b0:	2000      	movs	r0, #0
	__asm volatile
 800a4b2:	f386 8811 	msr	BASEPRI, r6
}
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	e7fa      	b.n	800a4b2 <xQueueGiveFromISR+0xa4>

0800a4bc <xQueueReceive>:
{
 800a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a4c4:	b180      	cbz	r0, 800a4e8 <xQueueReceive+0x2c>
 800a4c6:	460e      	mov	r6, r1
 800a4c8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4ca:	b1b1      	cbz	r1, 800a4fa <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4cc:	f000 febc 	bl	800b248 <xTaskGetSchedulerState>
 800a4d0:	b9f8      	cbnz	r0, 800a512 <xQueueReceive+0x56>
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	b30b      	cbz	r3, 800a51a <xQueueReceive+0x5e>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	e7fe      	b.n	800a4e6 <xQueueReceive+0x2a>
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0e5      	beq.n	800a4cc <xQueueReceive+0x10>
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	e7fe      	b.n	800a510 <xQueueReceive+0x54>
 800a512:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800a516:	2700      	movs	r7, #0
 800a518:	e041      	b.n	800a59e <xQueueReceive+0xe2>
 800a51a:	f04f 0800 	mov.w	r8, #0
 800a51e:	e7fa      	b.n	800a516 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a520:	4631      	mov	r1, r6
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff fd6e 	bl	800a004 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a528:	3d01      	subs	r5, #1
 800a52a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	b92b      	cbnz	r3, 800a53c <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 800a530:	f001 fa12 	bl	800b958 <vPortExitCritical>
				return pdPASS;
 800a534:	2001      	movs	r0, #1
}
 800a536:	b004      	add	sp, #16
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a53c:	f104 0010 	add.w	r0, r4, #16
 800a540:	f000 fde8 	bl	800b114 <xTaskRemoveFromEventList>
 800a544:	2800      	cmp	r0, #0
 800a546:	d0f3      	beq.n	800a530 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800a548:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a550:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	e7e8      	b.n	800a530 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800a55e:	f001 f9fb 	bl	800b958 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a562:	2000      	movs	r0, #0
 800a564:	e7e7      	b.n	800a536 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a566:	a802      	add	r0, sp, #8
 800a568:	f000 fe1a 	bl	800b1a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a56c:	e022      	b.n	800a5b4 <xQueueReceive+0xf8>
		prvLockQueue( pxQueue );
 800a56e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a572:	e02b      	b.n	800a5cc <xQueueReceive+0x110>
 800a574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a578:	e02e      	b.n	800a5d8 <xQueueReceive+0x11c>
				prvUnlockQueue( pxQueue );
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7ff fd54 	bl	800a028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a580:	f000 fc94 	bl	800aeac <xTaskResumeAll>
 800a584:	e009      	b.n	800a59a <xQueueReceive+0xde>
			prvUnlockQueue( pxQueue );
 800a586:	4620      	mov	r0, r4
 800a588:	f7ff fd4e 	bl	800a028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a58c:	f000 fc8e 	bl	800aeac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a590:	4620      	mov	r0, r4
 800a592:	f7ff fcf3 	bl	8009f7c <prvIsQueueEmpty>
 800a596:	2800      	cmp	r0, #0
 800a598:	d142      	bne.n	800a620 <xQueueReceive+0x164>
 800a59a:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800a59e:	f001 f9b9 	bl	800b914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	d1bb      	bne.n	800a520 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0d7      	beq.n	800a55e <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800a5ae:	f1b8 0f00 	cmp.w	r8, #0
 800a5b2:	d0d8      	beq.n	800a566 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 800a5b4:	f001 f9d0 	bl	800b958 <vPortExitCritical>
		vTaskSuspendAll();
 800a5b8:	f000 fbd0 	bl	800ad5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5bc:	f001 f9aa 	bl	800b914 <vPortEnterCritical>
 800a5c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a5c4:	b25b      	sxtb	r3, r3
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d0d0      	beq.n	800a56e <xQueueReceive+0xb2>
 800a5cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a5d0:	b25b      	sxtb	r3, r3
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d6:	d0cd      	beq.n	800a574 <xQueueReceive+0xb8>
 800a5d8:	f001 f9be 	bl	800b958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5dc:	a901      	add	r1, sp, #4
 800a5de:	a802      	add	r0, sp, #8
 800a5e0:	f000 fdea 	bl	800b1b8 <xTaskCheckForTimeOut>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d1ce      	bne.n	800a586 <xQueueReceive+0xca>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f7ff fcc7 	bl	8009f7c <prvIsQueueEmpty>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0c3      	beq.n	800a57a <xQueueReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5f2:	9901      	ldr	r1, [sp, #4]
 800a5f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a5f8:	f000 fd56 	bl	800b0a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f7ff fd13 	bl	800a028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a602:	f000 fc53 	bl	800aeac <xTaskResumeAll>
 800a606:	2800      	cmp	r0, #0
 800a608:	d1c7      	bne.n	800a59a <xQueueReceive+0xde>
					portYIELD_WITHIN_API();
 800a60a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a612:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	e7bc      	b.n	800a59a <xQueueReceive+0xde>
				return errQUEUE_EMPTY;
 800a620:	2000      	movs	r0, #0
 800a622:	e788      	b.n	800a536 <xQueueReceive+0x7a>

0800a624 <xQueueSemaphoreTake>:
{
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a626:	b085      	sub	sp, #20
 800a628:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a62a:	b158      	cbz	r0, 800a644 <xQueueSemaphoreTake+0x20>
 800a62c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a62e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a630:	b18b      	cbz	r3, 800a656 <xQueueSemaphoreTake+0x32>
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	e7fe      	b.n	800a642 <xQueueSemaphoreTake+0x1e>
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a654:	e7fe      	b.n	800a654 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a656:	f000 fdf7 	bl	800b248 <xTaskGetSchedulerState>
 800a65a:	b950      	cbnz	r0, 800a672 <xQueueSemaphoreTake+0x4e>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	b163      	cbz	r3, 800a67a <xQueueSemaphoreTake+0x56>
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	e7fe      	b.n	800a670 <xQueueSemaphoreTake+0x4c>
 800a672:	2600      	movs	r6, #0
 800a674:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800a676:	2500      	movs	r5, #0
 800a678:	e054      	b.n	800a724 <xQueueSemaphoreTake+0x100>
 800a67a:	2600      	movs	r6, #0
 800a67c:	4637      	mov	r7, r6
 800a67e:	e7fa      	b.n	800a676 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a680:	3b01      	subs	r3, #1
 800a682:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	b13b      	cbz	r3, 800a698 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	b94b      	cbnz	r3, 800a6a0 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 800a68c:	f001 f964 	bl	800b958 <vPortExitCritical>
				return pdPASS;
 800a690:	2601      	movs	r6, #1
}
 800a692:	4630      	mov	r0, r6
 800a694:	b005      	add	sp, #20
 800a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a698:	f000 fec6 	bl	800b428 <pvTaskIncrementMutexHeldCount>
 800a69c:	60a0      	str	r0, [r4, #8]
 800a69e:	e7f3      	b.n	800a688 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a0:	f104 0010 	add.w	r0, r4, #16
 800a6a4:	f000 fd36 	bl	800b114 <xTaskRemoveFromEventList>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0ef      	beq.n	800a68c <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	e7e4      	b.n	800a68c <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6c2:	b146      	cbz	r6, 800a6d6 <xQueueSemaphoreTake+0xb2>
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	e7fe      	b.n	800a6d4 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 800a6d6:	f001 f93f 	bl	800b958 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a6da:	e7da      	b.n	800a692 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6dc:	a802      	add	r0, sp, #8
 800a6de:	f000 fd5f 	bl	800b1a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	e029      	b.n	800a738 <xQueueSemaphoreTake+0x114>
		prvLockQueue( pxQueue );
 800a6e4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 800a6e8:	e032      	b.n	800a750 <xQueueSemaphoreTake+0x12c>
 800a6ea:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a6ee:	e035      	b.n	800a75c <xQueueSemaphoreTake+0x138>
						taskENTER_CRITICAL();
 800a6f0:	f001 f910 	bl	800b914 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6f4:	68a0      	ldr	r0, [r4, #8]
 800a6f6:	f000 fdb7 	bl	800b268 <xTaskPriorityInherit>
 800a6fa:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800a6fc:	f001 f92c 	bl	800b958 <vPortExitCritical>
 800a700:	e03c      	b.n	800a77c <xQueueSemaphoreTake+0x158>
				prvUnlockQueue( pxQueue );
 800a702:	4620      	mov	r0, r4
 800a704:	f7ff fc90 	bl	800a028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a708:	f000 fbd0 	bl	800aeac <xTaskResumeAll>
 800a70c:	e009      	b.n	800a722 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800a70e:	4620      	mov	r0, r4
 800a710:	f7ff fc8a 	bl	800a028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a714:	f000 fbca 	bl	800aeac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a718:	4620      	mov	r0, r4
 800a71a:	f7ff fc2f 	bl	8009f7c <prvIsQueueEmpty>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d143      	bne.n	800a7aa <xQueueSemaphoreTake+0x186>
 800a722:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800a724:	f001 f8f6 	bl	800b914 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1a8      	bne.n	800a680 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0c6      	beq.n	800a6c2 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800a734:	2f00      	cmp	r7, #0
 800a736:	d0d1      	beq.n	800a6dc <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 800a738:	f001 f90e 	bl	800b958 <vPortExitCritical>
		vTaskSuspendAll();
 800a73c:	f000 fb0e 	bl	800ad5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a740:	f001 f8e8 	bl	800b914 <vPortEnterCritical>
 800a744:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a748:	b25b      	sxtb	r3, r3
 800a74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74e:	d0c9      	beq.n	800a6e4 <xQueueSemaphoreTake+0xc0>
 800a750:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a754:	b25b      	sxtb	r3, r3
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75a:	d0c6      	beq.n	800a6ea <xQueueSemaphoreTake+0xc6>
 800a75c:	f001 f8fc 	bl	800b958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a760:	a901      	add	r1, sp, #4
 800a762:	a802      	add	r0, sp, #8
 800a764:	f000 fd28 	bl	800b1b8 <xTaskCheckForTimeOut>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d1d0      	bne.n	800a70e <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a76c:	4620      	mov	r0, r4
 800a76e:	f7ff fc05 	bl	8009f7c <prvIsQueueEmpty>
 800a772:	2800      	cmp	r0, #0
 800a774:	d0c5      	beq.n	800a702 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0b9      	beq.n	800a6f0 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a77c:	9901      	ldr	r1, [sp, #4]
 800a77e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a782:	f000 fc91 	bl	800b0a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff fc4e 	bl	800a028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a78c:	f000 fb8e 	bl	800aeac <xTaskResumeAll>
 800a790:	2800      	cmp	r0, #0
 800a792:	d1c6      	bne.n	800a722 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800a794:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	e7bb      	b.n	800a722 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	f43f af71 	beq.w	800a692 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 800a7b0:	f001 f8b0 	bl	800b914 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a7b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a7b6:	b119      	cbz	r1, 800a7c0 <xQueueSemaphoreTake+0x19c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a7b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7ba:	6819      	ldr	r1, [r3, #0]
 800a7bc:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7c0:	68a0      	ldr	r0, [r4, #8]
 800a7c2:	f000 fde1 	bl	800b388 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a7c6:	f001 f8c7 	bl	800b958 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a7ca:	2600      	movs	r6, #0
 800a7cc:	e761      	b.n	800a692 <xQueueSemaphoreTake+0x6e>

0800a7ce <xQueueReceiveFromISR>:
{
 800a7ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a7d2:	b1b0      	cbz	r0, 800a802 <xQueueReceiveFromISR+0x34>
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	4616      	mov	r6, r2
 800a7d8:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7da:	b1d9      	cbz	r1, 800a814 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7dc:	f001 f9c2 	bl	800bb64 <vPortValidateInterruptPriority>
	__asm volatile
 800a7e0:	f3ef 8811 	mrs	r8, BASEPRI
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7f4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7f6:	b9cf      	cbnz	r7, 800a82c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800a7f8:	2000      	movs	r0, #0
	__asm volatile
 800a7fa:	f388 8811 	msr	BASEPRI, r8
}
 800a7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a812:	e7fe      	b.n	800a812 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a814:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0e0      	beq.n	800a7dc <xQueueReceiveFromISR+0xe>
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	e7fe      	b.n	800a82a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a82c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800a830:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a834:	4629      	mov	r1, r5
 800a836:	4620      	mov	r0, r4
 800a838:	f7ff fbe4 	bl	800a004 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a83c:	3f01      	subs	r7, #1
 800a83e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a840:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a844:	d006      	beq.n	800a854 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a846:	f109 0301 	add.w	r3, r9, #1
 800a84a:	b25b      	sxtb	r3, r3
 800a84c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800a850:	2001      	movs	r0, #1
 800a852:	e7d2      	b.n	800a7fa <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	b90b      	cbnz	r3, 800a85c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800a858:	2001      	movs	r0, #1
 800a85a:	e7ce      	b.n	800a7fa <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85c:	f104 0010 	add.w	r0, r4, #16
 800a860:	f000 fc58 	bl	800b114 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800a864:	b11e      	cbz	r6, 800a86e <xQueueReceiveFromISR+0xa0>
 800a866:	b110      	cbz	r0, 800a86e <xQueueReceiveFromISR+0xa0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a868:	2001      	movs	r0, #1
 800a86a:	6030      	str	r0, [r6, #0]
 800a86c:	e7c5      	b.n	800a7fa <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800a86e:	2001      	movs	r0, #1
 800a870:	e7c3      	b.n	800a7fa <xQueueReceiveFromISR+0x2c>
	...

0800a874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a874:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a876:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a878:	4c08      	ldr	r4, [pc, #32]	; (800a89c <vQueueAddToRegistry+0x28>)
 800a87a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800a87e:	b12a      	cbz	r2, 800a88c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a880:	3301      	adds	r3, #1
 800a882:	2b08      	cmp	r3, #8
 800a884:	d1f9      	bne.n	800a87a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a88a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a88c:	4a03      	ldr	r2, [pc, #12]	; (800a89c <vQueueAddToRegistry+0x28>)
 800a88e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a892:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a896:	6058      	str	r0, [r3, #4]
				break;
 800a898:	e7f5      	b.n	800a886 <vQueueAddToRegistry+0x12>
 800a89a:	bf00      	nop
 800a89c:	24000b80 	.word	0x24000b80

0800a8a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8a8:	f001 f834 	bl	800b914 <vPortEnterCritical>
 800a8ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d00d      	beq.n	800a8d4 <vQueueWaitForMessageRestricted+0x34>
 800a8b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8bc:	b25b      	sxtb	r3, r3
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d00b      	beq.n	800a8dc <vQueueWaitForMessageRestricted+0x3c>
 800a8c4:	f001 f848 	bl	800b958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8ca:	b15b      	cbz	r3, 800a8e4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7ff fbab 	bl	800a028 <prvUnlockQueue>
	}
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a8da:	e7ed      	b.n	800a8b8 <vQueueWaitForMessageRestricted+0x18>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8e2:	e7ef      	b.n	800a8c4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a8ec:	f000 fbf4 	bl	800b0d8 <vTaskPlaceOnEventListRestricted>
 800a8f0:	e7ec      	b.n	800a8cc <vQueueWaitForMessageRestricted+0x2c>
	...

0800a8f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f4:	4b08      	ldr	r3, [pc, #32]	; (800a918 <prvResetNextTaskUnblockTime+0x24>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	b923      	cbnz	r3, 800a906 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8fc:	4b07      	ldr	r3, [pc, #28]	; (800a91c <prvResetNextTaskUnblockTime+0x28>)
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a906:	4b04      	ldr	r3, [pc, #16]	; (800a918 <prvResetNextTaskUnblockTime+0x24>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	4b02      	ldr	r3, [pc, #8]	; (800a91c <prvResetNextTaskUnblockTime+0x28>)
 800a912:	601a      	str	r2, [r3, #0]
	}
}
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	24000bc4 	.word	0x24000bc4
 800a91c:	2400106c 	.word	0x2400106c

0800a920 <prvIdleTask>:
{
 800a920:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a922:	4d19      	ldr	r5, [pc, #100]	; (800a988 <prvIdleTask+0x68>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a924:	4f19      	ldr	r7, [pc, #100]	; (800a98c <prvIdleTask+0x6c>)
				--uxCurrentNumberOfTasks;
 800a926:	4e1a      	ldr	r6, [pc, #104]	; (800a990 <prvIdleTask+0x70>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a928:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a994 <prvIdleTask+0x74>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b1db      	cbz	r3, 800a968 <prvIdleTask+0x48>
			taskENTER_CRITICAL();
 800a930:	f000 fff0 	bl	800b914 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a938:	1d20      	adds	r0, r4, #4
 800a93a:	f7ff fb0c 	bl	8009f56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a93e:	6833      	ldr	r3, [r6, #0]
 800a940:	3b01      	subs	r3, #1
 800a942:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	3b01      	subs	r3, #1
 800a948:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800a94a:	f001 f805 	bl	800b958 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a94e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a952:	f004 fba5 	bl	800f0a0 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800a956:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a958:	f001 f9fe 	bl	800bd58 <vPortFree>
			vPortFree( pxTCB );
 800a95c:	4620      	mov	r0, r4
 800a95e:	f001 f9fb 	bl	800bd58 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e3      	bne.n	800a930 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a968:	f8d8 3000 	ldr.w	r3, [r8]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d9dd      	bls.n	800a92c <prvIdleTask+0xc>
				taskYIELD();
 800a970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a978:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	e7d2      	b.n	800a92c <prvIdleTask+0xc>
 800a986:	bf00      	nop
 800a988:	24001030 	.word	0x24001030
 800a98c:	240010a4 	.word	0x240010a4
 800a990:	2400102c 	.word	0x2400102c
 800a994:	24000bcc 	.word	0x24000bcc

0800a998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4604      	mov	r4, r0
 800a99c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a99e:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <prvAddCurrentTaskToDelayedList+0x64>)
 800a9a0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9a2:	4b17      	ldr	r3, [pc, #92]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x68>)
 800a9a4:	6818      	ldr	r0, [r3, #0]
 800a9a6:	3004      	adds	r0, #4
 800a9a8:	f7ff fad5 	bl	8009f56 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a9b0:	d100      	bne.n	800a9b4 <prvAddCurrentTaskToDelayedList+0x1c>
 800a9b2:	b96d      	cbnz	r5, 800a9d0 <prvAddCurrentTaskToDelayedList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9b4:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9b6:	4b12      	ldr	r3, [pc, #72]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x68>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a9bc:	42a6      	cmp	r6, r4
 800a9be:	d90e      	bls.n	800a9de <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c0:	4b10      	ldr	r3, [pc, #64]	; (800aa04 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x68>)
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	3104      	adds	r1, #4
 800a9ca:	f7ff faab 	bl	8009f24 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9d0:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x68>)
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	3104      	adds	r1, #4
 800a9d6:	480c      	ldr	r0, [pc, #48]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x70>)
 800a9d8:	f7ff fa99 	bl	8009f0e <vListInsertEnd>
 800a9dc:	e7f7      	b.n	800a9ce <prvAddCurrentTaskToDelayedList+0x36>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9de:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <prvAddCurrentTaskToDelayedList+0x74>)
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x68>)
 800a9e4:	6819      	ldr	r1, [r3, #0]
 800a9e6:	3104      	adds	r1, #4
 800a9e8:	f7ff fa9c 	bl	8009f24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9ec:	4b08      	ldr	r3, [pc, #32]	; (800aa10 <prvAddCurrentTaskToDelayedList+0x78>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	d9ec      	bls.n	800a9ce <prvAddCurrentTaskToDelayedList+0x36>
					xNextTaskUnblockTime = xTimeToWake;
 800a9f4:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <prvAddCurrentTaskToDelayedList+0x78>)
 800a9f6:	601c      	str	r4, [r3, #0]
}
 800a9f8:	e7e9      	b.n	800a9ce <prvAddCurrentTaskToDelayedList+0x36>
 800a9fa:	bf00      	nop
 800a9fc:	240010b8 	.word	0x240010b8
 800aa00:	24000bc0 	.word	0x24000bc0
 800aa04:	24000bc8 	.word	0x24000bc8
 800aa08:	24001090 	.word	0x24001090
 800aa0c:	24000bc4 	.word	0x24000bc4
 800aa10:	2400106c 	.word	0x2400106c

0800aa14 <xTaskCreate>:
	{
 800aa14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	4680      	mov	r8, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa1e:	0096      	lsls	r6, r2, #2
 800aa20:	4630      	mov	r0, r6
 800aa22:	f001 f8fd 	bl	800bc20 <pvPortMalloc>
			if( pxStack != NULL )
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f000 80c2 	beq.w	800abb0 <xTaskCreate+0x19c>
 800aa2c:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa2e:	20bc      	movs	r0, #188	; 0xbc
 800aa30:	f001 f8f6 	bl	800bc20 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800aa34:	4604      	mov	r4, r0
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d060      	beq.n	800aafc <xTaskCreate+0xe8>
					pxNewTCB->pxStack = pxStack;
 800aa3a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	21a5      	movs	r1, #165	; 0xa5
 800aa40:	4638      	mov	r0, r7
 800aa42:	f003 fe41 	bl	800e6c8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa46:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	d05c      	beq.n	800ab08 <xTaskCreate+0xf4>
 800aa4e:	f105 3cff 	add.w	ip, r5, #4294967295
 800aa52:	f104 0333 	add.w	r3, r4, #51	; 0x33
 800aa56:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa58:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
 800aa5c:	f803 7f01 	strb.w	r7, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800aa60:	b10f      	cbz	r7, 800aa66 <xTaskCreate+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa62:	45ac      	cmp	ip, r5
 800aa64:	d1f8      	bne.n	800aa58 <xTaskCreate+0x44>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa66:	2300      	movs	r3, #0
 800aa68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aa6e:	2d37      	cmp	r5, #55	; 0x37
 800aa70:	bf28      	it	cs
 800aa72:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800aa74:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800aa76:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa78:	f04f 0b00 	mov.w	fp, #0
 800aa7c:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa80:	1d27      	adds	r7, r4, #4
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7ff fa40 	bl	8009f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa88:	f104 0018 	add.w	r0, r4, #24
 800aa8c:	f7ff fa3c 	bl	8009f08 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa90:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa92:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 800aa96:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa98:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800aa9a:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa9e:	f884 b0b8 	strb.w	fp, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aaa2:	2260      	movs	r2, #96	; 0x60
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800aaaa:	f003 fe0d 	bl	800e6c8 <memset>
 800aaae:	4b44      	ldr	r3, [pc, #272]	; (800abc0 <xTaskCreate+0x1ac>)
 800aab0:	65a3      	str	r3, [r4, #88]	; 0x58
 800aab2:	4b44      	ldr	r3, [pc, #272]	; (800abc4 <xTaskCreate+0x1b0>)
 800aab4:	65e3      	str	r3, [r4, #92]	; 0x5c
 800aab6:	4b44      	ldr	r3, [pc, #272]	; (800abc8 <xTaskCreate+0x1b4>)
 800aab8:	6623      	str	r3, [r4, #96]	; 0x60
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaba:	3e04      	subs	r6, #4
 800aabc:	4456      	add	r6, sl
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aabe:	464a      	mov	r2, r9
 800aac0:	4641      	mov	r1, r8
 800aac2:	f026 0007 	bic.w	r0, r6, #7
 800aac6:	f000 fef7 	bl	800b8b8 <pxPortInitialiseStack>
 800aaca:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800aacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aace:	b103      	cbz	r3, 800aad2 <xTaskCreate+0xbe>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aad0:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800aad2:	f000 ff1f 	bl	800b914 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800aad6:	4a3d      	ldr	r2, [pc, #244]	; (800abcc <xTaskCreate+0x1b8>)
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aade:	4b3c      	ldr	r3, [pc, #240]	; (800abd0 <xTaskCreate+0x1bc>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	b1ab      	cbz	r3, 800ab10 <xTaskCreate+0xfc>
			if( xSchedulerRunning == pdFALSE )
 800aae4:	4b3b      	ldr	r3, [pc, #236]	; (800abd4 <xTaskCreate+0x1c0>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	b9bb      	cbnz	r3, 800ab1a <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aaea:	4b39      	ldr	r3, [pc, #228]	; (800abd0 <xTaskCreate+0x1bc>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d811      	bhi.n	800ab1a <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 800aaf6:	4b36      	ldr	r3, [pc, #216]	; (800abd0 <xTaskCreate+0x1bc>)
 800aaf8:	601c      	str	r4, [r3, #0]
 800aafa:	e00e      	b.n	800ab1a <xTaskCreate+0x106>
					vPortFree( pxStack );
 800aafc:	4638      	mov	r0, r7
 800aafe:	f001 f92b 	bl	800bd58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab02:	f04f 30ff 	mov.w	r0, #4294967295
 800ab06:	e055      	b.n	800abb4 <xTaskCreate+0x1a0>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ab0e:	e7ad      	b.n	800aa6c <xTaskCreate+0x58>
			pxCurrentTCB = pxNewTCB;
 800ab10:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <xTaskCreate+0x1bc>)
 800ab12:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab14:	6813      	ldr	r3, [r2, #0]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d02b      	beq.n	800ab72 <xTaskCreate+0x15e>
		uxTaskNumber++;
 800ab1a:	4a2f      	ldr	r2, [pc, #188]	; (800abd8 <xTaskCreate+0x1c4>)
 800ab1c:	6813      	ldr	r3, [r2, #0]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab22:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800ab24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ab26:	4b2d      	ldr	r3, [pc, #180]	; (800abdc <xTaskCreate+0x1c8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4298      	cmp	r0, r3
 800ab2c:	d901      	bls.n	800ab32 <xTaskCreate+0x11e>
 800ab2e:	4b2b      	ldr	r3, [pc, #172]	; (800abdc <xTaskCreate+0x1c8>)
 800ab30:	6018      	str	r0, [r3, #0]
 800ab32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ab36:	4639      	mov	r1, r7
 800ab38:	4b29      	ldr	r3, [pc, #164]	; (800abe0 <xTaskCreate+0x1cc>)
 800ab3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab3e:	f7ff f9e6 	bl	8009f0e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ab42:	f000 ff09 	bl	800b958 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ab46:	4b23      	ldr	r3, [pc, #140]	; (800abd4 <xTaskCreate+0x1c0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d034      	beq.n	800abb8 <xTaskCreate+0x1a4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab4e:	4b20      	ldr	r3, [pc, #128]	; (800abd0 <xTaskCreate+0x1bc>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d230      	bcs.n	800abbc <xTaskCreate+0x1a8>
			taskYIELD_IF_USING_PREEMPTION();
 800ab5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800ab6e:	2001      	movs	r0, #1
 800ab70:	e020      	b.n	800abb4 <xTaskCreate+0x1a0>
 800ab72:	4d1b      	ldr	r5, [pc, #108]	; (800abe0 <xTaskCreate+0x1cc>)
 800ab74:	f505 668c 	add.w	r6, r5, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f7ff f9ba 	bl	8009ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab7e:	3514      	adds	r5, #20
 800ab80:	42ae      	cmp	r6, r5
 800ab82:	d1f9      	bne.n	800ab78 <xTaskCreate+0x164>
	vListInitialise( &xDelayedTaskList1 );
 800ab84:	4e17      	ldr	r6, [pc, #92]	; (800abe4 <xTaskCreate+0x1d0>)
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff f9b3 	bl	8009ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab8c:	4d16      	ldr	r5, [pc, #88]	; (800abe8 <xTaskCreate+0x1d4>)
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f7ff f9af 	bl	8009ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab94:	4815      	ldr	r0, [pc, #84]	; (800abec <xTaskCreate+0x1d8>)
 800ab96:	f7ff f9ac 	bl	8009ef2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ab9a:	4815      	ldr	r0, [pc, #84]	; (800abf0 <xTaskCreate+0x1dc>)
 800ab9c:	f7ff f9a9 	bl	8009ef2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800aba0:	4814      	ldr	r0, [pc, #80]	; (800abf4 <xTaskCreate+0x1e0>)
 800aba2:	f7ff f9a6 	bl	8009ef2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800aba6:	4b14      	ldr	r3, [pc, #80]	; (800abf8 <xTaskCreate+0x1e4>)
 800aba8:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abaa:	4b14      	ldr	r3, [pc, #80]	; (800abfc <xTaskCreate+0x1e8>)
 800abac:	601d      	str	r5, [r3, #0]
}
 800abae:	e7b4      	b.n	800ab1a <xTaskCreate+0x106>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800abb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
 800abb8:	2001      	movs	r0, #1
 800abba:	e7fb      	b.n	800abb4 <xTaskCreate+0x1a0>
 800abbc:	2001      	movs	r0, #1
		return xReturn;
 800abbe:	e7f9      	b.n	800abb4 <xTaskCreate+0x1a0>
 800abc0:	08011924 	.word	0x08011924
 800abc4:	08011944 	.word	0x08011944
 800abc8:	08011904 	.word	0x08011904
 800abcc:	2400102c 	.word	0x2400102c
 800abd0:	24000bc0 	.word	0x24000bc0
 800abd4:	2400108c 	.word	0x2400108c
 800abd8:	24001038 	.word	0x24001038
 800abdc:	2400103c 	.word	0x2400103c
 800abe0:	24000bcc 	.word	0x24000bcc
 800abe4:	24001040 	.word	0x24001040
 800abe8:	24001054 	.word	0x24001054
 800abec:	24001078 	.word	0x24001078
 800abf0:	240010a4 	.word	0x240010a4
 800abf4:	24001090 	.word	0x24001090
 800abf8:	24000bc4 	.word	0x24000bc4
 800abfc:	24000bc8 	.word	0x24000bc8

0800ac00 <vTaskDelete>:
	{
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800ac04:	f000 fe86 	bl	800b914 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ac08:	b35c      	cbz	r4, 800ac62 <vTaskDelete+0x62>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac0a:	1d25      	adds	r5, r4, #4
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f7ff f9a2 	bl	8009f56 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac14:	b11b      	cbz	r3, 800ac1e <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac16:	f104 0018 	add.w	r0, r4, #24
 800ac1a:	f7ff f99c 	bl	8009f56 <uxListRemove>
			uxTaskNumber++;
 800ac1e:	4a22      	ldr	r2, [pc, #136]	; (800aca8 <vTaskDelete+0xa8>)
 800ac20:	6813      	ldr	r3, [r2, #0]
 800ac22:	3301      	adds	r3, #1
 800ac24:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <vTaskDelete+0xac>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	d01c      	beq.n	800ac68 <vTaskDelete+0x68>
				--uxCurrentNumberOfTasks;
 800ac2e:	4a20      	ldr	r2, [pc, #128]	; (800acb0 <vTaskDelete+0xb0>)
 800ac30:	6813      	ldr	r3, [r2, #0]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	6013      	str	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac36:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800ac3a:	f004 fa31 	bl	800f0a0 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800ac3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ac40:	f001 f88a 	bl	800bd58 <vPortFree>
			vPortFree( pxTCB );
 800ac44:	4620      	mov	r0, r4
 800ac46:	f001 f887 	bl	800bd58 <vPortFree>
				prvResetNextTaskUnblockTime();
 800ac4a:	f7ff fe53 	bl	800a8f4 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 800ac4e:	f000 fe83 	bl	800b958 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800ac52:	4b18      	ldr	r3, [pc, #96]	; (800acb4 <vTaskDelete+0xb4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	b11b      	cbz	r3, 800ac60 <vTaskDelete+0x60>
			if( pxTCB == pxCurrentTCB )
 800ac58:	4b14      	ldr	r3, [pc, #80]	; (800acac <vTaskDelete+0xac>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d00c      	beq.n	800ac7a <vTaskDelete+0x7a>
	}
 800ac60:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <vTaskDelete+0xac>)
 800ac64:	681c      	ldr	r4, [r3, #0]
 800ac66:	e7d0      	b.n	800ac0a <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4813      	ldr	r0, [pc, #76]	; (800acb8 <vTaskDelete+0xb8>)
 800ac6c:	f7ff f94f 	bl	8009f0e <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800ac70:	4a12      	ldr	r2, [pc, #72]	; (800acbc <vTaskDelete+0xbc>)
 800ac72:	6813      	ldr	r3, [r2, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800ac78:	e7e9      	b.n	800ac4e <vTaskDelete+0x4e>
				configASSERT( uxSchedulerSuspended == 0 );
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <vTaskDelete+0xc0>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	b143      	cbz	r3, 800ac92 <vTaskDelete+0x92>
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	e7fe      	b.n	800ac90 <vTaskDelete+0x90>
				portYIELD_WITHIN_API();
 800ac92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ac96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
	}
 800aca6:	e7db      	b.n	800ac60 <vTaskDelete+0x60>
 800aca8:	24001038 	.word	0x24001038
 800acac:	24000bc0 	.word	0x24000bc0
 800acb0:	2400102c 	.word	0x2400102c
 800acb4:	2400108c 	.word	0x2400108c
 800acb8:	240010a4 	.word	0x240010a4
 800acbc:	24001030 	.word	0x24001030
 800acc0:	24001034 	.word	0x24001034

0800acc4 <vTaskStartScheduler>:
{
 800acc4:	b500      	push	{lr}
 800acc6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800acc8:	4b1c      	ldr	r3, [pc, #112]	; (800ad3c <vTaskStartScheduler+0x78>)
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	2300      	movs	r3, #0
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acd4:	491a      	ldr	r1, [pc, #104]	; (800ad40 <vTaskStartScheduler+0x7c>)
 800acd6:	481b      	ldr	r0, [pc, #108]	; (800ad44 <vTaskStartScheduler+0x80>)
 800acd8:	f7ff fe9c 	bl	800aa14 <xTaskCreate>
		if( xReturn == pdPASS )
 800acdc:	2801      	cmp	r0, #1
 800acde:	d005      	beq.n	800acec <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ace0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ace4:	d020      	beq.n	800ad28 <vTaskStartScheduler+0x64>
}
 800ace6:	b003      	add	sp, #12
 800ace8:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
 800acec:	f000 fbfc 	bl	800b4e8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800acf0:	2801      	cmp	r0, #1
 800acf2:	d1f5      	bne.n	800ace0 <vTaskStartScheduler+0x1c>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad04:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <vTaskStartScheduler+0x84>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3354      	adds	r3, #84	; 0x54
 800ad0a:	4a10      	ldr	r2, [pc, #64]	; (800ad4c <vTaskStartScheduler+0x88>)
 800ad0c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <vTaskStartScheduler+0x8c>)
 800ad10:	f04f 32ff 	mov.w	r2, #4294967295
 800ad14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <vTaskStartScheduler+0x90>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad1c:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <vTaskStartScheduler+0x94>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800ad22:	f000 fe91 	bl	800ba48 <xPortStartScheduler>
 800ad26:	e7de      	b.n	800ace6 <vTaskStartScheduler+0x22>
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad38:	e7fe      	b.n	800ad38 <vTaskStartScheduler+0x74>
 800ad3a:	bf00      	nop
 800ad3c:	24001068 	.word	0x24001068
 800ad40:	08010fa8 	.word	0x08010fa8
 800ad44:	0800a921 	.word	0x0800a921
 800ad48:	24000bc0 	.word	0x24000bc0
 800ad4c:	24000020 	.word	0x24000020
 800ad50:	2400106c 	.word	0x2400106c
 800ad54:	2400108c 	.word	0x2400108c
 800ad58:	240010b8 	.word	0x240010b8

0800ad5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ad5c:	4a02      	ldr	r2, [pc, #8]	; (800ad68 <vTaskSuspendAll+0xc>)
 800ad5e:	6813      	ldr	r3, [r2, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	6013      	str	r3, [r2, #0]
}
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	24001034 	.word	0x24001034

0800ad6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ad6c:	4b01      	ldr	r3, [pc, #4]	; (800ad74 <xTaskGetTickCount+0x8>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	240010b8 	.word	0x240010b8

0800ad78 <xTaskIncrementTick>:
{
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad7c:	4b40      	ldr	r3, [pc, #256]	; (800ae80 <xTaskIncrementTick+0x108>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d174      	bne.n	800ae6e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad84:	4b3f      	ldr	r3, [pc, #252]	; (800ae84 <xTaskIncrementTick+0x10c>)
 800ad86:	681e      	ldr	r6, [r3, #0]
 800ad88:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800ad8a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad8c:	b9c6      	cbnz	r6, 800adc0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800ad8e:	4b3e      	ldr	r3, [pc, #248]	; (800ae88 <xTaskIncrementTick+0x110>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	b143      	cbz	r3, 800ada8 <xTaskIncrementTick+0x30>
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	e7fe      	b.n	800ada6 <xTaskIncrementTick+0x2e>
 800ada8:	4a37      	ldr	r2, [pc, #220]	; (800ae88 <xTaskIncrementTick+0x110>)
 800adaa:	6811      	ldr	r1, [r2, #0]
 800adac:	4b37      	ldr	r3, [pc, #220]	; (800ae8c <xTaskIncrementTick+0x114>)
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	6010      	str	r0, [r2, #0]
 800adb2:	6019      	str	r1, [r3, #0]
 800adb4:	4a36      	ldr	r2, [pc, #216]	; (800ae90 <xTaskIncrementTick+0x118>)
 800adb6:	6813      	ldr	r3, [r2, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	f7ff fd9a 	bl	800a8f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adc0:	4b34      	ldr	r3, [pc, #208]	; (800ae94 <xTaskIncrementTick+0x11c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	42b3      	cmp	r3, r6
 800adc6:	d840      	bhi.n	800ae4a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adc8:	4b2f      	ldr	r3, [pc, #188]	; (800ae88 <xTaskIncrementTick+0x110>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	b13b      	cbz	r3, 800ade0 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800add0:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800ae88 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 800add6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800aea8 <xTaskIncrementTick+0x130>
 800adda:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800ae9c <xTaskIncrementTick+0x124>
 800adde:	e01b      	b.n	800ae18 <xTaskIncrementTick+0xa0>
BaseType_t xSwitchRequired = pdFALSE;
 800ade0:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade2:	4b2c      	ldr	r3, [pc, #176]	; (800ae94 <xTaskIncrementTick+0x11c>)
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	601a      	str	r2, [r3, #0]
					break;
 800adea:	e02f      	b.n	800ae4c <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 800adec:	4a29      	ldr	r2, [pc, #164]	; (800ae94 <xTaskIncrementTick+0x11c>)
 800adee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adf0:	e02c      	b.n	800ae4c <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 800adf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800adf6:	4639      	mov	r1, r7
 800adf8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800adfc:	f7ff f887 	bl	8009f0e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae00:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <xTaskIncrementTick+0x120>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	bf28      	it	cs
 800ae0c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0e4      	beq.n	800ade2 <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae18:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae20:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800ae22:	429e      	cmp	r6, r3
 800ae24:	d3e2      	bcc.n	800adec <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae26:	1d27      	adds	r7, r4, #4
 800ae28:	4638      	mov	r0, r7
 800ae2a:	f7ff f894 	bl	8009f56 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae30:	b11b      	cbz	r3, 800ae3a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae32:	f104 0018 	add.w	r0, r4, #24
 800ae36:	f7ff f88e 	bl	8009f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ae3c:	f8d9 3000 	ldr.w	r3, [r9]
 800ae40:	4298      	cmp	r0, r3
 800ae42:	d9d6      	bls.n	800adf2 <xTaskIncrementTick+0x7a>
 800ae44:	f8c9 0000 	str.w	r0, [r9]
 800ae48:	e7d3      	b.n	800adf2 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 800ae4a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <xTaskIncrementTick+0x120>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4a10      	ldr	r2, [pc, #64]	; (800ae9c <xTaskIncrementTick+0x124>)
 800ae5a:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	bf28      	it	cs
 800ae60:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 800ae62:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <xTaskIncrementTick+0x128>)
 800ae64:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bf18      	it	ne
 800ae6a:	2501      	movne	r5, #1
 800ae6c:	e004      	b.n	800ae78 <xTaskIncrementTick+0x100>
		++xPendedTicks;
 800ae6e:	4a0d      	ldr	r2, [pc, #52]	; (800aea4 <xTaskIncrementTick+0x12c>)
 800ae70:	6813      	ldr	r3, [r2, #0]
 800ae72:	3301      	adds	r3, #1
 800ae74:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ae76:	2500      	movs	r5, #0
}
 800ae78:	4628      	mov	r0, r5
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7e:	bf00      	nop
 800ae80:	24001034 	.word	0x24001034
 800ae84:	240010b8 	.word	0x240010b8
 800ae88:	24000bc4 	.word	0x24000bc4
 800ae8c:	24000bc8 	.word	0x24000bc8
 800ae90:	24001070 	.word	0x24001070
 800ae94:	2400106c 	.word	0x2400106c
 800ae98:	24000bc0 	.word	0x24000bc0
 800ae9c:	24000bcc 	.word	0x24000bcc
 800aea0:	240010bc 	.word	0x240010bc
 800aea4:	24001074 	.word	0x24001074
 800aea8:	2400103c 	.word	0x2400103c

0800aeac <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800aeac:	4b38      	ldr	r3, [pc, #224]	; (800af90 <xTaskResumeAll+0xe4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	b943      	cbnz	r3, 800aec4 <xTaskResumeAll+0x18>
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	e7fe      	b.n	800aec2 <xTaskResumeAll+0x16>
{
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 800aec8:	f000 fd24 	bl	800b914 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800aecc:	4b30      	ldr	r3, [pc, #192]	; (800af90 <xTaskResumeAll+0xe4>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	3a01      	subs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d149      	bne.n	800af6e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <xTaskResumeAll+0xe8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d04b      	beq.n	800af7a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aee2:	4b2d      	ldr	r3, [pc, #180]	; (800af98 <xTaskResumeAll+0xec>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d04b      	beq.n	800af82 <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeea:	4e2b      	ldr	r6, [pc, #172]	; (800af98 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 800aeec:	4f2b      	ldr	r7, [pc, #172]	; (800af9c <xTaskResumeAll+0xf0>)
 800aeee:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800afac <xTaskResumeAll+0x100>
 800aef2:	e002      	b.n	800aefa <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aef4:	6833      	ldr	r3, [r6, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d041      	beq.n	800af7e <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefa:	68f3      	ldr	r3, [r6, #12]
 800aefc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aefe:	f104 0018 	add.w	r0, r4, #24
 800af02:	f7ff f828 	bl	8009f56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af06:	1d25      	adds	r5, r4, #4
 800af08:	4628      	mov	r0, r5
 800af0a:	f7ff f824 	bl	8009f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	4298      	cmp	r0, r3
 800af14:	d900      	bls.n	800af18 <xTaskResumeAll+0x6c>
 800af16:	6038      	str	r0, [r7, #0]
 800af18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800af1c:	4629      	mov	r1, r5
 800af1e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800af22:	f7fe fff4 	bl	8009f0e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af26:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <xTaskResumeAll+0xf4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	429a      	cmp	r2, r3
 800af30:	d3e0      	bcc.n	800aef4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <xTaskResumeAll+0xf8>)
 800af34:	2201      	movs	r2, #1
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e7dc      	b.n	800aef4 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af3a:	3c01      	subs	r4, #1
 800af3c:	d005      	beq.n	800af4a <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 800af3e:	f7ff ff1b 	bl	800ad78 <xTaskIncrementTick>
 800af42:	2800      	cmp	r0, #0
 800af44:	d0f9      	beq.n	800af3a <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 800af46:	6035      	str	r5, [r6, #0]
 800af48:	e7f7      	b.n	800af3a <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 800af4a:	4b17      	ldr	r3, [pc, #92]	; (800afa8 <xTaskResumeAll+0xfc>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800af50:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <xTaskResumeAll+0xf8>)
 800af52:	681c      	ldr	r4, [r3, #0]
 800af54:	b164      	cbz	r4, 800af70 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800af56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800af6a:	2401      	movs	r4, #1
 800af6c:	e000      	b.n	800af70 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 800af6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800af70:	f000 fcf2 	bl	800b958 <vPortExitCritical>
}
 800af74:	4620      	mov	r0, r4
 800af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800af7a:	2400      	movs	r4, #0
 800af7c:	e7f8      	b.n	800af70 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800af7e:	f7ff fcb9 	bl	800a8f4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af82:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <xTaskResumeAll+0xfc>)
 800af84:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800af86:	2c00      	cmp	r4, #0
 800af88:	d0e2      	beq.n	800af50 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800af8a:	4e06      	ldr	r6, [pc, #24]	; (800afa4 <xTaskResumeAll+0xf8>)
 800af8c:	2501      	movs	r5, #1
 800af8e:	e7d6      	b.n	800af3e <xTaskResumeAll+0x92>
 800af90:	24001034 	.word	0x24001034
 800af94:	2400102c 	.word	0x2400102c
 800af98:	24001078 	.word	0x24001078
 800af9c:	2400103c 	.word	0x2400103c
 800afa0:	24000bc0 	.word	0x24000bc0
 800afa4:	240010bc 	.word	0x240010bc
 800afa8:	24001074 	.word	0x24001074
 800afac:	24000bcc 	.word	0x24000bcc

0800afb0 <vTaskDelay>:
	{
 800afb0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afb2:	b1a8      	cbz	r0, 800afe0 <vTaskDelay+0x30>
 800afb4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800afb6:	4b10      	ldr	r3, [pc, #64]	; (800aff8 <vTaskDelay+0x48>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	b143      	cbz	r3, 800afce <vTaskDelay+0x1e>
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	e7fe      	b.n	800afcc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800afce:	f7ff fec5 	bl	800ad5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afd2:	2100      	movs	r1, #0
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff fcdf 	bl	800a998 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800afda:	f7ff ff67 	bl	800aeac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800afde:	b948      	cbnz	r0, 800aff4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800afe0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	f3bf 8f6f 	isb	sy
	}
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	bf00      	nop
 800aff8:	24001034 	.word	0x24001034

0800affc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800affc:	4b24      	ldr	r3, [pc, #144]	; (800b090 <vTaskSwitchContext+0x94>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	b11b      	cbz	r3, 800b00a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b002:	4b24      	ldr	r3, [pc, #144]	; (800b094 <vTaskSwitchContext+0x98>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b00a:	4b22      	ldr	r3, [pc, #136]	; (800b094 <vTaskSwitchContext+0x98>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b010:	4b21      	ldr	r3, [pc, #132]	; (800b098 <vTaskSwitchContext+0x9c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	4920      	ldr	r1, [pc, #128]	; (800b09c <vTaskSwitchContext+0xa0>)
 800b01c:	588a      	ldr	r2, [r1, r2]
 800b01e:	b98a      	cbnz	r2, 800b044 <vTaskSwitchContext+0x48>
 800b020:	b13b      	cbz	r3, 800b032 <vTaskSwitchContext+0x36>
 800b022:	3b01      	subs	r3, #1
 800b024:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b028:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b02c:	b952      	cbnz	r2, 800b044 <vTaskSwitchContext+0x48>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1f7      	bne.n	800b022 <vTaskSwitchContext+0x26>
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	e7fe      	b.n	800b042 <vTaskSwitchContext+0x46>
 800b044:	4a15      	ldr	r2, [pc, #84]	; (800b09c <vTaskSwitchContext+0xa0>)
 800b046:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b04a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b04e:	6848      	ldr	r0, [r1, #4]
 800b050:	6840      	ldr	r0, [r0, #4]
 800b052:	6048      	str	r0, [r1, #4]
 800b054:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b058:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b05c:	3208      	adds	r2, #8
 800b05e:	4290      	cmp	r0, r2
 800b060:	d00f      	beq.n	800b082 <vTaskSwitchContext+0x86>
 800b062:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b066:	4a0d      	ldr	r2, [pc, #52]	; (800b09c <vTaskSwitchContext+0xa0>)
 800b068:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b06c:	6852      	ldr	r2, [r2, #4]
 800b06e:	68d1      	ldr	r1, [r2, #12]
 800b070:	4a0b      	ldr	r2, [pc, #44]	; (800b0a0 <vTaskSwitchContext+0xa4>)
 800b072:	6011      	str	r1, [r2, #0]
 800b074:	4908      	ldr	r1, [pc, #32]	; (800b098 <vTaskSwitchContext+0x9c>)
 800b076:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b078:	6813      	ldr	r3, [r2, #0]
 800b07a:	3354      	adds	r3, #84	; 0x54
 800b07c:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <vTaskSwitchContext+0xa8>)
 800b07e:	6013      	str	r3, [r2, #0]
}
 800b080:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b082:	6840      	ldr	r0, [r0, #4]
 800b084:	4a05      	ldr	r2, [pc, #20]	; (800b09c <vTaskSwitchContext+0xa0>)
 800b086:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b08a:	6050      	str	r0, [r2, #4]
 800b08c:	e7e9      	b.n	800b062 <vTaskSwitchContext+0x66>
 800b08e:	bf00      	nop
 800b090:	24001034 	.word	0x24001034
 800b094:	240010bc 	.word	0x240010bc
 800b098:	2400103c 	.word	0x2400103c
 800b09c:	24000bcc 	.word	0x24000bcc
 800b0a0:	24000bc0 	.word	0x24000bc0
 800b0a4:	24000020 	.word	0x24000020

0800b0a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b0a8:	b158      	cbz	r0, 800b0c2 <vTaskPlaceOnEventList+0x1a>
{
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ae:	4a09      	ldr	r2, [pc, #36]	; (800b0d4 <vTaskPlaceOnEventList+0x2c>)
 800b0b0:	6811      	ldr	r1, [r2, #0]
 800b0b2:	3118      	adds	r1, #24
 800b0b4:	f7fe ff36 	bl	8009f24 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7ff fc6c 	bl	800a998 <prvAddCurrentTaskToDelayedList>
}
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800b0d2:	e7fe      	b.n	800b0d2 <vTaskPlaceOnEventList+0x2a>
 800b0d4:	24000bc0 	.word	0x24000bc0

0800b0d8 <vTaskPlaceOnEventListRestricted>:
	{
 800b0d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800b0da:	b178      	cbz	r0, 800b0fc <vTaskPlaceOnEventListRestricted+0x24>
 800b0dc:	460d      	mov	r5, r1
 800b0de:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0e0:	4a0b      	ldr	r2, [pc, #44]	; (800b110 <vTaskPlaceOnEventListRestricted+0x38>)
 800b0e2:	6811      	ldr	r1, [r2, #0]
 800b0e4:	3118      	adds	r1, #24
 800b0e6:	f7fe ff12 	bl	8009f0e <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800b0ea:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	bf0c      	ite	eq
 800b0f0:	4628      	moveq	r0, r5
 800b0f2:	f04f 30ff 	movne.w	r0, #4294967295
 800b0f6:	f7ff fc4f 	bl	800a998 <prvAddCurrentTaskToDelayedList>
	}
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800b10c:	e7fe      	b.n	800b10c <vTaskPlaceOnEventListRestricted+0x34>
 800b10e:	bf00      	nop
 800b110:	24000bc0 	.word	0x24000bc0

0800b114 <xTaskRemoveFromEventList>:
{
 800b114:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b116:	68c3      	ldr	r3, [r0, #12]
 800b118:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b11a:	b324      	cbz	r4, 800b166 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b11c:	f104 0518 	add.w	r5, r4, #24
 800b120:	4628      	mov	r0, r5
 800b122:	f7fe ff18 	bl	8009f56 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b126:	4b18      	ldr	r3, [pc, #96]	; (800b188 <xTaskRemoveFromEventList+0x74>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	bb2b      	cbnz	r3, 800b178 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b12c:	1d25      	adds	r5, r4, #4
 800b12e:	4628      	mov	r0, r5
 800b130:	f7fe ff11 	bl	8009f56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b134:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <xTaskRemoveFromEventList+0x78>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4298      	cmp	r0, r3
 800b13c:	d901      	bls.n	800b142 <xTaskRemoveFromEventList+0x2e>
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <xTaskRemoveFromEventList+0x78>)
 800b140:	6018      	str	r0, [r3, #0]
 800b142:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b146:	4629      	mov	r1, r5
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <xTaskRemoveFromEventList+0x7c>)
 800b14a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b14e:	f7fe fede 	bl	8009f0e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <xTaskRemoveFromEventList+0x80>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d911      	bls.n	800b182 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800b15e:	2001      	movs	r0, #1
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <xTaskRemoveFromEventList+0x84>)
 800b162:	6018      	str	r0, [r3, #0]
}
 800b164:	bd38      	pop	{r3, r4, r5, pc}
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800b176:	e7fe      	b.n	800b176 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b178:	4629      	mov	r1, r5
 800b17a:	4808      	ldr	r0, [pc, #32]	; (800b19c <xTaskRemoveFromEventList+0x88>)
 800b17c:	f7fe fec7 	bl	8009f0e <vListInsertEnd>
 800b180:	e7e7      	b.n	800b152 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800b182:	2000      	movs	r0, #0
	return xReturn;
 800b184:	e7ee      	b.n	800b164 <xTaskRemoveFromEventList+0x50>
 800b186:	bf00      	nop
 800b188:	24001034 	.word	0x24001034
 800b18c:	2400103c 	.word	0x2400103c
 800b190:	24000bcc 	.word	0x24000bcc
 800b194:	24000bc0 	.word	0x24000bc0
 800b198:	240010bc 	.word	0x240010bc
 800b19c:	24001078 	.word	0x24001078

0800b1a0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1a0:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <vTaskInternalSetTimeOutState+0x10>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1a6:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <vTaskInternalSetTimeOutState+0x14>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6043      	str	r3, [r0, #4]
}
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	24001070 	.word	0x24001070
 800b1b4:	240010b8 	.word	0x240010b8

0800b1b8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800b1b8:	b1d0      	cbz	r0, 800b1f0 <xTaskCheckForTimeOut+0x38>
{
 800b1ba:	b570      	push	{r4, r5, r6, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800b1c0:	b1f9      	cbz	r1, 800b202 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800b1c2:	f000 fba7 	bl	800b914 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b1c6:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <xTaskCheckForTimeOut+0x7c>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d028      	beq.n	800b224 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1d2:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1d4:	4818      	ldr	r0, [pc, #96]	; (800b238 <xTaskCheckForTimeOut+0x80>)
 800b1d6:	6800      	ldr	r0, [r0, #0]
 800b1d8:	682e      	ldr	r6, [r5, #0]
 800b1da:	4286      	cmp	r6, r0
 800b1dc:	d001      	beq.n	800b1e2 <xTaskCheckForTimeOut+0x2a>
 800b1de:	4291      	cmp	r1, r2
 800b1e0:	d925      	bls.n	800b22e <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e2:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1e4:	4283      	cmp	r3, r0
 800b1e6:	d815      	bhi.n	800b214 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b1ec:	2401      	movs	r4, #1
 800b1ee:	e01a      	b.n	800b226 <xTaskCheckForTimeOut+0x6e>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800b200:	e7fe      	b.n	800b200 <xTaskCheckForTimeOut+0x48>
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800b212:	e7fe      	b.n	800b212 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	440b      	add	r3, r1
 800b218:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7ff ffc0 	bl	800b1a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b220:	2400      	movs	r4, #0
 800b222:	e000      	b.n	800b226 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800b224:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b226:	f000 fb97 	bl	800b958 <vPortExitCritical>
}
 800b22a:	4620      	mov	r0, r4
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800b22e:	2401      	movs	r4, #1
 800b230:	e7f9      	b.n	800b226 <xTaskCheckForTimeOut+0x6e>
 800b232:	bf00      	nop
 800b234:	240010b8 	.word	0x240010b8
 800b238:	24001070 	.word	0x24001070

0800b23c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b23c:	4b01      	ldr	r3, [pc, #4]	; (800b244 <vTaskMissedYield+0x8>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]
}
 800b242:	4770      	bx	lr
 800b244:	240010bc 	.word	0x240010bc

0800b248 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b248:	4b05      	ldr	r3, [pc, #20]	; (800b260 <xTaskGetSchedulerState+0x18>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	b133      	cbz	r3, 800b25c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <xTaskGetSchedulerState+0x1c>)
 800b250:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800b252:	2b00      	cmp	r3, #0
 800b254:	bf0c      	ite	eq
 800b256:	2002      	moveq	r0, #2
 800b258:	2000      	movne	r0, #0
 800b25a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b25c:	2001      	movs	r0, #1
	}
 800b25e:	4770      	bx	lr
 800b260:	2400108c 	.word	0x2400108c
 800b264:	24001034 	.word	0x24001034

0800b268 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800b268:	2800      	cmp	r0, #0
 800b26a:	d03f      	beq.n	800b2ec <xTaskPriorityInherit+0x84>
	{
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b272:	4a1f      	ldr	r2, [pc, #124]	; (800b2f0 <xTaskPriorityInherit+0x88>)
 800b274:	6812      	ldr	r2, [r2, #0]
 800b276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b278:	4293      	cmp	r3, r2
 800b27a:	d22e      	bcs.n	800b2da <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b27c:	6982      	ldr	r2, [r0, #24]
 800b27e:	2a00      	cmp	r2, #0
 800b280:	db05      	blt.n	800b28e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b282:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <xTaskPriorityInherit+0x88>)
 800b284:	6812      	ldr	r2, [r2, #0]
 800b286:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b288:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b28c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b28e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b292:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <xTaskPriorityInherit+0x8c>)
 800b294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b298:	6962      	ldr	r2, [r4, #20]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d005      	beq.n	800b2aa <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b29e:	4b14      	ldr	r3, [pc, #80]	; (800b2f0 <xTaskPriorityInherit+0x88>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	e01f      	b.n	800b2ea <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2aa:	1d25      	adds	r5, r4, #4
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f7fe fe52 	bl	8009f56 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <xTaskPriorityInherit+0x88>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b2b8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <xTaskPriorityInherit+0x90>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	d901      	bls.n	800b2c6 <xTaskPriorityInherit+0x5e>
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <xTaskPriorityInherit+0x90>)
 800b2c4:	6018      	str	r0, [r3, #0]
 800b2c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <xTaskPriorityInherit+0x8c>)
 800b2ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2d2:	f7fe fe1c 	bl	8009f0e <vListInsertEnd>
				xReturn = pdTRUE;
 800b2d6:	2001      	movs	r0, #1
 800b2d8:	e007      	b.n	800b2ea <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b2da:	4b05      	ldr	r3, [pc, #20]	; (800b2f0 <xTaskPriorityInherit+0x88>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	bf2c      	ite	cs
 800b2e6:	2000      	movcs	r0, #0
 800b2e8:	2001      	movcc	r0, #1
	}
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800b2ec:	2000      	movs	r0, #0
	}
 800b2ee:	4770      	bx	lr
 800b2f0:	24000bc0 	.word	0x24000bc0
 800b2f4:	24000bcc 	.word	0x24000bcc
 800b2f8:	2400103c 	.word	0x2400103c

0800b2fc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d03b      	beq.n	800b378 <xTaskPriorityDisinherit+0x7c>
	{
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800b304:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <xTaskPriorityDisinherit+0x80>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4283      	cmp	r3, r0
 800b30a:	d008      	beq.n	800b31e <xTaskPriorityDisinherit+0x22>
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	e7fe      	b.n	800b31c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800b31e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b320:	b943      	cbnz	r3, 800b334 <xTaskPriorityDisinherit+0x38>
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	e7fe      	b.n	800b332 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800b334:	3b01      	subs	r3, #1
 800b336:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b338:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b33a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b33c:	4291      	cmp	r1, r2
 800b33e:	d000      	beq.n	800b342 <xTaskPriorityDisinherit+0x46>
 800b340:	b10b      	cbz	r3, 800b346 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800b342:	2000      	movs	r0, #0
	}
 800b344:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b346:	1d05      	adds	r5, r0, #4
 800b348:	4628      	mov	r0, r5
 800b34a:	f7fe fe04 	bl	8009f56 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b34e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b350:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b352:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800b356:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b358:	4b09      	ldr	r3, [pc, #36]	; (800b380 <xTaskPriorityDisinherit+0x84>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4298      	cmp	r0, r3
 800b35e:	d901      	bls.n	800b364 <xTaskPriorityDisinherit+0x68>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <xTaskPriorityDisinherit+0x84>)
 800b362:	6018      	str	r0, [r3, #0]
 800b364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b368:	4629      	mov	r1, r5
 800b36a:	4b06      	ldr	r3, [pc, #24]	; (800b384 <xTaskPriorityDisinherit+0x88>)
 800b36c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b370:	f7fe fdcd 	bl	8009f0e <vListInsertEnd>
					xReturn = pdTRUE;
 800b374:	2001      	movs	r0, #1
 800b376:	e7e5      	b.n	800b344 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800b378:	2000      	movs	r0, #0
	}
 800b37a:	4770      	bx	lr
 800b37c:	24000bc0 	.word	0x24000bc0
 800b380:	2400103c 	.word	0x2400103c
 800b384:	24000bcc 	.word	0x24000bcc

0800b388 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800b388:	2800      	cmp	r0, #0
 800b38a:	d046      	beq.n	800b41a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800b390:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b392:	b943      	cbnz	r3, 800b3a6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	e7fe      	b.n	800b3a4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b3a6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b3a8:	4291      	cmp	r1, r2
 800b3aa:	bf38      	it	cc
 800b3ac:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b3ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d101      	bne.n	800b3b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b3b4:	428a      	cmp	r2, r1
 800b3b6:	d100      	bne.n	800b3ba <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800b3ba:	4b18      	ldr	r3, [pc, #96]	; (800b41c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4283      	cmp	r3, r0
 800b3c0:	d022      	beq.n	800b408 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800b3c2:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3c4:	6983      	ldr	r3, [r0, #24]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	db02      	blt.n	800b3d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ca:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800b3ce:	6181      	str	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b3d4:	4b12      	ldr	r3, [pc, #72]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b3d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b3da:	6963      	ldr	r3, [r4, #20]
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d1eb      	bne.n	800b3b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e0:	1d25      	adds	r5, r4, #4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7fe fdb7 	bl	8009f56 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800b3e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b3ea:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4298      	cmp	r0, r3
 800b3f0:	d901      	bls.n	800b3f6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b3f4:	6018      	str	r0, [r3, #0]
 800b3f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	4b08      	ldr	r3, [pc, #32]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b3fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b402:	f7fe fd84 	bl	8009f0e <vListInsertEnd>
	}
 800b406:	e7d7      	b.n	800b3b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800b418:	e7fe      	b.n	800b418 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800b41a:	4770      	bx	lr
 800b41c:	24000bc0 	.word	0x24000bc0
 800b420:	24000bcc 	.word	0x24000bcc
 800b424:	2400103c 	.word	0x2400103c

0800b428 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b428:	4b05      	ldr	r3, [pc, #20]	; (800b440 <pvTaskIncrementMutexHeldCount+0x18>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	b123      	cbz	r3, 800b438 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b42e:	4b04      	ldr	r3, [pc, #16]	; (800b440 <pvTaskIncrementMutexHeldCount+0x18>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b434:	3301      	adds	r3, #1
 800b436:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800b438:	4b01      	ldr	r3, [pc, #4]	; (800b440 <pvTaskIncrementMutexHeldCount+0x18>)
 800b43a:	6818      	ldr	r0, [r3, #0]
	}
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	24000bc0 	.word	0x24000bc0

0800b444 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b444:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b446:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b448:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d80c      	bhi.n	800b468 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b44e:	1ad2      	subs	r2, r2, r3
 800b450:	6983      	ldr	r3, [r0, #24]
 800b452:	429a      	cmp	r2, r3
 800b454:	d301      	bcc.n	800b45a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b456:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800b458:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b45a:	1d01      	adds	r1, r0, #4
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <prvInsertTimerInActiveList+0x40>)
 800b45e:	6818      	ldr	r0, [r3, #0]
 800b460:	f7fe fd60 	bl	8009f24 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b464:	2000      	movs	r0, #0
 800b466:	e7f7      	b.n	800b458 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b468:	429a      	cmp	r2, r3
 800b46a:	d203      	bcs.n	800b474 <prvInsertTimerInActiveList+0x30>
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d301      	bcc.n	800b474 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800b470:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b472:	e7f1      	b.n	800b458 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b474:	1d01      	adds	r1, r0, #4
 800b476:	4b04      	ldr	r3, [pc, #16]	; (800b488 <prvInsertTimerInActiveList+0x44>)
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	f7fe fd53 	bl	8009f24 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b47e:	2000      	movs	r0, #0
 800b480:	e7ea      	b.n	800b458 <prvInsertTimerInActiveList+0x14>
 800b482:	bf00      	nop
 800b484:	240010c4 	.word	0x240010c4
 800b488:	240010c0 	.word	0x240010c0

0800b48c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b48c:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b48e:	f000 fa41 	bl	800b914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <prvCheckForValidListAndQueue+0x44>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	b113      	cbz	r3, 800b49e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b498:	f000 fa5e 	bl	800b958 <vPortExitCritical>
}
 800b49c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b49e:	4d0d      	ldr	r5, [pc, #52]	; (800b4d4 <prvCheckForValidListAndQueue+0x48>)
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7fe fd26 	bl	8009ef2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b4a6:	4c0c      	ldr	r4, [pc, #48]	; (800b4d8 <prvCheckForValidListAndQueue+0x4c>)
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7fe fd22 	bl	8009ef2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b4ae:	4b0b      	ldr	r3, [pc, #44]	; (800b4dc <prvCheckForValidListAndQueue+0x50>)
 800b4b0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <prvCheckForValidListAndQueue+0x54>)
 800b4b4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2110      	movs	r1, #16
 800b4ba:	200a      	movs	r0, #10
 800b4bc:	f7fe fe31 	bl	800a122 <xQueueGenericCreate>
 800b4c0:	4b03      	ldr	r3, [pc, #12]	; (800b4d0 <prvCheckForValidListAndQueue+0x44>)
 800b4c2:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d0e7      	beq.n	800b498 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4c8:	4906      	ldr	r1, [pc, #24]	; (800b4e4 <prvCheckForValidListAndQueue+0x58>)
 800b4ca:	f7ff f9d3 	bl	800a874 <vQueueAddToRegistry>
 800b4ce:	e7e3      	b.n	800b498 <prvCheckForValidListAndQueue+0xc>
 800b4d0:	240010f4 	.word	0x240010f4
 800b4d4:	240010c8 	.word	0x240010c8
 800b4d8:	240010dc 	.word	0x240010dc
 800b4dc:	240010c0 	.word	0x240010c0
 800b4e0:	240010c4 	.word	0x240010c4
 800b4e4:	08010fb0 	.word	0x08010fb0

0800b4e8 <xTimerCreateTimerTask>:
{
 800b4e8:	b500      	push	{lr}
 800b4ea:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 800b4ec:	f7ff ffce 	bl	800b48c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b4f0:	4b0d      	ldr	r3, [pc, #52]	; (800b528 <xTimerCreateTimerTask+0x40>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	b15b      	cbz	r3, 800b50e <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 800b4f6:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <xTimerCreateTimerTask+0x44>)
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	2300      	movs	r3, #0
 800b500:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b504:	490a      	ldr	r1, [pc, #40]	; (800b530 <xTimerCreateTimerTask+0x48>)
 800b506:	480b      	ldr	r0, [pc, #44]	; (800b534 <xTimerCreateTimerTask+0x4c>)
 800b508:	f7ff fa84 	bl	800aa14 <xTaskCreate>
	configASSERT( xReturn );
 800b50c:	b940      	cbnz	r0, 800b520 <xTimerCreateTimerTask+0x38>
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	e7fe      	b.n	800b51e <xTimerCreateTimerTask+0x36>
}
 800b520:	b003      	add	sp, #12
 800b522:	f85d fb04 	ldr.w	pc, [sp], #4
 800b526:	bf00      	nop
 800b528:	240010f4 	.word	0x240010f4
 800b52c:	240010f8 	.word	0x240010f8
 800b530:	08010fb8 	.word	0x08010fb8
 800b534:	0800b649 	.word	0x0800b649

0800b538 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b538:	b1d8      	cbz	r0, 800b572 <xTimerGenericCommand+0x3a>
 800b53a:	469c      	mov	ip, r3
 800b53c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800b53e:	4815      	ldr	r0, [pc, #84]	; (800b594 <xTimerGenericCommand+0x5c>)
 800b540:	6800      	ldr	r0, [r0, #0]
 800b542:	b328      	cbz	r0, 800b590 <xTimerGenericCommand+0x58>
{
 800b544:	b500      	push	{lr}
 800b546:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800b548:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b54a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b54c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54e:	2905      	cmp	r1, #5
 800b550:	dc18      	bgt.n	800b584 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b552:	f7ff fe79 	bl	800b248 <xTaskGetSchedulerState>
 800b556:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b558:	f04f 0300 	mov.w	r3, #0
 800b55c:	bf0c      	ite	eq
 800b55e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b560:	461a      	movne	r2, r3
 800b562:	4669      	mov	r1, sp
 800b564:	480b      	ldr	r0, [pc, #44]	; (800b594 <xTimerGenericCommand+0x5c>)
 800b566:	6800      	ldr	r0, [r0, #0]
 800b568:	f7fe fe1e 	bl	800a1a8 <xQueueGenericSend>
}
 800b56c:	b005      	add	sp, #20
 800b56e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800b582:	e7fe      	b.n	800b582 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b584:	2300      	movs	r3, #0
 800b586:	4662      	mov	r2, ip
 800b588:	4669      	mov	r1, sp
 800b58a:	f7fe fedb 	bl	800a344 <xQueueGenericSendFromISR>
 800b58e:	e7ed      	b.n	800b56c <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800b590:	2000      	movs	r0, #0
}
 800b592:	4770      	bx	lr
 800b594:	240010f4 	.word	0x240010f4

0800b598 <prvSampleTimeNow>:
{
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 800b5a0:	f7ff fbe4 	bl	800ad6c <xTaskGetTickCount>
 800b5a4:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 800b5a6:	4b25      	ldr	r3, [pc, #148]	; (800b63c <prvSampleTimeNow+0xa4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4283      	cmp	r3, r0
 800b5ac:	d808      	bhi.n	800b5c0 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 800b5b4:	4b21      	ldr	r3, [pc, #132]	; (800b63c <prvSampleTimeNow+0xa4>)
 800b5b6:	601e      	str	r6, [r3, #0]
}
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	b002      	add	sp, #8
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5c0:	4d1f      	ldr	r5, [pc, #124]	; (800b640 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5c2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5c6:	682b      	ldr	r3, [r5, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	b36a      	cbz	r2, 800b628 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5d2:	f104 0904 	add.w	r9, r4, #4
 800b5d6:	4648      	mov	r0, r9
 800b5d8:	f7fe fcbd 	bl	8009f56 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5dc:	6a23      	ldr	r3, [r4, #32]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b5e6:	f013 0f04 	tst.w	r3, #4
 800b5ea:	d0ec      	beq.n	800b5c6 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5ec:	69a3      	ldr	r3, [r4, #24]
 800b5ee:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800b5f0:	429f      	cmp	r7, r3
 800b5f2:	d206      	bcs.n	800b602 <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5f4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5f6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	6828      	ldr	r0, [r5, #0]
 800b5fc:	f7fe fc92 	bl	8009f24 <vListInsert>
 800b600:	e7e1      	b.n	800b5c6 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b602:	f8cd 8000 	str.w	r8, [sp]
 800b606:	4643      	mov	r3, r8
 800b608:	463a      	mov	r2, r7
 800b60a:	4641      	mov	r1, r8
 800b60c:	4620      	mov	r0, r4
 800b60e:	f7ff ff93 	bl	800b538 <xTimerGenericCommand>
				configASSERT( xResult );
 800b612:	2800      	cmp	r0, #0
 800b614:	d1d7      	bne.n	800b5c6 <prvSampleTimeNow+0x2e>
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	e7fe      	b.n	800b626 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800b628:	4a06      	ldr	r2, [pc, #24]	; (800b644 <prvSampleTimeNow+0xac>)
 800b62a:	6810      	ldr	r0, [r2, #0]
 800b62c:	4904      	ldr	r1, [pc, #16]	; (800b640 <prvSampleTimeNow+0xa8>)
 800b62e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800b630:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	f8ca 3000 	str.w	r3, [sl]
 800b638:	e7bc      	b.n	800b5b4 <prvSampleTimeNow+0x1c>
 800b63a:	bf00      	nop
 800b63c:	240010f0 	.word	0x240010f0
 800b640:	240010c0 	.word	0x240010c0
 800b644:	240010c4 	.word	0x240010c4

0800b648 <prvTimerTask>:
{
 800b648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b64c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b64e:	4e78      	ldr	r6, [pc, #480]	; (800b830 <prvTimerTask+0x1e8>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b650:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800b838 <prvTimerTask+0x1f0>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b654:	4d77      	ldr	r5, [pc, #476]	; (800b834 <prvTimerTask+0x1ec>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b656:	6833      	ldr	r3, [r6, #0]
 800b658:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	f000 80da 	beq.w	800b814 <prvTimerTask+0x1cc>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800b664:	f7ff fb7a 	bl	800ad5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b668:	a804      	add	r0, sp, #16
 800b66a:	f7ff ff95 	bl	800b598 <prvSampleTimeNow>
 800b66e:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b670:	9a04      	ldr	r2, [sp, #16]
 800b672:	2a00      	cmp	r2, #0
 800b674:	f040 80d8 	bne.w	800b828 <prvTimerTask+0x1e0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b678:	42b8      	cmp	r0, r7
 800b67a:	d213      	bcs.n	800b6a4 <prvTimerTask+0x5c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b67c:	1b39      	subs	r1, r7, r4
 800b67e:	6828      	ldr	r0, [r5, #0]
 800b680:	f7ff f90e 	bl	800a8a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b684:	f7ff fc12 	bl	800aeac <xTaskResumeAll>
 800b688:	2800      	cmp	r0, #0
 800b68a:	f040 80cf 	bne.w	800b82c <prvTimerTask+0x1e4>
					portYIELD_WITHIN_API();
 800b68e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b696:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	e0c3      	b.n	800b82c <prvTimerTask+0x1e4>
				( void ) xTaskResumeAll();
 800b6a4:	f7ff fc02 	bl	800aeac <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a8:	6833      	ldr	r3, [r6, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6b0:	f109 0004 	add.w	r0, r9, #4
 800b6b4:	f7fe fc4f 	bl	8009f56 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6b8:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800b6bc:	f013 0f04 	tst.w	r3, #4
 800b6c0:	d108      	bne.n	800b6d4 <prvTimerTask+0x8c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ca:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b6ce:	4648      	mov	r0, r9
 800b6d0:	4798      	blx	r3
}
 800b6d2:	e0ab      	b.n	800b82c <prvTimerTask+0x1e4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6d4:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800b6d8:	463b      	mov	r3, r7
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4439      	add	r1, r7
 800b6de:	4648      	mov	r0, r9
 800b6e0:	f7ff feb0 	bl	800b444 <prvInsertTimerInActiveList>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d0f0      	beq.n	800b6ca <prvTimerTask+0x82>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	9100      	str	r1, [sp, #0]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	463a      	mov	r2, r7
 800b6f0:	4648      	mov	r0, r9
 800b6f2:	f7ff ff21 	bl	800b538 <xTimerGenericCommand>
			configASSERT( xResult );
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d1e7      	bne.n	800b6ca <prvTimerTask+0x82>
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	e7fe      	b.n	800b70a <prvTimerTask+0xc2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b70c:	f8d8 3000 	ldr.w	r3, [r8]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	fab2 f282 	clz	r2, r2
 800b716:	0952      	lsrs	r2, r2, #5
 800b718:	e7b0      	b.n	800b67c <prvTimerTask+0x34>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b71a:	9907      	ldr	r1, [sp, #28]
 800b71c:	9806      	ldr	r0, [sp, #24]
 800b71e:	9b05      	ldr	r3, [sp, #20]
 800b720:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	2b00      	cmp	r3, #0
 800b726:	da09      	bge.n	800b73c <prvTimerTask+0xf4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b728:	4622      	mov	r2, r4
 800b72a:	a904      	add	r1, sp, #16
 800b72c:	6828      	ldr	r0, [r5, #0]
 800b72e:	f7fe fec5 	bl	800a4bc <xQueueReceive>
 800b732:	2800      	cmp	r0, #0
 800b734:	d08f      	beq.n	800b656 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b736:	9b04      	ldr	r3, [sp, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dbee      	blt.n	800b71a <prvTimerTask+0xd2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b73c:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	b113      	cbz	r3, 800b748 <prvTimerTask+0x100>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b742:	1d38      	adds	r0, r7, #4
 800b744:	f7fe fc07 	bl	8009f56 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b748:	a803      	add	r0, sp, #12
 800b74a:	f7ff ff25 	bl	800b598 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	2b09      	cmp	r3, #9
 800b752:	d8e9      	bhi.n	800b728 <prvTimerTask+0xe0>
 800b754:	e8df f003 	tbb	[pc, r3]
 800b758:	30050505 	.word	0x30050505
 800b75c:	05055037 	.word	0x05055037
 800b760:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b766:	f043 0301 	orr.w	r3, r3, #1
 800b76a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	69b9      	ldr	r1, [r7, #24]
 800b772:	4602      	mov	r2, r0
 800b774:	4419      	add	r1, r3
 800b776:	4638      	mov	r0, r7
 800b778:	f7ff fe64 	bl	800b444 <prvInsertTimerInActiveList>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0d3      	beq.n	800b728 <prvTimerTask+0xe0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	4638      	mov	r0, r7
 800b784:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b78a:	f013 0f04 	tst.w	r3, #4
 800b78e:	d0cb      	beq.n	800b728 <prvTimerTask+0xe0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	9400      	str	r4, [sp, #0]
 800b794:	4623      	mov	r3, r4
 800b796:	9905      	ldr	r1, [sp, #20]
 800b798:	440a      	add	r2, r1
 800b79a:	4621      	mov	r1, r4
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff fecb 	bl	800b538 <xTimerGenericCommand>
							configASSERT( xResult );
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d1c0      	bne.n	800b728 <prvTimerTask+0xe0>
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	e7fe      	b.n	800b7b6 <prvTimerTask+0x16e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 800b7c4:	e7b0      	b.n	800b728 <prvTimerTask+0xe0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7d2:	9905      	ldr	r1, [sp, #20]
 800b7d4:	61b9      	str	r1, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7d6:	b131      	cbz	r1, 800b7e6 <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4401      	add	r1, r0
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff fe30 	bl	800b444 <prvInsertTimerInActiveList>
					break;
 800b7e4:	e7a0      	b.n	800b728 <prvTimerTask+0xe0>
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7f6:	e7fe      	b.n	800b7f6 <prvTimerTask+0x1ae>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7fc:	f013 0f02 	tst.w	r3, #2
 800b800:	d004      	beq.n	800b80c <prvTimerTask+0x1c4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b802:	f023 0301 	bic.w	r3, r3, #1
 800b806:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800b80a:	e78d      	b.n	800b728 <prvTimerTask+0xe0>
							vPortFree( pxTimer );
 800b80c:	4638      	mov	r0, r7
 800b80e:	f000 faa3 	bl	800bd58 <vPortFree>
 800b812:	e789      	b.n	800b728 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 800b814:	f7ff faa2 	bl	800ad5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b818:	a804      	add	r0, sp, #16
 800b81a:	f7ff febd 	bl	800b598 <prvSampleTimeNow>
 800b81e:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f43f af72 	beq.w	800b70c <prvTimerTask+0xc4>
			( void ) xTaskResumeAll();
 800b828:	f7ff fb40 	bl	800aeac <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b82c:	2400      	movs	r4, #0
}
 800b82e:	e77b      	b.n	800b728 <prvTimerTask+0xe0>
 800b830:	240010c0 	.word	0x240010c0
 800b834:	240010f4 	.word	0x240010f4
 800b838:	240010c4 	.word	0x240010c4

0800b83c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b83c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b842:	4b0d      	ldr	r3, [pc, #52]	; (800b878 <prvTaskExitError+0x3c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84a:	d008      	beq.n	800b85e <prvTaskExitError+0x22>
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	e7fe      	b.n	800b85c <prvTaskExitError+0x20>
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b86e:	9b01      	ldr	r3, [sp, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0fc      	beq.n	800b86e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b874:	b002      	add	sp, #8
 800b876:	4770      	bx	lr
 800b878:	24000018 	.word	0x24000018

0800b87c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b87c:	4808      	ldr	r0, [pc, #32]	; (800b8a0 <prvPortStartFirstTask+0x24>)
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	6800      	ldr	r0, [r0, #0]
 800b882:	f380 8808 	msr	MSP, r0
 800b886:	f04f 0000 	mov.w	r0, #0
 800b88a:	f380 8814 	msr	CONTROL, r0
 800b88e:	b662      	cpsie	i
 800b890:	b661      	cpsie	f
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	df00      	svc	0
 800b89c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b89e:	0000      	.short	0x0000
 800b8a0:	e000ed08 	.word	0xe000ed08

0800b8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8b4 <vPortEnableVFP+0x10>
 800b8a8:	6801      	ldr	r1, [r0, #0]
 800b8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8ae:	6001      	str	r1, [r0, #0]
 800b8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8b2:	0000      	.short	0x0000
 800b8b4:	e000ed88 	.word	0xe000ed88

0800b8b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8bc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8c0:	f021 0101 	bic.w	r1, r1, #1
 800b8c4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <pxPortInitialiseStack+0x28>)
 800b8ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8d2:	f06f 0302 	mvn.w	r3, #2
 800b8d6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b8da:	3844      	subs	r0, #68	; 0x44
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	0800b83d 	.word	0x0800b83d
	...

0800b8f0 <SVC_Handler>:
	__asm volatile (
 800b8f0:	4b07      	ldr	r3, [pc, #28]	; (800b910 <pxCurrentTCBConst2>)
 800b8f2:	6819      	ldr	r1, [r3, #0]
 800b8f4:	6808      	ldr	r0, [r1, #0]
 800b8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fa:	f380 8809 	msr	PSP, r0
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f04f 0000 	mov.w	r0, #0
 800b906:	f380 8811 	msr	BASEPRI, r0
 800b90a:	4770      	bx	lr
 800b90c:	f3af 8000 	nop.w

0800b910 <pxCurrentTCBConst2>:
 800b910:	24000bc0 	.word	0x24000bc0

0800b914 <vPortEnterCritical>:
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b924:	4a0b      	ldr	r2, [pc, #44]	; (800b954 <vPortEnterCritical+0x40>)
 800b926:	6813      	ldr	r3, [r2, #0]
 800b928:	3301      	adds	r3, #1
 800b92a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d000      	beq.n	800b932 <vPortEnterCritical+0x1e>
}
 800b930:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b932:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b936:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b93a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b93e:	d0f7      	beq.n	800b930 <vPortEnterCritical+0x1c>
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	e7fe      	b.n	800b950 <vPortEnterCritical+0x3c>
 800b952:	bf00      	nop
 800b954:	24000018 	.word	0x24000018

0800b958 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b958:	4b09      	ldr	r3, [pc, #36]	; (800b980 <vPortExitCritical+0x28>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b943      	cbnz	r3, 800b970 <vPortExitCritical+0x18>
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	e7fe      	b.n	800b96e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b970:	3b01      	subs	r3, #1
 800b972:	4a03      	ldr	r2, [pc, #12]	; (800b980 <vPortExitCritical+0x28>)
 800b974:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b976:	b90b      	cbnz	r3, 800b97c <vPortExitCritical+0x24>
	__asm volatile
 800b978:	f383 8811 	msr	BASEPRI, r3
}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	24000018 	.word	0x24000018
	...

0800b990 <PendSV_Handler>:
	__asm volatile
 800b990:	f3ef 8009 	mrs	r0, PSP
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	4b15      	ldr	r3, [pc, #84]	; (800b9f0 <pxCurrentTCBConst>)
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	f01e 0f10 	tst.w	lr, #16
 800b9a0:	bf08      	it	eq
 800b9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9aa:	6010      	str	r0, [r2, #0]
 800b9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b9b4:	f380 8811 	msr	BASEPRI, r0
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f7ff fb1c 	bl	800affc <vTaskSwitchContext>
 800b9c4:	f04f 0000 	mov.w	r0, #0
 800b9c8:	f380 8811 	msr	BASEPRI, r0
 800b9cc:	bc09      	pop	{r0, r3}
 800b9ce:	6819      	ldr	r1, [r3, #0]
 800b9d0:	6808      	ldr	r0, [r1, #0]
 800b9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d6:	f01e 0f10 	tst.w	lr, #16
 800b9da:	bf08      	it	eq
 800b9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9e0:	f380 8809 	msr	PSP, r0
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst>:
 800b9f0:	24000bc0 	.word	0x24000bc0

0800b9f4 <xPortSysTickHandler>:
{
 800b9f4:	b508      	push	{r3, lr}
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ba06:	f7ff f9b7 	bl	800ad78 <xTaskIncrementTick>
 800ba0a:	b128      	cbz	r0, 800ba18 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f383 8811 	msr	BASEPRI, r3
}
 800ba1e:	bd08      	pop	{r3, pc}

0800ba20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800ba24:	2300      	movs	r3, #0
 800ba26:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba28:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <vPortSetupTimerInterrupt+0x20>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4905      	ldr	r1, [pc, #20]	; (800ba44 <vPortSetupTimerInterrupt+0x24>)
 800ba30:	fba1 1303 	umull	r1, r3, r1, r3
 800ba34:	099b      	lsrs	r3, r3, #6
 800ba36:	3b01      	subs	r3, #1
 800ba38:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba3a:	2307      	movs	r3, #7
 800ba3c:	6113      	str	r3, [r2, #16]
}
 800ba3e:	4770      	bx	lr
 800ba40:	24000000 	.word	0x24000000
 800ba44:	10624dd3 	.word	0x10624dd3

0800ba48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba4c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800ba50:	4b3e      	ldr	r3, [pc, #248]	; (800bb4c <xPortStartScheduler+0x104>)
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d03b      	beq.n	800bace <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba5a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800ba5e:	4b3c      	ldr	r3, [pc, #240]	; (800bb50 <xPortStartScheduler+0x108>)
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d03d      	beq.n	800bae0 <xPortStartScheduler+0x98>
{
 800ba64:	b530      	push	{r4, r5, lr}
 800ba66:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba68:	4b3a      	ldr	r3, [pc, #232]	; (800bb54 <xPortStartScheduler+0x10c>)
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba84:	4a34      	ldr	r2, [pc, #208]	; (800bb58 <xPortStartScheduler+0x110>)
 800ba86:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba88:	4b34      	ldr	r3, [pc, #208]	; (800bb5c <xPortStartScheduler+0x114>)
 800ba8a:	2207      	movs	r2, #7
 800ba8c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba92:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba96:	d011      	beq.n	800babc <xPortStartScheduler+0x74>
 800ba98:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800baaa:	4611      	mov	r1, r2
 800baac:	3a01      	subs	r2, #1
 800baae:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bab2:	d1f2      	bne.n	800ba9a <xPortStartScheduler+0x52>
 800bab4:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <xPortStartScheduler+0x114>)
 800bab6:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bab8:	2903      	cmp	r1, #3
 800baba:	d01a      	beq.n	800baf2 <xPortStartScheduler+0xaa>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	e7fe      	b.n	800bacc <xPortStartScheduler+0x84>
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bade:	e7fe      	b.n	800bade <xPortStartScheduler+0x96>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baf0:	e7fe      	b.n	800baf0 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baf2:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <xPortStartScheduler+0x114>)
 800baf4:	f44f 7240 	mov.w	r2, #768	; 0x300
 800baf8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	4a15      	ldr	r2, [pc, #84]	; (800bb54 <xPortStartScheduler+0x10c>)
 800bb00:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb02:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800bb06:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800bb0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb0e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb12:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800bb16:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb1a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800bb1e:	f7ff ff7f 	bl	800ba20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bb22:	2500      	movs	r5, #0
 800bb24:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <xPortStartScheduler+0x118>)
 800bb26:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800bb28:	f7ff febc 	bl	800b8a4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb2c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800bb30:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb34:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800bb38:	f7ff fea0 	bl	800b87c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bb3c:	f7ff fa5e 	bl	800affc <vTaskSwitchContext>
	prvTaskExitError();
 800bb40:	f7ff fe7c 	bl	800b83c <prvTaskExitError>
}
 800bb44:	4628      	mov	r0, r5
 800bb46:	b003      	add	sp, #12
 800bb48:	bd30      	pop	{r4, r5, pc}
 800bb4a:	bf00      	nop
 800bb4c:	410fc271 	.word	0x410fc271
 800bb50:	410fc270 	.word	0x410fc270
 800bb54:	e000e400 	.word	0xe000e400
 800bb58:	240010fc 	.word	0x240010fc
 800bb5c:	24001100 	.word	0x24001100
 800bb60:	24000018 	.word	0x24000018

0800bb64 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb64:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb68:	2b0f      	cmp	r3, #15
 800bb6a:	d90f      	bls.n	800bb8c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb6c:	4a11      	ldr	r2, [pc, #68]	; (800bbb4 <vPortValidateInterruptPriority+0x50>)
 800bb6e:	5c9b      	ldrb	r3, [r3, r2]
 800bb70:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb72:	4a11      	ldr	r2, [pc, #68]	; (800bbb8 <vPortValidateInterruptPriority+0x54>)
 800bb74:	7812      	ldrb	r2, [r2, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d908      	bls.n	800bb8c <vPortValidateInterruptPriority+0x28>
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	e7fe      	b.n	800bb8a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb90:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bb94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb98:	4a08      	ldr	r2, [pc, #32]	; (800bbbc <vPortValidateInterruptPriority+0x58>)
 800bb9a:	6812      	ldr	r2, [r2, #0]
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d908      	bls.n	800bbb2 <vPortValidateInterruptPriority+0x4e>
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	e7fe      	b.n	800bbb0 <vPortValidateInterruptPriority+0x4c>
	}
 800bbb2:	4770      	bx	lr
 800bbb4:	e000e3f0 	.word	0xe000e3f0
 800bbb8:	240010fc 	.word	0x240010fc
 800bbbc:	24001100 	.word	0x24001100

0800bbc0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbc0:	4b15      	ldr	r3, [pc, #84]	; (800bc18 <prvInsertBlockIntoFreeList+0x58>)
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	d3fb      	bcc.n	800bbc2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbca:	6851      	ldr	r1, [r2, #4]
 800bbcc:	eb02 0c01 	add.w	ip, r2, r1
 800bbd0:	4560      	cmp	r0, ip
 800bbd2:	d009      	beq.n	800bbe8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbd4:	6841      	ldr	r1, [r0, #4]
 800bbd6:	eb00 0c01 	add.w	ip, r0, r1
 800bbda:	4563      	cmp	r3, ip
 800bbdc:	d009      	beq.n	800bbf2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbde:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbe0:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbe2:	bf18      	it	ne
 800bbe4:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800bbe6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe8:	6840      	ldr	r0, [r0, #4]
 800bbea:	4401      	add	r1, r0
 800bbec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800bbee:	4610      	mov	r0, r2
 800bbf0:	e7f0      	b.n	800bbd4 <prvInsertBlockIntoFreeList+0x14>
{
 800bbf2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbf4:	4c09      	ldr	r4, [pc, #36]	; (800bc1c <prvInsertBlockIntoFreeList+0x5c>)
 800bbf6:	6824      	ldr	r4, [r4, #0]
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d00b      	beq.n	800bc14 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	4419      	add	r1, r3
 800bc00:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc02:	6813      	ldr	r3, [r2, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800bc08:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc0a:	bf18      	it	ne
 800bc0c:	6010      	strne	r0, [r2, #0]
	}
}
 800bc0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc12:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc14:	6004      	str	r4, [r0, #0]
 800bc16:	e7f7      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x48>
 800bc18:	2401011c 	.word	0x2401011c
 800bc1c:	24001104 	.word	0x24001104

0800bc20 <pvPortMalloc>:
{
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bc24:	f7ff f89a 	bl	800ad5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bc28:	4b44      	ldr	r3, [pc, #272]	; (800bd3c <pvPortMalloc+0x11c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	b1b3      	cbz	r3, 800bc5c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc2e:	4b44      	ldr	r3, [pc, #272]	; (800bd40 <pvPortMalloc+0x120>)
 800bc30:	681d      	ldr	r5, [r3, #0]
 800bc32:	4225      	tst	r5, r4
 800bc34:	d17d      	bne.n	800bd32 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 800bc36:	2c00      	cmp	r4, #0
 800bc38:	d07b      	beq.n	800bd32 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 800bc3a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc3e:	f014 0f07 	tst.w	r4, #7
 800bc42:	d002      	beq.n	800bc4a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc44:	f022 0207 	bic.w	r2, r2, #7
 800bc48:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	d071      	beq.n	800bd32 <pvPortMalloc+0x112>
 800bc4e:	4b3d      	ldr	r3, [pc, #244]	; (800bd44 <pvPortMalloc+0x124>)
 800bc50:	681e      	ldr	r6, [r3, #0]
 800bc52:	4296      	cmp	r6, r2
 800bc54:	d36d      	bcc.n	800bd32 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 800bc56:	493c      	ldr	r1, [pc, #240]	; (800bd48 <pvPortMalloc+0x128>)
 800bc58:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc5a:	e027      	b.n	800bcac <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 800bc5c:	4a3b      	ldr	r2, [pc, #236]	; (800bd4c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc5e:	f012 0f07 	tst.w	r2, #7
 800bc62:	d007      	beq.n	800bc74 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc64:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc66:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc6a:	f502 4370 	add.w	r3, r2, #61440	; 0xf000
 800bc6e:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc70:	460a      	mov	r2, r1
 800bc72:	e001      	b.n	800bc78 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc74:	f44f 4370 	mov.w	r3, #61440	; 0xf000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc78:	4833      	ldr	r0, [pc, #204]	; (800bd48 <pvPortMalloc+0x128>)
 800bc7a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc80:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800bc82:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc84:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800bc88:	482c      	ldr	r0, [pc, #176]	; (800bd3c <pvPortMalloc+0x11c>)
 800bc8a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800bc8c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc8e:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc90:	1a99      	subs	r1, r3, r2
 800bc92:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc94:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc96:	4b2e      	ldr	r3, [pc, #184]	; (800bd50 <pvPortMalloc+0x130>)
 800bc98:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc9a:	4b2a      	ldr	r3, [pc, #168]	; (800bd44 <pvPortMalloc+0x124>)
 800bc9c:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc9e:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <pvPortMalloc+0x120>)
 800bca0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bca4:	601a      	str	r2, [r3, #0]
}
 800bca6:	e7c2      	b.n	800bc2e <pvPortMalloc+0xe>
 800bca8:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcaa:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcac:	6863      	ldr	r3, [r4, #4]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d202      	bcs.n	800bcb8 <pvPortMalloc+0x98>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f7      	bne.n	800bca8 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 800bcb8:	4b20      	ldr	r3, [pc, #128]	; (800bd3c <pvPortMalloc+0x11c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	42a3      	cmp	r3, r4
 800bcbe:	d038      	beq.n	800bd32 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcc0:	680f      	ldr	r7, [r1, #0]
 800bcc2:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcc8:	6863      	ldr	r3, [r4, #4]
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	2b10      	cmp	r3, #16
 800bcce:	d910      	bls.n	800bcf2 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcd0:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcd2:	f010 0f07 	tst.w	r0, #7
 800bcd6:	d008      	beq.n	800bcea <pvPortMalloc+0xca>
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	e7fe      	b.n	800bce8 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcea:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcec:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcee:	f7ff ff67 	bl	800bbc0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	1af6      	subs	r6, r6, r3
 800bcf6:	4a13      	ldr	r2, [pc, #76]	; (800bd44 <pvPortMalloc+0x124>)
 800bcf8:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcfa:	4a15      	ldr	r2, [pc, #84]	; (800bd50 <pvPortMalloc+0x130>)
 800bcfc:	6812      	ldr	r2, [r2, #0]
 800bcfe:	4296      	cmp	r6, r2
 800bd00:	d201      	bcs.n	800bd06 <pvPortMalloc+0xe6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd02:	4a13      	ldr	r2, [pc, #76]	; (800bd50 <pvPortMalloc+0x130>)
 800bd04:	6016      	str	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd06:	431d      	orrs	r5, r3
 800bd08:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800bd0e:	4a11      	ldr	r2, [pc, #68]	; (800bd54 <pvPortMalloc+0x134>)
 800bd10:	6813      	ldr	r3, [r2, #0]
 800bd12:	3301      	adds	r3, #1
 800bd14:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800bd16:	f7ff f8c9 	bl	800aeac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd1a:	f017 0f07 	tst.w	r7, #7
 800bd1e:	d00b      	beq.n	800bd38 <pvPortMalloc+0x118>
 800bd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	e7fe      	b.n	800bd30 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 800bd32:	f7ff f8bb 	bl	800aeac <xTaskResumeAll>
 800bd36:	2700      	movs	r7, #0
}
 800bd38:	4638      	mov	r0, r7
 800bd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3c:	24001104 	.word	0x24001104
 800bd40:	24010108 	.word	0x24010108
 800bd44:	2401010c 	.word	0x2401010c
 800bd48:	2401011c 	.word	0x2401011c
 800bd4c:	24001108 	.word	0x24001108
 800bd50:	24010110 	.word	0x24010110
 800bd54:	24010114 	.word	0x24010114

0800bd58 <vPortFree>:
	if( pv != NULL )
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d033      	beq.n	800bdc4 <vPortFree+0x6c>
{
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bd64:	4a18      	ldr	r2, [pc, #96]	; (800bdc8 <vPortFree+0x70>)
 800bd66:	6812      	ldr	r2, [r2, #0]
 800bd68:	4213      	tst	r3, r2
 800bd6a:	d108      	bne.n	800bd7e <vPortFree+0x26>
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	e7fe      	b.n	800bd7c <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800bd82:	b141      	cbz	r1, 800bd96 <vPortFree+0x3e>
 800bd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	e7fe      	b.n	800bd94 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd96:	ea23 0302 	bic.w	r3, r3, r2
 800bd9a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bd9e:	f7fe ffdd 	bl	800ad5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bda2:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <vPortFree+0x74>)
 800bda4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bda8:	6811      	ldr	r1, [r2, #0]
 800bdaa:	440b      	add	r3, r1
 800bdac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdae:	f1a4 0008 	sub.w	r0, r4, #8
 800bdb2:	f7ff ff05 	bl	800bbc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bdb6:	4a06      	ldr	r2, [pc, #24]	; (800bdd0 <vPortFree+0x78>)
 800bdb8:	6813      	ldr	r3, [r2, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800bdbe:	f7ff f875 	bl	800aeac <xTaskResumeAll>
}
 800bdc2:	bd10      	pop	{r4, pc}
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	24010108 	.word	0x24010108
 800bdcc:	2401010c 	.word	0x2401010c
 800bdd0:	24010118 	.word	0x24010118

0800bdd4 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 800bdd4:	b508      	push	{r3, lr}
    return pvPortMalloc(size);
 800bdd6:	f7ff ff23 	bl	800bc20 <pvPortMalloc>
}
 800bdda:	bd08      	pop	{r3, pc}

0800bddc <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 800bddc:	b508      	push	{r3, lr}
    vPortFree(ptr);
 800bdde:	f7ff ffbb 	bl	800bd58 <vPortFree>
}
 800bde2:	bd08      	pop	{r3, pc}

0800bde4 <_ZN5IOBus8transmitEv>:


	return length;
}

void IOBus::transmit() {
 800bde4:	b510      	push	{r4, lr}
	driver->transmit(packet_buffer, buffer_index);
 800bde6:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800bdea:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
 800bdee:	6803      	ldr	r3, [r0, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
 800bdf6:	f8d4 1310 	ldr.w	r1, [r4, #784]	; 0x310
 800bdfa:	4798      	blx	r3
	buffer_index = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f884 3318 	strb.w	r3, [r4, #792]	; 0x318
}
 800be02:	bd10      	pop	{r4, pc}

0800be04 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800be04:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 800be06:	6804      	ldr	r4, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800be08:	6865      	ldr	r5, [r4, #4]
 800be0a:	68a6      	ldr	r6, [r4, #8]
 800be0c:	eb06 0065 	add.w	r0, r6, r5, asr #1
 800be10:	f015 0f01 	tst.w	r5, #1
 800be14:	d105      	bne.n	800be22 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om+0x1e>
 800be16:	6824      	ldr	r4, [r4, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	7809      	ldrb	r1, [r1, #0]
 800be1e:	47a0      	blx	r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 800be20:	bd70      	pop	{r4, r5, r6, pc}
 800be22:	ea4f 0c65 	mov.w	ip, r5, asr #1
 800be26:	f856 500c 	ldr.w	r5, [r6, ip]
 800be2a:	6824      	ldr	r4, [r4, #0]
 800be2c:	592c      	ldr	r4, [r5, r4]
 800be2e:	e7f3      	b.n	800be18 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om+0x14>

0800be30 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4604      	mov	r4, r0
	switch (__op)
 800be34:	b142      	cbz	r2, 800be48 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 800be36:	4613      	mov	r3, r2
 800be38:	2a01      	cmp	r2, #1
 800be3a:	d009      	beq.n	800be50 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
	  switch (__op)
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d805      	bhi.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800be40:	e8df f003 	tbb	[pc, r3]
 800be44:	1a0f0c09 	.word	0x1a0f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800be48:	4b0f      	ldr	r3, [pc, #60]	; (800be88 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x58>)
 800be4a:	6003      	str	r3, [r0, #0]
      }
 800be4c:	2000      	movs	r0, #0
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
	    return __source._M_access<_Functor*>();
 800be50:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800be52:	6003      	str	r3, [r0, #0]
	    break;
 800be54:	e7fa      	b.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x58>)
 800be58:	6003      	str	r3, [r0, #0]
	      break;
 800be5a:	e7f7      	b.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800be5c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800be5e:	6003      	str	r3, [r0, #0]
	      break;
 800be60:	e7f4      	b.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800be62:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800be64:	200c      	movs	r0, #12
 800be66:	f7ff ffb5 	bl	800bdd4 <_Znwj>
 800be6a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800be6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be74:	6023      	str	r3, [r4, #0]
	      break;
 800be76:	e7e9      	b.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800be78:	6800      	ldr	r0, [r0, #0]
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d0e6      	beq.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800be7e:	210c      	movs	r1, #12
 800be80:	f001 feac 	bl	800dbdc <_ZdlPvj>
 800be84:	e7e2      	b.n	800be4c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
 800be86:	bf00      	nop
 800be88:	08011078 	.word	0x08011078

0800be8c <_ZN5IOBus7receiveEhPhm>:
void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	4606      	mov	r6, r0
 800be92:	460f      	mov	r7, r1
 800be94:	4615      	mov	r5, r2
 800be96:	461c      	mov	r4, r3
	while(length > buffer_length) {
 800be98:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800be9c:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800bea0:	429c      	cmp	r4, r3
 800bea2:	d90c      	bls.n	800bebe <_ZN5IOBus7receiveEhPhm+0x32>
		length -= buffer_length;
 800bea4:	f500 5880 	add.w	r8, r0, #4096	; 0x1000
		MessageBus::receive(sender_id, buffer, buffer_length);
 800bea8:	462a      	mov	r2, r5
 800beaa:	4639      	mov	r1, r7
 800beac:	4630      	mov	r0, r6
 800beae:	f000 fef0 	bl	800cc92 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 800beb2:	f8d8 3314 	ldr.w	r3, [r8, #788]	; 0x314
 800beb6:	1ae4      	subs	r4, r4, r3
		buffer += buffer_length;
 800beb8:	441d      	add	r5, r3
	while(length > buffer_length) {
 800beba:	42a3      	cmp	r3, r4
 800bebc:	d3f4      	bcc.n	800bea8 <_ZN5IOBus7receiveEhPhm+0x1c>
	MessageBus::receive(sender_id, buffer, length);
 800bebe:	4623      	mov	r3, r4
 800bec0:	462a      	mov	r2, r5
 800bec2:	4639      	mov	r1, r7
 800bec4:	4630      	mov	r0, r6
 800bec6:	f000 fee4 	bl	800cc92 <_ZN10MessageBus7receiveEhPhm>
}
 800beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bece <_ZN5IOBus6appendEPhm>:
uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 800bece:	b538      	push	{r3, r4, r5, lr}
	uint32_t remaining_length = buffer_length - buffer_index;
 800bed0:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 800bed4:	f895 c318 	ldrb.w	ip, [r5, #792]	; 0x318
 800bed8:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
 800bedc:	eba3 040c 	sub.w	r4, r3, ip
 800bee0:	4294      	cmp	r4, r2
 800bee2:	bf28      	it	cs
 800bee4:	4614      	movcs	r4, r2
	memcpy(packet_buffer + buffer_index, buffer, length);
 800bee6:	f8d5 0310 	ldr.w	r0, [r5, #784]	; 0x310
 800beea:	4622      	mov	r2, r4
 800beec:	4460      	add	r0, ip
 800beee:	f002 fbc3 	bl	800e678 <memcpy>
	buffer_index += length;
 800bef2:	b2e0      	uxtb	r0, r4
 800bef4:	f895 3318 	ldrb.w	r3, [r5, #792]	; 0x318
 800bef8:	4403      	add	r3, r0
 800befa:	f885 3318 	strb.w	r3, [r5, #792]	; 0x318
}
 800befe:	bd38      	pop	{r3, r4, r5, pc}

0800bf00 <_ZN5IOBusD1Ev>:
IOBus::~IOBus(){}
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	4607      	mov	r7, r0
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <_ZN5IOBusD1Ev+0x30>)
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	f241 240c 	movw	r4, #4620	; 0x120c
 800bf0c:	4404      	add	r4, r0
 800bf0e:	f600 650c 	addw	r5, r0, #3596	; 0xe0c
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800bf12:	2603      	movs	r6, #3
 800bf14:	e005      	b.n	800bf22 <_ZN5IOBusD1Ev+0x22>
 800bf16:	4632      	mov	r2, r6
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4798      	blx	r3
 800bf1e:	42a5      	cmp	r5, r4
 800bf20:	d004      	beq.n	800bf2c <_ZN5IOBusD1Ev+0x2c>
 800bf22:	3c10      	subs	r4, #16
      if (_M_manager)
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f5      	bne.n	800bf16 <_ZN5IOBusD1Ev+0x16>
 800bf2a:	e7f8      	b.n	800bf1e <_ZN5IOBusD1Ev+0x1e>
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf30:	080113dc 	.word	0x080113dc

0800bf34 <_ZN5IOBusD0Ev>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	4604      	mov	r4, r0
 800bf38:	f7ff ffe2 	bl	800bf00 <_ZN5IOBusD1Ev>
 800bf3c:	f241 311c 	movw	r1, #4892	; 0x131c
 800bf40:	4620      	mov	r0, r4
 800bf42:	f001 fe4b 	bl	800dbdc <_ZdlPvj>
 800bf46:	4620      	mov	r0, r4
 800bf48:	bd10      	pop	{r4, pc}
	...

0800bf4c <_ZN5IOBusC1EP8IODriverPhm>:
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	4604      	mov	r4, r0
 800bf52:	460d      	mov	r5, r1
 800bf54:	4618      	mov	r0, r3
class MessageBus {
 800bf56:	f604 6c0c 	addw	ip, r4, #3596	; 0xe0c
 800bf5a:	f241 2e0c 	movw	lr, #4620	; 0x120c
 800bf5e:	44a6      	add	lr, r4
    _Function_base() : _M_manager(nullptr) { }
 800bf60:	2300      	movs	r3, #0
 800bf62:	f8cc 3008 	str.w	r3, [ip, #8]
 800bf66:	f10c 0c10 	add.w	ip, ip, #16
 800bf6a:	45f4      	cmp	ip, lr
 800bf6c:	d1f9      	bne.n	800bf62 <_ZN5IOBusC1EP8IODriverPhm+0x16>
 800bf6e:	4b14      	ldr	r3, [pc, #80]	; (800bfc0 <_ZN5IOBusC1EP8IODriverPhm+0x74>)
 800bf70:	6023      	str	r3, [r4, #0]
	this->driver = driver;
 800bf72:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 800bf76:	f8c1 530c 	str.w	r5, [r1, #780]	; 0x30c
	this->packet_buffer = buffer;
 800bf7a:	f8c1 2310 	str.w	r2, [r1, #784]	; 0x310
	this->buffer_length = length;
 800bf7e:	f8c1 0314 	str.w	r0, [r1, #788]	; 0x314
	this->buffer_index = 0;
 800bf82:	2600      	movs	r6, #0
 800bf84:	f881 6318 	strb.w	r6, [r1, #792]	; 0x318
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	689f      	ldr	r7, [r3, #8]
 800bf8c:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800bf8e:	200c      	movs	r0, #12
 800bf90:	f7ff ff20 	bl	800bdd4 <_Znwj>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 800bf94:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <_ZN5IOBusC1EP8IODriverPhm+0x78>)
 800bf96:	6003      	str	r3, [r0, #0]
 800bf98:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800bf9a:	6084      	str	r4, [r0, #8]
 800bf9c:	9000      	str	r0, [sp, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <_ZN5IOBusC1EP8IODriverPhm+0x7c>)
 800bfa0:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <_ZN5IOBusC1EP8IODriverPhm+0x80>)
 800bfa4:	9302      	str	r3, [sp, #8]
 800bfa6:	4669      	mov	r1, sp
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	47b8      	blx	r7
      if (_M_manager)
 800bfac:	9b02      	ldr	r3, [sp, #8]
 800bfae:	b11b      	cbz	r3, 800bfb8 <_ZN5IOBusC1EP8IODriverPhm+0x6c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800bfb0:	2203      	movs	r2, #3
 800bfb2:	4669      	mov	r1, sp
 800bfb4:	4668      	mov	r0, sp
 800bfb6:	4798      	blx	r3
}
 800bfb8:	4620      	mov	r0, r4
 800bfba:	b005      	add	sp, #20
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	080110a0 	.word	0x080110a0
 800bfc4:	0800be8d 	.word	0x0800be8d
 800bfc8:	0800be05 	.word	0x0800be05
 800bfcc:	0800be31 	.word	0x0800be31

0800bfd0 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
	if(def != nullptr) {
 800bfd0:	b311      	cbz	r1, 800c018 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x48>
bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 800bfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	4617      	mov	r7, r2
 800bfda:	460e      	mov	r6, r1
		uint32_t data_bytes_written = 0;
//		append(&def->id, 1);
		while(data_bytes_written < def->size) {
 800bfdc:	784b      	ldrb	r3, [r1, #1]
 800bfde:	b1a3      	cbz	r3, 800c00a <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x3a>
		uint32_t data_bytes_written = 0;
 800bfe0:	2400      	movs	r4, #0
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 800bfe2:	f04f 0801 	mov.w	r8, #1
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	4642      	mov	r2, r8
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 800bff2:	7872      	ldrb	r2, [r6, #1]
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	1b12      	subs	r2, r2, r4
 800bffa:	1939      	adds	r1, r7, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	4798      	blx	r3

			if(new_bytes == 0) {
 800c000:	b160      	cbz	r0, 800c01c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x4c>
				return false;
			} else {
				data_bytes_written += new_bytes;
 800c002:	4404      	add	r4, r0
		while(data_bytes_written < def->size) {
 800c004:	7873      	ldrb	r3, [r6, #1]
 800c006:	42a3      	cmp	r3, r4
 800c008:	d8ed      	bhi.n	800bfe6 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		transmit();
 800c00a:	682b      	ldr	r3, [r5, #0]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	4628      	mov	r0, r5
 800c010:	4798      	blx	r3

		return true;
 800c012:	2001      	movs	r0, #1
	}

	return false;
}
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return false;
 800c018:	2000      	movs	r0, #0
}
 800c01a:	4770      	bx	lr
				return false;
 800c01c:	2000      	movs	r0, #0
 800c01e:	e7f9      	b.n	800c014 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x44>

0800c020 <_ZN10MessageBus8retrieveEj>:
}

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 800c020:	b500      	push	{lr}
 800c022:	4684      	mov	ip, r0
	uint32_t searchPoint = hash % 256;
 800c024:	fa5f fe81 	uxtb.w	lr, r1
 800c028:	4673      	mov	r3, lr
	uint32_t searchStart = searchPoint;

	while(definitions_by_type[searchPoint] != nullptr) {
 800c02a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800c02e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c032:	b150      	cbz	r0, 800c04a <_ZN10MessageBus8retrieveEj+0x2a>
		if(definitions_by_type[searchPoint]->hash == hash) {
 800c034:	6842      	ldr	r2, [r0, #4]
 800c036:	428a      	cmp	r2, r1
 800c038:	d007      	beq.n	800c04a <_ZN10MessageBus8retrieveEj+0x2a>
			return definitions_by_type[searchPoint];
		}

		searchPoint++;
 800c03a:	3301      	adds	r3, #1

		if(searchPoint == 256) {
			searchPoint = 0;
 800c03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c040:	bf08      	it	eq
 800c042:	2300      	moveq	r3, #0
		}

		if(searchStart == searchPoint) {
 800c044:	4573      	cmp	r3, lr
 800c046:	d1f0      	bne.n	800c02a <_ZN10MessageBus8retrieveEj+0xa>
			break; // No packet definition matching the given template type
		}
	}

	return nullptr;
 800c048:	2000      	movs	r0, #0
}
 800c04a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c050 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4604      	mov	r4, r0
	switch (__op)
 800c054:	b142      	cbz	r2, 800c068 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 800c056:	4613      	mov	r3, r2
 800c058:	2a01      	cmp	r2, #1
 800c05a:	d009      	beq.n	800c070 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x20>
	  switch (__op)
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d805      	bhi.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c060:	e8df f003 	tbb	[pc, r3]
 800c064:	1a0f0c09 	.word	0x1a0f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c068:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>)
 800c06a:	6003      	str	r3, [r0, #0]
      }
 800c06c:	2000      	movs	r0, #0
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
	    return __source._M_access<_Functor*>();
 800c070:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c072:	6003      	str	r3, [r0, #0]
	    break;
 800c074:	e7fa      	b.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>)
 800c078:	6003      	str	r3, [r0, #0]
	      break;
 800c07a:	e7f7      	b.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800c07c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c07e:	6003      	str	r3, [r0, #0]
	      break;
 800c080:	e7f4      	b.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800c082:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c084:	200c      	movs	r0, #12
 800c086:	f7ff fea5 	bl	800bdd4 <_Znwj>
 800c08a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c08c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c094:	6023      	str	r3, [r4, #0]
	      break;
 800c096:	e7e9      	b.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800c098:	6800      	ldr	r0, [r0, #0]
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d0e6      	beq.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c09e:	210c      	movs	r1, #12
 800c0a0:	f001 fd9c 	bl	800dbdc <_ZdlPvj>
 800c0a4:	e7e2      	b.n	800c06c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800c0a6:	bf00      	nop
 800c0a8:	08011364 	.word	0x08011364

0800c0ac <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	460d      	mov	r5, r1

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 800c0b2:	4a17      	ldr	r2, [pc, #92]	; (800c110 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x64>)
 800c0b4:	2115      	movs	r1, #21
 800c0b6:	4817      	ldr	r0, [pc, #92]	; (800c114 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x68>)
 800c0b8:	f001 fdb8 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c0bc:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c0c0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c0c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c0c8:	688e      	ldr	r6, [r1, #8]
 800c0ca:	b9e6      	cbnz	r6, 800c106 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c0cc:	b2c3      	uxtb	r3, r0
 800c0ce:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c0d2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c0d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0da:	b142      	cbz	r2, 800c0ee <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c0dc:	6852      	ldr	r2, [r2, #4]
 800c0de:	4282      	cmp	r2, r0
 800c0e0:	d013      	beq.n	800c10a <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5e>
		insertion_point++;
 800c0e2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e8:	d1f5      	bne.n	800c0d6 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x2a>
			insertion_point = 0;
 800c0ea:	4633      	mov	r3, r6
 800c0ec:	e7ef      	b.n	800c0ce <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x22>
	def->id = identifier;
 800c0ee:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c0f4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c0f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c0fa:	4496      	add	lr, r2
 800c0fc:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c0fe:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c102:	2001      	movs	r0, #1
 800c104:	e000      	b.n	800c108 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c106:	2000      	movs	r0, #0
}
 800c108:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c10a:	2000      	movs	r0, #0
 800c10c:	e7fc      	b.n	800c108 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x5c>
 800c10e:	bf00      	nop
 800c110:	c70f6907 	.word	0xc70f6907
 800c114:	080110b8 	.word	0x080110b8

0800c118 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4604      	mov	r4, r0
 800c11c:	460d      	mov	r5, r1
 800c11e:	4a17      	ldr	r2, [pc, #92]	; (800c17c <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x64>)
 800c120:	2115      	movs	r1, #21
 800c122:	4817      	ldr	r0, [pc, #92]	; (800c180 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x68>)
 800c124:	f001 fd82 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c128:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c12c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c130:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c134:	688e      	ldr	r6, [r1, #8]
 800c136:	b9ee      	cbnz	r6, 800c174 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c138:	b2c3      	uxtb	r3, r0
 800c13a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c13e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c142:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c146:	b142      	cbz	r2, 800c15a <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c148:	6852      	ldr	r2, [r2, #4]
 800c14a:	4282      	cmp	r2, r0
 800c14c:	d014      	beq.n	800c178 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x60>
		insertion_point++;
 800c14e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c154:	d1f5      	bne.n	800c142 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x2a>
			insertion_point = 0;
 800c156:	4633      	mov	r3, r6
 800c158:	e7ef      	b.n	800c13a <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x22>
	def->id = identifier;
 800c15a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c15c:	2224      	movs	r2, #36	; 0x24
 800c15e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c160:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c162:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c166:	f10e 0e04 	add.w	lr, lr, #4
 800c16a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c16c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c170:	2001      	movs	r0, #1
 800c172:	e000      	b.n	800c176 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c174:	2000      	movs	r0, #0
}
 800c176:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c178:	2000      	movs	r0, #0
 800c17a:	e7fc      	b.n	800c176 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x5e>
 800c17c:	c70f6907 	.word	0xc70f6907
 800c180:	080110d0 	.word	0x080110d0

0800c184 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4604      	mov	r4, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	4a08      	ldr	r2, [pc, #32]	; (800c1ac <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_+0x28>)
 800c18c:	2115      	movs	r1, #21
 800c18e:	4808      	ldr	r0, [pc, #32]	; (800c1b0 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_+0x2c>)
 800c190:	f001 fd4c 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c194:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	4620      	mov	r0, r4
 800c19c:	4798      	blx	r3
 800c19e:	4601      	mov	r1, r0
	return send(def, (uint8_t*) message);
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4798      	blx	r3
}
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	c70f6907 	.word	0xc70f6907
 800c1b0:	080110d0 	.word	0x080110d0

0800c1b4 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	4a17      	ldr	r2, [pc, #92]	; (800c218 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x64>)
 800c1bc:	211a      	movs	r1, #26
 800c1be:	4817      	ldr	r0, [pc, #92]	; (800c21c <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x68>)
 800c1c0:	f001 fd34 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c1c4:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c1c8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c1cc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c1d0:	688e      	ldr	r6, [r1, #8]
 800c1d2:	b9e6      	cbnz	r6, 800c20e <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c1d4:	b2c3      	uxtb	r3, r0
 800c1d6:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c1da:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c1de:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1e2:	b142      	cbz	r2, 800c1f6 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c1e4:	6852      	ldr	r2, [r2, #4]
 800c1e6:	4282      	cmp	r2, r0
 800c1e8:	d013      	beq.n	800c212 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5e>
		insertion_point++;
 800c1ea:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f0:	d1f5      	bne.n	800c1de <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x2a>
			insertion_point = 0;
 800c1f2:	4633      	mov	r3, r6
 800c1f4:	e7ef      	b.n	800c1d6 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x22>
	def->id = identifier;
 800c1f6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c1f8:	2204      	movs	r2, #4
 800c1fa:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c1fc:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c1fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c202:	4496      	add	lr, r2
 800c204:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c206:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c20a:	2001      	movs	r0, #1
 800c20c:	e000      	b.n	800c210 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c20e:	2000      	movs	r0, #0
}
 800c210:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c212:	2000      	movs	r0, #0
 800c214:	e7fc      	b.n	800c210 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x5c>
 800c216:	bf00      	nop
 800c218:	c70f6907 	.word	0xc70f6907
 800c21c:	080110e8 	.word	0x080110e8

0800c220 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	4604      	mov	r4, r0
 800c224:	460d      	mov	r5, r1
 800c226:	4a17      	ldr	r2, [pc, #92]	; (800c284 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x64>)
 800c228:	211a      	movs	r1, #26
 800c22a:	4817      	ldr	r0, [pc, #92]	; (800c288 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x68>)
 800c22c:	f001 fcfe 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c230:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c234:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c238:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c23c:	688e      	ldr	r6, [r1, #8]
 800c23e:	b9e6      	cbnz	r6, 800c27a <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c240:	b2c3      	uxtb	r3, r0
 800c242:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c246:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c24a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c24e:	b142      	cbz	r2, 800c262 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c250:	6852      	ldr	r2, [r2, #4]
 800c252:	4282      	cmp	r2, r0
 800c254:	d013      	beq.n	800c27e <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5e>
		insertion_point++;
 800c256:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25c:	d1f5      	bne.n	800c24a <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x2a>
			insertion_point = 0;
 800c25e:	4633      	mov	r3, r6
 800c260:	e7ef      	b.n	800c242 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x22>
	def->id = identifier;
 800c262:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c264:	2204      	movs	r2, #4
 800c266:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c268:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c26a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c26e:	4496      	add	lr, r2
 800c270:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c272:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c276:	2001      	movs	r0, #1
 800c278:	e000      	b.n	800c27c <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c27a:	2000      	movs	r0, #0
}
 800c27c:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c27e:	2000      	movs	r0, #0
 800c280:	e7fc      	b.n	800c27c <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x5c>
 800c282:	bf00      	nop
 800c284:	c70f6907 	.word	0xc70f6907
 800c288:	08011104 	.word	0x08011104

0800c28c <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	4604      	mov	r4, r0
 800c290:	460d      	mov	r5, r1
 800c292:	4a17      	ldr	r2, [pc, #92]	; (800c2f0 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x64>)
 800c294:	211f      	movs	r1, #31
 800c296:	4817      	ldr	r0, [pc, #92]	; (800c2f4 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x68>)
 800c298:	f001 fcc8 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c29c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c2a0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c2a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c2a8:	688e      	ldr	r6, [r1, #8]
 800c2aa:	b9e6      	cbnz	r6, 800c2e6 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c2ac:	b2c3      	uxtb	r3, r0
 800c2ae:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c2b2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c2b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2ba:	b142      	cbz	r2, 800c2ce <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c2bc:	6852      	ldr	r2, [r2, #4]
 800c2be:	4282      	cmp	r2, r0
 800c2c0:	d013      	beq.n	800c2ea <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5e>
		insertion_point++;
 800c2c2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c2c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c8:	d1f5      	bne.n	800c2b6 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x2a>
			insertion_point = 0;
 800c2ca:	4633      	mov	r3, r6
 800c2cc:	e7ef      	b.n	800c2ae <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x22>
	def->id = identifier;
 800c2ce:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c2d4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c2d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c2da:	4496      	add	lr, r2
 800c2dc:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c2de:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	e000      	b.n	800c2e8 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c2e6:	2000      	movs	r0, #0
}
 800c2e8:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e7fc      	b.n	800c2e8 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x5c>
 800c2ee:	bf00      	nop
 800c2f0:	c70f6907 	.word	0xc70f6907
 800c2f4:	08011120 	.word	0x08011120

0800c2f8 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	4a17      	ldr	r2, [pc, #92]	; (800c35c <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x64>)
 800c300:	211b      	movs	r1, #27
 800c302:	4817      	ldr	r0, [pc, #92]	; (800c360 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x68>)
 800c304:	f001 fc92 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c308:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c30c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c310:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c314:	688e      	ldr	r6, [r1, #8]
 800c316:	b9e6      	cbnz	r6, 800c352 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800c318:	b2c3      	uxtb	r3, r0
 800c31a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c31e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c322:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c326:	b142      	cbz	r2, 800c33a <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c328:	6852      	ldr	r2, [r2, #4]
 800c32a:	4282      	cmp	r2, r0
 800c32c:	d013      	beq.n	800c356 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5e>
		insertion_point++;
 800c32e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c334:	d1f5      	bne.n	800c322 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x2a>
			insertion_point = 0;
 800c336:	4633      	mov	r3, r6
 800c338:	e7ef      	b.n	800c31a <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x22>
	def->id = identifier;
 800c33a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c33c:	2204      	movs	r2, #4
 800c33e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c340:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c342:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c346:	4496      	add	lr, r2
 800c348:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c34a:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c34e:	2001      	movs	r0, #1
 800c350:	e000      	b.n	800c354 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5c>
		return false; // Packet ID already in use
 800c352:	2000      	movs	r0, #0
}
 800c354:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c356:	2000      	movs	r0, #0
 800c358:	e7fc      	b.n	800c354 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x5c>
 800c35a:	bf00      	nop
 800c35c:	c70f6907 	.word	0xc70f6907
 800c360:	08011140 	.word	0x08011140

0800c364 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4604      	mov	r4, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	4a08      	ldr	r2, [pc, #32]	; (800c38c <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_+0x28>)
 800c36c:	211b      	movs	r1, #27
 800c36e:	4808      	ldr	r0, [pc, #32]	; (800c390 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_+0x2c>)
 800c370:	f001 fc5c 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c374:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	4620      	mov	r0, r4
 800c37c:	4798      	blx	r3
 800c37e:	4601      	mov	r1, r0
	return send(def, (uint8_t*) message);
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	462a      	mov	r2, r5
 800c386:	4620      	mov	r0, r4
 800c388:	4798      	blx	r3
}
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	c70f6907 	.word	0xc70f6907
 800c390:	08011140 	.word	0x08011140

0800c394 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	4a17      	ldr	r2, [pc, #92]	; (800c3f8 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x64>)
 800c39c:	2113      	movs	r1, #19
 800c39e:	4817      	ldr	r0, [pc, #92]	; (800c3fc <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x68>)
 800c3a0:	f001 fc44 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c3a4:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c3a8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c3ac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c3b0:	688e      	ldr	r6, [r1, #8]
 800c3b2:	b9ee      	cbnz	r6, 800c3f0 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c3b4:	b2c3      	uxtb	r3, r0
 800c3b6:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c3ba:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c3be:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3c2:	b142      	cbz	r2, 800c3d6 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c3c4:	6852      	ldr	r2, [r2, #4]
 800c3c6:	4282      	cmp	r2, r0
 800c3c8:	d014      	beq.n	800c3f4 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x60>
		insertion_point++;
 800c3ca:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3d0:	d1f5      	bne.n	800c3be <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x2a>
			insertion_point = 0;
 800c3d2:	4633      	mov	r3, r6
 800c3d4:	e7ef      	b.n	800c3b6 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x22>
	def->id = identifier;
 800c3d6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c3d8:	2201      	movs	r2, #1
 800c3da:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c3dc:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c3de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c3e2:	f10e 0e04 	add.w	lr, lr, #4
 800c3e6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c3e8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	e000      	b.n	800c3f2 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c3f0:	2000      	movs	r0, #0
}
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	e7fc      	b.n	800c3f2 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x5e>
 800c3f8:	c70f6907 	.word	0xc70f6907
 800c3fc:	0801115c 	.word	0x0801115c

0800c400 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	460d      	mov	r5, r1
 800c406:	4a17      	ldr	r2, [pc, #92]	; (800c464 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x64>)
 800c408:	211b      	movs	r1, #27
 800c40a:	4817      	ldr	r0, [pc, #92]	; (800c468 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x68>)
 800c40c:	f001 fc0e 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c410:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c414:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c418:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c41c:	688e      	ldr	r6, [r1, #8]
 800c41e:	b9ee      	cbnz	r6, 800c45c <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c420:	b2c3      	uxtb	r3, r0
 800c422:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c426:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c42a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c42e:	b142      	cbz	r2, 800c442 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c430:	6852      	ldr	r2, [r2, #4]
 800c432:	4282      	cmp	r2, r0
 800c434:	d014      	beq.n	800c460 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x60>
		insertion_point++;
 800c436:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c43c:	d1f5      	bne.n	800c42a <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x2a>
			insertion_point = 0;
 800c43e:	4633      	mov	r3, r6
 800c440:	e7ef      	b.n	800c422 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x22>
	def->id = identifier;
 800c442:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c444:	2201      	movs	r2, #1
 800c446:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c448:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c44a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c44e:	f10e 0e04 	add.w	lr, lr, #4
 800c452:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c454:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c458:	4610      	mov	r0, r2
 800c45a:	e000      	b.n	800c45e <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c45c:	2000      	movs	r0, #0
}
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c460:	2000      	movs	r0, #0
 800c462:	e7fc      	b.n	800c45e <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x5e>
 800c464:	c70f6907 	.word	0xc70f6907
 800c468:	08011170 	.word	0x08011170

0800c46c <_ZN10MessageBus6defineI14sc_trap_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x64>)
 800c474:	2110      	movs	r1, #16
 800c476:	4817      	ldr	r0, [pc, #92]	; (800c4d4 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x68>)
 800c478:	f001 fbd8 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c47c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c480:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c484:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c488:	688e      	ldr	r6, [r1, #8]
 800c48a:	b9ee      	cbnz	r6, 800c4c8 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c48c:	b2c3      	uxtb	r3, r0
 800c48e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c492:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c496:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c49a:	b142      	cbz	r2, 800c4ae <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c49c:	6852      	ldr	r2, [r2, #4]
 800c49e:	4282      	cmp	r2, r0
 800c4a0:	d014      	beq.n	800c4cc <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x60>
		insertion_point++;
 800c4a2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c4a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a8:	d1f5      	bne.n	800c496 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x2a>
			insertion_point = 0;
 800c4aa:	4633      	mov	r3, r6
 800c4ac:	e7ef      	b.n	800c48e <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x22>
	def->id = identifier;
 800c4ae:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c4b4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c4b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c4ba:	f10e 0e04 	add.w	lr, lr, #4
 800c4be:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c4c0:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	e000      	b.n	800c4ca <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c4c8:	2000      	movs	r0, #0
}
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e7fc      	b.n	800c4ca <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x5e>
 800c4d0:	c70f6907 	.word	0xc70f6907
 800c4d4:	0801118c 	.word	0x0801118c

0800c4d8 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	4604      	mov	r4, r0
 800c4dc:	460d      	mov	r5, r1
 800c4de:	4a17      	ldr	r2, [pc, #92]	; (800c53c <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x64>)
 800c4e0:	2118      	movs	r1, #24
 800c4e2:	4817      	ldr	r0, [pc, #92]	; (800c540 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x68>)
 800c4e4:	f001 fba2 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c4e8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c4ec:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c4f0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c4f4:	688e      	ldr	r6, [r1, #8]
 800c4f6:	b9ee      	cbnz	r6, 800c534 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c4f8:	b2c3      	uxtb	r3, r0
 800c4fa:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c4fe:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c502:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c506:	b142      	cbz	r2, 800c51a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c508:	6852      	ldr	r2, [r2, #4]
 800c50a:	4282      	cmp	r2, r0
 800c50c:	d014      	beq.n	800c538 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x60>
		insertion_point++;
 800c50e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c514:	d1f5      	bne.n	800c502 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x2a>
			insertion_point = 0;
 800c516:	4633      	mov	r3, r6
 800c518:	e7ef      	b.n	800c4fa <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x22>
	def->id = identifier;
 800c51a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c51c:	2201      	movs	r2, #1
 800c51e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c520:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c522:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c526:	f10e 0e04 	add.w	lr, lr, #4
 800c52a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c52c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c530:	4610      	mov	r0, r2
 800c532:	e000      	b.n	800c536 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c534:	2000      	movs	r0, #0
}
 800c536:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c538:	2000      	movs	r0, #0
 800c53a:	e7fc      	b.n	800c536 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x5e>
 800c53c:	c70f6907 	.word	0xc70f6907
 800c540:	080111a0 	.word	0x080111a0

0800c544 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4604      	mov	r4, r0
 800c548:	460d      	mov	r5, r1
 800c54a:	4a17      	ldr	r2, [pc, #92]	; (800c5a8 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x64>)
 800c54c:	210f      	movs	r1, #15
 800c54e:	4817      	ldr	r0, [pc, #92]	; (800c5ac <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x68>)
 800c550:	f001 fb6c 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c554:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c558:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c55c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c560:	688e      	ldr	r6, [r1, #8]
 800c562:	b9ee      	cbnz	r6, 800c5a0 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c564:	b2c3      	uxtb	r3, r0
 800c566:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c56a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c56e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c572:	b142      	cbz	r2, 800c586 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c574:	6852      	ldr	r2, [r2, #4]
 800c576:	4282      	cmp	r2, r0
 800c578:	d014      	beq.n	800c5a4 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x60>
		insertion_point++;
 800c57a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c580:	d1f5      	bne.n	800c56e <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x2a>
			insertion_point = 0;
 800c582:	4633      	mov	r3, r6
 800c584:	e7ef      	b.n	800c566 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x22>
	def->id = identifier;
 800c586:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c588:	2201      	movs	r2, #1
 800c58a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c58c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c58e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c592:	f10e 0e04 	add.w	lr, lr, #4
 800c596:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c598:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c59c:	4610      	mov	r0, r2
 800c59e:	e000      	b.n	800c5a2 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5e>
		return false; // Packet ID already in use
 800c5a0:	2000      	movs	r0, #0
}
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e7fc      	b.n	800c5a2 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x5e>
 800c5a8:	c70f6907 	.word	0xc70f6907
 800c5ac:	080111bc 	.word	0x080111bc

0800c5b0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	4a17      	ldr	r2, [pc, #92]	; (800c614 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x64>)
 800c5b8:	2114      	movs	r1, #20
 800c5ba:	4817      	ldr	r0, [pc, #92]	; (800c618 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x68>)
 800c5bc:	f001 fb36 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c5c0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c5c4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c5c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c5cc:	688e      	ldr	r6, [r1, #8]
 800c5ce:	b9ee      	cbnz	r6, 800c60c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c5d0:	b2c3      	uxtb	r3, r0
 800c5d2:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c5d6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c5da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5de:	b142      	cbz	r2, 800c5f2 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c5e0:	6852      	ldr	r2, [r2, #4]
 800c5e2:	4282      	cmp	r2, r0
 800c5e4:	d014      	beq.n	800c610 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x60>
		insertion_point++;
 800c5e6:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ec:	d1f5      	bne.n	800c5da <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x2a>
			insertion_point = 0;
 800c5ee:	4633      	mov	r3, r6
 800c5f0:	e7ef      	b.n	800c5d2 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x22>
	def->id = identifier;
 800c5f2:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c5f8:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c5fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c5fe:	f10e 0e04 	add.w	lr, lr, #4
 800c602:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c604:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c608:	2001      	movs	r0, #1
 800c60a:	e000      	b.n	800c60e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c60c:	2000      	movs	r0, #0
}
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c610:	2000      	movs	r0, #0
 800c612:	e7fc      	b.n	800c60e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x5e>
 800c614:	c70f6907 	.word	0xc70f6907
 800c618:	080111cc 	.word	0x080111cc

0800c61c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	460d      	mov	r5, r1
 800c622:	4a17      	ldr	r2, [pc, #92]	; (800c680 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x64>)
 800c624:	2115      	movs	r1, #21
 800c626:	4817      	ldr	r0, [pc, #92]	; (800c684 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x68>)
 800c628:	f001 fb00 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c62c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c630:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c634:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c638:	688e      	ldr	r6, [r1, #8]
 800c63a:	b9ee      	cbnz	r6, 800c678 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c63c:	b2c3      	uxtb	r3, r0
 800c63e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c642:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c646:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c64a:	b142      	cbz	r2, 800c65e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c64c:	6852      	ldr	r2, [r2, #4]
 800c64e:	4282      	cmp	r2, r0
 800c650:	d014      	beq.n	800c67c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x60>
		insertion_point++;
 800c652:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c658:	d1f5      	bne.n	800c646 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x2a>
			insertion_point = 0;
 800c65a:	4633      	mov	r3, r6
 800c65c:	e7ef      	b.n	800c63e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x22>
	def->id = identifier;
 800c65e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c660:	2210      	movs	r2, #16
 800c662:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c664:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c666:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c66a:	f10e 0e04 	add.w	lr, lr, #4
 800c66e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c670:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c674:	2001      	movs	r0, #1
 800c676:	e000      	b.n	800c67a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c678:	2000      	movs	r0, #0
}
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c67c:	2000      	movs	r0, #0
 800c67e:	e7fc      	b.n	800c67a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x5e>
 800c680:	c70f6907 	.word	0xc70f6907
 800c684:	080111e4 	.word	0x080111e4

0800c688 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	4a17      	ldr	r2, [pc, #92]	; (800c6ec <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x64>)
 800c690:	2115      	movs	r1, #21
 800c692:	4817      	ldr	r0, [pc, #92]	; (800c6f0 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x68>)
 800c694:	f001 faca 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c698:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c69c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c6a0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c6a4:	688e      	ldr	r6, [r1, #8]
 800c6a6:	b9ee      	cbnz	r6, 800c6e4 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c6a8:	b2c3      	uxtb	r3, r0
 800c6aa:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c6ae:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c6b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6b6:	b142      	cbz	r2, 800c6ca <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c6b8:	6852      	ldr	r2, [r2, #4]
 800c6ba:	4282      	cmp	r2, r0
 800c6bc:	d014      	beq.n	800c6e8 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x60>
		insertion_point++;
 800c6be:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6c4:	d1f5      	bne.n	800c6b2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x2a>
			insertion_point = 0;
 800c6c6:	4633      	mov	r3, r6
 800c6c8:	e7ef      	b.n	800c6aa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x22>
	def->id = identifier;
 800c6ca:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c6cc:	2210      	movs	r2, #16
 800c6ce:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c6d0:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c6d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c6d6:	f10e 0e04 	add.w	lr, lr, #4
 800c6da:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c6dc:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	e000      	b.n	800c6e6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c6e4:	2000      	movs	r0, #0
}
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e7fc      	b.n	800c6e6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x5e>
 800c6ec:	c70f6907 	.word	0xc70f6907
 800c6f0:	080111fc 	.word	0x080111fc

0800c6f4 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	4a17      	ldr	r2, [pc, #92]	; (800c758 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x64>)
 800c6fc:	2119      	movs	r1, #25
 800c6fe:	4817      	ldr	r0, [pc, #92]	; (800c75c <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x68>)
 800c700:	f001 fa94 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c704:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c708:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c70c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c710:	688e      	ldr	r6, [r1, #8]
 800c712:	b9ee      	cbnz	r6, 800c750 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c714:	b2c3      	uxtb	r3, r0
 800c716:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c71a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c71e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c722:	b142      	cbz	r2, 800c736 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c724:	6852      	ldr	r2, [r2, #4]
 800c726:	4282      	cmp	r2, r0
 800c728:	d014      	beq.n	800c754 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x60>
		insertion_point++;
 800c72a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c730:	d1f5      	bne.n	800c71e <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x2a>
			insertion_point = 0;
 800c732:	4633      	mov	r3, r6
 800c734:	e7ef      	b.n	800c716 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x22>
	def->id = identifier;
 800c736:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c738:	2201      	movs	r2, #1
 800c73a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c73c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c73e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c742:	f10e 0e04 	add.w	lr, lr, #4
 800c746:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c748:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c74c:	4610      	mov	r0, r2
 800c74e:	e000      	b.n	800c752 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c750:	2000      	movs	r0, #0
}
 800c752:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c754:	2000      	movs	r0, #0
 800c756:	e7fc      	b.n	800c752 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x5e>
 800c758:	c70f6907 	.word	0xc70f6907
 800c75c:	08011214 	.word	0x08011214

0800c760 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	4604      	mov	r4, r0
 800c764:	460d      	mov	r5, r1
 800c766:	4a17      	ldr	r2, [pc, #92]	; (800c7c4 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x64>)
 800c768:	2117      	movs	r1, #23
 800c76a:	4817      	ldr	r0, [pc, #92]	; (800c7c8 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x68>)
 800c76c:	f001 fa5e 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c770:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c774:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c778:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c77c:	688e      	ldr	r6, [r1, #8]
 800c77e:	b9ee      	cbnz	r6, 800c7bc <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c780:	b2c3      	uxtb	r3, r0
 800c782:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c786:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c78a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c78e:	b142      	cbz	r2, 800c7a2 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c790:	6852      	ldr	r2, [r2, #4]
 800c792:	4282      	cmp	r2, r0
 800c794:	d014      	beq.n	800c7c0 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x60>
		insertion_point++;
 800c796:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c79c:	d1f5      	bne.n	800c78a <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x2a>
			insertion_point = 0;
 800c79e:	4633      	mov	r3, r6
 800c7a0:	e7ef      	b.n	800c782 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x22>
	def->id = identifier;
 800c7a2:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c7a8:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c7aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c7ae:	f10e 0e04 	add.w	lr, lr, #4
 800c7b2:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c7b4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	e000      	b.n	800c7be <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c7bc:	2000      	movs	r0, #0
}
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7fc      	b.n	800c7be <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x5e>
 800c7c4:	c70f6907 	.word	0xc70f6907
 800c7c8:	08011230 	.word	0x08011230

0800c7cc <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	4a17      	ldr	r2, [pc, #92]	; (800c830 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x64>)
 800c7d4:	2114      	movs	r1, #20
 800c7d6:	4817      	ldr	r0, [pc, #92]	; (800c834 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x68>)
 800c7d8:	f001 fa28 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c7dc:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c7e0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c7e4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c7e8:	688e      	ldr	r6, [r1, #8]
 800c7ea:	b9ee      	cbnz	r6, 800c828 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c7ec:	b2c3      	uxtb	r3, r0
 800c7ee:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c7f2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c7f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7fa:	b142      	cbz	r2, 800c80e <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c7fc:	6852      	ldr	r2, [r2, #4]
 800c7fe:	4282      	cmp	r2, r0
 800c800:	d014      	beq.n	800c82c <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x60>
		insertion_point++;
 800c802:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c808:	d1f5      	bne.n	800c7f6 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x2a>
			insertion_point = 0;
 800c80a:	4633      	mov	r3, r6
 800c80c:	e7ef      	b.n	800c7ee <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x22>
	def->id = identifier;
 800c80e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c810:	2201      	movs	r2, #1
 800c812:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c814:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c816:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c81a:	f10e 0e04 	add.w	lr, lr, #4
 800c81e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c820:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c824:	4610      	mov	r0, r2
 800c826:	e000      	b.n	800c82a <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c828:	2000      	movs	r0, #0
}
 800c82a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c82c:	2000      	movs	r0, #0
 800c82e:	e7fc      	b.n	800c82a <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x5e>
 800c830:	c70f6907 	.word	0xc70f6907
 800c834:	08011248 	.word	0x08011248

0800c838 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	4a17      	ldr	r2, [pc, #92]	; (800c89c <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x64>)
 800c840:	2115      	movs	r1, #21
 800c842:	4817      	ldr	r0, [pc, #92]	; (800c8a0 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x68>)
 800c844:	f001 f9f2 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c848:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c84c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c850:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c854:	688e      	ldr	r6, [r1, #8]
 800c856:	b9ee      	cbnz	r6, 800c894 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c858:	b2c3      	uxtb	r3, r0
 800c85a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c85e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c862:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c866:	b142      	cbz	r2, 800c87a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c868:	6852      	ldr	r2, [r2, #4]
 800c86a:	4282      	cmp	r2, r0
 800c86c:	d014      	beq.n	800c898 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x60>
		insertion_point++;
 800c86e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c874:	d1f5      	bne.n	800c862 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x2a>
			insertion_point = 0;
 800c876:	4633      	mov	r3, r6
 800c878:	e7ef      	b.n	800c85a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x22>
	def->id = identifier;
 800c87a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c87c:	2201      	movs	r2, #1
 800c87e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c880:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c882:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c886:	f10e 0e04 	add.w	lr, lr, #4
 800c88a:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c88c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c890:	4610      	mov	r0, r2
 800c892:	e000      	b.n	800c896 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c894:	2000      	movs	r0, #0
}
 800c896:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c898:	2000      	movs	r0, #0
 800c89a:	e7fc      	b.n	800c896 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x5e>
 800c89c:	c70f6907 	.word	0xc70f6907
 800c8a0:	08011260 	.word	0x08011260

0800c8a4 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	4a17      	ldr	r2, [pc, #92]	; (800c908 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x64>)
 800c8ac:	2114      	movs	r1, #20
 800c8ae:	4817      	ldr	r0, [pc, #92]	; (800c90c <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x68>)
 800c8b0:	f001 f9bc 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c8b4:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c8b8:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c8bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c8c0:	688e      	ldr	r6, [r1, #8]
 800c8c2:	b9ee      	cbnz	r6, 800c900 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c8c4:	b2c3      	uxtb	r3, r0
 800c8c6:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c8ca:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c8ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c8d2:	b142      	cbz	r2, 800c8e6 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c8d4:	6852      	ldr	r2, [r2, #4]
 800c8d6:	4282      	cmp	r2, r0
 800c8d8:	d014      	beq.n	800c904 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x60>
		insertion_point++;
 800c8da:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c8dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e0:	d1f5      	bne.n	800c8ce <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x2a>
			insertion_point = 0;
 800c8e2:	4633      	mov	r3, r6
 800c8e4:	e7ef      	b.n	800c8c6 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x22>
	def->id = identifier;
 800c8e6:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c8ec:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c8ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c8f2:	f10e 0e04 	add.w	lr, lr, #4
 800c8f6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c8f8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	e000      	b.n	800c902 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c900:	2000      	movs	r0, #0
}
 800c902:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c904:	2000      	movs	r0, #0
 800c906:	e7fc      	b.n	800c902 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x5e>
 800c908:	c70f6907 	.word	0xc70f6907
 800c90c:	08011278 	.word	0x08011278

0800c910 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	4a17      	ldr	r2, [pc, #92]	; (800c974 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x64>)
 800c918:	2117      	movs	r1, #23
 800c91a:	4817      	ldr	r0, [pc, #92]	; (800c978 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x68>)
 800c91c:	f001 f986 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c920:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c924:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c928:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c92c:	688e      	ldr	r6, [r1, #8]
 800c92e:	b9ee      	cbnz	r6, 800c96c <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c930:	b2c3      	uxtb	r3, r0
 800c932:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c936:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c93a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c93e:	b142      	cbz	r2, 800c952 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c940:	6852      	ldr	r2, [r2, #4]
 800c942:	4282      	cmp	r2, r0
 800c944:	d014      	beq.n	800c970 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x60>
		insertion_point++;
 800c946:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c94c:	d1f5      	bne.n	800c93a <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x2a>
			insertion_point = 0;
 800c94e:	4633      	mov	r3, r6
 800c950:	e7ef      	b.n	800c932 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x22>
	def->id = identifier;
 800c952:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c954:	2201      	movs	r2, #1
 800c956:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c958:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c95a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c95e:	f10e 0e04 	add.w	lr, lr, #4
 800c962:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c964:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c968:	4610      	mov	r0, r2
 800c96a:	e000      	b.n	800c96e <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c96c:	2000      	movs	r0, #0
}
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c970:	2000      	movs	r0, #0
 800c972:	e7fc      	b.n	800c96e <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x5e>
 800c974:	c70f6907 	.word	0xc70f6907
 800c978:	08011290 	.word	0x08011290

0800c97c <_ZN10MessageBus6defineI9FsmPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	460d      	mov	r5, r1
 800c982:	4a17      	ldr	r2, [pc, #92]	; (800c9e0 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x64>)
 800c984:	210a      	movs	r1, #10
 800c986:	4817      	ldr	r0, [pc, #92]	; (800c9e4 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x68>)
 800c988:	f001 f950 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c98c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c990:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800c994:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800c998:	688e      	ldr	r6, [r1, #8]
 800c99a:	b9ee      	cbnz	r6, 800c9d8 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800c99c:	b2c3      	uxtb	r3, r0
 800c99e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800c9a2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800c9a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9aa:	b142      	cbz	r2, 800c9be <_ZN10MessageBus6defineI9FsmPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800c9ac:	6852      	ldr	r2, [r2, #4]
 800c9ae:	4282      	cmp	r2, r0
 800c9b0:	d014      	beq.n	800c9dc <_ZN10MessageBus6defineI9FsmPacketEEbh+0x60>
		insertion_point++;
 800c9b2:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800c9b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b8:	d1f5      	bne.n	800c9a6 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x2a>
			insertion_point = 0;
 800c9ba:	4633      	mov	r3, r6
 800c9bc:	e7ef      	b.n	800c99e <_ZN10MessageBus6defineI9FsmPacketEEbh+0x22>
	def->id = identifier;
 800c9be:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800c9c4:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800c9c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800c9ca:	f10e 0e04 	add.w	lr, lr, #4
 800c9ce:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800c9d0:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	e000      	b.n	800c9da <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800c9d8:	2000      	movs	r0, #0
}
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7fc      	b.n	800c9da <_ZN10MessageBus6defineI9FsmPacketEEbh+0x5e>
 800c9e0:	c70f6907 	.word	0xc70f6907
 800c9e4:	080112a8 	.word	0x080112a8

0800c9e8 <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	460d      	mov	r5, r1
 800c9ee:	4a17      	ldr	r2, [pc, #92]	; (800ca4c <_ZN10MessageBus6defineI10DataPacketEEbh+0x64>)
 800c9f0:	210c      	movs	r1, #12
 800c9f2:	4817      	ldr	r0, [pc, #92]	; (800ca50 <_ZN10MessageBus6defineI10DataPacketEEbh+0x68>)
 800c9f4:	f001 f91a 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800c9f8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800c9fc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ca00:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800ca04:	688e      	ldr	r6, [r1, #8]
 800ca06:	b9e6      	cbnz	r6, 800ca42 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5a>
	uint32_t insertion_point = hash % 256;
 800ca08:	b2c3      	uxtb	r3, r0
 800ca0a:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ca0e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ca12:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca16:	b142      	cbz	r2, 800ca2a <_ZN10MessageBus6defineI10DataPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800ca18:	6852      	ldr	r2, [r2, #4]
 800ca1a:	4282      	cmp	r2, r0
 800ca1c:	d013      	beq.n	800ca46 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5e>
		insertion_point++;
 800ca1e:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800ca20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca24:	d1f5      	bne.n	800ca12 <_ZN10MessageBus6defineI10DataPacketEEbh+0x2a>
			insertion_point = 0;
 800ca26:	4633      	mov	r3, r6
 800ca28:	e7ef      	b.n	800ca0a <_ZN10MessageBus6defineI10DataPacketEEbh+0x22>
	def->id = identifier;
 800ca2a:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800ca2c:	2204      	movs	r2, #4
 800ca2e:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800ca30:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ca32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800ca36:	4496      	add	lr, r2
 800ca38:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800ca3a:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800ca3e:	2001      	movs	r0, #1
 800ca40:	e000      	b.n	800ca44 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5c>
		return false; // Packet ID already in use
 800ca42:	2000      	movs	r0, #0
}
 800ca44:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800ca46:	2000      	movs	r0, #0
 800ca48:	e7fc      	b.n	800ca44 <_ZN10MessageBus6defineI10DataPacketEEbh+0x5c>
 800ca4a:	bf00      	nop
 800ca4c:	c70f6907 	.word	0xc70f6907
 800ca50:	080112b4 	.word	0x080112b4

0800ca54 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	4604      	mov	r4, r0
 800ca58:	460d      	mov	r5, r1
 800ca5a:	4a17      	ldr	r2, [pc, #92]	; (800cab8 <_ZN10MessageBus6defineI10PingPacketEEbh+0x64>)
 800ca5c:	210c      	movs	r1, #12
 800ca5e:	4817      	ldr	r0, [pc, #92]	; (800cabc <_ZN10MessageBus6defineI10PingPacketEEbh+0x68>)
 800ca60:	f001 f8e4 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800ca64:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800ca68:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800ca6c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800ca70:	688e      	ldr	r6, [r1, #8]
 800ca72:	b9ee      	cbnz	r6, 800cab0 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800ca74:	b2c3      	uxtb	r3, r0
 800ca76:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800ca7a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800ca7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca82:	b142      	cbz	r2, 800ca96 <_ZN10MessageBus6defineI10PingPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800ca84:	6852      	ldr	r2, [r2, #4]
 800ca86:	4282      	cmp	r2, r0
 800ca88:	d014      	beq.n	800cab4 <_ZN10MessageBus6defineI10PingPacketEEbh+0x60>
		insertion_point++;
 800ca8a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d1f5      	bne.n	800ca7e <_ZN10MessageBus6defineI10PingPacketEEbh+0x2a>
			insertion_point = 0;
 800ca92:	4633      	mov	r3, r6
 800ca94:	e7ef      	b.n	800ca76 <_ZN10MessageBus6defineI10PingPacketEEbh+0x22>
	def->id = identifier;
 800ca96:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800ca98:	2208      	movs	r2, #8
 800ca9a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800ca9c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800ca9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800caa2:	f10e 0e04 	add.w	lr, lr, #4
 800caa6:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800caa8:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800caac:	2001      	movs	r0, #1
 800caae:	e000      	b.n	800cab2 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cab0:	2000      	movs	r0, #0
}
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cab4:	2000      	movs	r0, #0
 800cab6:	e7fc      	b.n	800cab2 <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
 800cab8:	c70f6907 	.word	0xc70f6907
 800cabc:	080112c4 	.word	0x080112c4

0800cac0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	4604      	mov	r4, r0
 800cac4:	460d      	mov	r5, r1
 800cac6:	4a17      	ldr	r2, [pc, #92]	; (800cb24 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x64>)
 800cac8:	210d      	movs	r1, #13
 800caca:	4817      	ldr	r0, [pc, #92]	; (800cb28 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x68>)
 800cacc:	f001 f8ae 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800cad0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cad4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cad8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cadc:	688e      	ldr	r6, [r1, #8]
 800cade:	b9ee      	cbnz	r6, 800cb1c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cae0:	b2c3      	uxtb	r3, r0
 800cae2:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cae6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800caea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800caee:	b142      	cbz	r2, 800cb02 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800caf0:	6852      	ldr	r2, [r2, #4]
 800caf2:	4282      	cmp	r2, r0
 800caf4:	d014      	beq.n	800cb20 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x60>
		insertion_point++;
 800caf6:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800caf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cafc:	d1f5      	bne.n	800caea <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x2a>
			insertion_point = 0;
 800cafe:	4633      	mov	r3, r6
 800cb00:	e7ef      	b.n	800cae2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x22>
	def->id = identifier;
 800cb02:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cb04:	2201      	movs	r2, #1
 800cb06:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cb08:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cb0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cb0e:	f10e 0e04 	add.w	lr, lr, #4
 800cb12:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cb14:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cb18:	4610      	mov	r0, r2
 800cb1a:	e000      	b.n	800cb1e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cb1c:	2000      	movs	r0, #0
}
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cb20:	2000      	movs	r0, #0
 800cb22:	e7fc      	b.n	800cb1e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
 800cb24:	c70f6907 	.word	0xc70f6907
 800cb28:	080112d4 	.word	0x080112d4

0800cb2c <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	4a17      	ldr	r2, [pc, #92]	; (800cb90 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x64>)
 800cb34:	210f      	movs	r1, #15
 800cb36:	4817      	ldr	r0, [pc, #92]	; (800cb94 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x68>)
 800cb38:	f001 f878 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800cb3c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cb40:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cb44:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cb48:	688e      	ldr	r6, [r1, #8]
 800cb4a:	b9ee      	cbnz	r6, 800cb88 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cb4c:	b2c3      	uxtb	r3, r0
 800cb4e:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cb52:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cb56:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb5a:	b142      	cbz	r2, 800cb6e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cb5c:	6852      	ldr	r2, [r2, #4]
 800cb5e:	4282      	cmp	r2, r0
 800cb60:	d014      	beq.n	800cb8c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x60>
		insertion_point++;
 800cb62:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cb64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb68:	d1f5      	bne.n	800cb56 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x2a>
			insertion_point = 0;
 800cb6a:	4633      	mov	r3, r6
 800cb6c:	e7ef      	b.n	800cb4e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x22>
	def->id = identifier;
 800cb6e:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cb70:	2208      	movs	r2, #8
 800cb72:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cb74:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cb76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cb7a:	f10e 0e04 	add.w	lr, lr, #4
 800cb7e:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cb80:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cb84:	2001      	movs	r0, #1
 800cb86:	e000      	b.n	800cb8a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cb88:	2000      	movs	r0, #0
}
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7fc      	b.n	800cb8a <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
 800cb90:	c70f6907 	.word	0xc70f6907
 800cb94:	080112e4 	.word	0x080112e4

0800cb98 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	4a17      	ldr	r2, [pc, #92]	; (800cbfc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x64>)
 800cba0:	2110      	movs	r1, #16
 800cba2:	4817      	ldr	r0, [pc, #92]	; (800cc00 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x68>)
 800cba4:	f001 f842 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800cba8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cbac:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cbb0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cbb4:	688e      	ldr	r6, [r1, #8]
 800cbb6:	b9ee      	cbnz	r6, 800cbf4 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cbb8:	b2c3      	uxtb	r3, r0
 800cbba:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cbbe:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cbc2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cbc6:	b142      	cbz	r2, 800cbda <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cbc8:	6852      	ldr	r2, [r2, #4]
 800cbca:	4282      	cmp	r2, r0
 800cbcc:	d014      	beq.n	800cbf8 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x60>
		insertion_point++;
 800cbce:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cbd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbd4:	d1f5      	bne.n	800cbc2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x2a>
			insertion_point = 0;
 800cbd6:	4633      	mov	r3, r6
 800cbd8:	e7ef      	b.n	800cbba <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x22>
	def->id = identifier;
 800cbda:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cbdc:	2208      	movs	r2, #8
 800cbde:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cbe0:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cbe2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cbe6:	f10e 0e04 	add.w	lr, lr, #4
 800cbea:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cbec:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e000      	b.n	800cbf6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cbf4:	2000      	movs	r0, #0
}
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e7fc      	b.n	800cbf6 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
 800cbfc:	c70f6907 	.word	0xc70f6907
 800cc00:	080112f4 	.word	0x080112f4

0800cc04 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	4a17      	ldr	r2, [pc, #92]	; (800cc68 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x64>)
 800cc0c:	2110      	movs	r1, #16
 800cc0e:	4817      	ldr	r0, [pc, #92]	; (800cc6c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x68>)
 800cc10:	f001 f80c 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800cc14:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 800cc18:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800cc1c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 800cc20:	688e      	ldr	r6, [r1, #8]
 800cc22:	b9ee      	cbnz	r6, 800cc60 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5c>
	uint32_t insertion_point = hash % 256;
 800cc24:	b2c3      	uxtb	r3, r0
 800cc26:	f103 0c81 	add.w	ip, r3, #129	; 0x81
 800cc2a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
	while(definitions_by_type[insertion_point] != nullptr) {
 800cc2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc32:	b142      	cbz	r2, 800cc46 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x42>
		if(definitions_by_type[insertion_point]->hash == hash) {
 800cc34:	6852      	ldr	r2, [r2, #4]
 800cc36:	4282      	cmp	r2, r0
 800cc38:	d014      	beq.n	800cc64 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x60>
		insertion_point++;
 800cc3a:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 800cc3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc40:	d1f5      	bne.n	800cc2e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x2a>
			insertion_point = 0;
 800cc42:	4633      	mov	r3, r6
 800cc44:	e7ef      	b.n	800cc26 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x22>
	def->id = identifier;
 800cc46:	710d      	strb	r5, [r1, #4]
	def->size = (uint8_t) struct_size;
 800cc48:	2205      	movs	r2, #5
 800cc4a:	714a      	strb	r2, [r1, #5]
	def->hash = hash;
 800cc4c:	6088      	str	r0, [r1, #8]
	definitions_by_type[insertion_point] = def;
 800cc4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 800cc52:	f10e 0e04 	add.w	lr, lr, #4
 800cc56:	4474      	add	r4, lr
	definitions_by_type[insertion_point] = def;
 800cc58:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	return true;
 800cc5c:	2001      	movs	r0, #1
 800cc5e:	e000      	b.n	800cc62 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
		return false; // Packet ID already in use
 800cc60:	2000      	movs	r0, #0
}
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
			return false; // Packet type already defined
 800cc64:	2000      	movs	r0, #0
 800cc66:	e7fc      	b.n	800cc62 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
 800cc68:	c70f6907 	.word	0xc70f6907
 800cc6c:	08011308 	.word	0x08011308

0800cc70 <_ZNKSt8functionIFvhPvEEclEhS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800cc70:	b500      	push	{lr}
 800cc72:	b083      	sub	sp, #12
 800cc74:	9200      	str	r2, [sp, #0]
 800cc76:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800cc7a:	6883      	ldr	r3, [r0, #8]
 800cc7c:	b13b      	cbz	r3, 800cc8e <_ZNKSt8functionIFvhPvEEclEhS0_+0x1e>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cc7e:	68c3      	ldr	r3, [r0, #12]
 800cc80:	466a      	mov	r2, sp
 800cc82:	f10d 0107 	add.w	r1, sp, #7
 800cc86:	4798      	blx	r3
    }
 800cc88:	b003      	add	sp, #12
 800cc8a:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 800cc8e:	f001 fb10 	bl	800e2b2 <_ZSt25__throw_bad_function_callv>

0800cc92 <_ZN10MessageBus7receiveEhPhm>:
	if(length > 0) {
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80a7 	beq.w	800cde6 <_ZN10MessageBus7receiveEhPhm+0x154>
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	4699      	mov	r9, r3
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 800cca0:	f001 043f 	and.w	r4, r1, #63	; 0x3f
		if(indexable_buffer->index == 0) {
 800cca4:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800cca8:	4403      	add	r3, r0
 800ccaa:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 8085 	bne.w	800cdbe <_ZN10MessageBus7receiveEhPhm+0x12c>
			packet_id = *pointer++; // Packet ID is the first element in a frame
 800ccb4:	f812 3b01 	ldrb.w	r3, [r2], #1
			indexable_buffer->current_packet_id = packet_id;
 800ccb8:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800ccbc:	4428      	add	r0, r5
 800ccbe:	f880 3604 	strb.w	r3, [r0, #1540]	; 0x604
			indexable_buffer->index++;
 800ccc2:	2601      	movs	r6, #1
 800ccc4:	f880 6704 	strb.w	r6, [r0, #1796]	; 0x704
			length--;
 800ccc8:	f109 39ff 	add.w	r9, r9, #4294967295
		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 800cccc:	f003 063f 	and.w	r6, r3, #63	; 0x3f
		if(def->id != packet_id || indexable_buffer->index + length > max_packet_size) {
 800ccd0:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 800ccd4:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
 800ccd8:	7938      	ldrb	r0, [r7, #4]
 800ccda:	4298      	cmp	r0, r3
 800ccdc:	d175      	bne.n	800cdca <_ZN10MessageBus7receiveEhPhm+0x138>
 800ccde:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800cce2:	442b      	add	r3, r5
 800cce4:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800cce8:	444b      	add	r3, r9
 800ccea:	2bff      	cmp	r3, #255	; 0xff
 800ccec:	d86d      	bhi.n	800cdca <_ZN10MessageBus7receiveEhPhm+0x138>
		for(uint16_t i = 0; i < length; i++) {
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	d015      	beq.n	800cd20 <_ZN10MessageBus7receiveEhPhm+0x8e>
 800ccf4:	f04f 0c00 	mov.w	ip, #0
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 800ccf8:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800ccfc:	4428      	add	r0, r5
 800ccfe:	f890 e704 	ldrb.w	lr, [r0, #1796]	; 0x704
 800cd02:	f10e 0301 	add.w	r3, lr, #1
 800cd06:	f880 3704 	strb.w	r3, [r0, #1796]	; 0x704
 800cd0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cd0e:	4486      	add	lr, r0
 800cd10:	f88e 3605 	strb.w	r3, [lr, #1541]	; 0x605
		for(uint16_t i = 0; i < length; i++) {
 800cd14:	f10c 0c01 	add.w	ip, ip, #1
 800cd18:	fa1f fc8c 	uxth.w	ip, ip
 800cd1c:	45cc      	cmp	ip, r9
 800cd1e:	d3ee      	bcc.n	800ccfe <_ZN10MessageBus7receiveEhPhm+0x6c>
		int16_t excess = indexable_buffer->index - (def->size + 1);
 800cd20:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800cd24:	442b      	add	r3, r5
 800cd26:	f893 a704 	ldrb.w	sl, [r3, #1796]	; 0x704
 800cd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd2e:	797b      	ldrb	r3, [r7, #5]
 800cd30:	ebaa 0a03 	sub.w	sl, sl, r3
 800cd34:	fa1f f98a 	uxth.w	r9, sl
		if(excess >= 0) {
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	db51      	blt.n	800cde2 <_ZN10MessageBus7receiveEhPhm+0x150>
			if(handlers[packet_id & 0b00111111] != nullptr) {
 800cd3e:	eb05 1006 	add.w	r0, r5, r6, lsl #4
 800cd42:	f600 600c 	addw	r0, r0, #3596	; 0xe0c
 800cd46:	6883      	ldr	r3, [r0, #8]
 800cd48:	b133      	cbz	r3, 800cd58 <_ZN10MessageBus7receiveEhPhm+0xc6>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer + 1);
 800cd4a:	eb04 2204 	add.w	r2, r4, r4, lsl #8
 800cd4e:	f202 6206 	addw	r2, r2, #1542	; 0x606
 800cd52:	442a      	add	r2, r5
 800cd54:	f7ff ff8c 	bl	800cc70 <_ZNKSt8functionIFvhPvEEclEhS0_>
			if(forwarders[packet_id & 0b00111111] != nullptr) {
 800cd58:	f206 4682 	addw	r6, r6, #1154	; 0x482
 800cd5c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800cd60:	6870      	ldr	r0, [r6, #4]
 800cd62:	b150      	cbz	r0, 800cd7a <_ZN10MessageBus7receiveEhPhm+0xe8>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer + 1);
 800cd64:	eb04 2204 	add.w	r2, r4, r4, lsl #8
 800cd68:	f202 6206 	addw	r2, r2, #1542	; 0x606
		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 800cd6c:	f108 0104 	add.w	r1, r8, #4
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer + 1);
 800cd70:	6803      	ldr	r3, [r0, #0]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	442a      	add	r2, r5
 800cd76:	4429      	add	r1, r5
 800cd78:	4798      	blx	r3
			if(excess > 0) {
 800cd7a:	f1ba 0f00 	cmp.w	sl, #0
 800cd7e:	dd18      	ble.n	800cdb2 <_ZN10MessageBus7receiveEhPhm+0x120>
					indexable_buffer->buffer[i] = indexable_buffer->buffer[i + (def->size + 1)];
 800cd80:	797e      	ldrb	r6, [r7, #5]
 800cd82:	3601      	adds	r6, #1
				for(uint16_t i = 0; i < excess; i++) {
 800cd84:	2300      	movs	r3, #0
 800cd86:	461a      	mov	r2, r3
					indexable_buffer->buffer[i] = indexable_buffer->buffer[i + (def->size + 1)];
 800cd88:	eb04 2004 	add.w	r0, r4, r4, lsl #8
 800cd8c:	4428      	add	r0, r5
 800cd8e:	4402      	add	r2, r0
 800cd90:	1991      	adds	r1, r2, r6
 800cd92:	f891 1605 	ldrb.w	r1, [r1, #1541]	; 0x605
 800cd96:	f882 1605 	strb.w	r1, [r2, #1541]	; 0x605
				for(uint16_t i = 0; i < excess; i++) {
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	461a      	mov	r2, r3
 800cda0:	4553      	cmp	r3, sl
 800cda2:	dbf4      	blt.n	800cd8e <_ZN10MessageBus7receiveEhPhm+0xfc>
				indexable_buffer->current_packet_id = indexable_buffer->buffer[0];
 800cda4:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800cda8:	442b      	add	r3, r5
 800cdaa:	f893 2605 	ldrb.w	r2, [r3, #1541]	; 0x605
 800cdae:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
			indexable_buffer->index = excess;
 800cdb2:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 800cdb6:	442c      	add	r4, r5
 800cdb8:	f884 9704 	strb.w	r9, [r4, #1796]	; 0x704
 800cdbc:	e011      	b.n	800cde2 <_ZN10MessageBus7receiveEhPhm+0x150>
			packet_id = indexable_buffer->current_packet_id;
 800cdbe:	eb04 2304 	add.w	r3, r4, r4, lsl #8
 800cdc2:	4403      	add	r3, r0
 800cdc4:	f893 3604 	ldrb.w	r3, [r3, #1540]	; 0x604
 800cdc8:	e780      	b.n	800cccc <_ZN10MessageBus7receiveEhPhm+0x3a>
			indexable_buffer->index = 0; // Corrupted packet
 800cdca:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 800cdce:	442c      	add	r4, r5
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f884 3704 	strb.w	r3, [r4, #1796]	; 0x704
			indexable_buffer->current_packet_id = 0;
 800cdd6:	f884 3604 	strb.w	r3, [r4, #1540]	; 0x604
			receive(sender_id, pointer, length);
 800cdda:	464b      	mov	r3, r9
 800cddc:	4628      	mov	r0, r5
 800cdde:	f7ff ff58 	bl	800cc92 <_ZN10MessageBus7receiveEhPhm>
}
 800cde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde6:	4770      	bx	lr

0800cde8 <_ZNKSt8functionIFvhP13sc_LED_packetEEclEhS1_>:
    function<_Res(_ArgTypes...)>::
 800cde8:	b500      	push	{lr}
 800cdea:	b083      	sub	sp, #12
 800cdec:	9200      	str	r2, [sp, #0]
 800cdee:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
 800cdf2:	6883      	ldr	r3, [r0, #8]
 800cdf4:	b13b      	cbz	r3, 800ce06 <_ZNKSt8functionIFvhP13sc_LED_packetEEclEhS1_+0x1e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cdf6:	68c3      	ldr	r3, [r0, #12]
 800cdf8:	466a      	mov	r2, sp
 800cdfa:	f10d 0107 	add.w	r1, sp, #7
 800cdfe:	4798      	blx	r3
    }
 800ce00:	b003      	add	sp, #12
 800ce02:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 800ce06:	f001 fa54 	bl	800e2b2 <_ZSt25__throw_bad_function_callv>

0800ce0a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800ce0a:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 800ce0c:	6804      	ldr	r4, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ce0e:	780d      	ldrb	r5, [r1, #0]
 800ce10:	6816      	ldr	r6, [r2, #0]
				handlers[packetID](sender, (T*) packet);
 800ce12:	7923      	ldrb	r3, [r4, #4]
 800ce14:	011b      	lsls	r3, r3, #4
 800ce16:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 800ce1a:	6820      	ldr	r0, [r4, #0]
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4629      	mov	r1, r5
 800ce20:	4418      	add	r0, r3
 800ce22:	f7ff ff25 	bl	800cc70 <_ZNKSt8functionIFvhPvEEclEhS0_>
				handler(sender, (T*) packet);
 800ce26:	4632      	mov	r2, r6
 800ce28:	4629      	mov	r1, r5
 800ce2a:	68a0      	ldr	r0, [r4, #8]
 800ce2c:	f7ff ffdc 	bl	800cde8 <_ZNKSt8functionIFvhP13sc_LED_packetEEclEhS1_>
      }
 800ce30:	bd70      	pop	{r4, r5, r6, pc}

0800ce32 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800ce32:	b508      	push	{r3, lr}
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800ce34:	6812      	ldr	r2, [r2, #0]
 800ce36:	7809      	ldrb	r1, [r1, #0]
 800ce38:	6800      	ldr	r0, [r0, #0]
 800ce3a:	f7ff ffd5 	bl	800cde8 <_ZNKSt8functionIFvhP13sc_LED_packetEEclEhS1_>
      }
 800ce3e:	bd08      	pop	{r3, pc}

0800ce40 <_ZNSt8functionIFvhP13sc_LED_packetEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 800ce44:	2300      	movs	r3, #0
 800ce46:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 800ce48:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 800ce4a:	b133      	cbz	r3, 800ce5a <_ZNSt8functionIFvhP13sc_LED_packetEEC1ERKS3_+0x1a>
 800ce4c:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800ce4e:	2202      	movs	r2, #2
 800ce50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800ce52:	68eb      	ldr	r3, [r5, #12]
 800ce54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 800ce56:	68ab      	ldr	r3, [r5, #8]
 800ce58:	60a3      	str	r3, [r4, #8]
    }
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ce60 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 800ce60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce64:	b093      	sub	sp, #76	; 0x4c
 800ce66:	4604      	mov	r4, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	4a52      	ldr	r2, [pc, #328]	; (800cfb4 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x154>)
 800ce6c:	210f      	movs	r1, #15
 800ce6e:	4852      	ldr	r0, [pc, #328]	; (800cfb8 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x158>)
 800ce70:	f000 fedc 	bl	800dc2c <_ZSt11_Hash_bytesPKvjj>
 800ce74:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4798      	blx	r3
	if(def != nullptr) {
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f000 8093 	beq.w	800cfaa <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x14a>
		uint8_t packetID = def->id;
 800ce84:	7805      	ldrb	r5, [r0, #0]
		if(handlers[packetID] != nullptr) {
 800ce86:	eb04 1605 	add.w	r6, r4, r5, lsl #4
 800ce8a:	f606 660c 	addw	r6, r6, #3596	; 0xe0c
 800ce8e:	68b3      	ldr	r3, [r6, #8]
 800ce90:	b32b      	cbz	r3, 800cede <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x7e>
    _Function_base() : _M_manager(nullptr) { }
 800ce92:	2300      	movs	r3, #0
 800ce94:	9308      	str	r3, [sp, #32]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800ce96:	200c      	movs	r0, #12
 800ce98:	f7fe ff9c 	bl	800bdd4 <_Znwj>
 800ce9c:	6004      	str	r4, [r0, #0]
 800ce9e:	7105      	strb	r5, [r0, #4]
 800cea0:	6087      	str	r7, [r0, #8]
 800cea2:	9006      	str	r0, [sp, #24]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cea4:	466b      	mov	r3, sp
 800cea6:	aa06      	add	r2, sp, #24
 800cea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ceac:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800ceb0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ceb4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800ceb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cebc:	e9c6 0100 	strd	r0, r1, [r6]
      __a = _GLIBCXX_MOVE(__b);
 800cec0:	68b3      	ldr	r3, [r6, #8]
 800cec2:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 800cec4:	4a3d      	ldr	r2, [pc, #244]	; (800cfbc <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x15c>)
 800cec6:	60b2      	str	r2, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
 800cec8:	68f2      	ldr	r2, [r6, #12]
 800ceca:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 800cecc:	4a3c      	ldr	r2, [pc, #240]	; (800cfc0 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x160>)
 800cece:	60f2      	str	r2, [r6, #12]
      if (_M_manager)
 800ced0:	b11b      	cbz	r3, 800ceda <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x7a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800ced2:	2203      	movs	r2, #3
 800ced4:	a906      	add	r1, sp, #24
 800ced6:	4608      	mov	r0, r1
 800ced8:	4798      	blx	r3
		return true;
 800ceda:	2001      	movs	r0, #1
 800cedc:	e066      	b.n	800cfac <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x14c>
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800cede:	f10d 0908 	add.w	r9, sp, #8
 800cee2:	4639      	mov	r1, r7
 800cee4:	4648      	mov	r0, r9
 800cee6:	f7ff ffab 	bl	800ce40 <_ZNSt8functionIFvhP13sc_LED_packetEEC1ERKS3_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ceea:	466f      	mov	r7, sp
 800ceec:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cef0:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800cef4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cef8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cefc:	e889 0003 	stmia.w	r9, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800cf00:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cf04:	e888 0003 	stmia.w	r8, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf08:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 800cf0a:	f04f 0900 	mov.w	r9, #0
 800cf0e:	f8cd 9010 	str.w	r9, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800cf12:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf14:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800cf16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf18:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800cf1a:	930d      	str	r3, [sp, #52]	; 0x34
    _Function_base() : _M_manager(nullptr) { }
 800cf1c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800cf20:	2010      	movs	r0, #16
 800cf22:	f7fe ff57 	bl	800bdd4 <_Znwj>
 800cf26:	4603      	mov	r3, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf28:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cf2c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800cf30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf34:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800cf38:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cf3c:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
 800cf42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 800cf46:	609a      	str	r2, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __a = _GLIBCXX_MOVE(__b);
 800cf4a:	68d9      	ldr	r1, [r3, #12]
 800cf4c:	910d      	str	r1, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 800cf4e:	60da      	str	r2, [r3, #12]
 800cf50:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf52:	ab0e      	add	r3, sp, #56	; 0x38
 800cf54:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf58:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800cf5c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800cf60:	f604 640c 	addw	r4, r4, #3596	; 0xe0c
 800cf64:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cf68:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800cf6c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cf70:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800cf74:	68b3      	ldr	r3, [r6, #8]
 800cf76:	9310      	str	r3, [sp, #64]	; 0x40
      __b = _GLIBCXX_MOVE(__tmp);
 800cf78:	4a12      	ldr	r2, [pc, #72]	; (800cfc4 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x164>)
 800cf7a:	60b2      	str	r2, [r6, #8]
      __a = _GLIBCXX_MOVE(__b);
 800cf7c:	68f2      	ldr	r2, [r6, #12]
 800cf7e:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
 800cf80:	4a11      	ldr	r2, [pc, #68]	; (800cfc8 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x168>)
 800cf82:	60f2      	str	r2, [r6, #12]
      if (_M_manager)
 800cf84:	b11b      	cbz	r3, 800cf8e <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x12e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800cf86:	2203      	movs	r2, #3
 800cf88:	a90e      	add	r1, sp, #56	; 0x38
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4798      	blx	r3
      if (_M_manager)
 800cf8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf90:	b11b      	cbz	r3, 800cf9a <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x13a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800cf92:	2203      	movs	r2, #3
 800cf94:	a90a      	add	r1, sp, #40	; 0x28
 800cf96:	4608      	mov	r0, r1
 800cf98:	4798      	blx	r3
      if (_M_manager)
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	b11b      	cbz	r3, 800cfa6 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x146>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	a902      	add	r1, sp, #8
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	4798      	blx	r3
		return true;
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e000      	b.n	800cfac <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE+0x14c>
	return false;
 800cfaa:	2000      	movs	r0, #0
}
 800cfac:	b013      	add	sp, #76	; 0x4c
 800cfae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	bf00      	nop
 800cfb4:	c70f6907 	.word	0xc70f6907
 800cfb8:	080111bc 	.word	0x080111bc
 800cfbc:	0800c051 	.word	0x0800c051
 800cfc0:	0800ce0b 	.word	0x0800ce0b
 800cfc4:	0800cfcd 	.word	0x0800cfcd
 800cfc8:	0800ce33 	.word	0x0800ce33

0800cfcc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	4604      	mov	r4, r0
	switch (__op)
 800cfd0:	b142      	cbz	r2, 800cfe4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	2a01      	cmp	r2, #1
 800cfd6:	d009      	beq.n	800cfec <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x20>
	  switch (__op)
 800cfd8:	2b03      	cmp	r3, #3
 800cfda:	d805      	bhi.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800cfdc:	e8df f003 	tbb	[pc, r3]
 800cfe0:	190f0c09 	.word	0x190f0c09
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800cfe4:	4b12      	ldr	r3, [pc, #72]	; (800d030 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>)
 800cfe6:	6003      	str	r3, [r0, #0]
      }
 800cfe8:	2000      	movs	r0, #0
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800cfec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800cfee:	6003      	str	r3, [r0, #0]
	    break;
 800cff0:	e7fa      	b.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800cff2:	4b0f      	ldr	r3, [pc, #60]	; (800d030 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>)
 800cff4:	6003      	str	r3, [r0, #0]
	      break;
 800cff6:	e7f7      	b.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	    return __source._M_access<_Functor*>();
 800cff8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800cffa:	6003      	str	r3, [r0, #0]
	      break;
 800cffc:	e7f4      	b.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  __dest._M_access<_Functor*>() =
 800cffe:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800d000:	2010      	movs	r0, #16
 800d002:	f7fe fee7 	bl	800bdd4 <_Znwj>
 800d006:	4605      	mov	r5, r0
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 800d008:	4631      	mov	r1, r6
 800d00a:	f7ff ff19 	bl	800ce40 <_ZNSt8functionIFvhP13sc_LED_packetEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 800d00e:	6025      	str	r5, [r4, #0]
	      break;
 800d010:	e7ea      	b.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
	  delete __victim._M_access<_Functor*>();
 800d012:	6804      	ldr	r4, [r0, #0]
 800d014:	2c00      	cmp	r4, #0
 800d016:	d0e7      	beq.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
      if (_M_manager)
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	b11b      	cbz	r3, 800d024 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d01c:	2203      	movs	r2, #3
 800d01e:	4621      	mov	r1, r4
 800d020:	4620      	mov	r0, r4
 800d022:	4798      	blx	r3
	  delete __victim._M_access<_Functor*>();
 800d024:	2110      	movs	r1, #16
 800d026:	4620      	mov	r0, r4
 800d028:	f000 fdd8 	bl	800dbdc <_ZdlPvj>
	      break;
 800d02c:	e7dc      	b.n	800cfe8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>
 800d02e:	bf00      	nop
 800d030:	080113b4 	.word	0x080113b4

0800d034 <_ZN10NetworkBusD1Ev>:

	//-------------Sussy_packets------
//	define<PollosHermanos_packet>(69);
}

NetworkBus::~NetworkBus(){};
 800d034:	b510      	push	{r4, lr}
 800d036:	4604      	mov	r4, r0
 800d038:	4b02      	ldr	r3, [pc, #8]	; (800d044 <_ZN10NetworkBusD1Ev+0x10>)
 800d03a:	6003      	str	r3, [r0, #0]
 800d03c:	f7fe ff60 	bl	800bf00 <_ZN5IOBusD1Ev>
 800d040:	4620      	mov	r0, r4
 800d042:	bd10      	pop	{r4, pc}
 800d044:	08011418 	.word	0x08011418

0800d048 <_ZN10NetworkBusD0Ev>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	4604      	mov	r4, r0
 800d04c:	f7ff fff2 	bl	800d034 <_ZN10NetworkBusD1Ev>
 800d050:	f241 411c 	movw	r1, #5148	; 0x141c
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fdc1 	bl	800dbdc <_ZdlPvj>
 800d05a:	4620      	mov	r0, r4
 800d05c:	bd10      	pop	{r4, pc}
	...

0800d060 <_ZN10NetworkBusC1EP8IODriver>:
NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 800d060:	b510      	push	{r4, lr}
 800d062:	4604      	mov	r4, r0
 800d064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d068:	f241 3219 	movw	r2, #4889	; 0x1319
 800d06c:	4402      	add	r2, r0
 800d06e:	f7fe ff6d 	bl	800bf4c <_ZN5IOBusC1EP8IODriverPhm>
 800d072:	4b38      	ldr	r3, [pc, #224]	; (800d154 <_ZN10NetworkBusC1EP8IODriver+0xf4>)
 800d074:	6023      	str	r3, [r4, #0]
	define<avionics_ToF_packet>(0);
 800d076:	2100      	movs	r1, #0
 800d078:	4620      	mov	r0, r4
 800d07a:	f7ff f817 	bl	800c0ac <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>
	define<avionics_IMU_packet>(1);
 800d07e:	2101      	movs	r1, #1
 800d080:	4620      	mov	r0, r4
 800d082:	f7ff f849 	bl	800c118 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>
	define<avionics_potentiometer_packet>(2);
 800d086:	2102      	movs	r1, #2
 800d088:	4620      	mov	r0, r4
 800d08a:	f7ff f8ff 	bl	800c28c <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>
	define<avionics_massload_packet>(3);
 800d08e:	2103      	movs	r1, #3
 800d090:	4620      	mov	r0, r4
 800d092:	f7ff f88f 	bl	800c1b4 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>
	define<avionics_moisture_packet>(4);
 800d096:	2104      	movs	r1, #4
 800d098:	4620      	mov	r0, r4
 800d09a:	f7ff f8c1 	bl	800c220 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>
	define<avionics_voltmeter_packet>(5);
 800d09e:	2105      	movs	r1, #5
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7ff f929 	bl	800c2f8 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>
	define<sc_LED_packet>(6);
 800d0a6:	2106      	movs	r1, #6
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f7ff fa4b 	bl	800c544 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>
	define<sc_trap_packet>(7);
 800d0ae:	2107      	movs	r1, #7
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f7ff f9db 	bl	800c46c <_ZN10MessageBus6defineI14sc_trap_packetEEbh>
	define<sc_caching_packet>(8);
 800d0b6:	2108      	movs	r1, #8
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f7ff f96b 	bl	800c394 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>
	define<sc_trap_success_packet>(9);
 800d0be:	2109      	movs	r1, #9
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f7ff fa09 	bl	800c4d8 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>
	define<sc_caching_success_packet>(10);
 800d0c6:	210a      	movs	r1, #10
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f7ff f999 	bl	800c400 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>
	define<Power_SystemPacket>(11);
 800d0ce:	210b      	movs	r1, #11
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f7ff fa6d 	bl	800c5b0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Power_VoltagePacket>(12);
 800d0d6:	210c      	movs	r1, #12
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f7ff fa9f 	bl	800c61c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(13);
 800d0de:	210d      	movs	r1, #13
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f7ff fad1 	bl	800c688 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Reset_PowerSupplyPacket>(14);
 800d0e6:	210e      	movs	r1, #14
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f7ff fb03 	bl	800c6f4 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>
	define<Switch_AvionicsPacket>(15);
 800d0ee:	210f      	movs	r1, #15
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f7ff fb35 	bl	800c760 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>
	define<Switch_RamanPacket>(16);
 800d0f6:	2110      	movs	r1, #16
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7ff fb67 	bl	800c7cc <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>
	define<Switch_JetsonPacket>(17);
 800d0fe:	2111      	movs	r1, #17
 800d100:	4620      	mov	r0, r4
 800d102:	f7ff fb99 	bl	800c838 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>
	define<Switch_LidarPacket>(18);
 800d106:	2112      	movs	r1, #18
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff fbcb 	bl	800c8a4 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>
	define<Switch_EthernetPacket>(19);
 800d10e:	2113      	movs	r1, #19
 800d110:	4620      	mov	r0, r4
 800d112:	f7ff fbfd 	bl	800c910 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>
	define<FsmPacket>(20);
 800d116:	2114      	movs	r1, #20
 800d118:	4620      	mov	r0, r4
 800d11a:	f7ff fc2f 	bl	800c97c <_ZN10MessageBus6defineI9FsmPacketEEbh>
	define<DataPacket>(21);
 800d11e:	2115      	movs	r1, #21
 800d120:	4620      	mov	r0, r4
 800d122:	f7ff fc61 	bl	800c9e8 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<PingPacket>(22);
 800d126:	2116      	movs	r1, #22
 800d128:	4620      	mov	r0, r4
 800d12a:	f7ff fc93 	bl	800ca54 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ErrorPacket>(23);
 800d12e:	2117      	movs	r1, #23
 800d130:	4620      	mov	r0, r4
 800d132:	f7ff fcc5 	bl	800cac0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
	define<RequestPacket>(24);
 800d136:	2118      	movs	r1, #24
 800d138:	4620      	mov	r0, r4
 800d13a:	f7ff fcf7 	bl	800cb2c <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(25);
 800d13e:	2119      	movs	r1, #25
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fd29 	bl	800cb98 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(26);
 800d146:	211a      	movs	r1, #26
 800d148:	4620      	mov	r0, r4
 800d14a:	f7ff fd5b 	bl	800cc04 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
}
 800d14e:	4620      	mov	r0, r4
 800d150:	bd10      	pop	{r4, pc}
 800d152:	bf00      	nop
 800d154:	08011418 	.word	0x08011418

0800d158 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE>:
			this->last_dma_index = end_dma_index;
		}
	}
}

void STMUARTDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 800d158:	b530      	push	{r4, r5, lr}
 800d15a:	b087      	sub	sp, #28
 800d15c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 800d15e:	2300      	movs	r3, #0
 800d160:	9304      	str	r3, [sp, #16]
    bool _M_empty() const { return !_M_manager; }
 800d162:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 800d164:	b13b      	cbz	r3, 800d176 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x1e>
 800d166:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d168:	2202      	movs	r2, #2
 800d16a:	a802      	add	r0, sp, #8
 800d16c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800d16e:	68eb      	ldr	r3, [r5, #12]
 800d170:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
 800d172:	68ab      	ldr	r3, [r5, #8]
 800d174:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d176:	466a      	mov	r2, sp
 800d178:	ad02      	add	r5, sp, #8
 800d17a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d17e:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d182:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800d186:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d18a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d18e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d192:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d196:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 800d198:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d19a:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800d19c:	66e2      	str	r2, [r4, #108]	; 0x6c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d19e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800d1a0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800d1a2:	9105      	str	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800d1a4:	6722      	str	r2, [r4, #112]	; 0x70
      if (_M_manager)
 800d1a6:	b11b      	cbz	r3, 800d1b0 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d1a8:	2203      	movs	r2, #3
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	4798      	blx	r3
    this->receiver_func = receiver;
}
 800d1b0:	b007      	add	sp, #28
 800d1b2:	bd30      	pop	{r4, r5, pc}

0800d1b4 <_ZN13STMUARTDriver4initEv>:
void STMUARTDriver::init() {
 800d1b4:	b508      	push	{r3, lr}
	this->last_dma_index = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63c3      	str	r3, [r0, #60]	; 0x3c
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	6993      	ldr	r3, [r2, #24]
 800d1c0:	f043 0308 	orr.w	r3, r3, #8
 800d1c4:	6193      	str	r3, [r2, #24]
	HAL_StatusTypeDef temp = HAL_UARTEx_ReceiveToIdle_DMA(huart, buffer, UART_BUFFER_SIZE);
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800d1ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d1cc:	f7fc fde0 	bl	8009d90 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800d1d0:	bd08      	pop	{r3, pc}

0800d1d2 <_ZThn4_N13STMUARTDriver4initEv>:
        uint8_t* getBuffer();
        xSemaphoreHandle getSemaphore();
        UART_HandleTypeDef* getHuart();
        uint8_t getSenderID(UART_HandleTypeDef* huart);

        void init();
 800d1d2:	f1a0 0004 	sub.w	r0, r0, #4
 800d1d6:	f7ff bfed 	b.w	800d1b4 <_ZN13STMUARTDriver4initEv>

0800d1da <_ZN13STMUARTDriver8transmitEPhm>:

void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length) {
 800d1da:	b508      	push	{r3, lr}
    if(HAL_UART_Transmit(huart, buffer, length, portMAX_DELAY) != HAL_OK){
 800d1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e0:	b292      	uxth	r2, r2
 800d1e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d1e4:	f7fc fc06 	bl	80099f4 <HAL_UART_Transmit>
//        console.printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }
}
 800d1e8:	bd08      	pop	{r3, pc}
	...

0800d1ec <_ZN13STMUARTDriverD1Ev>:
STMUARTDriver::~STMUARTDriver() {
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4b08      	ldr	r3, [pc, #32]	; (800d214 <_ZN13STMUARTDriverD1Ev+0x28>)
 800d1f2:	f103 0208 	add.w	r2, r3, #8
 800d1f6:	6002      	str	r2, [r0, #0]
 800d1f8:	3328      	adds	r3, #40	; 0x28
 800d1fa:	6043      	str	r3, [r0, #4]
    vPortFree(buffer);
 800d1fc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d1fe:	f7fe fdab 	bl	800bd58 <vPortFree>
      if (_M_manager)
 800d202:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d204:	b123      	cbz	r3, 800d210 <_ZN13STMUARTDriverD1Ev+0x24>
    class function<_Res(_ArgTypes...)>
 800d206:	f104 0064 	add.w	r0, r4, #100	; 0x64
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d20a:	2203      	movs	r2, #3
 800d20c:	4601      	mov	r1, r0
 800d20e:	4798      	blx	r3
}
 800d210:	4620      	mov	r0, r4
 800d212:	bd10      	pop	{r4, pc}
 800d214:	080114ac 	.word	0x080114ac

0800d218 <_ZThn4_N13STMUARTDriverD1Ev>:
        virtual ~STMUARTDriver(); // Destructor
 800d218:	f1a0 0004 	sub.w	r0, r0, #4
 800d21c:	f7ff bfe6 	b.w	800d1ec <_ZN13STMUARTDriverD1Ev>

0800d220 <_ZN13STMUARTDriverD0Ev>:
STMUARTDriver::~STMUARTDriver() {
 800d220:	b510      	push	{r4, lr}
 800d222:	4604      	mov	r4, r0
}
 800d224:	f7ff ffe2 	bl	800d1ec <_ZN13STMUARTDriverD1Ev>
 800d228:	2178      	movs	r1, #120	; 0x78
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 fcd6 	bl	800dbdc <_ZdlPvj>
 800d230:	4620      	mov	r0, r4
 800d232:	bd10      	pop	{r4, pc}

0800d234 <_ZThn4_N13STMUARTDriverD0Ev>:
 800d234:	f1a0 0004 	sub.w	r0, r0, #4
 800d238:	f7ff bff2 	b.w	800d220 <_ZN13STMUARTDriverD0Ev>

0800d23c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>:
STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): Thread("STMUARTDriver", osPriorityHigh), huart(huart), last_dma_index(0) {
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4604      	mov	r4, r0
 800d240:	460d      	mov	r5, r1

#include <cstdint>
#include <functional>


class IODriver {
 800d242:	4b13      	ldr	r3, [pc, #76]	; (800d290 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x54>)
 800d244:	f840 3b04 	str.w	r3, [r0], #4
 800d248:	2228      	movs	r2, #40	; 0x28
 800d24a:	4912      	ldr	r1, [pc, #72]	; (800d294 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x58>)
 800d24c:	f000 fc38 	bl	800dac0 <_ZN6ThreadC1EPKc12osPriority_t>
 800d250:	4b11      	ldr	r3, [pc, #68]	; (800d298 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x5c>)
 800d252:	f103 0208 	add.w	r2, r3, #8
 800d256:	6022      	str	r2, [r4, #0]
 800d258:	3328      	adds	r3, #40	; 0x28
 800d25a:	6063      	str	r3, [r4, #4]
 800d25c:	63a5      	str	r5, [r4, #56]	; 0x38
 800d25e:	2600      	movs	r6, #0
 800d260:	63e6      	str	r6, [r4, #60]	; 0x3c
 800d262:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800d266:	4d0d      	ldr	r5, [pc, #52]	; (800d29c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x60>)
 800d268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d26a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d26e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d272:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    _Function_base() : _M_manager(nullptr) { }
 800d276:	66e6      	str	r6, [r4, #108]	; 0x6c
	this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 800d278:	20ff      	movs	r0, #255	; 0xff
 800d27a:	f7fe fcd1 	bl	800bc20 <pvPortMalloc>
 800d27e:	6620      	str	r0, [r4, #96]	; 0x60
    this->semaphore = xSemaphoreCreateCounting(16, 0);
 800d280:	4631      	mov	r1, r6
 800d282:	2010      	movs	r0, #16
 800d284:	f7fc ff72 	bl	800a16c <xQueueCreateCountingSemaphore>
 800d288:	6760      	str	r0, [r4, #116]	; 0x74
}
 800d28a:	4620      	mov	r0, r4
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
 800d28e:	bf00      	nop
 800d290:	0801146c 	.word	0x0801146c
 800d294:	08011430 	.word	0x08011430
 800d298:	080114ac 	.word	0x080114ac
 800d29c:	08010f48 	.word	0x08010f48

0800d2a0 <_ZN13STMUARTDriver12getSemaphoreEv>:
}


xSemaphoreHandle STMUARTDriver::getSemaphore() {
	return this->semaphore;
}
 800d2a0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d2a2:	4770      	bx	lr

0800d2a4 <_ZN13STMUARTDriver8getHuartEv>:

UART_HandleTypeDef* STMUARTDriver::getHuart() {
	return this->huart;
}
 800d2a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d2a6:	4770      	bx	lr

0800d2a8 <_ZN13STMUARTDriver11receiveUARTEhPhm>:
 *
 * @param sender_id the ID of the MCU
 * @param buffer the buffer to provide to the user-defined callback function
 * @param length the size of the data in the buffer to provide
 */
void STMUARTDriver::receiveUART(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 800d2a8:	b510      	push	{r4, lr}
 800d2aa:	b084      	sub	sp, #16
	this->receiver_func(sender_id, buffer, length);
 800d2ac:	f88d 1007 	strb.w	r1, [sp, #7]
 800d2b0:	9202      	str	r2, [sp, #8]
 800d2b2:	9303      	str	r3, [sp, #12]
      if (_M_empty())
 800d2b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d2b6:	b143      	cbz	r3, 800d2ca <_ZN13STMUARTDriver11receiveUARTEhPhm+0x22>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800d2b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800d2ba:	ab03      	add	r3, sp, #12
 800d2bc:	aa02      	add	r2, sp, #8
 800d2be:	f10d 0107 	add.w	r1, sp, #7
 800d2c2:	3064      	adds	r0, #100	; 0x64
 800d2c4:	47a0      	blx	r4
}
 800d2c6:	b004      	add	sp, #16
 800d2c8:	bd10      	pop	{r4, pc}
	__throw_bad_function_call();
 800d2ca:	f000 fff2 	bl	800e2b2 <_ZSt25__throw_bad_function_callv>

0800d2ce <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>:
 * @param huart the USART port to get
 * @return uint8_t the sender_id
 */
uint8_t STMUARTDriver::getSenderID(UART_HandleTypeDef* huart) {
    for(int i = 0; i < NB_UART_PORTS; ++i){
        if(this->mapper[i] == huart->Instance){
 800d2ce:	6809      	ldr	r1, [r1, #0]
 800d2d0:	3040      	adds	r0, #64	; 0x40
    for(int i = 0; i < NB_UART_PORTS; ++i){
 800d2d2:	2300      	movs	r3, #0
        if(this->mapper[i] == huart->Instance){
 800d2d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2d8:	428a      	cmp	r2, r1
 800d2da:	d004      	beq.n	800d2e6 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x18>
    for(int i = 0; i < NB_UART_PORTS; ++i){
 800d2dc:	3301      	adds	r3, #1
 800d2de:	2b08      	cmp	r3, #8
 800d2e0:	d1f8      	bne.n	800d2d4 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x6>
            return i+1;
        }
    }
    return 0;
 800d2e2:	2000      	movs	r0, #0
}
 800d2e4:	4770      	bx	lr
            return i+1;
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	b2d8      	uxtb	r0, r3
 800d2ea:	4770      	bx	lr

0800d2ec <_ZN13STMUARTDriver4loopEv>:
void STMUARTDriver::loop() {
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	4604      	mov	r4, r0
	if(xSemaphoreTake(semaphore, portMAX_DELAY)) {
 800d2f2:	f04f 31ff 	mov.w	r1, #4294967295
 800d2f6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d2f8:	f7fd f994 	bl	800a624 <xQueueSemaphoreTake>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d061      	beq.n	800d3c4 <_ZN13STMUARTDriver4loopEv+0xd8>
		volatile uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d300:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d302:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4b3e      	ldr	r3, [pc, #248]	; (800d400 <_ZN13STMUARTDriver4loopEv+0x114>)
 800d308:	483e      	ldr	r0, [pc, #248]	; (800d404 <_ZN13STMUARTDriver4loopEv+0x118>)
 800d30a:	4282      	cmp	r2, r0
 800d30c:	bf18      	it	ne
 800d30e:	429a      	cmpne	r2, r3
 800d310:	bf0c      	ite	eq
 800d312:	2301      	moveq	r3, #1
 800d314:	2300      	movne	r3, #0
 800d316:	3018      	adds	r0, #24
 800d318:	4282      	cmp	r2, r0
 800d31a:	bf08      	it	eq
 800d31c:	f043 0301 	orreq.w	r3, r3, #1
 800d320:	3018      	adds	r0, #24
 800d322:	4282      	cmp	r2, r0
 800d324:	bf08      	it	eq
 800d326:	f043 0301 	orreq.w	r3, r3, #1
 800d32a:	3018      	adds	r0, #24
 800d32c:	4282      	cmp	r2, r0
 800d32e:	bf08      	it	eq
 800d330:	f043 0301 	orreq.w	r3, r3, #1
 800d334:	3018      	adds	r0, #24
 800d336:	4282      	cmp	r2, r0
 800d338:	bf08      	it	eq
 800d33a:	f043 0301 	orreq.w	r3, r3, #1
 800d33e:	3018      	adds	r0, #24
 800d340:	4282      	cmp	r2, r0
 800d342:	bf08      	it	eq
 800d344:	f043 0301 	orreq.w	r3, r3, #1
 800d348:	3018      	adds	r0, #24
 800d34a:	4282      	cmp	r2, r0
 800d34c:	bf08      	it	eq
 800d34e:	f043 0301 	orreq.w	r3, r3, #1
 800d352:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800d356:	4282      	cmp	r2, r0
 800d358:	bf08      	it	eq
 800d35a:	f043 0301 	orreq.w	r3, r3, #1
 800d35e:	3018      	adds	r0, #24
 800d360:	4282      	cmp	r2, r0
 800d362:	bf08      	it	eq
 800d364:	f043 0301 	orreq.w	r3, r3, #1
 800d368:	3018      	adds	r0, #24
 800d36a:	4282      	cmp	r2, r0
 800d36c:	bf08      	it	eq
 800d36e:	f043 0301 	orreq.w	r3, r3, #1
 800d372:	3018      	adds	r0, #24
 800d374:	4282      	cmp	r2, r0
 800d376:	bf08      	it	eq
 800d378:	f043 0301 	orreq.w	r3, r3, #1
 800d37c:	3018      	adds	r0, #24
 800d37e:	4282      	cmp	r2, r0
 800d380:	bf08      	it	eq
 800d382:	f043 0301 	orreq.w	r3, r3, #1
 800d386:	3018      	adds	r0, #24
 800d388:	4282      	cmp	r2, r0
 800d38a:	bf08      	it	eq
 800d38c:	f043 0301 	orreq.w	r3, r3, #1
 800d390:	3018      	adds	r0, #24
 800d392:	4282      	cmp	r2, r0
 800d394:	bf08      	it	eq
 800d396:	f043 0301 	orreq.w	r3, r3, #1
 800d39a:	b913      	cbnz	r3, 800d3a2 <_ZN13STMUARTDriver4loopEv+0xb6>
 800d39c:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <_ZN13STMUARTDriver4loopEv+0x11c>)
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d112      	bne.n	800d3c8 <_ZN13STMUARTDriver4loopEv+0xdc>
 800d3a2:	6853      	ldr	r3, [r2, #4]
 800d3a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d3a8:	9301      	str	r3, [sp, #4]
		volatile uint8_t sender = getSenderID(huart);
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff ff8f 	bl	800d2ce <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 800d3b0:	f88d 0003 	strb.w	r0, [sp, #3]
		if(end_dma_index < last_dma_index) { // Finish buffer
 800d3b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d3b6:	9b01      	ldr	r3, [sp, #4]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d809      	bhi.n	800d3d0 <_ZN13STMUARTDriver4loopEv+0xe4>
		if(end_dma_index > last_dma_index) {
 800d3bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d3be:	9b01      	ldr	r3, [sp, #4]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d311      	bcc.n	800d3e8 <_ZN13STMUARTDriver4loopEv+0xfc>
}
 800d3c4:	b002      	add	sp, #8
 800d3c6:	bd10      	pop	{r4, pc}
		volatile uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d3c8:	6853      	ldr	r3, [r2, #4]
 800d3ca:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d3ce:	e7eb      	b.n	800d3a8 <_ZN13STMUARTDriver4loopEv+0xbc>
			receiveUART(sender, buffer + last_dma_index, UART_BUFFER_SIZE - last_dma_index);
 800d3d0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d3d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d3d6:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800d3da:	4402      	add	r2, r0
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f7ff ff63 	bl	800d2a8 <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = 0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d3e6:	e7e9      	b.n	800d3bc <_ZN13STMUARTDriver4loopEv+0xd0>
			receiveUART(sender, buffer + last_dma_index, end_dma_index - last_dma_index);
 800d3e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d3ec:	9b01      	ldr	r3, [sp, #4]
 800d3ee:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d3f0:	1a9b      	subs	r3, r3, r2
 800d3f2:	4402      	add	r2, r0
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f7ff ff57 	bl	800d2a8 <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = end_dma_index;
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800d3fe:	e7e1      	b.n	800d3c4 <_ZN13STMUARTDriver4loopEv+0xd8>
 800d400:	40020010 	.word	0x40020010
 800d404:	40020028 	.word	0x40020028
 800d408:	400204b8 	.word	0x400204b8

0800d40c <_ZThn4_N13STMUARTDriver4loopEv>:
        void loop();
 800d40c:	f1a0 0004 	sub.w	r0, r0, #4
 800d410:	f7ff bf6c 	b.w	800d2ec <_ZN13STMUARTDriver4loopEv>

0800d414 <_ZN9IMUThreadD1Ev>:
#include "Prober.h"
#include "DataStructures.h"

#include "bno055_stm32.h"

class IMUThread : public Thread {
 800d414:	4770      	bx	lr

0800d416 <_ZN9IMUThread4initEv>:

#include "Telemetry.h"

//static char cbuf[256];

void IMUThread::init() {
 800d416:	b510      	push	{r4, lr}
 800d418:	4604      	mov	r4, r0
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
	void init();
	void loop();
	void resetProber();
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 800d41a:	6b43      	ldr	r3, [r0, #52]	; 0x34
	bno055_assignI2C(parent->getI2C());
 800d41c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d41e:	f7f5 f855 	bl	80024cc <bno055_assignI2C>
	bno055_setup();
 800d422:	f7f4 ff58 	bl	80022d6 <bno055_setup>
	bno055_setOperationModeNDOF();
 800d426:	f7f4 ff47 	bl	80022b8 <bno055_setOperationModeNDOF>

	if(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 800d42a:	f7f4 ff6f 	bl	800230c <bno055_getSystemError>
 800d42e:	b900      	cbnz	r0, 800d432 <_ZN9IMUThread4initEv+0x1c>
		parent->resetProber();
		return;
	}

//	println("[%d] BNO055 initialized", portNum);
}
 800d430:	bd10      	pop	{r4, pc}
		terminate();
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fb5b 	bl	800daee <_ZN6Thread9terminateEv>
		parent->resetProber();
 800d438:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d43a:	f000 f8db 	bl	800d5f4 <_ZN12ProberThread11resetProberEv>
		return;
 800d43e:	e7f7      	b.n	800d430 <_ZN9IMUThread4initEv+0x1a>

0800d440 <_ZN9IMUThreadD0Ev>:
 800d440:	b510      	push	{r4, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	213c      	movs	r1, #60	; 0x3c
 800d446:	f000 fbc9 	bl	800dbdc <_ZdlPvj>
 800d44a:	4620      	mov	r0, r4
 800d44c:	bd10      	pop	{r4, pc}
	...

0800d450 <_ZN9IMUThread4loopEv>:

static IMUData data;
static avionics_IMU_packet packet;
void IMUThread::loop() {
 800d450:	b530      	push	{r4, r5, lr}
 800d452:	b099      	sub	sp, #100	; 0x64
 800d454:	4605      	mov	r5, r0
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800d456:	f7f5 f821 	bl	800249c <bno055_getVectorAccelerometer>
 800d45a:	ed8d 0b00 	vstr	d0, [sp]
 800d45e:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d462:	ed8d 2b04 	vstr	d2, [sp, #16]
 800d466:	ed8d 3b06 	vstr	d3, [sp, #24]

Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
	Vector vector;

	vector.x = v.x;
	vector.y = v.y;
 800d46a:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800d46e:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800d472:	4c31      	ldr	r4, [pc, #196]	; (800d538 <_ZN9IMUThread4loopEv+0xe8>)
	vector.x = v.x;
 800d474:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800d478:	ed84 1a00 	vstr	s2, [r4]
	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 800d47c:	ed84 2a01 	vstr	s4, [r4, #4]
 800d480:	ed84 3a02 	vstr	s6, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorGyroscope());
 800d484:	f7f5 f81a 	bl	80024bc <bno055_getVectorGyroscope>
 800d488:	ed8d 0b08 	vstr	d0, [sp, #32]
 800d48c:	ed8d 1b0a 	vstr	d1, [sp, #40]	; 0x28
 800d490:	ed8d 2b0c 	vstr	d2, [sp, #48]	; 0x30
 800d494:	ed8d 3b0e 	vstr	d3, [sp, #56]	; 0x38
	vector.y = v.y;
 800d498:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800d49c:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	vector.x = v.x;
 800d4a0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800d4a4:	ed84 1a03 	vstr	s2, [r4, #12]
	data.gyro = bnoVectorToVector(bno055_getVectorGyroscope());
 800d4a8:	ed84 2a04 	vstr	s4, [r4, #16]
 800d4ac:	ed84 3a05 	vstr	s6, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorMagnetometer());
 800d4b0:	f7f4 fffc 	bl	80024ac <bno055_getVectorMagnetometer>
 800d4b4:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 800d4b8:	ed8d 1b12 	vstr	d1, [sp, #72]	; 0x48
 800d4bc:	ed8d 2b14 	vstr	d2, [sp, #80]	; 0x50
 800d4c0:	ed8d 3b16 	vstr	d3, [sp, #88]	; 0x58
	vector.y = v.y;
 800d4c4:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
	vector.z = v.z;
 800d4c8:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	vector.x = v.x;
 800d4cc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800d4d0:	ed84 1a06 	vstr	s2, [r4, #24]
	data.mag = bnoVectorToVector(bno055_getVectorMagnetometer());
 800d4d4:	ed84 2a07 	vstr	s4, [r4, #28]
 800d4d8:	ed84 3a08 	vstr	s6, [r4, #32]
 800d4dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 800d4de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d4e0:	f7f8 fbab 	bl	8005c3a <HAL_I2C_GetError>
 800d4e4:	bb08      	cbnz	r0, 800d52a <_ZN9IMUThread4loopEv+0xda>
		sprintf(buffer, "[%f %f %f]", x, y, z);
		return buffer;
	}

	uint8_t* toArray(uint8_t* buffer) {
		*(float*)(buffer + 0) = x;
 800d4e6:	4915      	ldr	r1, [pc, #84]	; (800d53c <_ZN9IMUThread4loopEv+0xec>)
 800d4e8:	6822      	ldr	r2, [r4, #0]
 800d4ea:	600a      	str	r2, [r1, #0]
		*(float*)(buffer + 1*4) = y;
 800d4ec:	6862      	ldr	r2, [r4, #4]
 800d4ee:	604a      	str	r2, [r1, #4]
		*(float*)(buffer + 2*4) = z;
 800d4f0:	68a2      	ldr	r2, [r4, #8]
 800d4f2:	608a      	str	r2, [r1, #8]
		*(float*)(buffer + 0) = x;
 800d4f4:	68e2      	ldr	r2, [r4, #12]
 800d4f6:	60ca      	str	r2, [r1, #12]
		*(float*)(buffer + 1*4) = y;
 800d4f8:	6922      	ldr	r2, [r4, #16]
 800d4fa:	610a      	str	r2, [r1, #16]
		*(float*)(buffer + 2*4) = z;
 800d4fc:	6962      	ldr	r2, [r4, #20]
 800d4fe:	614a      	str	r2, [r1, #20]
		*(float*)(buffer + 0) = x;
 800d500:	69a2      	ldr	r2, [r4, #24]
 800d502:	618a      	str	r2, [r1, #24]
		*(float*)(buffer + 1*4) = y;
 800d504:	69e2      	ldr	r2, [r4, #28]
 800d506:	61ca      	str	r2, [r1, #28]
		*(float*)(buffer + 2*4) = z;
 800d508:	6a23      	ldr	r3, [r4, #32]
 800d50a:	620b      	str	r3, [r1, #32]
		network.send(&packet);
 800d50c:	480c      	ldr	r0, [pc, #48]	; (800d540 <_ZN9IMUThread4loopEv+0xf0>)
 800d50e:	f7fe fe39 	bl	800c184 <_ZN10MessageBus4sendI19avionics_IMU_packetEEbPT_>
		portYIELD();
 800d512:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	f3bf 8f6f 	isb	sy
}
 800d526:	b019      	add	sp, #100	; 0x64
 800d528:	bd30      	pop	{r4, r5, pc}
		terminate();
 800d52a:	4628      	mov	r0, r5
 800d52c:	f000 fadf 	bl	800daee <_ZN6Thread9terminateEv>
		parent->resetProber();
 800d530:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d532:	f000 f85f 	bl	800d5f4 <_ZN12ProberThread11resetProberEv>
}
 800d536:	e7f6      	b.n	800d526 <_ZN9IMUThread4loopEv+0xd6>
 800d538:	24010124 	.word	0x24010124
 800d53c:	24010148 	.word	0x24010148
 800d540:	240102d0 	.word	0x240102d0

0800d544 <_ZN12ProberThreadD1Ev>:
class ProberThread : Thread {
 800d544:	4770      	bx	lr

0800d546 <_ZN12ProberThreadD0Ev>:
 800d546:	b510      	push	{r4, lr}
 800d548:	4604      	mov	r4, r0
 800d54a:	2144      	movs	r1, #68	; 0x44
 800d54c:	f000 fb46 	bl	800dbdc <_ZdlPvj>
 800d550:	4620      	mov	r0, r4
 800d552:	bd10      	pop	{r4, pc}

0800d554 <_ZN12ProberThread8probeI2CEh>:
	this->semaphore = xSemaphoreCreateBinary();
	vTaskDelay(100 / portTICK_PERIOD_MS);
	this->i2cNum = checkI2CPort(hi2c);
}

bool ProberThread::probeI2C(uint8_t address) {
 800d554:	b508      	push	{r3, lr}
	return HAL_I2C_IsDeviceReady(hi2c, address << 1, 3, 100) == HAL_OK;
 800d556:	2364      	movs	r3, #100	; 0x64
 800d558:	2203      	movs	r2, #3
 800d55a:	0049      	lsls	r1, r1, #1
 800d55c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d55e:	f7f8 fab3 	bl	8005ac8 <HAL_I2C_IsDeviceReady>
}
 800d562:	fab0 f080 	clz	r0, r0
 800d566:	0940      	lsrs	r0, r0, #5
 800d568:	bd08      	pop	{r3, pc}
	...

0800d56c <_ZN12ProberThread4loopEv>:
//	HX711_init(hx711a);
//	HX711_init(hx711b);
//	return HX711_checkReadiness(hx711a) && HX711_checkReadiness(hx711b);
}

void ProberThread::loop() {
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4604      	mov	r4, r0
	if(probeI2C(BNO055_I2C_ADDR)) {
 800d570:	2128      	movs	r1, #40	; 0x28
 800d572:	f7ff ffef 	bl	800d554 <_ZN12ProberThread8probeI2CEh>
 800d576:	b1d0      	cbz	r0, 800d5ae <_ZN12ProberThread4loopEv+0x42>
//	if(true) {
//		println("[i2c%u] Accelerometer detected", getI2CNum());
		this->instance = new IMUThread(this);
 800d578:	203c      	movs	r0, #60	; 0x3c
 800d57a:	f7fe fc2b 	bl	800bdd4 <_Znwj>
 800d57e:	4605      	mov	r5, r0
public:
	IMUThread(ProberThread* parent) : Thread("IMU"), parent(parent), portNum(parent->getI2CNum()) {}
 800d580:	4918      	ldr	r1, [pc, #96]	; (800d5e4 <_ZN12ProberThread4loopEv+0x78>)
 800d582:	f000 faa5 	bl	800dad0 <_ZN6ThreadC1EPKc>
 800d586:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <_ZN12ProberThread4loopEv+0x7c>)
 800d588:	602b      	str	r3, [r5, #0]
 800d58a:	636c      	str	r4, [r5, #52]	; 0x34
 800d58c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d590:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800d594:	63e5      	str	r5, [r4, #60]	; 0x3c
		xSemaphoreTake(semaphore, portMAX_DELAY);
 800d596:	f04f 31ff 	mov.w	r1, #4294967295
 800d59a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d59c:	f7fd f842 	bl	800a624 <xQueueSemaphoreTake>
		xSemaphoreTake(semaphore, portMAX_DELAY);
	} else {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}

	HAL_I2C_DeInit(hi2c);
 800d5a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d5a2:	f7f8 f817 	bl	80055d4 <HAL_I2C_DeInit>
	HAL_I2C_Init(hi2c);
 800d5a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d5a8:	f7f7 ffba 	bl	8005520 <HAL_I2C_Init>
}
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
		bool status = probeI2C(ADS_ADDR_GND); // writing this in the else if statement doesn't work for some reason
 800d5ae:	2148      	movs	r1, #72	; 0x48
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f7ff ffcf 	bl	800d554 <_ZN12ProberThread8probeI2CEh>
		if (status) {
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d0f2      	beq.n	800d5a0 <_ZN12ProberThread4loopEv+0x34>
		this->instance = new VoltmeterThread(this);
 800d5ba:	2054      	movs	r0, #84	; 0x54
 800d5bc:	f7fe fc0a 	bl	800bdd4 <_Znwj>
 800d5c0:	4605      	mov	r5, r0

#include "ADS1113.h"

class VoltmeterThread : public Thread {
public:
	VoltmeterThread(ProberThread* parent) : Thread("Voltmeter"), parent(parent), portNum(parent->getI2CNum()) {}
 800d5c2:	490a      	ldr	r1, [pc, #40]	; (800d5ec <_ZN12ProberThread4loopEv+0x80>)
 800d5c4:	f000 fa84 	bl	800dad0 <_ZN6ThreadC1EPKc>
 800d5c8:	4b09      	ldr	r3, [pc, #36]	; (800d5f0 <_ZN12ProberThread4loopEv+0x84>)
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	64ec      	str	r4, [r5, #76]	; 0x4c
 800d5ce:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d5d2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 800d5d6:	63e5      	str	r5, [r4, #60]	; 0x3c
		xSemaphoreTake(semaphore, portMAX_DELAY);}
 800d5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800d5dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d5de:	f7fd f821 	bl	800a624 <xQueueSemaphoreTake>
 800d5e2:	e7dd      	b.n	800d5a0 <_ZN12ProberThread4loopEv+0x34>
 800d5e4:	08011514 	.word	0x08011514
 800d5e8:	08011504 	.word	0x08011504
 800d5ec:	08011518 	.word	0x08011518
 800d5f0:	0801158c 	.word	0x0801158c

0800d5f4 <_ZN12ProberThread11resetProberEv>:

void ProberThread::resetProber() {
 800d5f4:	b508      	push	{r3, lr}
	xSemaphoreGive(semaphore);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d5fe:	f7fc fdd3 	bl	800a1a8 <xQueueGenericSend>
}
 800d602:	bd08      	pop	{r3, pc}

0800d604 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>:
		return NULL;
	}
}

uint8_t ProberThread::checkI2CPort(I2C_HandleTypeDef* hi2c){
	if(hi2c->Instance==I2C1)
 800d604:	6808      	ldr	r0, [r1, #0]
 800d606:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x30>)
 800d608:	4298      	cmp	r0, r3
 800d60a:	d00d      	beq.n	800d628 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x24>
		return 1;
	else if(hi2c->Instance==I2C2)
 800d60c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d610:	4298      	cmp	r0, r3
 800d612:	d00b      	beq.n	800d62c <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x28>
		return 2;
	else if(hi2c->Instance==I2C3)
 800d614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d618:	4298      	cmp	r0, r3
 800d61a:	d009      	beq.n	800d630 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x2c>
		return 3;
	else if(hi2c->Instance==I2C4)
		return 4;
	else
		return -1;
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x34>)
 800d61e:	4298      	cmp	r0, r3
 800d620:	bf0c      	ite	eq
 800d622:	2004      	moveq	r0, #4
 800d624:	20ff      	movne	r0, #255	; 0xff
 800d626:	4770      	bx	lr
		return 1;
 800d628:	2001      	movs	r0, #1
 800d62a:	4770      	bx	lr
		return 2;
 800d62c:	2002      	movs	r0, #2
 800d62e:	4770      	bx	lr
		return 3;
 800d630:	2003      	movs	r0, #3
}
 800d632:	4770      	bx	lr
 800d634:	40005400 	.word	0x40005400
 800d638:	58001c00 	.word	0x58001c00

0800d63c <_ZN12ProberThread4initEv>:
void ProberThread::init() {
 800d63c:	b510      	push	{r4, lr}
 800d63e:	4604      	mov	r4, r0
	this->semaphore = xSemaphoreCreateBinary();
 800d640:	2203      	movs	r2, #3
 800d642:	2100      	movs	r1, #0
 800d644:	2001      	movs	r0, #1
 800d646:	f7fc fd6c 	bl	800a122 <xQueueGenericCreate>
 800d64a:	63a0      	str	r0, [r4, #56]	; 0x38
	vTaskDelay(100 / portTICK_PERIOD_MS);
 800d64c:	2064      	movs	r0, #100	; 0x64
 800d64e:	f7fd fcaf 	bl	800afb0 <vTaskDelay>
	this->i2cNum = checkI2CPort(hi2c);
 800d652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d654:	4620      	mov	r0, r4
 800d656:	f7ff ffd5 	bl	800d604 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>
 800d65a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800d65e:	bd10      	pop	{r4, pc}

0800d660 <_ZN15VoltmeterThreadD1Ev>:
class VoltmeterThread : public Thread {
 800d660:	4770      	bx	lr

0800d662 <_ZN15VoltmeterThread4initEv>:
#include "Voltmeter_thread.h"

#include "Telemetry.h"


void VoltmeterThread::init() {
 800d662:	b538      	push	{r3, r4, r5, lr}
 800d664:	4604      	mov	r4, r0

	// Declare the structure where we using GND as address.
	// Look at the top of the header file for addresses.
	bool success = ADS1113_init(&voltmeter, parent->getI2C(), ADS_ADDR_GND); // Or ADS1015(&i2c, &hi2c1, ADS_ADDR_GND);
 800d666:	f100 0534 	add.w	r5, r0, #52	; 0x34
	I2C_HandleTypeDef* getI2C() { return hi2c; }
 800d66a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d66c:	2248      	movs	r2, #72	; 0x48
 800d66e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d670:	4628      	mov	r0, r5
 800d672:	f7f4 fd55 	bl	8002120 <ADS1113_init>
	if(!success) {
 800d676:	b128      	cbz	r0, 800d684 <_ZN15VoltmeterThread4initEv+0x22>
//		println("[%d] BNO055 initialization failed", portNum);
		terminate();
		parent->resetProber();
		return;
	}
	ADSsetGain(&voltmeter, GAIN_ONE);
 800d678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d67c:	4628      	mov	r0, r5
 800d67e:	f7f4 fd9d 	bl	80021bc <ADSsetGain>
}
 800d682:	bd38      	pop	{r3, r4, r5, pc}
		terminate();
 800d684:	4620      	mov	r0, r4
 800d686:	f000 fa32 	bl	800daee <_ZN6Thread9terminateEv>
		parent->resetProber();
 800d68a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d68c:	f7ff ffb2 	bl	800d5f4 <_ZN12ProberThread11resetProberEv>
		return;
 800d690:	e7f7      	b.n	800d682 <_ZN15VoltmeterThread4initEv+0x20>
	...

0800d694 <_ZN15VoltmeterThread4loopEv>:


static VoltmeterData data;
static avionics_voltmeter_packet packet;
void VoltmeterThread::loop() {
 800d694:	b510      	push	{r4, lr}
 800d696:	4604      	mov	r4, r0
	data.voltage = ADSreadADC_Voltage(&voltmeter);
 800d698:	3034      	adds	r0, #52	; 0x34
 800d69a:	f7f4 fddf 	bl	800225c <ADSreadADC_Voltage>
 800d69e:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <_ZN15VoltmeterThread4loopEv+0x4c>)
 800d6a0:	ed83 0a00 	vstr	s0, [r3]
 800d6a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
 800d6a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d6a8:	f7f8 fac7 	bl	8005c3a <HAL_I2C_GetError>
 800d6ac:	b988      	cbnz	r0, 800d6d2 <_ZN15VoltmeterThread4loopEv+0x3e>
		sprintf(buffer, "Voltage(V): %f", voltage);
		return buffer;
	}

	uint8_t* toArray(uint8_t* buffer){
		*(float*)(buffer) = voltage;
 800d6ae:	490d      	ldr	r1, [pc, #52]	; (800d6e4 <_ZN15VoltmeterThread4loopEv+0x50>)
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <_ZN15VoltmeterThread4loopEv+0x4c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	600b      	str	r3, [r1, #0]
//		println("[i2c%d] %s", portNum, data.toString(cbuf));
		data.toArray((uint8_t*) &packet);
		network.send(&packet);
 800d6b6:	480c      	ldr	r0, [pc, #48]	; (800d6e8 <_ZN15VoltmeterThread4loopEv+0x54>)
 800d6b8:	f7fe fe54 	bl	800c364 <_ZN10MessageBus4sendI25avionics_voltmeter_packetEEbPT_>
		portYIELD();
 800d6bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	f3bf 8f6f 	isb	sy
	} else {
//		println("[i2c%d] BNO055 disconnected", portNum);
		terminate();
		parent->resetProber();
	}
}
 800d6d0:	bd10      	pop	{r4, pc}
		terminate();
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 fa0b 	bl	800daee <_ZN6Thread9terminateEv>
		parent->resetProber();
 800d6d8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d6da:	f7ff ff8b 	bl	800d5f4 <_ZN12ProberThread11resetProberEv>
}
 800d6de:	e7f7      	b.n	800d6d0 <_ZN15VoltmeterThread4loopEv+0x3c>
 800d6e0:	2401016c 	.word	0x2401016c
 800d6e4:	24010170 	.word	0x24010170
 800d6e8:	240102d0 	.word	0x240102d0

0800d6ec <_ZN15VoltmeterThreadD0Ev>:
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	2154      	movs	r1, #84	; 0x54
 800d6f2:	f000 fa73 	bl	800dbdc <_ZdlPvj>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	bd10      	pop	{r4, pc}

0800d6fa <__tcf_0>:



void initCortex() {
//	static WatchdogThread watchdog(&hiwdg1);
	static ProberThread prober1(&hi2c1);
 800d6fa:	4770      	bx	lr

0800d6fc <__tcf_1>:
	static ProberThread prober2(&hi2c2);
 800d6fc:	4770      	bx	lr

0800d6fe <__tcf_2>:
	static ProberThread prober3(&hi2c4);
 800d6fe:	4770      	bx	lr

0800d700 <_Z10initCortexv>:
void initCortex() {
 800d700:	b510      	push	{r4, lr}
	static ProberThread prober1(&hi2c1);
 800d702:	4b33      	ldr	r3, [pc, #204]	; (800d7d0 <_Z10initCortexv+0xd0>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f3bf 8f5b 	dmb	ish
 800d70a:	f013 0f01 	tst.w	r3, #1
 800d70e:	d00e      	beq.n	800d72e <_Z10initCortexv+0x2e>
	static ProberThread prober2(&hi2c2);
 800d710:	4b30      	ldr	r3, [pc, #192]	; (800d7d4 <_Z10initCortexv+0xd4>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	f3bf 8f5b 	dmb	ish
 800d718:	f013 0f01 	tst.w	r3, #1
 800d71c:	d022      	beq.n	800d764 <_Z10initCortexv+0x64>
	static ProberThread prober3(&hi2c4);
 800d71e:	4b2e      	ldr	r3, [pc, #184]	; (800d7d8 <_Z10initCortexv+0xd8>)
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	f3bf 8f5b 	dmb	ish
 800d726:	f013 0f01 	tst.w	r3, #1
 800d72a:	d036      	beq.n	800d79a <_Z10initCortexv+0x9a>
}
 800d72c:	bd10      	pop	{r4, pc}
	static ProberThread prober1(&hi2c1);
 800d72e:	4828      	ldr	r0, [pc, #160]	; (800d7d0 <_Z10initCortexv+0xd0>)
 800d730:	f000 fa6c 	bl	800dc0c <__cxa_guard_acquire>
 800d734:	2800      	cmp	r0, #0
 800d736:	d0eb      	beq.n	800d710 <_Z10initCortexv+0x10>
#include <stdio.h>
#include <string.h>

class ProberThread : Thread {
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", 1024), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
 800d738:	4c28      	ldr	r4, [pc, #160]	; (800d7dc <_Z10initCortexv+0xdc>)
 800d73a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d73e:	4928      	ldr	r1, [pc, #160]	; (800d7e0 <_Z10initCortexv+0xe0>)
 800d740:	4620      	mov	r0, r4
 800d742:	f000 f9cc 	bl	800dade <_ZN6ThreadC1EPKcm>
 800d746:	4b27      	ldr	r3, [pc, #156]	; (800d7e4 <_Z10initCortexv+0xe4>)
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	4b27      	ldr	r3, [pc, #156]	; (800d7e8 <_Z10initCortexv+0xe8>)
 800d74c:	6363      	str	r3, [r4, #52]	; 0x34
 800d74e:	2300      	movs	r3, #0
 800d750:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d752:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d756:	4825      	ldr	r0, [pc, #148]	; (800d7ec <_Z10initCortexv+0xec>)
 800d758:	f000 fe64 	bl	800e424 <atexit>
 800d75c:	481c      	ldr	r0, [pc, #112]	; (800d7d0 <_Z10initCortexv+0xd0>)
 800d75e:	f000 fa61 	bl	800dc24 <__cxa_guard_release>
 800d762:	e7d5      	b.n	800d710 <_Z10initCortexv+0x10>
	static ProberThread prober2(&hi2c2);
 800d764:	481b      	ldr	r0, [pc, #108]	; (800d7d4 <_Z10initCortexv+0xd4>)
 800d766:	f000 fa51 	bl	800dc0c <__cxa_guard_acquire>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d0d7      	beq.n	800d71e <_Z10initCortexv+0x1e>
 800d76e:	4c20      	ldr	r4, [pc, #128]	; (800d7f0 <_Z10initCortexv+0xf0>)
 800d770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d774:	491a      	ldr	r1, [pc, #104]	; (800d7e0 <_Z10initCortexv+0xe0>)
 800d776:	4620      	mov	r0, r4
 800d778:	f000 f9b1 	bl	800dade <_ZN6ThreadC1EPKcm>
 800d77c:	4b19      	ldr	r3, [pc, #100]	; (800d7e4 <_Z10initCortexv+0xe4>)
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <_Z10initCortexv+0xf4>)
 800d782:	6363      	str	r3, [r4, #52]	; 0x34
 800d784:	2300      	movs	r3, #0
 800d786:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d788:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d78c:	481a      	ldr	r0, [pc, #104]	; (800d7f8 <_Z10initCortexv+0xf8>)
 800d78e:	f000 fe49 	bl	800e424 <atexit>
 800d792:	4810      	ldr	r0, [pc, #64]	; (800d7d4 <_Z10initCortexv+0xd4>)
 800d794:	f000 fa46 	bl	800dc24 <__cxa_guard_release>
 800d798:	e7c1      	b.n	800d71e <_Z10initCortexv+0x1e>
	static ProberThread prober3(&hi2c4);
 800d79a:	480f      	ldr	r0, [pc, #60]	; (800d7d8 <_Z10initCortexv+0xd8>)
 800d79c:	f000 fa36 	bl	800dc0c <__cxa_guard_acquire>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0c3      	beq.n	800d72c <_Z10initCortexv+0x2c>
 800d7a4:	4c15      	ldr	r4, [pc, #84]	; (800d7fc <_Z10initCortexv+0xfc>)
 800d7a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d7aa:	490d      	ldr	r1, [pc, #52]	; (800d7e0 <_Z10initCortexv+0xe0>)
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 f996 	bl	800dade <_ZN6ThreadC1EPKcm>
 800d7b2:	4b0c      	ldr	r3, [pc, #48]	; (800d7e4 <_Z10initCortexv+0xe4>)
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	4b12      	ldr	r3, [pc, #72]	; (800d800 <_Z10initCortexv+0x100>)
 800d7b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d7be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d7c2:	4810      	ldr	r0, [pc, #64]	; (800d804 <_Z10initCortexv+0x104>)
 800d7c4:	f000 fe2e 	bl	800e424 <atexit>
 800d7c8:	4803      	ldr	r0, [pc, #12]	; (800d7d8 <_Z10initCortexv+0xd8>)
 800d7ca:	f000 fa2b 	bl	800dc24 <__cxa_guard_release>
}
 800d7ce:	e7ad      	b.n	800d72c <_Z10initCortexv+0x2c>
 800d7d0:	24010174 	.word	0x24010174
 800d7d4:	24010178 	.word	0x24010178
 800d7d8:	2401017c 	.word	0x2401017c
 800d7dc:	24010180 	.word	0x24010180
 800d7e0:	0801159c 	.word	0x0801159c
 800d7e4:	08011554 	.word	0x08011554
 800d7e8:	24000340 	.word	0x24000340
 800d7ec:	0800d6fb 	.word	0x0800d6fb
 800d7f0:	240101c4 	.word	0x240101c4
 800d7f4:	2400038c 	.word	0x2400038c
 800d7f8:	0800d6fd 	.word	0x0800d6fd
 800d7fc:	24010208 	.word	0x24010208
 800d800:	240003d8 	.word	0x240003d8
 800d804:	0800d6ff 	.word	0x0800d6ff

0800d808 <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d808:	b508      	push	{r3, lr}
 800d80a:	468c      	mov	ip, r1
 800d80c:	6803      	ldr	r3, [r0, #0]
 800d80e:	6811      	ldr	r1, [r2, #0]
 800d810:	f89c 0000 	ldrb.w	r0, [ip]
 800d814:	4798      	blx	r3
      }
 800d816:	bd08      	pop	{r3, pc}

0800d818 <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 800d818:	b132      	cbz	r2, 800d828 <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
 800d81a:	2a01      	cmp	r2, #1
 800d81c:	d008      	beq.n	800d830 <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x18>
	  switch (__op)
 800d81e:	2a02      	cmp	r2, #2
 800d820:	d104      	bne.n	800d82c <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800d822:	680b      	ldr	r3, [r1, #0]
 800d824:	6003      	str	r3, [r0, #0]
	      break;
 800d826:	e001      	b.n	800d82c <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800d828:	4b02      	ldr	r3, [pc, #8]	; (800d834 <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800d82a:	6003      	str	r3, [r0, #0]
      }
 800d82c:	2000      	movs	r0, #0
 800d82e:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d830:	6001      	str	r1, [r0, #0]
	    break;
 800d832:	e7fb      	b.n	800d82c <_ZNSt17_Function_handlerIFvhP13sc_LED_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 800d834:	080115f8 	.word	0x080115f8

0800d838 <_Z10handle_ledhP13sc_LED_packet>:
////	network.forward<sc_LED_packet>(&UART6_network);
//	network.forward<sc_LED_packet>(&UART1_network);

}

void handle_led(uint8_t sender_id, sc_LED_packet* packet) {
 800d838:	b508      	push	{r3, lr}
	if (packet->on)
 800d83a:	780b      	ldrb	r3, [r1, #0]
 800d83c:	b12b      	cbz	r3, 800d84a <_Z10handle_ledhP13sc_LED_packet+0x12>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800d83e:	2200      	movs	r2, #0
 800d840:	2101      	movs	r1, #1
 800d842:	4805      	ldr	r0, [pc, #20]	; (800d858 <_Z10handle_ledhP13sc_LED_packet+0x20>)
 800d844:	f7f7 fc82 	bl	800514c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
}
 800d848:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800d84a:	2201      	movs	r2, #1
 800d84c:	4611      	mov	r1, r2
 800d84e:	4802      	ldr	r0, [pc, #8]	; (800d858 <_Z10handle_ledhP13sc_LED_packet+0x20>)
 800d850:	f7f7 fc7c 	bl	800514c <HAL_GPIO_WritePin>
}
 800d854:	e7f8      	b.n	800d848 <_Z10handle_ledhP13sc_LED_packet+0x10>
 800d856:	bf00      	nop
 800d858:	58020000 	.word	0x58020000

0800d85c <_Z11getInstanceP20__UART_HandleTypeDef>:
STMUARTDriver* getInstance(UART_HandleTypeDef* huart) {
 800d85c:	b570      	push	{r4, r5, r6, lr}
 800d85e:	4606      	mov	r6, r0
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 800d860:	4b05      	ldr	r3, [pc, #20]	; (800d878 <_Z11getInstanceP20__UART_HandleTypeDef+0x1c>)
 800d862:	681c      	ldr	r4, [r3, #0]
 800d864:	4625      	mov	r5, r4
		if (driver->getHuart() == huart)
 800d866:	3404      	adds	r4, #4
 800d868:	6828      	ldr	r0, [r5, #0]
 800d86a:	f7ff fd1b 	bl	800d2a4 <_ZN13STMUARTDriver8getHuartEv>
 800d86e:	4286      	cmp	r6, r0
 800d870:	d1f8      	bne.n	800d864 <_Z11getInstanceP20__UART_HandleTypeDef+0x8>
}
 800d872:	6828      	ldr	r0, [r5, #0]
 800d874:	bd70      	pop	{r4, r5, r6, pc}
 800d876:	bf00      	nop
 800d878:	240102c4 	.word	0x240102c4

0800d87c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size) {
 800d87c:	b508      	push	{r3, lr}
	STMUARTDriver* driver = getInstance(huart);
 800d87e:	f7ff ffed 	bl	800d85c <_Z11getInstanceP20__UART_HandleTypeDef>
	xSemaphoreGiveFromISR(driver->getSemaphore(), nullptr);
 800d882:	f7ff fd0d 	bl	800d2a0 <_ZN13STMUARTDriver12getSemaphoreEv>
 800d886:	2100      	movs	r1, #0
 800d888:	f7fc fdc1 	bl	800a40e <xQueueGiveFromISR>
}
 800d88c:	bd08      	pop	{r3, pc}

0800d88e <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 800d88e:	b538      	push	{r3, r4, r5, lr}
	STMUARTDriver* driver = getInstance(huart);
 800d890:	f7ff ffe4 	bl	800d85c <_Z11getInstanceP20__UART_HandleTypeDef>
 800d894:	4604      	mov	r4, r0
	while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
 800d896:	2500      	movs	r5, #0
 800d898:	4620      	mov	r0, r4
 800d89a:	f7ff fd01 	bl	800d2a0 <_ZN13STMUARTDriver12getSemaphoreEv>
 800d89e:	462a      	mov	r2, r5
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7fc ff94 	bl	800a7ce <xQueueReceiveFromISR>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d1f6      	bne.n	800d898 <HAL_UART_ErrorCallback+0xa>
	driver->init();
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	691b      	ldr	r3, [r3, #16]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	4798      	blx	r3
}
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}

0800d8b4 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800d8b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b8:	468a      	mov	sl, r1
 800d8ba:	4693      	mov	fp, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d8bc:	6847      	ldr	r7, [r0, #4]
 800d8be:	f8d0 8000 	ldr.w	r8, [r0]
 800d8c2:	eba7 0208 	sub.w	r2, r7, r8

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800d8c6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 800d8ca:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 800d8ce:	d011      	beq.n	800d8f4 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x40>
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	1093      	asrs	r3, r2, #2
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	bf2c      	ite	cs
 800d8d8:	18da      	addcs	r2, r3, r3
 800d8da:	1c5a      	addcc	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d81c      	bhi.n	800d91a <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
 800d8e0:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 800d8e4:	4591      	cmp	r9, r2
 800d8e6:	bf28      	it	cs
 800d8e8:	4691      	movcs	r9, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800d8ea:	ebaa 0408 	sub.w	r4, sl, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d8ee:	b9c2      	cbnz	r2, 800d922 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 800d8f0:	2600      	movs	r6, #0
 800d8f2:	e01b      	b.n	800d92c <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __throw_length_error(__N(__s));
 800d8f4:	481e      	ldr	r0, [pc, #120]	; (800d970 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
 800d8f6:	f000 fcd9 	bl	800e2ac <_ZSt20__throw_length_errorPKc>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d8fa:	4622      	mov	r2, r4
 800d8fc:	4641      	mov	r1, r8
 800d8fe:	4630      	mov	r0, r6
 800d900:	f000 fec8 	bl	800e694 <memmove>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 800d904:	3404      	adds	r4, #4
 800d906:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 800d908:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
 800d90c:	2f00      	cmp	r7, #0
 800d90e:	dc18      	bgt.n	800d942 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
      return __result + __count;
 800d910:	443c      	add	r4, r7
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800d912:	68a9      	ldr	r1, [r5, #8]
 800d914:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
 800d918:	e01f      	b.n	800d95a <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
 800d91a:	ebaa 0408 	sub.w	r4, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d91e:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d922:	ea4f 0089 	mov.w	r0, r9, lsl #2
 800d926:	f7fe fa55 	bl	800bdd4 <_Znwj>
 800d92a:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d92c:	f8db 3000 	ldr.w	r3, [fp]
 800d930:	5133      	str	r3, [r6, r4]
      if (__count > 0)
 800d932:	2c00      	cmp	r4, #0
 800d934:	dce1      	bgt.n	800d8fa <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	      ++__new_finish;
 800d936:	3404      	adds	r4, #4
 800d938:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 800d93a:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
 800d93e:	2f00      	cmp	r7, #0
 800d940:	dd04      	ble.n	800d94c <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d942:	463a      	mov	r2, r7
 800d944:	4651      	mov	r1, sl
 800d946:	4620      	mov	r0, r4
 800d948:	f000 fe96 	bl	800e678 <memcpy>
      return __result + __count;
 800d94c:	443c      	add	r4, r7
	if (__p)
 800d94e:	f1b8 0f00 	cmp.w	r8, #0
 800d952:	d005      	beq.n	800d960 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 800d954:	68a9      	ldr	r1, [r5, #8]
 800d956:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
 800d95a:	4640      	mov	r0, r8
 800d95c:	f000 f93e 	bl	800dbdc <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800d960:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 800d962:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d964:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800d968:	60ae      	str	r6, [r5, #8]
    }
 800d96a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96e:	bf00      	nop
 800d970:	080115a4 	.word	0x080115a4

0800d974 <_Z14setupTelemetryv>:
void setupTelemetry() {
 800d974:	b500      	push	{lr}
 800d976:	b087      	sub	sp, #28
	STMUARTDriver_list.push_back(&UART1_driver);
 800d978:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <_Z14setupTelemetryv+0x50>)
 800d97a:	9301      	str	r3, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d97c:	4b12      	ldr	r3, [pc, #72]	; (800d9c8 <_Z14setupTelemetryv+0x54>)
 800d97e:	6859      	ldr	r1, [r3, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	4299      	cmp	r1, r3
 800d984:	d018      	beq.n	800d9b8 <_Z14setupTelemetryv+0x44>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d986:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <_Z14setupTelemetryv+0x50>)
 800d988:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 800d98a:	4a0f      	ldr	r2, [pc, #60]	; (800d9c8 <_Z14setupTelemetryv+0x54>)
 800d98c:	6853      	ldr	r3, [r2, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	6053      	str	r3, [r2, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800d992:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <_Z14setupTelemetryv+0x58>)
 800d994:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 800d996:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <_Z14setupTelemetryv+0x5c>)
 800d998:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 800d99a:	4b0e      	ldr	r3, [pc, #56]	; (800d9d4 <_Z14setupTelemetryv+0x60>)
 800d99c:	9304      	str	r3, [sp, #16]
	network.handle<sc_LED_packet>(&handle_led);
 800d99e:	a902      	add	r1, sp, #8
 800d9a0:	480d      	ldr	r0, [pc, #52]	; (800d9d8 <_Z14setupTelemetryv+0x64>)
 800d9a2:	f7ff fa5d 	bl	800ce60 <_ZN10MessageBus6handleI13sc_LED_packetEEbSt8functionIFvhPT_EE>
      if (_M_manager)
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	b11b      	cbz	r3, 800d9b2 <_Z14setupTelemetryv+0x3e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d9aa:	2203      	movs	r2, #3
 800d9ac:	a902      	add	r1, sp, #8
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	4798      	blx	r3
}
 800d9b2:	b007      	add	sp, #28
 800d9b4:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d9b8:	aa01      	add	r2, sp, #4
 800d9ba:	4803      	ldr	r0, [pc, #12]	; (800d9c8 <_Z14setupTelemetryv+0x54>)
 800d9bc:	f7ff ff7a 	bl	800d8b4 <_ZNSt6vectorIP13STMUARTDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800d9c0:	e7e7      	b.n	800d992 <_Z14setupTelemetryv+0x1e>
 800d9c2:	bf00      	nop
 800d9c4:	2401024c 	.word	0x2401024c
 800d9c8:	240102c4 	.word	0x240102c4
 800d9cc:	0800d839 	.word	0x0800d839
 800d9d0:	0800d809 	.word	0x0800d809
 800d9d4:	0800d819 	.word	0x0800d819
 800d9d8:	240102d0 	.word	0x240102d0

0800d9dc <_GLOBAL__sub_I_UART1_driver>:
}
 800d9dc:	b510      	push	{r4, lr}
	STMUARTDriver UART1_driver(&huart1);
 800d9de:	4c07      	ldr	r4, [pc, #28]	; (800d9fc <_GLOBAL__sub_I_UART1_driver+0x20>)
 800d9e0:	4907      	ldr	r1, [pc, #28]	; (800da00 <_GLOBAL__sub_I_UART1_driver+0x24>)
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f7ff fc2a 	bl	800d23c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
	NetworkBus network(&UART1_driver);
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	4806      	ldr	r0, [pc, #24]	; (800da04 <_GLOBAL__sub_I_UART1_driver+0x28>)
 800d9ec:	f7ff fb38 	bl	800d060 <_ZN10NetworkBusC1EP8IODriver>
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <_GLOBAL__sub_I_UART1_driver+0x2c>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	605a      	str	r2, [r3, #4]
 800d9f8:	609a      	str	r2, [r3, #8]
}
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	2401024c 	.word	0x2401024c
 800da00:	24000814 	.word	0x24000814
 800da04:	240102d0 	.word	0x240102d0
 800da08:	240102c4 	.word	0x240102c4

0800da0c <_GLOBAL__sub_D_UART1_driver>:
 800da0c:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <_GLOBAL__sub_D_UART1_driver+0x20>)
 800da10:	6818      	ldr	r0, [r3, #0]
	if (__p)
 800da12:	b118      	cbz	r0, 800da1c <_GLOBAL__sub_D_UART1_driver+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800da14:	6899      	ldr	r1, [r3, #8]
	::operator delete(__p
 800da16:	1a09      	subs	r1, r1, r0
 800da18:	f000 f8e0 	bl	800dbdc <_ZdlPvj>
	NetworkBus network(&UART1_driver);
 800da1c:	4804      	ldr	r0, [pc, #16]	; (800da30 <_GLOBAL__sub_D_UART1_driver+0x24>)
 800da1e:	f7ff fb09 	bl	800d034 <_ZN10NetworkBusD1Ev>
	STMUARTDriver UART1_driver(&huart1);
 800da22:	4804      	ldr	r0, [pc, #16]	; (800da34 <_GLOBAL__sub_D_UART1_driver+0x28>)
 800da24:	f7ff fbe2 	bl	800d1ec <_ZN13STMUARTDriverD1Ev>
}
 800da28:	bd08      	pop	{r3, pc}
 800da2a:	bf00      	nop
 800da2c:	240102c4 	.word	0x240102c4
 800da30:	240102d0 	.word	0x240102d0
 800da34:	2401024c 	.word	0x2401024c

0800da38 <_Z10__task_runPv>:

#define DEFAULT_STACK_SIZE (1024) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(void* arg) {
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4604      	mov	r4, r0
	Thread* thread = (Thread*) arg;

	osDelay(100 / portTICK_PERIOD_MS);
 800da3c:	2064      	movs	r0, #100	; 0x64
 800da3e:	f7fc fa4a 	bl	8009ed6 <osDelay>

	thread->init();
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	4620      	mov	r0, r4
 800da48:	4798      	blx	r3

	while(thread->isRunning()) {
 800da4a:	7b23      	ldrb	r3, [r4, #12]
 800da4c:	b153      	cbz	r3, 800da64 <_Z10__task_runPv+0x2c>
		thread->loop();
		osDelay(1 / portTICK_PERIOD_MS);
 800da4e:	2501      	movs	r5, #1
		thread->loop();
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	4620      	mov	r0, r4
 800da56:	4798      	blx	r3
		osDelay(1 / portTICK_PERIOD_MS);
 800da58:	4628      	mov	r0, r5
 800da5a:	f7fc fa3c 	bl	8009ed6 <osDelay>
	while(thread->isRunning()) {
 800da5e:	7b23      	ldrb	r3, [r4, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1f5      	bne.n	800da50 <_Z10__task_runPv+0x18>
	}

	delete thread;
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	4620      	mov	r0, r4
 800da6a:	4798      	blx	r3

	vTaskDelete(nullptr);
 800da6c:	2000      	movs	r0, #0
 800da6e:	f7fd f8c7 	bl	800ac00 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 800da72:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800da76:	4620      	mov	r0, r4
 800da78:	f7fc fa2d 	bl	8009ed6 <osDelay>
	while(true) {
 800da7c:	e7fb      	b.n	800da76 <_Z10__task_runPv+0x3e>
	...

0800da80 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 800da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da82:	b08b      	sub	sp, #44	; 0x2c
 800da84:	4604      	mov	r4, r0
 800da86:	460d      	mov	r5, r1
 800da88:	4616      	mov	r6, r2
 800da8a:	461f      	mov	r7, r3
 800da8c:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <_ZN6ThreadC1EPKc12osPriority_tm+0x38>)
 800da8e:	6003      	str	r3, [r0, #0]
 800da90:	2301      	movs	r3, #1
 800da92:	7303      	strb	r3, [r0, #12]
//	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
	const osThreadAttr_t thread_attributes = {
 800da94:	2220      	movs	r2, #32
 800da96:	2100      	movs	r1, #0
 800da98:	a802      	add	r0, sp, #8
 800da9a:	f000 fe15 	bl	800e6c8 <memset>
	  .name = (char*) name,
	  .stack_size = stackSize,
	  .priority = (osPriority_t) priority,
	};
 800da9e:	9501      	str	r5, [sp, #4]
 800daa0:	9706      	str	r7, [sp, #24]
 800daa2:	9607      	str	r6, [sp, #28]
	this->handle = (osThreadId) osThreadNew(&__task_run, this, &thread_attributes);
 800daa4:	aa01      	add	r2, sp, #4
 800daa6:	4621      	mov	r1, r4
 800daa8:	4804      	ldr	r0, [pc, #16]	; (800dabc <_ZN6ThreadC1EPKc12osPriority_tm+0x3c>)
 800daaa:	f7fc f9d7 	bl	8009e5c <osThreadNew>
 800daae:	6060      	str	r0, [r4, #4]
//	this->handle = osThreadCreate(&thread, this);
	this->name = name;
 800dab0:	60a5      	str	r5, [r4, #8]
}
 800dab2:	4620      	mov	r0, r4
 800dab4:	b00b      	add	sp, #44	; 0x2c
 800dab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dab8:	08011610 	.word	0x08011610
 800dabc:	0800da39 	.word	0x0800da39

0800dac0 <_ZN6ThreadC1EPKc12osPriority_t>:
Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 800dac0:	b510      	push	{r4, lr}
 800dac2:	4604      	mov	r4, r0
 800dac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac8:	f7ff ffda 	bl	800da80 <_ZN6ThreadC1EPKc12osPriority_tm>
}
 800dacc:	4620      	mov	r0, r4
 800dace:	bd10      	pop	{r4, pc}

0800dad0 <_ZN6ThreadC1EPKc>:
Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 800dad0:	b510      	push	{r4, lr}
 800dad2:	4604      	mov	r4, r0
 800dad4:	2218      	movs	r2, #24
 800dad6:	f7ff fff3 	bl	800dac0 <_ZN6ThreadC1EPKc12osPriority_t>
}
 800dada:	4620      	mov	r0, r4
 800dadc:	bd10      	pop	{r4, pc}

0800dade <_ZN6ThreadC1EPKcm>:
Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 800dade:	b510      	push	{r4, lr}
 800dae0:	4604      	mov	r4, r0
 800dae2:	4613      	mov	r3, r2
 800dae4:	2218      	movs	r2, #24
 800dae6:	f7ff ffcb 	bl	800da80 <_ZN6ThreadC1EPKc12osPriority_tm>
}
 800daea:	4620      	mov	r0, r4
 800daec:	bd10      	pop	{r4, pc}

0800daee <_ZN6Thread9terminateEv>:
osThreadId Thread::getHandle() {
	return handle;
}

void Thread::terminate() {
	this->running = false;
 800daee:	2300      	movs	r3, #0
 800daf0:	7303      	strb	r3, [r0, #12]
}
 800daf2:	4770      	bx	lr

0800daf4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800daf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800daf6:	2400      	movs	r4, #0
 800daf8:	2310      	movs	r3, #16
 800dafa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dafe:	6803      	ldr	r3, [r0, #0]
 800db00:	4615      	mov	r5, r2
 800db02:	699e      	ldr	r6, [r3, #24]
 800db04:	6812      	ldr	r2, [r2, #0]
 800db06:	466b      	mov	r3, sp
 800db08:	e9cd 4400 	strd	r4, r4, [sp]
 800db0c:	47b0      	blx	r6
 800db0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db12:	f003 0306 	and.w	r3, r3, #6
 800db16:	2b06      	cmp	r3, #6
 800db18:	bf03      	ittte	eq
 800db1a:	9b00      	ldreq	r3, [sp, #0]
 800db1c:	602b      	streq	r3, [r5, #0]
 800db1e:	2001      	moveq	r0, #1
 800db20:	4620      	movne	r0, r4
 800db22:	b004      	add	sp, #16
 800db24:	bd70      	pop	{r4, r5, r6, pc}

0800db26 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800db26:	9800      	ldr	r0, [sp, #0]
 800db28:	4290      	cmp	r0, r2
 800db2a:	bf14      	ite	ne
 800db2c:	2001      	movne	r0, #1
 800db2e:	2006      	moveq	r0, #6
 800db30:	4770      	bx	lr
	...

0800db34 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800db34:	b510      	push	{r4, lr}
 800db36:	4b03      	ldr	r3, [pc, #12]	; (800db44 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800db38:	6003      	str	r3, [r0, #0]
 800db3a:	4604      	mov	r4, r0
 800db3c:	f000 f965 	bl	800de0a <_ZNSt9type_infoD1Ev>
 800db40:	4620      	mov	r0, r4
 800db42:	bd10      	pop	{r4, pc}
 800db44:	08011658 	.word	0x08011658

0800db48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800db48:	b510      	push	{r4, lr}
 800db4a:	4604      	mov	r4, r0
 800db4c:	f7ff fff2 	bl	800db34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800db50:	4620      	mov	r0, r4
 800db52:	2108      	movs	r1, #8
 800db54:	f000 f842 	bl	800dbdc <_ZdlPvj>
 800db58:	4620      	mov	r0, r4
 800db5a:	bd10      	pop	{r4, pc}

0800db5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	461f      	mov	r7, r3
 800db62:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800db66:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800db6a:	4598      	cmp	r8, r3
 800db6c:	4606      	mov	r6, r0
 800db6e:	4615      	mov	r5, r2
 800db70:	d107      	bne.n	800db82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800db72:	9907      	ldr	r1, [sp, #28]
 800db74:	f000 f94e 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800db78:	b118      	cbz	r0, 800db82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800db7a:	7165      	strb	r5, [r4, #5]
 800db7c:	2000      	movs	r0, #0
 800db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db82:	4639      	mov	r1, r7
 800db84:	4630      	mov	r0, r6
 800db86:	f000 f945 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d0f6      	beq.n	800db7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800db8e:	2301      	movs	r3, #1
 800db90:	f8c4 8000 	str.w	r8, [r4]
 800db94:	7125      	strb	r5, [r4, #4]
 800db96:	71a3      	strb	r3, [r4, #6]
 800db98:	e7f0      	b.n	800db7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800db9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800db9a:	b538      	push	{r3, r4, r5, lr}
 800db9c:	4615      	mov	r5, r2
 800db9e:	461c      	mov	r4, r3
 800dba0:	f000 f938 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800dba4:	b120      	cbz	r0, 800dbb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800dba6:	2308      	movs	r3, #8
 800dba8:	60e3      	str	r3, [r4, #12]
 800dbaa:	2306      	movs	r3, #6
 800dbac:	6025      	str	r5, [r4, #0]
 800dbae:	7123      	strb	r3, [r4, #4]
 800dbb0:	bd38      	pop	{r3, r4, r5, pc}

0800dbb2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800dbb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	461e      	mov	r6, r3
 800dbbc:	f000 f92a 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800dbc0:	b950      	cbnz	r0, 800dbd8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800dbc2:	2e03      	cmp	r6, #3
 800dbc4:	d808      	bhi.n	800dbd8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	9a01      	ldr	r2, [sp, #4]
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4620      	mov	r0, r4
 800dbd0:	b002      	add	sp, #8
 800dbd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbd6:	4718      	bx	r3
 800dbd8:	b002      	add	sp, #8
 800dbda:	bd70      	pop	{r4, r5, r6, pc}

0800dbdc <_ZdlPvj>:
 800dbdc:	f7fe b8fe 	b.w	800bddc <_ZdlPv>

0800dbe0 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	4770      	bx	lr

0800dbe4 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	4b03      	ldr	r3, [pc, #12]	; (800dbf4 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
 800dbe8:	6003      	str	r3, [r0, #0]
 800dbea:	4604      	mov	r4, r0
 800dbec:	f000 f90d 	bl	800de0a <_ZNSt9type_infoD1Ev>
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	080116b8 	.word	0x080116b8

0800dbf8 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
 800dbf8:	b510      	push	{r4, lr}
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	f7ff fff2 	bl	800dbe4 <_ZN10__cxxabiv120__function_type_infoD1Ev>
 800dc00:	4620      	mov	r0, r4
 800dc02:	2108      	movs	r1, #8
 800dc04:	f7ff ffea 	bl	800dbdc <_ZdlPvj>
 800dc08:	4620      	mov	r0, r4
 800dc0a:	bd10      	pop	{r4, pc}

0800dc0c <__cxa_guard_acquire>:
 800dc0c:	6803      	ldr	r3, [r0, #0]
 800dc0e:	07db      	lsls	r3, r3, #31
 800dc10:	d406      	bmi.n	800dc20 <__cxa_guard_acquire+0x14>
 800dc12:	7843      	ldrb	r3, [r0, #1]
 800dc14:	b103      	cbz	r3, 800dc18 <__cxa_guard_acquire+0xc>
 800dc16:	deff      	udf	#255	; 0xff
 800dc18:	2301      	movs	r3, #1
 800dc1a:	7043      	strb	r3, [r0, #1]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	4770      	bx	lr
 800dc20:	2000      	movs	r0, #0
 800dc22:	4770      	bx	lr

0800dc24 <__cxa_guard_release>:
 800dc24:	2301      	movs	r3, #1
 800dc26:	6003      	str	r3, [r0, #0]
 800dc28:	4770      	bx	lr
	...

0800dc2c <_ZSt11_Hash_bytesPKvjj>:
 800dc2c:	b570      	push	{r4, r5, r6, lr}
 800dc2e:	4c18      	ldr	r4, [pc, #96]	; (800dc90 <_ZSt11_Hash_bytesPKvjj+0x64>)
 800dc30:	404a      	eors	r2, r1
 800dc32:	460d      	mov	r5, r1
 800dc34:	1846      	adds	r6, r0, r1
 800dc36:	2d03      	cmp	r5, #3
 800dc38:	eba6 0305 	sub.w	r3, r6, r5
 800dc3c:	d908      	bls.n	800dc50 <_ZSt11_Hash_bytesPKvjj+0x24>
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4363      	muls	r3, r4
 800dc42:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 800dc46:	4362      	muls	r2, r4
 800dc48:	4363      	muls	r3, r4
 800dc4a:	405a      	eors	r2, r3
 800dc4c:	3d04      	subs	r5, #4
 800dc4e:	e7f2      	b.n	800dc36 <_ZSt11_Hash_bytesPKvjj+0xa>
 800dc50:	088b      	lsrs	r3, r1, #2
 800dc52:	f06f 0503 	mvn.w	r5, #3
 800dc56:	fb05 1103 	mla	r1, r5, r3, r1
 800dc5a:	2902      	cmp	r1, #2
 800dc5c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800dc60:	d011      	beq.n	800dc86 <_ZSt11_Hash_bytesPKvjj+0x5a>
 800dc62:	2903      	cmp	r1, #3
 800dc64:	d00c      	beq.n	800dc80 <_ZSt11_Hash_bytesPKvjj+0x54>
 800dc66:	2901      	cmp	r1, #1
 800dc68:	d103      	bne.n	800dc72 <_ZSt11_Hash_bytesPKvjj+0x46>
 800dc6a:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 800dc6e:	4042      	eors	r2, r0
 800dc70:	4362      	muls	r2, r4
 800dc72:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 800dc76:	fb04 f002 	mul.w	r0, r4, r2
 800dc7a:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	78a9      	ldrb	r1, [r5, #2]
 800dc82:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 800dc86:	7869      	ldrb	r1, [r5, #1]
 800dc88:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 800dc8c:	e7ed      	b.n	800dc6a <_ZSt11_Hash_bytesPKvjj+0x3e>
 800dc8e:	bf00      	nop
 800dc90:	5bd1e995 	.word	0x5bd1e995

0800dc94 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800dc94:	2001      	movs	r0, #1
 800dc96:	4770      	bx	lr

0800dc98 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800dc98:	b510      	push	{r4, lr}
 800dc9a:	4b03      	ldr	r3, [pc, #12]	; (800dca8 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800dc9c:	6003      	str	r3, [r0, #0]
 800dc9e:	4604      	mov	r4, r0
 800dca0:	f000 fb3a 	bl	800e318 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800dca4:	4620      	mov	r0, r4
 800dca6:	bd10      	pop	{r4, pc}
 800dca8:	08011708 	.word	0x08011708

0800dcac <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800dcac:	b510      	push	{r4, lr}
 800dcae:	4604      	mov	r4, r0
 800dcb0:	f7ff fff2 	bl	800dc98 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	2110      	movs	r1, #16
 800dcb8:	f7ff ff90 	bl	800dbdc <_ZdlPvj>
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	bd10      	pop	{r4, pc}

0800dcc0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	461d      	mov	r5, r3
 800dcca:	d806      	bhi.n	800dcda <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 800dccc:	490c      	ldr	r1, [pc, #48]	; (800dd00 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800dcce:	68c0      	ldr	r0, [r0, #12]
 800dcd0:	9201      	str	r2, [sp, #4]
 800dcd2:	f000 f89f 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800dcd6:	9a01      	ldr	r2, [sp, #4]
 800dcd8:	b948      	cbnz	r0, 800dcee <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 800dcda:	68f0      	ldr	r0, [r6, #12]
 800dcdc:	68e1      	ldr	r1, [r4, #12]
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	691e      	ldr	r6, [r3, #16]
 800dce2:	1cab      	adds	r3, r5, #2
 800dce4:	46b4      	mov	ip, r6
 800dce6:	b002      	add	sp, #8
 800dce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcec:	4760      	bx	ip
 800dcee:	68e0      	ldr	r0, [r4, #12]
 800dcf0:	6803      	ldr	r3, [r0, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	4798      	blx	r3
 800dcf6:	f080 0001 	eor.w	r0, r0, #1
 800dcfa:	b2c0      	uxtb	r0, r0
 800dcfc:	b002      	add	sp, #8
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	0801180c 	.word	0x0801180c

0800dd04 <__cxa_pure_virtual>:
 800dd04:	b508      	push	{r3, lr}
 800dd06:	f000 fae3 	bl	800e2d0 <_ZSt9terminatev>
	...

0800dd0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800dd10:	6003      	str	r3, [r0, #0]
 800dd12:	4604      	mov	r4, r0
 800dd14:	f7ff ff0e 	bl	800db34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800dd18:	4620      	mov	r0, r4
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	08011760 	.word	0x08011760

0800dd20 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	4604      	mov	r4, r0
 800dd24:	f7ff fff2 	bl	800dd0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800dd28:	4620      	mov	r0, r4
 800dd2a:	210c      	movs	r1, #12
 800dd2c:	f7ff ff56 	bl	800dbdc <_ZdlPvj>
 800dd30:	4620      	mov	r0, r4
 800dd32:	bd10      	pop	{r4, pc}

0800dd34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800dd34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd36:	9f08      	ldr	r7, [sp, #32]
 800dd38:	4297      	cmp	r7, r2
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	460e      	mov	r6, r1
 800dd3e:	4614      	mov	r4, r2
 800dd40:	d00a      	beq.n	800dd58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800dd42:	68a8      	ldr	r0, [r5, #8]
 800dd44:	6802      	ldr	r2, [r0, #0]
 800dd46:	9708      	str	r7, [sp, #32]
 800dd48:	6a15      	ldr	r5, [r2, #32]
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	46ac      	mov	ip, r5
 800dd50:	b003      	add	sp, #12
 800dd52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd56:	4760      	bx	ip
 800dd58:	4619      	mov	r1, r3
 800dd5a:	9301      	str	r3, [sp, #4]
 800dd5c:	f000 f85a 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0ed      	beq.n	800dd42 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800dd66:	2006      	movs	r0, #6
 800dd68:	b003      	add	sp, #12
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800dd6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	460d      	mov	r5, r1
 800dd72:	4619      	mov	r1, r3
 800dd74:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800dd78:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800dd7c:	4681      	mov	r9, r0
 800dd7e:	4617      	mov	r7, r2
 800dd80:	4698      	mov	r8, r3
 800dd82:	f000 f847 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800dd86:	b190      	cbz	r0, 800ddae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	6034      	str	r4, [r6, #0]
 800dd8c:	7137      	strb	r7, [r6, #4]
 800dd8e:	db09      	blt.n	800dda4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800dd90:	1961      	adds	r1, r4, r5
 800dd92:	458a      	cmp	sl, r1
 800dd94:	bf0c      	ite	eq
 800dd96:	2106      	moveq	r1, #6
 800dd98:	2101      	movne	r1, #1
 800dd9a:	71b1      	strb	r1, [r6, #6]
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	b001      	add	sp, #4
 800dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda4:	3502      	adds	r5, #2
 800dda6:	d1f9      	bne.n	800dd9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	71b3      	strb	r3, [r6, #6]
 800ddac:	e7f6      	b.n	800dd9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800ddae:	4554      	cmp	r4, sl
 800ddb0:	d106      	bne.n	800ddc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800ddb2:	4659      	mov	r1, fp
 800ddb4:	4648      	mov	r0, r9
 800ddb6:	f000 f82d 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800ddba:	b108      	cbz	r0, 800ddc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800ddbc:	7177      	strb	r7, [r6, #5]
 800ddbe:	e7ed      	b.n	800dd9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800ddc0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800ddc4:	6803      	ldr	r3, [r0, #0]
 800ddc6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800ddca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800ddce:	69dc      	ldr	r4, [r3, #28]
 800ddd0:	463a      	mov	r2, r7
 800ddd2:	4643      	mov	r3, r8
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	46a4      	mov	ip, r4
 800ddd8:	b001      	add	sp, #4
 800ddda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddde:	4760      	bx	ip

0800dde0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	4607      	mov	r7, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	4615      	mov	r5, r2
 800ddea:	461e      	mov	r6, r3
 800ddec:	f7ff fed5 	bl	800db9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800ddf0:	b948      	cbnz	r0, 800de06 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800ddf2:	68b8      	ldr	r0, [r7, #8]
 800ddf4:	6803      	ldr	r3, [r0, #0]
 800ddf6:	699f      	ldr	r7, [r3, #24]
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	4633      	mov	r3, r6
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	46bc      	mov	ip, r7
 800de00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de04:	4760      	bx	ip
 800de06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de0a <_ZNSt9type_infoD1Ev>:
 800de0a:	4770      	bx	lr

0800de0c <_ZNKSt9type_info14__is_pointer_pEv>:
 800de0c:	2000      	movs	r0, #0
 800de0e:	4770      	bx	lr

0800de10 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800de10:	2000      	movs	r0, #0
 800de12:	4770      	bx	lr

0800de14 <_ZNKSt9type_infoeqERKS_>:
 800de14:	4281      	cmp	r1, r0
 800de16:	b508      	push	{r3, lr}
 800de18:	d00e      	beq.n	800de38 <_ZNKSt9type_infoeqERKS_+0x24>
 800de1a:	6840      	ldr	r0, [r0, #4]
 800de1c:	7803      	ldrb	r3, [r0, #0]
 800de1e:	2b2a      	cmp	r3, #42	; 0x2a
 800de20:	d00c      	beq.n	800de3c <_ZNKSt9type_infoeqERKS_+0x28>
 800de22:	6849      	ldr	r1, [r1, #4]
 800de24:	780b      	ldrb	r3, [r1, #0]
 800de26:	2b2a      	cmp	r3, #42	; 0x2a
 800de28:	bf08      	it	eq
 800de2a:	3101      	addeq	r1, #1
 800de2c:	f7f2 fa58 	bl	80002e0 <strcmp>
 800de30:	fab0 f080 	clz	r0, r0
 800de34:	0940      	lsrs	r0, r0, #5
 800de36:	bd08      	pop	{r3, pc}
 800de38:	2001      	movs	r0, #1
 800de3a:	e7fc      	b.n	800de36 <_ZNKSt9type_infoeqERKS_+0x22>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e7fa      	b.n	800de36 <_ZNKSt9type_infoeqERKS_+0x22>

0800de40 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800de40:	f7ff bfe8 	b.w	800de14 <_ZNKSt9type_infoeqERKS_>

0800de44 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 800de44:	b510      	push	{r4, lr}
 800de46:	4b03      	ldr	r3, [pc, #12]	; (800de54 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 800de48:	6003      	str	r3, [r0, #0]
 800de4a:	4604      	mov	r4, r0
 800de4c:	f7ff fe72 	bl	800db34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800de50:	4620      	mov	r0, r4
 800de52:	bd10      	pop	{r4, pc}
 800de54:	080117d8 	.word	0x080117d8

0800de58 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	4604      	mov	r4, r0
 800de5c:	f7ff fff2 	bl	800de44 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 800de60:	4620      	mov	r0, r4
 800de62:	2118      	movs	r1, #24
 800de64:	f7ff feba 	bl	800dbdc <_ZdlPvj>
 800de68:	4620      	mov	r0, r4
 800de6a:	bd10      	pop	{r4, pc}

0800de6c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800de6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800de74:	454a      	cmp	r2, r9
 800de76:	4604      	mov	r4, r0
 800de78:	460f      	mov	r7, r1
 800de7a:	4616      	mov	r6, r2
 800de7c:	469a      	mov	sl, r3
 800de7e:	d024      	beq.n	800deca <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 800de80:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800de84:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 800de88:	f1b8 0f00 	cmp.w	r8, #0
 800de8c:	d028      	beq.n	800dee0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 800de8e:	68e5      	ldr	r5, [r4, #12]
 800de90:	07aa      	lsls	r2, r5, #30
 800de92:	d521      	bpl.n	800ded8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800de94:	122a      	asrs	r2, r5, #8
 800de96:	f015 0501 	ands.w	r5, r5, #1
 800de9a:	d003      	beq.n	800dea4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 800de9c:	1cfb      	adds	r3, r7, #3
 800de9e:	d01b      	beq.n	800ded8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800dea0:	6833      	ldr	r3, [r6, #0]
 800dea2:	589a      	ldr	r2, [r3, r2]
 800dea4:	68a0      	ldr	r0, [r4, #8]
 800dea6:	6803      	ldr	r3, [r0, #0]
 800dea8:	f8cd 9000 	str.w	r9, [sp]
 800deac:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800deb0:	4432      	add	r2, r6
 800deb2:	4653      	mov	r3, sl
 800deb4:	4639      	mov	r1, r7
 800deb6:	47d8      	blx	fp
 800deb8:	2803      	cmp	r0, #3
 800deba:	d90d      	bls.n	800ded8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800debc:	b115      	cbz	r5, 800dec4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800debe:	f040 0001 	orr.w	r0, r0, #1
 800dec2:	b2c0      	uxtb	r0, r0
 800dec4:	b003      	add	sp, #12
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	4619      	mov	r1, r3
 800decc:	f7ff ffa2 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d0d5      	beq.n	800de80 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 800ded4:	2006      	movs	r0, #6
 800ded6:	e7f5      	b.n	800dec4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800ded8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dedc:	3c08      	subs	r4, #8
 800dede:	e7d3      	b.n	800de88 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 800dee0:	2001      	movs	r0, #1
 800dee2:	e7ef      	b.n	800dec4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0800dee4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 800dee4:	b4f0      	push	{r4, r5, r6, r7}
 800dee6:	1e0d      	subs	r5, r1, #0
 800dee8:	9c04      	ldr	r4, [sp, #16]
 800deea:	db06      	blt.n	800defa <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 800deec:	1950      	adds	r0, r2, r5
 800deee:	4284      	cmp	r4, r0
 800def0:	bf14      	ite	ne
 800def2:	2001      	movne	r0, #1
 800def4:	2006      	moveq	r0, #6
 800def6:	bcf0      	pop	{r4, r5, r6, r7}
 800def8:	4770      	bx	lr
 800defa:	3502      	adds	r5, #2
 800defc:	d005      	beq.n	800df0a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 800defe:	6805      	ldr	r5, [r0, #0]
 800df00:	9404      	str	r4, [sp, #16]
 800df02:	6a2c      	ldr	r4, [r5, #32]
 800df04:	46a4      	mov	ip, r4
 800df06:	bcf0      	pop	{r4, r5, r6, r7}
 800df08:	4760      	bx	ip
 800df0a:	2001      	movs	r0, #1
 800df0c:	e7f3      	b.n	800def6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0800df0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800df0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df12:	b091      	sub	sp, #68	; 0x44
 800df14:	469a      	mov	sl, r3
 800df16:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800df18:	9206      	str	r2, [sp, #24]
 800df1a:	68a3      	ldr	r3, [r4, #8]
 800df1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800df1e:	4688      	mov	r8, r1
 800df20:	06d9      	lsls	r1, r3, #27
 800df22:	bf44      	itt	mi
 800df24:	6883      	ldrmi	r3, [r0, #8]
 800df26:	60a3      	strmi	r3, [r4, #8]
 800df28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800df2a:	4293      	cmp	r3, r2
 800df2c:	4681      	mov	r9, r0
 800df2e:	d107      	bne.n	800df40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 800df30:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800df32:	f7ff ff6f 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800df36:	b118      	cbz	r0, 800df40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 800df38:	9b06      	ldr	r3, [sp, #24]
 800df3a:	7163      	strb	r3, [r4, #5]
 800df3c:	2700      	movs	r7, #0
 800df3e:	e07f      	b.n	800e040 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800df40:	4651      	mov	r1, sl
 800df42:	4648      	mov	r0, r9
 800df44:	f7ff ff66 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800df48:	b1c0      	cbz	r0, 800df7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 800df4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	f1b8 0f00 	cmp.w	r8, #0
 800df52:	9b06      	ldr	r3, [sp, #24]
 800df54:	7123      	strb	r3, [r4, #4]
 800df56:	db0b      	blt.n	800df70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 800df58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800df5a:	4498      	add	r8, r3
 800df5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800df5e:	4543      	cmp	r3, r8
 800df60:	bf0c      	ite	eq
 800df62:	f04f 0806 	moveq.w	r8, #6
 800df66:	f04f 0801 	movne.w	r8, #1
 800df6a:	f884 8006 	strb.w	r8, [r4, #6]
 800df6e:	e7e5      	b.n	800df3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800df70:	f118 0f02 	cmn.w	r8, #2
 800df74:	d1e2      	bne.n	800df3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800df76:	2301      	movs	r3, #1
 800df78:	71a3      	strb	r3, [r4, #6]
 800df7a:	e7df      	b.n	800df3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 800df7c:	f1b8 0f00 	cmp.w	r8, #0
 800df80:	bfa9      	itett	ge
 800df82:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 800df84:	9007      	strlt	r0, [sp, #28]
 800df86:	eba3 0308 	subge.w	r3, r3, r8
 800df8a:	9307      	strge	r3, [sp, #28]
 800df8c:	2700      	movs	r7, #0
 800df8e:	2302      	movs	r3, #2
 800df90:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 800df94:	2301      	movs	r3, #1
 800df96:	9308      	str	r3, [sp, #32]
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	f043 0301 	orr.w	r3, r3, #1
 800df9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfa0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800dfa4:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	f1bb 0f00 	cmp.w	fp, #0
 800dfae:	f000 80d4 	beq.w	800e15a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800dfb8:	9b05      	ldr	r3, [sp, #20]
 800dfba:	68a5      	ldr	r5, [r4, #8]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	950f      	str	r5, [sp, #60]	; 0x3c
 800dfc0:	07da      	lsls	r2, r3, #31
 800dfc2:	bf43      	ittte	mi
 800dfc4:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 800dfc6:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 800dfc8:	6800      	ldrmi	r0, [r0, #0]
 800dfca:	9a06      	ldrpl	r2, [sp, #24]
 800dfcc:	ea4f 2123 	mov.w	r1, r3, asr #8
 800dfd0:	bf48      	it	mi
 800dfd2:	5841      	ldrmi	r1, [r0, r1]
 800dfd4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dfd6:	4401      	add	r1, r0
 800dfd8:	9807      	ldr	r0, [sp, #28]
 800dfda:	b138      	cbz	r0, 800dfec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xde>
 800dfdc:	4288      	cmp	r0, r1
 800dfde:	9e08      	ldr	r6, [sp, #32]
 800dfe0:	bf2c      	ite	cs
 800dfe2:	2000      	movcs	r0, #0
 800dfe4:	2001      	movcc	r0, #1
 800dfe6:	42b0      	cmp	r0, r6
 800dfe8:	f000 80b3 	beq.w	800e152 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 800dfec:	079b      	lsls	r3, r3, #30
 800dfee:	d407      	bmi.n	800e000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf2>
 800dff0:	f118 0f02 	cmn.w	r8, #2
 800dff4:	d102      	bne.n	800dffc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xee>
 800dff6:	07ae      	lsls	r6, r5, #30
 800dff8:	f000 80ad 	beq.w	800e156 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 800dffc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800e000:	9b05      	ldr	r3, [sp, #20]
 800e002:	6898      	ldr	r0, [r3, #8]
 800e004:	ad0d      	add	r5, sp, #52	; 0x34
 800e006:	6803      	ldr	r3, [r0, #0]
 800e008:	9503      	str	r5, [sp, #12]
 800e00a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e00c:	9502      	str	r5, [sp, #8]
 800e00e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e010:	e9cd 1500 	strd	r1, r5, [sp]
 800e014:	4641      	mov	r1, r8
 800e016:	69dd      	ldr	r5, [r3, #28]
 800e018:	4653      	mov	r3, sl
 800e01a:	47a8      	blx	r5
 800e01c:	7963      	ldrb	r3, [r4, #5]
 800e01e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800e022:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 800e026:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e028:	4313      	orrs	r3, r2
 800e02a:	2d06      	cmp	r5, #6
 800e02c:	7163      	strb	r3, [r4, #5]
 800e02e:	d001      	beq.n	800e034 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x126>
 800e030:	2d02      	cmp	r5, #2
 800e032:	d109      	bne.n	800e048 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 800e034:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e038:	6021      	str	r1, [r4, #0]
 800e03a:	7123      	strb	r3, [r4, #4]
 800e03c:	71a5      	strb	r5, [r4, #6]
 800e03e:	4607      	mov	r7, r0
 800e040:	4638      	mov	r0, r7
 800e042:	b011      	add	sp, #68	; 0x44
 800e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e048:	6822      	ldr	r2, [r4, #0]
 800e04a:	b9a7      	cbnz	r7, 800e076 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 800e04c:	b9aa      	cbnz	r2, 800e07a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 800e04e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e052:	6021      	str	r1, [r4, #0]
 800e054:	7122      	strb	r2, [r4, #4]
 800e056:	b121      	cbz	r1, 800e062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e058:	b11b      	cbz	r3, 800e062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e05a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e05e:	07dd      	lsls	r5, r3, #31
 800e060:	d5ed      	bpl.n	800e03e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e062:	7963      	ldrb	r3, [r4, #5]
 800e064:	2b04      	cmp	r3, #4
 800e066:	d0ea      	beq.n	800e03e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e068:	9b05      	ldr	r3, [sp, #20]
 800e06a:	3b08      	subs	r3, #8
 800e06c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e070:	9305      	str	r3, [sp, #20]
 800e072:	4607      	mov	r7, r0
 800e074:	e799      	b.n	800dfaa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 800e076:	2a00      	cmp	r2, #0
 800e078:	d037      	beq.n	800e0ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 800e07a:	4291      	cmp	r1, r2
 800e07c:	d106      	bne.n	800e08c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17e>
 800e07e:	7923      	ldrb	r3, [r4, #4]
 800e080:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e084:	4313      	orrs	r3, r2
 800e086:	7123      	strb	r3, [r4, #4]
 800e088:	4638      	mov	r0, r7
 800e08a:	e7ea      	b.n	800e062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e08c:	b909      	cbnz	r1, 800e092 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d0fa      	beq.n	800e088 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 800e092:	2b03      	cmp	r3, #3
 800e094:	79a6      	ldrb	r6, [r4, #6]
 800e096:	d904      	bls.n	800e0a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
 800e098:	07d9      	lsls	r1, r3, #31
 800e09a:	d529      	bpl.n	800e0f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	079b      	lsls	r3, r3, #30
 800e0a0:	d526      	bpl.n	800e0f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 800e0a2:	b97e      	cbnz	r6, 800e0c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
 800e0a4:	2d03      	cmp	r5, #3
 800e0a6:	d905      	bls.n	800e0b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a6>
 800e0a8:	07ee      	lsls	r6, r5, #31
 800e0aa:	d541      	bpl.n	800e130 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 800e0ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e0b0:	0798      	lsls	r0, r3, #30
 800e0b2:	d53d      	bpl.n	800e130 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 800e0b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	4641      	mov	r1, r8
 800e0ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0bc:	4650      	mov	r0, sl
 800e0be:	f7ff ff11 	bl	800dee4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	b9e5      	cbnz	r5, 800e100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e0c6:	2e03      	cmp	r6, #3
 800e0c8:	d905      	bls.n	800e0d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
 800e0ca:	07f1      	lsls	r1, r6, #31
 800e0cc:	d532      	bpl.n	800e134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 800e0ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e0d2:	079a      	lsls	r2, r3, #30
 800e0d4:	d52e      	bpl.n	800e134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 800e0d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0de:	4641      	mov	r1, r8
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	f7ff feff 	bl	800dee4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	e00a      	b.n	800e100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e0ea:	2900      	cmp	r1, #0
 800e0ec:	d1d1      	bne.n	800e092 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 800e0ee:	e7cb      	b.n	800e088 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 800e0f0:	2e01      	cmp	r6, #1
 800e0f2:	bf38      	it	cc
 800e0f4:	2601      	movcc	r6, #1
 800e0f6:	2d01      	cmp	r5, #1
 800e0f8:	bf38      	it	cc
 800e0fa:	2501      	movcc	r5, #1
 800e0fc:	b2f6      	uxtb	r6, r6
 800e0fe:	b2ed      	uxtb	r5, r5
 800e100:	ea85 0306 	eor.w	r3, r5, r6
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b03      	cmp	r3, #3
 800e108:	d916      	bls.n	800e138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22a>
 800e10a:	2d03      	cmp	r5, #3
 800e10c:	bf81      	itttt	hi
 800e10e:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 800e110:	6023      	strhi	r3, [r4, #0]
 800e112:	462e      	movhi	r6, r5
 800e114:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 800e118:	bf86      	itte	hi
 800e11a:	7123      	strbhi	r3, [r4, #4]
 800e11c:	2000      	movhi	r0, #0
 800e11e:	4638      	movls	r0, r7
 800e120:	07b3      	lsls	r3, r6, #30
 800e122:	71a6      	strb	r6, [r4, #6]
 800e124:	d402      	bmi.n	800e12c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21e>
 800e126:	f016 0601 	ands.w	r6, r6, #1
 800e12a:	d19a      	bne.n	800e062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e12c:	2000      	movs	r0, #0
 800e12e:	e786      	b.n	800e03e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e130:	2601      	movs	r6, #1
 800e132:	e7e5      	b.n	800e100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e134:	2501      	movs	r5, #1
 800e136:	e7e3      	b.n	800e100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 800e138:	4035      	ands	r5, r6
 800e13a:	b2ed      	uxtb	r5, r5
 800e13c:	2300      	movs	r3, #0
 800e13e:	2d03      	cmp	r5, #3
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	d903      	bls.n	800e14c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 800e144:	2302      	movs	r3, #2
 800e146:	71a3      	strb	r3, [r4, #6]
 800e148:	2001      	movs	r0, #1
 800e14a:	e778      	b.n	800e03e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 800e14c:	2001      	movs	r0, #1
 800e14e:	71a0      	strb	r0, [r4, #6]
 800e150:	e787      	b.n	800e062 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 800e152:	2301      	movs	r3, #1
 800e154:	9309      	str	r3, [sp, #36]	; 0x24
 800e156:	4638      	mov	r0, r7
 800e158:	e786      	b.n	800e068 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 800e15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f43f af6f 	beq.w	800e040 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800e162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e164:	2b01      	cmp	r3, #1
 800e166:	f43f af6b 	beq.w	800e040 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 800e16a:	2301      	movs	r3, #1
 800e16c:	930a      	str	r3, [sp, #40]	; 0x28
 800e16e:	f8cd b020 	str.w	fp, [sp, #32]
 800e172:	e715      	b.n	800dfa0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

0800e174 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800e174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	ed2d 8b02 	vpush	{d8}
 800e17c:	b089      	sub	sp, #36	; 0x24
 800e17e:	ee08 1a10 	vmov	s16, r1
 800e182:	4606      	mov	r6, r0
 800e184:	4617      	mov	r7, r2
 800e186:	461c      	mov	r4, r3
 800e188:	f7ff fd07 	bl	800db9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800e18c:	4605      	mov	r5, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	d15f      	bne.n	800e252 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e192:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e196:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e19a:	f019 0f10 	tst.w	r9, #16
 800e19e:	bf18      	it	ne
 800e1a0:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 800e1a4:	f009 0301 	and.w	r3, r9, #1
 800e1a8:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 800e1ac:	9303      	str	r3, [sp, #12]
 800e1ae:	f10d 0b10 	add.w	fp, sp, #16
 800e1b2:	f1ba 0f00 	cmp.w	sl, #0
 800e1b6:	d074      	beq.n	800e2a2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e1be:	9304      	str	r3, [sp, #16]
 800e1c0:	f88d 3014 	strb.w	r3, [sp, #20]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	f002 0301 	and.w	r3, r2, #1
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	f002 0302 	and.w	r3, r2, #2
 800e1d2:	9302      	str	r3, [sp, #8]
 800e1d4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800e1d8:	430b      	orrs	r3, r1
 800e1da:	f8cd 9018 	str.w	r9, [sp, #24]
 800e1de:	d104      	bne.n	800e1ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 800e1e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1e4:	f1a8 0808 	sub.w	r8, r8, #8
 800e1e8:	e7e3      	b.n	800e1b2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 800e1ea:	2f00      	cmp	r7, #0
 800e1ec:	d037      	beq.n	800e25e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 800e1ee:	9b01      	ldr	r3, [sp, #4]
 800e1f0:	1212      	asrs	r2, r2, #8
 800e1f2:	b10b      	cbz	r3, 800e1f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	589a      	ldr	r2, [r3, r2]
 800e1f8:	443a      	add	r2, r7
 800e1fa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	ee18 1a10 	vmov	r1, s16
 800e204:	699d      	ldr	r5, [r3, #24]
 800e206:	465b      	mov	r3, fp
 800e208:	47a8      	blx	r5
 800e20a:	4605      	mov	r5, r0
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d0e7      	beq.n	800e1e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e210:	9b07      	ldr	r3, [sp, #28]
 800e212:	2b08      	cmp	r3, #8
 800e214:	d104      	bne.n	800e220 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 800e216:	9b01      	ldr	r3, [sp, #4]
 800e218:	b113      	cbz	r3, 800e220 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 800e21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e21e:	9307      	str	r3, [sp, #28]
 800e220:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e224:	2b03      	cmp	r3, #3
 800e226:	d905      	bls.n	800e234 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 800e228:	9a02      	ldr	r2, [sp, #8]
 800e22a:	b91a      	cbnz	r2, 800e234 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 800e22c:	f023 0302 	bic.w	r3, r3, #2
 800e230:	f88d 3014 	strb.w	r3, [sp, #20]
 800e234:	68e1      	ldr	r1, [r4, #12]
 800e236:	b9d1      	cbnz	r1, 800e26e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 800e238:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800e23c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e240:	7923      	ldrb	r3, [r4, #4]
 800e242:	2b03      	cmp	r3, #3
 800e244:	d905      	bls.n	800e252 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e246:	079a      	lsls	r2, r3, #30
 800e248:	d50b      	bpl.n	800e262 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 800e24a:	68b3      	ldr	r3, [r6, #8]
 800e24c:	f013 0f01 	tst.w	r3, #1
 800e250:	d1c6      	bne.n	800e1e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e252:	4628      	mov	r0, r5
 800e254:	b009      	add	sp, #36	; 0x24
 800e256:	ecbd 8b02 	vpop	{d8}
 800e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25e:	463a      	mov	r2, r7
 800e260:	e7cb      	b.n	800e1fa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 800e262:	07db      	lsls	r3, r3, #31
 800e264:	d5f5      	bpl.n	800e252 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e266:	68b3      	ldr	r3, [r6, #8]
 800e268:	f013 0f02 	tst.w	r3, #2
 800e26c:	e7f0      	b.n	800e250 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	9a04      	ldr	r2, [sp, #16]
 800e272:	4293      	cmp	r3, r2
 800e274:	d004      	beq.n	800e280 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 800e276:	2300      	movs	r3, #0
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	2302      	movs	r3, #2
 800e27c:	7123      	strb	r3, [r4, #4]
 800e27e:	e7e8      	b.n	800e252 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 800e280:	b12b      	cbz	r3, 800e28e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 800e282:	7923      	ldrb	r3, [r4, #4]
 800e284:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e288:	4313      	orrs	r3, r2
 800e28a:	7123      	strb	r3, [r4, #4]
 800e28c:	e7a8      	b.n	800e1e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 800e28e:	9807      	ldr	r0, [sp, #28]
 800e290:	2808      	cmp	r0, #8
 800e292:	d0f2      	beq.n	800e27a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e294:	2908      	cmp	r1, #8
 800e296:	d0f0      	beq.n	800e27a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e298:	f7ff fdbc 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d1f0      	bne.n	800e282 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 800e2a0:	e7eb      	b.n	800e27a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 800e2a2:	7925      	ldrb	r5, [r4, #4]
 800e2a4:	3d00      	subs	r5, #0
 800e2a6:	bf18      	it	ne
 800e2a8:	2501      	movne	r5, #1
 800e2aa:	e7d2      	b.n	800e252 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

0800e2ac <_ZSt20__throw_length_errorPKc>:
 800e2ac:	b508      	push	{r3, lr}
 800e2ae:	f000 f8b2 	bl	800e416 <abort>

0800e2b2 <_ZSt25__throw_bad_function_callv>:
 800e2b2:	b508      	push	{r3, lr}
 800e2b4:	f000 f8af 	bl	800e416 <abort>

0800e2b8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e2b8:	b508      	push	{r3, lr}
 800e2ba:	4780      	blx	r0
 800e2bc:	f000 f8ab 	bl	800e416 <abort>

0800e2c0 <_ZSt13get_terminatev>:
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <_ZSt13get_terminatev+0xc>)
 800e2c2:	6818      	ldr	r0, [r3, #0]
 800e2c4:	f3bf 8f5b 	dmb	ish
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	2400001c 	.word	0x2400001c

0800e2d0 <_ZSt9terminatev>:
 800e2d0:	b508      	push	{r3, lr}
 800e2d2:	f7ff fff5 	bl	800e2c0 <_ZSt13get_terminatev>
 800e2d6:	f7ff ffef 	bl	800e2b8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e2dc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800e2dc:	b510      	push	{r4, lr}
 800e2de:	4b03      	ldr	r3, [pc, #12]	; (800e2ec <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	f7ff fd91 	bl	800de0a <_ZNSt9type_infoD1Ev>
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	bd10      	pop	{r4, pc}
 800e2ec:	08011850 	.word	0x08011850

0800e2f0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	f7ff fff2 	bl	800e2dc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	2108      	movs	r1, #8
 800e2fc:	f7ff fc6e 	bl	800dbdc <_ZdlPvj>
 800e300:	4620      	mov	r0, r4
 800e302:	bd10      	pop	{r4, pc}

0800e304 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800e304:	68c0      	ldr	r0, [r0, #12]
 800e306:	68c9      	ldr	r1, [r1, #12]
 800e308:	b410      	push	{r4}
 800e30a:	6804      	ldr	r4, [r0, #0]
 800e30c:	6924      	ldr	r4, [r4, #16]
 800e30e:	3302      	adds	r3, #2
 800e310:	46a4      	mov	ip, r4
 800e312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e316:	4760      	bx	ip

0800e318 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	4b03      	ldr	r3, [pc, #12]	; (800e328 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800e31c:	6003      	str	r3, [r0, #0]
 800e31e:	4604      	mov	r4, r0
 800e320:	f7ff fd73 	bl	800de0a <_ZNSt9type_infoD1Ev>
 800e324:	4620      	mov	r0, r4
 800e326:	bd10      	pop	{r4, pc}
 800e328:	080118a0 	.word	0x080118a0

0800e32c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800e32c:	b510      	push	{r4, lr}
 800e32e:	4604      	mov	r4, r0
 800e330:	f7ff fff2 	bl	800e318 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800e334:	4620      	mov	r0, r4
 800e336:	2110      	movs	r1, #16
 800e338:	f7ff fc50 	bl	800dbdc <_ZdlPvj>
 800e33c:	4620      	mov	r0, r4
 800e33e:	bd10      	pop	{r4, pc}

0800e340 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800e340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e344:	4605      	mov	r5, r0
 800e346:	460e      	mov	r6, r1
 800e348:	4617      	mov	r7, r2
 800e34a:	4698      	mov	r8, r3
 800e34c:	f7ff fd62 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e350:	4604      	mov	r4, r0
 800e352:	b9f0      	cbnz	r0, 800e392 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e354:	4929      	ldr	r1, [pc, #164]	; (800e3fc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800e356:	4630      	mov	r0, r6
 800e358:	f7ff fd5c 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e35c:	b300      	cbz	r0, 800e3a0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800e35e:	682b      	ldr	r3, [r5, #0]
 800e360:	4927      	ldr	r1, [pc, #156]	; (800e400 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800e362:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e366:	f7ff fd55 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e36a:	b110      	cbz	r0, 800e372 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800e36c:	603c      	str	r4, [r7, #0]
 800e36e:	4604      	mov	r4, r0
 800e370:	e00f      	b.n	800e392 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	4923      	ldr	r1, [pc, #140]	; (800e404 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800e376:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e37a:	f7ff fd4b 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e37e:	4681      	mov	r9, r0
 800e380:	b170      	cbz	r0, 800e3a0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800e382:	68e8      	ldr	r0, [r5, #12]
 800e384:	6803      	ldr	r3, [r0, #0]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	4798      	blx	r3
 800e38a:	4604      	mov	r4, r0
 800e38c:	b120      	cbz	r0, 800e398 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800e38e:	4b1e      	ldr	r3, [pc, #120]	; (800e408 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800e390:	603b      	str	r3, [r7, #0]
 800e392:	4620      	mov	r0, r4
 800e394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e398:	4b1c      	ldr	r3, [pc, #112]	; (800e40c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 800e39a:	603b      	str	r3, [r7, #0]
 800e39c:	464c      	mov	r4, r9
 800e39e:	e7f8      	b.n	800e392 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e3a6:	b33e      	cbz	r6, 800e3f8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 800e3a8:	6833      	ldr	r3, [r6, #0]
 800e3aa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e3ae:	f7ff fd31 	bl	800de14 <_ZNKSt9type_infoeqERKS_>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d0db      	beq.n	800e36e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800e3b6:	f018 0f01 	tst.w	r8, #1
 800e3ba:	d0ea      	beq.n	800e392 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e3bc:	68b3      	ldr	r3, [r6, #8]
 800e3be:	68a9      	ldr	r1, [r5, #8]
 800e3c0:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800e3c4:	f001 0260 	and.w	r2, r1, #96	; 0x60
 800e3c8:	ea30 0c02 	bics.w	ip, r0, r2
 800e3cc:	bf18      	it	ne
 800e3ce:	4013      	andne	r3, r2
 800e3d0:	ea23 0301 	bic.w	r3, r3, r1
 800e3d4:	ea22 0200 	bic.w	r2, r2, r0
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	d1da      	bne.n	800e392 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800e3dc:	07cb      	lsls	r3, r1, #31
 800e3de:	682b      	ldr	r3, [r5, #0]
 800e3e0:	699c      	ldr	r4, [r3, #24]
 800e3e2:	bf58      	it	pl
 800e3e4:	f028 0801 	bicpl.w	r8, r8, #1
 800e3e8:	4643      	mov	r3, r8
 800e3ea:	463a      	mov	r2, r7
 800e3ec:	4631      	mov	r1, r6
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	46a4      	mov	ip, r4
 800e3f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f6:	4760      	bx	ip
 800e3f8:	f000 f80a 	bl	800e410 <__cxa_bad_typeid>
 800e3fc:	08011804 	.word	0x08011804
 800e400:	080116d0 	.word	0x080116d0
 800e404:	080118c8 	.word	0x080118c8
 800e408:	080118c0 	.word	0x080118c0
 800e40c:	080118bc 	.word	0x080118bc

0800e410 <__cxa_bad_typeid>:
 800e410:	b508      	push	{r3, lr}
 800e412:	f000 f800 	bl	800e416 <abort>

0800e416 <abort>:
 800e416:	b508      	push	{r3, lr}
 800e418:	2006      	movs	r0, #6
 800e41a:	f000 fed5 	bl	800f1c8 <raise>
 800e41e:	2001      	movs	r0, #1
 800e420:	f7f2 ff32 	bl	8001288 <_exit>

0800e424 <atexit>:
 800e424:	2300      	movs	r3, #0
 800e426:	4601      	mov	r1, r0
 800e428:	461a      	mov	r2, r3
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 bf3e 	b.w	800f2ac <__register_exitproc>

0800e430 <__errno>:
 800e430:	4b01      	ldr	r3, [pc, #4]	; (800e438 <__errno+0x8>)
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	24000020 	.word	0x24000020

0800e43c <std>:
 800e43c:	2300      	movs	r3, #0
 800e43e:	b510      	push	{r4, lr}
 800e440:	4604      	mov	r4, r0
 800e442:	e9c0 3300 	strd	r3, r3, [r0]
 800e446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e44a:	6083      	str	r3, [r0, #8]
 800e44c:	8181      	strh	r1, [r0, #12]
 800e44e:	6643      	str	r3, [r0, #100]	; 0x64
 800e450:	81c2      	strh	r2, [r0, #14]
 800e452:	6183      	str	r3, [r0, #24]
 800e454:	4619      	mov	r1, r3
 800e456:	2208      	movs	r2, #8
 800e458:	305c      	adds	r0, #92	; 0x5c
 800e45a:	f000 f935 	bl	800e6c8 <memset>
 800e45e:	4b05      	ldr	r3, [pc, #20]	; (800e474 <std+0x38>)
 800e460:	6263      	str	r3, [r4, #36]	; 0x24
 800e462:	4b05      	ldr	r3, [pc, #20]	; (800e478 <std+0x3c>)
 800e464:	62a3      	str	r3, [r4, #40]	; 0x28
 800e466:	4b05      	ldr	r3, [pc, #20]	; (800e47c <std+0x40>)
 800e468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e46a:	4b05      	ldr	r3, [pc, #20]	; (800e480 <std+0x44>)
 800e46c:	6224      	str	r4, [r4, #32]
 800e46e:	6323      	str	r3, [r4, #48]	; 0x30
 800e470:	bd10      	pop	{r4, pc}
 800e472:	bf00      	nop
 800e474:	0800f201 	.word	0x0800f201
 800e478:	0800f223 	.word	0x0800f223
 800e47c:	0800f25b 	.word	0x0800f25b
 800e480:	0800f27f 	.word	0x0800f27f

0800e484 <_cleanup_r>:
 800e484:	4901      	ldr	r1, [pc, #4]	; (800e48c <_cleanup_r+0x8>)
 800e486:	f000 b8af 	b.w	800e5e8 <_fwalk_reent>
 800e48a:	bf00      	nop
 800e48c:	08010091 	.word	0x08010091

0800e490 <__sfmoreglue>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	2268      	movs	r2, #104	; 0x68
 800e494:	1e4d      	subs	r5, r1, #1
 800e496:	4355      	muls	r5, r2
 800e498:	460e      	mov	r6, r1
 800e49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e49e:	f000 f93b 	bl	800e718 <_malloc_r>
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	b140      	cbz	r0, 800e4b8 <__sfmoreglue+0x28>
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e4ac:	300c      	adds	r0, #12
 800e4ae:	60a0      	str	r0, [r4, #8]
 800e4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4b4:	f000 f908 	bl	800e6c8 <memset>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	bd70      	pop	{r4, r5, r6, pc}

0800e4bc <__sfp_lock_acquire>:
 800e4bc:	4801      	ldr	r0, [pc, #4]	; (800e4c4 <__sfp_lock_acquire+0x8>)
 800e4be:	f000 b8d8 	b.w	800e672 <__retarget_lock_acquire_recursive>
 800e4c2:	bf00      	nop
 800e4c4:	240116ee 	.word	0x240116ee

0800e4c8 <__sfp_lock_release>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__sfp_lock_release+0x8>)
 800e4ca:	f000 b8d4 	b.w	800e676 <__retarget_lock_release_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	240116ee 	.word	0x240116ee

0800e4d4 <__sinit_lock_acquire>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__sinit_lock_acquire+0x8>)
 800e4d6:	f000 b8cc 	b.w	800e672 <__retarget_lock_acquire_recursive>
 800e4da:	bf00      	nop
 800e4dc:	240116ef 	.word	0x240116ef

0800e4e0 <__sinit_lock_release>:
 800e4e0:	4801      	ldr	r0, [pc, #4]	; (800e4e8 <__sinit_lock_release+0x8>)
 800e4e2:	f000 b8c8 	b.w	800e676 <__retarget_lock_release_recursive>
 800e4e6:	bf00      	nop
 800e4e8:	240116ef 	.word	0x240116ef

0800e4ec <__sinit>:
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	f7ff fff0 	bl	800e4d4 <__sinit_lock_acquire>
 800e4f4:	69a3      	ldr	r3, [r4, #24]
 800e4f6:	b11b      	cbz	r3, 800e500 <__sinit+0x14>
 800e4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4fc:	f7ff bff0 	b.w	800e4e0 <__sinit_lock_release>
 800e500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e504:	6523      	str	r3, [r4, #80]	; 0x50
 800e506:	4b13      	ldr	r3, [pc, #76]	; (800e554 <__sinit+0x68>)
 800e508:	4a13      	ldr	r2, [pc, #76]	; (800e558 <__sinit+0x6c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e50e:	42a3      	cmp	r3, r4
 800e510:	bf04      	itt	eq
 800e512:	2301      	moveq	r3, #1
 800e514:	61a3      	streq	r3, [r4, #24]
 800e516:	4620      	mov	r0, r4
 800e518:	f000 f820 	bl	800e55c <__sfp>
 800e51c:	6060      	str	r0, [r4, #4]
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 f81c 	bl	800e55c <__sfp>
 800e524:	60a0      	str	r0, [r4, #8]
 800e526:	4620      	mov	r0, r4
 800e528:	f000 f818 	bl	800e55c <__sfp>
 800e52c:	2200      	movs	r2, #0
 800e52e:	60e0      	str	r0, [r4, #12]
 800e530:	2104      	movs	r1, #4
 800e532:	6860      	ldr	r0, [r4, #4]
 800e534:	f7ff ff82 	bl	800e43c <std>
 800e538:	68a0      	ldr	r0, [r4, #8]
 800e53a:	2201      	movs	r2, #1
 800e53c:	2109      	movs	r1, #9
 800e53e:	f7ff ff7d 	bl	800e43c <std>
 800e542:	68e0      	ldr	r0, [r4, #12]
 800e544:	2202      	movs	r2, #2
 800e546:	2112      	movs	r1, #18
 800e548:	f7ff ff78 	bl	800e43c <std>
 800e54c:	2301      	movs	r3, #1
 800e54e:	61a3      	str	r3, [r4, #24]
 800e550:	e7d2      	b.n	800e4f8 <__sinit+0xc>
 800e552:	bf00      	nop
 800e554:	08011964 	.word	0x08011964
 800e558:	0800e485 	.word	0x0800e485

0800e55c <__sfp>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	4607      	mov	r7, r0
 800e560:	f7ff ffac 	bl	800e4bc <__sfp_lock_acquire>
 800e564:	4b1e      	ldr	r3, [pc, #120]	; (800e5e0 <__sfp+0x84>)
 800e566:	681e      	ldr	r6, [r3, #0]
 800e568:	69b3      	ldr	r3, [r6, #24]
 800e56a:	b913      	cbnz	r3, 800e572 <__sfp+0x16>
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7ff ffbd 	bl	800e4ec <__sinit>
 800e572:	3648      	adds	r6, #72	; 0x48
 800e574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e578:	3b01      	subs	r3, #1
 800e57a:	d503      	bpl.n	800e584 <__sfp+0x28>
 800e57c:	6833      	ldr	r3, [r6, #0]
 800e57e:	b30b      	cbz	r3, 800e5c4 <__sfp+0x68>
 800e580:	6836      	ldr	r6, [r6, #0]
 800e582:	e7f7      	b.n	800e574 <__sfp+0x18>
 800e584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e588:	b9d5      	cbnz	r5, 800e5c0 <__sfp+0x64>
 800e58a:	4b16      	ldr	r3, [pc, #88]	; (800e5e4 <__sfp+0x88>)
 800e58c:	60e3      	str	r3, [r4, #12]
 800e58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e592:	6665      	str	r5, [r4, #100]	; 0x64
 800e594:	f000 f86c 	bl	800e670 <__retarget_lock_init_recursive>
 800e598:	f7ff ff96 	bl	800e4c8 <__sfp_lock_release>
 800e59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5a4:	6025      	str	r5, [r4, #0]
 800e5a6:	61a5      	str	r5, [r4, #24]
 800e5a8:	2208      	movs	r2, #8
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5b0:	f000 f88a 	bl	800e6c8 <memset>
 800e5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5bc:	4620      	mov	r0, r4
 800e5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c0:	3468      	adds	r4, #104	; 0x68
 800e5c2:	e7d9      	b.n	800e578 <__sfp+0x1c>
 800e5c4:	2104      	movs	r1, #4
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f7ff ff62 	bl	800e490 <__sfmoreglue>
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	6030      	str	r0, [r6, #0]
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d1d5      	bne.n	800e580 <__sfp+0x24>
 800e5d4:	f7ff ff78 	bl	800e4c8 <__sfp_lock_release>
 800e5d8:	230c      	movs	r3, #12
 800e5da:	603b      	str	r3, [r7, #0]
 800e5dc:	e7ee      	b.n	800e5bc <__sfp+0x60>
 800e5de:	bf00      	nop
 800e5e0:	08011964 	.word	0x08011964
 800e5e4:	ffff0001 	.word	0xffff0001

0800e5e8 <_fwalk_reent>:
 800e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	4688      	mov	r8, r1
 800e5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5f4:	2700      	movs	r7, #0
 800e5f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5fa:	f1b9 0901 	subs.w	r9, r9, #1
 800e5fe:	d505      	bpl.n	800e60c <_fwalk_reent+0x24>
 800e600:	6824      	ldr	r4, [r4, #0]
 800e602:	2c00      	cmp	r4, #0
 800e604:	d1f7      	bne.n	800e5f6 <_fwalk_reent+0xe>
 800e606:	4638      	mov	r0, r7
 800e608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e60c:	89ab      	ldrh	r3, [r5, #12]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d907      	bls.n	800e622 <_fwalk_reent+0x3a>
 800e612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e616:	3301      	adds	r3, #1
 800e618:	d003      	beq.n	800e622 <_fwalk_reent+0x3a>
 800e61a:	4629      	mov	r1, r5
 800e61c:	4630      	mov	r0, r6
 800e61e:	47c0      	blx	r8
 800e620:	4307      	orrs	r7, r0
 800e622:	3568      	adds	r5, #104	; 0x68
 800e624:	e7e9      	b.n	800e5fa <_fwalk_reent+0x12>
	...

0800e628 <__libc_init_array>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	4d0d      	ldr	r5, [pc, #52]	; (800e660 <__libc_init_array+0x38>)
 800e62c:	4c0d      	ldr	r4, [pc, #52]	; (800e664 <__libc_init_array+0x3c>)
 800e62e:	1b64      	subs	r4, r4, r5
 800e630:	10a4      	asrs	r4, r4, #2
 800e632:	2600      	movs	r6, #0
 800e634:	42a6      	cmp	r6, r4
 800e636:	d109      	bne.n	800e64c <__libc_init_array+0x24>
 800e638:	4d0b      	ldr	r5, [pc, #44]	; (800e668 <__libc_init_array+0x40>)
 800e63a:	4c0c      	ldr	r4, [pc, #48]	; (800e66c <__libc_init_array+0x44>)
 800e63c:	f002 fc78 	bl	8010f30 <_init>
 800e640:	1b64      	subs	r4, r4, r5
 800e642:	10a4      	asrs	r4, r4, #2
 800e644:	2600      	movs	r6, #0
 800e646:	42a6      	cmp	r6, r4
 800e648:	d105      	bne.n	800e656 <__libc_init_array+0x2e>
 800e64a:	bd70      	pop	{r4, r5, r6, pc}
 800e64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e650:	4798      	blx	r3
 800e652:	3601      	adds	r6, #1
 800e654:	e7ee      	b.n	800e634 <__libc_init_array+0xc>
 800e656:	f855 3b04 	ldr.w	r3, [r5], #4
 800e65a:	4798      	blx	r3
 800e65c:	3601      	adds	r6, #1
 800e65e:	e7f2      	b.n	800e646 <__libc_init_array+0x1e>
 800e660:	08011ce4 	.word	0x08011ce4
 800e664:	08011ce4 	.word	0x08011ce4
 800e668:	08011ce4 	.word	0x08011ce4
 800e66c:	08011cec 	.word	0x08011cec

0800e670 <__retarget_lock_init_recursive>:
 800e670:	4770      	bx	lr

0800e672 <__retarget_lock_acquire_recursive>:
 800e672:	4770      	bx	lr

0800e674 <__retarget_lock_release>:
 800e674:	4770      	bx	lr

0800e676 <__retarget_lock_release_recursive>:
 800e676:	4770      	bx	lr

0800e678 <memcpy>:
 800e678:	440a      	add	r2, r1
 800e67a:	4291      	cmp	r1, r2
 800e67c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e680:	d100      	bne.n	800e684 <memcpy+0xc>
 800e682:	4770      	bx	lr
 800e684:	b510      	push	{r4, lr}
 800e686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e68a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e68e:	4291      	cmp	r1, r2
 800e690:	d1f9      	bne.n	800e686 <memcpy+0xe>
 800e692:	bd10      	pop	{r4, pc}

0800e694 <memmove>:
 800e694:	4288      	cmp	r0, r1
 800e696:	b510      	push	{r4, lr}
 800e698:	eb01 0402 	add.w	r4, r1, r2
 800e69c:	d902      	bls.n	800e6a4 <memmove+0x10>
 800e69e:	4284      	cmp	r4, r0
 800e6a0:	4623      	mov	r3, r4
 800e6a2:	d807      	bhi.n	800e6b4 <memmove+0x20>
 800e6a4:	1e43      	subs	r3, r0, #1
 800e6a6:	42a1      	cmp	r1, r4
 800e6a8:	d008      	beq.n	800e6bc <memmove+0x28>
 800e6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6b2:	e7f8      	b.n	800e6a6 <memmove+0x12>
 800e6b4:	4402      	add	r2, r0
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	428a      	cmp	r2, r1
 800e6ba:	d100      	bne.n	800e6be <memmove+0x2a>
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6c6:	e7f7      	b.n	800e6b8 <memmove+0x24>

0800e6c8 <memset>:
 800e6c8:	4402      	add	r2, r0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d100      	bne.n	800e6d2 <memset+0xa>
 800e6d0:	4770      	bx	lr
 800e6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e6d6:	e7f9      	b.n	800e6cc <memset+0x4>

0800e6d8 <sbrk_aligned>:
 800e6d8:	b570      	push	{r4, r5, r6, lr}
 800e6da:	4e0e      	ldr	r6, [pc, #56]	; (800e714 <sbrk_aligned+0x3c>)
 800e6dc:	460c      	mov	r4, r1
 800e6de:	6831      	ldr	r1, [r6, #0]
 800e6e0:	4605      	mov	r5, r0
 800e6e2:	b911      	cbnz	r1, 800e6ea <sbrk_aligned+0x12>
 800e6e4:	f000 fd38 	bl	800f158 <_sbrk_r>
 800e6e8:	6030      	str	r0, [r6, #0]
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f000 fd33 	bl	800f158 <_sbrk_r>
 800e6f2:	1c43      	adds	r3, r0, #1
 800e6f4:	d00a      	beq.n	800e70c <sbrk_aligned+0x34>
 800e6f6:	1cc4      	adds	r4, r0, #3
 800e6f8:	f024 0403 	bic.w	r4, r4, #3
 800e6fc:	42a0      	cmp	r0, r4
 800e6fe:	d007      	beq.n	800e710 <sbrk_aligned+0x38>
 800e700:	1a21      	subs	r1, r4, r0
 800e702:	4628      	mov	r0, r5
 800e704:	f000 fd28 	bl	800f158 <_sbrk_r>
 800e708:	3001      	adds	r0, #1
 800e70a:	d101      	bne.n	800e710 <sbrk_aligned+0x38>
 800e70c:	f04f 34ff 	mov.w	r4, #4294967295
 800e710:	4620      	mov	r0, r4
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	240116f4 	.word	0x240116f4

0800e718 <_malloc_r>:
 800e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71c:	1ccd      	adds	r5, r1, #3
 800e71e:	f025 0503 	bic.w	r5, r5, #3
 800e722:	3508      	adds	r5, #8
 800e724:	2d0c      	cmp	r5, #12
 800e726:	bf38      	it	cc
 800e728:	250c      	movcc	r5, #12
 800e72a:	2d00      	cmp	r5, #0
 800e72c:	4607      	mov	r7, r0
 800e72e:	db01      	blt.n	800e734 <_malloc_r+0x1c>
 800e730:	42a9      	cmp	r1, r5
 800e732:	d905      	bls.n	800e740 <_malloc_r+0x28>
 800e734:	230c      	movs	r3, #12
 800e736:	603b      	str	r3, [r7, #0]
 800e738:	2600      	movs	r6, #0
 800e73a:	4630      	mov	r0, r6
 800e73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e740:	4e2e      	ldr	r6, [pc, #184]	; (800e7fc <_malloc_r+0xe4>)
 800e742:	f001 fcff 	bl	8010144 <__malloc_lock>
 800e746:	6833      	ldr	r3, [r6, #0]
 800e748:	461c      	mov	r4, r3
 800e74a:	bb34      	cbnz	r4, 800e79a <_malloc_r+0x82>
 800e74c:	4629      	mov	r1, r5
 800e74e:	4638      	mov	r0, r7
 800e750:	f7ff ffc2 	bl	800e6d8 <sbrk_aligned>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	4604      	mov	r4, r0
 800e758:	d14d      	bne.n	800e7f6 <_malloc_r+0xde>
 800e75a:	6834      	ldr	r4, [r6, #0]
 800e75c:	4626      	mov	r6, r4
 800e75e:	2e00      	cmp	r6, #0
 800e760:	d140      	bne.n	800e7e4 <_malloc_r+0xcc>
 800e762:	6823      	ldr	r3, [r4, #0]
 800e764:	4631      	mov	r1, r6
 800e766:	4638      	mov	r0, r7
 800e768:	eb04 0803 	add.w	r8, r4, r3
 800e76c:	f000 fcf4 	bl	800f158 <_sbrk_r>
 800e770:	4580      	cmp	r8, r0
 800e772:	d13a      	bne.n	800e7ea <_malloc_r+0xd2>
 800e774:	6821      	ldr	r1, [r4, #0]
 800e776:	3503      	adds	r5, #3
 800e778:	1a6d      	subs	r5, r5, r1
 800e77a:	f025 0503 	bic.w	r5, r5, #3
 800e77e:	3508      	adds	r5, #8
 800e780:	2d0c      	cmp	r5, #12
 800e782:	bf38      	it	cc
 800e784:	250c      	movcc	r5, #12
 800e786:	4629      	mov	r1, r5
 800e788:	4638      	mov	r0, r7
 800e78a:	f7ff ffa5 	bl	800e6d8 <sbrk_aligned>
 800e78e:	3001      	adds	r0, #1
 800e790:	d02b      	beq.n	800e7ea <_malloc_r+0xd2>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	442b      	add	r3, r5
 800e796:	6023      	str	r3, [r4, #0]
 800e798:	e00e      	b.n	800e7b8 <_malloc_r+0xa0>
 800e79a:	6822      	ldr	r2, [r4, #0]
 800e79c:	1b52      	subs	r2, r2, r5
 800e79e:	d41e      	bmi.n	800e7de <_malloc_r+0xc6>
 800e7a0:	2a0b      	cmp	r2, #11
 800e7a2:	d916      	bls.n	800e7d2 <_malloc_r+0xba>
 800e7a4:	1961      	adds	r1, r4, r5
 800e7a6:	42a3      	cmp	r3, r4
 800e7a8:	6025      	str	r5, [r4, #0]
 800e7aa:	bf18      	it	ne
 800e7ac:	6059      	strne	r1, [r3, #4]
 800e7ae:	6863      	ldr	r3, [r4, #4]
 800e7b0:	bf08      	it	eq
 800e7b2:	6031      	streq	r1, [r6, #0]
 800e7b4:	5162      	str	r2, [r4, r5]
 800e7b6:	604b      	str	r3, [r1, #4]
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f104 060b 	add.w	r6, r4, #11
 800e7be:	f001 fcc7 	bl	8010150 <__malloc_unlock>
 800e7c2:	f026 0607 	bic.w	r6, r6, #7
 800e7c6:	1d23      	adds	r3, r4, #4
 800e7c8:	1af2      	subs	r2, r6, r3
 800e7ca:	d0b6      	beq.n	800e73a <_malloc_r+0x22>
 800e7cc:	1b9b      	subs	r3, r3, r6
 800e7ce:	50a3      	str	r3, [r4, r2]
 800e7d0:	e7b3      	b.n	800e73a <_malloc_r+0x22>
 800e7d2:	6862      	ldr	r2, [r4, #4]
 800e7d4:	42a3      	cmp	r3, r4
 800e7d6:	bf0c      	ite	eq
 800e7d8:	6032      	streq	r2, [r6, #0]
 800e7da:	605a      	strne	r2, [r3, #4]
 800e7dc:	e7ec      	b.n	800e7b8 <_malloc_r+0xa0>
 800e7de:	4623      	mov	r3, r4
 800e7e0:	6864      	ldr	r4, [r4, #4]
 800e7e2:	e7b2      	b.n	800e74a <_malloc_r+0x32>
 800e7e4:	4634      	mov	r4, r6
 800e7e6:	6876      	ldr	r6, [r6, #4]
 800e7e8:	e7b9      	b.n	800e75e <_malloc_r+0x46>
 800e7ea:	230c      	movs	r3, #12
 800e7ec:	603b      	str	r3, [r7, #0]
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f001 fcae 	bl	8010150 <__malloc_unlock>
 800e7f4:	e7a1      	b.n	800e73a <_malloc_r+0x22>
 800e7f6:	6025      	str	r5, [r4, #0]
 800e7f8:	e7de      	b.n	800e7b8 <_malloc_r+0xa0>
 800e7fa:	bf00      	nop
 800e7fc:	240116f0 	.word	0x240116f0

0800e800 <__cvt>:
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	ed2d 8b02 	vpush	{d8}
 800e806:	eeb0 8b40 	vmov.f64	d8, d0
 800e80a:	b085      	sub	sp, #20
 800e80c:	4617      	mov	r7, r2
 800e80e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e810:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e812:	ee18 2a90 	vmov	r2, s17
 800e816:	f025 0520 	bic.w	r5, r5, #32
 800e81a:	2a00      	cmp	r2, #0
 800e81c:	bfb6      	itet	lt
 800e81e:	222d      	movlt	r2, #45	; 0x2d
 800e820:	2200      	movge	r2, #0
 800e822:	eeb1 8b40 	vneglt.f64	d8, d0
 800e826:	2d46      	cmp	r5, #70	; 0x46
 800e828:	460c      	mov	r4, r1
 800e82a:	701a      	strb	r2, [r3, #0]
 800e82c:	d004      	beq.n	800e838 <__cvt+0x38>
 800e82e:	2d45      	cmp	r5, #69	; 0x45
 800e830:	d100      	bne.n	800e834 <__cvt+0x34>
 800e832:	3401      	adds	r4, #1
 800e834:	2102      	movs	r1, #2
 800e836:	e000      	b.n	800e83a <__cvt+0x3a>
 800e838:	2103      	movs	r1, #3
 800e83a:	ab03      	add	r3, sp, #12
 800e83c:	9301      	str	r3, [sp, #4]
 800e83e:	ab02      	add	r3, sp, #8
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	4622      	mov	r2, r4
 800e844:	4633      	mov	r3, r6
 800e846:	eeb0 0b48 	vmov.f64	d0, d8
 800e84a:	f000 fe2d 	bl	800f4a8 <_dtoa_r>
 800e84e:	2d47      	cmp	r5, #71	; 0x47
 800e850:	d101      	bne.n	800e856 <__cvt+0x56>
 800e852:	07fb      	lsls	r3, r7, #31
 800e854:	d51a      	bpl.n	800e88c <__cvt+0x8c>
 800e856:	2d46      	cmp	r5, #70	; 0x46
 800e858:	eb00 0204 	add.w	r2, r0, r4
 800e85c:	d10c      	bne.n	800e878 <__cvt+0x78>
 800e85e:	7803      	ldrb	r3, [r0, #0]
 800e860:	2b30      	cmp	r3, #48	; 0x30
 800e862:	d107      	bne.n	800e874 <__cvt+0x74>
 800e864:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86c:	bf1c      	itt	ne
 800e86e:	f1c4 0401 	rsbne	r4, r4, #1
 800e872:	6034      	strne	r4, [r6, #0]
 800e874:	6833      	ldr	r3, [r6, #0]
 800e876:	441a      	add	r2, r3
 800e878:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e880:	bf08      	it	eq
 800e882:	9203      	streq	r2, [sp, #12]
 800e884:	2130      	movs	r1, #48	; 0x30
 800e886:	9b03      	ldr	r3, [sp, #12]
 800e888:	4293      	cmp	r3, r2
 800e88a:	d307      	bcc.n	800e89c <__cvt+0x9c>
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e890:	1a1b      	subs	r3, r3, r0
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	b005      	add	sp, #20
 800e896:	ecbd 8b02 	vpop	{d8}
 800e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89c:	1c5c      	adds	r4, r3, #1
 800e89e:	9403      	str	r4, [sp, #12]
 800e8a0:	7019      	strb	r1, [r3, #0]
 800e8a2:	e7f0      	b.n	800e886 <__cvt+0x86>

0800e8a4 <__exponent>:
 800e8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2900      	cmp	r1, #0
 800e8aa:	bfb8      	it	lt
 800e8ac:	4249      	neglt	r1, r1
 800e8ae:	f803 2b02 	strb.w	r2, [r3], #2
 800e8b2:	bfb4      	ite	lt
 800e8b4:	222d      	movlt	r2, #45	; 0x2d
 800e8b6:	222b      	movge	r2, #43	; 0x2b
 800e8b8:	2909      	cmp	r1, #9
 800e8ba:	7042      	strb	r2, [r0, #1]
 800e8bc:	dd2a      	ble.n	800e914 <__exponent+0x70>
 800e8be:	f10d 0407 	add.w	r4, sp, #7
 800e8c2:	46a4      	mov	ip, r4
 800e8c4:	270a      	movs	r7, #10
 800e8c6:	46a6      	mov	lr, r4
 800e8c8:	460a      	mov	r2, r1
 800e8ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800e8ce:	fb07 1516 	mls	r5, r7, r6, r1
 800e8d2:	3530      	adds	r5, #48	; 0x30
 800e8d4:	2a63      	cmp	r2, #99	; 0x63
 800e8d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e8da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e8de:	4631      	mov	r1, r6
 800e8e0:	dcf1      	bgt.n	800e8c6 <__exponent+0x22>
 800e8e2:	3130      	adds	r1, #48	; 0x30
 800e8e4:	f1ae 0502 	sub.w	r5, lr, #2
 800e8e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e8ec:	1c44      	adds	r4, r0, #1
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	4561      	cmp	r1, ip
 800e8f2:	d30a      	bcc.n	800e90a <__exponent+0x66>
 800e8f4:	f10d 0209 	add.w	r2, sp, #9
 800e8f8:	eba2 020e 	sub.w	r2, r2, lr
 800e8fc:	4565      	cmp	r5, ip
 800e8fe:	bf88      	it	hi
 800e900:	2200      	movhi	r2, #0
 800e902:	4413      	add	r3, r2
 800e904:	1a18      	subs	r0, r3, r0
 800e906:	b003      	add	sp, #12
 800e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e90e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e912:	e7ed      	b.n	800e8f0 <__exponent+0x4c>
 800e914:	2330      	movs	r3, #48	; 0x30
 800e916:	3130      	adds	r1, #48	; 0x30
 800e918:	7083      	strb	r3, [r0, #2]
 800e91a:	70c1      	strb	r1, [r0, #3]
 800e91c:	1d03      	adds	r3, r0, #4
 800e91e:	e7f1      	b.n	800e904 <__exponent+0x60>

0800e920 <_printf_float>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	b08b      	sub	sp, #44	; 0x2c
 800e926:	460c      	mov	r4, r1
 800e928:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e92c:	4616      	mov	r6, r2
 800e92e:	461f      	mov	r7, r3
 800e930:	4605      	mov	r5, r0
 800e932:	f001 fbe9 	bl	8010108 <_localeconv_r>
 800e936:	f8d0 b000 	ldr.w	fp, [r0]
 800e93a:	4658      	mov	r0, fp
 800e93c:	f7f1 fcda 	bl	80002f4 <strlen>
 800e940:	2300      	movs	r3, #0
 800e942:	9308      	str	r3, [sp, #32]
 800e944:	f8d8 3000 	ldr.w	r3, [r8]
 800e948:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e94c:	6822      	ldr	r2, [r4, #0]
 800e94e:	3307      	adds	r3, #7
 800e950:	f023 0307 	bic.w	r3, r3, #7
 800e954:	f103 0108 	add.w	r1, r3, #8
 800e958:	f8c8 1000 	str.w	r1, [r8]
 800e95c:	4682      	mov	sl, r0
 800e95e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e962:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e966:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ebc8 <_printf_float+0x2a8>
 800e96a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e96e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e972:	eeb4 6b47 	vcmp.f64	d6, d7
 800e976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97a:	dd24      	ble.n	800e9c6 <_printf_float+0xa6>
 800e97c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e984:	d502      	bpl.n	800e98c <_printf_float+0x6c>
 800e986:	232d      	movs	r3, #45	; 0x2d
 800e988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e98c:	4b90      	ldr	r3, [pc, #576]	; (800ebd0 <_printf_float+0x2b0>)
 800e98e:	4891      	ldr	r0, [pc, #580]	; (800ebd4 <_printf_float+0x2b4>)
 800e990:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e994:	bf94      	ite	ls
 800e996:	4698      	movls	r8, r3
 800e998:	4680      	movhi	r8, r0
 800e99a:	2303      	movs	r3, #3
 800e99c:	6123      	str	r3, [r4, #16]
 800e99e:	f022 0204 	bic.w	r2, r2, #4
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	6022      	str	r2, [r4, #0]
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	9700      	str	r7, [sp, #0]
 800e9aa:	4633      	mov	r3, r6
 800e9ac:	aa09      	add	r2, sp, #36	; 0x24
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f000 f9d3 	bl	800ed5c <_printf_common>
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	f040 808a 	bne.w	800ead0 <_printf_float+0x1b0>
 800e9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c0:	b00b      	add	sp, #44	; 0x2c
 800e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ce:	d709      	bvc.n	800e9e4 <_printf_float+0xc4>
 800e9d0:	ee10 3a90 	vmov	r3, s1
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfbc      	itt	lt
 800e9d8:	232d      	movlt	r3, #45	; 0x2d
 800e9da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e9de:	487e      	ldr	r0, [pc, #504]	; (800ebd8 <_printf_float+0x2b8>)
 800e9e0:	4b7e      	ldr	r3, [pc, #504]	; (800ebdc <_printf_float+0x2bc>)
 800e9e2:	e7d5      	b.n	800e990 <_printf_float+0x70>
 800e9e4:	6863      	ldr	r3, [r4, #4]
 800e9e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e9ea:	9104      	str	r1, [sp, #16]
 800e9ec:	1c59      	adds	r1, r3, #1
 800e9ee:	d13c      	bne.n	800ea6a <_printf_float+0x14a>
 800e9f0:	2306      	movs	r3, #6
 800e9f2:	6063      	str	r3, [r4, #4]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9303      	str	r3, [sp, #12]
 800e9f8:	ab08      	add	r3, sp, #32
 800e9fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e9fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea02:	ab07      	add	r3, sp, #28
 800ea04:	6861      	ldr	r1, [r4, #4]
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	6022      	str	r2, [r4, #0]
 800ea0a:	f10d 031b 	add.w	r3, sp, #27
 800ea0e:	4628      	mov	r0, r5
 800ea10:	f7ff fef6 	bl	800e800 <__cvt>
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	9907      	ldr	r1, [sp, #28]
 800ea18:	2b47      	cmp	r3, #71	; 0x47
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	d108      	bne.n	800ea30 <_printf_float+0x110>
 800ea1e:	1cc8      	adds	r0, r1, #3
 800ea20:	db02      	blt.n	800ea28 <_printf_float+0x108>
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	4299      	cmp	r1, r3
 800ea26:	dd41      	ble.n	800eaac <_printf_float+0x18c>
 800ea28:	f1a9 0902 	sub.w	r9, r9, #2
 800ea2c:	fa5f f989 	uxtb.w	r9, r9
 800ea30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ea34:	d820      	bhi.n	800ea78 <_printf_float+0x158>
 800ea36:	3901      	subs	r1, #1
 800ea38:	464a      	mov	r2, r9
 800ea3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea3e:	9107      	str	r1, [sp, #28]
 800ea40:	f7ff ff30 	bl	800e8a4 <__exponent>
 800ea44:	9a08      	ldr	r2, [sp, #32]
 800ea46:	9004      	str	r0, [sp, #16]
 800ea48:	1813      	adds	r3, r2, r0
 800ea4a:	2a01      	cmp	r2, #1
 800ea4c:	6123      	str	r3, [r4, #16]
 800ea4e:	dc02      	bgt.n	800ea56 <_printf_float+0x136>
 800ea50:	6822      	ldr	r2, [r4, #0]
 800ea52:	07d2      	lsls	r2, r2, #31
 800ea54:	d501      	bpl.n	800ea5a <_printf_float+0x13a>
 800ea56:	3301      	adds	r3, #1
 800ea58:	6123      	str	r3, [r4, #16]
 800ea5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0a2      	beq.n	800e9a8 <_printf_float+0x88>
 800ea62:	232d      	movs	r3, #45	; 0x2d
 800ea64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea68:	e79e      	b.n	800e9a8 <_printf_float+0x88>
 800ea6a:	9904      	ldr	r1, [sp, #16]
 800ea6c:	2947      	cmp	r1, #71	; 0x47
 800ea6e:	d1c1      	bne.n	800e9f4 <_printf_float+0xd4>
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1bf      	bne.n	800e9f4 <_printf_float+0xd4>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e7bc      	b.n	800e9f2 <_printf_float+0xd2>
 800ea78:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ea7c:	d118      	bne.n	800eab0 <_printf_float+0x190>
 800ea7e:	2900      	cmp	r1, #0
 800ea80:	6863      	ldr	r3, [r4, #4]
 800ea82:	dd0b      	ble.n	800ea9c <_printf_float+0x17c>
 800ea84:	6121      	str	r1, [r4, #16]
 800ea86:	b913      	cbnz	r3, 800ea8e <_printf_float+0x16e>
 800ea88:	6822      	ldr	r2, [r4, #0]
 800ea8a:	07d0      	lsls	r0, r2, #31
 800ea8c:	d502      	bpl.n	800ea94 <_printf_float+0x174>
 800ea8e:	3301      	adds	r3, #1
 800ea90:	440b      	add	r3, r1
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	2300      	movs	r3, #0
 800ea96:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea98:	9304      	str	r3, [sp, #16]
 800ea9a:	e7de      	b.n	800ea5a <_printf_float+0x13a>
 800ea9c:	b913      	cbnz	r3, 800eaa4 <_printf_float+0x184>
 800ea9e:	6822      	ldr	r2, [r4, #0]
 800eaa0:	07d2      	lsls	r2, r2, #31
 800eaa2:	d501      	bpl.n	800eaa8 <_printf_float+0x188>
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	e7f4      	b.n	800ea92 <_printf_float+0x172>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e7f2      	b.n	800ea92 <_printf_float+0x172>
 800eaac:	f04f 0967 	mov.w	r9, #103	; 0x67
 800eab0:	9b08      	ldr	r3, [sp, #32]
 800eab2:	4299      	cmp	r1, r3
 800eab4:	db05      	blt.n	800eac2 <_printf_float+0x1a2>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	6121      	str	r1, [r4, #16]
 800eaba:	07d8      	lsls	r0, r3, #31
 800eabc:	d5ea      	bpl.n	800ea94 <_printf_float+0x174>
 800eabe:	1c4b      	adds	r3, r1, #1
 800eac0:	e7e7      	b.n	800ea92 <_printf_float+0x172>
 800eac2:	2900      	cmp	r1, #0
 800eac4:	bfd4      	ite	le
 800eac6:	f1c1 0202 	rsble	r2, r1, #2
 800eaca:	2201      	movgt	r2, #1
 800eacc:	4413      	add	r3, r2
 800eace:	e7e0      	b.n	800ea92 <_printf_float+0x172>
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	055a      	lsls	r2, r3, #21
 800ead4:	d407      	bmi.n	800eae6 <_printf_float+0x1c6>
 800ead6:	6923      	ldr	r3, [r4, #16]
 800ead8:	4642      	mov	r2, r8
 800eada:	4631      	mov	r1, r6
 800eadc:	4628      	mov	r0, r5
 800eade:	47b8      	blx	r7
 800eae0:	3001      	adds	r0, #1
 800eae2:	d12a      	bne.n	800eb3a <_printf_float+0x21a>
 800eae4:	e76a      	b.n	800e9bc <_printf_float+0x9c>
 800eae6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eaea:	f240 80e2 	bls.w	800ecb2 <_printf_float+0x392>
 800eaee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eaf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafa:	d133      	bne.n	800eb64 <_printf_float+0x244>
 800eafc:	4a38      	ldr	r2, [pc, #224]	; (800ebe0 <_printf_float+0x2c0>)
 800eafe:	2301      	movs	r3, #1
 800eb00:	4631      	mov	r1, r6
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b8      	blx	r7
 800eb06:	3001      	adds	r0, #1
 800eb08:	f43f af58 	beq.w	800e9bc <_printf_float+0x9c>
 800eb0c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	db02      	blt.n	800eb1a <_printf_float+0x1fa>
 800eb14:	6823      	ldr	r3, [r4, #0]
 800eb16:	07d8      	lsls	r0, r3, #31
 800eb18:	d50f      	bpl.n	800eb3a <_printf_float+0x21a>
 800eb1a:	4653      	mov	r3, sl
 800eb1c:	465a      	mov	r2, fp
 800eb1e:	4631      	mov	r1, r6
 800eb20:	4628      	mov	r0, r5
 800eb22:	47b8      	blx	r7
 800eb24:	3001      	adds	r0, #1
 800eb26:	f43f af49 	beq.w	800e9bc <_printf_float+0x9c>
 800eb2a:	f04f 0800 	mov.w	r8, #0
 800eb2e:	f104 091a 	add.w	r9, r4, #26
 800eb32:	9b08      	ldr	r3, [sp, #32]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	4543      	cmp	r3, r8
 800eb38:	dc09      	bgt.n	800eb4e <_printf_float+0x22e>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	079b      	lsls	r3, r3, #30
 800eb3e:	f100 8108 	bmi.w	800ed52 <_printf_float+0x432>
 800eb42:	68e0      	ldr	r0, [r4, #12]
 800eb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb46:	4298      	cmp	r0, r3
 800eb48:	bfb8      	it	lt
 800eb4a:	4618      	movlt	r0, r3
 800eb4c:	e738      	b.n	800e9c0 <_printf_float+0xa0>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	464a      	mov	r2, r9
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	f43f af2f 	beq.w	800e9bc <_printf_float+0x9c>
 800eb5e:	f108 0801 	add.w	r8, r8, #1
 800eb62:	e7e6      	b.n	800eb32 <_printf_float+0x212>
 800eb64:	9b07      	ldr	r3, [sp, #28]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	dc3c      	bgt.n	800ebe4 <_printf_float+0x2c4>
 800eb6a:	4a1d      	ldr	r2, [pc, #116]	; (800ebe0 <_printf_float+0x2c0>)
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	4631      	mov	r1, r6
 800eb70:	4628      	mov	r0, r5
 800eb72:	47b8      	blx	r7
 800eb74:	3001      	adds	r0, #1
 800eb76:	f43f af21 	beq.w	800e9bc <_printf_float+0x9c>
 800eb7a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	d102      	bne.n	800eb88 <_printf_float+0x268>
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	07d9      	lsls	r1, r3, #31
 800eb86:	d5d8      	bpl.n	800eb3a <_printf_float+0x21a>
 800eb88:	4653      	mov	r3, sl
 800eb8a:	465a      	mov	r2, fp
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b8      	blx	r7
 800eb92:	3001      	adds	r0, #1
 800eb94:	f43f af12 	beq.w	800e9bc <_printf_float+0x9c>
 800eb98:	f04f 0900 	mov.w	r9, #0
 800eb9c:	f104 0a1a 	add.w	sl, r4, #26
 800eba0:	9b07      	ldr	r3, [sp, #28]
 800eba2:	425b      	negs	r3, r3
 800eba4:	454b      	cmp	r3, r9
 800eba6:	dc01      	bgt.n	800ebac <_printf_float+0x28c>
 800eba8:	9b08      	ldr	r3, [sp, #32]
 800ebaa:	e795      	b.n	800ead8 <_printf_float+0x1b8>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f af00 	beq.w	800e9bc <_printf_float+0x9c>
 800ebbc:	f109 0901 	add.w	r9, r9, #1
 800ebc0:	e7ee      	b.n	800eba0 <_printf_float+0x280>
 800ebc2:	bf00      	nop
 800ebc4:	f3af 8000 	nop.w
 800ebc8:	ffffffff 	.word	0xffffffff
 800ebcc:	7fefffff 	.word	0x7fefffff
 800ebd0:	08011968 	.word	0x08011968
 800ebd4:	0801196c 	.word	0x0801196c
 800ebd8:	08011974 	.word	0x08011974
 800ebdc:	08011970 	.word	0x08011970
 800ebe0:	08011978 	.word	0x08011978
 800ebe4:	9a08      	ldr	r2, [sp, #32]
 800ebe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	bfa8      	it	ge
 800ebec:	461a      	movge	r2, r3
 800ebee:	2a00      	cmp	r2, #0
 800ebf0:	4691      	mov	r9, r2
 800ebf2:	dc38      	bgt.n	800ec66 <_printf_float+0x346>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9305      	str	r3, [sp, #20]
 800ebf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebfc:	f104 021a 	add.w	r2, r4, #26
 800ec00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec02:	9905      	ldr	r1, [sp, #20]
 800ec04:	9304      	str	r3, [sp, #16]
 800ec06:	eba3 0309 	sub.w	r3, r3, r9
 800ec0a:	428b      	cmp	r3, r1
 800ec0c:	dc33      	bgt.n	800ec76 <_printf_float+0x356>
 800ec0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	db3c      	blt.n	800ec90 <_printf_float+0x370>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	07da      	lsls	r2, r3, #31
 800ec1a:	d439      	bmi.n	800ec90 <_printf_float+0x370>
 800ec1c:	9b08      	ldr	r3, [sp, #32]
 800ec1e:	9a04      	ldr	r2, [sp, #16]
 800ec20:	9907      	ldr	r1, [sp, #28]
 800ec22:	1a9a      	subs	r2, r3, r2
 800ec24:	eba3 0901 	sub.w	r9, r3, r1
 800ec28:	4591      	cmp	r9, r2
 800ec2a:	bfa8      	it	ge
 800ec2c:	4691      	movge	r9, r2
 800ec2e:	f1b9 0f00 	cmp.w	r9, #0
 800ec32:	dc35      	bgt.n	800eca0 <_printf_float+0x380>
 800ec34:	f04f 0800 	mov.w	r8, #0
 800ec38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec3c:	f104 0a1a 	add.w	sl, r4, #26
 800ec40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ec44:	1a9b      	subs	r3, r3, r2
 800ec46:	eba3 0309 	sub.w	r3, r3, r9
 800ec4a:	4543      	cmp	r3, r8
 800ec4c:	f77f af75 	ble.w	800eb3a <_printf_float+0x21a>
 800ec50:	2301      	movs	r3, #1
 800ec52:	4652      	mov	r2, sl
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b8      	blx	r7
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	f43f aeae 	beq.w	800e9bc <_printf_float+0x9c>
 800ec60:	f108 0801 	add.w	r8, r8, #1
 800ec64:	e7ec      	b.n	800ec40 <_printf_float+0x320>
 800ec66:	4613      	mov	r3, r2
 800ec68:	4631      	mov	r1, r6
 800ec6a:	4642      	mov	r2, r8
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d1bf      	bne.n	800ebf4 <_printf_float+0x2d4>
 800ec74:	e6a2      	b.n	800e9bc <_printf_float+0x9c>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	9204      	str	r2, [sp, #16]
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae9b 	beq.w	800e9bc <_printf_float+0x9c>
 800ec86:	9b05      	ldr	r3, [sp, #20]
 800ec88:	9a04      	ldr	r2, [sp, #16]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	9305      	str	r3, [sp, #20]
 800ec8e:	e7b7      	b.n	800ec00 <_printf_float+0x2e0>
 800ec90:	4653      	mov	r3, sl
 800ec92:	465a      	mov	r2, fp
 800ec94:	4631      	mov	r1, r6
 800ec96:	4628      	mov	r0, r5
 800ec98:	47b8      	blx	r7
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	d1be      	bne.n	800ec1c <_printf_float+0x2fc>
 800ec9e:	e68d      	b.n	800e9bc <_printf_float+0x9c>
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	464b      	mov	r3, r9
 800eca4:	4442      	add	r2, r8
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	d1c1      	bne.n	800ec34 <_printf_float+0x314>
 800ecb0:	e684      	b.n	800e9bc <_printf_float+0x9c>
 800ecb2:	9a08      	ldr	r2, [sp, #32]
 800ecb4:	2a01      	cmp	r2, #1
 800ecb6:	dc01      	bgt.n	800ecbc <_printf_float+0x39c>
 800ecb8:	07db      	lsls	r3, r3, #31
 800ecba:	d537      	bpl.n	800ed2c <_printf_float+0x40c>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	47b8      	blx	r7
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	f43f ae78 	beq.w	800e9bc <_printf_float+0x9c>
 800eccc:	4653      	mov	r3, sl
 800ecce:	465a      	mov	r2, fp
 800ecd0:	4631      	mov	r1, r6
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	47b8      	blx	r7
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	f43f ae70 	beq.w	800e9bc <_printf_float+0x9c>
 800ecdc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ece0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece8:	d01b      	beq.n	800ed22 <_printf_float+0x402>
 800ecea:	9b08      	ldr	r3, [sp, #32]
 800ecec:	f108 0201 	add.w	r2, r8, #1
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	47b8      	blx	r7
 800ecf8:	3001      	adds	r0, #1
 800ecfa:	d10e      	bne.n	800ed1a <_printf_float+0x3fa>
 800ecfc:	e65e      	b.n	800e9bc <_printf_float+0x9c>
 800ecfe:	2301      	movs	r3, #1
 800ed00:	464a      	mov	r2, r9
 800ed02:	4631      	mov	r1, r6
 800ed04:	4628      	mov	r0, r5
 800ed06:	47b8      	blx	r7
 800ed08:	3001      	adds	r0, #1
 800ed0a:	f43f ae57 	beq.w	800e9bc <_printf_float+0x9c>
 800ed0e:	f108 0801 	add.w	r8, r8, #1
 800ed12:	9b08      	ldr	r3, [sp, #32]
 800ed14:	3b01      	subs	r3, #1
 800ed16:	4543      	cmp	r3, r8
 800ed18:	dcf1      	bgt.n	800ecfe <_printf_float+0x3de>
 800ed1a:	9b04      	ldr	r3, [sp, #16]
 800ed1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed20:	e6db      	b.n	800eada <_printf_float+0x1ba>
 800ed22:	f04f 0800 	mov.w	r8, #0
 800ed26:	f104 091a 	add.w	r9, r4, #26
 800ed2a:	e7f2      	b.n	800ed12 <_printf_float+0x3f2>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4642      	mov	r2, r8
 800ed30:	e7df      	b.n	800ecf2 <_printf_float+0x3d2>
 800ed32:	2301      	movs	r3, #1
 800ed34:	464a      	mov	r2, r9
 800ed36:	4631      	mov	r1, r6
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f ae3d 	beq.w	800e9bc <_printf_float+0x9c>
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	68e3      	ldr	r3, [r4, #12]
 800ed48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed4a:	1a5b      	subs	r3, r3, r1
 800ed4c:	4543      	cmp	r3, r8
 800ed4e:	dcf0      	bgt.n	800ed32 <_printf_float+0x412>
 800ed50:	e6f7      	b.n	800eb42 <_printf_float+0x222>
 800ed52:	f04f 0800 	mov.w	r8, #0
 800ed56:	f104 0919 	add.w	r9, r4, #25
 800ed5a:	e7f4      	b.n	800ed46 <_printf_float+0x426>

0800ed5c <_printf_common>:
 800ed5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	4616      	mov	r6, r2
 800ed62:	4699      	mov	r9, r3
 800ed64:	688a      	ldr	r2, [r1, #8]
 800ed66:	690b      	ldr	r3, [r1, #16]
 800ed68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	bfb8      	it	lt
 800ed70:	4613      	movlt	r3, r2
 800ed72:	6033      	str	r3, [r6, #0]
 800ed74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed78:	4607      	mov	r7, r0
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	b10a      	cbz	r2, 800ed82 <_printf_common+0x26>
 800ed7e:	3301      	adds	r3, #1
 800ed80:	6033      	str	r3, [r6, #0]
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	0699      	lsls	r1, r3, #26
 800ed86:	bf42      	ittt	mi
 800ed88:	6833      	ldrmi	r3, [r6, #0]
 800ed8a:	3302      	addmi	r3, #2
 800ed8c:	6033      	strmi	r3, [r6, #0]
 800ed8e:	6825      	ldr	r5, [r4, #0]
 800ed90:	f015 0506 	ands.w	r5, r5, #6
 800ed94:	d106      	bne.n	800eda4 <_printf_common+0x48>
 800ed96:	f104 0a19 	add.w	sl, r4, #25
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	6832      	ldr	r2, [r6, #0]
 800ed9e:	1a9b      	subs	r3, r3, r2
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dc26      	bgt.n	800edf2 <_printf_common+0x96>
 800eda4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eda8:	1e13      	subs	r3, r2, #0
 800edaa:	6822      	ldr	r2, [r4, #0]
 800edac:	bf18      	it	ne
 800edae:	2301      	movne	r3, #1
 800edb0:	0692      	lsls	r2, r2, #26
 800edb2:	d42b      	bmi.n	800ee0c <_printf_common+0xb0>
 800edb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edb8:	4649      	mov	r1, r9
 800edba:	4638      	mov	r0, r7
 800edbc:	47c0      	blx	r8
 800edbe:	3001      	adds	r0, #1
 800edc0:	d01e      	beq.n	800ee00 <_printf_common+0xa4>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	68e5      	ldr	r5, [r4, #12]
 800edc6:	6832      	ldr	r2, [r6, #0]
 800edc8:	f003 0306 	and.w	r3, r3, #6
 800edcc:	2b04      	cmp	r3, #4
 800edce:	bf08      	it	eq
 800edd0:	1aad      	subeq	r5, r5, r2
 800edd2:	68a3      	ldr	r3, [r4, #8]
 800edd4:	6922      	ldr	r2, [r4, #16]
 800edd6:	bf0c      	ite	eq
 800edd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eddc:	2500      	movne	r5, #0
 800edde:	4293      	cmp	r3, r2
 800ede0:	bfc4      	itt	gt
 800ede2:	1a9b      	subgt	r3, r3, r2
 800ede4:	18ed      	addgt	r5, r5, r3
 800ede6:	2600      	movs	r6, #0
 800ede8:	341a      	adds	r4, #26
 800edea:	42b5      	cmp	r5, r6
 800edec:	d11a      	bne.n	800ee24 <_printf_common+0xc8>
 800edee:	2000      	movs	r0, #0
 800edf0:	e008      	b.n	800ee04 <_printf_common+0xa8>
 800edf2:	2301      	movs	r3, #1
 800edf4:	4652      	mov	r2, sl
 800edf6:	4649      	mov	r1, r9
 800edf8:	4638      	mov	r0, r7
 800edfa:	47c0      	blx	r8
 800edfc:	3001      	adds	r0, #1
 800edfe:	d103      	bne.n	800ee08 <_printf_common+0xac>
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295
 800ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee08:	3501      	adds	r5, #1
 800ee0a:	e7c6      	b.n	800ed9a <_printf_common+0x3e>
 800ee0c:	18e1      	adds	r1, r4, r3
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	2030      	movs	r0, #48	; 0x30
 800ee12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee16:	4422      	add	r2, r4
 800ee18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee20:	3302      	adds	r3, #2
 800ee22:	e7c7      	b.n	800edb4 <_printf_common+0x58>
 800ee24:	2301      	movs	r3, #1
 800ee26:	4622      	mov	r2, r4
 800ee28:	4649      	mov	r1, r9
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	47c0      	blx	r8
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d0e6      	beq.n	800ee00 <_printf_common+0xa4>
 800ee32:	3601      	adds	r6, #1
 800ee34:	e7d9      	b.n	800edea <_printf_common+0x8e>
	...

0800ee38 <_printf_i>:
 800ee38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	7e0f      	ldrb	r7, [r1, #24]
 800ee3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee40:	2f78      	cmp	r7, #120	; 0x78
 800ee42:	4691      	mov	r9, r2
 800ee44:	4680      	mov	r8, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	469a      	mov	sl, r3
 800ee4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee4e:	d807      	bhi.n	800ee60 <_printf_i+0x28>
 800ee50:	2f62      	cmp	r7, #98	; 0x62
 800ee52:	d80a      	bhi.n	800ee6a <_printf_i+0x32>
 800ee54:	2f00      	cmp	r7, #0
 800ee56:	f000 80d8 	beq.w	800f00a <_printf_i+0x1d2>
 800ee5a:	2f58      	cmp	r7, #88	; 0x58
 800ee5c:	f000 80a3 	beq.w	800efa6 <_printf_i+0x16e>
 800ee60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee68:	e03a      	b.n	800eee0 <_printf_i+0xa8>
 800ee6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee6e:	2b15      	cmp	r3, #21
 800ee70:	d8f6      	bhi.n	800ee60 <_printf_i+0x28>
 800ee72:	a101      	add	r1, pc, #4	; (adr r1, 800ee78 <_printf_i+0x40>)
 800ee74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee78:	0800eed1 	.word	0x0800eed1
 800ee7c:	0800eee5 	.word	0x0800eee5
 800ee80:	0800ee61 	.word	0x0800ee61
 800ee84:	0800ee61 	.word	0x0800ee61
 800ee88:	0800ee61 	.word	0x0800ee61
 800ee8c:	0800ee61 	.word	0x0800ee61
 800ee90:	0800eee5 	.word	0x0800eee5
 800ee94:	0800ee61 	.word	0x0800ee61
 800ee98:	0800ee61 	.word	0x0800ee61
 800ee9c:	0800ee61 	.word	0x0800ee61
 800eea0:	0800ee61 	.word	0x0800ee61
 800eea4:	0800eff1 	.word	0x0800eff1
 800eea8:	0800ef15 	.word	0x0800ef15
 800eeac:	0800efd3 	.word	0x0800efd3
 800eeb0:	0800ee61 	.word	0x0800ee61
 800eeb4:	0800ee61 	.word	0x0800ee61
 800eeb8:	0800f013 	.word	0x0800f013
 800eebc:	0800ee61 	.word	0x0800ee61
 800eec0:	0800ef15 	.word	0x0800ef15
 800eec4:	0800ee61 	.word	0x0800ee61
 800eec8:	0800ee61 	.word	0x0800ee61
 800eecc:	0800efdb 	.word	0x0800efdb
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	1d1a      	adds	r2, r3, #4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	602a      	str	r2, [r5, #0]
 800eed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eedc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eee0:	2301      	movs	r3, #1
 800eee2:	e0a3      	b.n	800f02c <_printf_i+0x1f4>
 800eee4:	6820      	ldr	r0, [r4, #0]
 800eee6:	6829      	ldr	r1, [r5, #0]
 800eee8:	0606      	lsls	r6, r0, #24
 800eeea:	f101 0304 	add.w	r3, r1, #4
 800eeee:	d50a      	bpl.n	800ef06 <_printf_i+0xce>
 800eef0:	680e      	ldr	r6, [r1, #0]
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	2e00      	cmp	r6, #0
 800eef6:	da03      	bge.n	800ef00 <_printf_i+0xc8>
 800eef8:	232d      	movs	r3, #45	; 0x2d
 800eefa:	4276      	negs	r6, r6
 800eefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef00:	485e      	ldr	r0, [pc, #376]	; (800f07c <_printf_i+0x244>)
 800ef02:	230a      	movs	r3, #10
 800ef04:	e019      	b.n	800ef3a <_printf_i+0x102>
 800ef06:	680e      	ldr	r6, [r1, #0]
 800ef08:	602b      	str	r3, [r5, #0]
 800ef0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef0e:	bf18      	it	ne
 800ef10:	b236      	sxthne	r6, r6
 800ef12:	e7ef      	b.n	800eef4 <_printf_i+0xbc>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	1d19      	adds	r1, r3, #4
 800ef1a:	6029      	str	r1, [r5, #0]
 800ef1c:	0601      	lsls	r1, r0, #24
 800ef1e:	d501      	bpl.n	800ef24 <_printf_i+0xec>
 800ef20:	681e      	ldr	r6, [r3, #0]
 800ef22:	e002      	b.n	800ef2a <_printf_i+0xf2>
 800ef24:	0646      	lsls	r6, r0, #25
 800ef26:	d5fb      	bpl.n	800ef20 <_printf_i+0xe8>
 800ef28:	881e      	ldrh	r6, [r3, #0]
 800ef2a:	4854      	ldr	r0, [pc, #336]	; (800f07c <_printf_i+0x244>)
 800ef2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ef2e:	bf0c      	ite	eq
 800ef30:	2308      	moveq	r3, #8
 800ef32:	230a      	movne	r3, #10
 800ef34:	2100      	movs	r1, #0
 800ef36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef3a:	6865      	ldr	r5, [r4, #4]
 800ef3c:	60a5      	str	r5, [r4, #8]
 800ef3e:	2d00      	cmp	r5, #0
 800ef40:	bfa2      	ittt	ge
 800ef42:	6821      	ldrge	r1, [r4, #0]
 800ef44:	f021 0104 	bicge.w	r1, r1, #4
 800ef48:	6021      	strge	r1, [r4, #0]
 800ef4a:	b90e      	cbnz	r6, 800ef50 <_printf_i+0x118>
 800ef4c:	2d00      	cmp	r5, #0
 800ef4e:	d04d      	beq.n	800efec <_printf_i+0x1b4>
 800ef50:	4615      	mov	r5, r2
 800ef52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef56:	fb03 6711 	mls	r7, r3, r1, r6
 800ef5a:	5dc7      	ldrb	r7, [r0, r7]
 800ef5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef60:	4637      	mov	r7, r6
 800ef62:	42bb      	cmp	r3, r7
 800ef64:	460e      	mov	r6, r1
 800ef66:	d9f4      	bls.n	800ef52 <_printf_i+0x11a>
 800ef68:	2b08      	cmp	r3, #8
 800ef6a:	d10b      	bne.n	800ef84 <_printf_i+0x14c>
 800ef6c:	6823      	ldr	r3, [r4, #0]
 800ef6e:	07de      	lsls	r6, r3, #31
 800ef70:	d508      	bpl.n	800ef84 <_printf_i+0x14c>
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	6861      	ldr	r1, [r4, #4]
 800ef76:	4299      	cmp	r1, r3
 800ef78:	bfde      	ittt	le
 800ef7a:	2330      	movle	r3, #48	; 0x30
 800ef7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef80:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef84:	1b52      	subs	r2, r2, r5
 800ef86:	6122      	str	r2, [r4, #16]
 800ef88:	f8cd a000 	str.w	sl, [sp]
 800ef8c:	464b      	mov	r3, r9
 800ef8e:	aa03      	add	r2, sp, #12
 800ef90:	4621      	mov	r1, r4
 800ef92:	4640      	mov	r0, r8
 800ef94:	f7ff fee2 	bl	800ed5c <_printf_common>
 800ef98:	3001      	adds	r0, #1
 800ef9a:	d14c      	bne.n	800f036 <_printf_i+0x1fe>
 800ef9c:	f04f 30ff 	mov.w	r0, #4294967295
 800efa0:	b004      	add	sp, #16
 800efa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa6:	4835      	ldr	r0, [pc, #212]	; (800f07c <_printf_i+0x244>)
 800efa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800efac:	6829      	ldr	r1, [r5, #0]
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800efb4:	6029      	str	r1, [r5, #0]
 800efb6:	061d      	lsls	r5, r3, #24
 800efb8:	d514      	bpl.n	800efe4 <_printf_i+0x1ac>
 800efba:	07df      	lsls	r7, r3, #31
 800efbc:	bf44      	itt	mi
 800efbe:	f043 0320 	orrmi.w	r3, r3, #32
 800efc2:	6023      	strmi	r3, [r4, #0]
 800efc4:	b91e      	cbnz	r6, 800efce <_printf_i+0x196>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	f023 0320 	bic.w	r3, r3, #32
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	2310      	movs	r3, #16
 800efd0:	e7b0      	b.n	800ef34 <_printf_i+0xfc>
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	f043 0320 	orr.w	r3, r3, #32
 800efd8:	6023      	str	r3, [r4, #0]
 800efda:	2378      	movs	r3, #120	; 0x78
 800efdc:	4828      	ldr	r0, [pc, #160]	; (800f080 <_printf_i+0x248>)
 800efde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efe2:	e7e3      	b.n	800efac <_printf_i+0x174>
 800efe4:	0659      	lsls	r1, r3, #25
 800efe6:	bf48      	it	mi
 800efe8:	b2b6      	uxthmi	r6, r6
 800efea:	e7e6      	b.n	800efba <_printf_i+0x182>
 800efec:	4615      	mov	r5, r2
 800efee:	e7bb      	b.n	800ef68 <_printf_i+0x130>
 800eff0:	682b      	ldr	r3, [r5, #0]
 800eff2:	6826      	ldr	r6, [r4, #0]
 800eff4:	6961      	ldr	r1, [r4, #20]
 800eff6:	1d18      	adds	r0, r3, #4
 800eff8:	6028      	str	r0, [r5, #0]
 800effa:	0635      	lsls	r5, r6, #24
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	d501      	bpl.n	800f004 <_printf_i+0x1cc>
 800f000:	6019      	str	r1, [r3, #0]
 800f002:	e002      	b.n	800f00a <_printf_i+0x1d2>
 800f004:	0670      	lsls	r0, r6, #25
 800f006:	d5fb      	bpl.n	800f000 <_printf_i+0x1c8>
 800f008:	8019      	strh	r1, [r3, #0]
 800f00a:	2300      	movs	r3, #0
 800f00c:	6123      	str	r3, [r4, #16]
 800f00e:	4615      	mov	r5, r2
 800f010:	e7ba      	b.n	800ef88 <_printf_i+0x150>
 800f012:	682b      	ldr	r3, [r5, #0]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	602a      	str	r2, [r5, #0]
 800f018:	681d      	ldr	r5, [r3, #0]
 800f01a:	6862      	ldr	r2, [r4, #4]
 800f01c:	2100      	movs	r1, #0
 800f01e:	4628      	mov	r0, r5
 800f020:	f7f1 f976 	bl	8000310 <memchr>
 800f024:	b108      	cbz	r0, 800f02a <_printf_i+0x1f2>
 800f026:	1b40      	subs	r0, r0, r5
 800f028:	6060      	str	r0, [r4, #4]
 800f02a:	6863      	ldr	r3, [r4, #4]
 800f02c:	6123      	str	r3, [r4, #16]
 800f02e:	2300      	movs	r3, #0
 800f030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f034:	e7a8      	b.n	800ef88 <_printf_i+0x150>
 800f036:	6923      	ldr	r3, [r4, #16]
 800f038:	462a      	mov	r2, r5
 800f03a:	4649      	mov	r1, r9
 800f03c:	4640      	mov	r0, r8
 800f03e:	47d0      	blx	sl
 800f040:	3001      	adds	r0, #1
 800f042:	d0ab      	beq.n	800ef9c <_printf_i+0x164>
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	079b      	lsls	r3, r3, #30
 800f048:	d413      	bmi.n	800f072 <_printf_i+0x23a>
 800f04a:	68e0      	ldr	r0, [r4, #12]
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	4298      	cmp	r0, r3
 800f050:	bfb8      	it	lt
 800f052:	4618      	movlt	r0, r3
 800f054:	e7a4      	b.n	800efa0 <_printf_i+0x168>
 800f056:	2301      	movs	r3, #1
 800f058:	4632      	mov	r2, r6
 800f05a:	4649      	mov	r1, r9
 800f05c:	4640      	mov	r0, r8
 800f05e:	47d0      	blx	sl
 800f060:	3001      	adds	r0, #1
 800f062:	d09b      	beq.n	800ef9c <_printf_i+0x164>
 800f064:	3501      	adds	r5, #1
 800f066:	68e3      	ldr	r3, [r4, #12]
 800f068:	9903      	ldr	r1, [sp, #12]
 800f06a:	1a5b      	subs	r3, r3, r1
 800f06c:	42ab      	cmp	r3, r5
 800f06e:	dcf2      	bgt.n	800f056 <_printf_i+0x21e>
 800f070:	e7eb      	b.n	800f04a <_printf_i+0x212>
 800f072:	2500      	movs	r5, #0
 800f074:	f104 0619 	add.w	r6, r4, #25
 800f078:	e7f5      	b.n	800f066 <_printf_i+0x22e>
 800f07a:	bf00      	nop
 800f07c:	0801197a 	.word	0x0801197a
 800f080:	0801198b 	.word	0x0801198b

0800f084 <cleanup_glue>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	460c      	mov	r4, r1
 800f088:	6809      	ldr	r1, [r1, #0]
 800f08a:	4605      	mov	r5, r0
 800f08c:	b109      	cbz	r1, 800f092 <cleanup_glue+0xe>
 800f08e:	f7ff fff9 	bl	800f084 <cleanup_glue>
 800f092:	4621      	mov	r1, r4
 800f094:	4628      	mov	r0, r5
 800f096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f09a:	f001 bbf9 	b.w	8010890 <_free_r>
	...

0800f0a0 <_reclaim_reent>:
 800f0a0:	4b2c      	ldr	r3, [pc, #176]	; (800f154 <_reclaim_reent+0xb4>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4283      	cmp	r3, r0
 800f0a6:	b570      	push	{r4, r5, r6, lr}
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	d051      	beq.n	800f150 <_reclaim_reent+0xb0>
 800f0ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f0ae:	b143      	cbz	r3, 800f0c2 <_reclaim_reent+0x22>
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d14a      	bne.n	800f14c <_reclaim_reent+0xac>
 800f0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0b8:	6819      	ldr	r1, [r3, #0]
 800f0ba:	b111      	cbz	r1, 800f0c2 <_reclaim_reent+0x22>
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f001 fbe7 	bl	8010890 <_free_r>
 800f0c2:	6961      	ldr	r1, [r4, #20]
 800f0c4:	b111      	cbz	r1, 800f0cc <_reclaim_reent+0x2c>
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f001 fbe2 	bl	8010890 <_free_r>
 800f0cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f0ce:	b111      	cbz	r1, 800f0d6 <_reclaim_reent+0x36>
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f001 fbdd 	bl	8010890 <_free_r>
 800f0d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f0d8:	b111      	cbz	r1, 800f0e0 <_reclaim_reent+0x40>
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f001 fbd8 	bl	8010890 <_free_r>
 800f0e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f0e2:	b111      	cbz	r1, 800f0ea <_reclaim_reent+0x4a>
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f001 fbd3 	bl	8010890 <_free_r>
 800f0ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f0ec:	b111      	cbz	r1, 800f0f4 <_reclaim_reent+0x54>
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f001 fbce 	bl	8010890 <_free_r>
 800f0f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f0f6:	b111      	cbz	r1, 800f0fe <_reclaim_reent+0x5e>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f001 fbc9 	bl	8010890 <_free_r>
 800f0fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f100:	b111      	cbz	r1, 800f108 <_reclaim_reent+0x68>
 800f102:	4620      	mov	r0, r4
 800f104:	f001 fbc4 	bl	8010890 <_free_r>
 800f108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f10a:	b111      	cbz	r1, 800f112 <_reclaim_reent+0x72>
 800f10c:	4620      	mov	r0, r4
 800f10e:	f001 fbbf 	bl	8010890 <_free_r>
 800f112:	69a3      	ldr	r3, [r4, #24]
 800f114:	b1e3      	cbz	r3, 800f150 <_reclaim_reent+0xb0>
 800f116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f118:	4620      	mov	r0, r4
 800f11a:	4798      	blx	r3
 800f11c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f11e:	b1b9      	cbz	r1, 800f150 <_reclaim_reent+0xb0>
 800f120:	4620      	mov	r0, r4
 800f122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f126:	f7ff bfad 	b.w	800f084 <cleanup_glue>
 800f12a:	5949      	ldr	r1, [r1, r5]
 800f12c:	b941      	cbnz	r1, 800f140 <_reclaim_reent+0xa0>
 800f12e:	3504      	adds	r5, #4
 800f130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f132:	2d80      	cmp	r5, #128	; 0x80
 800f134:	68d9      	ldr	r1, [r3, #12]
 800f136:	d1f8      	bne.n	800f12a <_reclaim_reent+0x8a>
 800f138:	4620      	mov	r0, r4
 800f13a:	f001 fba9 	bl	8010890 <_free_r>
 800f13e:	e7ba      	b.n	800f0b6 <_reclaim_reent+0x16>
 800f140:	680e      	ldr	r6, [r1, #0]
 800f142:	4620      	mov	r0, r4
 800f144:	f001 fba4 	bl	8010890 <_free_r>
 800f148:	4631      	mov	r1, r6
 800f14a:	e7ef      	b.n	800f12c <_reclaim_reent+0x8c>
 800f14c:	2500      	movs	r5, #0
 800f14e:	e7ef      	b.n	800f130 <_reclaim_reent+0x90>
 800f150:	bd70      	pop	{r4, r5, r6, pc}
 800f152:	bf00      	nop
 800f154:	24000020 	.word	0x24000020

0800f158 <_sbrk_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d06      	ldr	r5, [pc, #24]	; (800f174 <_sbrk_r+0x1c>)
 800f15c:	2300      	movs	r3, #0
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	602b      	str	r3, [r5, #0]
 800f164:	f7f2 f8bc 	bl	80012e0 <_sbrk>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_sbrk_r+0x1a>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_sbrk_r+0x1a>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	240116f8 	.word	0x240116f8

0800f178 <_raise_r>:
 800f178:	291f      	cmp	r1, #31
 800f17a:	b538      	push	{r3, r4, r5, lr}
 800f17c:	4604      	mov	r4, r0
 800f17e:	460d      	mov	r5, r1
 800f180:	d904      	bls.n	800f18c <_raise_r+0x14>
 800f182:	2316      	movs	r3, #22
 800f184:	6003      	str	r3, [r0, #0]
 800f186:	f04f 30ff 	mov.w	r0, #4294967295
 800f18a:	bd38      	pop	{r3, r4, r5, pc}
 800f18c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f18e:	b112      	cbz	r2, 800f196 <_raise_r+0x1e>
 800f190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f194:	b94b      	cbnz	r3, 800f1aa <_raise_r+0x32>
 800f196:	4620      	mov	r0, r4
 800f198:	f000 f830 	bl	800f1fc <_getpid_r>
 800f19c:	462a      	mov	r2, r5
 800f19e:	4601      	mov	r1, r0
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1a6:	f000 b817 	b.w	800f1d8 <_kill_r>
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d00a      	beq.n	800f1c4 <_raise_r+0x4c>
 800f1ae:	1c59      	adds	r1, r3, #1
 800f1b0:	d103      	bne.n	800f1ba <_raise_r+0x42>
 800f1b2:	2316      	movs	r3, #22
 800f1b4:	6003      	str	r3, [r0, #0]
 800f1b6:	2001      	movs	r0, #1
 800f1b8:	e7e7      	b.n	800f18a <_raise_r+0x12>
 800f1ba:	2400      	movs	r4, #0
 800f1bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	4798      	blx	r3
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	e7e0      	b.n	800f18a <_raise_r+0x12>

0800f1c8 <raise>:
 800f1c8:	4b02      	ldr	r3, [pc, #8]	; (800f1d4 <raise+0xc>)
 800f1ca:	4601      	mov	r1, r0
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	f7ff bfd3 	b.w	800f178 <_raise_r>
 800f1d2:	bf00      	nop
 800f1d4:	24000020 	.word	0x24000020

0800f1d8 <_kill_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d07      	ldr	r5, [pc, #28]	; (800f1f8 <_kill_r+0x20>)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	f7f2 f847 	bl	8001278 <_kill>
 800f1ea:	1c43      	adds	r3, r0, #1
 800f1ec:	d102      	bne.n	800f1f4 <_kill_r+0x1c>
 800f1ee:	682b      	ldr	r3, [r5, #0]
 800f1f0:	b103      	cbz	r3, 800f1f4 <_kill_r+0x1c>
 800f1f2:	6023      	str	r3, [r4, #0]
 800f1f4:	bd38      	pop	{r3, r4, r5, pc}
 800f1f6:	bf00      	nop
 800f1f8:	240116f8 	.word	0x240116f8

0800f1fc <_getpid_r>:
 800f1fc:	f7f2 b83a 	b.w	8001274 <_getpid>

0800f200 <__sread>:
 800f200:	b510      	push	{r4, lr}
 800f202:	460c      	mov	r4, r1
 800f204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f208:	f001 fb8e 	bl	8010928 <_read_r>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	bfab      	itete	ge
 800f210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f212:	89a3      	ldrhlt	r3, [r4, #12]
 800f214:	181b      	addge	r3, r3, r0
 800f216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f21a:	bfac      	ite	ge
 800f21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f21e:	81a3      	strhlt	r3, [r4, #12]
 800f220:	bd10      	pop	{r4, pc}

0800f222 <__swrite>:
 800f222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f226:	461f      	mov	r7, r3
 800f228:	898b      	ldrh	r3, [r1, #12]
 800f22a:	05db      	lsls	r3, r3, #23
 800f22c:	4605      	mov	r5, r0
 800f22e:	460c      	mov	r4, r1
 800f230:	4616      	mov	r6, r2
 800f232:	d505      	bpl.n	800f240 <__swrite+0x1e>
 800f234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f238:	2302      	movs	r3, #2
 800f23a:	2200      	movs	r2, #0
 800f23c:	f000 ff68 	bl	8010110 <_lseek_r>
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f24a:	81a3      	strh	r3, [r4, #12]
 800f24c:	4632      	mov	r2, r6
 800f24e:	463b      	mov	r3, r7
 800f250:	4628      	mov	r0, r5
 800f252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f256:	f000 b817 	b.w	800f288 <_write_r>

0800f25a <__sseek>:
 800f25a:	b510      	push	{r4, lr}
 800f25c:	460c      	mov	r4, r1
 800f25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f262:	f000 ff55 	bl	8010110 <_lseek_r>
 800f266:	1c43      	adds	r3, r0, #1
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	bf15      	itete	ne
 800f26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f276:	81a3      	strheq	r3, [r4, #12]
 800f278:	bf18      	it	ne
 800f27a:	81a3      	strhne	r3, [r4, #12]
 800f27c:	bd10      	pop	{r4, pc}

0800f27e <__sclose>:
 800f27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f282:	f000 b875 	b.w	800f370 <_close_r>
	...

0800f288 <_write_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4d07      	ldr	r5, [pc, #28]	; (800f2a8 <_write_r+0x20>)
 800f28c:	4604      	mov	r4, r0
 800f28e:	4608      	mov	r0, r1
 800f290:	4611      	mov	r1, r2
 800f292:	2200      	movs	r2, #0
 800f294:	602a      	str	r2, [r5, #0]
 800f296:	461a      	mov	r2, r3
 800f298:	f7f2 f809 	bl	80012ae <_write>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_write_r+0x1e>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_write_r+0x1e>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	240116f8 	.word	0x240116f8

0800f2ac <__register_exitproc>:
 800f2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f36c <__register_exitproc+0xc0>
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	f8d8 0000 	ldr.w	r0, [r8]
 800f2ba:	461f      	mov	r7, r3
 800f2bc:	460d      	mov	r5, r1
 800f2be:	4691      	mov	r9, r2
 800f2c0:	f7ff f9d7 	bl	800e672 <__retarget_lock_acquire_recursive>
 800f2c4:	4b25      	ldr	r3, [pc, #148]	; (800f35c <__register_exitproc+0xb0>)
 800f2c6:	681c      	ldr	r4, [r3, #0]
 800f2c8:	b934      	cbnz	r4, 800f2d8 <__register_exitproc+0x2c>
 800f2ca:	4c25      	ldr	r4, [pc, #148]	; (800f360 <__register_exitproc+0xb4>)
 800f2cc:	601c      	str	r4, [r3, #0]
 800f2ce:	4b25      	ldr	r3, [pc, #148]	; (800f364 <__register_exitproc+0xb8>)
 800f2d0:	b113      	cbz	r3, 800f2d8 <__register_exitproc+0x2c>
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800f2d8:	6863      	ldr	r3, [r4, #4]
 800f2da:	2b1f      	cmp	r3, #31
 800f2dc:	dd07      	ble.n	800f2ee <__register_exitproc+0x42>
 800f2de:	f8d8 0000 	ldr.w	r0, [r8]
 800f2e2:	f7ff f9c8 	bl	800e676 <__retarget_lock_release_recursive>
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ee:	b34e      	cbz	r6, 800f344 <__register_exitproc+0x98>
 800f2f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800f2f4:	b988      	cbnz	r0, 800f31a <__register_exitproc+0x6e>
 800f2f6:	4b1c      	ldr	r3, [pc, #112]	; (800f368 <__register_exitproc+0xbc>)
 800f2f8:	b923      	cbnz	r3, 800f304 <__register_exitproc+0x58>
 800f2fa:	f8d8 0000 	ldr.w	r0, [r8]
 800f2fe:	f7ff f9b9 	bl	800e674 <__retarget_lock_release>
 800f302:	e7f0      	b.n	800f2e6 <__register_exitproc+0x3a>
 800f304:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f308:	f000 ff14 	bl	8010134 <malloc>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d0f4      	beq.n	800f2fa <__register_exitproc+0x4e>
 800f310:	2300      	movs	r3, #0
 800f312:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800f316:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800f31a:	6863      	ldr	r3, [r4, #4]
 800f31c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f320:	2201      	movs	r2, #1
 800f322:	409a      	lsls	r2, r3
 800f324:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f328:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800f32c:	4313      	orrs	r3, r2
 800f32e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f332:	2e02      	cmp	r6, #2
 800f334:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800f338:	bf02      	ittt	eq
 800f33a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800f33e:	4313      	orreq	r3, r2
 800f340:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800f344:	6863      	ldr	r3, [r4, #4]
 800f346:	f8d8 0000 	ldr.w	r0, [r8]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	3302      	adds	r3, #2
 800f34e:	6062      	str	r2, [r4, #4]
 800f350:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800f354:	f7ff f98f 	bl	800e676 <__retarget_lock_release_recursive>
 800f358:	2000      	movs	r0, #0
 800f35a:	e7c6      	b.n	800f2ea <__register_exitproc+0x3e>
 800f35c:	24011788 	.word	0x24011788
 800f360:	240116fc 	.word	0x240116fc
 800f364:	00000000 	.word	0x00000000
 800f368:	08010135 	.word	0x08010135
 800f36c:	24000084 	.word	0x24000084

0800f370 <_close_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d06      	ldr	r5, [pc, #24]	; (800f38c <_close_r+0x1c>)
 800f374:	2300      	movs	r3, #0
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	f7f1 ffa4 	bl	80012c8 <_close>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_close_r+0x1a>
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	b103      	cbz	r3, 800f38a <_close_r+0x1a>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	240116f8 	.word	0x240116f8

0800f390 <quorem>:
 800f390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	6903      	ldr	r3, [r0, #16]
 800f396:	690c      	ldr	r4, [r1, #16]
 800f398:	42a3      	cmp	r3, r4
 800f39a:	4607      	mov	r7, r0
 800f39c:	f2c0 8081 	blt.w	800f4a2 <quorem+0x112>
 800f3a0:	3c01      	subs	r4, #1
 800f3a2:	f101 0814 	add.w	r8, r1, #20
 800f3a6:	f100 0514 	add.w	r5, r0, #20
 800f3aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f3c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f3c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f3c8:	d331      	bcc.n	800f42e <quorem+0x9e>
 800f3ca:	f04f 0e00 	mov.w	lr, #0
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	46ac      	mov	ip, r5
 800f3d2:	46f2      	mov	sl, lr
 800f3d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f3d8:	b293      	uxth	r3, r2
 800f3da:	fb06 e303 	mla	r3, r6, r3, lr
 800f3de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	ebaa 0303 	sub.w	r3, sl, r3
 800f3e8:	f8dc a000 	ldr.w	sl, [ip]
 800f3ec:	0c12      	lsrs	r2, r2, #16
 800f3ee:	fa13 f38a 	uxtah	r3, r3, sl
 800f3f2:	fb06 e202 	mla	r2, r6, r2, lr
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	9b00      	ldr	r3, [sp, #0]
 800f3fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f3fe:	b292      	uxth	r2, r2
 800f400:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f408:	f8bd 3000 	ldrh.w	r3, [sp]
 800f40c:	4581      	cmp	r9, r0
 800f40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f412:	f84c 3b04 	str.w	r3, [ip], #4
 800f416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f41a:	d2db      	bcs.n	800f3d4 <quorem+0x44>
 800f41c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f420:	b92b      	cbnz	r3, 800f42e <quorem+0x9e>
 800f422:	9b01      	ldr	r3, [sp, #4]
 800f424:	3b04      	subs	r3, #4
 800f426:	429d      	cmp	r5, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	d32e      	bcc.n	800f48a <quorem+0xfa>
 800f42c:	613c      	str	r4, [r7, #16]
 800f42e:	4638      	mov	r0, r7
 800f430:	f001 f916 	bl	8010660 <__mcmp>
 800f434:	2800      	cmp	r0, #0
 800f436:	db24      	blt.n	800f482 <quorem+0xf2>
 800f438:	3601      	adds	r6, #1
 800f43a:	4628      	mov	r0, r5
 800f43c:	f04f 0c00 	mov.w	ip, #0
 800f440:	f858 2b04 	ldr.w	r2, [r8], #4
 800f444:	f8d0 e000 	ldr.w	lr, [r0]
 800f448:	b293      	uxth	r3, r2
 800f44a:	ebac 0303 	sub.w	r3, ip, r3
 800f44e:	0c12      	lsrs	r2, r2, #16
 800f450:	fa13 f38e 	uxtah	r3, r3, lr
 800f454:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f462:	45c1      	cmp	r9, r8
 800f464:	f840 3b04 	str.w	r3, [r0], #4
 800f468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f46c:	d2e8      	bcs.n	800f440 <quorem+0xb0>
 800f46e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f476:	b922      	cbnz	r2, 800f482 <quorem+0xf2>
 800f478:	3b04      	subs	r3, #4
 800f47a:	429d      	cmp	r5, r3
 800f47c:	461a      	mov	r2, r3
 800f47e:	d30a      	bcc.n	800f496 <quorem+0x106>
 800f480:	613c      	str	r4, [r7, #16]
 800f482:	4630      	mov	r0, r6
 800f484:	b003      	add	sp, #12
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	3b04      	subs	r3, #4
 800f48e:	2a00      	cmp	r2, #0
 800f490:	d1cc      	bne.n	800f42c <quorem+0x9c>
 800f492:	3c01      	subs	r4, #1
 800f494:	e7c7      	b.n	800f426 <quorem+0x96>
 800f496:	6812      	ldr	r2, [r2, #0]
 800f498:	3b04      	subs	r3, #4
 800f49a:	2a00      	cmp	r2, #0
 800f49c:	d1f0      	bne.n	800f480 <quorem+0xf0>
 800f49e:	3c01      	subs	r4, #1
 800f4a0:	e7eb      	b.n	800f47a <quorem+0xea>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7ee      	b.n	800f484 <quorem+0xf4>
	...

0800f4a8 <_dtoa_r>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	ed2d 8b02 	vpush	{d8}
 800f4b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f4b2:	b091      	sub	sp, #68	; 0x44
 800f4b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f4b8:	ec59 8b10 	vmov	r8, r9, d0
 800f4bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f4be:	9106      	str	r1, [sp, #24]
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	9208      	str	r2, [sp, #32]
 800f4c4:	930c      	str	r3, [sp, #48]	; 0x30
 800f4c6:	b975      	cbnz	r5, 800f4e6 <_dtoa_r+0x3e>
 800f4c8:	2010      	movs	r0, #16
 800f4ca:	f000 fe33 	bl	8010134 <malloc>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	6270      	str	r0, [r6, #36]	; 0x24
 800f4d2:	b920      	cbnz	r0, 800f4de <_dtoa_r+0x36>
 800f4d4:	4baa      	ldr	r3, [pc, #680]	; (800f780 <_dtoa_r+0x2d8>)
 800f4d6:	21ea      	movs	r1, #234	; 0xea
 800f4d8:	48aa      	ldr	r0, [pc, #680]	; (800f784 <_dtoa_r+0x2dc>)
 800f4da:	f001 fa37 	bl	801094c <__assert_func>
 800f4de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f4e2:	6005      	str	r5, [r0, #0]
 800f4e4:	60c5      	str	r5, [r0, #12]
 800f4e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	b151      	cbz	r1, 800f502 <_dtoa_r+0x5a>
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	604a      	str	r2, [r1, #4]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4093      	lsls	r3, r2
 800f4f4:	608b      	str	r3, [r1, #8]
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	f000 fe70 	bl	80101dc <_Bfree>
 800f4fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
 800f502:	f1b9 0300 	subs.w	r3, r9, #0
 800f506:	bfbb      	ittet	lt
 800f508:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f50c:	9303      	strlt	r3, [sp, #12]
 800f50e:	2300      	movge	r3, #0
 800f510:	2201      	movlt	r2, #1
 800f512:	bfac      	ite	ge
 800f514:	6023      	strge	r3, [r4, #0]
 800f516:	6022      	strlt	r2, [r4, #0]
 800f518:	4b9b      	ldr	r3, [pc, #620]	; (800f788 <_dtoa_r+0x2e0>)
 800f51a:	9c03      	ldr	r4, [sp, #12]
 800f51c:	43a3      	bics	r3, r4
 800f51e:	d11c      	bne.n	800f55a <_dtoa_r+0xb2>
 800f520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f522:	f242 730f 	movw	r3, #9999	; 0x270f
 800f526:	6013      	str	r3, [r2, #0]
 800f528:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f52c:	ea53 0308 	orrs.w	r3, r3, r8
 800f530:	f000 84fd 	beq.w	800ff2e <_dtoa_r+0xa86>
 800f534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f536:	b963      	cbnz	r3, 800f552 <_dtoa_r+0xaa>
 800f538:	4b94      	ldr	r3, [pc, #592]	; (800f78c <_dtoa_r+0x2e4>)
 800f53a:	e01f      	b.n	800f57c <_dtoa_r+0xd4>
 800f53c:	4b94      	ldr	r3, [pc, #592]	; (800f790 <_dtoa_r+0x2e8>)
 800f53e:	9301      	str	r3, [sp, #4]
 800f540:	3308      	adds	r3, #8
 800f542:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f544:	6013      	str	r3, [r2, #0]
 800f546:	9801      	ldr	r0, [sp, #4]
 800f548:	b011      	add	sp, #68	; 0x44
 800f54a:	ecbd 8b02 	vpop	{d8}
 800f54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f552:	4b8e      	ldr	r3, [pc, #568]	; (800f78c <_dtoa_r+0x2e4>)
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	3303      	adds	r3, #3
 800f558:	e7f3      	b.n	800f542 <_dtoa_r+0x9a>
 800f55a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f55e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f566:	d10b      	bne.n	800f580 <_dtoa_r+0xd8>
 800f568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f56a:	2301      	movs	r3, #1
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 84d9 	beq.w	800ff28 <_dtoa_r+0xa80>
 800f576:	4887      	ldr	r0, [pc, #540]	; (800f794 <_dtoa_r+0x2ec>)
 800f578:	6018      	str	r0, [r3, #0]
 800f57a:	1e43      	subs	r3, r0, #1
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	e7e2      	b.n	800f546 <_dtoa_r+0x9e>
 800f580:	a90f      	add	r1, sp, #60	; 0x3c
 800f582:	aa0e      	add	r2, sp, #56	; 0x38
 800f584:	4630      	mov	r0, r6
 800f586:	eeb0 0b48 	vmov.f64	d0, d8
 800f58a:	f001 f90f 	bl	80107ac <__d2b>
 800f58e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f592:	4605      	mov	r5, r0
 800f594:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f596:	2900      	cmp	r1, #0
 800f598:	d046      	beq.n	800f628 <_dtoa_r+0x180>
 800f59a:	ee18 4a90 	vmov	r4, s17
 800f59e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f5a2:	ec53 2b18 	vmov	r2, r3, d8
 800f5a6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f5aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f5b2:	2400      	movs	r4, #0
 800f5b4:	ec43 2b16 	vmov	d6, r2, r3
 800f5b8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f5bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f768 <_dtoa_r+0x2c0>
 800f5c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f770 <_dtoa_r+0x2c8>
 800f5c8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f5cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f778 <_dtoa_r+0x2d0>
 800f5d0:	ee07 1a90 	vmov	s15, r1
 800f5d4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f5d8:	eeb0 7b46 	vmov.f64	d7, d6
 800f5dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f5e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f5e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	ee16 ba90 	vmov	fp, s13
 800f5f0:	940a      	str	r4, [sp, #40]	; 0x28
 800f5f2:	d508      	bpl.n	800f606 <_dtoa_r+0x15e>
 800f5f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f5f8:	eeb4 6b47 	vcmp.f64	d6, d7
 800f5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f600:	bf18      	it	ne
 800f602:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f606:	f1bb 0f16 	cmp.w	fp, #22
 800f60a:	d82f      	bhi.n	800f66c <_dtoa_r+0x1c4>
 800f60c:	4b62      	ldr	r3, [pc, #392]	; (800f798 <_dtoa_r+0x2f0>)
 800f60e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f612:	ed93 7b00 	vldr	d7, [r3]
 800f616:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61e:	d501      	bpl.n	800f624 <_dtoa_r+0x17c>
 800f620:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f624:	2300      	movs	r3, #0
 800f626:	e022      	b.n	800f66e <_dtoa_r+0x1c6>
 800f628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f62a:	4401      	add	r1, r0
 800f62c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f630:	2b20      	cmp	r3, #32
 800f632:	bfc1      	itttt	gt
 800f634:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f638:	fa04 f303 	lslgt.w	r3, r4, r3
 800f63c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f640:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f644:	bfd6      	itet	le
 800f646:	f1c3 0320 	rsble	r3, r3, #32
 800f64a:	ea43 0808 	orrgt.w	r8, r3, r8
 800f64e:	fa08 f803 	lslle.w	r8, r8, r3
 800f652:	ee07 8a90 	vmov	s15, r8
 800f656:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f65a:	3901      	subs	r1, #1
 800f65c:	ee17 4a90 	vmov	r4, s15
 800f660:	ec53 2b17 	vmov	r2, r3, d7
 800f664:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f668:	2401      	movs	r4, #1
 800f66a:	e7a3      	b.n	800f5b4 <_dtoa_r+0x10c>
 800f66c:	2301      	movs	r3, #1
 800f66e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f670:	1a43      	subs	r3, r0, r1
 800f672:	1e5a      	subs	r2, r3, #1
 800f674:	bf45      	ittet	mi
 800f676:	f1c3 0301 	rsbmi	r3, r3, #1
 800f67a:	9304      	strmi	r3, [sp, #16]
 800f67c:	2300      	movpl	r3, #0
 800f67e:	2300      	movmi	r3, #0
 800f680:	9205      	str	r2, [sp, #20]
 800f682:	bf54      	ite	pl
 800f684:	9304      	strpl	r3, [sp, #16]
 800f686:	9305      	strmi	r3, [sp, #20]
 800f688:	f1bb 0f00 	cmp.w	fp, #0
 800f68c:	db18      	blt.n	800f6c0 <_dtoa_r+0x218>
 800f68e:	9b05      	ldr	r3, [sp, #20]
 800f690:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f694:	445b      	add	r3, fp
 800f696:	9305      	str	r3, [sp, #20]
 800f698:	2300      	movs	r3, #0
 800f69a:	9a06      	ldr	r2, [sp, #24]
 800f69c:	2a09      	cmp	r2, #9
 800f69e:	d849      	bhi.n	800f734 <_dtoa_r+0x28c>
 800f6a0:	2a05      	cmp	r2, #5
 800f6a2:	bfc4      	itt	gt
 800f6a4:	3a04      	subgt	r2, #4
 800f6a6:	9206      	strgt	r2, [sp, #24]
 800f6a8:	9a06      	ldr	r2, [sp, #24]
 800f6aa:	f1a2 0202 	sub.w	r2, r2, #2
 800f6ae:	bfcc      	ite	gt
 800f6b0:	2400      	movgt	r4, #0
 800f6b2:	2401      	movle	r4, #1
 800f6b4:	2a03      	cmp	r2, #3
 800f6b6:	d848      	bhi.n	800f74a <_dtoa_r+0x2a2>
 800f6b8:	e8df f002 	tbb	[pc, r2]
 800f6bc:	3a2c2e0b 	.word	0x3a2c2e0b
 800f6c0:	9b04      	ldr	r3, [sp, #16]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	eba3 030b 	sub.w	r3, r3, fp
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f6cc:	f1cb 0300 	rsb	r3, fp, #0
 800f6d0:	e7e3      	b.n	800f69a <_dtoa_r+0x1f2>
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	9207      	str	r2, [sp, #28]
 800f6d6:	9a08      	ldr	r2, [sp, #32]
 800f6d8:	2a00      	cmp	r2, #0
 800f6da:	dc39      	bgt.n	800f750 <_dtoa_r+0x2a8>
 800f6dc:	f04f 0a01 	mov.w	sl, #1
 800f6e0:	46d1      	mov	r9, sl
 800f6e2:	4652      	mov	r2, sl
 800f6e4:	f8cd a020 	str.w	sl, [sp, #32]
 800f6e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	6079      	str	r1, [r7, #4]
 800f6ee:	2004      	movs	r0, #4
 800f6f0:	f100 0c14 	add.w	ip, r0, #20
 800f6f4:	4594      	cmp	ip, r2
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	d92f      	bls.n	800f75a <_dtoa_r+0x2b2>
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	930d      	str	r3, [sp, #52]	; 0x34
 800f6fe:	f000 fd2d 	bl	801015c <_Balloc>
 800f702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f704:	9001      	str	r0, [sp, #4]
 800f706:	4602      	mov	r2, r0
 800f708:	2800      	cmp	r0, #0
 800f70a:	d149      	bne.n	800f7a0 <_dtoa_r+0x2f8>
 800f70c:	4b23      	ldr	r3, [pc, #140]	; (800f79c <_dtoa_r+0x2f4>)
 800f70e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f712:	e6e1      	b.n	800f4d8 <_dtoa_r+0x30>
 800f714:	2201      	movs	r2, #1
 800f716:	e7dd      	b.n	800f6d4 <_dtoa_r+0x22c>
 800f718:	2200      	movs	r2, #0
 800f71a:	9207      	str	r2, [sp, #28]
 800f71c:	9a08      	ldr	r2, [sp, #32]
 800f71e:	eb0b 0a02 	add.w	sl, fp, r2
 800f722:	f10a 0901 	add.w	r9, sl, #1
 800f726:	464a      	mov	r2, r9
 800f728:	2a01      	cmp	r2, #1
 800f72a:	bfb8      	it	lt
 800f72c:	2201      	movlt	r2, #1
 800f72e:	e7db      	b.n	800f6e8 <_dtoa_r+0x240>
 800f730:	2201      	movs	r2, #1
 800f732:	e7f2      	b.n	800f71a <_dtoa_r+0x272>
 800f734:	2401      	movs	r4, #1
 800f736:	2200      	movs	r2, #0
 800f738:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f73c:	f04f 3aff 	mov.w	sl, #4294967295
 800f740:	2100      	movs	r1, #0
 800f742:	46d1      	mov	r9, sl
 800f744:	2212      	movs	r2, #18
 800f746:	9108      	str	r1, [sp, #32]
 800f748:	e7ce      	b.n	800f6e8 <_dtoa_r+0x240>
 800f74a:	2201      	movs	r2, #1
 800f74c:	9207      	str	r2, [sp, #28]
 800f74e:	e7f5      	b.n	800f73c <_dtoa_r+0x294>
 800f750:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f754:	46d1      	mov	r9, sl
 800f756:	4652      	mov	r2, sl
 800f758:	e7c6      	b.n	800f6e8 <_dtoa_r+0x240>
 800f75a:	3101      	adds	r1, #1
 800f75c:	6079      	str	r1, [r7, #4]
 800f75e:	0040      	lsls	r0, r0, #1
 800f760:	e7c6      	b.n	800f6f0 <_dtoa_r+0x248>
 800f762:	bf00      	nop
 800f764:	f3af 8000 	nop.w
 800f768:	636f4361 	.word	0x636f4361
 800f76c:	3fd287a7 	.word	0x3fd287a7
 800f770:	8b60c8b3 	.word	0x8b60c8b3
 800f774:	3fc68a28 	.word	0x3fc68a28
 800f778:	509f79fb 	.word	0x509f79fb
 800f77c:	3fd34413 	.word	0x3fd34413
 800f780:	080119a9 	.word	0x080119a9
 800f784:	080119c0 	.word	0x080119c0
 800f788:	7ff00000 	.word	0x7ff00000
 800f78c:	080119a5 	.word	0x080119a5
 800f790:	0801199c 	.word	0x0801199c
 800f794:	08011979 	.word	0x08011979
 800f798:	08011ab0 	.word	0x08011ab0
 800f79c:	08011a1b 	.word	0x08011a1b
 800f7a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f7a2:	9901      	ldr	r1, [sp, #4]
 800f7a4:	6011      	str	r1, [r2, #0]
 800f7a6:	f1b9 0f0e 	cmp.w	r9, #14
 800f7aa:	d86c      	bhi.n	800f886 <_dtoa_r+0x3de>
 800f7ac:	2c00      	cmp	r4, #0
 800f7ae:	d06a      	beq.n	800f886 <_dtoa_r+0x3de>
 800f7b0:	f1bb 0f00 	cmp.w	fp, #0
 800f7b4:	f340 80a0 	ble.w	800f8f8 <_dtoa_r+0x450>
 800f7b8:	49c1      	ldr	r1, [pc, #772]	; (800fac0 <_dtoa_r+0x618>)
 800f7ba:	f00b 020f 	and.w	r2, fp, #15
 800f7be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f7c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f7c6:	ed92 7b00 	vldr	d7, [r2]
 800f7ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f7ce:	f000 8087 	beq.w	800f8e0 <_dtoa_r+0x438>
 800f7d2:	4abc      	ldr	r2, [pc, #752]	; (800fac4 <_dtoa_r+0x61c>)
 800f7d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f7d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f7dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f7e0:	f001 010f 	and.w	r1, r1, #15
 800f7e4:	2203      	movs	r2, #3
 800f7e6:	48b7      	ldr	r0, [pc, #732]	; (800fac4 <_dtoa_r+0x61c>)
 800f7e8:	2900      	cmp	r1, #0
 800f7ea:	d17b      	bne.n	800f8e4 <_dtoa_r+0x43c>
 800f7ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f7f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f7f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7fa:	2900      	cmp	r1, #0
 800f7fc:	f000 80a2 	beq.w	800f944 <_dtoa_r+0x49c>
 800f800:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f804:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f808:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	f140 8098 	bpl.w	800f944 <_dtoa_r+0x49c>
 800f814:	f1b9 0f00 	cmp.w	r9, #0
 800f818:	f000 8094 	beq.w	800f944 <_dtoa_r+0x49c>
 800f81c:	f1ba 0f00 	cmp.w	sl, #0
 800f820:	dd2f      	ble.n	800f882 <_dtoa_r+0x3da>
 800f822:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f82a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f82e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f832:	3201      	adds	r2, #1
 800f834:	4650      	mov	r0, sl
 800f836:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f83a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f83e:	ee07 2a90 	vmov	s15, r2
 800f842:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f846:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f84a:	ee15 4a90 	vmov	r4, s11
 800f84e:	ec52 1b15 	vmov	r1, r2, d5
 800f852:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f856:	2800      	cmp	r0, #0
 800f858:	d177      	bne.n	800f94a <_dtoa_r+0x4a2>
 800f85a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f85e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f862:	ec42 1b17 	vmov	d7, r1, r2
 800f866:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86e:	f300 8263 	bgt.w	800fd38 <_dtoa_r+0x890>
 800f872:	eeb1 7b47 	vneg.f64	d7, d7
 800f876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87e:	f100 8258 	bmi.w	800fd32 <_dtoa_r+0x88a>
 800f882:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f888:	2a00      	cmp	r2, #0
 800f88a:	f2c0 811d 	blt.w	800fac8 <_dtoa_r+0x620>
 800f88e:	f1bb 0f0e 	cmp.w	fp, #14
 800f892:	f300 8119 	bgt.w	800fac8 <_dtoa_r+0x620>
 800f896:	4b8a      	ldr	r3, [pc, #552]	; (800fac0 <_dtoa_r+0x618>)
 800f898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f89c:	ed93 6b00 	vldr	d6, [r3]
 800f8a0:	9b08      	ldr	r3, [sp, #32]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f280 80b7 	bge.w	800fa16 <_dtoa_r+0x56e>
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	f300 80b3 	bgt.w	800fa16 <_dtoa_r+0x56e>
 800f8b0:	f040 823f 	bne.w	800fd32 <_dtoa_r+0x88a>
 800f8b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f8b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f8bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c8:	464c      	mov	r4, r9
 800f8ca:	464f      	mov	r7, r9
 800f8cc:	f280 8215 	bge.w	800fcfa <_dtoa_r+0x852>
 800f8d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f8d4:	2331      	movs	r3, #49	; 0x31
 800f8d6:	f808 3b01 	strb.w	r3, [r8], #1
 800f8da:	f10b 0b01 	add.w	fp, fp, #1
 800f8de:	e211      	b.n	800fd04 <_dtoa_r+0x85c>
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	e780      	b.n	800f7e6 <_dtoa_r+0x33e>
 800f8e4:	07cc      	lsls	r4, r1, #31
 800f8e6:	d504      	bpl.n	800f8f2 <_dtoa_r+0x44a>
 800f8e8:	ed90 6b00 	vldr	d6, [r0]
 800f8ec:	3201      	adds	r2, #1
 800f8ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8f2:	1049      	asrs	r1, r1, #1
 800f8f4:	3008      	adds	r0, #8
 800f8f6:	e777      	b.n	800f7e8 <_dtoa_r+0x340>
 800f8f8:	d022      	beq.n	800f940 <_dtoa_r+0x498>
 800f8fa:	f1cb 0100 	rsb	r1, fp, #0
 800f8fe:	4a70      	ldr	r2, [pc, #448]	; (800fac0 <_dtoa_r+0x618>)
 800f900:	f001 000f 	and.w	r0, r1, #15
 800f904:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f908:	ed92 7b00 	vldr	d7, [r2]
 800f90c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f910:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f914:	486b      	ldr	r0, [pc, #428]	; (800fac4 <_dtoa_r+0x61c>)
 800f916:	1109      	asrs	r1, r1, #4
 800f918:	2400      	movs	r4, #0
 800f91a:	2202      	movs	r2, #2
 800f91c:	b929      	cbnz	r1, 800f92a <_dtoa_r+0x482>
 800f91e:	2c00      	cmp	r4, #0
 800f920:	f43f af6a 	beq.w	800f7f8 <_dtoa_r+0x350>
 800f924:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f928:	e766      	b.n	800f7f8 <_dtoa_r+0x350>
 800f92a:	07cf      	lsls	r7, r1, #31
 800f92c:	d505      	bpl.n	800f93a <_dtoa_r+0x492>
 800f92e:	ed90 6b00 	vldr	d6, [r0]
 800f932:	3201      	adds	r2, #1
 800f934:	2401      	movs	r4, #1
 800f936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f93a:	1049      	asrs	r1, r1, #1
 800f93c:	3008      	adds	r0, #8
 800f93e:	e7ed      	b.n	800f91c <_dtoa_r+0x474>
 800f940:	2202      	movs	r2, #2
 800f942:	e759      	b.n	800f7f8 <_dtoa_r+0x350>
 800f944:	465f      	mov	r7, fp
 800f946:	4648      	mov	r0, r9
 800f948:	e775      	b.n	800f836 <_dtoa_r+0x38e>
 800f94a:	ec42 1b17 	vmov	d7, r1, r2
 800f94e:	4a5c      	ldr	r2, [pc, #368]	; (800fac0 <_dtoa_r+0x618>)
 800f950:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f954:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f958:	9a01      	ldr	r2, [sp, #4]
 800f95a:	1814      	adds	r4, r2, r0
 800f95c:	9a07      	ldr	r2, [sp, #28]
 800f95e:	b352      	cbz	r2, 800f9b6 <_dtoa_r+0x50e>
 800f960:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f964:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f968:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f96c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f970:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f974:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f978:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f97c:	ee14 2a90 	vmov	r2, s9
 800f980:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f984:	3230      	adds	r2, #48	; 0x30
 800f986:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f98a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f992:	f808 2b01 	strb.w	r2, [r8], #1
 800f996:	d439      	bmi.n	800fa0c <_dtoa_r+0x564>
 800f998:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f99c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a4:	d472      	bmi.n	800fa8c <_dtoa_r+0x5e4>
 800f9a6:	45a0      	cmp	r8, r4
 800f9a8:	f43f af6b 	beq.w	800f882 <_dtoa_r+0x3da>
 800f9ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f9b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f9b4:	e7e0      	b.n	800f978 <_dtoa_r+0x4d0>
 800f9b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f9ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9be:	4621      	mov	r1, r4
 800f9c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f9c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f9c8:	ee14 2a90 	vmov	r2, s9
 800f9cc:	3230      	adds	r2, #48	; 0x30
 800f9ce:	f808 2b01 	strb.w	r2, [r8], #1
 800f9d2:	45a0      	cmp	r8, r4
 800f9d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f9d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f9dc:	d118      	bne.n	800fa10 <_dtoa_r+0x568>
 800f9de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f9e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f9e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	dc4d      	bgt.n	800fa8c <_dtoa_r+0x5e4>
 800f9f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f9f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9fc:	f57f af41 	bpl.w	800f882 <_dtoa_r+0x3da>
 800fa00:	4688      	mov	r8, r1
 800fa02:	3901      	subs	r1, #1
 800fa04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800fa08:	2b30      	cmp	r3, #48	; 0x30
 800fa0a:	d0f9      	beq.n	800fa00 <_dtoa_r+0x558>
 800fa0c:	46bb      	mov	fp, r7
 800fa0e:	e02a      	b.n	800fa66 <_dtoa_r+0x5be>
 800fa10:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fa14:	e7d6      	b.n	800f9c4 <_dtoa_r+0x51c>
 800fa16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800fa1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fa26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fa2a:	ee15 3a10 	vmov	r3, s10
 800fa2e:	3330      	adds	r3, #48	; 0x30
 800fa30:	f808 3b01 	strb.w	r3, [r8], #1
 800fa34:	9b01      	ldr	r3, [sp, #4]
 800fa36:	eba8 0303 	sub.w	r3, r8, r3
 800fa3a:	4599      	cmp	r9, r3
 800fa3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fa40:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fa44:	d133      	bne.n	800faae <_dtoa_r+0x606>
 800fa46:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fa4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fa4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa52:	dc1a      	bgt.n	800fa8a <_dtoa_r+0x5e2>
 800fa54:	eeb4 7b46 	vcmp.f64	d7, d6
 800fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5c:	d103      	bne.n	800fa66 <_dtoa_r+0x5be>
 800fa5e:	ee15 3a10 	vmov	r3, s10
 800fa62:	07d9      	lsls	r1, r3, #31
 800fa64:	d411      	bmi.n	800fa8a <_dtoa_r+0x5e2>
 800fa66:	4629      	mov	r1, r5
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f000 fbb7 	bl	80101dc <_Bfree>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa72:	f888 3000 	strb.w	r3, [r8]
 800fa76:	f10b 0301 	add.w	r3, fp, #1
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f43f ad61 	beq.w	800f546 <_dtoa_r+0x9e>
 800fa84:	f8c3 8000 	str.w	r8, [r3]
 800fa88:	e55d      	b.n	800f546 <_dtoa_r+0x9e>
 800fa8a:	465f      	mov	r7, fp
 800fa8c:	4643      	mov	r3, r8
 800fa8e:	4698      	mov	r8, r3
 800fa90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa94:	2a39      	cmp	r2, #57	; 0x39
 800fa96:	d106      	bne.n	800faa6 <_dtoa_r+0x5fe>
 800fa98:	9a01      	ldr	r2, [sp, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d1f7      	bne.n	800fa8e <_dtoa_r+0x5e6>
 800fa9e:	9901      	ldr	r1, [sp, #4]
 800faa0:	2230      	movs	r2, #48	; 0x30
 800faa2:	3701      	adds	r7, #1
 800faa4:	700a      	strb	r2, [r1, #0]
 800faa6:	781a      	ldrb	r2, [r3, #0]
 800faa8:	3201      	adds	r2, #1
 800faaa:	701a      	strb	r2, [r3, #0]
 800faac:	e7ae      	b.n	800fa0c <_dtoa_r+0x564>
 800faae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faba:	d1b2      	bne.n	800fa22 <_dtoa_r+0x57a>
 800fabc:	e7d3      	b.n	800fa66 <_dtoa_r+0x5be>
 800fabe:	bf00      	nop
 800fac0:	08011ab0 	.word	0x08011ab0
 800fac4:	08011a88 	.word	0x08011a88
 800fac8:	9907      	ldr	r1, [sp, #28]
 800faca:	2900      	cmp	r1, #0
 800facc:	f000 80d0 	beq.w	800fc70 <_dtoa_r+0x7c8>
 800fad0:	9906      	ldr	r1, [sp, #24]
 800fad2:	2901      	cmp	r1, #1
 800fad4:	f300 80b4 	bgt.w	800fc40 <_dtoa_r+0x798>
 800fad8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fada:	2900      	cmp	r1, #0
 800fadc:	f000 80ac 	beq.w	800fc38 <_dtoa_r+0x790>
 800fae0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fae4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fae8:	461c      	mov	r4, r3
 800faea:	930a      	str	r3, [sp, #40]	; 0x28
 800faec:	9b04      	ldr	r3, [sp, #16]
 800faee:	4413      	add	r3, r2
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	9b05      	ldr	r3, [sp, #20]
 800faf4:	2101      	movs	r1, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	4630      	mov	r0, r6
 800fafa:	9305      	str	r3, [sp, #20]
 800fafc:	f000 fc26 	bl	801034c <__i2b>
 800fb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb02:	4607      	mov	r7, r0
 800fb04:	f1b8 0f00 	cmp.w	r8, #0
 800fb08:	dd0d      	ble.n	800fb26 <_dtoa_r+0x67e>
 800fb0a:	9a05      	ldr	r2, [sp, #20]
 800fb0c:	2a00      	cmp	r2, #0
 800fb0e:	dd0a      	ble.n	800fb26 <_dtoa_r+0x67e>
 800fb10:	4542      	cmp	r2, r8
 800fb12:	9904      	ldr	r1, [sp, #16]
 800fb14:	bfa8      	it	ge
 800fb16:	4642      	movge	r2, r8
 800fb18:	1a89      	subs	r1, r1, r2
 800fb1a:	9104      	str	r1, [sp, #16]
 800fb1c:	9905      	ldr	r1, [sp, #20]
 800fb1e:	eba8 0802 	sub.w	r8, r8, r2
 800fb22:	1a8a      	subs	r2, r1, r2
 800fb24:	9205      	str	r2, [sp, #20]
 800fb26:	b303      	cbz	r3, 800fb6a <_dtoa_r+0x6c2>
 800fb28:	9a07      	ldr	r2, [sp, #28]
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	f000 80a5 	beq.w	800fc7a <_dtoa_r+0x7d2>
 800fb30:	2c00      	cmp	r4, #0
 800fb32:	dd13      	ble.n	800fb5c <_dtoa_r+0x6b4>
 800fb34:	4639      	mov	r1, r7
 800fb36:	4622      	mov	r2, r4
 800fb38:	4630      	mov	r0, r6
 800fb3a:	930d      	str	r3, [sp, #52]	; 0x34
 800fb3c:	f000 fcc6 	bl	80104cc <__pow5mult>
 800fb40:	462a      	mov	r2, r5
 800fb42:	4601      	mov	r1, r0
 800fb44:	4607      	mov	r7, r0
 800fb46:	4630      	mov	r0, r6
 800fb48:	f000 fc16 	bl	8010378 <__multiply>
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	900a      	str	r0, [sp, #40]	; 0x28
 800fb50:	4630      	mov	r0, r6
 800fb52:	f000 fb43 	bl	80101dc <_Bfree>
 800fb56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb5a:	4615      	mov	r5, r2
 800fb5c:	1b1a      	subs	r2, r3, r4
 800fb5e:	d004      	beq.n	800fb6a <_dtoa_r+0x6c2>
 800fb60:	4629      	mov	r1, r5
 800fb62:	4630      	mov	r0, r6
 800fb64:	f000 fcb2 	bl	80104cc <__pow5mult>
 800fb68:	4605      	mov	r5, r0
 800fb6a:	2101      	movs	r1, #1
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f000 fbed 	bl	801034c <__i2b>
 800fb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	f340 8081 	ble.w	800fc7e <_dtoa_r+0x7d6>
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	4601      	mov	r1, r0
 800fb80:	4630      	mov	r0, r6
 800fb82:	f000 fca3 	bl	80104cc <__pow5mult>
 800fb86:	9b06      	ldr	r3, [sp, #24]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	dd7a      	ble.n	800fc84 <_dtoa_r+0x7dc>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	930a      	str	r3, [sp, #40]	; 0x28
 800fb92:	6922      	ldr	r2, [r4, #16]
 800fb94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fb98:	6910      	ldr	r0, [r2, #16]
 800fb9a:	f000 fb87 	bl	80102ac <__hi0bits>
 800fb9e:	f1c0 0020 	rsb	r0, r0, #32
 800fba2:	9b05      	ldr	r3, [sp, #20]
 800fba4:	4418      	add	r0, r3
 800fba6:	f010 001f 	ands.w	r0, r0, #31
 800fbaa:	f000 808c 	beq.w	800fcc6 <_dtoa_r+0x81e>
 800fbae:	f1c0 0220 	rsb	r2, r0, #32
 800fbb2:	2a04      	cmp	r2, #4
 800fbb4:	f340 8085 	ble.w	800fcc2 <_dtoa_r+0x81a>
 800fbb8:	f1c0 001c 	rsb	r0, r0, #28
 800fbbc:	9b04      	ldr	r3, [sp, #16]
 800fbbe:	4403      	add	r3, r0
 800fbc0:	9304      	str	r3, [sp, #16]
 800fbc2:	9b05      	ldr	r3, [sp, #20]
 800fbc4:	4403      	add	r3, r0
 800fbc6:	4480      	add	r8, r0
 800fbc8:	9305      	str	r3, [sp, #20]
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dd05      	ble.n	800fbdc <_dtoa_r+0x734>
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f000 fcd3 	bl	8010580 <__lshift>
 800fbda:	4605      	mov	r5, r0
 800fbdc:	9b05      	ldr	r3, [sp, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	dd05      	ble.n	800fbee <_dtoa_r+0x746>
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f000 fcca 	bl	8010580 <__lshift>
 800fbec:	4604      	mov	r4, r0
 800fbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d06a      	beq.n	800fcca <_dtoa_r+0x822>
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 fd32 	bl	8010660 <__mcmp>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	da64      	bge.n	800fcca <_dtoa_r+0x822>
 800fc00:	2300      	movs	r3, #0
 800fc02:	4629      	mov	r1, r5
 800fc04:	220a      	movs	r2, #10
 800fc06:	4630      	mov	r0, r6
 800fc08:	f000 fb0a 	bl	8010220 <__multadd>
 800fc0c:	9b07      	ldr	r3, [sp, #28]
 800fc0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc12:	4605      	mov	r5, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f000 8191 	beq.w	800ff3c <_dtoa_r+0xa94>
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	220a      	movs	r2, #10
 800fc20:	4630      	mov	r0, r6
 800fc22:	f000 fafd 	bl	8010220 <__multadd>
 800fc26:	f1ba 0f00 	cmp.w	sl, #0
 800fc2a:	4607      	mov	r7, r0
 800fc2c:	f300 808d 	bgt.w	800fd4a <_dtoa_r+0x8a2>
 800fc30:	9b06      	ldr	r3, [sp, #24]
 800fc32:	2b02      	cmp	r3, #2
 800fc34:	dc50      	bgt.n	800fcd8 <_dtoa_r+0x830>
 800fc36:	e088      	b.n	800fd4a <_dtoa_r+0x8a2>
 800fc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc3e:	e751      	b.n	800fae4 <_dtoa_r+0x63c>
 800fc40:	f109 34ff 	add.w	r4, r9, #4294967295
 800fc44:	42a3      	cmp	r3, r4
 800fc46:	bfbf      	itttt	lt
 800fc48:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800fc4a:	1ae3      	sublt	r3, r4, r3
 800fc4c:	18d2      	addlt	r2, r2, r3
 800fc4e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800fc50:	bfb6      	itet	lt
 800fc52:	4623      	movlt	r3, r4
 800fc54:	1b1c      	subge	r4, r3, r4
 800fc56:	2400      	movlt	r4, #0
 800fc58:	f1b9 0f00 	cmp.w	r9, #0
 800fc5c:	bfb5      	itete	lt
 800fc5e:	9a04      	ldrlt	r2, [sp, #16]
 800fc60:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800fc64:	eba2 0809 	sublt.w	r8, r2, r9
 800fc68:	464a      	movge	r2, r9
 800fc6a:	bfb8      	it	lt
 800fc6c:	2200      	movlt	r2, #0
 800fc6e:	e73c      	b.n	800faea <_dtoa_r+0x642>
 800fc70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fc74:	9f07      	ldr	r7, [sp, #28]
 800fc76:	461c      	mov	r4, r3
 800fc78:	e744      	b.n	800fb04 <_dtoa_r+0x65c>
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	e770      	b.n	800fb60 <_dtoa_r+0x6b8>
 800fc7e:	9b06      	ldr	r3, [sp, #24]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	dc18      	bgt.n	800fcb6 <_dtoa_r+0x80e>
 800fc84:	9b02      	ldr	r3, [sp, #8]
 800fc86:	b9b3      	cbnz	r3, 800fcb6 <_dtoa_r+0x80e>
 800fc88:	9b03      	ldr	r3, [sp, #12]
 800fc8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fc8e:	b9a2      	cbnz	r2, 800fcba <_dtoa_r+0x812>
 800fc90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fc94:	0d12      	lsrs	r2, r2, #20
 800fc96:	0512      	lsls	r2, r2, #20
 800fc98:	b18a      	cbz	r2, 800fcbe <_dtoa_r+0x816>
 800fc9a:	9b04      	ldr	r3, [sp, #16]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	9304      	str	r3, [sp, #16]
 800fca0:	9b05      	ldr	r3, [sp, #20]
 800fca2:	3301      	adds	r3, #1
 800fca4:	9305      	str	r3, [sp, #20]
 800fca6:	2301      	movs	r3, #1
 800fca8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f47f af70 	bne.w	800fb92 <_dtoa_r+0x6ea>
 800fcb2:	2001      	movs	r0, #1
 800fcb4:	e775      	b.n	800fba2 <_dtoa_r+0x6fa>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e7f6      	b.n	800fca8 <_dtoa_r+0x800>
 800fcba:	9b02      	ldr	r3, [sp, #8]
 800fcbc:	e7f4      	b.n	800fca8 <_dtoa_r+0x800>
 800fcbe:	920a      	str	r2, [sp, #40]	; 0x28
 800fcc0:	e7f3      	b.n	800fcaa <_dtoa_r+0x802>
 800fcc2:	d082      	beq.n	800fbca <_dtoa_r+0x722>
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	301c      	adds	r0, #28
 800fcc8:	e778      	b.n	800fbbc <_dtoa_r+0x714>
 800fcca:	f1b9 0f00 	cmp.w	r9, #0
 800fcce:	dc37      	bgt.n	800fd40 <_dtoa_r+0x898>
 800fcd0:	9b06      	ldr	r3, [sp, #24]
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	dd34      	ble.n	800fd40 <_dtoa_r+0x898>
 800fcd6:	46ca      	mov	sl, r9
 800fcd8:	f1ba 0f00 	cmp.w	sl, #0
 800fcdc:	d10d      	bne.n	800fcfa <_dtoa_r+0x852>
 800fcde:	4621      	mov	r1, r4
 800fce0:	4653      	mov	r3, sl
 800fce2:	2205      	movs	r2, #5
 800fce4:	4630      	mov	r0, r6
 800fce6:	f000 fa9b 	bl	8010220 <__multadd>
 800fcea:	4601      	mov	r1, r0
 800fcec:	4604      	mov	r4, r0
 800fcee:	4628      	mov	r0, r5
 800fcf0:	f000 fcb6 	bl	8010660 <__mcmp>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	f73f adeb 	bgt.w	800f8d0 <_dtoa_r+0x428>
 800fcfa:	9b08      	ldr	r3, [sp, #32]
 800fcfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fd00:	ea6f 0b03 	mvn.w	fp, r3
 800fd04:	f04f 0900 	mov.w	r9, #0
 800fd08:	4621      	mov	r1, r4
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f000 fa66 	bl	80101dc <_Bfree>
 800fd10:	2f00      	cmp	r7, #0
 800fd12:	f43f aea8 	beq.w	800fa66 <_dtoa_r+0x5be>
 800fd16:	f1b9 0f00 	cmp.w	r9, #0
 800fd1a:	d005      	beq.n	800fd28 <_dtoa_r+0x880>
 800fd1c:	45b9      	cmp	r9, r7
 800fd1e:	d003      	beq.n	800fd28 <_dtoa_r+0x880>
 800fd20:	4649      	mov	r1, r9
 800fd22:	4630      	mov	r0, r6
 800fd24:	f000 fa5a 	bl	80101dc <_Bfree>
 800fd28:	4639      	mov	r1, r7
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f000 fa56 	bl	80101dc <_Bfree>
 800fd30:	e699      	b.n	800fa66 <_dtoa_r+0x5be>
 800fd32:	2400      	movs	r4, #0
 800fd34:	4627      	mov	r7, r4
 800fd36:	e7e0      	b.n	800fcfa <_dtoa_r+0x852>
 800fd38:	46bb      	mov	fp, r7
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	e5c7      	b.n	800f8d0 <_dtoa_r+0x428>
 800fd40:	9b07      	ldr	r3, [sp, #28]
 800fd42:	46ca      	mov	sl, r9
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 8100 	beq.w	800ff4a <_dtoa_r+0xaa2>
 800fd4a:	f1b8 0f00 	cmp.w	r8, #0
 800fd4e:	dd05      	ble.n	800fd5c <_dtoa_r+0x8b4>
 800fd50:	4639      	mov	r1, r7
 800fd52:	4642      	mov	r2, r8
 800fd54:	4630      	mov	r0, r6
 800fd56:	f000 fc13 	bl	8010580 <__lshift>
 800fd5a:	4607      	mov	r7, r0
 800fd5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d05d      	beq.n	800fe1e <_dtoa_r+0x976>
 800fd62:	6879      	ldr	r1, [r7, #4]
 800fd64:	4630      	mov	r0, r6
 800fd66:	f000 f9f9 	bl	801015c <_Balloc>
 800fd6a:	4680      	mov	r8, r0
 800fd6c:	b928      	cbnz	r0, 800fd7a <_dtoa_r+0x8d2>
 800fd6e:	4b82      	ldr	r3, [pc, #520]	; (800ff78 <_dtoa_r+0xad0>)
 800fd70:	4602      	mov	r2, r0
 800fd72:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fd76:	f7ff bbaf 	b.w	800f4d8 <_dtoa_r+0x30>
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	3202      	adds	r2, #2
 800fd7e:	0092      	lsls	r2, r2, #2
 800fd80:	f107 010c 	add.w	r1, r7, #12
 800fd84:	300c      	adds	r0, #12
 800fd86:	f7fe fc77 	bl	800e678 <memcpy>
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	4641      	mov	r1, r8
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 fbf6 	bl	8010580 <__lshift>
 800fd94:	9b01      	ldr	r3, [sp, #4]
 800fd96:	3301      	adds	r3, #1
 800fd98:	9304      	str	r3, [sp, #16]
 800fd9a:	9b01      	ldr	r3, [sp, #4]
 800fd9c:	4453      	add	r3, sl
 800fd9e:	9308      	str	r3, [sp, #32]
 800fda0:	9b02      	ldr	r3, [sp, #8]
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	46b9      	mov	r9, r7
 800fda8:	9307      	str	r3, [sp, #28]
 800fdaa:	4607      	mov	r7, r0
 800fdac:	9b04      	ldr	r3, [sp, #16]
 800fdae:	4621      	mov	r1, r4
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	9302      	str	r3, [sp, #8]
 800fdb6:	f7ff faeb 	bl	800f390 <quorem>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	3330      	adds	r3, #48	; 0x30
 800fdbe:	9005      	str	r0, [sp, #20]
 800fdc0:	4649      	mov	r1, r9
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc6:	f000 fc4b 	bl	8010660 <__mcmp>
 800fdca:	463a      	mov	r2, r7
 800fdcc:	4682      	mov	sl, r0
 800fdce:	4621      	mov	r1, r4
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f000 fc61 	bl	8010698 <__mdiff>
 800fdd6:	68c2      	ldr	r2, [r0, #12]
 800fdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdda:	4680      	mov	r8, r0
 800fddc:	bb0a      	cbnz	r2, 800fe22 <_dtoa_r+0x97a>
 800fdde:	4601      	mov	r1, r0
 800fde0:	4628      	mov	r0, r5
 800fde2:	f000 fc3d 	bl	8010660 <__mcmp>
 800fde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde8:	4602      	mov	r2, r0
 800fdea:	4641      	mov	r1, r8
 800fdec:	4630      	mov	r0, r6
 800fdee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800fdf2:	f000 f9f3 	bl	80101dc <_Bfree>
 800fdf6:	9b06      	ldr	r3, [sp, #24]
 800fdf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdfa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fdfe:	ea43 0102 	orr.w	r1, r3, r2
 800fe02:	9b07      	ldr	r3, [sp, #28]
 800fe04:	430b      	orrs	r3, r1
 800fe06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe08:	d10d      	bne.n	800fe26 <_dtoa_r+0x97e>
 800fe0a:	2b39      	cmp	r3, #57	; 0x39
 800fe0c:	d029      	beq.n	800fe62 <_dtoa_r+0x9ba>
 800fe0e:	f1ba 0f00 	cmp.w	sl, #0
 800fe12:	dd01      	ble.n	800fe18 <_dtoa_r+0x970>
 800fe14:	9b05      	ldr	r3, [sp, #20]
 800fe16:	3331      	adds	r3, #49	; 0x31
 800fe18:	9a02      	ldr	r2, [sp, #8]
 800fe1a:	7013      	strb	r3, [r2, #0]
 800fe1c:	e774      	b.n	800fd08 <_dtoa_r+0x860>
 800fe1e:	4638      	mov	r0, r7
 800fe20:	e7b8      	b.n	800fd94 <_dtoa_r+0x8ec>
 800fe22:	2201      	movs	r2, #1
 800fe24:	e7e1      	b.n	800fdea <_dtoa_r+0x942>
 800fe26:	f1ba 0f00 	cmp.w	sl, #0
 800fe2a:	db06      	blt.n	800fe3a <_dtoa_r+0x992>
 800fe2c:	9906      	ldr	r1, [sp, #24]
 800fe2e:	ea41 0a0a 	orr.w	sl, r1, sl
 800fe32:	9907      	ldr	r1, [sp, #28]
 800fe34:	ea5a 0101 	orrs.w	r1, sl, r1
 800fe38:	d120      	bne.n	800fe7c <_dtoa_r+0x9d4>
 800fe3a:	2a00      	cmp	r2, #0
 800fe3c:	ddec      	ble.n	800fe18 <_dtoa_r+0x970>
 800fe3e:	4629      	mov	r1, r5
 800fe40:	2201      	movs	r2, #1
 800fe42:	4630      	mov	r0, r6
 800fe44:	9304      	str	r3, [sp, #16]
 800fe46:	f000 fb9b 	bl	8010580 <__lshift>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	f000 fc07 	bl	8010660 <__mcmp>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	dc02      	bgt.n	800fe5e <_dtoa_r+0x9b6>
 800fe58:	d1de      	bne.n	800fe18 <_dtoa_r+0x970>
 800fe5a:	07da      	lsls	r2, r3, #31
 800fe5c:	d5dc      	bpl.n	800fe18 <_dtoa_r+0x970>
 800fe5e:	2b39      	cmp	r3, #57	; 0x39
 800fe60:	d1d8      	bne.n	800fe14 <_dtoa_r+0x96c>
 800fe62:	9a02      	ldr	r2, [sp, #8]
 800fe64:	2339      	movs	r3, #57	; 0x39
 800fe66:	7013      	strb	r3, [r2, #0]
 800fe68:	4643      	mov	r3, r8
 800fe6a:	4698      	mov	r8, r3
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fe72:	2a39      	cmp	r2, #57	; 0x39
 800fe74:	d051      	beq.n	800ff1a <_dtoa_r+0xa72>
 800fe76:	3201      	adds	r2, #1
 800fe78:	701a      	strb	r2, [r3, #0]
 800fe7a:	e745      	b.n	800fd08 <_dtoa_r+0x860>
 800fe7c:	2a00      	cmp	r2, #0
 800fe7e:	dd03      	ble.n	800fe88 <_dtoa_r+0x9e0>
 800fe80:	2b39      	cmp	r3, #57	; 0x39
 800fe82:	d0ee      	beq.n	800fe62 <_dtoa_r+0x9ba>
 800fe84:	3301      	adds	r3, #1
 800fe86:	e7c7      	b.n	800fe18 <_dtoa_r+0x970>
 800fe88:	9a04      	ldr	r2, [sp, #16]
 800fe8a:	9908      	ldr	r1, [sp, #32]
 800fe8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fe90:	428a      	cmp	r2, r1
 800fe92:	d02b      	beq.n	800feec <_dtoa_r+0xa44>
 800fe94:	4629      	mov	r1, r5
 800fe96:	2300      	movs	r3, #0
 800fe98:	220a      	movs	r2, #10
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	f000 f9c0 	bl	8010220 <__multadd>
 800fea0:	45b9      	cmp	r9, r7
 800fea2:	4605      	mov	r5, r0
 800fea4:	f04f 0300 	mov.w	r3, #0
 800fea8:	f04f 020a 	mov.w	r2, #10
 800feac:	4649      	mov	r1, r9
 800feae:	4630      	mov	r0, r6
 800feb0:	d107      	bne.n	800fec2 <_dtoa_r+0xa1a>
 800feb2:	f000 f9b5 	bl	8010220 <__multadd>
 800feb6:	4681      	mov	r9, r0
 800feb8:	4607      	mov	r7, r0
 800feba:	9b04      	ldr	r3, [sp, #16]
 800febc:	3301      	adds	r3, #1
 800febe:	9304      	str	r3, [sp, #16]
 800fec0:	e774      	b.n	800fdac <_dtoa_r+0x904>
 800fec2:	f000 f9ad 	bl	8010220 <__multadd>
 800fec6:	4639      	mov	r1, r7
 800fec8:	4681      	mov	r9, r0
 800feca:	2300      	movs	r3, #0
 800fecc:	220a      	movs	r2, #10
 800fece:	4630      	mov	r0, r6
 800fed0:	f000 f9a6 	bl	8010220 <__multadd>
 800fed4:	4607      	mov	r7, r0
 800fed6:	e7f0      	b.n	800feba <_dtoa_r+0xa12>
 800fed8:	f1ba 0f00 	cmp.w	sl, #0
 800fedc:	9a01      	ldr	r2, [sp, #4]
 800fede:	bfcc      	ite	gt
 800fee0:	46d0      	movgt	r8, sl
 800fee2:	f04f 0801 	movle.w	r8, #1
 800fee6:	4490      	add	r8, r2
 800fee8:	f04f 0900 	mov.w	r9, #0
 800feec:	4629      	mov	r1, r5
 800feee:	2201      	movs	r2, #1
 800fef0:	4630      	mov	r0, r6
 800fef2:	9302      	str	r3, [sp, #8]
 800fef4:	f000 fb44 	bl	8010580 <__lshift>
 800fef8:	4621      	mov	r1, r4
 800fefa:	4605      	mov	r5, r0
 800fefc:	f000 fbb0 	bl	8010660 <__mcmp>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	dcb1      	bgt.n	800fe68 <_dtoa_r+0x9c0>
 800ff04:	d102      	bne.n	800ff0c <_dtoa_r+0xa64>
 800ff06:	9b02      	ldr	r3, [sp, #8]
 800ff08:	07db      	lsls	r3, r3, #31
 800ff0a:	d4ad      	bmi.n	800fe68 <_dtoa_r+0x9c0>
 800ff0c:	4643      	mov	r3, r8
 800ff0e:	4698      	mov	r8, r3
 800ff10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff14:	2a30      	cmp	r2, #48	; 0x30
 800ff16:	d0fa      	beq.n	800ff0e <_dtoa_r+0xa66>
 800ff18:	e6f6      	b.n	800fd08 <_dtoa_r+0x860>
 800ff1a:	9a01      	ldr	r2, [sp, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d1a4      	bne.n	800fe6a <_dtoa_r+0x9c2>
 800ff20:	f10b 0b01 	add.w	fp, fp, #1
 800ff24:	2331      	movs	r3, #49	; 0x31
 800ff26:	e778      	b.n	800fe1a <_dtoa_r+0x972>
 800ff28:	4b14      	ldr	r3, [pc, #80]	; (800ff7c <_dtoa_r+0xad4>)
 800ff2a:	f7ff bb27 	b.w	800f57c <_dtoa_r+0xd4>
 800ff2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f47f ab03 	bne.w	800f53c <_dtoa_r+0x94>
 800ff36:	4b12      	ldr	r3, [pc, #72]	; (800ff80 <_dtoa_r+0xad8>)
 800ff38:	f7ff bb20 	b.w	800f57c <_dtoa_r+0xd4>
 800ff3c:	f1ba 0f00 	cmp.w	sl, #0
 800ff40:	dc03      	bgt.n	800ff4a <_dtoa_r+0xaa2>
 800ff42:	9b06      	ldr	r3, [sp, #24]
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	f73f aec7 	bgt.w	800fcd8 <_dtoa_r+0x830>
 800ff4a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4628      	mov	r0, r5
 800ff52:	f7ff fa1d 	bl	800f390 <quorem>
 800ff56:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ff5a:	f808 3b01 	strb.w	r3, [r8], #1
 800ff5e:	9a01      	ldr	r2, [sp, #4]
 800ff60:	eba8 0202 	sub.w	r2, r8, r2
 800ff64:	4592      	cmp	sl, r2
 800ff66:	ddb7      	ble.n	800fed8 <_dtoa_r+0xa30>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	220a      	movs	r2, #10
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f000 f956 	bl	8010220 <__multadd>
 800ff74:	4605      	mov	r5, r0
 800ff76:	e7ea      	b.n	800ff4e <_dtoa_r+0xaa6>
 800ff78:	08011a1b 	.word	0x08011a1b
 800ff7c:	08011978 	.word	0x08011978
 800ff80:	0801199c 	.word	0x0801199c

0800ff84 <__sflush_r>:
 800ff84:	898a      	ldrh	r2, [r1, #12]
 800ff86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	0710      	lsls	r0, r2, #28
 800ff8e:	460c      	mov	r4, r1
 800ff90:	d458      	bmi.n	8010044 <__sflush_r+0xc0>
 800ff92:	684b      	ldr	r3, [r1, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	dc05      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dc02      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d0f9      	beq.n	800ff9e <__sflush_r+0x1a>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffb0:	682f      	ldr	r7, [r5, #0]
 800ffb2:	602b      	str	r3, [r5, #0]
 800ffb4:	d032      	beq.n	801001c <__sflush_r+0x98>
 800ffb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	075a      	lsls	r2, r3, #29
 800ffbc:	d505      	bpl.n	800ffca <__sflush_r+0x46>
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	1ac0      	subs	r0, r0, r3
 800ffc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffc4:	b10b      	cbz	r3, 800ffca <__sflush_r+0x46>
 800ffc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffc8:	1ac0      	subs	r0, r0, r3
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4602      	mov	r2, r0
 800ffce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffd0:	6a21      	ldr	r1, [r4, #32]
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b0      	blx	r6
 800ffd6:	1c43      	adds	r3, r0, #1
 800ffd8:	89a3      	ldrh	r3, [r4, #12]
 800ffda:	d106      	bne.n	800ffea <__sflush_r+0x66>
 800ffdc:	6829      	ldr	r1, [r5, #0]
 800ffde:	291d      	cmp	r1, #29
 800ffe0:	d82c      	bhi.n	801003c <__sflush_r+0xb8>
 800ffe2:	4a2a      	ldr	r2, [pc, #168]	; (801008c <__sflush_r+0x108>)
 800ffe4:	40ca      	lsrs	r2, r1
 800ffe6:	07d6      	lsls	r6, r2, #31
 800ffe8:	d528      	bpl.n	801003c <__sflush_r+0xb8>
 800ffea:	2200      	movs	r2, #0
 800ffec:	6062      	str	r2, [r4, #4]
 800ffee:	04d9      	lsls	r1, r3, #19
 800fff0:	6922      	ldr	r2, [r4, #16]
 800fff2:	6022      	str	r2, [r4, #0]
 800fff4:	d504      	bpl.n	8010000 <__sflush_r+0x7c>
 800fff6:	1c42      	adds	r2, r0, #1
 800fff8:	d101      	bne.n	800fffe <__sflush_r+0x7a>
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	b903      	cbnz	r3, 8010000 <__sflush_r+0x7c>
 800fffe:	6560      	str	r0, [r4, #84]	; 0x54
 8010000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010002:	602f      	str	r7, [r5, #0]
 8010004:	2900      	cmp	r1, #0
 8010006:	d0ca      	beq.n	800ff9e <__sflush_r+0x1a>
 8010008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801000c:	4299      	cmp	r1, r3
 801000e:	d002      	beq.n	8010016 <__sflush_r+0x92>
 8010010:	4628      	mov	r0, r5
 8010012:	f000 fc3d 	bl	8010890 <_free_r>
 8010016:	2000      	movs	r0, #0
 8010018:	6360      	str	r0, [r4, #52]	; 0x34
 801001a:	e7c1      	b.n	800ffa0 <__sflush_r+0x1c>
 801001c:	6a21      	ldr	r1, [r4, #32]
 801001e:	2301      	movs	r3, #1
 8010020:	4628      	mov	r0, r5
 8010022:	47b0      	blx	r6
 8010024:	1c41      	adds	r1, r0, #1
 8010026:	d1c7      	bne.n	800ffb8 <__sflush_r+0x34>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d0c4      	beq.n	800ffb8 <__sflush_r+0x34>
 801002e:	2b1d      	cmp	r3, #29
 8010030:	d001      	beq.n	8010036 <__sflush_r+0xb2>
 8010032:	2b16      	cmp	r3, #22
 8010034:	d101      	bne.n	801003a <__sflush_r+0xb6>
 8010036:	602f      	str	r7, [r5, #0]
 8010038:	e7b1      	b.n	800ff9e <__sflush_r+0x1a>
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	e7ad      	b.n	800ffa0 <__sflush_r+0x1c>
 8010044:	690f      	ldr	r7, [r1, #16]
 8010046:	2f00      	cmp	r7, #0
 8010048:	d0a9      	beq.n	800ff9e <__sflush_r+0x1a>
 801004a:	0793      	lsls	r3, r2, #30
 801004c:	680e      	ldr	r6, [r1, #0]
 801004e:	bf08      	it	eq
 8010050:	694b      	ldreq	r3, [r1, #20]
 8010052:	600f      	str	r7, [r1, #0]
 8010054:	bf18      	it	ne
 8010056:	2300      	movne	r3, #0
 8010058:	eba6 0807 	sub.w	r8, r6, r7
 801005c:	608b      	str	r3, [r1, #8]
 801005e:	f1b8 0f00 	cmp.w	r8, #0
 8010062:	dd9c      	ble.n	800ff9e <__sflush_r+0x1a>
 8010064:	6a21      	ldr	r1, [r4, #32]
 8010066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010068:	4643      	mov	r3, r8
 801006a:	463a      	mov	r2, r7
 801006c:	4628      	mov	r0, r5
 801006e:	47b0      	blx	r6
 8010070:	2800      	cmp	r0, #0
 8010072:	dc06      	bgt.n	8010082 <__sflush_r+0xfe>
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	f04f 30ff 	mov.w	r0, #4294967295
 8010080:	e78e      	b.n	800ffa0 <__sflush_r+0x1c>
 8010082:	4407      	add	r7, r0
 8010084:	eba8 0800 	sub.w	r8, r8, r0
 8010088:	e7e9      	b.n	801005e <__sflush_r+0xda>
 801008a:	bf00      	nop
 801008c:	20400001 	.word	0x20400001

08010090 <_fflush_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	690b      	ldr	r3, [r1, #16]
 8010094:	4605      	mov	r5, r0
 8010096:	460c      	mov	r4, r1
 8010098:	b913      	cbnz	r3, 80100a0 <_fflush_r+0x10>
 801009a:	2500      	movs	r5, #0
 801009c:	4628      	mov	r0, r5
 801009e:	bd38      	pop	{r3, r4, r5, pc}
 80100a0:	b118      	cbz	r0, 80100aa <_fflush_r+0x1a>
 80100a2:	6983      	ldr	r3, [r0, #24]
 80100a4:	b90b      	cbnz	r3, 80100aa <_fflush_r+0x1a>
 80100a6:	f7fe fa21 	bl	800e4ec <__sinit>
 80100aa:	4b14      	ldr	r3, [pc, #80]	; (80100fc <_fflush_r+0x6c>)
 80100ac:	429c      	cmp	r4, r3
 80100ae:	d11b      	bne.n	80100e8 <_fflush_r+0x58>
 80100b0:	686c      	ldr	r4, [r5, #4]
 80100b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d0ef      	beq.n	801009a <_fflush_r+0xa>
 80100ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100bc:	07d0      	lsls	r0, r2, #31
 80100be:	d404      	bmi.n	80100ca <_fflush_r+0x3a>
 80100c0:	0599      	lsls	r1, r3, #22
 80100c2:	d402      	bmi.n	80100ca <_fflush_r+0x3a>
 80100c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100c6:	f7fe fad4 	bl	800e672 <__retarget_lock_acquire_recursive>
 80100ca:	4628      	mov	r0, r5
 80100cc:	4621      	mov	r1, r4
 80100ce:	f7ff ff59 	bl	800ff84 <__sflush_r>
 80100d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100d4:	07da      	lsls	r2, r3, #31
 80100d6:	4605      	mov	r5, r0
 80100d8:	d4e0      	bmi.n	801009c <_fflush_r+0xc>
 80100da:	89a3      	ldrh	r3, [r4, #12]
 80100dc:	059b      	lsls	r3, r3, #22
 80100de:	d4dd      	bmi.n	801009c <_fflush_r+0xc>
 80100e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100e2:	f7fe fac8 	bl	800e676 <__retarget_lock_release_recursive>
 80100e6:	e7d9      	b.n	801009c <_fflush_r+0xc>
 80100e8:	4b05      	ldr	r3, [pc, #20]	; (8010100 <_fflush_r+0x70>)
 80100ea:	429c      	cmp	r4, r3
 80100ec:	d101      	bne.n	80100f2 <_fflush_r+0x62>
 80100ee:	68ac      	ldr	r4, [r5, #8]
 80100f0:	e7df      	b.n	80100b2 <_fflush_r+0x22>
 80100f2:	4b04      	ldr	r3, [pc, #16]	; (8010104 <_fflush_r+0x74>)
 80100f4:	429c      	cmp	r4, r3
 80100f6:	bf08      	it	eq
 80100f8:	68ec      	ldreq	r4, [r5, #12]
 80100fa:	e7da      	b.n	80100b2 <_fflush_r+0x22>
 80100fc:	08011924 	.word	0x08011924
 8010100:	08011944 	.word	0x08011944
 8010104:	08011904 	.word	0x08011904

08010108 <_localeconv_r>:
 8010108:	4800      	ldr	r0, [pc, #0]	; (801010c <_localeconv_r+0x4>)
 801010a:	4770      	bx	lr
 801010c:	24000178 	.word	0x24000178

08010110 <_lseek_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	; (8010130 <_lseek_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f1 f8dc 	bl	80012dc <_lseek>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_lseek_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_lseek_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	240116f8 	.word	0x240116f8

08010134 <malloc>:
 8010134:	4b02      	ldr	r3, [pc, #8]	; (8010140 <malloc+0xc>)
 8010136:	4601      	mov	r1, r0
 8010138:	6818      	ldr	r0, [r3, #0]
 801013a:	f7fe baed 	b.w	800e718 <_malloc_r>
 801013e:	bf00      	nop
 8010140:	24000020 	.word	0x24000020

08010144 <__malloc_lock>:
 8010144:	4801      	ldr	r0, [pc, #4]	; (801014c <__malloc_lock+0x8>)
 8010146:	f7fe ba94 	b.w	800e672 <__retarget_lock_acquire_recursive>
 801014a:	bf00      	nop
 801014c:	240116ed 	.word	0x240116ed

08010150 <__malloc_unlock>:
 8010150:	4801      	ldr	r0, [pc, #4]	; (8010158 <__malloc_unlock+0x8>)
 8010152:	f7fe ba90 	b.w	800e676 <__retarget_lock_release_recursive>
 8010156:	bf00      	nop
 8010158:	240116ed 	.word	0x240116ed

0801015c <_Balloc>:
 801015c:	b570      	push	{r4, r5, r6, lr}
 801015e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010160:	4604      	mov	r4, r0
 8010162:	460d      	mov	r5, r1
 8010164:	b976      	cbnz	r6, 8010184 <_Balloc+0x28>
 8010166:	2010      	movs	r0, #16
 8010168:	f7ff ffe4 	bl	8010134 <malloc>
 801016c:	4602      	mov	r2, r0
 801016e:	6260      	str	r0, [r4, #36]	; 0x24
 8010170:	b920      	cbnz	r0, 801017c <_Balloc+0x20>
 8010172:	4b18      	ldr	r3, [pc, #96]	; (80101d4 <_Balloc+0x78>)
 8010174:	4818      	ldr	r0, [pc, #96]	; (80101d8 <_Balloc+0x7c>)
 8010176:	2166      	movs	r1, #102	; 0x66
 8010178:	f000 fbe8 	bl	801094c <__assert_func>
 801017c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010180:	6006      	str	r6, [r0, #0]
 8010182:	60c6      	str	r6, [r0, #12]
 8010184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010186:	68f3      	ldr	r3, [r6, #12]
 8010188:	b183      	cbz	r3, 80101ac <_Balloc+0x50>
 801018a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010192:	b9b8      	cbnz	r0, 80101c4 <_Balloc+0x68>
 8010194:	2101      	movs	r1, #1
 8010196:	fa01 f605 	lsl.w	r6, r1, r5
 801019a:	1d72      	adds	r2, r6, #5
 801019c:	0092      	lsls	r2, r2, #2
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fb60 	bl	8010864 <_calloc_r>
 80101a4:	b160      	cbz	r0, 80101c0 <_Balloc+0x64>
 80101a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80101aa:	e00e      	b.n	80101ca <_Balloc+0x6e>
 80101ac:	2221      	movs	r2, #33	; 0x21
 80101ae:	2104      	movs	r1, #4
 80101b0:	4620      	mov	r0, r4
 80101b2:	f000 fb57 	bl	8010864 <_calloc_r>
 80101b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101b8:	60f0      	str	r0, [r6, #12]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e4      	bne.n	801018a <_Balloc+0x2e>
 80101c0:	2000      	movs	r0, #0
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	6802      	ldr	r2, [r0, #0]
 80101c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101ca:	2300      	movs	r3, #0
 80101cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101d0:	e7f7      	b.n	80101c2 <_Balloc+0x66>
 80101d2:	bf00      	nop
 80101d4:	080119a9 	.word	0x080119a9
 80101d8:	08011a2c 	.word	0x08011a2c

080101dc <_Bfree>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101e0:	4605      	mov	r5, r0
 80101e2:	460c      	mov	r4, r1
 80101e4:	b976      	cbnz	r6, 8010204 <_Bfree+0x28>
 80101e6:	2010      	movs	r0, #16
 80101e8:	f7ff ffa4 	bl	8010134 <malloc>
 80101ec:	4602      	mov	r2, r0
 80101ee:	6268      	str	r0, [r5, #36]	; 0x24
 80101f0:	b920      	cbnz	r0, 80101fc <_Bfree+0x20>
 80101f2:	4b09      	ldr	r3, [pc, #36]	; (8010218 <_Bfree+0x3c>)
 80101f4:	4809      	ldr	r0, [pc, #36]	; (801021c <_Bfree+0x40>)
 80101f6:	218a      	movs	r1, #138	; 0x8a
 80101f8:	f000 fba8 	bl	801094c <__assert_func>
 80101fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010200:	6006      	str	r6, [r0, #0]
 8010202:	60c6      	str	r6, [r0, #12]
 8010204:	b13c      	cbz	r4, 8010216 <_Bfree+0x3a>
 8010206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010208:	6862      	ldr	r2, [r4, #4]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010210:	6021      	str	r1, [r4, #0]
 8010212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010216:	bd70      	pop	{r4, r5, r6, pc}
 8010218:	080119a9 	.word	0x080119a9
 801021c:	08011a2c 	.word	0x08011a2c

08010220 <__multadd>:
 8010220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	690d      	ldr	r5, [r1, #16]
 8010226:	4607      	mov	r7, r0
 8010228:	460c      	mov	r4, r1
 801022a:	461e      	mov	r6, r3
 801022c:	f101 0c14 	add.w	ip, r1, #20
 8010230:	2000      	movs	r0, #0
 8010232:	f8dc 3000 	ldr.w	r3, [ip]
 8010236:	b299      	uxth	r1, r3
 8010238:	fb02 6101 	mla	r1, r2, r1, r6
 801023c:	0c1e      	lsrs	r6, r3, #16
 801023e:	0c0b      	lsrs	r3, r1, #16
 8010240:	fb02 3306 	mla	r3, r2, r6, r3
 8010244:	b289      	uxth	r1, r1
 8010246:	3001      	adds	r0, #1
 8010248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801024c:	4285      	cmp	r5, r0
 801024e:	f84c 1b04 	str.w	r1, [ip], #4
 8010252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010256:	dcec      	bgt.n	8010232 <__multadd+0x12>
 8010258:	b30e      	cbz	r6, 801029e <__multadd+0x7e>
 801025a:	68a3      	ldr	r3, [r4, #8]
 801025c:	42ab      	cmp	r3, r5
 801025e:	dc19      	bgt.n	8010294 <__multadd+0x74>
 8010260:	6861      	ldr	r1, [r4, #4]
 8010262:	4638      	mov	r0, r7
 8010264:	3101      	adds	r1, #1
 8010266:	f7ff ff79 	bl	801015c <_Balloc>
 801026a:	4680      	mov	r8, r0
 801026c:	b928      	cbnz	r0, 801027a <__multadd+0x5a>
 801026e:	4602      	mov	r2, r0
 8010270:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <__multadd+0x84>)
 8010272:	480d      	ldr	r0, [pc, #52]	; (80102a8 <__multadd+0x88>)
 8010274:	21b5      	movs	r1, #181	; 0xb5
 8010276:	f000 fb69 	bl	801094c <__assert_func>
 801027a:	6922      	ldr	r2, [r4, #16]
 801027c:	3202      	adds	r2, #2
 801027e:	f104 010c 	add.w	r1, r4, #12
 8010282:	0092      	lsls	r2, r2, #2
 8010284:	300c      	adds	r0, #12
 8010286:	f7fe f9f7 	bl	800e678 <memcpy>
 801028a:	4621      	mov	r1, r4
 801028c:	4638      	mov	r0, r7
 801028e:	f7ff ffa5 	bl	80101dc <_Bfree>
 8010292:	4644      	mov	r4, r8
 8010294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010298:	3501      	adds	r5, #1
 801029a:	615e      	str	r6, [r3, #20]
 801029c:	6125      	str	r5, [r4, #16]
 801029e:	4620      	mov	r0, r4
 80102a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a4:	08011a1b 	.word	0x08011a1b
 80102a8:	08011a2c 	.word	0x08011a2c

080102ac <__hi0bits>:
 80102ac:	0c03      	lsrs	r3, r0, #16
 80102ae:	041b      	lsls	r3, r3, #16
 80102b0:	b9d3      	cbnz	r3, 80102e8 <__hi0bits+0x3c>
 80102b2:	0400      	lsls	r0, r0, #16
 80102b4:	2310      	movs	r3, #16
 80102b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80102ba:	bf04      	itt	eq
 80102bc:	0200      	lsleq	r0, r0, #8
 80102be:	3308      	addeq	r3, #8
 80102c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80102c4:	bf04      	itt	eq
 80102c6:	0100      	lsleq	r0, r0, #4
 80102c8:	3304      	addeq	r3, #4
 80102ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80102ce:	bf04      	itt	eq
 80102d0:	0080      	lsleq	r0, r0, #2
 80102d2:	3302      	addeq	r3, #2
 80102d4:	2800      	cmp	r0, #0
 80102d6:	db05      	blt.n	80102e4 <__hi0bits+0x38>
 80102d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102dc:	f103 0301 	add.w	r3, r3, #1
 80102e0:	bf08      	it	eq
 80102e2:	2320      	moveq	r3, #32
 80102e4:	4618      	mov	r0, r3
 80102e6:	4770      	bx	lr
 80102e8:	2300      	movs	r3, #0
 80102ea:	e7e4      	b.n	80102b6 <__hi0bits+0xa>

080102ec <__lo0bits>:
 80102ec:	6803      	ldr	r3, [r0, #0]
 80102ee:	f013 0207 	ands.w	r2, r3, #7
 80102f2:	4601      	mov	r1, r0
 80102f4:	d00b      	beq.n	801030e <__lo0bits+0x22>
 80102f6:	07da      	lsls	r2, r3, #31
 80102f8:	d423      	bmi.n	8010342 <__lo0bits+0x56>
 80102fa:	0798      	lsls	r0, r3, #30
 80102fc:	bf49      	itett	mi
 80102fe:	085b      	lsrmi	r3, r3, #1
 8010300:	089b      	lsrpl	r3, r3, #2
 8010302:	2001      	movmi	r0, #1
 8010304:	600b      	strmi	r3, [r1, #0]
 8010306:	bf5c      	itt	pl
 8010308:	600b      	strpl	r3, [r1, #0]
 801030a:	2002      	movpl	r0, #2
 801030c:	4770      	bx	lr
 801030e:	b298      	uxth	r0, r3
 8010310:	b9a8      	cbnz	r0, 801033e <__lo0bits+0x52>
 8010312:	0c1b      	lsrs	r3, r3, #16
 8010314:	2010      	movs	r0, #16
 8010316:	b2da      	uxtb	r2, r3
 8010318:	b90a      	cbnz	r2, 801031e <__lo0bits+0x32>
 801031a:	3008      	adds	r0, #8
 801031c:	0a1b      	lsrs	r3, r3, #8
 801031e:	071a      	lsls	r2, r3, #28
 8010320:	bf04      	itt	eq
 8010322:	091b      	lsreq	r3, r3, #4
 8010324:	3004      	addeq	r0, #4
 8010326:	079a      	lsls	r2, r3, #30
 8010328:	bf04      	itt	eq
 801032a:	089b      	lsreq	r3, r3, #2
 801032c:	3002      	addeq	r0, #2
 801032e:	07da      	lsls	r2, r3, #31
 8010330:	d403      	bmi.n	801033a <__lo0bits+0x4e>
 8010332:	085b      	lsrs	r3, r3, #1
 8010334:	f100 0001 	add.w	r0, r0, #1
 8010338:	d005      	beq.n	8010346 <__lo0bits+0x5a>
 801033a:	600b      	str	r3, [r1, #0]
 801033c:	4770      	bx	lr
 801033e:	4610      	mov	r0, r2
 8010340:	e7e9      	b.n	8010316 <__lo0bits+0x2a>
 8010342:	2000      	movs	r0, #0
 8010344:	4770      	bx	lr
 8010346:	2020      	movs	r0, #32
 8010348:	4770      	bx	lr
	...

0801034c <__i2b>:
 801034c:	b510      	push	{r4, lr}
 801034e:	460c      	mov	r4, r1
 8010350:	2101      	movs	r1, #1
 8010352:	f7ff ff03 	bl	801015c <_Balloc>
 8010356:	4602      	mov	r2, r0
 8010358:	b928      	cbnz	r0, 8010366 <__i2b+0x1a>
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <__i2b+0x24>)
 801035c:	4805      	ldr	r0, [pc, #20]	; (8010374 <__i2b+0x28>)
 801035e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010362:	f000 faf3 	bl	801094c <__assert_func>
 8010366:	2301      	movs	r3, #1
 8010368:	6144      	str	r4, [r0, #20]
 801036a:	6103      	str	r3, [r0, #16]
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	08011a1b 	.word	0x08011a1b
 8010374:	08011a2c 	.word	0x08011a2c

08010378 <__multiply>:
 8010378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037c:	4691      	mov	r9, r2
 801037e:	690a      	ldr	r2, [r1, #16]
 8010380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010384:	429a      	cmp	r2, r3
 8010386:	bfb8      	it	lt
 8010388:	460b      	movlt	r3, r1
 801038a:	460c      	mov	r4, r1
 801038c:	bfbc      	itt	lt
 801038e:	464c      	movlt	r4, r9
 8010390:	4699      	movlt	r9, r3
 8010392:	6927      	ldr	r7, [r4, #16]
 8010394:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010398:	68a3      	ldr	r3, [r4, #8]
 801039a:	6861      	ldr	r1, [r4, #4]
 801039c:	eb07 060a 	add.w	r6, r7, sl
 80103a0:	42b3      	cmp	r3, r6
 80103a2:	b085      	sub	sp, #20
 80103a4:	bfb8      	it	lt
 80103a6:	3101      	addlt	r1, #1
 80103a8:	f7ff fed8 	bl	801015c <_Balloc>
 80103ac:	b930      	cbnz	r0, 80103bc <__multiply+0x44>
 80103ae:	4602      	mov	r2, r0
 80103b0:	4b44      	ldr	r3, [pc, #272]	; (80104c4 <__multiply+0x14c>)
 80103b2:	4845      	ldr	r0, [pc, #276]	; (80104c8 <__multiply+0x150>)
 80103b4:	f240 115d 	movw	r1, #349	; 0x15d
 80103b8:	f000 fac8 	bl	801094c <__assert_func>
 80103bc:	f100 0514 	add.w	r5, r0, #20
 80103c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80103c4:	462b      	mov	r3, r5
 80103c6:	2200      	movs	r2, #0
 80103c8:	4543      	cmp	r3, r8
 80103ca:	d321      	bcc.n	8010410 <__multiply+0x98>
 80103cc:	f104 0314 	add.w	r3, r4, #20
 80103d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80103d4:	f109 0314 	add.w	r3, r9, #20
 80103d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80103dc:	9202      	str	r2, [sp, #8]
 80103de:	1b3a      	subs	r2, r7, r4
 80103e0:	3a15      	subs	r2, #21
 80103e2:	f022 0203 	bic.w	r2, r2, #3
 80103e6:	3204      	adds	r2, #4
 80103e8:	f104 0115 	add.w	r1, r4, #21
 80103ec:	428f      	cmp	r7, r1
 80103ee:	bf38      	it	cc
 80103f0:	2204      	movcc	r2, #4
 80103f2:	9201      	str	r2, [sp, #4]
 80103f4:	9a02      	ldr	r2, [sp, #8]
 80103f6:	9303      	str	r3, [sp, #12]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d80c      	bhi.n	8010416 <__multiply+0x9e>
 80103fc:	2e00      	cmp	r6, #0
 80103fe:	dd03      	ble.n	8010408 <__multiply+0x90>
 8010400:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010404:	2b00      	cmp	r3, #0
 8010406:	d05a      	beq.n	80104be <__multiply+0x146>
 8010408:	6106      	str	r6, [r0, #16]
 801040a:	b005      	add	sp, #20
 801040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010410:	f843 2b04 	str.w	r2, [r3], #4
 8010414:	e7d8      	b.n	80103c8 <__multiply+0x50>
 8010416:	f8b3 a000 	ldrh.w	sl, [r3]
 801041a:	f1ba 0f00 	cmp.w	sl, #0
 801041e:	d024      	beq.n	801046a <__multiply+0xf2>
 8010420:	f104 0e14 	add.w	lr, r4, #20
 8010424:	46a9      	mov	r9, r5
 8010426:	f04f 0c00 	mov.w	ip, #0
 801042a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801042e:	f8d9 1000 	ldr.w	r1, [r9]
 8010432:	fa1f fb82 	uxth.w	fp, r2
 8010436:	b289      	uxth	r1, r1
 8010438:	fb0a 110b 	mla	r1, sl, fp, r1
 801043c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010440:	f8d9 2000 	ldr.w	r2, [r9]
 8010444:	4461      	add	r1, ip
 8010446:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801044a:	fb0a c20b 	mla	r2, sl, fp, ip
 801044e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010452:	b289      	uxth	r1, r1
 8010454:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010458:	4577      	cmp	r7, lr
 801045a:	f849 1b04 	str.w	r1, [r9], #4
 801045e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010462:	d8e2      	bhi.n	801042a <__multiply+0xb2>
 8010464:	9a01      	ldr	r2, [sp, #4]
 8010466:	f845 c002 	str.w	ip, [r5, r2]
 801046a:	9a03      	ldr	r2, [sp, #12]
 801046c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010470:	3304      	adds	r3, #4
 8010472:	f1b9 0f00 	cmp.w	r9, #0
 8010476:	d020      	beq.n	80104ba <__multiply+0x142>
 8010478:	6829      	ldr	r1, [r5, #0]
 801047a:	f104 0c14 	add.w	ip, r4, #20
 801047e:	46ae      	mov	lr, r5
 8010480:	f04f 0a00 	mov.w	sl, #0
 8010484:	f8bc b000 	ldrh.w	fp, [ip]
 8010488:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801048c:	fb09 220b 	mla	r2, r9, fp, r2
 8010490:	4492      	add	sl, r2
 8010492:	b289      	uxth	r1, r1
 8010494:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010498:	f84e 1b04 	str.w	r1, [lr], #4
 801049c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80104a0:	f8be 1000 	ldrh.w	r1, [lr]
 80104a4:	0c12      	lsrs	r2, r2, #16
 80104a6:	fb09 1102 	mla	r1, r9, r2, r1
 80104aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80104ae:	4567      	cmp	r7, ip
 80104b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80104b4:	d8e6      	bhi.n	8010484 <__multiply+0x10c>
 80104b6:	9a01      	ldr	r2, [sp, #4]
 80104b8:	50a9      	str	r1, [r5, r2]
 80104ba:	3504      	adds	r5, #4
 80104bc:	e79a      	b.n	80103f4 <__multiply+0x7c>
 80104be:	3e01      	subs	r6, #1
 80104c0:	e79c      	b.n	80103fc <__multiply+0x84>
 80104c2:	bf00      	nop
 80104c4:	08011a1b 	.word	0x08011a1b
 80104c8:	08011a2c 	.word	0x08011a2c

080104cc <__pow5mult>:
 80104cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d0:	4615      	mov	r5, r2
 80104d2:	f012 0203 	ands.w	r2, r2, #3
 80104d6:	4606      	mov	r6, r0
 80104d8:	460f      	mov	r7, r1
 80104da:	d007      	beq.n	80104ec <__pow5mult+0x20>
 80104dc:	4c25      	ldr	r4, [pc, #148]	; (8010574 <__pow5mult+0xa8>)
 80104de:	3a01      	subs	r2, #1
 80104e0:	2300      	movs	r3, #0
 80104e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104e6:	f7ff fe9b 	bl	8010220 <__multadd>
 80104ea:	4607      	mov	r7, r0
 80104ec:	10ad      	asrs	r5, r5, #2
 80104ee:	d03d      	beq.n	801056c <__pow5mult+0xa0>
 80104f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104f2:	b97c      	cbnz	r4, 8010514 <__pow5mult+0x48>
 80104f4:	2010      	movs	r0, #16
 80104f6:	f7ff fe1d 	bl	8010134 <malloc>
 80104fa:	4602      	mov	r2, r0
 80104fc:	6270      	str	r0, [r6, #36]	; 0x24
 80104fe:	b928      	cbnz	r0, 801050c <__pow5mult+0x40>
 8010500:	4b1d      	ldr	r3, [pc, #116]	; (8010578 <__pow5mult+0xac>)
 8010502:	481e      	ldr	r0, [pc, #120]	; (801057c <__pow5mult+0xb0>)
 8010504:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010508:	f000 fa20 	bl	801094c <__assert_func>
 801050c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010510:	6004      	str	r4, [r0, #0]
 8010512:	60c4      	str	r4, [r0, #12]
 8010514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801051c:	b94c      	cbnz	r4, 8010532 <__pow5mult+0x66>
 801051e:	f240 2171 	movw	r1, #625	; 0x271
 8010522:	4630      	mov	r0, r6
 8010524:	f7ff ff12 	bl	801034c <__i2b>
 8010528:	2300      	movs	r3, #0
 801052a:	f8c8 0008 	str.w	r0, [r8, #8]
 801052e:	4604      	mov	r4, r0
 8010530:	6003      	str	r3, [r0, #0]
 8010532:	f04f 0900 	mov.w	r9, #0
 8010536:	07eb      	lsls	r3, r5, #31
 8010538:	d50a      	bpl.n	8010550 <__pow5mult+0x84>
 801053a:	4639      	mov	r1, r7
 801053c:	4622      	mov	r2, r4
 801053e:	4630      	mov	r0, r6
 8010540:	f7ff ff1a 	bl	8010378 <__multiply>
 8010544:	4639      	mov	r1, r7
 8010546:	4680      	mov	r8, r0
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff fe47 	bl	80101dc <_Bfree>
 801054e:	4647      	mov	r7, r8
 8010550:	106d      	asrs	r5, r5, #1
 8010552:	d00b      	beq.n	801056c <__pow5mult+0xa0>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	b938      	cbnz	r0, 8010568 <__pow5mult+0x9c>
 8010558:	4622      	mov	r2, r4
 801055a:	4621      	mov	r1, r4
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff ff0b 	bl	8010378 <__multiply>
 8010562:	6020      	str	r0, [r4, #0]
 8010564:	f8c0 9000 	str.w	r9, [r0]
 8010568:	4604      	mov	r4, r0
 801056a:	e7e4      	b.n	8010536 <__pow5mult+0x6a>
 801056c:	4638      	mov	r0, r7
 801056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010572:	bf00      	nop
 8010574:	08011b78 	.word	0x08011b78
 8010578:	080119a9 	.word	0x080119a9
 801057c:	08011a2c 	.word	0x08011a2c

08010580 <__lshift>:
 8010580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010584:	460c      	mov	r4, r1
 8010586:	6849      	ldr	r1, [r1, #4]
 8010588:	6923      	ldr	r3, [r4, #16]
 801058a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	4607      	mov	r7, r0
 8010592:	4691      	mov	r9, r2
 8010594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010598:	f108 0601 	add.w	r6, r8, #1
 801059c:	42b3      	cmp	r3, r6
 801059e:	db0b      	blt.n	80105b8 <__lshift+0x38>
 80105a0:	4638      	mov	r0, r7
 80105a2:	f7ff fddb 	bl	801015c <_Balloc>
 80105a6:	4605      	mov	r5, r0
 80105a8:	b948      	cbnz	r0, 80105be <__lshift+0x3e>
 80105aa:	4602      	mov	r2, r0
 80105ac:	4b2a      	ldr	r3, [pc, #168]	; (8010658 <__lshift+0xd8>)
 80105ae:	482b      	ldr	r0, [pc, #172]	; (801065c <__lshift+0xdc>)
 80105b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80105b4:	f000 f9ca 	bl	801094c <__assert_func>
 80105b8:	3101      	adds	r1, #1
 80105ba:	005b      	lsls	r3, r3, #1
 80105bc:	e7ee      	b.n	801059c <__lshift+0x1c>
 80105be:	2300      	movs	r3, #0
 80105c0:	f100 0114 	add.w	r1, r0, #20
 80105c4:	f100 0210 	add.w	r2, r0, #16
 80105c8:	4618      	mov	r0, r3
 80105ca:	4553      	cmp	r3, sl
 80105cc:	db37      	blt.n	801063e <__lshift+0xbe>
 80105ce:	6920      	ldr	r0, [r4, #16]
 80105d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105d4:	f104 0314 	add.w	r3, r4, #20
 80105d8:	f019 091f 	ands.w	r9, r9, #31
 80105dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80105e4:	d02f      	beq.n	8010646 <__lshift+0xc6>
 80105e6:	f1c9 0e20 	rsb	lr, r9, #32
 80105ea:	468a      	mov	sl, r1
 80105ec:	f04f 0c00 	mov.w	ip, #0
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	fa02 f209 	lsl.w	r2, r2, r9
 80105f6:	ea42 020c 	orr.w	r2, r2, ip
 80105fa:	f84a 2b04 	str.w	r2, [sl], #4
 80105fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010602:	4298      	cmp	r0, r3
 8010604:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010608:	d8f2      	bhi.n	80105f0 <__lshift+0x70>
 801060a:	1b03      	subs	r3, r0, r4
 801060c:	3b15      	subs	r3, #21
 801060e:	f023 0303 	bic.w	r3, r3, #3
 8010612:	3304      	adds	r3, #4
 8010614:	f104 0215 	add.w	r2, r4, #21
 8010618:	4290      	cmp	r0, r2
 801061a:	bf38      	it	cc
 801061c:	2304      	movcc	r3, #4
 801061e:	f841 c003 	str.w	ip, [r1, r3]
 8010622:	f1bc 0f00 	cmp.w	ip, #0
 8010626:	d001      	beq.n	801062c <__lshift+0xac>
 8010628:	f108 0602 	add.w	r6, r8, #2
 801062c:	3e01      	subs	r6, #1
 801062e:	4638      	mov	r0, r7
 8010630:	612e      	str	r6, [r5, #16]
 8010632:	4621      	mov	r1, r4
 8010634:	f7ff fdd2 	bl	80101dc <_Bfree>
 8010638:	4628      	mov	r0, r5
 801063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010642:	3301      	adds	r3, #1
 8010644:	e7c1      	b.n	80105ca <__lshift+0x4a>
 8010646:	3904      	subs	r1, #4
 8010648:	f853 2b04 	ldr.w	r2, [r3], #4
 801064c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010650:	4298      	cmp	r0, r3
 8010652:	d8f9      	bhi.n	8010648 <__lshift+0xc8>
 8010654:	e7ea      	b.n	801062c <__lshift+0xac>
 8010656:	bf00      	nop
 8010658:	08011a1b 	.word	0x08011a1b
 801065c:	08011a2c 	.word	0x08011a2c

08010660 <__mcmp>:
 8010660:	b530      	push	{r4, r5, lr}
 8010662:	6902      	ldr	r2, [r0, #16]
 8010664:	690c      	ldr	r4, [r1, #16]
 8010666:	1b12      	subs	r2, r2, r4
 8010668:	d10e      	bne.n	8010688 <__mcmp+0x28>
 801066a:	f100 0314 	add.w	r3, r0, #20
 801066e:	3114      	adds	r1, #20
 8010670:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010674:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010678:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801067c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010680:	42a5      	cmp	r5, r4
 8010682:	d003      	beq.n	801068c <__mcmp+0x2c>
 8010684:	d305      	bcc.n	8010692 <__mcmp+0x32>
 8010686:	2201      	movs	r2, #1
 8010688:	4610      	mov	r0, r2
 801068a:	bd30      	pop	{r4, r5, pc}
 801068c:	4283      	cmp	r3, r0
 801068e:	d3f3      	bcc.n	8010678 <__mcmp+0x18>
 8010690:	e7fa      	b.n	8010688 <__mcmp+0x28>
 8010692:	f04f 32ff 	mov.w	r2, #4294967295
 8010696:	e7f7      	b.n	8010688 <__mcmp+0x28>

08010698 <__mdiff>:
 8010698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069c:	460c      	mov	r4, r1
 801069e:	4606      	mov	r6, r0
 80106a0:	4611      	mov	r1, r2
 80106a2:	4620      	mov	r0, r4
 80106a4:	4690      	mov	r8, r2
 80106a6:	f7ff ffdb 	bl	8010660 <__mcmp>
 80106aa:	1e05      	subs	r5, r0, #0
 80106ac:	d110      	bne.n	80106d0 <__mdiff+0x38>
 80106ae:	4629      	mov	r1, r5
 80106b0:	4630      	mov	r0, r6
 80106b2:	f7ff fd53 	bl	801015c <_Balloc>
 80106b6:	b930      	cbnz	r0, 80106c6 <__mdiff+0x2e>
 80106b8:	4b3a      	ldr	r3, [pc, #232]	; (80107a4 <__mdiff+0x10c>)
 80106ba:	4602      	mov	r2, r0
 80106bc:	f240 2132 	movw	r1, #562	; 0x232
 80106c0:	4839      	ldr	r0, [pc, #228]	; (80107a8 <__mdiff+0x110>)
 80106c2:	f000 f943 	bl	801094c <__assert_func>
 80106c6:	2301      	movs	r3, #1
 80106c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80106cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d0:	bfa4      	itt	ge
 80106d2:	4643      	movge	r3, r8
 80106d4:	46a0      	movge	r8, r4
 80106d6:	4630      	mov	r0, r6
 80106d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80106dc:	bfa6      	itte	ge
 80106de:	461c      	movge	r4, r3
 80106e0:	2500      	movge	r5, #0
 80106e2:	2501      	movlt	r5, #1
 80106e4:	f7ff fd3a 	bl	801015c <_Balloc>
 80106e8:	b920      	cbnz	r0, 80106f4 <__mdiff+0x5c>
 80106ea:	4b2e      	ldr	r3, [pc, #184]	; (80107a4 <__mdiff+0x10c>)
 80106ec:	4602      	mov	r2, r0
 80106ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106f2:	e7e5      	b.n	80106c0 <__mdiff+0x28>
 80106f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106f8:	6926      	ldr	r6, [r4, #16]
 80106fa:	60c5      	str	r5, [r0, #12]
 80106fc:	f104 0914 	add.w	r9, r4, #20
 8010700:	f108 0514 	add.w	r5, r8, #20
 8010704:	f100 0e14 	add.w	lr, r0, #20
 8010708:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801070c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010710:	f108 0210 	add.w	r2, r8, #16
 8010714:	46f2      	mov	sl, lr
 8010716:	2100      	movs	r1, #0
 8010718:	f859 3b04 	ldr.w	r3, [r9], #4
 801071c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010720:	fa1f f883 	uxth.w	r8, r3
 8010724:	fa11 f18b 	uxtah	r1, r1, fp
 8010728:	0c1b      	lsrs	r3, r3, #16
 801072a:	eba1 0808 	sub.w	r8, r1, r8
 801072e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010732:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010736:	fa1f f888 	uxth.w	r8, r8
 801073a:	1419      	asrs	r1, r3, #16
 801073c:	454e      	cmp	r6, r9
 801073e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010742:	f84a 3b04 	str.w	r3, [sl], #4
 8010746:	d8e7      	bhi.n	8010718 <__mdiff+0x80>
 8010748:	1b33      	subs	r3, r6, r4
 801074a:	3b15      	subs	r3, #21
 801074c:	f023 0303 	bic.w	r3, r3, #3
 8010750:	3304      	adds	r3, #4
 8010752:	3415      	adds	r4, #21
 8010754:	42a6      	cmp	r6, r4
 8010756:	bf38      	it	cc
 8010758:	2304      	movcc	r3, #4
 801075a:	441d      	add	r5, r3
 801075c:	4473      	add	r3, lr
 801075e:	469e      	mov	lr, r3
 8010760:	462e      	mov	r6, r5
 8010762:	4566      	cmp	r6, ip
 8010764:	d30e      	bcc.n	8010784 <__mdiff+0xec>
 8010766:	f10c 0203 	add.w	r2, ip, #3
 801076a:	1b52      	subs	r2, r2, r5
 801076c:	f022 0203 	bic.w	r2, r2, #3
 8010770:	3d03      	subs	r5, #3
 8010772:	45ac      	cmp	ip, r5
 8010774:	bf38      	it	cc
 8010776:	2200      	movcc	r2, #0
 8010778:	441a      	add	r2, r3
 801077a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801077e:	b17b      	cbz	r3, 80107a0 <__mdiff+0x108>
 8010780:	6107      	str	r7, [r0, #16]
 8010782:	e7a3      	b.n	80106cc <__mdiff+0x34>
 8010784:	f856 8b04 	ldr.w	r8, [r6], #4
 8010788:	fa11 f288 	uxtah	r2, r1, r8
 801078c:	1414      	asrs	r4, r2, #16
 801078e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010792:	b292      	uxth	r2, r2
 8010794:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010798:	f84e 2b04 	str.w	r2, [lr], #4
 801079c:	1421      	asrs	r1, r4, #16
 801079e:	e7e0      	b.n	8010762 <__mdiff+0xca>
 80107a0:	3f01      	subs	r7, #1
 80107a2:	e7ea      	b.n	801077a <__mdiff+0xe2>
 80107a4:	08011a1b 	.word	0x08011a1b
 80107a8:	08011a2c 	.word	0x08011a2c

080107ac <__d2b>:
 80107ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4689      	mov	r9, r1
 80107b2:	2101      	movs	r1, #1
 80107b4:	ec57 6b10 	vmov	r6, r7, d0
 80107b8:	4690      	mov	r8, r2
 80107ba:	f7ff fccf 	bl	801015c <_Balloc>
 80107be:	4604      	mov	r4, r0
 80107c0:	b930      	cbnz	r0, 80107d0 <__d2b+0x24>
 80107c2:	4602      	mov	r2, r0
 80107c4:	4b25      	ldr	r3, [pc, #148]	; (801085c <__d2b+0xb0>)
 80107c6:	4826      	ldr	r0, [pc, #152]	; (8010860 <__d2b+0xb4>)
 80107c8:	f240 310a 	movw	r1, #778	; 0x30a
 80107cc:	f000 f8be 	bl	801094c <__assert_func>
 80107d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107d8:	bb35      	cbnz	r5, 8010828 <__d2b+0x7c>
 80107da:	2e00      	cmp	r6, #0
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	d028      	beq.n	8010832 <__d2b+0x86>
 80107e0:	4668      	mov	r0, sp
 80107e2:	9600      	str	r6, [sp, #0]
 80107e4:	f7ff fd82 	bl	80102ec <__lo0bits>
 80107e8:	9900      	ldr	r1, [sp, #0]
 80107ea:	b300      	cbz	r0, 801082e <__d2b+0x82>
 80107ec:	9a01      	ldr	r2, [sp, #4]
 80107ee:	f1c0 0320 	rsb	r3, r0, #32
 80107f2:	fa02 f303 	lsl.w	r3, r2, r3
 80107f6:	430b      	orrs	r3, r1
 80107f8:	40c2      	lsrs	r2, r0
 80107fa:	6163      	str	r3, [r4, #20]
 80107fc:	9201      	str	r2, [sp, #4]
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	61a3      	str	r3, [r4, #24]
 8010802:	2b00      	cmp	r3, #0
 8010804:	bf14      	ite	ne
 8010806:	2202      	movne	r2, #2
 8010808:	2201      	moveq	r2, #1
 801080a:	6122      	str	r2, [r4, #16]
 801080c:	b1d5      	cbz	r5, 8010844 <__d2b+0x98>
 801080e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010812:	4405      	add	r5, r0
 8010814:	f8c9 5000 	str.w	r5, [r9]
 8010818:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801081c:	f8c8 0000 	str.w	r0, [r8]
 8010820:	4620      	mov	r0, r4
 8010822:	b003      	add	sp, #12
 8010824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801082c:	e7d5      	b.n	80107da <__d2b+0x2e>
 801082e:	6161      	str	r1, [r4, #20]
 8010830:	e7e5      	b.n	80107fe <__d2b+0x52>
 8010832:	a801      	add	r0, sp, #4
 8010834:	f7ff fd5a 	bl	80102ec <__lo0bits>
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	6163      	str	r3, [r4, #20]
 801083c:	2201      	movs	r2, #1
 801083e:	6122      	str	r2, [r4, #16]
 8010840:	3020      	adds	r0, #32
 8010842:	e7e3      	b.n	801080c <__d2b+0x60>
 8010844:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801084c:	f8c9 0000 	str.w	r0, [r9]
 8010850:	6918      	ldr	r0, [r3, #16]
 8010852:	f7ff fd2b 	bl	80102ac <__hi0bits>
 8010856:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801085a:	e7df      	b.n	801081c <__d2b+0x70>
 801085c:	08011a1b 	.word	0x08011a1b
 8010860:	08011a2c 	.word	0x08011a2c

08010864 <_calloc_r>:
 8010864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010866:	fba1 2402 	umull	r2, r4, r1, r2
 801086a:	b94c      	cbnz	r4, 8010880 <_calloc_r+0x1c>
 801086c:	4611      	mov	r1, r2
 801086e:	9201      	str	r2, [sp, #4]
 8010870:	f7fd ff52 	bl	800e718 <_malloc_r>
 8010874:	9a01      	ldr	r2, [sp, #4]
 8010876:	4605      	mov	r5, r0
 8010878:	b930      	cbnz	r0, 8010888 <_calloc_r+0x24>
 801087a:	4628      	mov	r0, r5
 801087c:	b003      	add	sp, #12
 801087e:	bd30      	pop	{r4, r5, pc}
 8010880:	220c      	movs	r2, #12
 8010882:	6002      	str	r2, [r0, #0]
 8010884:	2500      	movs	r5, #0
 8010886:	e7f8      	b.n	801087a <_calloc_r+0x16>
 8010888:	4621      	mov	r1, r4
 801088a:	f7fd ff1d 	bl	800e6c8 <memset>
 801088e:	e7f4      	b.n	801087a <_calloc_r+0x16>

08010890 <_free_r>:
 8010890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010892:	2900      	cmp	r1, #0
 8010894:	d044      	beq.n	8010920 <_free_r+0x90>
 8010896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801089a:	9001      	str	r0, [sp, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f1a1 0404 	sub.w	r4, r1, #4
 80108a2:	bfb8      	it	lt
 80108a4:	18e4      	addlt	r4, r4, r3
 80108a6:	f7ff fc4d 	bl	8010144 <__malloc_lock>
 80108aa:	4a1e      	ldr	r2, [pc, #120]	; (8010924 <_free_r+0x94>)
 80108ac:	9801      	ldr	r0, [sp, #4]
 80108ae:	6813      	ldr	r3, [r2, #0]
 80108b0:	b933      	cbnz	r3, 80108c0 <_free_r+0x30>
 80108b2:	6063      	str	r3, [r4, #4]
 80108b4:	6014      	str	r4, [r2, #0]
 80108b6:	b003      	add	sp, #12
 80108b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108bc:	f7ff bc48 	b.w	8010150 <__malloc_unlock>
 80108c0:	42a3      	cmp	r3, r4
 80108c2:	d908      	bls.n	80108d6 <_free_r+0x46>
 80108c4:	6825      	ldr	r5, [r4, #0]
 80108c6:	1961      	adds	r1, r4, r5
 80108c8:	428b      	cmp	r3, r1
 80108ca:	bf01      	itttt	eq
 80108cc:	6819      	ldreq	r1, [r3, #0]
 80108ce:	685b      	ldreq	r3, [r3, #4]
 80108d0:	1949      	addeq	r1, r1, r5
 80108d2:	6021      	streq	r1, [r4, #0]
 80108d4:	e7ed      	b.n	80108b2 <_free_r+0x22>
 80108d6:	461a      	mov	r2, r3
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	b10b      	cbz	r3, 80108e0 <_free_r+0x50>
 80108dc:	42a3      	cmp	r3, r4
 80108de:	d9fa      	bls.n	80108d6 <_free_r+0x46>
 80108e0:	6811      	ldr	r1, [r2, #0]
 80108e2:	1855      	adds	r5, r2, r1
 80108e4:	42a5      	cmp	r5, r4
 80108e6:	d10b      	bne.n	8010900 <_free_r+0x70>
 80108e8:	6824      	ldr	r4, [r4, #0]
 80108ea:	4421      	add	r1, r4
 80108ec:	1854      	adds	r4, r2, r1
 80108ee:	42a3      	cmp	r3, r4
 80108f0:	6011      	str	r1, [r2, #0]
 80108f2:	d1e0      	bne.n	80108b6 <_free_r+0x26>
 80108f4:	681c      	ldr	r4, [r3, #0]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	6053      	str	r3, [r2, #4]
 80108fa:	4421      	add	r1, r4
 80108fc:	6011      	str	r1, [r2, #0]
 80108fe:	e7da      	b.n	80108b6 <_free_r+0x26>
 8010900:	d902      	bls.n	8010908 <_free_r+0x78>
 8010902:	230c      	movs	r3, #12
 8010904:	6003      	str	r3, [r0, #0]
 8010906:	e7d6      	b.n	80108b6 <_free_r+0x26>
 8010908:	6825      	ldr	r5, [r4, #0]
 801090a:	1961      	adds	r1, r4, r5
 801090c:	428b      	cmp	r3, r1
 801090e:	bf04      	itt	eq
 8010910:	6819      	ldreq	r1, [r3, #0]
 8010912:	685b      	ldreq	r3, [r3, #4]
 8010914:	6063      	str	r3, [r4, #4]
 8010916:	bf04      	itt	eq
 8010918:	1949      	addeq	r1, r1, r5
 801091a:	6021      	streq	r1, [r4, #0]
 801091c:	6054      	str	r4, [r2, #4]
 801091e:	e7ca      	b.n	80108b6 <_free_r+0x26>
 8010920:	b003      	add	sp, #12
 8010922:	bd30      	pop	{r4, r5, pc}
 8010924:	240116f0 	.word	0x240116f0

08010928 <_read_r>:
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	4d07      	ldr	r5, [pc, #28]	; (8010948 <_read_r+0x20>)
 801092c:	4604      	mov	r4, r0
 801092e:	4608      	mov	r0, r1
 8010930:	4611      	mov	r1, r2
 8010932:	2200      	movs	r2, #0
 8010934:	602a      	str	r2, [r5, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	f7f0 fcac 	bl	8001294 <_read>
 801093c:	1c43      	adds	r3, r0, #1
 801093e:	d102      	bne.n	8010946 <_read_r+0x1e>
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	b103      	cbz	r3, 8010946 <_read_r+0x1e>
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	bd38      	pop	{r3, r4, r5, pc}
 8010948:	240116f8 	.word	0x240116f8

0801094c <__assert_func>:
 801094c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801094e:	4614      	mov	r4, r2
 8010950:	461a      	mov	r2, r3
 8010952:	4b09      	ldr	r3, [pc, #36]	; (8010978 <__assert_func+0x2c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4605      	mov	r5, r0
 8010958:	68d8      	ldr	r0, [r3, #12]
 801095a:	b14c      	cbz	r4, 8010970 <__assert_func+0x24>
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <__assert_func+0x30>)
 801095e:	9100      	str	r1, [sp, #0]
 8010960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010964:	4906      	ldr	r1, [pc, #24]	; (8010980 <__assert_func+0x34>)
 8010966:	462b      	mov	r3, r5
 8010968:	f000 f80e 	bl	8010988 <fiprintf>
 801096c:	f7fd fd53 	bl	800e416 <abort>
 8010970:	4b04      	ldr	r3, [pc, #16]	; (8010984 <__assert_func+0x38>)
 8010972:	461c      	mov	r4, r3
 8010974:	e7f3      	b.n	801095e <__assert_func+0x12>
 8010976:	bf00      	nop
 8010978:	24000020 	.word	0x24000020
 801097c:	08011b84 	.word	0x08011b84
 8010980:	08011b91 	.word	0x08011b91
 8010984:	08011bbf 	.word	0x08011bbf

08010988 <fiprintf>:
 8010988:	b40e      	push	{r1, r2, r3}
 801098a:	b503      	push	{r0, r1, lr}
 801098c:	4601      	mov	r1, r0
 801098e:	ab03      	add	r3, sp, #12
 8010990:	4805      	ldr	r0, [pc, #20]	; (80109a8 <fiprintf+0x20>)
 8010992:	f853 2b04 	ldr.w	r2, [r3], #4
 8010996:	6800      	ldr	r0, [r0, #0]
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	f000 f843 	bl	8010a24 <_vfiprintf_r>
 801099e:	b002      	add	sp, #8
 80109a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80109a4:	b003      	add	sp, #12
 80109a6:	4770      	bx	lr
 80109a8:	24000020 	.word	0x24000020

080109ac <__ascii_mbtowc>:
 80109ac:	b082      	sub	sp, #8
 80109ae:	b901      	cbnz	r1, 80109b2 <__ascii_mbtowc+0x6>
 80109b0:	a901      	add	r1, sp, #4
 80109b2:	b142      	cbz	r2, 80109c6 <__ascii_mbtowc+0x1a>
 80109b4:	b14b      	cbz	r3, 80109ca <__ascii_mbtowc+0x1e>
 80109b6:	7813      	ldrb	r3, [r2, #0]
 80109b8:	600b      	str	r3, [r1, #0]
 80109ba:	7812      	ldrb	r2, [r2, #0]
 80109bc:	1e10      	subs	r0, r2, #0
 80109be:	bf18      	it	ne
 80109c0:	2001      	movne	r0, #1
 80109c2:	b002      	add	sp, #8
 80109c4:	4770      	bx	lr
 80109c6:	4610      	mov	r0, r2
 80109c8:	e7fb      	b.n	80109c2 <__ascii_mbtowc+0x16>
 80109ca:	f06f 0001 	mvn.w	r0, #1
 80109ce:	e7f8      	b.n	80109c2 <__ascii_mbtowc+0x16>

080109d0 <__sfputc_r>:
 80109d0:	6893      	ldr	r3, [r2, #8]
 80109d2:	3b01      	subs	r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	b410      	push	{r4}
 80109d8:	6093      	str	r3, [r2, #8]
 80109da:	da08      	bge.n	80109ee <__sfputc_r+0x1e>
 80109dc:	6994      	ldr	r4, [r2, #24]
 80109de:	42a3      	cmp	r3, r4
 80109e0:	db01      	blt.n	80109e6 <__sfputc_r+0x16>
 80109e2:	290a      	cmp	r1, #10
 80109e4:	d103      	bne.n	80109ee <__sfputc_r+0x1e>
 80109e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ea:	f000 b94b 	b.w	8010c84 <__swbuf_r>
 80109ee:	6813      	ldr	r3, [r2, #0]
 80109f0:	1c58      	adds	r0, r3, #1
 80109f2:	6010      	str	r0, [r2, #0]
 80109f4:	7019      	strb	r1, [r3, #0]
 80109f6:	4608      	mov	r0, r1
 80109f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109fc:	4770      	bx	lr

080109fe <__sfputs_r>:
 80109fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a00:	4606      	mov	r6, r0
 8010a02:	460f      	mov	r7, r1
 8010a04:	4614      	mov	r4, r2
 8010a06:	18d5      	adds	r5, r2, r3
 8010a08:	42ac      	cmp	r4, r5
 8010a0a:	d101      	bne.n	8010a10 <__sfputs_r+0x12>
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	e007      	b.n	8010a20 <__sfputs_r+0x22>
 8010a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a14:	463a      	mov	r2, r7
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7ff ffda 	bl	80109d0 <__sfputc_r>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d1f3      	bne.n	8010a08 <__sfputs_r+0xa>
 8010a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a24 <_vfiprintf_r>:
 8010a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a28:	460d      	mov	r5, r1
 8010a2a:	b09d      	sub	sp, #116	; 0x74
 8010a2c:	4614      	mov	r4, r2
 8010a2e:	4698      	mov	r8, r3
 8010a30:	4606      	mov	r6, r0
 8010a32:	b118      	cbz	r0, 8010a3c <_vfiprintf_r+0x18>
 8010a34:	6983      	ldr	r3, [r0, #24]
 8010a36:	b90b      	cbnz	r3, 8010a3c <_vfiprintf_r+0x18>
 8010a38:	f7fd fd58 	bl	800e4ec <__sinit>
 8010a3c:	4b89      	ldr	r3, [pc, #548]	; (8010c64 <_vfiprintf_r+0x240>)
 8010a3e:	429d      	cmp	r5, r3
 8010a40:	d11b      	bne.n	8010a7a <_vfiprintf_r+0x56>
 8010a42:	6875      	ldr	r5, [r6, #4]
 8010a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a46:	07d9      	lsls	r1, r3, #31
 8010a48:	d405      	bmi.n	8010a56 <_vfiprintf_r+0x32>
 8010a4a:	89ab      	ldrh	r3, [r5, #12]
 8010a4c:	059a      	lsls	r2, r3, #22
 8010a4e:	d402      	bmi.n	8010a56 <_vfiprintf_r+0x32>
 8010a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a52:	f7fd fe0e 	bl	800e672 <__retarget_lock_acquire_recursive>
 8010a56:	89ab      	ldrh	r3, [r5, #12]
 8010a58:	071b      	lsls	r3, r3, #28
 8010a5a:	d501      	bpl.n	8010a60 <_vfiprintf_r+0x3c>
 8010a5c:	692b      	ldr	r3, [r5, #16]
 8010a5e:	b9eb      	cbnz	r3, 8010a9c <_vfiprintf_r+0x78>
 8010a60:	4629      	mov	r1, r5
 8010a62:	4630      	mov	r0, r6
 8010a64:	f000 f96e 	bl	8010d44 <__swsetup_r>
 8010a68:	b1c0      	cbz	r0, 8010a9c <_vfiprintf_r+0x78>
 8010a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a6c:	07dc      	lsls	r4, r3, #31
 8010a6e:	d50e      	bpl.n	8010a8e <_vfiprintf_r+0x6a>
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295
 8010a74:	b01d      	add	sp, #116	; 0x74
 8010a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7a:	4b7b      	ldr	r3, [pc, #492]	; (8010c68 <_vfiprintf_r+0x244>)
 8010a7c:	429d      	cmp	r5, r3
 8010a7e:	d101      	bne.n	8010a84 <_vfiprintf_r+0x60>
 8010a80:	68b5      	ldr	r5, [r6, #8]
 8010a82:	e7df      	b.n	8010a44 <_vfiprintf_r+0x20>
 8010a84:	4b79      	ldr	r3, [pc, #484]	; (8010c6c <_vfiprintf_r+0x248>)
 8010a86:	429d      	cmp	r5, r3
 8010a88:	bf08      	it	eq
 8010a8a:	68f5      	ldreq	r5, [r6, #12]
 8010a8c:	e7da      	b.n	8010a44 <_vfiprintf_r+0x20>
 8010a8e:	89ab      	ldrh	r3, [r5, #12]
 8010a90:	0598      	lsls	r0, r3, #22
 8010a92:	d4ed      	bmi.n	8010a70 <_vfiprintf_r+0x4c>
 8010a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a96:	f7fd fdee 	bl	800e676 <__retarget_lock_release_recursive>
 8010a9a:	e7e9      	b.n	8010a70 <_vfiprintf_r+0x4c>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010aa0:	2320      	movs	r3, #32
 8010aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aaa:	2330      	movs	r3, #48	; 0x30
 8010aac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c70 <_vfiprintf_r+0x24c>
 8010ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ab4:	f04f 0901 	mov.w	r9, #1
 8010ab8:	4623      	mov	r3, r4
 8010aba:	469a      	mov	sl, r3
 8010abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac0:	b10a      	cbz	r2, 8010ac6 <_vfiprintf_r+0xa2>
 8010ac2:	2a25      	cmp	r2, #37	; 0x25
 8010ac4:	d1f9      	bne.n	8010aba <_vfiprintf_r+0x96>
 8010ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8010aca:	d00b      	beq.n	8010ae4 <_vfiprintf_r+0xc0>
 8010acc:	465b      	mov	r3, fp
 8010ace:	4622      	mov	r2, r4
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7ff ff93 	bl	80109fe <__sfputs_r>
 8010ad8:	3001      	adds	r0, #1
 8010ada:	f000 80aa 	beq.w	8010c32 <_vfiprintf_r+0x20e>
 8010ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ae0:	445a      	add	r2, fp
 8010ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f000 80a2 	beq.w	8010c32 <_vfiprintf_r+0x20e>
 8010aee:	2300      	movs	r3, #0
 8010af0:	f04f 32ff 	mov.w	r2, #4294967295
 8010af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010af8:	f10a 0a01 	add.w	sl, sl, #1
 8010afc:	9304      	str	r3, [sp, #16]
 8010afe:	9307      	str	r3, [sp, #28]
 8010b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b04:	931a      	str	r3, [sp, #104]	; 0x68
 8010b06:	4654      	mov	r4, sl
 8010b08:	2205      	movs	r2, #5
 8010b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b0e:	4858      	ldr	r0, [pc, #352]	; (8010c70 <_vfiprintf_r+0x24c>)
 8010b10:	f7ef fbfe 	bl	8000310 <memchr>
 8010b14:	9a04      	ldr	r2, [sp, #16]
 8010b16:	b9d8      	cbnz	r0, 8010b50 <_vfiprintf_r+0x12c>
 8010b18:	06d1      	lsls	r1, r2, #27
 8010b1a:	bf44      	itt	mi
 8010b1c:	2320      	movmi	r3, #32
 8010b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b22:	0713      	lsls	r3, r2, #28
 8010b24:	bf44      	itt	mi
 8010b26:	232b      	movmi	r3, #43	; 0x2b
 8010b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b30:	2b2a      	cmp	r3, #42	; 0x2a
 8010b32:	d015      	beq.n	8010b60 <_vfiprintf_r+0x13c>
 8010b34:	9a07      	ldr	r2, [sp, #28]
 8010b36:	4654      	mov	r4, sl
 8010b38:	2000      	movs	r0, #0
 8010b3a:	f04f 0c0a 	mov.w	ip, #10
 8010b3e:	4621      	mov	r1, r4
 8010b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b44:	3b30      	subs	r3, #48	; 0x30
 8010b46:	2b09      	cmp	r3, #9
 8010b48:	d94e      	bls.n	8010be8 <_vfiprintf_r+0x1c4>
 8010b4a:	b1b0      	cbz	r0, 8010b7a <_vfiprintf_r+0x156>
 8010b4c:	9207      	str	r2, [sp, #28]
 8010b4e:	e014      	b.n	8010b7a <_vfiprintf_r+0x156>
 8010b50:	eba0 0308 	sub.w	r3, r0, r8
 8010b54:	fa09 f303 	lsl.w	r3, r9, r3
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	9304      	str	r3, [sp, #16]
 8010b5c:	46a2      	mov	sl, r4
 8010b5e:	e7d2      	b.n	8010b06 <_vfiprintf_r+0xe2>
 8010b60:	9b03      	ldr	r3, [sp, #12]
 8010b62:	1d19      	adds	r1, r3, #4
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	9103      	str	r1, [sp, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bfbb      	ittet	lt
 8010b6c:	425b      	neglt	r3, r3
 8010b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8010b72:	9307      	strge	r3, [sp, #28]
 8010b74:	9307      	strlt	r3, [sp, #28]
 8010b76:	bfb8      	it	lt
 8010b78:	9204      	strlt	r2, [sp, #16]
 8010b7a:	7823      	ldrb	r3, [r4, #0]
 8010b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8010b7e:	d10c      	bne.n	8010b9a <_vfiprintf_r+0x176>
 8010b80:	7863      	ldrb	r3, [r4, #1]
 8010b82:	2b2a      	cmp	r3, #42	; 0x2a
 8010b84:	d135      	bne.n	8010bf2 <_vfiprintf_r+0x1ce>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	1d1a      	adds	r2, r3, #4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	9203      	str	r2, [sp, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	bfb8      	it	lt
 8010b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b96:	3402      	adds	r4, #2
 8010b98:	9305      	str	r3, [sp, #20]
 8010b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c80 <_vfiprintf_r+0x25c>
 8010b9e:	7821      	ldrb	r1, [r4, #0]
 8010ba0:	2203      	movs	r2, #3
 8010ba2:	4650      	mov	r0, sl
 8010ba4:	f7ef fbb4 	bl	8000310 <memchr>
 8010ba8:	b140      	cbz	r0, 8010bbc <_vfiprintf_r+0x198>
 8010baa:	2340      	movs	r3, #64	; 0x40
 8010bac:	eba0 000a 	sub.w	r0, r0, sl
 8010bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8010bb4:	9b04      	ldr	r3, [sp, #16]
 8010bb6:	4303      	orrs	r3, r0
 8010bb8:	3401      	adds	r4, #1
 8010bba:	9304      	str	r3, [sp, #16]
 8010bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc0:	482c      	ldr	r0, [pc, #176]	; (8010c74 <_vfiprintf_r+0x250>)
 8010bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bc6:	2206      	movs	r2, #6
 8010bc8:	f7ef fba2 	bl	8000310 <memchr>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d03f      	beq.n	8010c50 <_vfiprintf_r+0x22c>
 8010bd0:	4b29      	ldr	r3, [pc, #164]	; (8010c78 <_vfiprintf_r+0x254>)
 8010bd2:	bb1b      	cbnz	r3, 8010c1c <_vfiprintf_r+0x1f8>
 8010bd4:	9b03      	ldr	r3, [sp, #12]
 8010bd6:	3307      	adds	r3, #7
 8010bd8:	f023 0307 	bic.w	r3, r3, #7
 8010bdc:	3308      	adds	r3, #8
 8010bde:	9303      	str	r3, [sp, #12]
 8010be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be2:	443b      	add	r3, r7
 8010be4:	9309      	str	r3, [sp, #36]	; 0x24
 8010be6:	e767      	b.n	8010ab8 <_vfiprintf_r+0x94>
 8010be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bec:	460c      	mov	r4, r1
 8010bee:	2001      	movs	r0, #1
 8010bf0:	e7a5      	b.n	8010b3e <_vfiprintf_r+0x11a>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	3401      	adds	r4, #1
 8010bf6:	9305      	str	r3, [sp, #20]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	f04f 0c0a 	mov.w	ip, #10
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c04:	3a30      	subs	r2, #48	; 0x30
 8010c06:	2a09      	cmp	r2, #9
 8010c08:	d903      	bls.n	8010c12 <_vfiprintf_r+0x1ee>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d0c5      	beq.n	8010b9a <_vfiprintf_r+0x176>
 8010c0e:	9105      	str	r1, [sp, #20]
 8010c10:	e7c3      	b.n	8010b9a <_vfiprintf_r+0x176>
 8010c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c16:	4604      	mov	r4, r0
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e7f0      	b.n	8010bfe <_vfiprintf_r+0x1da>
 8010c1c:	ab03      	add	r3, sp, #12
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	462a      	mov	r2, r5
 8010c22:	4b16      	ldr	r3, [pc, #88]	; (8010c7c <_vfiprintf_r+0x258>)
 8010c24:	a904      	add	r1, sp, #16
 8010c26:	4630      	mov	r0, r6
 8010c28:	f7fd fe7a 	bl	800e920 <_printf_float>
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	1c78      	adds	r0, r7, #1
 8010c30:	d1d6      	bne.n	8010be0 <_vfiprintf_r+0x1bc>
 8010c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c34:	07d9      	lsls	r1, r3, #31
 8010c36:	d405      	bmi.n	8010c44 <_vfiprintf_r+0x220>
 8010c38:	89ab      	ldrh	r3, [r5, #12]
 8010c3a:	059a      	lsls	r2, r3, #22
 8010c3c:	d402      	bmi.n	8010c44 <_vfiprintf_r+0x220>
 8010c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c40:	f7fd fd19 	bl	800e676 <__retarget_lock_release_recursive>
 8010c44:	89ab      	ldrh	r3, [r5, #12]
 8010c46:	065b      	lsls	r3, r3, #25
 8010c48:	f53f af12 	bmi.w	8010a70 <_vfiprintf_r+0x4c>
 8010c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c4e:	e711      	b.n	8010a74 <_vfiprintf_r+0x50>
 8010c50:	ab03      	add	r3, sp, #12
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	462a      	mov	r2, r5
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <_vfiprintf_r+0x258>)
 8010c58:	a904      	add	r1, sp, #16
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f7fe f8ec 	bl	800ee38 <_printf_i>
 8010c60:	e7e4      	b.n	8010c2c <_vfiprintf_r+0x208>
 8010c62:	bf00      	nop
 8010c64:	08011924 	.word	0x08011924
 8010c68:	08011944 	.word	0x08011944
 8010c6c:	08011904 	.word	0x08011904
 8010c70:	08011bca 	.word	0x08011bca
 8010c74:	08011bd4 	.word	0x08011bd4
 8010c78:	0800e921 	.word	0x0800e921
 8010c7c:	080109ff 	.word	0x080109ff
 8010c80:	08011bd0 	.word	0x08011bd0

08010c84 <__swbuf_r>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	460e      	mov	r6, r1
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4605      	mov	r5, r0
 8010c8c:	b118      	cbz	r0, 8010c96 <__swbuf_r+0x12>
 8010c8e:	6983      	ldr	r3, [r0, #24]
 8010c90:	b90b      	cbnz	r3, 8010c96 <__swbuf_r+0x12>
 8010c92:	f7fd fc2b 	bl	800e4ec <__sinit>
 8010c96:	4b21      	ldr	r3, [pc, #132]	; (8010d1c <__swbuf_r+0x98>)
 8010c98:	429c      	cmp	r4, r3
 8010c9a:	d12b      	bne.n	8010cf4 <__swbuf_r+0x70>
 8010c9c:	686c      	ldr	r4, [r5, #4]
 8010c9e:	69a3      	ldr	r3, [r4, #24]
 8010ca0:	60a3      	str	r3, [r4, #8]
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	071a      	lsls	r2, r3, #28
 8010ca6:	d52f      	bpl.n	8010d08 <__swbuf_r+0x84>
 8010ca8:	6923      	ldr	r3, [r4, #16]
 8010caa:	b36b      	cbz	r3, 8010d08 <__swbuf_r+0x84>
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	6820      	ldr	r0, [r4, #0]
 8010cb0:	1ac0      	subs	r0, r0, r3
 8010cb2:	6963      	ldr	r3, [r4, #20]
 8010cb4:	b2f6      	uxtb	r6, r6
 8010cb6:	4283      	cmp	r3, r0
 8010cb8:	4637      	mov	r7, r6
 8010cba:	dc04      	bgt.n	8010cc6 <__swbuf_r+0x42>
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f7ff f9e6 	bl	8010090 <_fflush_r>
 8010cc4:	bb30      	cbnz	r0, 8010d14 <__swbuf_r+0x90>
 8010cc6:	68a3      	ldr	r3, [r4, #8]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	60a3      	str	r3, [r4, #8]
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	6022      	str	r2, [r4, #0]
 8010cd2:	701e      	strb	r6, [r3, #0]
 8010cd4:	6963      	ldr	r3, [r4, #20]
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	4283      	cmp	r3, r0
 8010cda:	d004      	beq.n	8010ce6 <__swbuf_r+0x62>
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	07db      	lsls	r3, r3, #31
 8010ce0:	d506      	bpl.n	8010cf0 <__swbuf_r+0x6c>
 8010ce2:	2e0a      	cmp	r6, #10
 8010ce4:	d104      	bne.n	8010cf0 <__swbuf_r+0x6c>
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f7ff f9d1 	bl	8010090 <_fflush_r>
 8010cee:	b988      	cbnz	r0, 8010d14 <__swbuf_r+0x90>
 8010cf0:	4638      	mov	r0, r7
 8010cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cf4:	4b0a      	ldr	r3, [pc, #40]	; (8010d20 <__swbuf_r+0x9c>)
 8010cf6:	429c      	cmp	r4, r3
 8010cf8:	d101      	bne.n	8010cfe <__swbuf_r+0x7a>
 8010cfa:	68ac      	ldr	r4, [r5, #8]
 8010cfc:	e7cf      	b.n	8010c9e <__swbuf_r+0x1a>
 8010cfe:	4b09      	ldr	r3, [pc, #36]	; (8010d24 <__swbuf_r+0xa0>)
 8010d00:	429c      	cmp	r4, r3
 8010d02:	bf08      	it	eq
 8010d04:	68ec      	ldreq	r4, [r5, #12]
 8010d06:	e7ca      	b.n	8010c9e <__swbuf_r+0x1a>
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f000 f81a 	bl	8010d44 <__swsetup_r>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d0cb      	beq.n	8010cac <__swbuf_r+0x28>
 8010d14:	f04f 37ff 	mov.w	r7, #4294967295
 8010d18:	e7ea      	b.n	8010cf0 <__swbuf_r+0x6c>
 8010d1a:	bf00      	nop
 8010d1c:	08011924 	.word	0x08011924
 8010d20:	08011944 	.word	0x08011944
 8010d24:	08011904 	.word	0x08011904

08010d28 <__ascii_wctomb>:
 8010d28:	b149      	cbz	r1, 8010d3e <__ascii_wctomb+0x16>
 8010d2a:	2aff      	cmp	r2, #255	; 0xff
 8010d2c:	bf85      	ittet	hi
 8010d2e:	238a      	movhi	r3, #138	; 0x8a
 8010d30:	6003      	strhi	r3, [r0, #0]
 8010d32:	700a      	strbls	r2, [r1, #0]
 8010d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d38:	bf98      	it	ls
 8010d3a:	2001      	movls	r0, #1
 8010d3c:	4770      	bx	lr
 8010d3e:	4608      	mov	r0, r1
 8010d40:	4770      	bx	lr
	...

08010d44 <__swsetup_r>:
 8010d44:	4b32      	ldr	r3, [pc, #200]	; (8010e10 <__swsetup_r+0xcc>)
 8010d46:	b570      	push	{r4, r5, r6, lr}
 8010d48:	681d      	ldr	r5, [r3, #0]
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460c      	mov	r4, r1
 8010d4e:	b125      	cbz	r5, 8010d5a <__swsetup_r+0x16>
 8010d50:	69ab      	ldr	r3, [r5, #24]
 8010d52:	b913      	cbnz	r3, 8010d5a <__swsetup_r+0x16>
 8010d54:	4628      	mov	r0, r5
 8010d56:	f7fd fbc9 	bl	800e4ec <__sinit>
 8010d5a:	4b2e      	ldr	r3, [pc, #184]	; (8010e14 <__swsetup_r+0xd0>)
 8010d5c:	429c      	cmp	r4, r3
 8010d5e:	d10f      	bne.n	8010d80 <__swsetup_r+0x3c>
 8010d60:	686c      	ldr	r4, [r5, #4]
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d68:	0719      	lsls	r1, r3, #28
 8010d6a:	d42c      	bmi.n	8010dc6 <__swsetup_r+0x82>
 8010d6c:	06dd      	lsls	r5, r3, #27
 8010d6e:	d411      	bmi.n	8010d94 <__swsetup_r+0x50>
 8010d70:	2309      	movs	r3, #9
 8010d72:	6033      	str	r3, [r6, #0]
 8010d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d78:	81a3      	strh	r3, [r4, #12]
 8010d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7e:	e03e      	b.n	8010dfe <__swsetup_r+0xba>
 8010d80:	4b25      	ldr	r3, [pc, #148]	; (8010e18 <__swsetup_r+0xd4>)
 8010d82:	429c      	cmp	r4, r3
 8010d84:	d101      	bne.n	8010d8a <__swsetup_r+0x46>
 8010d86:	68ac      	ldr	r4, [r5, #8]
 8010d88:	e7eb      	b.n	8010d62 <__swsetup_r+0x1e>
 8010d8a:	4b24      	ldr	r3, [pc, #144]	; (8010e1c <__swsetup_r+0xd8>)
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	bf08      	it	eq
 8010d90:	68ec      	ldreq	r4, [r5, #12]
 8010d92:	e7e6      	b.n	8010d62 <__swsetup_r+0x1e>
 8010d94:	0758      	lsls	r0, r3, #29
 8010d96:	d512      	bpl.n	8010dbe <__swsetup_r+0x7a>
 8010d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d9a:	b141      	cbz	r1, 8010dae <__swsetup_r+0x6a>
 8010d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010da0:	4299      	cmp	r1, r3
 8010da2:	d002      	beq.n	8010daa <__swsetup_r+0x66>
 8010da4:	4630      	mov	r0, r6
 8010da6:	f7ff fd73 	bl	8010890 <_free_r>
 8010daa:	2300      	movs	r3, #0
 8010dac:	6363      	str	r3, [r4, #52]	; 0x34
 8010dae:	89a3      	ldrh	r3, [r4, #12]
 8010db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010db4:	81a3      	strh	r3, [r4, #12]
 8010db6:	2300      	movs	r3, #0
 8010db8:	6063      	str	r3, [r4, #4]
 8010dba:	6923      	ldr	r3, [r4, #16]
 8010dbc:	6023      	str	r3, [r4, #0]
 8010dbe:	89a3      	ldrh	r3, [r4, #12]
 8010dc0:	f043 0308 	orr.w	r3, r3, #8
 8010dc4:	81a3      	strh	r3, [r4, #12]
 8010dc6:	6923      	ldr	r3, [r4, #16]
 8010dc8:	b94b      	cbnz	r3, 8010dde <__swsetup_r+0x9a>
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010dd4:	d003      	beq.n	8010dde <__swsetup_r+0x9a>
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f000 f847 	bl	8010e6c <__smakebuf_r>
 8010dde:	89a0      	ldrh	r0, [r4, #12]
 8010de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010de4:	f010 0301 	ands.w	r3, r0, #1
 8010de8:	d00a      	beq.n	8010e00 <__swsetup_r+0xbc>
 8010dea:	2300      	movs	r3, #0
 8010dec:	60a3      	str	r3, [r4, #8]
 8010dee:	6963      	ldr	r3, [r4, #20]
 8010df0:	425b      	negs	r3, r3
 8010df2:	61a3      	str	r3, [r4, #24]
 8010df4:	6923      	ldr	r3, [r4, #16]
 8010df6:	b943      	cbnz	r3, 8010e0a <__swsetup_r+0xc6>
 8010df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010dfc:	d1ba      	bne.n	8010d74 <__swsetup_r+0x30>
 8010dfe:	bd70      	pop	{r4, r5, r6, pc}
 8010e00:	0781      	lsls	r1, r0, #30
 8010e02:	bf58      	it	pl
 8010e04:	6963      	ldrpl	r3, [r4, #20]
 8010e06:	60a3      	str	r3, [r4, #8]
 8010e08:	e7f4      	b.n	8010df4 <__swsetup_r+0xb0>
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	e7f7      	b.n	8010dfe <__swsetup_r+0xba>
 8010e0e:	bf00      	nop
 8010e10:	24000020 	.word	0x24000020
 8010e14:	08011924 	.word	0x08011924
 8010e18:	08011944 	.word	0x08011944
 8010e1c:	08011904 	.word	0x08011904

08010e20 <__swhatbuf_r>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	460e      	mov	r6, r1
 8010e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e28:	2900      	cmp	r1, #0
 8010e2a:	b096      	sub	sp, #88	; 0x58
 8010e2c:	4614      	mov	r4, r2
 8010e2e:	461d      	mov	r5, r3
 8010e30:	da08      	bge.n	8010e44 <__swhatbuf_r+0x24>
 8010e32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e36:	2200      	movs	r2, #0
 8010e38:	602a      	str	r2, [r5, #0]
 8010e3a:	061a      	lsls	r2, r3, #24
 8010e3c:	d410      	bmi.n	8010e60 <__swhatbuf_r+0x40>
 8010e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e42:	e00e      	b.n	8010e62 <__swhatbuf_r+0x42>
 8010e44:	466a      	mov	r2, sp
 8010e46:	f000 f851 	bl	8010eec <_fstat_r>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	dbf1      	blt.n	8010e32 <__swhatbuf_r+0x12>
 8010e4e:	9a01      	ldr	r2, [sp, #4]
 8010e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e58:	425a      	negs	r2, r3
 8010e5a:	415a      	adcs	r2, r3
 8010e5c:	602a      	str	r2, [r5, #0]
 8010e5e:	e7ee      	b.n	8010e3e <__swhatbuf_r+0x1e>
 8010e60:	2340      	movs	r3, #64	; 0x40
 8010e62:	2000      	movs	r0, #0
 8010e64:	6023      	str	r3, [r4, #0]
 8010e66:	b016      	add	sp, #88	; 0x58
 8010e68:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e6c <__smakebuf_r>:
 8010e6c:	898b      	ldrh	r3, [r1, #12]
 8010e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e70:	079d      	lsls	r5, r3, #30
 8010e72:	4606      	mov	r6, r0
 8010e74:	460c      	mov	r4, r1
 8010e76:	d507      	bpl.n	8010e88 <__smakebuf_r+0x1c>
 8010e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	6123      	str	r3, [r4, #16]
 8010e80:	2301      	movs	r3, #1
 8010e82:	6163      	str	r3, [r4, #20]
 8010e84:	b002      	add	sp, #8
 8010e86:	bd70      	pop	{r4, r5, r6, pc}
 8010e88:	ab01      	add	r3, sp, #4
 8010e8a:	466a      	mov	r2, sp
 8010e8c:	f7ff ffc8 	bl	8010e20 <__swhatbuf_r>
 8010e90:	9900      	ldr	r1, [sp, #0]
 8010e92:	4605      	mov	r5, r0
 8010e94:	4630      	mov	r0, r6
 8010e96:	f7fd fc3f 	bl	800e718 <_malloc_r>
 8010e9a:	b948      	cbnz	r0, 8010eb0 <__smakebuf_r+0x44>
 8010e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea0:	059a      	lsls	r2, r3, #22
 8010ea2:	d4ef      	bmi.n	8010e84 <__smakebuf_r+0x18>
 8010ea4:	f023 0303 	bic.w	r3, r3, #3
 8010ea8:	f043 0302 	orr.w	r3, r3, #2
 8010eac:	81a3      	strh	r3, [r4, #12]
 8010eae:	e7e3      	b.n	8010e78 <__smakebuf_r+0xc>
 8010eb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ee8 <__smakebuf_r+0x7c>)
 8010eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010eb4:	89a3      	ldrh	r3, [r4, #12]
 8010eb6:	6020      	str	r0, [r4, #0]
 8010eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ebc:	81a3      	strh	r3, [r4, #12]
 8010ebe:	9b00      	ldr	r3, [sp, #0]
 8010ec0:	6163      	str	r3, [r4, #20]
 8010ec2:	9b01      	ldr	r3, [sp, #4]
 8010ec4:	6120      	str	r0, [r4, #16]
 8010ec6:	b15b      	cbz	r3, 8010ee0 <__smakebuf_r+0x74>
 8010ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f000 f81f 	bl	8010f10 <_isatty_r>
 8010ed2:	b128      	cbz	r0, 8010ee0 <__smakebuf_r+0x74>
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	f023 0303 	bic.w	r3, r3, #3
 8010eda:	f043 0301 	orr.w	r3, r3, #1
 8010ede:	81a3      	strh	r3, [r4, #12]
 8010ee0:	89a0      	ldrh	r0, [r4, #12]
 8010ee2:	4305      	orrs	r5, r0
 8010ee4:	81a5      	strh	r5, [r4, #12]
 8010ee6:	e7cd      	b.n	8010e84 <__smakebuf_r+0x18>
 8010ee8:	0800e485 	.word	0x0800e485

08010eec <_fstat_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d07      	ldr	r5, [pc, #28]	; (8010f0c <_fstat_r+0x20>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	f7f0 f9e8 	bl	80012ce <_fstat>
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	d102      	bne.n	8010f08 <_fstat_r+0x1c>
 8010f02:	682b      	ldr	r3, [r5, #0]
 8010f04:	b103      	cbz	r3, 8010f08 <_fstat_r+0x1c>
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	bd38      	pop	{r3, r4, r5, pc}
 8010f0a:	bf00      	nop
 8010f0c:	240116f8 	.word	0x240116f8

08010f10 <_isatty_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d06      	ldr	r5, [pc, #24]	; (8010f2c <_isatty_r+0x1c>)
 8010f14:	2300      	movs	r3, #0
 8010f16:	4604      	mov	r4, r0
 8010f18:	4608      	mov	r0, r1
 8010f1a:	602b      	str	r3, [r5, #0]
 8010f1c:	f7f0 f9dc 	bl	80012d8 <_isatty>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d102      	bne.n	8010f2a <_isatty_r+0x1a>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	b103      	cbz	r3, 8010f2a <_isatty_r+0x1a>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	240116f8 	.word	0x240116f8

08010f30 <_init>:
 8010f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f32:	bf00      	nop
 8010f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f36:	bc08      	pop	{r3}
 8010f38:	469e      	mov	lr, r3
 8010f3a:	4770      	bx	lr

08010f3c <_fini>:
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	bf00      	nop
 8010f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f42:	bc08      	pop	{r3}
 8010f44:	469e      	mov	lr, r3
 8010f46:	4770      	bx	lr
